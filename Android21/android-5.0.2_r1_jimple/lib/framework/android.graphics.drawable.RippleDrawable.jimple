public class android.graphics.drawable.RippleDrawable extends android.graphics.drawable.LayerDrawable
{
    private static final android.graphics.PorterDuffXfermode DST_IN;
    private static final android.graphics.PorterDuffXfermode SRC_ATOP;
    private static final android.graphics.PorterDuffXfermode SRC_OVER;
    public static final int RADIUS_AUTO;
    private static final int MAX_RIPPLES;
    private final android.graphics.Rect mTempRect;
    private final android.graphics.Rect mHotspotBounds;
    private final android.graphics.Rect mDrawingBounds;
    private final android.graphics.Rect mDirtyBounds;
    private android.graphics.drawable.RippleDrawable$RippleState mState;
    private android.graphics.drawable.Drawable mMask;
    private android.graphics.drawable.RippleBackground mBackground;
    private boolean mBackgroundActive;
    private android.graphics.drawable.Ripple mRipple;
    private boolean mRippleActive;
    private float mPendingX;
    private float mPendingY;
    private boolean mHasPending;
    private android.graphics.drawable.Ripple[] mExitingRipples;
    private int mExitingRipplesCount;
    private android.graphics.Paint mRipplePaint;
    private android.graphics.Paint mMaskingPaint;
    private float mDensity;
    private boolean mOverrideBounds;
    private boolean mNeedsDraw;

    void <init>()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleDrawable$RippleState $r1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r1 = new android.graphics.drawable.RippleDrawable$RippleState;

        specialinvoke $r1.<android.graphics.drawable.RippleDrawable$RippleState: void <init>(android.graphics.drawable.LayerDrawable$LayerState,android.graphics.drawable.RippleDrawable,android.content.res.Resources)>(null, null, null);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void <init>(android.graphics.drawable.RippleDrawable$RippleState,android.content.res.Resources,android.content.res.Resources$Theme)>($r1, null, null);

        return;
    }

    public void <init>(android.content.res.ColorStateList, android.graphics.drawable.Drawable, android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.content.res.ColorStateList r1;
        android.graphics.drawable.Drawable r2, r3;
        android.graphics.drawable.RippleDrawable$RippleState $r4;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        r2 := @parameter1: android.graphics.drawable.Drawable;

        r3 := @parameter2: android.graphics.drawable.Drawable;

        $r4 = new android.graphics.drawable.RippleDrawable$RippleState;

        specialinvoke $r4.<android.graphics.drawable.RippleDrawable$RippleState: void <init>(android.graphics.drawable.LayerDrawable$LayerState,android.graphics.drawable.RippleDrawable,android.content.res.Resources)>(null, null, null);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void <init>(android.graphics.drawable.RippleDrawable$RippleState,android.content.res.Resources,android.content.res.Resources$Theme)>($r4, null, null);

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("RippleDrawable requires a non-null color");

        throw $r7;

     label1:
        if r2 == null goto label2;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$ChildDrawable addLayer(android.graphics.drawable.Drawable,int[],int,int,int,int,int)>(r2, null, 0, 0, 0, 0, 0);

     label2:
        if r3 == null goto label3;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$ChildDrawable addLayer(android.graphics.drawable.Drawable,int[],int,int,int,int,int)>(r3, null, 16908334, 0, 0, 0, 0);

     label3:
        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void setColor(android.content.res.ColorStateList)>(r1);

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void ensurePadding()>();

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void initializeFromState()>();

        return;
    }

    public void jumpToCurrentState()
    {
        android.graphics.drawable.RippleDrawable r0;
        boolean z0, $z1, $z2, $z3, z4;
        android.graphics.drawable.Ripple $r1, $r5, $r6;
        android.graphics.drawable.RippleBackground $r2, $r3, $r4;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void jumpToCurrentState()>();

        z0 = 0;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        if $r1 == null goto label1;

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        $z3 = virtualinvoke $r5.<android.graphics.drawable.Ripple: boolean isHardwareAnimating()>();

        z0 = z0 | $z3;

        $r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        virtualinvoke $r6.<android.graphics.drawable.Ripple: void jump()>();

     label1:
        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if $r2 == null goto label2;

        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        $z2 = virtualinvoke $r3.<android.graphics.drawable.RippleBackground: boolean isHardwareAnimating()>();

        z0 = z0 | $z2;

        $r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        virtualinvoke $r4.<android.graphics.drawable.RippleBackground: void jump()>();

     label2:
        $z1 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: boolean cancelExitingRipples()>();

        z4 = z0 | $z1;

        r0.<android.graphics.drawable.RippleDrawable: boolean mNeedsDraw> = z4;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void invalidateSelf()>();

        return;
    }

    private boolean cancelExitingRipples()
    {
        android.graphics.drawable.RippleDrawable r0;
        boolean z0, $z1;
        int i0, i1;
        android.graphics.drawable.Ripple[] r1;
        android.graphics.drawable.Ripple $r2, $r3;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        z0 = 0;

        i0 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple[] mExitingRipples>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        $z1 = virtualinvoke $r2.<android.graphics.drawable.Ripple: boolean isHardwareAnimating()>();

        z0 = z0 | $z1;

        $r3 = r1[i1];

        virtualinvoke $r3.<android.graphics.drawable.Ripple: void cancel()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        if r1 == null goto label3;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>(r1, 0, i0, null);

     label3:
        r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount> = 0;

        return z0;
    }

    public void setAlpha(int)
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        i0 := @parameter0: int;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void setAlpha(int)>(i0);

        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.ColorFilter r1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.ColorFilter;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)>(r1);

        return;
    }

    public int getOpacity()
    {
        android.graphics.drawable.RippleDrawable r0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        return -3;
    }

    protected boolean onStateChange(int[])
    {
        android.graphics.drawable.RippleDrawable r0;
        int[] r1, r2;
        boolean z0, z1, z2, z3, $z4, $z5;
        int i0, i1, i2;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: int[];

        z0 = specialinvoke r0.<android.graphics.drawable.LayerDrawable: boolean onStateChange(int[])>(r1);

        z1 = 0;

        z2 = 0;

        z3 = 0;

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label01:
        if i1 >= i0 goto label05;

        i2 = r2[i1];

        if i2 != 16842910 goto label02;

        z1 = 1;

     label02:
        if i2 != 16842908 goto label03;

        z3 = 1;

     label03:
        if i2 != 16842919 goto label04;

        z2 = 1;

     label04:
        i1 = i1 + 1;

        goto label01;

     label05:
        if z1 == 0 goto label06;

        if z2 == 0 goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void setRippleActive(boolean)>($z5);

        if z3 != 0 goto label08;

        if z1 == 0 goto label09;

        if z2 == 0 goto label09;

     label08:
        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void setBackgroundActive(boolean)>($z4);

        return z0;
    }

    private void setRippleActive(boolean)
    {
        android.graphics.drawable.RippleDrawable r0;
        boolean z0, $z1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.graphics.drawable.RippleDrawable: boolean mRippleActive>;

        if $z1 == z0 goto label2;

        r0.<android.graphics.drawable.RippleDrawable: boolean mRippleActive> = z0;

        if z0 == 0 goto label1;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void tryRippleEnter()>();

        goto label2;

     label1:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void tryRippleExit()>();

     label2:
        return;
    }

    private void setBackgroundActive(boolean)
    {
        android.graphics.drawable.RippleDrawable r0;
        boolean z0, $z1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.graphics.drawable.RippleDrawable: boolean mBackgroundActive>;

        if $z1 == z0 goto label2;

        r0.<android.graphics.drawable.RippleDrawable: boolean mBackgroundActive> = z0;

        if z0 == 0 goto label1;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void tryBackgroundEnter()>();

        goto label2;

     label1:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void tryBackgroundExit()>();

     label2:
        return;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Rect r1, $r2;
        boolean $z0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.Rect;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void onBoundsChange(android.graphics.Rect)>(r1);

        $z0 = r0.<android.graphics.drawable.RippleDrawable: boolean mOverrideBounds>;

        if $z0 != 0 goto label1;

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        virtualinvoke $r2.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void onHotspotBoundsChanged()>();

     label1:
        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void invalidateSelf()>();

        return;
    }

    public boolean setVisible(boolean, boolean)
    {
        android.graphics.drawable.RippleDrawable r0;
        boolean z0, z1, z2, $z3, $z4;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 = specialinvoke r0.<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)>(z0, z1);

        if z0 != 0 goto label1;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void clearHotspots()>();

        goto label3;

     label1:
        if z2 == 0 goto label3;

        $z3 = r0.<android.graphics.drawable.RippleDrawable: boolean mRippleActive>;

        if $z3 == 0 goto label2;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void tryRippleEnter()>();

     label2:
        $z4 = r0.<android.graphics.drawable.RippleDrawable: boolean mBackgroundActive>;

        if $z4 == 0 goto label3;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void tryBackgroundEnter()>();

     label3:
        return z2;
    }

    public boolean isProjected()
    {
        android.graphics.drawable.RippleDrawable r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $i0 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: int getNumberOfLayers()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.RippleDrawable r0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        return 1;
    }

    public void setColor(android.content.res.ColorStateList)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.content.res.ColorStateList r1;
        android.graphics.drawable.RippleDrawable$RippleState $r2;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r2.<android.graphics.drawable.RippleDrawable$RippleState: android.content.res.ColorStateList mColor> = r1;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void invalidateSelf()>();

        return;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.RippleDrawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        android.content.res.TypedArray r5;
        int[] $r6;
        android.util.DisplayMetrics $r7;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        $r6 = <com.android.internal.R$styleable: int[] RippleDrawable>;

        r5 = staticinvoke <android.graphics.drawable.RippleDrawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r4, r3, $r6);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r5);

        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void setPaddingMode(int)>(1);

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, r4);

        $r7 = virtualinvoke r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void setTargetDensity(android.util.DisplayMetrics)>($r7);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void initializeFromState()>();

        return;
    }

    public boolean setDrawableByLayerId(int, android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0;
        android.graphics.drawable.Drawable r1;
        boolean $z0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        $z0 = specialinvoke r0.<android.graphics.drawable.LayerDrawable: boolean setDrawableByLayerId(int,android.graphics.drawable.Drawable)>(i0, r1);

        if $z0 == 0 goto label2;

        if i0 != 16908334 goto label1;

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable mMask> = r1;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void setPaddingMode(int)
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        i0 := @parameter0: int;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void setPaddingMode(int)>(i0);

        return;
    }

    private void updateStateFromTypedArray(android.content.res.TypedArray) throws org.xmlpull.v1.XmlPullParserException
    {
        android.graphics.drawable.RippleDrawable r0;
        android.content.res.TypedArray r1;
        android.graphics.drawable.RippleDrawable$RippleState r2, $r5;
        android.content.res.ColorStateList r3;
        int $i0, $i1, $i2;
        int[] $r4;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $i0 = r2.<android.graphics.drawable.RippleDrawable$RippleState: int mChangingConfigurations>;

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getChangingConfigurations()>();

        $i2 = $i0 | $i1;

        r2.<android.graphics.drawable.RippleDrawable$RippleState: int mChangingConfigurations> = $i2;

        $r4 = virtualinvoke r1.<android.content.res.TypedArray: int[] extractThemeAttrs()>();

        r2.<android.graphics.drawable.RippleDrawable$RippleState: int[] mTouchThemeAttrs> = $r4;

        r3 = virtualinvoke r1.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(0);

        if r3 == null goto label1;

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r5.<android.graphics.drawable.RippleDrawable$RippleState: android.content.res.ColorStateList mColor> = r3;

     label1:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void verifyRequiredAttributes(android.content.res.TypedArray)>(r1);

        return;
    }

    private void verifyRequiredAttributes(android.content.res.TypedArray) throws org.xmlpull.v1.XmlPullParserException
    {
        android.graphics.drawable.RippleDrawable r0;
        android.content.res.TypedArray r1;
        android.graphics.drawable.RippleDrawable$RippleState $r2, $r4, $r12;
        android.content.res.ColorStateList $r3;
        int[] $r5, $r13;
        org.xmlpull.v1.XmlPullParserException $r6;
        java.lang.StringBuilder $r7, $r9, $r10;
        java.lang.String $r8, $r11;
        int $i0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.content.res.TypedArray;

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r3 = $r2.<android.graphics.drawable.RippleDrawable$RippleState: android.content.res.ColorStateList mColor>;

        if $r3 != null goto label2;

        $r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r5 = $r4.<android.graphics.drawable.RippleDrawable$RippleState: int[] mTouchThemeAttrs>;

        if $r5 == null goto label1;

        $r12 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r13 = $r12.<android.graphics.drawable.RippleDrawable$RippleState: int[] mTouchThemeAttrs>;

        $i0 = $r13[0];

        if $i0 != 0 goto label2;

     label1:
        $r6 = new org.xmlpull.v1.XmlPullParserException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getPositionDescription()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": <ripple> requires a valid color attribute");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label2:
        return;
    }

    private void setTargetDensity(android.util.DisplayMetrics)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.util.DisplayMetrics r1;
        float $f0, $f1, $f2;
        byte $b0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.util.DisplayMetrics;

        $f1 = r0.<android.graphics.drawable.RippleDrawable: float mDensity>;

        $f0 = r1.<android.util.DisplayMetrics: float density>;

        $b0 = $f1 cmpl $f0;

        if $b0 == 0 goto label1;

        $f2 = r1.<android.util.DisplayMetrics: float density>;

        r0.<android.graphics.drawable.RippleDrawable: float mDensity> = $f2;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void applyTheme(android.content.res.Resources$Theme)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.content.res.Resources$Theme r1;
        android.graphics.drawable.RippleDrawable$RippleState r2;
        android.content.res.TypedArray r3;
        org.xmlpull.v1.XmlPullParserException r4, $r9;
        java.lang.Throwable r5, $r11;
        int[] $r6, $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void applyTheme(android.content.res.Resources$Theme)>(r1);

        r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        if r2 == null goto label1;

        $r6 = r2.<android.graphics.drawable.RippleDrawable$RippleState: int[] mTouchThemeAttrs>;

        if $r6 != null goto label2;

     label1:
        return;

     label2:
        $r8 = r2.<android.graphics.drawable.RippleDrawable$RippleState: int[] mTouchThemeAttrs>;

        $r7 = <com.android.internal.R$styleable: int[] RippleDrawable>;

        r3 = virtualinvoke r1.<android.content.res.Resources$Theme: android.content.res.TypedArray resolveAttributes(int[],int[])>($r8, $r7);

     label3:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void updateStateFromTypedArray(android.content.res.TypedArray)>(r3);

     label4:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        goto label8;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r4);

        throw $r10;

     label6:
        $r11 := @caughtexception;

        r5 = $r11;

     label7:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        throw r5;

     label8:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void initializeFromState()>();

        return;

        catch org.xmlpull.v1.XmlPullParserException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    public boolean canApplyTheme()
    {
        android.graphics.drawable.RippleDrawable r0;
        boolean $z0, $z1;
        android.graphics.drawable.RippleDrawable$RippleState $r1, $r2;
        int[] $r3;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $z0 = specialinvoke r0.<android.graphics.drawable.LayerDrawable: boolean canApplyTheme()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        if $r1 == null goto label2;

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r3 = $r2.<android.graphics.drawable.RippleDrawable$RippleState: int[] mTouchThemeAttrs>;

        if $r3 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public void setHotspot(float, float)
    {
        android.graphics.drawable.RippleDrawable r0;
        float f0, f1;
        android.graphics.drawable.Ripple $r1, $r2, $r3;
        android.graphics.drawable.RippleBackground $r4;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        if $r1 == null goto label1;

        $r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if $r4 != null goto label2;

     label1:
        r0.<android.graphics.drawable.RippleDrawable: float mPendingX> = f0;

        r0.<android.graphics.drawable.RippleDrawable: float mPendingY> = f1;

        r0.<android.graphics.drawable.RippleDrawable: boolean mHasPending> = 1;

     label2:
        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        if $r2 == null goto label3;

        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        virtualinvoke $r3.<android.graphics.drawable.Ripple: void move(float,float)>(f0, f1);

     label3:
        return;
    }

    private void tryBackgroundEnter()
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0, $i1;
        android.graphics.drawable.RippleBackground $r1, $r6, $r7, $r8;
        android.graphics.drawable.RippleDrawable$RippleState $r2, $r5;
        android.content.res.ColorStateList $r3;
        int[] $r4;
        float $f0;
        android.graphics.Rect $r9;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if $r1 != null goto label1;

        $r8 = new android.graphics.drawable.RippleBackground;

        $r9 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        specialinvoke $r8.<android.graphics.drawable.RippleBackground: void <init>(android.graphics.drawable.RippleDrawable,android.graphics.Rect)>(r0, $r9);

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground> = $r8;

     label1:
        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r3 = $r2.<android.graphics.drawable.RippleDrawable$RippleState: android.content.res.ColorStateList mColor>;

        $r4 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: int[] getState()>();

        i0 = virtualinvoke $r3.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r4, 0);

        $r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $i1 = $r5.<android.graphics.drawable.RippleDrawable$RippleState: int mMaxRadius>;

        $f0 = r0.<android.graphics.drawable.RippleDrawable: float mDensity>;

        virtualinvoke $r6.<android.graphics.drawable.RippleBackground: void setup(int,int,float)>($i1, i0, $f0);

        $r7 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        virtualinvoke $r7.<android.graphics.drawable.RippleBackground: void enter()>();

        return;
    }

    private void tryBackgroundExit()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleBackground $r1, $r2;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if $r1 == null goto label1;

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        virtualinvoke $r2.<android.graphics.drawable.RippleBackground: void exit()>();

     label1:
        return;
    }

    private void tryRippleEnter()
    {
        android.graphics.drawable.RippleDrawable r0;
        float f0, f1, $f2;
        int $i0, $i1, i2;
        android.graphics.drawable.Ripple $r1, $r6, $r7, $r10;
        android.graphics.drawable.RippleDrawable$RippleState $r2, $r5;
        android.content.res.ColorStateList $r3;
        int[] $r4;
        boolean $z0;
        android.graphics.Rect $r8, $r9, $r11;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $i0 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        if $i0 < 10 goto label1;

        return;

     label1:
        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        if $r1 != null goto label4;

        $z0 = r0.<android.graphics.drawable.RippleDrawable: boolean mHasPending>;

        if $z0 == 0 goto label2;

        r0.<android.graphics.drawable.RippleDrawable: boolean mHasPending> = 0;

        f0 = r0.<android.graphics.drawable.RippleDrawable: float mPendingX>;

        f1 = r0.<android.graphics.drawable.RippleDrawable: float mPendingY>;

        goto label3;

     label2:
        $r8 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        f0 = virtualinvoke $r8.<android.graphics.Rect: float exactCenterX()>();

        $r9 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        f1 = virtualinvoke $r9.<android.graphics.Rect: float exactCenterY()>();

     label3:
        $r10 = new android.graphics.drawable.Ripple;

        $r11 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        specialinvoke $r10.<android.graphics.drawable.Ripple: void <init>(android.graphics.drawable.RippleDrawable,android.graphics.Rect,float,float)>(r0, $r11, f0, f1);

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple> = $r10;

     label4:
        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r3 = $r2.<android.graphics.drawable.RippleDrawable$RippleState: android.content.res.ColorStateList mColor>;

        $r4 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: int[] getState()>();

        i2 = virtualinvoke $r3.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r4, 0);

        $r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $i1 = $r5.<android.graphics.drawable.RippleDrawable$RippleState: int mMaxRadius>;

        $f2 = r0.<android.graphics.drawable.RippleDrawable: float mDensity>;

        virtualinvoke $r6.<android.graphics.drawable.Ripple: void setup(int,int,float)>($i1, i2, $f2);

        $r7 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        virtualinvoke $r7.<android.graphics.drawable.Ripple: void enter()>();

        return;
    }

    private void tryRippleExit()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.Ripple $r1, $r4, $r5;
        android.graphics.drawable.Ripple[] $r2, $r3, $r6;
        int $i0, $i1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        if $r1 == null goto label2;

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple[] mExitingRipples>;

        if $r2 != null goto label1;

        $r6 = newarray (android.graphics.drawable.Ripple)[10];

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple[] mExitingRipples> = $r6;

     label1:
        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple[] mExitingRipples>;

        $i0 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        $i1 = $i0 + 1;

        r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount> = $i1;

        $r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        $r3[$i0] = $r4;

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        virtualinvoke $r5.<android.graphics.drawable.Ripple: void exit()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple> = null;

     label2:
        return;
    }

    private void clearHotspots()
    {
        android.graphics.drawable.RippleDrawable r0;
        boolean z0, $z1, $z2, $z3, z4;
        android.graphics.drawable.Ripple $r1, $r5, $r6;
        android.graphics.drawable.RippleBackground $r2, $r3, $r4;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        z0 = 0;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        if $r1 == null goto label1;

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        $z3 = virtualinvoke $r5.<android.graphics.drawable.Ripple: boolean isHardwareAnimating()>();

        z0 = z0 | $z3;

        $r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        virtualinvoke $r6.<android.graphics.drawable.Ripple: void cancel()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple> = null;

     label1:
        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if $r2 == null goto label2;

        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        $z2 = virtualinvoke $r3.<android.graphics.drawable.RippleBackground: boolean isHardwareAnimating()>();

        z0 = z0 | $z2;

        $r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        virtualinvoke $r4.<android.graphics.drawable.RippleBackground: void cancel()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground> = null;

     label2:
        $z1 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: boolean cancelExitingRipples()>();

        z4 = z0 | $z1;

        r0.<android.graphics.drawable.RippleDrawable: boolean mNeedsDraw> = z4;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void invalidateSelf()>();

        return;
    }

    public void setHotspotBounds(int, int, int, int)
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0, i1, i2, i3;
        android.graphics.Rect $r1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r0.<android.graphics.drawable.RippleDrawable: boolean mOverrideBounds> = 1;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3);

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void onHotspotBoundsChanged()>();

        return;
    }

    public void getHotspotBounds(android.graphics.Rect)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Rect r1, $r2;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        return;
    }

    private void onHotspotBoundsChanged()
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0, i1;
        android.graphics.drawable.Ripple[] r1;
        android.graphics.drawable.Ripple $r2, $r5, $r6;
        android.graphics.drawable.RippleBackground $r3, $r4;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        i0 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple[] mExitingRipples>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r6 = r1[i1];

        virtualinvoke $r6.<android.graphics.drawable.Ripple: void onHotspotBoundsChanged()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        if $r2 == null goto label3;

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        virtualinvoke $r5.<android.graphics.drawable.Ripple: void onHotspotBoundsChanged()>();

     label3:
        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if $r3 == null goto label4;

        $r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        virtualinvoke $r4.<android.graphics.drawable.RippleBackground: void onHotspotBoundsChanged()>();

     label4:
        return;
    }

    public void getOutline(android.graphics.Outline)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Outline r1;
        android.graphics.drawable.LayerDrawable$LayerState r2;
        android.graphics.drawable.LayerDrawable$ChildDrawable[] r3;
        int i0, i1, $i2;
        android.graphics.drawable.LayerDrawable$ChildDrawable $r4, $r5;
        android.graphics.drawable.Drawable $r6;
        boolean $z0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.Outline;

        r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$LayerState mLayerState>;

        r3 = r2.<android.graphics.drawable.LayerDrawable$LayerState: android.graphics.drawable.LayerDrawable$ChildDrawable[] mChildren>;

        i0 = r2.<android.graphics.drawable.LayerDrawable$LayerState: int mNum>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r3[i1];

        $i2 = $r4.<android.graphics.drawable.LayerDrawable$ChildDrawable: int mId>;

        if $i2 == 16908334 goto label2;

        $r5 = r3[i1];

        $r6 = $r5.<android.graphics.drawable.LayerDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r6.<android.graphics.drawable.Drawable: void getOutline(android.graphics.Outline)>(r1);

        $z0 = virtualinvoke r1.<android.graphics.Outline: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Canvas r1;
        boolean z0, z1, z2, $z4, $z5, $z6, $z7;
        android.graphics.Rect r2;
        int i0, i1, i2, i3, $i4, $i7;
        android.graphics.PorterDuffXfermode r3, $r6, $r7, $r8, $r9;
        android.graphics.drawable.Drawable $r4, $r10;
        android.graphics.drawable.LayerDrawable$LayerState $r5;
        byte $b8;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        $r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable mMask>;

        if $r4 == null goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        z0 = $z7;

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$LayerState mLayerState>;

        $i4 = $r5.<android.graphics.drawable.LayerDrawable$LayerState: int mNum>;

        if z0 == 0 goto label03;

        $b8 = 1;

        goto label04;

     label03:
        $b8 = 0;

     label04:
        if $i4 <= $b8 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        z1 = $z6;

        if z0 == 0 goto label07;

        $r10 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable mMask>;

        $i7 = virtualinvoke $r10.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i7 == -1 goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        z2 = $z5;

        r2 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect getDirtyBounds()>();

        i0 = virtualinvoke r1.<android.graphics.Canvas: int save(int)>(2);

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>(r2);

        if z1 == 0 goto label09;

        $r8 = <android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffXfermode SRC_OVER>;

        i1 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: int drawContentLayer(android.graphics.Canvas,android.graphics.Rect,android.graphics.PorterDuffXfermode)>(r1, r2, $r8);

        goto label10;

     label09:
        i1 = -1;

     label10:
        if z0 != 0 goto label11;

        if z1 != 0 goto label12;

     label11:
        $r9 = <android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffXfermode SRC_OVER>;

        goto label13;

     label12:
        $r9 = <android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffXfermode SRC_ATOP>;

     label13:
        r3 = $r9;

        i2 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: int drawBackgroundLayer(android.graphics.Canvas,android.graphics.Rect,android.graphics.PorterDuffXfermode,boolean)>(r1, r2, r3, z2);

        if i2 < 0 goto label15;

        if z2 == 0 goto label14;

        $r7 = <android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffXfermode DST_IN>;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: int drawMaskingLayer(android.graphics.Canvas,android.graphics.Rect,android.graphics.PorterDuffXfermode)>(r1, r2, $r7);

     label14:
        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i2);

     label15:
        i3 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: int drawRippleLayer(android.graphics.Canvas,android.graphics.Rect,android.graphics.PorterDuffXfermode)>(r1, r2, r3);

        if i3 < 0 goto label17;

        if z2 == 0 goto label16;

        $r6 = <android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffXfermode DST_IN>;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: int drawMaskingLayer(android.graphics.Canvas,android.graphics.Rect,android.graphics.PorterDuffXfermode)>(r1, r2, $r6);

     label16:
        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i3);

     label17:
        if i1 >= 0 goto label18;

        if i2 >= 0 goto label18;

        if i3 >= 0 goto label18;

        $z4 = r0.<android.graphics.drawable.RippleDrawable: boolean mNeedsDraw>;

        if $z4 == 0 goto label18;

        virtualinvoke r1.<android.graphics.Canvas: void drawColor(int)>(0);

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void invalidateSelf()>();

     label18:
        r0.<android.graphics.drawable.RippleDrawable: boolean mNeedsDraw> = 0;

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i0);

        return;
    }

    void removeRipple(android.graphics.drawable.Ripple)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.Ripple r1;
        android.graphics.drawable.Ripple[] r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.drawable.Ripple;

        r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple[] mExitingRipples>;

        i0 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        i1 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: int getRippleIndex(android.graphics.drawable.Ripple)>(r1);

        if i1 < 0 goto label1;

        $i4 = i1 + 1;

        $i2 = i1 + 1;

        $i3 = i0 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i4, r2, i1, $i3);

        $i5 = i0 - 1;

        r2[$i5] = null;

        $i6 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        $i7 = $i6 - 1;

        r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount> = $i7;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    private int getRippleIndex(android.graphics.drawable.Ripple)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.Ripple r1, $r3;
        android.graphics.drawable.Ripple[] r2;
        int i0, i1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.drawable.Ripple;

        r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple[] mExitingRipples>;

        i0 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r2[i1];

        if $r3 != r1 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private int drawContentLayer(android.graphics.Canvas, android.graphics.Rect, android.graphics.PorterDuffXfermode)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        android.graphics.PorterDuffXfermode r3;
        android.graphics.drawable.LayerDrawable$ChildDrawable[] r4;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        boolean z0;
        android.graphics.drawable.LayerDrawable$LayerState $r5, $r6;
        android.graphics.drawable.Drawable $r7, $r10, $r12;
        android.graphics.drawable.LayerDrawable$ChildDrawable $r8, $r9, $r11, $r13;
        float $f0, $f1, $f2, $f3;
        android.graphics.drawable.RippleBackground $r14;
        android.graphics.Paint r15;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.PorterDuffXfermode;

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$LayerState mLayerState>;

        r4 = $r5.<android.graphics.drawable.LayerDrawable$LayerState: android.graphics.drawable.LayerDrawable$ChildDrawable[] mChildren>;

        $r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$LayerState mLayerState>;

        i0 = $r6.<android.graphics.drawable.LayerDrawable$LayerState: int mNum>;

        z0 = 0;

        $i4 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        if $i4 > 0 goto label1;

        $r14 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if $r14 == null goto label4;

     label1:
        $r7 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable mMask>;

        if $r7 != null goto label4;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $r11 = r4[i1];

        $i11 = $r11.<android.graphics.drawable.LayerDrawable$ChildDrawable: int mId>;

        if $i11 == 16908334 goto label3;

        $r13 = r4[i1];

        $r12 = $r13.<android.graphics.drawable.LayerDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        $i12 = virtualinvoke $r12.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i12 == -1 goto label3;

        z0 = 1;

        goto label4;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        r15 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint getMaskingPaint(android.graphics.PorterDuffXfermode)>(r3);

        if z0 == 0 goto label5;

        $i6 = r2.<android.graphics.Rect: int left>;

        $f3 = (float) $i6;

        $i8 = r2.<android.graphics.Rect: int top>;

        $f1 = (float) $i8;

        $i7 = r2.<android.graphics.Rect: int right>;

        $f2 = (float) $i7;

        $i9 = r2.<android.graphics.Rect: int bottom>;

        $f0 = (float) $i9;

        $i10 = virtualinvoke r1.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint)>($f3, $f1, $f2, $f0, r15);

        goto label6;

     label5:
        $i10 = -1;

     label6:
        i2 = $i10;

        i3 = 0;

     label7:
        if i3 >= i0 goto label9;

        $r8 = r4[i3];

        $i5 = $r8.<android.graphics.drawable.LayerDrawable$ChildDrawable: int mId>;

        if $i5 == 16908334 goto label8;

        $r9 = r4[i3];

        $r10 = $r9.<android.graphics.drawable.LayerDrawable$ChildDrawable: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r10.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label8:
        i3 = i3 + 1;

        goto label7;

     label9:
        return i2;
    }

    private int drawBackgroundLayer(android.graphics.Canvas, android.graphics.Rect, android.graphics.PorterDuffXfermode, boolean)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2, $r7, $r8;
        android.graphics.PorterDuffXfermode r3, $r11;
        boolean z0, $z1;
        int i0, $i1, $i2, $i3, $i4;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.graphics.drawable.RippleBackground $r4, $r5, $r9;
        android.graphics.Paint $r6, $r10;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.PorterDuffXfermode;

        z0 := @parameter3: boolean;

        i0 = -1;

        $r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if $r4 == null goto label3;

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        $z1 = virtualinvoke $r5.<android.graphics.drawable.RippleBackground: boolean shouldDraw()>();

        if $z1 == 0 goto label3;

        if z0 != 0 goto label1;

        $r11 = <android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffXfermode SRC_OVER>;

        if r3 == $r11 goto label2;

     label1:
        $i1 = r2.<android.graphics.Rect: int left>;

        $f2 = (float) $i1;

        $i2 = r2.<android.graphics.Rect: int top>;

        $f4 = (float) $i2;

        $i3 = r2.<android.graphics.Rect: int right>;

        $f3 = (float) $i3;

        $i4 = r2.<android.graphics.Rect: int bottom>;

        $f5 = (float) $i4;

        $r6 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint getMaskingPaint(android.graphics.PorterDuffXfermode)>(r3);

        i0 = virtualinvoke r1.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint)>($f2, $f4, $f3, $f5, $r6);

     label2:
        $r7 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        f0 = virtualinvoke $r7.<android.graphics.Rect: float exactCenterX()>();

        $r8 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        f1 = virtualinvoke $r8.<android.graphics.Rect: float exactCenterY()>();

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>(f0, f1);

        $r9 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        $r10 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint getRipplePaint()>();

        virtualinvoke $r9.<android.graphics.drawable.RippleBackground: boolean draw(android.graphics.Canvas,android.graphics.Paint)>(r1, $r10);

        $f6 = neg f0;

        $f7 = neg f1;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f6, $f7);

     label3:
        return i0;
    }

    private int drawRippleLayer(android.graphics.Canvas, android.graphics.Rect, android.graphics.PorterDuffXfermode)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2, $r12, $r13;
        android.graphics.PorterDuffXfermode r3;
        boolean z0, $z1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10;
        android.graphics.drawable.Ripple[] r4;
        android.graphics.drawable.Ripple r5, $r7;
        android.graphics.Paint r6, $r8;
        android.content.res.ColorStateList $r9;
        android.graphics.drawable.RippleDrawable$RippleState $r10;
        int[] $r11;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.PorterDuffXfermode;

        z0 = 0;

        i0 = -1;

        i1 = -1;

        i2 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple[] mExitingRipples>;

        i3 = 0;

     label1:
        if i3 > i2 goto label6;

        if i3 >= i2 goto label2;

        r5 = r4[i3];

        goto label3;

     label2:
        $r7 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

        if $r7 == null goto label5;

        r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple mRipple>;

     label3:
        if i0 >= 0 goto label4;

        r6 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint getMaskingPaint(android.graphics.PorterDuffXfermode)>(r3);

        $r10 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r9 = $r10.<android.graphics.drawable.RippleDrawable$RippleState: android.content.res.ColorStateList mColor>;

        $r11 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: int[] getState()>();

        i4 = virtualinvoke $r9.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r11, 0);

        i5 = staticinvoke <android.graphics.Color: int alpha(int)>(i4);

        $i6 = i5 / 2;

        virtualinvoke r6.<android.graphics.Paint: void setAlpha(int)>($i6);

        $i8 = r2.<android.graphics.Rect: int left>;

        $f2 = (float) $i8;

        $i7 = r2.<android.graphics.Rect: int top>;

        $f3 = (float) $i7;

        $i10 = r2.<android.graphics.Rect: int right>;

        $f0 = (float) $i10;

        $i9 = r2.<android.graphics.Rect: int bottom>;

        $f1 = (float) $i9;

        i0 = virtualinvoke r1.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint)>($f2, $f3, $f0, $f1, r6);

        i1 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $r12 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        $f4 = virtualinvoke $r12.<android.graphics.Rect: float exactCenterX()>();

        $r13 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        $f5 = virtualinvoke $r13.<android.graphics.Rect: float exactCenterY()>();

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f4, $f5);

     label4:
        $r8 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint getRipplePaint()>();

        $z1 = virtualinvoke r5.<android.graphics.drawable.Ripple: boolean draw(android.graphics.Canvas,android.graphics.Paint)>(r1, $r8);

        z0 = z0 | $z1;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        if i1 < 0 goto label7;

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i1);

     label7:
        if i0 < 0 goto label8;

        if z0 != 0 goto label8;

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i0);

        i0 = -1;

     label8:
        return i0;
    }

    private int drawMaskingLayer(android.graphics.Canvas, android.graphics.Rect, android.graphics.PorterDuffXfermode)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        android.graphics.PorterDuffXfermode r3;
        int i0, $i1, $i2, $i3, $i4;
        float $f0, $f1, $f2, $f3;
        android.graphics.Paint $r4;
        android.graphics.drawable.Drawable $r5;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.PorterDuffXfermode;

        $i1 = r2.<android.graphics.Rect: int left>;

        $f0 = (float) $i1;

        $i2 = r2.<android.graphics.Rect: int top>;

        $f1 = (float) $i2;

        $i3 = r2.<android.graphics.Rect: int right>;

        $f2 = (float) $i3;

        $i4 = r2.<android.graphics.Rect: int bottom>;

        $f3 = (float) $i4;

        $r4 = specialinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint getMaskingPaint(android.graphics.PorterDuffXfermode)>(r3);

        i0 = virtualinvoke r1.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $f3, $r4);

        virtualinvoke r1.<android.graphics.Canvas: void drawColor(int)>(0);

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable mMask>;

        virtualinvoke $r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        return i0;
    }

    private android.graphics.Paint getRipplePaint()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Paint $r1, $r2, $r3, $r4;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint mRipplePaint>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint mRipplePaint> = $r3;

        $r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint mRipplePaint>;

        virtualinvoke $r4.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

     label1:
        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint mRipplePaint>;

        return $r2;
    }

    private android.graphics.Paint getMaskingPaint(android.graphics.PorterDuffXfermode)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.PorterDuffXfermode r1;
        android.graphics.Paint $r2, $r3, $r5, $r6, $r7;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.PorterDuffXfermode;

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint mMaskingPaint>;

        if $r2 != null goto label1;

        $r7 = new android.graphics.Paint;

        specialinvoke $r7.<android.graphics.Paint: void <init>()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint mMaskingPaint> = $r7;

     label1:
        $r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint mMaskingPaint>;

        virtualinvoke $r3.<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>(r1);

        $r5 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint mMaskingPaint>;

        virtualinvoke $r5.<android.graphics.Paint: void setAlpha(int)>(255);

        $r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Paint mMaskingPaint>;

        return $r6;
    }

    public android.graphics.Rect getDirtyBounds()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.Rect r1, r2, r3, $r5, $r6, $r7, $r8;
        int i0, i1, i2, i3;
        android.graphics.drawable.Ripple[] r4;
        boolean $z0;
        float $f0, $f1;
        android.graphics.drawable.Ripple $r9;
        android.graphics.drawable.RippleBackground r10;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $z0 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: boolean isProjected()>();

        if $z0 == 0 goto label4;

        r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mDrawingBounds>;

        r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mDirtyBounds>;

        virtualinvoke r2.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

        $r6 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        $f0 = virtualinvoke $r6.<android.graphics.Rect: float exactCenterX()>();

        i0 = (int) $f0;

        $r7 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds>;

        $f1 = virtualinvoke $r7.<android.graphics.Rect: float exactCenterY()>();

        i1 = (int) $f1;

        r3 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mTempRect>;

        r4 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Ripple[] mExitingRipples>;

        i2 = r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount>;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $r9 = r4[i3];

        virtualinvoke $r9.<android.graphics.drawable.Ripple: void getBounds(android.graphics.Rect)>(r3);

        virtualinvoke r3.<android.graphics.Rect: void offset(int,int)>(i0, i1);

        virtualinvoke r1.<android.graphics.Rect: void union(android.graphics.Rect)>(r3);

        i3 = i3 + 1;

        goto label1;

     label2:
        r10 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleBackground mBackground>;

        if r10 == null goto label3;

        virtualinvoke r10.<android.graphics.drawable.RippleBackground: void getBounds(android.graphics.Rect)>(r3);

        virtualinvoke r3.<android.graphics.Rect: void offset(int,int)>(i0, i1);

        virtualinvoke r1.<android.graphics.Rect: void union(android.graphics.Rect)>(r3);

     label3:
        virtualinvoke r2.<android.graphics.Rect: void union(android.graphics.Rect)>(r1);

        $r8 = specialinvoke r0.<android.graphics.drawable.LayerDrawable: android.graphics.Rect getDirtyBounds()>();

        virtualinvoke r2.<android.graphics.Rect: void union(android.graphics.Rect)>($r8);

        return r2;

     label4:
        $r5 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect getBounds()>();

        return $r5;
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleDrawable$RippleState $r1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        return $r1;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.LayerDrawable$LayerState $r2;
        android.graphics.drawable.RippleDrawable$RippleState $r3;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable mutate()>();

        $r2 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$LayerState mLayerState>;

        $r3 = (android.graphics.drawable.RippleDrawable$RippleState) $r2;

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState> = $r3;

        return r0;
    }

    android.graphics.drawable.RippleDrawable$RippleState createConstantState(android.graphics.drawable.LayerDrawable$LayerState, android.content.res.Resources)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.LayerDrawable$LayerState r1;
        android.content.res.Resources r2;
        android.graphics.drawable.RippleDrawable$RippleState $r3;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.drawable.LayerDrawable$LayerState;

        r2 := @parameter1: android.content.res.Resources;

        $r3 = new android.graphics.drawable.RippleDrawable$RippleState;

        specialinvoke $r3.<android.graphics.drawable.RippleDrawable$RippleState: void <init>(android.graphics.drawable.LayerDrawable$LayerState,android.graphics.drawable.RippleDrawable,android.content.res.Resources)>(r1, r0, r2);

        return $r3;
    }

    public void setMaxRadius(int)
    {
        android.graphics.drawable.RippleDrawable r0;
        int i0;
        android.graphics.drawable.RippleDrawable$RippleState $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        i0 := @parameter0: int;

        if i0 == -1 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxRadius must be RADIUS_AUTO or >= 0");

        throw $r2;

     label1:
        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $r1.<android.graphics.drawable.RippleDrawable$RippleState: int mMaxRadius> = i0;

        return;
    }

    public int getMaxRadius()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleDrawable$RippleState $r1;
        int $i0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r1 = r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState>;

        $i0 = $r1.<android.graphics.drawable.RippleDrawable$RippleState: int mMaxRadius>;

        return $i0;
    }

    private void <init>(android.graphics.drawable.RippleDrawable$RippleState, android.content.res.Resources, android.content.res.Resources$Theme)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleDrawable$RippleState r1, r4, $r9, $r11, $r12;
        android.content.res.Resources r2;
        android.content.res.Resources$Theme r3;
        boolean z0, $z1;
        android.graphics.Rect $r5, $r6, $r7, $r8;
        int $i0;
        android.util.DisplayMetrics $r10;
        float $f0;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.drawable.RippleDrawable$RippleState;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.LayerDrawable: void <init>()>();

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mTempRect> = $r5;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mHotspotBounds> = $r6;

        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mDrawingBounds> = $r7;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.Rect mDirtyBounds> = $r8;

        r0.<android.graphics.drawable.RippleDrawable: int mExitingRipplesCount> = 0;

        r0.<android.graphics.drawable.RippleDrawable: float mDensity> = 1.0F;

        z0 = 0;

        if r3 == null goto label1;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<android.graphics.drawable.RippleDrawable$RippleState: boolean canApplyTheme()>();

        if $z1 == 0 goto label1;

        $r12 = new android.graphics.drawable.RippleDrawable$RippleState;

        specialinvoke $r12.<android.graphics.drawable.RippleDrawable$RippleState: void <init>(android.graphics.drawable.LayerDrawable$LayerState,android.graphics.drawable.RippleDrawable,android.content.res.Resources)>(r1, r0, r2);

        r4 = $r12;

        z0 = 1;

        goto label3;

     label1:
        if r1 != null goto label2;

        $r11 = new android.graphics.drawable.RippleDrawable$RippleState;

        specialinvoke $r11.<android.graphics.drawable.RippleDrawable$RippleState: void <init>(android.graphics.drawable.LayerDrawable$LayerState,android.graphics.drawable.RippleDrawable,android.content.res.Resources)>(null, r0, r2);

        r4 = $r11;

        goto label3;

     label2:
        $r9 = new android.graphics.drawable.RippleDrawable$RippleState;

        specialinvoke $r9.<android.graphics.drawable.RippleDrawable$RippleState: void <init>(android.graphics.drawable.LayerDrawable$LayerState,android.graphics.drawable.RippleDrawable,android.content.res.Resources)>(r1, r0, r2);

        r4 = $r9;

     label3:
        if r2 == null goto label4;

        $r10 = virtualinvoke r2.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f0 = $r10.<android.util.DisplayMetrics: float density>;

        r0.<android.graphics.drawable.RippleDrawable: float mDensity> = $f0;

     label4:
        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState mState> = r4;

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.LayerDrawable$LayerState mLayerState> = r4;

        $i0 = r4.<android.graphics.drawable.RippleDrawable$RippleState: int mNum>;

        if $i0 <= 0 goto label5;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void ensurePadding()>();

     label5:
        if z0 == 0 goto label6;

        virtualinvoke r0.<android.graphics.drawable.RippleDrawable: void applyTheme(android.content.res.Resources$Theme)>(r3);

     label6:
        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void initializeFromState()>();

        return;
    }

    private void initializeFromState()
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        $r1 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable findDrawableByLayerId(int)>(16908334);

        r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.Drawable mMask> = $r1;

        return;
    }

    volatile android.graphics.drawable.LayerDrawable$LayerState createConstantState(android.graphics.drawable.LayerDrawable$LayerState, android.content.res.Resources)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.LayerDrawable$LayerState r1;
        android.content.res.Resources r2;
        android.graphics.drawable.RippleDrawable$RippleState $r3;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.drawable.LayerDrawable$LayerState;

        r2 := @parameter1: android.content.res.Resources;

        $r3 = virtualinvoke r0.<android.graphics.drawable.RippleDrawable: android.graphics.drawable.RippleDrawable$RippleState createConstantState(android.graphics.drawable.LayerDrawable$LayerState,android.content.res.Resources)>(r1, r2);

        return $r3;
    }

    void <init>(android.graphics.drawable.RippleDrawable$RippleState, android.content.res.Resources, android.content.res.Resources$Theme, android.graphics.drawable.RippleDrawable$1)
    {
        android.graphics.drawable.RippleDrawable r0;
        android.graphics.drawable.RippleDrawable$RippleState r1;
        android.content.res.Resources r2;
        android.content.res.Resources$Theme r3;
        android.graphics.drawable.RippleDrawable$1 r4;

        r0 := @this: android.graphics.drawable.RippleDrawable;

        r1 := @parameter0: android.graphics.drawable.RippleDrawable$RippleState;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: android.content.res.Resources$Theme;

        r4 := @parameter3: android.graphics.drawable.RippleDrawable$1;

        specialinvoke r0.<android.graphics.drawable.RippleDrawable: void <init>(android.graphics.drawable.RippleDrawable$RippleState,android.content.res.Resources,android.content.res.Resources$Theme)>(r1, r2, r3);

        return;
    }

    static void <clinit>()
    {
        android.graphics.PorterDuffXfermode $r0, $r2, $r4;
        android.graphics.PorterDuff$Mode $r1, $r3, $r5;

        <android.graphics.drawable.RippleDrawable: int MAX_RIPPLES> = 10;

        <android.graphics.drawable.RippleDrawable: int RADIUS_AUTO> = -1;

        $r0 = new android.graphics.PorterDuffXfermode;

        $r1 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode DST_IN>;

        specialinvoke $r0.<android.graphics.PorterDuffXfermode: void <init>(android.graphics.PorterDuff$Mode)>($r1);

        <android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffXfermode DST_IN> = $r0;

        $r2 = new android.graphics.PorterDuffXfermode;

        $r3 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_ATOP>;

        specialinvoke $r2.<android.graphics.PorterDuffXfermode: void <init>(android.graphics.PorterDuff$Mode)>($r3);

        <android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffXfermode SRC_ATOP> = $r2;

        $r4 = new android.graphics.PorterDuffXfermode;

        $r5 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_OVER>;

        specialinvoke $r4.<android.graphics.PorterDuffXfermode: void <init>(android.graphics.PorterDuff$Mode)>($r5);

        <android.graphics.drawable.RippleDrawable: android.graphics.PorterDuffXfermode SRC_OVER> = $r4;

        return;
    }
}
