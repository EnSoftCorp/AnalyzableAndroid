public class android.util.NtpTrustedTime extends java.lang.Object implements android.util.TrustedTime
{
    private static final java.lang.String TAG;
    private static final boolean LOGD;
    private static android.util.NtpTrustedTime sSingleton;
    private final java.lang.String mServer;
    private final long mTimeout;
    private boolean mHasCache;
    private long mCachedNtpTime;
    private long mCachedNtpElapsedRealtime;
    private long mCachedNtpCertainty;

    private void <init>(java.lang.String, long)
    {
        android.util.NtpTrustedTime r0;
        java.lang.String r1;
        long l0;

        r0 := @this: android.util.NtpTrustedTime;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.util.NtpTrustedTime: java.lang.String mServer> = r1;

        r0.<android.util.NtpTrustedTime: long mTimeout> = l0;

        return;
    }

    public static synchronized android.util.NtpTrustedTime getInstance(android.content.Context)
    {
        android.content.Context r0;
        android.content.res.Resources r1;
        android.content.ContentResolver r2;
        java.lang.String r3, r4, r5, $r8;
        long l0, l1;
        android.util.NtpTrustedTime $r6, $r7, $r9;
        int $i2;

        r0 := @parameter0: android.content.Context;

        $r6 = <android.util.NtpTrustedTime: android.util.NtpTrustedTime sSingleton>;

        if $r6 != null goto label3;

        r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r3 = virtualinvoke r1.<android.content.res.Resources: java.lang.String getString(int)>(17039412);

        $i2 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694821);

        l0 = (long) $i2;

        r4 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(r2, "ntp_server");

        l1 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>(r2, "ntp_timeout", l0);

        if r4 == null goto label1;

        $r8 = r4;

        goto label2;

     label1:
        $r8 = r3;

     label2:
        r5 = $r8;

        $r9 = new android.util.NtpTrustedTime;

        specialinvoke $r9.<android.util.NtpTrustedTime: void <init>(java.lang.String,long)>(r5, l1);

        <android.util.NtpTrustedTime: android.util.NtpTrustedTime sSingleton> = $r9;

     label3:
        $r7 = <android.util.NtpTrustedTime: android.util.NtpTrustedTime sSingleton>;

        return $r7;
    }

    public boolean forceRefresh()
    {
        android.util.NtpTrustedTime r0;
        android.net.SntpClient r1, $r3;
        java.lang.String $r2, $r4;
        long $l0, $l2, $l3, $l4, $l5;
        int $i1;
        boolean $z0;

        r0 := @this: android.util.NtpTrustedTime;

        $r2 = r0.<android.util.NtpTrustedTime: java.lang.String mServer>;

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = new android.net.SntpClient;

        specialinvoke $r3.<android.net.SntpClient: void <init>()>();

        r1 = $r3;

        $r4 = r0.<android.util.NtpTrustedTime: java.lang.String mServer>;

        $l0 = r0.<android.util.NtpTrustedTime: long mTimeout>;

        $i1 = (int) $l0;

        $z0 = virtualinvoke r1.<android.net.SntpClient: boolean requestTime(java.lang.String,int)>($r4, $i1);

        if $z0 == 0 goto label2;

        r0.<android.util.NtpTrustedTime: boolean mHasCache> = 1;

        $l2 = virtualinvoke r1.<android.net.SntpClient: long getNtpTime()>();

        r0.<android.util.NtpTrustedTime: long mCachedNtpTime> = $l2;

        $l3 = virtualinvoke r1.<android.net.SntpClient: long getNtpTimeReference()>();

        r0.<android.util.NtpTrustedTime: long mCachedNtpElapsedRealtime> = $l3;

        $l4 = virtualinvoke r1.<android.net.SntpClient: long getRoundTripTime()>();

        $l5 = $l4 / 2L;

        r0.<android.util.NtpTrustedTime: long mCachedNtpCertainty> = $l5;

        return 1;

     label2:
        return 0;
    }

    public boolean hasCache()
    {
        android.util.NtpTrustedTime r0;
        boolean $z0;

        r0 := @this: android.util.NtpTrustedTime;

        $z0 = r0.<android.util.NtpTrustedTime: boolean mHasCache>;

        return $z0;
    }

    public long getCacheAge()
    {
        android.util.NtpTrustedTime r0;
        boolean $z0;
        long $l0, $l1, $l2;

        r0 := @this: android.util.NtpTrustedTime;

        $z0 = r0.<android.util.NtpTrustedTime: boolean mHasCache>;

        if $z0 == 0 goto label1;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l1 = r0.<android.util.NtpTrustedTime: long mCachedNtpElapsedRealtime>;

        $l2 = $l0 - $l1;

        return $l2;

     label1:
        return 9223372036854775807L;
    }

    public long getCacheCertainty()
    {
        android.util.NtpTrustedTime r0;
        boolean $z0;
        long $l0;

        r0 := @this: android.util.NtpTrustedTime;

        $z0 = r0.<android.util.NtpTrustedTime: boolean mHasCache>;

        if $z0 == 0 goto label1;

        $l0 = r0.<android.util.NtpTrustedTime: long mCachedNtpCertainty>;

        return $l0;

     label1:
        return 9223372036854775807L;
    }

    public long currentTimeMillis()
    {
        android.util.NtpTrustedTime r0;
        boolean $z0;
        long $l0, $l1, $l2;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.util.NtpTrustedTime;

        $z0 = r0.<android.util.NtpTrustedTime: boolean mHasCache>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing authoritative time source");

        throw $r1;

     label1:
        $l0 = r0.<android.util.NtpTrustedTime: long mCachedNtpTime>;

        $l1 = virtualinvoke r0.<android.util.NtpTrustedTime: long getCacheAge()>();

        $l2 = $l0 + $l1;

        return $l2;
    }

    public long getCachedNtpTime()
    {
        android.util.NtpTrustedTime r0;
        long $l0;

        r0 := @this: android.util.NtpTrustedTime;

        $l0 = r0.<android.util.NtpTrustedTime: long mCachedNtpTime>;

        return $l0;
    }

    public long getCachedNtpTimeReference()
    {
        android.util.NtpTrustedTime r0;
        long $l0;

        r0 := @this: android.util.NtpTrustedTime;

        $l0 = r0.<android.util.NtpTrustedTime: long mCachedNtpElapsedRealtime>;

        return $l0;
    }

    public static void <clinit>()
    {
        <android.util.NtpTrustedTime: boolean LOGD> = 0;

        <android.util.NtpTrustedTime: java.lang.String TAG> = "NtpTrustedTime";

        return;
    }
}
