class android.view.GLES20Canvas extends android.view.HardwareCanvas
{
    private final boolean mOpaque;
    protected long mRenderer;
    private android.view.GLES20Canvas$CanvasFinalizer mFinalizer;
    private int mWidth;
    private int mHeight;
    private float[] mPoint;
    private float[] mLine;
    private android.graphics.Rect mClipBounds;
    private android.graphics.RectF mPathBounds;
    private android.graphics.DrawFilter mFilter;
    private static boolean sIsAvailable;

    private static native boolean nIsAvailable();

    static boolean isAvailable()
    {
        boolean $z0;

        $z0 = <android.view.GLES20Canvas: boolean sIsAvailable>;

        return $z0;
    }

    protected void <init>()
    {
        android.view.GLES20Canvas r0;
        long $l0;

        r0 := @this: android.view.GLES20Canvas;

        specialinvoke r0.<android.view.HardwareCanvas: void <init>()>();

        r0.<android.view.GLES20Canvas: boolean mOpaque> = 0;

        $l0 = staticinvoke <android.view.GLES20Canvas: long nCreateDisplayListRenderer()>();

        r0.<android.view.GLES20Canvas: long mRenderer> = $l0;

        specialinvoke r0.<android.view.GLES20Canvas: void setupFinalizer()>();

        return;
    }

    private void setupFinalizer()
    {
        android.view.GLES20Canvas r0;
        long $l0, $l2;
        byte $b1;
        android.view.GLES20Canvas$CanvasFinalizer $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.view.GLES20Canvas;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Could not create GLES20Canvas renderer");

        throw $r2;

     label1:
        $r1 = new android.view.GLES20Canvas$CanvasFinalizer;

        $l2 = r0.<android.view.GLES20Canvas: long mRenderer>;

        specialinvoke $r1.<android.view.GLES20Canvas$CanvasFinalizer: void <init>(long)>($l2);

        r0.<android.view.GLES20Canvas: android.view.GLES20Canvas$CanvasFinalizer mFinalizer> = $r1;

        return;
    }

    private static native long nCreateDisplayListRenderer();

    private static native void nResetDisplayListRenderer(long);

    private static native void nDestroyRenderer(long);

    public static void setProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <android.view.GLES20Canvas: void nSetProperty(java.lang.String,java.lang.String)>(r0, r1);

        return;
    }

    private static native void nSetProperty(java.lang.String, java.lang.String);

    public boolean isOpaque()
    {
        android.view.GLES20Canvas r0;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        $z0 = r0.<android.view.GLES20Canvas: boolean mOpaque>;

        return $z0;
    }

    public int getWidth()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mWidth>;

        return $i0;
    }

    public int getHeight()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = r0.<android.view.GLES20Canvas: int mHeight>;

        return $i0;
    }

    public int getMaximumBitmapWidth()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = staticinvoke <android.view.GLES20Canvas: int nGetMaximumTextureWidth()>();

        return $i0;
    }

    public int getMaximumBitmapHeight()
    {
        android.view.GLES20Canvas r0;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        $i0 = staticinvoke <android.view.GLES20Canvas: int nGetMaximumTextureHeight()>();

        return $i0;
    }

    private static native int nGetMaximumTextureWidth();

    private static native int nGetMaximumTextureHeight();

    long getRenderer()
    {
        android.view.GLES20Canvas r0;
        long $l0;

        r0 := @this: android.view.GLES20Canvas;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        return $l0;
    }

    public void setViewport(int, int)
    {
        android.view.GLES20Canvas r0;
        int i0, i1;
        long $l2;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<android.view.GLES20Canvas: int mWidth> = i0;

        r0.<android.view.GLES20Canvas: int mHeight> = i1;

        $l2 = r0.<android.view.GLES20Canvas: long mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nSetViewport(long,int,int)>($l2, i0, i1);

        return;
    }

    private static native void nSetViewport(long, int, int);

    public void setHighContrastText(boolean)
    {
        android.view.GLES20Canvas r0;
        boolean z0;
        long $l0;

        r0 := @this: android.view.GLES20Canvas;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nSetHighContrastText(long,boolean)>($l0, z0);

        return;
    }

    private static native void nSetHighContrastText(long, boolean);

    public void insertReorderBarrier()
    {
        android.view.GLES20Canvas r0;
        long $l0;

        r0 := @this: android.view.GLES20Canvas;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nInsertReorderBarrier(long,boolean)>($l0, 1);

        return;
    }

    public void insertInorderBarrier()
    {
        android.view.GLES20Canvas r0;
        long $l0;

        r0 := @this: android.view.GLES20Canvas;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nInsertReorderBarrier(long,boolean)>($l0, 0);

        return;
    }

    private static native void nInsertReorderBarrier(long, boolean);

    public int onPreDraw(android.graphics.Rect)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Rect r1;
        boolean $z0, $z1;
        long $l0, $l6;
        int $i1, $i2, $i3, $i4, $i5, $i7;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Rect;

        if r1 == null goto label1;

        $l6 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i5 = r1.<android.graphics.Rect: int left>;

        $i4 = r1.<android.graphics.Rect: int top>;

        $i3 = r1.<android.graphics.Rect: int right>;

        $i2 = r1.<android.graphics.Rect: int bottom>;

        $z1 = r0.<android.view.GLES20Canvas: boolean mOpaque>;

        $i7 = staticinvoke <android.view.GLES20Canvas: int nPrepareDirty(long,int,int,int,int,boolean)>($l6, $i5, $i4, $i3, $i2, $z1);

        return $i7;

     label1:
        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $z0 = r0.<android.view.GLES20Canvas: boolean mOpaque>;

        $i1 = staticinvoke <android.view.GLES20Canvas: int nPrepare(long,boolean)>($l0, $z0);

        return $i1;
    }

    private static native int nPrepare(long, boolean);

    private static native int nPrepareDirty(long, int, int, int, int, boolean);

    public void onPostDraw()
    {
        android.view.GLES20Canvas r0;
        long $l0;

        r0 := @this: android.view.GLES20Canvas;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nFinish(long)>($l0);

        return;
    }

    private static native void nFinish(long);

    public int callDrawGLFunction(long)
    {
        android.view.GLES20Canvas r0;
        long l0, $l1;
        int $i2;

        r0 := @this: android.view.GLES20Canvas;

        l0 := @parameter0: long;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i2 = staticinvoke <android.view.GLES20Canvas: int nCallDrawGLFunction(long,long)>($l1, l0);

        return $i2;
    }

    private static native int nCallDrawGLFunction(long, long);

    protected static native long nFinishRecording(long);

    public int drawRenderNode(android.view.RenderNode, android.graphics.Rect, int)
    {
        android.view.GLES20Canvas r0;
        android.view.RenderNode r1;
        android.graphics.Rect r2;
        int i0, $i3;
        long $l1, $l2;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.view.RenderNode;

        r2 := @parameter1: android.graphics.Rect;

        i0 := @parameter2: int;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l2 = virtualinvoke r1.<android.view.RenderNode: long getNativeDisplayList()>();

        $i3 = staticinvoke <android.view.GLES20Canvas: int nDrawRenderNode(long,long,android.graphics.Rect,int)>($l1, $l2, r2, i0);

        return $i3;
    }

    private static native int nDrawRenderNode(long, long, android.graphics.Rect, int);

    void drawHardwareLayer(android.view.HardwareLayer, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.view.HardwareLayer r1;
        float f0, f1;
        android.graphics.Paint r2;
        long $l0, $l1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.view.HardwareLayer;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: android.graphics.Paint;

        virtualinvoke r1.<android.view.HardwareLayer: void setLayerPaint(android.graphics.Paint)>(r2);

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l1 = virtualinvoke r1.<android.view.HardwareLayer: long getLayer()>();

        staticinvoke <android.view.GLES20Canvas: void nDrawLayer(long,long,float,float)>($l0, $l1, f0, f1);

        return;
    }

    private static native void nDrawLayer(long, long, float, float);

    private android.graphics.Rect getInternalClipBounds()
    {
        android.view.GLES20Canvas r0;
        android.graphics.Rect $r1, $r2, $r3;

        r0 := @this: android.view.GLES20Canvas;

        $r1 = r0.<android.view.GLES20Canvas: android.graphics.Rect mClipBounds>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.view.GLES20Canvas: android.graphics.Rect mClipBounds> = $r3;

     label1:
        $r2 = r0.<android.view.GLES20Canvas: android.graphics.Rect mClipBounds>;

        return $r2;
    }

    private android.graphics.RectF getPathBounds()
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF $r1, $r2, $r3;

        r0 := @this: android.view.GLES20Canvas;

        $r1 = r0.<android.view.GLES20Canvas: android.graphics.RectF mPathBounds>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.RectF;

        specialinvoke $r3.<android.graphics.RectF: void <init>()>();

        r0.<android.view.GLES20Canvas: android.graphics.RectF mPathBounds> = $r3;

     label1:
        $r2 = r0.<android.view.GLES20Canvas: android.graphics.RectF mPathBounds>;

        return $r2;
    }

    private float[] getPointStorage()
    {
        android.view.GLES20Canvas r0;
        float[] $r1, $r2, $r3;

        r0 := @this: android.view.GLES20Canvas;

        $r1 = r0.<android.view.GLES20Canvas: float[] mPoint>;

        if $r1 != null goto label1;

        $r3 = newarray (float)[2];

        r0.<android.view.GLES20Canvas: float[] mPoint> = $r3;

     label1:
        $r2 = r0.<android.view.GLES20Canvas: float[] mPoint>;

        return $r2;
    }

    private float[] getLineStorage()
    {
        android.view.GLES20Canvas r0;
        float[] $r1, $r2, $r3;

        r0 := @this: android.view.GLES20Canvas;

        $r1 = r0.<android.view.GLES20Canvas: float[] mLine>;

        if $r1 != null goto label1;

        $r3 = newarray (float)[4];

        r0.<android.view.GLES20Canvas: float[] mLine> = $r3;

     label1:
        $r2 = r0.<android.view.GLES20Canvas: float[] mLine>;

        return $r2;
    }

    public boolean clipPath(android.graphics.Path)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Path r1;
        android.graphics.Region$Op $r2;
        int $i0;
        long $l1, $l2;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Path;

        $l2 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l1 = r1.<android.graphics.Path: long mNativePath>;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i0 = $r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipPath(long,long,int)>($l2, $l1, $i0);

        return $z0;
    }

    public boolean clipPath(android.graphics.Path, android.graphics.Region$Op)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Path r1;
        android.graphics.Region$Op r2;
        int $i0;
        long $l1, $l2;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Path;

        r2 := @parameter1: android.graphics.Region$Op;

        $l2 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l1 = r1.<android.graphics.Path: long mNativePath>;

        $i0 = r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipPath(long,long,int)>($l2, $l1, $i0);

        return $z0;
    }

    private static native boolean nClipPath(long, long, int);

    public boolean clipRect(float, float, float, float)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Region$Op $r1;
        int $i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $r1 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i0 = $r1.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRect(long,float,float,float,float,int)>($l1, f0, f1, f2, f3, $i0);

        return $z0;
    }

    private static native boolean nClipRect(long, float, float, float, float, int);

    public boolean clipRect(float, float, float, float, android.graphics.Region$Op)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Region$Op r1;
        int $i0;
        long $l1;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Region$Op;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i0 = r1.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRect(long,float,float,float,float,int)>($l1, f0, f1, f2, f3, $i0);

        return $z0;
    }

    public boolean clipRect(int, int, int, int)
    {
        android.view.GLES20Canvas r0;
        int i0, i1, i2, i3, $i4;
        android.graphics.Region$Op $r1;
        long $l5;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $l5 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $r1 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i4 = $r1.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRect(long,int,int,int,int,int)>($l5, i0, i1, i2, i3, $i4);

        return $z0;
    }

    private static native boolean nClipRect(long, int, int, int, int, int);

    public boolean clipRect(android.graphics.Rect)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Rect r1;
        android.graphics.Region$Op $r2;
        int $i0, $i1, $i2, $i3, $i4;
        long $l5;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Rect;

        $l5 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i4 = r1.<android.graphics.Rect: int left>;

        $i3 = r1.<android.graphics.Rect: int top>;

        $i2 = r1.<android.graphics.Rect: int right>;

        $i1 = r1.<android.graphics.Rect: int bottom>;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i0 = $r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRect(long,int,int,int,int,int)>($l5, $i4, $i3, $i2, $i1, $i0);

        return $z0;
    }

    public boolean clipRect(android.graphics.Rect, android.graphics.Region$Op)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Rect r1;
        android.graphics.Region$Op r2;
        int $i0, $i1, $i2, $i3, $i4;
        long $l5;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Region$Op;

        $l5 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i4 = r1.<android.graphics.Rect: int left>;

        $i3 = r1.<android.graphics.Rect: int top>;

        $i2 = r1.<android.graphics.Rect: int right>;

        $i1 = r1.<android.graphics.Rect: int bottom>;

        $i0 = r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRect(long,int,int,int,int,int)>($l5, $i4, $i3, $i2, $i1, $i0);

        return $z0;
    }

    public boolean clipRect(android.graphics.RectF)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Region$Op $r2;
        int $i0;
        float $f0, $f1, $f2, $f3;
        long $l1;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i0 = $r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRect(long,float,float,float,float,int)>($l1, $f3, $f2, $f1, $f0, $i0);

        return $z0;
    }

    public boolean clipRect(android.graphics.RectF, android.graphics.Region$Op)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Region$Op r2;
        int $i0;
        float $f0, $f1, $f2, $f3;
        long $l1;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Region$Op;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $i0 = r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRect(long,float,float,float,float,int)>($l1, $f3, $f2, $f1, $f0, $i0);

        return $z0;
    }

    public boolean clipRegion(android.graphics.Region)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Region r1;
        android.graphics.Region$Op $r2;
        int $i0;
        long $l1, $l2;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Region;

        $l2 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l1 = r1.<android.graphics.Region: long mNativeRegion>;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        $i0 = $r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRegion(long,long,int)>($l2, $l1, $i0);

        return $z0;
    }

    public boolean clipRegion(android.graphics.Region, android.graphics.Region$Op)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Region r1;
        android.graphics.Region$Op r2;
        int $i0;
        long $l1, $l2;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Region;

        r2 := @parameter1: android.graphics.Region$Op;

        $l2 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l1 = r1.<android.graphics.Region: long mNativeRegion>;

        $i0 = r2.<android.graphics.Region$Op: int nativeInt>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nClipRegion(long,long,int)>($l2, $l1, $i0);

        return $z0;
    }

    private static native boolean nClipRegion(long, long, int);

    public boolean getClipBounds(android.graphics.Rect)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Rect r1;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Rect;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nGetClipBounds(long,android.graphics.Rect)>($l0, r1);

        return $z0;
    }

    private static native boolean nGetClipBounds(long, android.graphics.Rect);

    public boolean quickReject(float, float, float, float, android.graphics.Canvas$EdgeType)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Canvas$EdgeType r1;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Canvas$EdgeType;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nQuickReject(long,float,float,float,float)>($l0, f0, f1, f2, f3);

        return $z0;
    }

    private static native boolean nQuickReject(long, float, float, float, float);

    public boolean quickReject(android.graphics.Path, android.graphics.Canvas$EdgeType)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Path r1;
        android.graphics.Canvas$EdgeType r2;
        android.graphics.RectF r3;
        float $f0, $f1, $f2, $f3;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Path;

        r2 := @parameter1: android.graphics.Canvas$EdgeType;

        r3 = specialinvoke r0.<android.view.GLES20Canvas: android.graphics.RectF getPathBounds()>();

        virtualinvoke r1.<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>(r3, 1);

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $f3 = r3.<android.graphics.RectF: float left>;

        $f2 = r3.<android.graphics.RectF: float top>;

        $f1 = r3.<android.graphics.RectF: float right>;

        $f0 = r3.<android.graphics.RectF: float bottom>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nQuickReject(long,float,float,float,float)>($l0, $f3, $f2, $f1, $f0);

        return $z0;
    }

    public boolean quickReject(android.graphics.RectF, android.graphics.Canvas$EdgeType)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Canvas$EdgeType r2;
        float $f0, $f1, $f2, $f3;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Canvas$EdgeType;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nQuickReject(long,float,float,float,float)>($l0, $f3, $f2, $f1, $f0);

        return $z0;
    }

    public void translate(float, float)
    {
        android.view.GLES20Canvas r0;
        float f0, f1;
        byte $b0, $b2;
        long $l1;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        $b2 = f1 cmpl 0.0F;

        if $b2 == 0 goto label2;

     label1:
        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nTranslate(long,float,float)>($l1, f0, f1);

     label2:
        return;
    }

    private static native void nTranslate(long, float, float);

    public void skew(float, float)
    {
        android.view.GLES20Canvas r0;
        float f0, f1;
        long $l0;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nSkew(long,float,float)>($l0, f0, f1);

        return;
    }

    private static native void nSkew(long, float, float);

    public void rotate(float)
    {
        android.view.GLES20Canvas r0;
        float f0;
        long $l0;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nRotate(long,float)>($l0, f0);

        return;
    }

    private static native void nRotate(long, float);

    public void scale(float, float)
    {
        android.view.GLES20Canvas r0;
        float f0, f1;
        long $l0;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nScale(long,float,float)>($l0, f0, f1);

        return;
    }

    private static native void nScale(long, float, float);

    public void setMatrix(android.graphics.Matrix)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Matrix r1;
        long $l0, $l1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Matrix;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        if r1 != null goto label1;

        $l0 = 0L;

        goto label2;

     label1:
        $l0 = r1.<android.graphics.Matrix: long native_instance>;

     label2:
        staticinvoke <android.view.GLES20Canvas: void nSetMatrix(long,long)>($l1, $l0);

        return;
    }

    private static native void nSetMatrix(long, long);

    public void getMatrix(android.graphics.Matrix)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Matrix r1;
        long $l0, $l1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Matrix;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l0 = r1.<android.graphics.Matrix: long native_instance>;

        staticinvoke <android.view.GLES20Canvas: void nGetMatrix(long,long)>($l1, $l0);

        return;
    }

    private static native void nGetMatrix(long, long);

    public void concat(android.graphics.Matrix)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Matrix r1;
        long $l0, $l1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Matrix;

        if r1 == null goto label1;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l0 = r1.<android.graphics.Matrix: long native_instance>;

        staticinvoke <android.view.GLES20Canvas: void nConcatMatrix(long,long)>($l1, $l0);

     label1:
        return;
    }

    private static native void nConcatMatrix(long, long);

    public int save()
    {
        android.view.GLES20Canvas r0;
        long $l0;
        int $i1;

        r0 := @this: android.view.GLES20Canvas;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i1 = staticinvoke <android.view.GLES20Canvas: int nSave(long,int)>($l0, 3);

        return $i1;
    }

    public int save(int)
    {
        android.view.GLES20Canvas r0;
        int i0, $i2;
        long $l1;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i2 = staticinvoke <android.view.GLES20Canvas: int nSave(long,int)>($l1, i0);

        return $i2;
    }

    private static native int nSave(long, int);

    public int saveLayer(android.graphics.RectF, android.graphics.Paint, int)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Paint r2;
        int i0, $i3, $i5;
        long l1, $l2, $l4;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Paint;

        i0 := @parameter2: int;

        if r1 == null goto label1;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $i5 = virtualinvoke r0.<android.view.GLES20Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>($f3, $f2, $f1, $f0, r2, i0);

        return $i5;

     label1:
        if r2 != null goto label2;

        $l4 = 0L;

        goto label3;

     label2:
        $l4 = r2.<android.graphics.Paint: long mNativePaint>;

     label3:
        l1 = $l4;

        $l2 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i3 = staticinvoke <android.view.GLES20Canvas: int nSaveLayer(long,long,int)>($l2, l1, i0);

        return $i3;
    }

    private static native int nSaveLayer(long, long, int);

    public int saveLayer(float, float, float, float, android.graphics.Paint, int)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Paint r1;
        int i0, $i3, $i6;
        long l1, $l5, $l7;
        byte $b2, $b4;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Paint;

        i0 := @parameter5: int;

        $b2 = f0 cmpg f2;

        if $b2 >= 0 goto label3;

        $b4 = f1 cmpg f3;

        if $b4 >= 0 goto label3;

        if r1 != null goto label1;

        $l7 = 0L;

        goto label2;

     label1:
        $l7 = r1.<android.graphics.Paint: long mNativePaint>;

     label2:
        l1 = $l7;

        $l5 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i6 = staticinvoke <android.view.GLES20Canvas: int nSaveLayer(long,float,float,float,float,long,int)>($l5, f0, f1, f2, f3, l1, i0);

        return $i6;

     label3:
        $i3 = virtualinvoke r0.<android.view.GLES20Canvas: int save(int)>(i0);

        return $i3;
    }

    private static native int nSaveLayer(long, float, float, float, float, long, int);

    public int saveLayerAlpha(android.graphics.RectF, int, int)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        int i0, i1, $i3, $i4;
        long $l2;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 == null goto label1;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        $i4 = virtualinvoke r0.<android.view.GLES20Canvas: int saveLayerAlpha(float,float,float,float,int,int)>($f3, $f2, $f1, $f0, i0, i1);

        return $i4;

     label1:
        $l2 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i3 = staticinvoke <android.view.GLES20Canvas: int nSaveLayerAlpha(long,int,int)>($l2, i0, i1);

        return $i3;
    }

    private static native int nSaveLayerAlpha(long, int, int);

    public int saveLayerAlpha(float, float, float, float, int, int)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        int i0, i1, $i3, $i6;
        byte $b2, $b4;
        long $l5;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        $b2 = f0 cmpg f2;

        if $b2 >= 0 goto label1;

        $b4 = f1 cmpg f3;

        if $b4 >= 0 goto label1;

        $l5 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i6 = staticinvoke <android.view.GLES20Canvas: int nSaveLayerAlpha(long,float,float,float,float,int,int)>($l5, f0, f1, f2, f3, i0, i1);

        return $i6;

     label1:
        $i3 = virtualinvoke r0.<android.view.GLES20Canvas: int save(int)>(i1);

        return $i3;
    }

    private static native int nSaveLayerAlpha(long, float, float, float, float, int, int);

    public void restore()
    {
        android.view.GLES20Canvas r0;
        long $l0;

        r0 := @this: android.view.GLES20Canvas;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nRestore(long)>($l0);

        return;
    }

    private static native void nRestore(long);

    public void restoreToCount(int)
    {
        android.view.GLES20Canvas r0;
        int i0;
        long $l1;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nRestoreToCount(long,int)>($l1, i0);

        return;
    }

    private static native void nRestoreToCount(long, int);

    public int getSaveCount()
    {
        android.view.GLES20Canvas r0;
        long $l0;
        int $i1;

        r0 := @this: android.view.GLES20Canvas;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i1 = staticinvoke <android.view.GLES20Canvas: int nGetSaveCount(long)>($l0);

        return $i1;
    }

    private static native int nGetSaveCount(long);

    public void setDrawFilter(android.graphics.DrawFilter)
    {
        android.view.GLES20Canvas r0;
        android.graphics.DrawFilter r1;
        android.graphics.PaintFlagsDrawFilter r2;
        boolean $z0;
        int $i0, $i1;
        long $l2, $l3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.DrawFilter;

        r0.<android.view.GLES20Canvas: android.graphics.DrawFilter mFilter> = r1;

        if r1 != null goto label1;

        $l3 = r0.<android.view.GLES20Canvas: long mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nResetPaintFilter(long)>($l3);

        goto label2;

     label1:
        $z0 = r1 instanceof android.graphics.PaintFlagsDrawFilter;

        if $z0 == 0 goto label2;

        r2 = (android.graphics.PaintFlagsDrawFilter) r1;

        $l2 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i1 = r2.<android.graphics.PaintFlagsDrawFilter: int clearBits>;

        $i0 = r2.<android.graphics.PaintFlagsDrawFilter: int setBits>;

        staticinvoke <android.view.GLES20Canvas: void nSetupPaintFilter(long,int,int)>($l2, $i1, $i0);

     label2:
        return;
    }

    private static native void nResetPaintFilter(long);

    private static native void nSetupPaintFilter(long, int, int);

    public android.graphics.DrawFilter getDrawFilter()
    {
        android.view.GLES20Canvas r0;
        android.graphics.DrawFilter $r1;

        r0 := @this: android.view.GLES20Canvas;

        $r1 = r0.<android.view.GLES20Canvas: android.graphics.DrawFilter mFilter>;

        return $r1;
    }

    public void drawArc(float, float, float, float, float, float, boolean, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3, f4, f5;
        boolean z0;
        android.graphics.Paint r1;
        long $l0, $l1;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        z0 := @parameter6: boolean;

        r1 := @parameter7: android.graphics.Paint;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l0 = r1.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawArc(long,float,float,float,float,float,float,boolean,long)>($l1, f0, f1, f2, f3, f4, f5, z0, $l0);

        return;
    }

    private static native void nDrawArc(long, float, float, float, float, float, float, boolean, long);

    public void drawARGB(int, int, int, int)
    {
        android.view.GLES20Canvas r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i4 = i0 & 255;

        $i7 = $i4 << 24;

        $i5 = i1 & 255;

        $i6 = $i5 << 16;

        $i10 = $i7 | $i6;

        $i8 = i2 & 255;

        $i9 = $i8 << 8;

        $i12 = $i10 | $i9;

        $i11 = i3 & 255;

        $i13 = $i12 | $i11;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawColor(int)>($i13);

        return;
    }

    public void drawPatch(android.graphics.NinePatch, android.graphics.Rect, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.NinePatch r1;
        android.graphics.Rect r2;
        android.graphics.Paint r3;
        android.graphics.Bitmap r4;
        long l0, $l5, $l6, $l7, $l8;
        int $i1, $i2, $i3, $i4;
        float $f0, $f1, $f2, $f3;
        byte[] $r5;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.NinePatch;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Paint;

        r4 = virtualinvoke r1.<android.graphics.NinePatch: android.graphics.Bitmap getBitmap()>();

        staticinvoke <android.view.GLES20Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r4);

        if r3 != null goto label1;

        $l8 = 0L;

        goto label2;

     label1:
        $l8 = r3.<android.graphics.Paint: long mNativePaint>;

     label2:
        l0 = $l8;

        $l6 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l7 = r4.<android.graphics.Bitmap: long mNativeBitmap>;

        $r5 = r4.<android.graphics.Bitmap: byte[] mBuffer>;

        $l5 = r1.<android.graphics.NinePatch: long mNativeChunk>;

        $i1 = r2.<android.graphics.Rect: int left>;

        $f3 = (float) $i1;

        $i2 = r2.<android.graphics.Rect: int top>;

        $f2 = (float) $i2;

        $i3 = r2.<android.graphics.Rect: int right>;

        $f1 = (float) $i3;

        $i4 = r2.<android.graphics.Rect: int bottom>;

        $f0 = (float) $i4;

        staticinvoke <android.view.GLES20Canvas: void nDrawPatch(long,long,byte[],long,float,float,float,float,long)>($l6, $l7, $r5, $l5, $f3, $f2, $f1, $f0, l0);

        return;
    }

    public void drawPatch(android.graphics.NinePatch, android.graphics.RectF, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.NinePatch r1;
        android.graphics.RectF r2;
        android.graphics.Paint r3;
        android.graphics.Bitmap r4;
        long l0, $l1, $l2, $l3, $l4;
        float $f0, $f1, $f2, $f3;
        byte[] $r5;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.NinePatch;

        r2 := @parameter1: android.graphics.RectF;

        r3 := @parameter2: android.graphics.Paint;

        r4 = virtualinvoke r1.<android.graphics.NinePatch: android.graphics.Bitmap getBitmap()>();

        staticinvoke <android.view.GLES20Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r4);

        if r3 != null goto label1;

        $l4 = 0L;

        goto label2;

     label1:
        $l4 = r3.<android.graphics.Paint: long mNativePaint>;

     label2:
        l0 = $l4;

        $l3 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l2 = r4.<android.graphics.Bitmap: long mNativeBitmap>;

        $r5 = r4.<android.graphics.Bitmap: byte[] mBuffer>;

        $l1 = r1.<android.graphics.NinePatch: long mNativeChunk>;

        $f3 = r2.<android.graphics.RectF: float left>;

        $f2 = r2.<android.graphics.RectF: float top>;

        $f1 = r2.<android.graphics.RectF: float right>;

        $f0 = r2.<android.graphics.RectF: float bottom>;

        staticinvoke <android.view.GLES20Canvas: void nDrawPatch(long,long,byte[],long,float,float,float,float,long)>($l3, $l2, $r5, $l1, $f3, $f2, $f1, $f0, l0);

        return;
    }

    private static native void nDrawPatch(long, long, byte[], long, float, float, float, float, long);

    public void drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Bitmap r1;
        float f0, f1;
        android.graphics.Paint r2;
        long l0, $l1, $l2, $l3;
        byte[] $r3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: android.graphics.Paint;

        staticinvoke <android.view.GLES20Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r1);

        if r2 != null goto label1;

        $l3 = 0L;

        goto label2;

     label1:
        $l3 = r2.<android.graphics.Paint: long mNativePaint>;

     label2:
        l0 = $l3;

        $l2 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l1 = r1.<android.graphics.Bitmap: long mNativeBitmap>;

        $r3 = r1.<android.graphics.Bitmap: byte[] mBuffer>;

        staticinvoke <android.view.GLES20Canvas: void nDrawBitmap(long,long,byte[],float,float,long)>($l2, $l1, $r3, f0, f1, l0);

        return;
    }

    private static native void nDrawBitmap(long, long, byte[], float, float, long);

    public void drawBitmap(android.graphics.Bitmap, android.graphics.Matrix, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Bitmap r1;
        android.graphics.Matrix r2;
        android.graphics.Paint r3;
        long l0, $l1, $l2, $l3, $l4;
        byte[] $r4;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.graphics.Matrix;

        r3 := @parameter2: android.graphics.Paint;

        staticinvoke <android.view.GLES20Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r1);

        if r3 != null goto label1;

        $l4 = 0L;

        goto label2;

     label1:
        $l4 = r3.<android.graphics.Paint: long mNativePaint>;

     label2:
        l0 = $l4;

        $l3 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l2 = r1.<android.graphics.Bitmap: long mNativeBitmap>;

        $r4 = r1.<android.graphics.Bitmap: byte[] mBuffer>;

        $l1 = r2.<android.graphics.Matrix: long native_instance>;

        staticinvoke <android.view.GLES20Canvas: void nDrawBitmap(long,long,byte[],long,long)>($l3, $l2, $r4, $l1, l0);

        return;
    }

    private static native void nDrawBitmap(long, long, byte[], long, long);

    public void drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.Rect, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Bitmap r1;
        android.graphics.Rect r2, r3;
        android.graphics.Paint r4;
        long l0, $l9, $l10, $l11;
        int i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        byte[] $r5;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Rect;

        r4 := @parameter3: android.graphics.Paint;

        staticinvoke <android.view.GLES20Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r1);

        if r4 != null goto label1;

        $l11 = 0L;

        goto label2;

     label1:
        $l11 = r4.<android.graphics.Paint: long mNativePaint>;

     label2:
        l0 = $l11;

        if r2 != null goto label3;

        i2 = 0;

        i1 = 0;

        i3 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        i4 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        goto label4;

     label3:
        i1 = r2.<android.graphics.Rect: int left>;

        i3 = r2.<android.graphics.Rect: int right>;

        i2 = r2.<android.graphics.Rect: int top>;

        i4 = r2.<android.graphics.Rect: int bottom>;

     label4:
        $l9 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l10 = r1.<android.graphics.Bitmap: long mNativeBitmap>;

        $r5 = r1.<android.graphics.Bitmap: byte[] mBuffer>;

        $f7 = (float) i1;

        $f5 = (float) i2;

        $f6 = (float) i3;

        $f3 = (float) i4;

        $i5 = r3.<android.graphics.Rect: int left>;

        $f4 = (float) $i5;

        $i6 = r3.<android.graphics.Rect: int top>;

        $f1 = (float) $i6;

        $i7 = r3.<android.graphics.Rect: int right>;

        $f2 = (float) $i7;

        $i8 = r3.<android.graphics.Rect: int bottom>;

        $f0 = (float) $i8;

        staticinvoke <android.view.GLES20Canvas: void nDrawBitmap(long,long,byte[],float,float,float,float,float,float,float,float,long)>($l9, $l10, $r5, $f7, $f5, $f6, $f3, $f4, $f1, $f2, $f0, l0);

        return;
    }

    public void drawBitmap(android.graphics.Bitmap, android.graphics.Rect, android.graphics.RectF, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Bitmap r1;
        android.graphics.Rect r2;
        android.graphics.RectF r3;
        android.graphics.Paint r4;
        long l0, $l5, $l6, $l9;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7;
        int $i1, $i2, $i3, $i4, $i7, $i8;
        byte[] $r5;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.RectF;

        r4 := @parameter3: android.graphics.Paint;

        staticinvoke <android.view.GLES20Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r1);

        if r4 != null goto label1;

        $l9 = 0L;

        goto label2;

     label1:
        $l9 = r4.<android.graphics.Paint: long mNativePaint>;

     label2:
        l0 = $l9;

        if r2 != null goto label3;

        f1 = 0.0F;

        f0 = 0.0F;

        $i8 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        f2 = (float) $i8;

        $i7 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        f3 = (float) $i7;

        goto label4;

     label3:
        $i1 = r2.<android.graphics.Rect: int left>;

        f0 = (float) $i1;

        $i2 = r2.<android.graphics.Rect: int right>;

        f2 = (float) $i2;

        $i3 = r2.<android.graphics.Rect: int top>;

        f1 = (float) $i3;

        $i4 = r2.<android.graphics.Rect: int bottom>;

        f3 = (float) $i4;

     label4:
        $l5 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l6 = r1.<android.graphics.Bitmap: long mNativeBitmap>;

        $r5 = r1.<android.graphics.Bitmap: byte[] mBuffer>;

        $f7 = r3.<android.graphics.RectF: float left>;

        $f5 = r3.<android.graphics.RectF: float top>;

        $f6 = r3.<android.graphics.RectF: float right>;

        $f4 = r3.<android.graphics.RectF: float bottom>;

        staticinvoke <android.view.GLES20Canvas: void nDrawBitmap(long,long,byte[],float,float,float,float,float,float,float,float,long)>($l5, $l6, $r5, f0, f1, f2, f3, $f7, $f5, $f6, $f4, l0);

        return;
    }

    private static native void nDrawBitmap(long, long, byte[], float, float, float, float, float, float, float, float, long);

    public void drawBitmap(int[], int, int, float, float, int, int, boolean, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5, $i7, $i8, $i9, $i10, $i11;
        float f0, f1;
        boolean z0;
        android.graphics.Paint r2;
        long l6, $l12, $l13;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.IllegalArgumentException $r4, $r5, $r6;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        z0 := @parameter7: boolean;

        r2 := @parameter8: android.graphics.Paint;

        if i2 >= 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width must be >= 0");

        throw $r6;

     label1:
        if i3 >= 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("height must be >= 0");

        throw $r4;

     label2:
        $i7 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        if $i7 >= i2 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("abs(stride) must be >= width");

        throw $r5;

     label3:
        $i8 = i3 - 1;

        $i9 = $i8 * i1;

        i4 = i0 + $i9;

        i5 = lengthof r1;

        if i0 < 0 goto label4;

        $i11 = i0 + i2;

        if $i11 > i5 goto label4;

        if i4 < 0 goto label4;

        $i10 = i4 + i2;

        if $i10 <= i5 goto label5;

     label4:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label5:
        if r2 != null goto label6;

        $l12 = 0L;

        goto label7;

     label6:
        $l12 = r2.<android.graphics.Paint: long mNativePaint>;

     label7:
        l6 = $l12;

        $l13 = r0.<android.view.GLES20Canvas: long mRenderer>;

        staticinvoke <android.view.GLES20Canvas: void nDrawBitmap(long,int[],int,int,float,float,int,int,boolean,long)>($l13, r1, i0, i1, f0, f1, i2, i3, z0, l6);

        return;
    }

    private static native void nDrawBitmap(long, int[], int, int, float, float, int, int, boolean, long);

    public void drawBitmap(int[], int, int, int, int, int, int, boolean, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5;
        boolean z0;
        android.graphics.Paint r2;
        float $f0, $f1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        z0 := @parameter7: boolean;

        r2 := @parameter8: android.graphics.Paint;

        $f1 = (float) i2;

        $f0 = (float) i3;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>(r1, i0, i1, $f1, $f0, i4, i5, z0, r2);

        return;
    }

    public void drawBitmapMesh(android.graphics.Bitmap, int, int, float[], int, int[], int, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Bitmap r1;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i9, $i12;
        float[] r2;
        int[] r3;
        android.graphics.Paint r4;
        long l5, $l10, $l11, $l13;
        java.lang.ArrayIndexOutOfBoundsException $r5;
        byte[] $r6;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: float[];

        i2 := @parameter4: int;

        r3 := @parameter5: int[];

        i3 := @parameter6: int;

        r4 := @parameter7: android.graphics.Paint;

        staticinvoke <android.view.GLES20Canvas: void throwIfCannotDraw(android.graphics.Bitmap)>(r1);

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        if i2 < 0 goto label1;

        if i3 >= 0 goto label2;

     label1:
        $r5 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r5;

     label2:
        if i0 == 0 goto label3;

        if i1 != 0 goto label4;

     label3:
        return;

     label4:
        $i7 = i0 + 1;

        $i6 = i1 + 1;

        i4 = $i7 * $i6;

        $i9 = lengthof r2;

        $i8 = i4 * 2;

        staticinvoke <android.view.GLES20Canvas: void checkRange(int,int,int)>($i9, i2, $i8);

        if r3 == null goto label5;

        $i12 = lengthof r3;

        staticinvoke <android.view.GLES20Canvas: void checkRange(int,int,int)>($i12, i3, i4);

     label5:
        if r4 != null goto label6;

        $l13 = 0L;

        goto label7;

     label6:
        $l13 = r4.<android.graphics.Paint: long mNativePaint>;

     label7:
        l5 = $l13;

        $l10 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l11 = r1.<android.graphics.Bitmap: long mNativeBitmap>;

        $r6 = r1.<android.graphics.Bitmap: byte[] mBuffer>;

        staticinvoke <android.view.GLES20Canvas: void nDrawBitmapMesh(long,long,byte[],int,int,float[],int,int[],int,long)>($l10, $l11, $r6, i0, i1, r2, i2, r3, i3, l5);

        return;
    }

    private static native void nDrawBitmapMesh(long, long, byte[], int, int, float[], int, int[], int, long);

    public void drawCircle(float, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2;
        android.graphics.Paint r1;
        long $l0, $l1;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        r1 := @parameter3: android.graphics.Paint;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l0 = r1.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawCircle(long,float,float,float,long)>($l1, f0, f1, f2, $l0);

        return;
    }

    private static native void nDrawCircle(long, float, float, float, long);

    public void drawCircle(android.graphics.CanvasProperty, android.graphics.CanvasProperty, android.graphics.CanvasProperty, android.graphics.CanvasProperty)
    {
        android.view.GLES20Canvas r0;
        android.graphics.CanvasProperty r1, r2, r3, r4;
        long $l0, $l1, $l2, $l3, $l4;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.CanvasProperty;

        r2 := @parameter1: android.graphics.CanvasProperty;

        r3 := @parameter2: android.graphics.CanvasProperty;

        r4 := @parameter3: android.graphics.CanvasProperty;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l1 = virtualinvoke r1.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l2 = virtualinvoke r2.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l3 = virtualinvoke r3.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l4 = virtualinvoke r4.<android.graphics.CanvasProperty: long getNativeContainer()>();

        staticinvoke <android.view.GLES20Canvas: void nDrawCircle(long,long,long,long,long)>($l0, $l1, $l2, $l3, $l4);

        return;
    }

    private static native void nDrawCircle(long, long, long, long, long);

    public void drawRoundRect(android.graphics.CanvasProperty, android.graphics.CanvasProperty, android.graphics.CanvasProperty, android.graphics.CanvasProperty, android.graphics.CanvasProperty, android.graphics.CanvasProperty, android.graphics.CanvasProperty)
    {
        android.view.GLES20Canvas r0;
        android.graphics.CanvasProperty r1, r2, r3, r4, r5, r6, r7;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.CanvasProperty;

        r2 := @parameter1: android.graphics.CanvasProperty;

        r3 := @parameter2: android.graphics.CanvasProperty;

        r4 := @parameter3: android.graphics.CanvasProperty;

        r5 := @parameter4: android.graphics.CanvasProperty;

        r6 := @parameter5: android.graphics.CanvasProperty;

        r7 := @parameter6: android.graphics.CanvasProperty;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l1 = virtualinvoke r1.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l2 = virtualinvoke r2.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l3 = virtualinvoke r3.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l4 = virtualinvoke r4.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l5 = virtualinvoke r5.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l6 = virtualinvoke r6.<android.graphics.CanvasProperty: long getNativeContainer()>();

        $l7 = virtualinvoke r7.<android.graphics.CanvasProperty: long getNativeContainer()>();

        staticinvoke <android.view.GLES20Canvas: void nDrawRoundRect(long,long,long,long,long,long,long,long)>($l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7);

        return;
    }

    private static native void nDrawRoundRect(long, long, long, long, long, long, long, long);

    public void drawColor(int)
    {
        android.view.GLES20Canvas r0;
        int i0;
        android.graphics.PorterDuff$Mode $r1;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        $r1 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC_OVER>;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(i0, $r1);

        return;
    }

    public void drawColor(int, android.graphics.PorterDuff$Mode)
    {
        android.view.GLES20Canvas r0;
        int i0, $i1;
        android.graphics.PorterDuff$Mode r1;
        long $l2;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.PorterDuff$Mode;

        $l2 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i1 = r1.<android.graphics.PorterDuff$Mode: int nativeInt>;

        staticinvoke <android.view.GLES20Canvas: void nDrawColor(long,int,int)>($l2, i0, $i1);

        return;
    }

    private static native void nDrawColor(long, int, int);

    public void drawLine(float, float, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Paint r1;
        float[] r2;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Paint;

        r2 = specialinvoke r0.<android.view.GLES20Canvas: float[] getLineStorage()>();

        r2[0] = f0;

        r2[1] = f1;

        r2[2] = f2;

        r2[3] = f3;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawLines(float[],int,int,android.graphics.Paint)>(r2, 0, 4, r1);

        return;
    }

    public void drawLines(float[], int, int, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float[] r1;
        int i0, i1, $i2, $i3, $i4;
        android.graphics.Paint r2;
        java.lang.IllegalArgumentException $r3;
        long $l5, $l6;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Paint;

        if i1 >= 4 goto label1;

        return;

     label1:
        $i2 = i0 | i1;

        if $i2 < 0 goto label2;

        $i4 = i0 + i1;

        $i3 = lengthof r1;

        if $i4 <= $i3 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The lines array must contain 4 elements per line.");

        throw $r3;

     label3:
        $l6 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l5 = r2.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawLines(long,float[],int,int,long)>($l6, r1, i0, i1, $l5);

        return;
    }

    private static native void nDrawLines(long, float[], int, int, long);

    public void drawLines(float[], android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float[] r1;
        android.graphics.Paint r2;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: float[];

        r2 := @parameter1: android.graphics.Paint;

        $i0 = lengthof r1;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawLines(float[],int,int,android.graphics.Paint)>(r1, 0, $i0, r2);

        return;
    }

    public void drawOval(float, float, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Paint r1;
        long $l0, $l1;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Paint;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l0 = r1.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawOval(long,float,float,float,float,long)>($l1, f0, f1, f2, f3, $l0);

        return;
    }

    private static native void nDrawOval(long, float, float, float, float, long);

    public void drawPaint(android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Paint r1;
        android.graphics.Rect r2;
        long $l0;
        int $i1, $i2, $i3, $i4;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Paint;

        r2 = specialinvoke r0.<android.view.GLES20Canvas: android.graphics.Rect getInternalClipBounds()>();

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        staticinvoke <android.view.GLES20Canvas: boolean nGetClipBounds(long,android.graphics.Rect)>($l0, r2);

        $i1 = r2.<android.graphics.Rect: int left>;

        $f3 = (float) $i1;

        $i2 = r2.<android.graphics.Rect: int top>;

        $f2 = (float) $i2;

        $i3 = r2.<android.graphics.Rect: int right>;

        $f1 = (float) $i3;

        $i4 = r2.<android.graphics.Rect: int bottom>;

        $f0 = (float) $i4;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f3, $f2, $f1, $f0, r1);

        return;
    }

    public void drawPath(android.graphics.Path, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Path r1;
        android.graphics.Paint r2;
        boolean $z0;
        long $l0, $l1, $l2, $l3, $l4, $l5;
        android.graphics.Region $r3, $r4;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Path;

        r2 := @parameter1: android.graphics.Paint;

        $z0 = r1.<android.graphics.Path: boolean isSimplePath>;

        if $z0 == 0 goto label1;

        $r3 = r1.<android.graphics.Path: android.graphics.Region rects>;

        if $r3 == null goto label2;

        $l5 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $r4 = r1.<android.graphics.Path: android.graphics.Region rects>;

        $l4 = $r4.<android.graphics.Region: long mNativeRegion>;

        $l3 = r2.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawRects(long,long,long)>($l5, $l4, $l3);

        goto label2;

     label1:
        $l2 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l1 = r1.<android.graphics.Path: long mNativePath>;

        $l0 = r2.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawPath(long,long,long)>($l2, $l1, $l0);

     label2:
        return;
    }

    private static native void nDrawPath(long, long, long);

    private static native void nDrawRects(long, long, long);

    public void drawPicture(android.graphics.Picture)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Picture r1;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Picture;

        virtualinvoke r1.<android.graphics.Picture: void endRecording()>();

        return;
    }

    public void drawPoint(float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float f0, f1;
        android.graphics.Paint r1;
        float[] r2;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 := @parameter2: android.graphics.Paint;

        r2 = specialinvoke r0.<android.view.GLES20Canvas: float[] getPointStorage()>();

        r2[0] = f0;

        r2[1] = f1;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>(r2, 0, 2, r1);

        return;
    }

    public void drawPoints(float[], android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float[] r1;
        android.graphics.Paint r2;
        int $i0;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: float[];

        r2 := @parameter1: android.graphics.Paint;

        $i0 = lengthof r1;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>(r1, 0, $i0, r2);

        return;
    }

    public void drawPoints(float[], int, int, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float[] r1;
        int i0, i1;
        android.graphics.Paint r2;
        long $l2, $l3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Paint;

        if i1 >= 2 goto label1;

        return;

     label1:
        $l3 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l2 = r2.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawPoints(long,float[],int,int,long)>($l3, r1, i0, i1, $l2);

        return;
    }

    private static native void nDrawPoints(long, float[], int, int, long);

    public void drawRect(float, float, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3;
        android.graphics.Paint r1;
        byte $b0, $b1;
        long $l2, $l3;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: android.graphics.Paint;

        $b0 = f0 cmpl f2;

        if $b0 == 0 goto label1;

        $b1 = f1 cmpl f3;

        if $b1 != 0 goto label2;

     label1:
        return;

     label2:
        $l3 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l2 = r1.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawRect(long,float,float,float,float,long)>($l3, f0, f1, f2, f3, $l2);

        return;
    }

    private static native void nDrawRect(long, float, float, float, float, long);

    public void drawRect(android.graphics.Rect, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Rect r1;
        android.graphics.Paint r2;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Paint;

        $i0 = r1.<android.graphics.Rect: int left>;

        $f3 = (float) $i0;

        $i1 = r1.<android.graphics.Rect: int top>;

        $f2 = (float) $i1;

        $i2 = r1.<android.graphics.Rect: int right>;

        $f1 = (float) $i2;

        $i3 = r1.<android.graphics.Rect: int bottom>;

        $f0 = (float) $i3;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f3, $f2, $f1, $f0, r2);

        return;
    }

    public void drawRect(android.graphics.RectF, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.RectF r1;
        android.graphics.Paint r2;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        r2 := @parameter1: android.graphics.Paint;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f3, $f2, $f1, $f0, r2);

        return;
    }

    public void drawRGB(int, int, int)
    {
        android.view.GLES20Canvas r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: android.view.GLES20Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i0 & 255;

        $i4 = $i3 << 16;

        $i7 = -16777216 | $i4;

        $i5 = i1 & 255;

        $i6 = $i5 << 8;

        $i9 = $i7 | $i6;

        $i8 = i2 & 255;

        $i10 = $i9 | $i8;

        virtualinvoke r0.<android.view.GLES20Canvas: void drawColor(int)>($i10);

        return;
    }

    public void drawRoundRect(float, float, float, float, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        float f0, f1, f2, f3, f4, f5;
        android.graphics.Paint r1;
        long $l0, $l1;

        r0 := @this: android.view.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        r1 := @parameter6: android.graphics.Paint;

        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l0 = r1.<android.graphics.Paint: long mNativePaint>;

        staticinvoke <android.view.GLES20Canvas: void nDrawRoundRect(long,float,float,float,float,float,float,long)>($l1, f0, f1, f2, f3, f4, f5, $l0);

        return;
    }

    private static native void nDrawRoundRect(long, float, float, float, float, float, float, long);

    public void drawText(char[], int, int, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        char[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i12;
        float f0, f1;
        android.graphics.Paint r2;
        long $l9, $l10, $l11;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r2 := @parameter5: android.graphics.Paint;

        $i3 = i0 | i1;

        $i2 = i0 + i1;

        $i7 = $i3 | $i2;

        $i4 = lengthof r1;

        $i5 = $i4 - i0;

        $i6 = $i5 - i1;

        $i8 = $i7 | $i6;

        if $i8 >= 0 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        $l11 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i12 = r2.<android.graphics.Paint: int mBidiFlags>;

        $l10 = r2.<android.graphics.Paint: long mNativePaint>;

        $l9 = r2.<android.graphics.Paint: long mNativeTypeface>;

        staticinvoke <android.view.GLES20Canvas: void nDrawText(long,char[],int,int,float,float,int,long,long)>($l11, r1, i0, i1, f0, f1, $i12, $l10, $l9);

        return;
    }

    private static native void nDrawText(long, char[], int, int, float, float, int, long, long);

    public void drawText(java.lang.CharSequence, int, int, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        java.lang.CharSequence r1;
        int i0, i1, $i5, $i6, $i8, $i11;
        float f0, f1;
        android.graphics.Paint r2;
        char[] r3;
        boolean $z0, $z1, $z2, $z3;
        long $l2, $l3, $l4, $l7, $l9, $l10;
        java.lang.String $r4;
        android.text.GraphicsOperations $r5;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r2 := @parameter5: android.graphics.Paint;

        $z0 = r1 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $z1 = r1 instanceof android.text.SpannedString;

        if $z1 != 0 goto label1;

        $z2 = r1 instanceof android.text.SpannableString;

        if $z2 == 0 goto label2;

     label1:
        $l2 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $r4 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        $i5 = r2.<android.graphics.Paint: int mBidiFlags>;

        $l4 = r2.<android.graphics.Paint: long mNativePaint>;

        $l3 = r2.<android.graphics.Paint: long mNativeTypeface>;

        staticinvoke <android.view.GLES20Canvas: void nDrawText(long,java.lang.String,int,int,float,float,int,long,long)>($l2, $r4, i0, i1, f0, f1, $i5, $l4, $l3);

        goto label4;

     label2:
        $z3 = r1 instanceof android.text.GraphicsOperations;

        if $z3 == 0 goto label3;

        $r5 = (android.text.GraphicsOperations) r1;

        interfaceinvoke $r5.<android.text.GraphicsOperations: void drawText(android.graphics.Canvas,int,int,float,float,android.graphics.Paint)>(r0, i0, i1, f0, f1, r2);

        goto label4;

     label3:
        $i6 = i1 - i0;

        r3 = staticinvoke <android.graphics.TemporaryBuffer: char[] obtain(int)>($i6);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i0, i1, r3, 0);

        $l10 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i11 = i1 - i0;

        $i8 = r2.<android.graphics.Paint: int mBidiFlags>;

        $l9 = r2.<android.graphics.Paint: long mNativePaint>;

        $l7 = r2.<android.graphics.Paint: long mNativeTypeface>;

        staticinvoke <android.view.GLES20Canvas: void nDrawText(long,char[],int,int,float,float,int,long,long)>($l10, r3, 0, $i11, f0, f1, $i8, $l9, $l7);

        staticinvoke <android.graphics.TemporaryBuffer: void recycle(char[])>(r3);

     label4:
        return;
    }

    public void drawText(java.lang.String, int, int, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10;
        float f0, f1;
        android.graphics.Paint r2;
        long $l8, $l9, $l11;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r2 := @parameter5: android.graphics.Paint;

        $i3 = i0 | i1;

        $i2 = i1 - i0;

        $i4 = $i3 | $i2;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = $i5 - i1;

        $i7 = $i4 | $i6;

        if $i7 >= 0 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        $l11 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i10 = r2.<android.graphics.Paint: int mBidiFlags>;

        $l9 = r2.<android.graphics.Paint: long mNativePaint>;

        $l8 = r2.<android.graphics.Paint: long mNativeTypeface>;

        staticinvoke <android.view.GLES20Canvas: void nDrawText(long,java.lang.String,int,int,float,float,int,long,long)>($l11, r1, i0, i1, f0, f1, $i10, $l9, $l8);

        return;
    }

    private static native void nDrawText(long, java.lang.String, int, int, float, float, int, long, long);

    public void drawText(java.lang.String, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        java.lang.String r1;
        float f0, f1;
        android.graphics.Paint r2;
        long $l0, $l2, $l3;
        int $i1, $i4;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r2 := @parameter3: android.graphics.Paint;

        $l0 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = r2.<android.graphics.Paint: int mBidiFlags>;

        $l3 = r2.<android.graphics.Paint: long mNativePaint>;

        $l2 = r2.<android.graphics.Paint: long mNativeTypeface>;

        staticinvoke <android.view.GLES20Canvas: void nDrawText(long,java.lang.String,int,int,float,float,int,long,long)>($l0, r1, 0, $i1, f0, f1, $i4, $l3, $l2);

        return;
    }

    public void drawTextOnPath(char[], int, int, android.graphics.Path, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        char[] r1;
        int i0, i1, $i2, $i3, $i6;
        android.graphics.Path r2;
        float f0, f1;
        android.graphics.Paint r3;
        java.lang.ArrayIndexOutOfBoundsException $r4;
        long $l4, $l5, $l7, $l8;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Path;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r3 := @parameter6: android.graphics.Paint;

        if i0 < 0 goto label1;

        $i3 = i0 + i1;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label2;

     label1:
        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label2:
        $l8 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l7 = r2.<android.graphics.Path: long mNativePath>;

        $i6 = r3.<android.graphics.Paint: int mBidiFlags>;

        $l5 = r3.<android.graphics.Paint: long mNativePaint>;

        $l4 = r3.<android.graphics.Paint: long mNativeTypeface>;

        staticinvoke <android.view.GLES20Canvas: void nDrawTextOnPath(long,char[],int,int,long,float,float,int,long,long)>($l8, r1, i0, i1, $l7, f0, f1, $i6, $l5, $l4);

        return;
    }

    private static native void nDrawTextOnPath(long, char[], int, int, long, float, float, int, long, long);

    public void drawTextOnPath(java.lang.String, android.graphics.Path, float, float, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        java.lang.String r1;
        android.graphics.Path r2;
        float f0, f1;
        android.graphics.Paint r3;
        int $i0, $i2, $i5;
        long $l1, $l3, $l4, $l6;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.graphics.Path;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        r3 := @parameter4: android.graphics.Paint;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $l1 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $l6 = r2.<android.graphics.Path: long mNativePath>;

        $i5 = r3.<android.graphics.Paint: int mBidiFlags>;

        $l4 = r3.<android.graphics.Paint: long mNativePaint>;

        $l3 = r3.<android.graphics.Paint: long mNativeTypeface>;

        staticinvoke <android.view.GLES20Canvas: void nDrawTextOnPath(long,java.lang.String,int,int,long,float,float,int,long,long)>($l1, r1, 0, $i2, $l6, f0, f1, $i5, $l4, $l3);

        return;
    }

    private static native void nDrawTextOnPath(long, java.lang.String, int, int, long, float, float, int, long, long);

    public void drawTextRun(char[], int, int, int, int, float, float, boolean, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        char[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        float f0, f1;
        boolean z0;
        android.graphics.Paint r2;
        long $l9, $l10, $l11;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        f0 := @parameter5: float;

        f1 := @parameter6: float;

        z0 := @parameter7: boolean;

        r2 := @parameter8: android.graphics.Paint;

        $i7 = i0 | i1;

        $i4 = lengthof r1;

        $i5 = $i4 - i0;

        $i6 = $i5 - i1;

        $i8 = $i7 | $i6;

        if $i8 >= 0 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        $l10 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $l11 = r2.<android.graphics.Paint: long mNativePaint>;

        $l9 = r2.<android.graphics.Paint: long mNativeTypeface>;

        staticinvoke <android.view.GLES20Canvas: void nDrawTextRun(long,char[],int,int,int,int,float,float,boolean,long,long)>($l10, r1, i0, i1, i2, i3, f0, f1, z0, $l11, $l9);

        return;
    }

    private static native void nDrawTextRun(long, char[], int, int, int, int, float, float, boolean, long, long);

    public void drawTextRun(java.lang.CharSequence, int, int, int, int, float, float, boolean, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i18;
        float f0, f1;
        boolean z0, $z1, $z2, $z3, $z4;
        android.graphics.Paint r2;
        char[] r3;
        java.lang.String $r4;
        long $l12, $l13, $l14, $l15, $l16, $l17;
        android.text.GraphicsOperations $r5;
        java.lang.IndexOutOfBoundsException $r6;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        f0 := @parameter5: float;

        f1 := @parameter6: float;

        z0 := @parameter7: boolean;

        r2 := @parameter8: android.graphics.Paint;

        $i7 = i0 | i1;

        $i6 = i1 - i0;

        $i8 = $i7 | $i6;

        $i10 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i9 = $i10 - i1;

        $i11 = $i8 | $i9;

        if $i11 >= 0 goto label1;

        $r6 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r6;

     label1:
        $z1 = r1 instanceof java.lang.String;

        if $z1 != 0 goto label2;

        $z3 = r1 instanceof android.text.SpannedString;

        if $z3 != 0 goto label2;

        $z2 = r1 instanceof android.text.SpannableString;

        if $z2 == 0 goto label3;

     label2:
        $l12 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $r4 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        $l13 = r2.<android.graphics.Paint: long mNativePaint>;

        $l14 = r2.<android.graphics.Paint: long mNativeTypeface>;

        staticinvoke <android.view.GLES20Canvas: void nDrawTextRun(long,java.lang.String,int,int,int,int,float,float,boolean,long,long)>($l12, $r4, i0, i1, i2, i3, f0, f1, z0, $l13, $l14);

        goto label5;

     label3:
        $z4 = r1 instanceof android.text.GraphicsOperations;

        if $z4 == 0 goto label4;

        $r5 = (android.text.GraphicsOperations) r1;

        interfaceinvoke $r5.<android.text.GraphicsOperations: void drawTextRun(android.graphics.Canvas,int,int,int,int,float,float,boolean,android.graphics.Paint)>(r0, i0, i1, i2, i3, f0, f1, z0, r2);

        goto label5;

     label4:
        i4 = i3 - i2;

        i5 = i1 - i0;

        r3 = staticinvoke <android.graphics.TemporaryBuffer: char[] obtain(int)>(i4);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i2, i3, r3, 0);

        $l17 = r0.<android.view.GLES20Canvas: long mRenderer>;

        $i18 = i0 - i2;

        $l15 = r2.<android.graphics.Paint: long mNativePaint>;

        $l16 = r2.<android.graphics.Paint: long mNativeTypeface>;

        staticinvoke <android.view.GLES20Canvas: void nDrawTextRun(long,char[],int,int,int,int,float,float,boolean,long,long)>($l17, r3, $i18, i5, 0, i4, f0, f1, z0, $l15, $l16);

        staticinvoke <android.graphics.TemporaryBuffer: void recycle(char[])>(r3);

     label5:
        return;
    }

    private static native void nDrawTextRun(long, java.lang.String, int, int, int, int, float, float, boolean, long, long);

    public void drawVertices(android.graphics.Canvas$VertexMode, int, float[], int, float[], int, int[], int, short[], int, int, android.graphics.Paint)
    {
        android.view.GLES20Canvas r0;
        android.graphics.Canvas$VertexMode r1;
        int i0, i1, i2, i3, i4, i5;
        float[] r2, r3;
        int[] r4;
        short[] r5;
        android.graphics.Paint r6;

        r0 := @this: android.view.GLES20Canvas;

        r1 := @parameter0: android.graphics.Canvas$VertexMode;

        i0 := @parameter1: int;

        r2 := @parameter2: float[];

        i1 := @parameter3: int;

        r3 := @parameter4: float[];

        i2 := @parameter5: int;

        r4 := @parameter6: int[];

        i3 := @parameter7: int;

        r5 := @parameter8: short[];

        i4 := @parameter9: int;

        i5 := @parameter10: int;

        r6 := @parameter11: android.graphics.Paint;

        return;
    }

    static void access$000(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <android.view.GLES20Canvas: void nDestroyRenderer(long)>(l0);

        return;
    }

    static void <clinit>()
    {
        boolean $z0;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean nIsAvailable()>();

        <android.view.GLES20Canvas: boolean sIsAvailable> = $z0;

        return;
    }
}
