public class android.alsa.AlsaDevicesParser extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final int kIndex_CardDeviceField;
    private static final int kStartIndex_CardNum;
    private static final int kEndIndex_CardNum;
    private static final int kStartIndex_DeviceNum;
    private static final int kEndIndex_DeviceNum;
    private static final int kStartIndex_Type;
    private static android.alsa.LineTokenizer mTokenizer;
    private boolean mHasCaptureDevices;
    private boolean mHasPlaybackDevices;
    private boolean mHasMIDIDevices;
    private java.util.Vector deviceRecords_;

    private boolean isLineDeviceRecord(java.lang.String)
    {
        android.alsa.AlsaDevicesParser r0;
        java.lang.String r1;
        char $c0;
        boolean $z0;

        r0 := @this: android.alsa.AlsaDevicesParser;

        r1 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(5);

        if $c0 != 91 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void <init>()
    {
        android.alsa.AlsaDevicesParser r0;
        java.util.Vector $r1;

        r0 := @this: android.alsa.AlsaDevicesParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.alsa.AlsaDevicesParser: boolean mHasCaptureDevices> = 0;

        r0.<android.alsa.AlsaDevicesParser: boolean mHasPlaybackDevices> = 0;

        r0.<android.alsa.AlsaDevicesParser: boolean mHasMIDIDevices> = 0;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<android.alsa.AlsaDevicesParser: java.util.Vector deviceRecords_> = $r1;

        return;
    }

    public int getNumDeviceRecords()
    {
        android.alsa.AlsaDevicesParser r0;
        java.util.Vector $r1;
        int $i0;

        r0 := @this: android.alsa.AlsaDevicesParser;

        $r1 = r0.<android.alsa.AlsaDevicesParser: java.util.Vector deviceRecords_>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i0;
    }

    public android.alsa.AlsaDevicesParser$AlsaDeviceRecord getDeviceRecordAt(int)
    {
        android.alsa.AlsaDevicesParser r0;
        int i0;
        java.util.Vector $r1;
        java.lang.Object $r2;
        android.alsa.AlsaDevicesParser$AlsaDeviceRecord $r3;

        r0 := @this: android.alsa.AlsaDevicesParser;

        i0 := @parameter0: int;

        $r1 = r0.<android.alsa.AlsaDevicesParser: java.util.Vector deviceRecords_>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(i0);

        $r3 = (android.alsa.AlsaDevicesParser$AlsaDeviceRecord) $r2;

        return $r3;
    }

    public void Log()
    {
        android.alsa.AlsaDevicesParser r0;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r5;
        android.alsa.AlsaDevicesParser$AlsaDeviceRecord $r3;
        java.lang.String $r4, $r6;

        r0 := @this: android.alsa.AlsaDevicesParser;

        i0 = virtualinvoke r0.<android.alsa.AlsaDevicesParser: int getNumDeviceRecords()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("usb:");

        $r3 = virtualinvoke r0.<android.alsa.AlsaDevicesParser: android.alsa.AlsaDevicesParser$AlsaDeviceRecord getDeviceRecordAt(int)>(i1);

        $r4 = virtualinvoke $r3.<android.alsa.AlsaDevicesParser$AlsaDeviceRecord: java.lang.String textFormat()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AlsaDevicesParser", $r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean hasPlaybackDevices()
    {
        android.alsa.AlsaDevicesParser r0;
        boolean $z0;

        r0 := @this: android.alsa.AlsaDevicesParser;

        $z0 = r0.<android.alsa.AlsaDevicesParser: boolean mHasPlaybackDevices>;

        return $z0;
    }

    public boolean hasPlaybackDevices(int)
    {
        android.alsa.AlsaDevicesParser r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.alsa.AlsaDevicesParser$AlsaDeviceRecord r1;
        java.util.Vector $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: android.alsa.AlsaDevicesParser;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        $r2 = r0.<android.alsa.AlsaDevicesParser: java.util.Vector deviceRecords_>;

        $i2 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if i1 >= $i2 goto label3;

        $r3 = r0.<android.alsa.AlsaDevicesParser: java.util.Vector deviceRecords_>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object get(int)>(i1);

        r1 = (android.alsa.AlsaDevicesParser$AlsaDeviceRecord) $r4;

        $i3 = r1.<android.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mCardNum>;

        if $i3 != i0 goto label2;

        $i4 = r1.<android.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mDeviceType>;

        if $i4 != 0 goto label2;

        $i5 = r1.<android.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mDeviceDir>;

        if $i5 != 1 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean hasCaptureDevices()
    {
        android.alsa.AlsaDevicesParser r0;
        boolean $z0;

        r0 := @this: android.alsa.AlsaDevicesParser;

        $z0 = r0.<android.alsa.AlsaDevicesParser: boolean mHasCaptureDevices>;

        return $z0;
    }

    public boolean hasCaptureDevices(int)
    {
        android.alsa.AlsaDevicesParser r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.alsa.AlsaDevicesParser$AlsaDeviceRecord r1;
        java.util.Vector $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: android.alsa.AlsaDevicesParser;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        $r2 = r0.<android.alsa.AlsaDevicesParser: java.util.Vector deviceRecords_>;

        $i2 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if i1 >= $i2 goto label3;

        $r3 = r0.<android.alsa.AlsaDevicesParser: java.util.Vector deviceRecords_>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object get(int)>(i1);

        r1 = (android.alsa.AlsaDevicesParser$AlsaDeviceRecord) $r4;

        $i3 = r1.<android.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mCardNum>;

        if $i3 != i0 goto label2;

        $i4 = r1.<android.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mDeviceType>;

        if $i4 != 0 goto label2;

        $i5 = r1.<android.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mDeviceDir>;

        if $i5 != 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean hasMIDIDevices()
    {
        android.alsa.AlsaDevicesParser r0;
        boolean $z0;

        r0 := @this: android.alsa.AlsaDevicesParser;

        $z0 = r0.<android.alsa.AlsaDevicesParser: boolean mHasMIDIDevices>;

        return $z0;
    }

    public boolean hasMIDIDevices(int)
    {
        android.alsa.AlsaDevicesParser r0;
        int i0, i1, $i2, $i3, $i4;
        android.alsa.AlsaDevicesParser$AlsaDeviceRecord r1;
        java.util.Vector $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: android.alsa.AlsaDevicesParser;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        $r2 = r0.<android.alsa.AlsaDevicesParser: java.util.Vector deviceRecords_>;

        $i2 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if i1 >= $i2 goto label3;

        $r3 = r0.<android.alsa.AlsaDevicesParser: java.util.Vector deviceRecords_>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object get(int)>(i1);

        r1 = (android.alsa.AlsaDevicesParser$AlsaDeviceRecord) $r4;

        $i3 = r1.<android.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mCardNum>;

        if $i3 != i0 goto label2;

        $i4 = r1.<android.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mDeviceType>;

        if $i4 != 2 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public void scan()
    {
        android.alsa.AlsaDevicesParser r0;
        java.io.File r2, $r8;
        java.io.FileReader r3, $r9;
        java.io.BufferedReader r4, $r10;
        android.alsa.AlsaDevicesParser$AlsaDeviceRecord r6, $r12;
        java.util.Vector $r7, $r13;
        java.lang.String $r11, r16;
        boolean $z0;
        java.io.FileNotFoundException $r14, r17;
        java.io.IOException $r15, r18;

        r0 := @this: android.alsa.AlsaDevicesParser;

        $r7 = r0.<android.alsa.AlsaDevicesParser: java.util.Vector deviceRecords_>;

        virtualinvoke $r7.<java.util.Vector: void clear()>();

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>("/proc/asound/devices");

        r2 = $r8;

     label1:
        $r9 = new java.io.FileReader;

        specialinvoke $r9.<java.io.FileReader: void <init>(java.io.File)>(r2);

        r3 = $r9;

        $r10 = new java.io.BufferedReader;

        specialinvoke $r10.<java.io.BufferedReader: void <init>(java.io.Reader)>(r3);

        r4 = $r10;

     label2:
        $r11 = virtualinvoke r4.<java.io.BufferedReader: java.lang.String readLine()>();

        r16 = $r11;

        if $r11 == null goto label3;

        $z0 = specialinvoke r0.<android.alsa.AlsaDevicesParser: boolean isLineDeviceRecord(java.lang.String)>(r16);

        if $z0 == 0 goto label2;

        $r12 = new android.alsa.AlsaDevicesParser$AlsaDeviceRecord;

        specialinvoke $r12.<android.alsa.AlsaDevicesParser$AlsaDeviceRecord: void <init>(android.alsa.AlsaDevicesParser)>(r0);

        r6 = $r12;

        virtualinvoke r6.<android.alsa.AlsaDevicesParser$AlsaDeviceRecord: boolean parse(java.lang.String)>(r16);

        $r13 = r0.<android.alsa.AlsaDevicesParser: java.util.Vector deviceRecords_>;

        virtualinvoke $r13.<java.util.Vector: boolean add(java.lang.Object)>(r6);

        goto label2;

     label3:
        virtualinvoke r3.<java.io.FileReader: void close()>();

     label4:
        goto label7;

     label5:
        $r14 := @caughtexception;

        r17 = $r14;

        virtualinvoke r17.<java.io.FileNotFoundException: void printStackTrace()>();

        goto label7;

     label6:
        $r15 := @caughtexception;

        r18 = $r15;

        virtualinvoke r18.<java.io.IOException: void printStackTrace()>();

     label7:
        return;

        catch java.io.FileNotFoundException from label1 to label4 with label5;
        catch java.io.IOException from label1 to label4 with label6;
    }

    static android.alsa.LineTokenizer access$000()
    {
        android.alsa.LineTokenizer $r0;

        $r0 = <android.alsa.AlsaDevicesParser: android.alsa.LineTokenizer mTokenizer>;

        return $r0;
    }

    static boolean access$102(android.alsa.AlsaDevicesParser, boolean)
    {
        android.alsa.AlsaDevicesParser r0;
        boolean z0;

        r0 := @parameter0: android.alsa.AlsaDevicesParser;

        z0 := @parameter1: boolean;

        r0.<android.alsa.AlsaDevicesParser: boolean mHasMIDIDevices> = z0;

        return z0;
    }

    static boolean access$202(android.alsa.AlsaDevicesParser, boolean)
    {
        android.alsa.AlsaDevicesParser r0;
        boolean z0;

        r0 := @parameter0: android.alsa.AlsaDevicesParser;

        z0 := @parameter1: boolean;

        r0.<android.alsa.AlsaDevicesParser: boolean mHasCaptureDevices> = z0;

        return z0;
    }

    static boolean access$302(android.alsa.AlsaDevicesParser, boolean)
    {
        android.alsa.AlsaDevicesParser r0;
        boolean z0;

        r0 := @parameter0: android.alsa.AlsaDevicesParser;

        z0 := @parameter1: boolean;

        r0.<android.alsa.AlsaDevicesParser: boolean mHasPlaybackDevices> = z0;

        return z0;
    }

    static void <clinit>()
    {
        android.alsa.LineTokenizer $r0;

        <android.alsa.AlsaDevicesParser: int kStartIndex_Type> = 14;

        <android.alsa.AlsaDevicesParser: int kEndIndex_DeviceNum> = 11;

        <android.alsa.AlsaDevicesParser: int kStartIndex_DeviceNum> = 9;

        <android.alsa.AlsaDevicesParser: int kEndIndex_CardNum> = 8;

        <android.alsa.AlsaDevicesParser: int kStartIndex_CardNum> = 6;

        <android.alsa.AlsaDevicesParser: int kIndex_CardDeviceField> = 5;

        <android.alsa.AlsaDevicesParser: java.lang.String TAG> = "AlsaDevicesParser";

        $r0 = new android.alsa.LineTokenizer;

        specialinvoke $r0.<android.alsa.LineTokenizer: void <init>(java.lang.String)>(" :[]-");

        <android.alsa.AlsaDevicesParser: android.alsa.LineTokenizer mTokenizer> = $r0;

        return;
    }
}
