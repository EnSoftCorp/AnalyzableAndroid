class android.net.dhcp.DhcpOfferPacket extends android.net.dhcp.DhcpPacket
{
    private final java.net.InetAddress mSrcIp;

    void <init>(int, boolean, java.net.InetAddress, java.net.InetAddress, byte[])
    {
        android.net.dhcp.DhcpOfferPacket r0;
        int i0;
        boolean z0;
        java.net.InetAddress r1, r2, $r4, $r5, $r6;
        byte[] r3;

        r0 := @this: android.net.dhcp.DhcpOfferPacket;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.net.InetAddress;

        r2 := @parameter3: java.net.InetAddress;

        r3 := @parameter4: byte[];

        $r6 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        $r5 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        $r4 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        specialinvoke r0.<android.net.dhcp.DhcpPacket: void <init>(int,java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,byte[],boolean)>(i0, $r6, r2, $r5, $r4, r3, z0);

        r0.<android.net.dhcp.DhcpOfferPacket: java.net.InetAddress mSrcIp> = r1;

        return;
    }

    public java.lang.String toString()
    {
        android.net.dhcp.DhcpOfferPacket r0;
        java.lang.String r1, r2, $r21, $r23;
        java.util.Iterator r3;
        java.net.InetAddress r4, $r9, $r12, $r15;
        java.util.List $r5, $r25;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r18, $r19, $r22, $r24, $r27, $r28, $r29, $r30;
        java.lang.Integer $r20;
        java.lang.Object $r26;
        boolean $z0;

        r0 := @this: android.net.dhcp.DhcpOfferPacket;

        r1 = specialinvoke r0.<android.net.dhcp.DhcpPacket: java.lang.String toString()>();

        r2 = ", DNS servers: ";

        $r5 = r0.<android.net.dhcp.DhcpOfferPacket: java.util.List mDnsServers>;

        if $r5 == null goto label2;

        $r25 = r0.<android.net.dhcp.DhcpOfferPacket: java.util.List mDnsServers>;

        r3 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r26 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.net.InetAddress) $r26;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r2 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" OFFER, ip ");

        $r9 = r0.<android.net.dhcp.DhcpOfferPacket: java.net.InetAddress mYourIp>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mask ");

        $r12 = r0.<android.net.dhcp.DhcpOfferPacket: java.net.InetAddress mSubnetMask>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", gateway ");

        $r15 = r0.<android.net.dhcp.DhcpOfferPacket: java.net.InetAddress mGateway>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lease time ");

        $r20 = r0.<android.net.dhcp.DhcpOfferPacket: java.lang.Integer mLeaseTime>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", domain ");

        $r21 = r0.<android.net.dhcp.DhcpOfferPacket: java.lang.String mDomainName>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r23;
    }

    public java.nio.ByteBuffer buildPacket(int, short, short)
    {
        android.net.dhcp.DhcpOfferPacket r0;
        int i0;
        short s1, s2;
        java.nio.ByteBuffer r1;
        java.net.InetAddress r2, r3, $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: android.net.dhcp.DhcpOfferPacket;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        s2 := @parameter2: short;

        r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(1500);

        $z0 = r0.<android.net.dhcp.DhcpOfferPacket: boolean mBroadcast>;

        if $z0 == 0 goto label1;

        $r6 = <java.net.Inet4Address: java.net.InetAddress ALL>;

        goto label2;

     label1:
        $r6 = r0.<android.net.dhcp.DhcpOfferPacket: java.net.InetAddress mYourIp>;

     label2:
        r2 = $r6;

        $z1 = r0.<android.net.dhcp.DhcpOfferPacket: boolean mBroadcast>;

        if $z1 == 0 goto label3;

        $r5 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        goto label4;

     label3:
        $r5 = r0.<android.net.dhcp.DhcpOfferPacket: java.net.InetAddress mSrcIp>;

     label4:
        r3 = $r5;

        $z2 = r0.<android.net.dhcp.DhcpOfferPacket: boolean mBroadcast>;

        virtualinvoke r0.<android.net.dhcp.DhcpOfferPacket: void fillInPacket(int,java.net.InetAddress,java.net.InetAddress,short,short,java.nio.ByteBuffer,byte,boolean)>(i0, r2, r3, s1, s2, r1, 2, $z2);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return r1;
    }

    void finishPacket(java.nio.ByteBuffer)
    {
        android.net.dhcp.DhcpOfferPacket r0;
        java.nio.ByteBuffer r1;
        java.net.InetAddress $r2, $r5, $r6, $r8;
        java.lang.Integer $r3, $r4, $r10, $r11;
        java.lang.String $r7;
        java.util.List $r9;
        int $i0, $i1;

        r0 := @this: android.net.dhcp.DhcpOfferPacket;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r0.<android.net.dhcp.DhcpOfferPacket: void addTlv(java.nio.ByteBuffer,byte,byte)>(r1, 53, 2);

        $r2 = r0.<android.net.dhcp.DhcpOfferPacket: java.net.InetAddress mServerIdentifier>;

        virtualinvoke r0.<android.net.dhcp.DhcpOfferPacket: void addTlv(java.nio.ByteBuffer,byte,java.net.InetAddress)>(r1, 54, $r2);

        $r3 = r0.<android.net.dhcp.DhcpOfferPacket: java.lang.Integer mLeaseTime>;

        virtualinvoke r0.<android.net.dhcp.DhcpOfferPacket: void addTlv(java.nio.ByteBuffer,byte,java.lang.Integer)>(r1, 51, $r3);

        $r4 = r0.<android.net.dhcp.DhcpOfferPacket: java.lang.Integer mLeaseTime>;

        if $r4 == null goto label1;

        $r10 = r0.<android.net.dhcp.DhcpOfferPacket: java.lang.Integer mLeaseTime>;

        $i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $i1 = $i0 / 2;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r0.<android.net.dhcp.DhcpOfferPacket: void addTlv(java.nio.ByteBuffer,byte,java.lang.Integer)>(r1, 58, $r11);

     label1:
        $r5 = r0.<android.net.dhcp.DhcpOfferPacket: java.net.InetAddress mSubnetMask>;

        virtualinvoke r0.<android.net.dhcp.DhcpOfferPacket: void addTlv(java.nio.ByteBuffer,byte,java.net.InetAddress)>(r1, 1, $r5);

        $r6 = r0.<android.net.dhcp.DhcpOfferPacket: java.net.InetAddress mGateway>;

        virtualinvoke r0.<android.net.dhcp.DhcpOfferPacket: void addTlv(java.nio.ByteBuffer,byte,java.net.InetAddress)>(r1, 3, $r6);

        $r7 = r0.<android.net.dhcp.DhcpOfferPacket: java.lang.String mDomainName>;

        virtualinvoke r0.<android.net.dhcp.DhcpOfferPacket: void addTlv(java.nio.ByteBuffer,byte,java.lang.String)>(r1, 15, $r7);

        $r8 = r0.<android.net.dhcp.DhcpOfferPacket: java.net.InetAddress mBroadcastAddress>;

        virtualinvoke r0.<android.net.dhcp.DhcpOfferPacket: void addTlv(java.nio.ByteBuffer,byte,java.net.InetAddress)>(r1, 28, $r8);

        $r9 = r0.<android.net.dhcp.DhcpOfferPacket: java.util.List mDnsServers>;

        virtualinvoke r0.<android.net.dhcp.DhcpOfferPacket: void addTlv(java.nio.ByteBuffer,byte,java.util.List)>(r1, 6, $r9);

        virtualinvoke r0.<android.net.dhcp.DhcpOfferPacket: void addTlvEnd(java.nio.ByteBuffer)>(r1);

        return;
    }

    public void doNextOp(android.net.dhcp.DhcpStateMachine)
    {
        android.net.dhcp.DhcpOfferPacket r0;
        android.net.dhcp.DhcpStateMachine r1;
        java.net.InetAddress $r2, $r3;
        byte[] $r4;
        int $i0;
        boolean $z0;

        r0 := @this: android.net.dhcp.DhcpOfferPacket;

        r1 := @parameter0: android.net.dhcp.DhcpStateMachine;

        $z0 = r0.<android.net.dhcp.DhcpOfferPacket: boolean mBroadcast>;

        $i0 = r0.<android.net.dhcp.DhcpOfferPacket: int mTransId>;

        $r4 = r0.<android.net.dhcp.DhcpOfferPacket: byte[] mClientMac>;

        $r3 = r0.<android.net.dhcp.DhcpOfferPacket: java.net.InetAddress mYourIp>;

        $r2 = r0.<android.net.dhcp.DhcpOfferPacket: java.net.InetAddress mServerIdentifier>;

        interfaceinvoke r1.<android.net.dhcp.DhcpStateMachine: void onOfferReceived(boolean,int,byte[],java.net.InetAddress,java.net.InetAddress)>($z0, $i0, $r4, $r3, $r2);

        return;
    }
}
