public abstract class android.view.HardwareRenderer extends java.lang.Object
{
    static final java.lang.String LOG_TAG;
    private static final java.lang.String CACHE_PATH_SHADERS;
    static final java.lang.String RENDER_DIRTY_REGIONS_PROPERTY;
    public static final java.lang.String PROFILE_PROPERTY;
    public static final java.lang.String PROFILE_PROPERTY_VISUALIZE_BARS;
    static final java.lang.String PROFILE_MAXFRAMES_PROPERTY;
    static final java.lang.String PRINT_CONFIG_PROPERTY;
    public static final java.lang.String DEBUG_DIRTY_REGIONS_PROPERTY;
    public static final java.lang.String DEBUG_SHOW_LAYERS_UPDATES_PROPERTY;
    public static final java.lang.String DEBUG_OVERDRAW_PROPERTY;
    public static final java.lang.String OVERDRAW_PROPERTY_SHOW;
    public static final java.lang.String DEBUG_SHOW_NON_RECTANGULAR_CLIP_PROPERTY;
    public static boolean sRendererDisabled;
    public static boolean sSystemRendererDisabled;
    private boolean mEnabled;
    private boolean mRequested;
    public static boolean sTrimForeground;

    public void <init>()
    {
        android.view.HardwareRenderer r0;

        r0 := @this: android.view.HardwareRenderer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.HardwareRenderer: boolean mRequested> = 1;

        return;
    }

    public static void disable(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <android.view.HardwareRenderer: boolean sRendererDisabled> = 1;

        if z0 == 0 goto label1;

        <android.view.HardwareRenderer: boolean sSystemRendererDisabled> = 1;

     label1:
        return;
    }

    public static void enableForegroundTrimming()
    {
        <android.view.HardwareRenderer: boolean sTrimForeground> = 1;

        return;
    }

    public static boolean isAvailable()
    {
        boolean $z0;

        $z0 = staticinvoke <android.view.GLES20Canvas: boolean isAvailable()>();

        return $z0;
    }

    abstract void destroy();

    abstract boolean initialize(android.view.Surface) throws android.view.Surface$OutOfResourcesException;

    abstract void updateSurface(android.view.Surface) throws android.view.Surface$OutOfResourcesException;

    abstract void pauseSurface(android.view.Surface);

    abstract void destroyHardwareResources(android.view.View);

    abstract void invalidate(android.view.Surface);

    abstract void detachSurfaceTexture(long);

    abstract int getWidth();

    abstract int getHeight();

    abstract void dumpGfxInfo(java.io.PrintWriter, java.io.FileDescriptor);

    abstract boolean loadSystemProperties();

    public static void setupDiskCache(java.io.File)
    {
        java.io.File r0, $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.io.File;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "com.android.opengl.shaders_cache");

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.view.ThreadedRenderer: void setupShadersDiskCache(java.lang.String)>($r2);

        return;
    }

    abstract void pushLayerUpdate(android.view.HardwareLayer);

    abstract void onLayerDestroyed(android.view.HardwareLayer);

    abstract void invalidateRoot();

    abstract void draw(android.view.View, android.view.View$AttachInfo, android.view.HardwareRenderer$HardwareDrawCallbacks);

    abstract android.view.HardwareLayer createTextureLayer();

    abstract void buildLayer(android.view.RenderNode);

    abstract boolean copyLayerInto(android.view.HardwareLayer, android.graphics.Bitmap);

    boolean initializeIfNeeded(int, int, android.view.Surface, android.graphics.Rect) throws android.view.Surface$OutOfResourcesException
    {
        android.view.HardwareRenderer r0;
        int i0, i1;
        android.view.Surface r1;
        android.graphics.Rect r2;
        boolean $z0, $z1, $z2;

        r0 := @this: android.view.HardwareRenderer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.Surface;

        r2 := @parameter3: android.graphics.Rect;

        $z0 = virtualinvoke r0.<android.view.HardwareRenderer: boolean isRequested()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<android.view.HardwareRenderer: boolean isEnabled()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<android.view.HardwareRenderer: boolean initialize(android.view.Surface)>(r1);

        if $z2 == 0 goto label1;

        virtualinvoke r0.<android.view.HardwareRenderer: void setup(int,int,android.graphics.Rect)>(i0, i1, r2);

        return 1;

     label1:
        return 0;
    }

    abstract void setup(int, int, android.graphics.Rect);

    abstract void setName(java.lang.String);

    abstract void setOpaque(boolean);

    static android.view.HardwareRenderer create(android.content.Context, boolean)
    {
        android.content.Context r0;
        boolean z0, $z1;
        android.view.ThreadedRenderer r1, $r2;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        r1 = null;

        $z1 = staticinvoke <android.view.GLES20Canvas: boolean isAvailable()>();

        if $z1 == 0 goto label1;

        $r2 = new android.view.ThreadedRenderer;

        specialinvoke $r2.<android.view.ThreadedRenderer: void <init>(android.content.Context,boolean)>(r0, z0);

        r1 = $r2;

     label1:
        return r1;
    }

    static void trimMemory(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.view.ThreadedRenderer: void trimMemory(int)>(i0);

        return;
    }

    boolean isEnabled()
    {
        android.view.HardwareRenderer r0;
        boolean $z0;

        r0 := @this: android.view.HardwareRenderer;

        $z0 = r0.<android.view.HardwareRenderer: boolean mEnabled>;

        return $z0;
    }

    void setEnabled(boolean)
    {
        android.view.HardwareRenderer r0;
        boolean z0;

        r0 := @this: android.view.HardwareRenderer;

        z0 := @parameter0: boolean;

        r0.<android.view.HardwareRenderer: boolean mEnabled> = z0;

        return;
    }

    boolean isRequested()
    {
        android.view.HardwareRenderer r0;
        boolean $z0;

        r0 := @this: android.view.HardwareRenderer;

        $z0 = r0.<android.view.HardwareRenderer: boolean mRequested>;

        return $z0;
    }

    void setRequested(boolean)
    {
        android.view.HardwareRenderer r0;
        boolean z0;

        r0 := @this: android.view.HardwareRenderer;

        z0 := @parameter0: boolean;

        r0.<android.view.HardwareRenderer: boolean mRequested> = z0;

        return;
    }

    abstract void fence();

    abstract void stopDrawing();

    abstract void notifyFramePending();

    abstract void registerAnimatingRenderNode(android.view.RenderNode);

    static void <clinit>()
    {
        <android.view.HardwareRenderer: java.lang.String DEBUG_SHOW_NON_RECTANGULAR_CLIP_PROPERTY> = "debug.hwui.show_non_rect_clip";

        <android.view.HardwareRenderer: java.lang.String OVERDRAW_PROPERTY_SHOW> = "show";

        <android.view.HardwareRenderer: java.lang.String DEBUG_OVERDRAW_PROPERTY> = "debug.hwui.overdraw";

        <android.view.HardwareRenderer: java.lang.String DEBUG_SHOW_LAYERS_UPDATES_PROPERTY> = "debug.hwui.show_layers_updates";

        <android.view.HardwareRenderer: java.lang.String DEBUG_DIRTY_REGIONS_PROPERTY> = "debug.hwui.show_dirty_regions";

        <android.view.HardwareRenderer: java.lang.String PRINT_CONFIG_PROPERTY> = "debug.hwui.print_config";

        <android.view.HardwareRenderer: java.lang.String PROFILE_MAXFRAMES_PROPERTY> = "debug.hwui.profile.maxframes";

        <android.view.HardwareRenderer: java.lang.String PROFILE_PROPERTY_VISUALIZE_BARS> = "visual_bars";

        <android.view.HardwareRenderer: java.lang.String PROFILE_PROPERTY> = "debug.hwui.profile";

        <android.view.HardwareRenderer: java.lang.String RENDER_DIRTY_REGIONS_PROPERTY> = "debug.hwui.render_dirty_regions";

        <android.view.HardwareRenderer: java.lang.String CACHE_PATH_SHADERS> = "com.android.opengl.shaders_cache";

        <android.view.HardwareRenderer: java.lang.String LOG_TAG> = "HardwareRenderer";

        <android.view.HardwareRenderer: boolean sRendererDisabled> = 0;

        <android.view.HardwareRenderer: boolean sSystemRendererDisabled> = 0;

        <android.view.HardwareRenderer: boolean sTrimForeground> = 0;

        return;
    }
}
