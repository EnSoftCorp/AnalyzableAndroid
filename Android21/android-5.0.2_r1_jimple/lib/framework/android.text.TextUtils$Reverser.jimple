class android.text.TextUtils$Reverser extends java.lang.Object implements java.lang.CharSequence, android.text.GetChars
{
    private java.lang.CharSequence mSource;
    private int mStart;
    private int mEnd;

    public void <init>(java.lang.CharSequence, int, int)
    {
        android.text.TextUtils$Reverser r0;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: android.text.TextUtils$Reverser;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.text.TextUtils$Reverser: java.lang.CharSequence mSource> = r1;

        r0.<android.text.TextUtils$Reverser: int mStart> = i0;

        r0.<android.text.TextUtils$Reverser: int mEnd> = i1;

        return;
    }

    public int length()
    {
        android.text.TextUtils$Reverser r0;
        int $i0, $i1, $i2;

        r0 := @this: android.text.TextUtils$Reverser;

        $i1 = r0.<android.text.TextUtils$Reverser: int mEnd>;

        $i0 = r0.<android.text.TextUtils$Reverser: int mStart>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public java.lang.CharSequence subSequence(int, int)
    {
        android.text.TextUtils$Reverser r0;
        int i0, i1, $i2;
        char[] r1;
        java.lang.String $r2;

        r0 := @this: android.text.TextUtils$Reverser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i1 - i0;

        r1 = newarray (char)[$i2];

        virtualinvoke r0.<android.text.TextUtils$Reverser: void getChars(int,int,char[],int)>(i0, i1, r1, 0);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        android.text.TextUtils$Reverser r0;
        int $i0;
        java.lang.CharSequence $r1;
        java.lang.String $r2;

        r0 := @this: android.text.TextUtils$Reverser;

        $i0 = virtualinvoke r0.<android.text.TextUtils$Reverser: int length()>();

        $r1 = virtualinvoke r0.<android.text.TextUtils$Reverser: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.String toString()>();

        return $r2;
    }

    public char charAt(int)
    {
        android.text.TextUtils$Reverser r0;
        int i0, $i1, $i2, $i3;
        java.lang.CharSequence $r1;
        char $c4, $c5;

        r0 := @this: android.text.TextUtils$Reverser;

        i0 := @parameter0: int;

        $r1 = r0.<android.text.TextUtils$Reverser: java.lang.CharSequence mSource>;

        $i1 = r0.<android.text.TextUtils$Reverser: int mEnd>;

        $i2 = $i1 - 1;

        $i3 = $i2 - i0;

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i3);

        $c5 = staticinvoke <android.text.AndroidCharacter: char getMirror(char)>($c4);

        return $c5;
    }

    public void getChars(int, int, char[], int)
    {
        android.text.TextUtils$Reverser r0;
        int i0, i1, i2, i3, i4, i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21;
        char[] r1;
        char c6, $c16;
        java.lang.CharSequence $r2;

        r0 := @this: android.text.TextUtils$Reverser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: char[];

        i2 := @parameter3: int;

        $r2 = r0.<android.text.TextUtils$Reverser: java.lang.CharSequence mSource>;

        $i7 = r0.<android.text.TextUtils$Reverser: int mStart>;

        $i10 = i0 + $i7;

        $i8 = r0.<android.text.TextUtils$Reverser: int mStart>;

        $i9 = i1 + $i8;

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>($r2, $i10, $i9, r1, i2);

        $i11 = i1 - i0;

        staticinvoke <android.text.AndroidCharacter: boolean mirror(char[],int,int)>(r1, 0, $i11);

        i3 = i1 - i0;

        $i13 = i1 - i0;

        i4 = $i13 / 2;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        $i12 = i2 + i5;

        c6 = r1[$i12];

        $i19 = i2 + i5;

        $i15 = i2 + i3;

        $i14 = $i15 - i5;

        $i17 = $i14 - 1;

        $c16 = r1[$i17];

        r1[$i19] = $c16;

        $i18 = i2 + i3;

        $i21 = $i18 - i5;

        $i20 = $i21 - 1;

        r1[$i20] = c6;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }
}
