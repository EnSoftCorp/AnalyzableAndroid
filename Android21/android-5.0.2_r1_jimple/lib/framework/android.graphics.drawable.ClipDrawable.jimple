public class android.graphics.drawable.ClipDrawable extends android.graphics.drawable.Drawable implements android.graphics.drawable.Drawable$Callback
{
    private android.graphics.drawable.ClipDrawable$ClipState mClipState;
    private final android.graphics.Rect mTmpRect;
    public static final int HORIZONTAL;
    public static final int VERTICAL;

    void <init>()
    {
        android.graphics.drawable.ClipDrawable r0;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        specialinvoke r0.<android.graphics.drawable.ClipDrawable: void <init>(android.graphics.drawable.ClipDrawable$ClipState,android.content.res.Resources)>(null, null);

        return;
    }

    public void <init>(android.graphics.drawable.Drawable, int, int)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.Drawable r1;
        int i0, i1;
        android.graphics.drawable.ClipDrawable$ClipState $r2, $r3, $r4;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.graphics.drawable.ClipDrawable: void <init>(android.graphics.drawable.ClipDrawable$ClipState,android.content.res.Resources)>(null, null);

        $r2 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r2.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable> = r1;

        $r3 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r3.<android.graphics.drawable.ClipDrawable$ClipState: int mGravity> = i0;

        $r4 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r4.<android.graphics.drawable.ClipDrawable$ClipState: int mOrientation> = i1;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

     label1:
        return;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet, android.content.res.Resources$Theme) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.ClipDrawable r0;
        android.content.res.Resources r1;
        org.xmlpull.v1.XmlPullParser r2;
        android.util.AttributeSet r3;
        android.content.res.Resources$Theme r4;
        int i0, i1, i2, i3, $i4, $i5;
        android.content.res.TypedArray r5;
        android.graphics.drawable.Drawable r6;
        int[] $r7;
        android.graphics.drawable.ClipDrawable$ClipState $r8, $r9, $r11;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 := @parameter2: android.util.AttributeSet;

        r4 := @parameter3: android.content.res.Resources$Theme;

        specialinvoke r0.<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, r4);

        $r7 = <com.android.internal.R$styleable: int[] ClipDrawable>;

        r5 = staticinvoke <android.graphics.drawable.ClipDrawable: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>(r1, r4, r3, $r7);

        i1 = virtualinvoke r5.<android.content.res.TypedArray: int getInt(int,int)>(2, 1);

        i2 = virtualinvoke r5.<android.content.res.TypedArray: int getInt(int,int)>(0, 3);

        r6 = virtualinvoke r5.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(1);

        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

        i3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label1:
        $i4 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int next()>();

        i0 = $i4;

        if $i4 == 1 goto label4;

        if i0 != 3 goto label2;

        $i5 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i5 <= i3 goto label4;

     label2:
        if i0 == 2 goto label3;

        goto label1;

     label3:
        r6 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>(r1, r2, r3, r4);

        goto label1;

     label4:
        if r6 != null goto label5;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No drawable specified for <clip>");

        throw $r10;

     label5:
        $r9 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r9.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable> = r6;

        $r8 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r8.<android.graphics.drawable.ClipDrawable$ClipState: int mOrientation> = i1;

        $r11 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r11.<android.graphics.drawable.ClipDrawable$ClipState: int mGravity> = i2;

        virtualinvoke r6.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        return;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.Drawable r1;
        android.graphics.drawable.Drawable$Callback r2;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 = virtualinvoke r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r2 == null goto label1;

        interfaceinvoke r2.<android.graphics.drawable.Drawable$Callback: void invalidateDrawable(android.graphics.drawable.Drawable)>(r0);

     label1:
        return;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.Drawable r1;
        java.lang.Runnable r2;
        long l0;
        android.graphics.drawable.Drawable$Callback r3;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: java.lang.Runnable;

        l0 := @parameter2: long;

        r3 = virtualinvoke r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r3 == null goto label1;

        interfaceinvoke r3.<android.graphics.drawable.Drawable$Callback: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>(r0, r2, l0);

     label1:
        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.Drawable r1;
        java.lang.Runnable r2;
        android.graphics.drawable.Drawable$Callback r3;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: java.lang.Runnable;

        r3 = virtualinvoke r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        if r3 == null goto label1;

        interfaceinvoke r3.<android.graphics.drawable.Drawable$Callback: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>(r0, r2);

     label1:
        return;
    }

    public int getChangingConfigurations()
    {
        android.graphics.drawable.ClipDrawable r0;
        int $i0, $i1, $i2, $i3, $i4;
        android.graphics.drawable.ClipDrawable$ClipState $r1, $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        $i0 = specialinvoke r0.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        $r1 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $i1 = $r1.<android.graphics.drawable.ClipDrawable$ClipState: int mChangingConfigurations>;

        $i2 = $i0 | $i1;

        $r2 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r3 = $r2.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        $i3 = virtualinvoke $r3.<android.graphics.drawable.Drawable: int getChangingConfigurations()>();

        $i4 = $i2 | $i3;

        return $i4;
    }

    public boolean getPadding(android.graphics.Rect)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.Rect r1;
        android.graphics.drawable.ClipDrawable$ClipState $r2;
        android.graphics.drawable.Drawable $r3;
        boolean $z0;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r3 = $r2.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        $z0 = virtualinvoke $r3.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r1);

        return $z0;
    }

    public boolean setVisible(boolean, boolean)
    {
        android.graphics.drawable.ClipDrawable r0;
        boolean z0, z1, $z3;
        android.graphics.drawable.ClipDrawable$ClipState $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r1 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r2 = $r1.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1);

        $z3 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1);

        return $z3;
    }

    public void setAlpha(int)
    {
        android.graphics.drawable.ClipDrawable r0;
        int i0;
        android.graphics.drawable.ClipDrawable$ClipState $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r2 = $r1.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setAlpha(int)>(i0);

        return;
    }

    public int getAlpha()
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.ClipDrawable$ClipState $r1;
        android.graphics.drawable.Drawable $r2;
        int $i0;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        $r1 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r2 = $r1.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getAlpha()>();

        return $i0;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.ColorFilter r1;
        android.graphics.drawable.ClipDrawable$ClipState $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r3 = $r2.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(r1);

        return;
    }

    public void setTintList(android.content.res.ColorStateList)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.content.res.ColorStateList r1;
        android.graphics.drawable.ClipDrawable$ClipState $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r3 = $r2.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>(r1);

        return;
    }

    public void setTintMode(android.graphics.PorterDuff$Mode)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.PorterDuff$Mode r1;
        android.graphics.drawable.ClipDrawable$ClipState $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.graphics.PorterDuff$Mode;

        $r2 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r3 = $r2.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setTintMode(android.graphics.PorterDuff$Mode)>(r1);

        return;
    }

    public int getOpacity()
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.ClipDrawable$ClipState $r1;
        android.graphics.drawable.Drawable $r2;
        int $i0;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        $r1 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r2 = $r1.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getOpacity()>();

        return $i0;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.ClipDrawable$ClipState $r1;
        android.graphics.drawable.Drawable $r2;
        boolean $z0;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        $r1 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r2 = $r1.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        $z0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean isStateful()>();

        return $z0;
    }

    protected boolean onStateChange(int[])
    {
        android.graphics.drawable.ClipDrawable r0;
        int[] r1;
        android.graphics.drawable.ClipDrawable$ClipState $r2;
        android.graphics.drawable.Drawable $r3;
        boolean $z0;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: int[];

        $r2 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r3 = $r2.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        $z0 = virtualinvoke $r3.<android.graphics.drawable.Drawable: boolean setState(int[])>(r1);

        return $z0;
    }

    protected boolean onLevelChange(int)
    {
        android.graphics.drawable.ClipDrawable r0;
        int i0;
        android.graphics.drawable.ClipDrawable$ClipState $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r2 = $r1.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setLevel(int)>(i0);

        virtualinvoke r0.<android.graphics.drawable.ClipDrawable: void invalidateSelf()>();

        return 1;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.Rect r1;
        android.graphics.drawable.ClipDrawable$ClipState $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r3 = $r2.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>(r1);

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2, r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        android.graphics.drawable.ClipDrawable$ClipState $r4, $r6, $r7, $r8, $r10;
        android.graphics.drawable.Drawable $r5, $r9;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        $r4 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r5 = $r4.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        $i4 = virtualinvoke $r5.<android.graphics.drawable.Drawable: int getLevel()>();

        if $i4 != 0 goto label1;

        return;

     label1:
        r2 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.Rect mTmpRect>;

        r3 = virtualinvoke r0.<android.graphics.drawable.ClipDrawable: android.graphics.Rect getBounds()>();

        i0 = virtualinvoke r0.<android.graphics.drawable.ClipDrawable: int getLevel()>();

        i1 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        $r6 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $i5 = $r6.<android.graphics.drawable.ClipDrawable$ClipState: int mOrientation>;

        $i6 = $i5 & 1;

        if $i6 == 0 goto label2;

        $i14 = i1 - 0;

        $i13 = 10000 - i0;

        $i17 = $i14 * $i13;

        $i18 = $i17 / 10000;

        i1 = i1 - $i18;

     label2:
        i2 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        $r7 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $i7 = $r7.<android.graphics.drawable.ClipDrawable$ClipState: int mOrientation>;

        $i8 = $i7 & 2;

        if $i8 == 0 goto label3;

        $i11 = i2 - 0;

        $i12 = 10000 - i0;

        $i15 = $i11 * $i12;

        $i16 = $i15 / 10000;

        i2 = i2 - $i16;

     label3:
        i3 = virtualinvoke r0.<android.graphics.drawable.ClipDrawable: int getLayoutDirection()>();

        $r8 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $i9 = $r8.<android.graphics.drawable.ClipDrawable$ClipState: int mGravity>;

        staticinvoke <android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)>($i9, i1, i2, r3, r2, i3);

        if i1 <= 0 goto label4;

        if i2 <= 0 goto label4;

        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>(r2);

        $r10 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r9 = $r10.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r9.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

     label4:
        return;
    }

    public int getIntrinsicWidth()
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.ClipDrawable$ClipState $r1;
        android.graphics.drawable.Drawable $r2;
        int $i0;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        $r1 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r2 = $r1.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        return $i0;
    }

    public int getIntrinsicHeight()
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.ClipDrawable$ClipState $r1;
        android.graphics.drawable.Drawable $r2;
        int $i0;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        $r1 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r2 = $r1.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        return $i0;
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.ClipDrawable$ClipState $r1, $r2, $r3;
        boolean $z0;
        int $i0;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        $r1 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $z0 = virtualinvoke $r1.<android.graphics.drawable.ClipDrawable$ClipState: boolean canConstantState()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $i0 = virtualinvoke r0.<android.graphics.drawable.ClipDrawable: int getChangingConfigurations()>();

        $r2.<android.graphics.drawable.ClipDrawable$ClipState: int mChangingConfigurations> = $i0;

        $r3 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        return $r3;

     label1:
        return null;
    }

    public void setLayoutDirection(int)
    {
        android.graphics.drawable.ClipDrawable r0;
        int i0;
        android.graphics.drawable.ClipDrawable$ClipState $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState>;

        $r2 = $r1.<android.graphics.drawable.ClipDrawable$ClipState: android.graphics.drawable.Drawable mDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setLayoutDirection(int)>(i0);

        specialinvoke r0.<android.graphics.drawable.Drawable: void setLayoutDirection(int)>(i0);

        return;
    }

    private void <init>(android.graphics.drawable.ClipDrawable$ClipState, android.content.res.Resources)
    {
        android.graphics.drawable.ClipDrawable$ClipState $r0, r2;
        android.graphics.drawable.ClipDrawable r1;
        android.content.res.Resources r3;
        android.graphics.Rect $r4;

        r1 := @this: android.graphics.drawable.ClipDrawable;

        r2 := @parameter0: android.graphics.drawable.ClipDrawable$ClipState;

        r3 := @parameter1: android.content.res.Resources;

        specialinvoke r1.<android.graphics.drawable.Drawable: void <init>()>();

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r1.<android.graphics.drawable.ClipDrawable: android.graphics.Rect mTmpRect> = $r4;

        $r0 = new android.graphics.drawable.ClipDrawable$ClipState;

        specialinvoke $r0.<android.graphics.drawable.ClipDrawable$ClipState: void <init>(android.graphics.drawable.ClipDrawable$ClipState,android.graphics.drawable.ClipDrawable,android.content.res.Resources)>(r2, r1, r3);

        r1.<android.graphics.drawable.ClipDrawable: android.graphics.drawable.ClipDrawable$ClipState mClipState> = $r0;

        return;
    }

    void <init>(android.graphics.drawable.ClipDrawable$ClipState, android.content.res.Resources, android.graphics.drawable.ClipDrawable$1)
    {
        android.graphics.drawable.ClipDrawable r0;
        android.graphics.drawable.ClipDrawable$ClipState r1;
        android.content.res.Resources r2;
        android.graphics.drawable.ClipDrawable$1 r3;

        r0 := @this: android.graphics.drawable.ClipDrawable;

        r1 := @parameter0: android.graphics.drawable.ClipDrawable$ClipState;

        r2 := @parameter1: android.content.res.Resources;

        r3 := @parameter2: android.graphics.drawable.ClipDrawable$1;

        specialinvoke r0.<android.graphics.drawable.ClipDrawable: void <init>(android.graphics.drawable.ClipDrawable$ClipState,android.content.res.Resources)>(r1, r2);

        return;
    }

    public static void <clinit>()
    {
        <android.graphics.drawable.ClipDrawable: int VERTICAL> = 2;

        <android.graphics.drawable.ClipDrawable: int HORIZONTAL> = 1;

        return;
    }
}
