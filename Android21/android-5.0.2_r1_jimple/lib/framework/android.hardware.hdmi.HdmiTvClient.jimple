public final class android.hardware.hdmi.HdmiTvClient extends android.hardware.hdmi.HdmiClient
{
    private static final java.lang.String TAG;
    public static final int VENDOR_DATA_SIZE;

    void <init>(android.hardware.hdmi.IHdmiControlService)
    {
        android.hardware.hdmi.HdmiTvClient r0;
        android.hardware.hdmi.IHdmiControlService r1;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        r1 := @parameter0: android.hardware.hdmi.IHdmiControlService;

        specialinvoke r0.<android.hardware.hdmi.HdmiClient: void <init>(android.hardware.hdmi.IHdmiControlService)>(r1);

        return;
    }

    static android.hardware.hdmi.HdmiTvClient create(android.hardware.hdmi.IHdmiControlService)
    {
        android.hardware.hdmi.IHdmiControlService r0;
        android.hardware.hdmi.HdmiTvClient $r1;

        r0 := @parameter0: android.hardware.hdmi.IHdmiControlService;

        $r1 = new android.hardware.hdmi.HdmiTvClient;

        specialinvoke $r1.<android.hardware.hdmi.HdmiTvClient: void <init>(android.hardware.hdmi.IHdmiControlService)>(r0);

        return $r1;
    }

    public int getDeviceType()
    {
        android.hardware.hdmi.HdmiTvClient r0;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        return 0;
    }

    public void deviceSelect(int, android.hardware.hdmi.HdmiTvClient$SelectCallback)
    {
        android.hardware.hdmi.HdmiTvClient r0;
        int i0;
        android.hardware.hdmi.HdmiTvClient$SelectCallback r1;
        android.os.RemoteException r2, $r6;
        android.hardware.hdmi.IHdmiControlService $r3;
        android.hardware.hdmi.IHdmiControlCallback $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.hdmi.HdmiTvClient$SelectCallback;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null.");

        throw $r5;

     label1:
        $r3 = r0.<android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiControlService mService>;

        $r4 = staticinvoke <android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiControlCallback getCallbackWrapper(android.hardware.hdmi.HdmiTvClient$SelectCallback)>(r1);

        interfaceinvoke $r3.<android.hardware.hdmi.IHdmiControlService: void deviceSelect(int,android.hardware.hdmi.IHdmiControlCallback)>(i0, $r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiTvClient", "failed to select device: ", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static android.hardware.hdmi.IHdmiControlCallback getCallbackWrapper(android.hardware.hdmi.HdmiTvClient$SelectCallback)
    {
        android.hardware.hdmi.HdmiTvClient$SelectCallback r0;
        android.hardware.hdmi.HdmiTvClient$1 $r1;

        r0 := @parameter0: android.hardware.hdmi.HdmiTvClient$SelectCallback;

        $r1 = new android.hardware.hdmi.HdmiTvClient$1;

        specialinvoke $r1.<android.hardware.hdmi.HdmiTvClient$1: void <init>(android.hardware.hdmi.HdmiTvClient$SelectCallback)>(r0);

        return $r1;
    }

    public void portSelect(int, android.hardware.hdmi.HdmiTvClient$SelectCallback)
    {
        android.hardware.hdmi.HdmiTvClient r0;
        int i0;
        android.hardware.hdmi.HdmiTvClient$SelectCallback r1;
        android.os.RemoteException r2, $r6;
        android.hardware.hdmi.IHdmiControlService $r3;
        android.hardware.hdmi.IHdmiControlCallback $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.hdmi.HdmiTvClient$SelectCallback;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Callback must not be null");

        throw $r5;

     label1:
        $r3 = r0.<android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiControlService mService>;

        $r4 = staticinvoke <android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiControlCallback getCallbackWrapper(android.hardware.hdmi.HdmiTvClient$SelectCallback)>(r1);

        interfaceinvoke $r3.<android.hardware.hdmi.IHdmiControlService: void portSelect(int,android.hardware.hdmi.IHdmiControlCallback)>(i0, $r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiTvClient", "failed to select port: ", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setInputChangeListener(android.hardware.hdmi.HdmiTvClient$InputChangeListener)
    {
        android.hardware.hdmi.HdmiTvClient r0;
        android.hardware.hdmi.HdmiTvClient$InputChangeListener r1;
        android.os.RemoteException r2, $r6;
        android.hardware.hdmi.IHdmiControlService $r3;
        android.hardware.hdmi.IHdmiInputChangeListener $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        r1 := @parameter0: android.hardware.hdmi.HdmiTvClient$InputChangeListener;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null.");

        throw $r5;

     label1:
        $r3 = r0.<android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiControlService mService>;

        $r4 = staticinvoke <android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiInputChangeListener getListenerWrapper(android.hardware.hdmi.HdmiTvClient$InputChangeListener)>(r1);

        interfaceinvoke $r3.<android.hardware.hdmi.IHdmiControlService: void setInputChangeListener(android.hardware.hdmi.IHdmiInputChangeListener)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TAG", "Failed to set InputChangeListener:", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static android.hardware.hdmi.IHdmiInputChangeListener getListenerWrapper(android.hardware.hdmi.HdmiTvClient$InputChangeListener)
    {
        android.hardware.hdmi.HdmiTvClient$InputChangeListener r0;
        android.hardware.hdmi.HdmiTvClient$2 $r1;

        r0 := @parameter0: android.hardware.hdmi.HdmiTvClient$InputChangeListener;

        $r1 = new android.hardware.hdmi.HdmiTvClient$2;

        specialinvoke $r1.<android.hardware.hdmi.HdmiTvClient$2: void <init>(android.hardware.hdmi.HdmiTvClient$InputChangeListener)>(r0);

        return $r1;
    }

    public void setSystemAudioVolume(int, int, int)
    {
        android.hardware.hdmi.HdmiTvClient r0;
        int i0, i1, i2;
        android.os.RemoteException r1, $r3;
        android.hardware.hdmi.IHdmiControlService $r2;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r2.<android.hardware.hdmi.IHdmiControlService: void setSystemAudioVolume(int,int,int)>(i0, i1, i2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiTvClient", "failed to set volume: ", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setSystemAudioMute(boolean)
    {
        android.hardware.hdmi.HdmiTvClient r0;
        boolean z0;
        android.os.RemoteException r1, $r3;
        android.hardware.hdmi.IHdmiControlService $r2;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r2.<android.hardware.hdmi.IHdmiControlService: void setSystemAudioMute(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiTvClient", "failed to set mute: ", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setRecordListener(android.hardware.hdmi.HdmiRecordListener)
    {
        android.hardware.hdmi.HdmiTvClient r0;
        android.hardware.hdmi.HdmiRecordListener r1;
        android.os.RemoteException r2, $r6;
        android.hardware.hdmi.IHdmiControlService $r3;
        android.hardware.hdmi.IHdmiRecordListener $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        r1 := @parameter0: android.hardware.hdmi.HdmiRecordListener;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null.");

        throw $r5;

     label1:
        $r3 = r0.<android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiControlService mService>;

        $r4 = staticinvoke <android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiRecordListener getListenerWrapper(android.hardware.hdmi.HdmiRecordListener)>(r1);

        interfaceinvoke $r3.<android.hardware.hdmi.IHdmiControlService: void setHdmiRecordListener(android.hardware.hdmi.IHdmiRecordListener)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiTvClient", "failed to set record listener.", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static android.hardware.hdmi.IHdmiRecordListener getListenerWrapper(android.hardware.hdmi.HdmiRecordListener)
    {
        android.hardware.hdmi.HdmiRecordListener r0;
        android.hardware.hdmi.HdmiTvClient$3 $r1;

        r0 := @parameter0: android.hardware.hdmi.HdmiRecordListener;

        $r1 = new android.hardware.hdmi.HdmiTvClient$3;

        specialinvoke $r1.<android.hardware.hdmi.HdmiTvClient$3: void <init>(android.hardware.hdmi.HdmiRecordListener)>(r0);

        return $r1;
    }

    public void startOneTouchRecord(int, android.hardware.hdmi.HdmiRecordSources$RecordSource)
    {
        android.hardware.hdmi.HdmiTvClient r0;
        int i0, $i1;
        android.hardware.hdmi.HdmiRecordSources$RecordSource r1;
        byte[] r2;
        android.hardware.hdmi.IHdmiControlService $r3;
        java.lang.IllegalArgumentException $r4;
        android.os.RemoteException $r5, r6;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.hdmi.HdmiRecordSources$RecordSource;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("source must not be null.");

        throw $r4;

     label1:
        $i1 = virtualinvoke r1.<android.hardware.hdmi.HdmiRecordSources$RecordSource: int getDataSize(boolean)>(1);

        r2 = newarray (byte)[$i1];

        virtualinvoke r1.<android.hardware.hdmi.HdmiRecordSources$RecordSource: int toByteArray(boolean,byte[],int)>(1, r2, 0);

        $r3 = r0.<android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r3.<android.hardware.hdmi.IHdmiControlService: void startOneTouchRecord(int,byte[])>(i0, r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiTvClient", "failed to start record: ", r6);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void stopOneTouchRecord(int)
    {
        android.hardware.hdmi.HdmiTvClient r0;
        int i0;
        android.os.RemoteException r1, $r3;
        android.hardware.hdmi.IHdmiControlService $r2;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r2.<android.hardware.hdmi.IHdmiControlService: void stopOneTouchRecord(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiTvClient", "failed to stop record: ", r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startTimerRecording(int, int, android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource)
    {
        android.hardware.hdmi.HdmiTvClient r0;
        int i0, i1, $i2;
        android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource r1;
        byte[] r2;
        android.hardware.hdmi.IHdmiControlService $r3;
        java.lang.IllegalArgumentException $r4;
        android.os.RemoteException $r5, r6;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("source must not be null.");

        throw $r4;

     label1:
        specialinvoke r0.<android.hardware.hdmi.HdmiTvClient: void checkTimerRecordingSourceType(int)>(i1);

     label2:
        $i2 = virtualinvoke r1.<android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource: int getDataSize()>();

        r2 = newarray (byte)[$i2];

        virtualinvoke r1.<android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource: int toByteArray(byte[],int)>(r2, 0);

        $r3 = r0.<android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r3.<android.hardware.hdmi.IHdmiControlService: void startTimerRecording(int,int,byte[])>(i0, i1, r2);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r6 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiTvClient", "failed to start record: ", r6);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void checkTimerRecordingSourceType(int)
    {
        android.hardware.hdmi.HdmiTvClient r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            default: goto label2;
        };

     label1:
        goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid source type:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label3:
        return;
    }

    public void clearTimerRecording(int, int, android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource)
    {
        android.hardware.hdmi.HdmiTvClient r0;
        int i0, i1, $i2;
        android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource r1;
        byte[] r2;
        android.hardware.hdmi.IHdmiControlService $r3;
        java.lang.IllegalArgumentException $r4;
        android.os.RemoteException $r5, r6;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("source must not be null.");

        throw $r4;

     label1:
        specialinvoke r0.<android.hardware.hdmi.HdmiTvClient: void checkTimerRecordingSourceType(int)>(i1);

     label2:
        $i2 = virtualinvoke r1.<android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource: int getDataSize()>();

        r2 = newarray (byte)[$i2];

        virtualinvoke r1.<android.hardware.hdmi.HdmiTimerRecordSources$TimerRecordSource: int toByteArray(byte[],int)>(r2, 0);

        $r3 = r0.<android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r3.<android.hardware.hdmi.IHdmiControlService: void clearTimerRecording(int,int,byte[])>(i0, i1, r2);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r6 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiTvClient", "failed to start record: ", r6);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void setHdmiMhlVendorCommandListener(android.hardware.hdmi.HdmiTvClient$HdmiMhlVendorCommandListener)
    {
        android.hardware.hdmi.HdmiTvClient r0;
        android.hardware.hdmi.HdmiTvClient$HdmiMhlVendorCommandListener r1;
        android.os.RemoteException r2, $r6;
        android.hardware.hdmi.IHdmiControlService $r3;
        android.hardware.hdmi.IHdmiMhlVendorCommandListener $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        r1 := @parameter0: android.hardware.hdmi.HdmiTvClient$HdmiMhlVendorCommandListener;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null.");

        throw $r5;

     label1:
        $r3 = r0.<android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiControlService mService>;

        $r4 = specialinvoke r0.<android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiMhlVendorCommandListener getListenerWrapper(android.hardware.hdmi.HdmiTvClient$HdmiMhlVendorCommandListener)>(r1);

        interfaceinvoke $r3.<android.hardware.hdmi.IHdmiControlService: void addHdmiMhlVendorCommandListener(android.hardware.hdmi.IHdmiMhlVendorCommandListener)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiTvClient", "failed to set hdmi mhl vendor command listener: ", r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private android.hardware.hdmi.IHdmiMhlVendorCommandListener getListenerWrapper(android.hardware.hdmi.HdmiTvClient$HdmiMhlVendorCommandListener)
    {
        android.hardware.hdmi.HdmiTvClient r0;
        android.hardware.hdmi.HdmiTvClient$HdmiMhlVendorCommandListener r1;
        android.hardware.hdmi.HdmiTvClient$4 $r2;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        r1 := @parameter0: android.hardware.hdmi.HdmiTvClient$HdmiMhlVendorCommandListener;

        $r2 = new android.hardware.hdmi.HdmiTvClient$4;

        specialinvoke $r2.<android.hardware.hdmi.HdmiTvClient$4: void <init>(android.hardware.hdmi.HdmiTvClient,android.hardware.hdmi.HdmiTvClient$HdmiMhlVendorCommandListener)>(r0, r1);

        return $r2;
    }

    public void sendMhlVendorCommand(int, int, int, byte[])
    {
        android.hardware.hdmi.HdmiTvClient r0;
        int i0, i1, i2, $i3, $i4;
        byte[] r1;
        android.os.RemoteException r2, $r15;
        java.lang.IllegalArgumentException $r3, $r4, $r9;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r13;
        java.lang.String $r8, $r12;
        android.hardware.hdmi.IHdmiControlService $r14;

        r0 := @this: android.hardware.hdmi.HdmiTvClient;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: byte[];

        if r1 == null goto label1;

        $i3 = lengthof r1;

        if $i3 == 16 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid vendor command data.");

        throw $r3;

     label2:
        if i1 < 0 goto label3;

        if i1 < 16 goto label4;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid offset:");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label4:
        if i2 < 0 goto label5;

        $i4 = i1 + i2;

        if $i4 <= 16 goto label6;

     label5:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid length:");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r9;

     label6:
        $r14 = r0.<android.hardware.hdmi.HdmiTvClient: android.hardware.hdmi.IHdmiControlService mService>;

        interfaceinvoke $r14.<android.hardware.hdmi.IHdmiControlService: void sendMhlVendorCommand(int,int,int,byte[])>(i0, i1, i2, r1);

     label7:
        goto label9;

     label8:
        $r15 := @caughtexception;

        r2 = $r15;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiTvClient", "failed to send vendor command: ", r2);

     label9:
        return;

        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public static void <clinit>()
    {
        <android.hardware.hdmi.HdmiTvClient: int VENDOR_DATA_SIZE> = 16;

        <android.hardware.hdmi.HdmiTvClient: java.lang.String TAG> = "HdmiTvClient";

        return;
    }
}
