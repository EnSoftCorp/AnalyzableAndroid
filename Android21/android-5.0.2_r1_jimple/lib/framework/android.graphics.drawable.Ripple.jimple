class android.graphics.drawable.Ripple extends java.lang.Object
{
    private static final android.animation.TimeInterpolator LINEAR_INTERPOLATOR;
    private static final android.animation.TimeInterpolator DECEL_INTERPOLATOR;
    private static final float GLOBAL_SPEED;
    private static final float WAVE_TOUCH_DOWN_ACCELERATION;
    private static final float WAVE_TOUCH_UP_ACCELERATION;
    private static final float WAVE_OPACITY_DECAY_VELOCITY;
    private static final long RIPPLE_ENTER_DELAY;
    private final java.util.ArrayList mRunningAnimations;
    private final java.util.ArrayList mPendingAnimations;
    private final android.graphics.drawable.RippleDrawable mOwner;
    private final android.graphics.Rect mBounds;
    private int mColorOpaque;
    private float mOuterRadius;
    private float mDensity;
    private float mStartingX;
    private float mStartingY;
    private float mClampedStartingX;
    private float mClampedStartingY;
    private android.graphics.CanvasProperty mPropPaint;
    private android.graphics.CanvasProperty mPropRadius;
    private android.graphics.CanvasProperty mPropX;
    private android.graphics.CanvasProperty mPropY;
    private android.animation.ObjectAnimator mAnimRadius;
    private android.animation.ObjectAnimator mAnimOpacity;
    private android.animation.ObjectAnimator mAnimX;
    private android.animation.ObjectAnimator mAnimY;
    private android.graphics.Paint mTempPaint;
    private float mOpacity;
    private float mOuterX;
    private float mOuterY;
    private float mTweenRadius;
    private float mTweenX;
    private float mTweenY;
    private boolean mHardwareAnimating;
    private boolean mCanUseHardware;
    private boolean mHasMaxRadius;
    private boolean mCanceled;
    private final android.animation.AnimatorListenerAdapter mAnimationListener;

    public void <init>(android.graphics.drawable.RippleDrawable, android.graphics.Rect, float, float)
    {
        android.graphics.drawable.Ripple r0;
        android.graphics.drawable.RippleDrawable r1;
        android.graphics.Rect r2;
        float f0, f1;
        java.util.ArrayList $r3, $r4;
        android.graphics.drawable.Ripple$1 $r5;

        r0 := @this: android.graphics.drawable.Ripple;

        r1 := @parameter0: android.graphics.drawable.RippleDrawable;

        r2 := @parameter1: android.graphics.Rect;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.graphics.drawable.Ripple: java.util.ArrayList mRunningAnimations> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.graphics.drawable.Ripple: java.util.ArrayList mPendingAnimations> = $r4;

        r0.<android.graphics.drawable.Ripple: float mOpacity> = 1.0F;

        r0.<android.graphics.drawable.Ripple: float mTweenRadius> = 0.0F;

        r0.<android.graphics.drawable.Ripple: float mTweenX> = 0.0F;

        r0.<android.graphics.drawable.Ripple: float mTweenY> = 0.0F;

        $r5 = new android.graphics.drawable.Ripple$1;

        specialinvoke $r5.<android.graphics.drawable.Ripple$1: void <init>(android.graphics.drawable.Ripple)>(r0);

        r0.<android.graphics.drawable.Ripple: android.animation.AnimatorListenerAdapter mAnimationListener> = $r5;

        r0.<android.graphics.drawable.Ripple: android.graphics.drawable.RippleDrawable mOwner> = r1;

        r0.<android.graphics.drawable.Ripple: android.graphics.Rect mBounds> = r2;

        r0.<android.graphics.drawable.Ripple: float mStartingX> = f0;

        r0.<android.graphics.drawable.Ripple: float mStartingY> = f1;

        return;
    }

    public void setup(int, int, float)
    {
        android.graphics.drawable.Ripple r0;
        int i0, i1, $i2, $i3, $i4;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        android.graphics.Rect $r1, $r2;
        double $d0, $d1;

        r0 := @this: android.graphics.drawable.Ripple;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        $i2 = i1 | -16777216;

        r0.<android.graphics.drawable.Ripple: int mColorOpaque> = $i2;

        if i0 == -1 goto label1;

        r0.<android.graphics.drawable.Ripple: boolean mHasMaxRadius> = 1;

        $f8 = (float) i0;

        r0.<android.graphics.drawable.Ripple: float mOuterRadius> = $f8;

        goto label2;

     label1:
        $r1 = r0.<android.graphics.drawable.Ripple: android.graphics.Rect mBounds>;

        $i3 = virtualinvoke $r1.<android.graphics.Rect: int width()>();

        $f3 = (float) $i3;

        f1 = $f3 / 2.0F;

        $r2 = r0.<android.graphics.drawable.Ripple: android.graphics.Rect mBounds>;

        $i4 = virtualinvoke $r2.<android.graphics.Rect: int height()>();

        $f4 = (float) $i4;

        f2 = $f4 / 2.0F;

        $f6 = f1 * f1;

        $f5 = f2 * f2;

        $f7 = $f6 + $f5;

        $d1 = (double) $f7;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        $f9 = (float) $d0;

        r0.<android.graphics.drawable.Ripple: float mOuterRadius> = $f9;

     label2:
        r0.<android.graphics.drawable.Ripple: float mOuterX> = 0.0F;

        r0.<android.graphics.drawable.Ripple: float mOuterY> = 0.0F;

        r0.<android.graphics.drawable.Ripple: float mDensity> = f0;

        specialinvoke r0.<android.graphics.drawable.Ripple: void clampStartingPosition()>();

        return;
    }

    public boolean isHardwareAnimating()
    {
        android.graphics.drawable.Ripple r0;
        boolean $z0;

        r0 := @this: android.graphics.drawable.Ripple;

        $z0 = r0.<android.graphics.drawable.Ripple: boolean mHardwareAnimating>;

        return $z0;
    }

    private void clampStartingPosition()
    {
        android.graphics.drawable.Ripple r0;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        android.graphics.Rect $r1, $r2;
        byte $b0;

        r0 := @this: android.graphics.drawable.Ripple;

        $r1 = r0.<android.graphics.drawable.Ripple: android.graphics.Rect mBounds>;

        f0 = virtualinvoke $r1.<android.graphics.Rect: float exactCenterX()>();

        $r2 = r0.<android.graphics.drawable.Ripple: android.graphics.Rect mBounds>;

        f1 = virtualinvoke $r2.<android.graphics.Rect: float exactCenterY()>();

        $f5 = r0.<android.graphics.drawable.Ripple: float mStartingX>;

        f2 = $f5 - f0;

        $f6 = r0.<android.graphics.drawable.Ripple: float mStartingY>;

        f3 = $f6 - f1;

        f4 = r0.<android.graphics.drawable.Ripple: float mOuterRadius>;

        $f8 = f2 * f2;

        $f7 = f3 * f3;

        $f9 = $f8 + $f7;

        $f10 = f4 * f4;

        $b0 = $f9 cmpl $f10;

        if $b0 <= 0 goto label1;

        $d2 = (double) f3;

        $d1 = (double) f2;

        d0 = staticinvoke <java.lang.Math: double atan2(double,double)>($d2, $d1);

        $d4 = staticinvoke <java.lang.Math: double cos(double)>(d0);

        $d3 = (double) f4;

        $d5 = $d4 * $d3;

        $f13 = (float) $d5;

        $f14 = f0 + $f13;

        r0.<android.graphics.drawable.Ripple: float mClampedStartingX> = $f14;

        $d6 = staticinvoke <java.lang.Math: double sin(double)>(d0);

        $d8 = (double) f4;

        $d7 = $d6 * $d8;

        $f15 = (float) $d7;

        $f16 = f1 + $f15;

        r0.<android.graphics.drawable.Ripple: float mClampedStartingY> = $f16;

        goto label2;

     label1:
        $f11 = r0.<android.graphics.drawable.Ripple: float mStartingX>;

        r0.<android.graphics.drawable.Ripple: float mClampedStartingX> = $f11;

        $f12 = r0.<android.graphics.drawable.Ripple: float mStartingY>;

        r0.<android.graphics.drawable.Ripple: float mClampedStartingY> = $f12;

     label2:
        return;
    }

    public void onHotspotBoundsChanged()
    {
        android.graphics.drawable.Ripple r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7;
        boolean $z0;
        android.graphics.Rect $r1, $r2;
        int $i0, $i1;
        double $d0, $d1;

        r0 := @this: android.graphics.drawable.Ripple;

        $z0 = r0.<android.graphics.drawable.Ripple: boolean mHasMaxRadius>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.graphics.drawable.Ripple: android.graphics.Rect mBounds>;

        $i0 = virtualinvoke $r1.<android.graphics.Rect: int width()>();

        $f2 = (float) $i0;

        f0 = $f2 / 2.0F;

        $r2 = r0.<android.graphics.drawable.Ripple: android.graphics.Rect mBounds>;

        $i1 = virtualinvoke $r2.<android.graphics.Rect: int height()>();

        $f3 = (float) $i1;

        f1 = $f3 / 2.0F;

        $f5 = f0 * f0;

        $f4 = f1 * f1;

        $f6 = $f5 + $f4;

        $d0 = (double) $f6;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f7 = (float) $d1;

        r0.<android.graphics.drawable.Ripple: float mOuterRadius> = $f7;

        specialinvoke r0.<android.graphics.drawable.Ripple: void clampStartingPosition()>();

     label1:
        return;
    }

    public void setOpacity(float)
    {
        android.graphics.drawable.Ripple r0;
        float f0;

        r0 := @this: android.graphics.drawable.Ripple;

        f0 := @parameter0: float;

        r0.<android.graphics.drawable.Ripple: float mOpacity> = f0;

        specialinvoke r0.<android.graphics.drawable.Ripple: void invalidateSelf()>();

        return;
    }

    public float getOpacity()
    {
        android.graphics.drawable.Ripple r0;
        float $f0;

        r0 := @this: android.graphics.drawable.Ripple;

        $f0 = r0.<android.graphics.drawable.Ripple: float mOpacity>;

        return $f0;
    }

    public void setRadiusGravity(float)
    {
        android.graphics.drawable.Ripple r0;
        float f0;

        r0 := @this: android.graphics.drawable.Ripple;

        f0 := @parameter0: float;

        r0.<android.graphics.drawable.Ripple: float mTweenRadius> = f0;

        specialinvoke r0.<android.graphics.drawable.Ripple: void invalidateSelf()>();

        return;
    }

    public float getRadiusGravity()
    {
        android.graphics.drawable.Ripple r0;
        float $f0;

        r0 := @this: android.graphics.drawable.Ripple;

        $f0 = r0.<android.graphics.drawable.Ripple: float mTweenRadius>;

        return $f0;
    }

    public void setXGravity(float)
    {
        android.graphics.drawable.Ripple r0;
        float f0;

        r0 := @this: android.graphics.drawable.Ripple;

        f0 := @parameter0: float;

        r0.<android.graphics.drawable.Ripple: float mTweenX> = f0;

        specialinvoke r0.<android.graphics.drawable.Ripple: void invalidateSelf()>();

        return;
    }

    public float getXGravity()
    {
        android.graphics.drawable.Ripple r0;
        float $f0;

        r0 := @this: android.graphics.drawable.Ripple;

        $f0 = r0.<android.graphics.drawable.Ripple: float mTweenX>;

        return $f0;
    }

    public void setYGravity(float)
    {
        android.graphics.drawable.Ripple r0;
        float f0;

        r0 := @this: android.graphics.drawable.Ripple;

        f0 := @parameter0: float;

        r0.<android.graphics.drawable.Ripple: float mTweenY> = f0;

        specialinvoke r0.<android.graphics.drawable.Ripple: void invalidateSelf()>();

        return;
    }

    public float getYGravity()
    {
        android.graphics.drawable.Ripple r0;
        float $f0;

        r0 := @this: android.graphics.drawable.Ripple;

        $f0 = r0.<android.graphics.drawable.Ripple: float mTweenY>;

        return $f0;
    }

    public boolean draw(android.graphics.Canvas, android.graphics.Paint)
    {
        android.graphics.drawable.Ripple r0;
        android.graphics.Canvas r1;
        android.graphics.Paint r2;
        boolean z0, z1, $z2, $z3, $z4;
        android.view.HardwareCanvas $r3;

        r0 := @this: android.graphics.drawable.Ripple;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Paint;

        z0 = virtualinvoke r1.<android.graphics.Canvas: boolean isHardwareAccelerated()>();

        $z2 = r0.<android.graphics.drawable.Ripple: boolean mCanUseHardware>;

        if $z2 == z0 goto label1;

        $z4 = r0.<android.graphics.drawable.Ripple: boolean mCanUseHardware>;

        if $z4 == 0 goto label1;

        specialinvoke r0.<android.graphics.drawable.Ripple: void cancelHardwareAnimations(boolean)>(1);

     label1:
        r0.<android.graphics.drawable.Ripple: boolean mCanUseHardware> = z0;

        if z0 == 0 goto label2;

        $z3 = r0.<android.graphics.drawable.Ripple: boolean mHardwareAnimating>;

        if $z3 == 0 goto label2;

        $r3 = (android.view.HardwareCanvas) r1;

        z1 = specialinvoke r0.<android.graphics.drawable.Ripple: boolean drawHardware(android.view.HardwareCanvas)>($r3);

        goto label3;

     label2:
        z1 = specialinvoke r0.<android.graphics.drawable.Ripple: boolean drawSoftware(android.graphics.Canvas,android.graphics.Paint)>(r1, r2);

     label3:
        return z1;
    }

    private boolean drawHardware(android.view.HardwareCanvas)
    {
        android.graphics.drawable.Ripple r0;
        android.view.HardwareCanvas r1;
        java.util.ArrayList r2, $r7;
        int i0, i1;
        android.graphics.CanvasProperty $r3, $r4, $r5, $r6;
        java.lang.Object $r8, $r10;
        android.view.RenderNodeAnimator $r9, $r11;

        r0 := @this: android.graphics.drawable.Ripple;

        r1 := @parameter0: android.view.HardwareCanvas;

        r2 = r0.<android.graphics.drawable.Ripple: java.util.ArrayList mPendingAnimations>;

        i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if i0 <= 0 goto label3;

        specialinvoke r0.<android.graphics.drawable.Ripple: void cancelHardwareAnimations(boolean)>(0);

        r0.<android.graphics.drawable.Ripple: boolean mHardwareAnimating> = 1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r8 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r9 = (android.view.RenderNodeAnimator) $r8;

        virtualinvoke $r9.<android.view.RenderNodeAnimator: void setTarget(android.graphics.Canvas)>(r1);

        $r10 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r11 = (android.view.RenderNodeAnimator) $r10;

        virtualinvoke $r11.<android.view.RenderNodeAnimator: void start()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r7 = r0.<android.graphics.drawable.Ripple: java.util.ArrayList mRunningAnimations>;

        virtualinvoke $r7.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r2);

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

     label3:
        $r6 = r0.<android.graphics.drawable.Ripple: android.graphics.CanvasProperty mPropX>;

        $r5 = r0.<android.graphics.drawable.Ripple: android.graphics.CanvasProperty mPropY>;

        $r4 = r0.<android.graphics.drawable.Ripple: android.graphics.CanvasProperty mPropRadius>;

        $r3 = r0.<android.graphics.drawable.Ripple: android.graphics.CanvasProperty mPropPaint>;

        virtualinvoke r1.<android.view.HardwareCanvas: void drawCircle(android.graphics.CanvasProperty,android.graphics.CanvasProperty,android.graphics.CanvasProperty,android.graphics.CanvasProperty)>($r6, $r5, $r4, $r3);

        return 1;
    }

    private boolean drawSoftware(android.graphics.Canvas, android.graphics.Paint)
    {
        android.graphics.drawable.Ripple r0;
        android.graphics.Canvas r1;
        android.graphics.Paint r2;
        boolean z0;
        int i0, $i1;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17;
        byte $b2;
        android.graphics.Rect $r3, $r4;
        android.graphics.Paint$Style $r5;

        r0 := @this: android.graphics.drawable.Ripple;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Paint;

        z0 = 0;

        $i1 = r0.<android.graphics.drawable.Ripple: int mColorOpaque>;

        virtualinvoke r2.<android.graphics.Paint: void setColor(int)>($i1);

        $f3 = r0.<android.graphics.drawable.Ripple: float mOpacity>;

        $f4 = 255.0F * $f3;

        $f5 = $f4 + 0.5F;

        i0 = (int) $f5;

        $f7 = r0.<android.graphics.drawable.Ripple: float mOuterRadius>;

        $f6 = r0.<android.graphics.drawable.Ripple: float mTweenRadius>;

        f0 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>(0.0F, $f7, $f6);

        if i0 <= 0 goto label1;

        $b2 = f0 cmpl 0.0F;

        if $b2 <= 0 goto label1;

        $f8 = r0.<android.graphics.drawable.Ripple: float mClampedStartingX>;

        $r3 = r0.<android.graphics.drawable.Ripple: android.graphics.Rect mBounds>;

        $f10 = virtualinvoke $r3.<android.graphics.Rect: float exactCenterX()>();

        $f11 = $f8 - $f10;

        $f12 = r0.<android.graphics.drawable.Ripple: float mOuterX>;

        $f9 = r0.<android.graphics.drawable.Ripple: float mTweenX>;

        f1 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>($f11, $f12, $f9);

        $f14 = r0.<android.graphics.drawable.Ripple: float mClampedStartingY>;

        $r4 = r0.<android.graphics.drawable.Ripple: android.graphics.Rect mBounds>;

        $f13 = virtualinvoke $r4.<android.graphics.Rect: float exactCenterY()>();

        $f17 = $f14 - $f13;

        $f15 = r0.<android.graphics.drawable.Ripple: float mOuterY>;

        $f16 = r0.<android.graphics.drawable.Ripple: float mTweenY>;

        f2 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>($f17, $f15, $f16);

        virtualinvoke r2.<android.graphics.Paint: void setAlpha(int)>(i0);

        $r5 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r5);

        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>(f1, f2, f0, r2);

        z0 = 1;

     label1:
        return z0;
    }

    public void getBounds(android.graphics.Rect)
    {
        android.graphics.drawable.Ripple r0;
        android.graphics.Rect r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        float $f0, $f1, $f2;

        r0 := @this: android.graphics.drawable.Ripple;

        r1 := @parameter0: android.graphics.Rect;

        $f0 = r0.<android.graphics.drawable.Ripple: float mOuterX>;

        i0 = (int) $f0;

        $f1 = r0.<android.graphics.drawable.Ripple: float mOuterY>;

        i1 = (int) $f1;

        $f2 = r0.<android.graphics.drawable.Ripple: float mOuterRadius>;

        $i3 = (int) $f2;

        i2 = $i3 + 1;

        $i7 = i0 - i2;

        $i6 = i1 - i2;

        $i5 = i0 + i2;

        $i4 = i1 + i2;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i7, $i6, $i5, $i4);

        return;
    }

    public void move(float, float)
    {
        android.graphics.drawable.Ripple r0;
        float f0, f1;

        r0 := @this: android.graphics.drawable.Ripple;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<android.graphics.drawable.Ripple: float mStartingX> = f0;

        r0.<android.graphics.drawable.Ripple: float mStartingY> = f1;

        specialinvoke r0.<android.graphics.drawable.Ripple: void clampStartingPosition()>();

        return;
    }

    public void enter()
    {
        android.graphics.drawable.Ripple r0;
        int i0;
        android.animation.ObjectAnimator r1, r2, r3;
        float $f0, $f1, $f2, $f3;
        double $d0, $d1, $d2, $d3;
        float[] $r4, $r6, $r10;
        long $l1, $l2, $l3;
        android.animation.TimeInterpolator $r7, $r8, $r12;

        r0 := @this: android.graphics.drawable.Ripple;

        virtualinvoke r0.<android.graphics.drawable.Ripple: void cancel()>();

        $f0 = r0.<android.graphics.drawable.Ripple: float mOuterRadius>;

        $f2 = $f0 / 1024.0F;

        $f1 = r0.<android.graphics.drawable.Ripple: float mDensity>;

        $f3 = $f2 * $f1;

        $d0 = (double) $f3;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $d2 = 1000.0 * $d1;

        $d3 = $d2 + 0.5;

        i0 = (int) $d3;

        $r4 = newarray (float)[1];

        $r4[0] = 1.0F;

        r1 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>(r0, "radiusGravity", $r4);

        virtualinvoke r1.<android.animation.ObjectAnimator: void setAutoCancel(boolean)>(1);

        $l1 = (long) i0;

        virtualinvoke r1.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>($l1);

        $r7 = <android.graphics.drawable.Ripple: android.animation.TimeInterpolator LINEAR_INTERPOLATOR>;

        virtualinvoke r1.<android.animation.ObjectAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r7);

        virtualinvoke r1.<android.animation.ObjectAnimator: void setStartDelay(long)>(80L);

        $r6 = newarray (float)[1];

        $r6[0] = 1.0F;

        r2 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>(r0, "xGravity", $r6);

        virtualinvoke r2.<android.animation.ObjectAnimator: void setAutoCancel(boolean)>(1);

        $l2 = (long) i0;

        virtualinvoke r2.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>($l2);

        $r8 = <android.graphics.drawable.Ripple: android.animation.TimeInterpolator LINEAR_INTERPOLATOR>;

        virtualinvoke r2.<android.animation.ObjectAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r8);

        virtualinvoke r2.<android.animation.ObjectAnimator: void setStartDelay(long)>(80L);

        $r10 = newarray (float)[1];

        $r10[0] = 1.0F;

        r3 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>(r0, "yGravity", $r10);

        virtualinvoke r3.<android.animation.ObjectAnimator: void setAutoCancel(boolean)>(1);

        $l3 = (long) i0;

        virtualinvoke r3.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>($l3);

        $r12 = <android.graphics.drawable.Ripple: android.animation.TimeInterpolator LINEAR_INTERPOLATOR>;

        virtualinvoke r3.<android.animation.ObjectAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r12);

        virtualinvoke r3.<android.animation.ObjectAnimator: void setStartDelay(long)>(80L);

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimRadius> = r1;

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimX> = r2;

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimY> = r3;

        virtualinvoke r1.<android.animation.ObjectAnimator: void start()>();

        virtualinvoke r2.<android.animation.ObjectAnimator: void start()>();

        virtualinvoke r3.<android.animation.ObjectAnimator: void start()>();

        return;
    }

    public void exit()
    {
        android.graphics.drawable.Ripple r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        int i0, i1;
        android.animation.ObjectAnimator $r1, $r2;
        double $d0, $d1, $d2, $d3;
        boolean $z0, $z1;

        r0 := @this: android.graphics.drawable.Ripple;

        virtualinvoke r0.<android.graphics.drawable.Ripple: void cancel()>();

        $f3 = r0.<android.graphics.drawable.Ripple: float mOuterRadius>;

        $f2 = r0.<android.graphics.drawable.Ripple: float mTweenRadius>;

        f0 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>(0.0F, $f3, $f2);

        $r1 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimRadius>;

        if $r1 == null goto label1;

        $r2 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimRadius>;

        $z1 = virtualinvoke $r2.<android.animation.ObjectAnimator: boolean isRunning()>();

        if $z1 == 0 goto label1;

        $f11 = r0.<android.graphics.drawable.Ripple: float mOuterRadius>;

        f1 = $f11 - f0;

        goto label2;

     label1:
        f1 = r0.<android.graphics.drawable.Ripple: float mOuterRadius>;

     label2:
        $f5 = f1 / 4424.0F;

        $f4 = r0.<android.graphics.drawable.Ripple: float mDensity>;

        $f6 = $f5 * $f4;

        $d0 = (double) $f6;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $d2 = 1000.0 * $d1;

        $d3 = $d2 + 0.5;

        i0 = (int) $d3;

        $f7 = r0.<android.graphics.drawable.Ripple: float mOpacity>;

        $f9 = 1000.0F * $f7;

        $f8 = $f9 / 3.0F;

        $f10 = $f8 + 0.5F;

        i1 = (int) $f10;

        $z0 = r0.<android.graphics.drawable.Ripple: boolean mCanUseHardware>;

        if $z0 == 0 goto label3;

        specialinvoke r0.<android.graphics.drawable.Ripple: void exitHardware(int,int)>(i0, i1);

        goto label4;

     label3:
        specialinvoke r0.<android.graphics.drawable.Ripple: void exitSoftware(int,int)>(i0, i1);

     label4:
        return;
    }

    private void exitHardware(int, int)
    {
        android.graphics.drawable.Ripple r0;
        int i0, i1, $i2, $i3;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20;
        android.graphics.Paint r1;
        android.view.RenderNodeAnimator r2, r3, r4, r5, $r15, $r16, $r23, $r25;
        java.util.ArrayList $r6, $r31, $r32, $r33, $r34;
        android.graphics.Rect $r7, $r8;
        android.graphics.Paint$Style $r9;
        android.graphics.CanvasProperty $r10, $r11, $r12, $r13, $r14, $r21, $r22, $r24;
        long $l4, $l5, $l6, $l7;
        android.animation.TimeInterpolator $r18, $r19, $r26, $r29;
        android.animation.AnimatorListenerAdapter $r28;

        r0 := @this: android.graphics.drawable.Ripple;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r6 = r0.<android.graphics.drawable.Ripple: java.util.ArrayList mPendingAnimations>;

        virtualinvoke $r6.<java.util.ArrayList: void clear()>();

        $f3 = r0.<android.graphics.drawable.Ripple: float mClampedStartingX>;

        $r7 = r0.<android.graphics.drawable.Ripple: android.graphics.Rect mBounds>;

        $f4 = virtualinvoke $r7.<android.graphics.Rect: float exactCenterX()>();

        $f6 = $f3 - $f4;

        $f7 = r0.<android.graphics.drawable.Ripple: float mOuterX>;

        $f5 = r0.<android.graphics.drawable.Ripple: float mTweenX>;

        f0 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>($f6, $f7, $f5);

        $f9 = r0.<android.graphics.drawable.Ripple: float mClampedStartingY>;

        $r8 = r0.<android.graphics.drawable.Ripple: android.graphics.Rect mBounds>;

        $f8 = virtualinvoke $r8.<android.graphics.Rect: float exactCenterY()>();

        $f12 = $f9 - $f8;

        $f10 = r0.<android.graphics.drawable.Ripple: float mOuterY>;

        $f11 = r0.<android.graphics.drawable.Ripple: float mTweenY>;

        f1 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>($f12, $f10, $f11);

        $f13 = r0.<android.graphics.drawable.Ripple: float mOuterRadius>;

        $f14 = r0.<android.graphics.drawable.Ripple: float mTweenRadius>;

        f2 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>(0.0F, $f13, $f14);

        r1 = specialinvoke r0.<android.graphics.drawable.Ripple: android.graphics.Paint getTempPaint()>();

        virtualinvoke r1.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $i2 = r0.<android.graphics.drawable.Ripple: int mColorOpaque>;

        virtualinvoke r1.<android.graphics.Paint: void setColor(int)>($i2);

        $f15 = r0.<android.graphics.drawable.Ripple: float mOpacity>;

        $f16 = 255.0F * $f15;

        $f17 = $f16 + 0.5F;

        $i3 = (int) $f17;

        virtualinvoke r1.<android.graphics.Paint: void setAlpha(int)>($i3);

        $r9 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke r1.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r9);

        $r12 = staticinvoke <android.graphics.CanvasProperty: android.graphics.CanvasProperty createPaint(android.graphics.Paint)>(r1);

        r0.<android.graphics.drawable.Ripple: android.graphics.CanvasProperty mPropPaint> = $r12;

        $r13 = staticinvoke <android.graphics.CanvasProperty: android.graphics.CanvasProperty createFloat(float)>(f2);

        r0.<android.graphics.drawable.Ripple: android.graphics.CanvasProperty mPropRadius> = $r13;

        $r10 = staticinvoke <android.graphics.CanvasProperty: android.graphics.CanvasProperty createFloat(float)>(f0);

        r0.<android.graphics.drawable.Ripple: android.graphics.CanvasProperty mPropX> = $r10;

        $r11 = staticinvoke <android.graphics.CanvasProperty: android.graphics.CanvasProperty createFloat(float)>(f1);

        r0.<android.graphics.drawable.Ripple: android.graphics.CanvasProperty mPropY> = $r11;

        $r15 = new android.view.RenderNodeAnimator;

        $r14 = r0.<android.graphics.drawable.Ripple: android.graphics.CanvasProperty mPropRadius>;

        $f18 = r0.<android.graphics.drawable.Ripple: float mOuterRadius>;

        specialinvoke $r15.<android.view.RenderNodeAnimator: void <init>(android.graphics.CanvasProperty,float)>($r14, $f18);

        r2 = $r15;

        $l4 = (long) i0;

        virtualinvoke r2.<android.view.RenderNodeAnimator: android.view.RenderNodeAnimator setDuration(long)>($l4);

        $r18 = <android.graphics.drawable.Ripple: android.animation.TimeInterpolator DECEL_INTERPOLATOR>;

        virtualinvoke r2.<android.view.RenderNodeAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r18);

        $r16 = new android.view.RenderNodeAnimator;

        $r21 = r0.<android.graphics.drawable.Ripple: android.graphics.CanvasProperty mPropX>;

        $f19 = r0.<android.graphics.drawable.Ripple: float mOuterX>;

        specialinvoke $r16.<android.view.RenderNodeAnimator: void <init>(android.graphics.CanvasProperty,float)>($r21, $f19);

        r3 = $r16;

        $l5 = (long) i0;

        virtualinvoke r3.<android.view.RenderNodeAnimator: android.view.RenderNodeAnimator setDuration(long)>($l5);

        $r19 = <android.graphics.drawable.Ripple: android.animation.TimeInterpolator DECEL_INTERPOLATOR>;

        virtualinvoke r3.<android.view.RenderNodeAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r19);

        $r23 = new android.view.RenderNodeAnimator;

        $r22 = r0.<android.graphics.drawable.Ripple: android.graphics.CanvasProperty mPropY>;

        $f20 = r0.<android.graphics.drawable.Ripple: float mOuterY>;

        specialinvoke $r23.<android.view.RenderNodeAnimator: void <init>(android.graphics.CanvasProperty,float)>($r22, $f20);

        r4 = $r23;

        $l6 = (long) i0;

        virtualinvoke r4.<android.view.RenderNodeAnimator: android.view.RenderNodeAnimator setDuration(long)>($l6);

        $r26 = <android.graphics.drawable.Ripple: android.animation.TimeInterpolator DECEL_INTERPOLATOR>;

        virtualinvoke r4.<android.view.RenderNodeAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r26);

        $r25 = new android.view.RenderNodeAnimator;

        $r24 = r0.<android.graphics.drawable.Ripple: android.graphics.CanvasProperty mPropPaint>;

        specialinvoke $r25.<android.view.RenderNodeAnimator: void <init>(android.graphics.CanvasProperty,int,float)>($r24, 1, 0.0F);

        r5 = $r25;

        $l7 = (long) i1;

        virtualinvoke r5.<android.view.RenderNodeAnimator: android.view.RenderNodeAnimator setDuration(long)>($l7);

        $r29 = <android.graphics.drawable.Ripple: android.animation.TimeInterpolator LINEAR_INTERPOLATOR>;

        virtualinvoke r5.<android.view.RenderNodeAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r29);

        $r28 = r0.<android.graphics.drawable.Ripple: android.animation.AnimatorListenerAdapter mAnimationListener>;

        virtualinvoke r5.<android.view.RenderNodeAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r28);

        $r33 = r0.<android.graphics.drawable.Ripple: java.util.ArrayList mPendingAnimations>;

        virtualinvoke $r33.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        $r34 = r0.<android.graphics.drawable.Ripple: java.util.ArrayList mPendingAnimations>;

        virtualinvoke $r34.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        $r31 = r0.<android.graphics.drawable.Ripple: java.util.ArrayList mPendingAnimations>;

        virtualinvoke $r31.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        $r32 = r0.<android.graphics.drawable.Ripple: java.util.ArrayList mPendingAnimations>;

        virtualinvoke $r32.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        r0.<android.graphics.drawable.Ripple: boolean mHardwareAnimating> = 1;

        r0.<android.graphics.drawable.Ripple: float mOpacity> = 0.0F;

        r0.<android.graphics.drawable.Ripple: float mTweenX> = 1.0F;

        r0.<android.graphics.drawable.Ripple: float mTweenY> = 1.0F;

        r0.<android.graphics.drawable.Ripple: float mTweenRadius> = 1.0F;

        specialinvoke r0.<android.graphics.drawable.Ripple: void invalidateSelf()>();

        return;
    }

    public void jump()
    {
        android.graphics.drawable.Ripple r0;

        r0 := @this: android.graphics.drawable.Ripple;

        r0.<android.graphics.drawable.Ripple: boolean mCanceled> = 1;

        specialinvoke r0.<android.graphics.drawable.Ripple: void endSoftwareAnimations()>();

        specialinvoke r0.<android.graphics.drawable.Ripple: void cancelHardwareAnimations(boolean)>(1);

        r0.<android.graphics.drawable.Ripple: boolean mCanceled> = 0;

        return;
    }

    private void endSoftwareAnimations()
    {
        android.graphics.drawable.Ripple r0;
        android.animation.ObjectAnimator $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: android.graphics.drawable.Ripple;

        $r1 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimRadius>;

        if $r1 == null goto label1;

        $r8 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimRadius>;

        virtualinvoke $r8.<android.animation.ObjectAnimator: void end()>();

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimRadius> = null;

     label1:
        $r2 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimOpacity>;

        if $r2 == null goto label2;

        $r7 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimOpacity>;

        virtualinvoke $r7.<android.animation.ObjectAnimator: void end()>();

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimOpacity> = null;

     label2:
        $r3 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimX>;

        if $r3 == null goto label3;

        $r6 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimX>;

        virtualinvoke $r6.<android.animation.ObjectAnimator: void end()>();

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimX> = null;

     label3:
        $r4 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimY>;

        if $r4 == null goto label4;

        $r5 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimY>;

        virtualinvoke $r5.<android.animation.ObjectAnimator: void end()>();

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimY> = null;

     label4:
        return;
    }

    private android.graphics.Paint getTempPaint()
    {
        android.graphics.drawable.Ripple r0;
        android.graphics.Paint $r1, $r2, $r3;

        r0 := @this: android.graphics.drawable.Ripple;

        $r1 = r0.<android.graphics.drawable.Ripple: android.graphics.Paint mTempPaint>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>()>();

        r0.<android.graphics.drawable.Ripple: android.graphics.Paint mTempPaint> = $r3;

     label1:
        $r2 = r0.<android.graphics.drawable.Ripple: android.graphics.Paint mTempPaint>;

        return $r2;
    }

    private void exitSoftware(int, int)
    {
        android.graphics.drawable.Ripple r0;
        int i0, i1;
        android.animation.ObjectAnimator r1, r2, r3, r4;
        float[] $r5, $r8, $r10, $r14;
        long $l2, $l3, $l4, $l5;
        android.animation.TimeInterpolator $r7, $r11, $r12, $r17;
        android.animation.AnimatorListenerAdapter $r16;

        r0 := @this: android.graphics.drawable.Ripple;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r5 = newarray (float)[1];

        $r5[0] = 1.0F;

        r1 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>(r0, "radiusGravity", $r5);

        virtualinvoke r1.<android.animation.ObjectAnimator: void setAutoCancel(boolean)>(1);

        $l2 = (long) i0;

        virtualinvoke r1.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>($l2);

        $r7 = <android.graphics.drawable.Ripple: android.animation.TimeInterpolator DECEL_INTERPOLATOR>;

        virtualinvoke r1.<android.animation.ObjectAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r7);

        $r8 = newarray (float)[1];

        $r8[0] = 1.0F;

        r2 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>(r0, "xGravity", $r8);

        virtualinvoke r2.<android.animation.ObjectAnimator: void setAutoCancel(boolean)>(1);

        $l3 = (long) i0;

        virtualinvoke r2.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>($l3);

        $r11 = <android.graphics.drawable.Ripple: android.animation.TimeInterpolator DECEL_INTERPOLATOR>;

        virtualinvoke r2.<android.animation.ObjectAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r11);

        $r10 = newarray (float)[1];

        $r10[0] = 1.0F;

        r3 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>(r0, "yGravity", $r10);

        virtualinvoke r3.<android.animation.ObjectAnimator: void setAutoCancel(boolean)>(1);

        $l4 = (long) i0;

        virtualinvoke r3.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>($l4);

        $r12 = <android.graphics.drawable.Ripple: android.animation.TimeInterpolator DECEL_INTERPOLATOR>;

        virtualinvoke r3.<android.animation.ObjectAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r12);

        $r14 = newarray (float)[1];

        $r14[0] = 0.0F;

        r4 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>(r0, "opacity", $r14);

        virtualinvoke r4.<android.animation.ObjectAnimator: void setAutoCancel(boolean)>(1);

        $l5 = (long) i1;

        virtualinvoke r4.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>($l5);

        $r17 = <android.graphics.drawable.Ripple: android.animation.TimeInterpolator LINEAR_INTERPOLATOR>;

        virtualinvoke r4.<android.animation.ObjectAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r17);

        $r16 = r0.<android.graphics.drawable.Ripple: android.animation.AnimatorListenerAdapter mAnimationListener>;

        virtualinvoke r4.<android.animation.ObjectAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r16);

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimRadius> = r1;

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimOpacity> = r4;

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimX> = r2;

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimY> = r3;

        virtualinvoke r1.<android.animation.ObjectAnimator: void start()>();

        virtualinvoke r4.<android.animation.ObjectAnimator: void start()>();

        virtualinvoke r2.<android.animation.ObjectAnimator: void start()>();

        virtualinvoke r3.<android.animation.ObjectAnimator: void start()>();

        return;
    }

    public void cancel()
    {
        android.graphics.drawable.Ripple r0;

        r0 := @this: android.graphics.drawable.Ripple;

        r0.<android.graphics.drawable.Ripple: boolean mCanceled> = 1;

        specialinvoke r0.<android.graphics.drawable.Ripple: void cancelSoftwareAnimations()>();

        specialinvoke r0.<android.graphics.drawable.Ripple: void cancelHardwareAnimations(boolean)>(1);

        r0.<android.graphics.drawable.Ripple: boolean mCanceled> = 0;

        return;
    }

    private void cancelSoftwareAnimations()
    {
        android.graphics.drawable.Ripple r0;
        android.animation.ObjectAnimator $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: android.graphics.drawable.Ripple;

        $r1 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimRadius>;

        if $r1 == null goto label1;

        $r8 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimRadius>;

        virtualinvoke $r8.<android.animation.ObjectAnimator: void cancel()>();

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimRadius> = null;

     label1:
        $r2 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimOpacity>;

        if $r2 == null goto label2;

        $r7 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimOpacity>;

        virtualinvoke $r7.<android.animation.ObjectAnimator: void cancel()>();

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimOpacity> = null;

     label2:
        $r3 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimX>;

        if $r3 == null goto label3;

        $r6 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimX>;

        virtualinvoke $r6.<android.animation.ObjectAnimator: void cancel()>();

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimX> = null;

     label3:
        $r4 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimY>;

        if $r4 == null goto label4;

        $r5 = r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimY>;

        virtualinvoke $r5.<android.animation.ObjectAnimator: void cancel()>();

        r0.<android.graphics.drawable.Ripple: android.animation.ObjectAnimator mAnimY> = null;

     label4:
        return;
    }

    private void cancelHardwareAnimations(boolean)
    {
        android.graphics.drawable.Ripple r0;
        boolean z0, $z1;
        java.util.ArrayList r1, $r2, $r3;
        int i0, i1;
        java.lang.Object $r4;
        android.view.RenderNodeAnimator $r5;

        r0 := @this: android.graphics.drawable.Ripple;

        z0 := @parameter0: boolean;

        r1 = r0.<android.graphics.drawable.Ripple: java.util.ArrayList mRunningAnimations>;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.view.RenderNodeAnimator) $r4;

        virtualinvoke $r5.<android.view.RenderNodeAnimator: void cancel()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        if z0 == 0 goto label3;

        $r2 = r0.<android.graphics.drawable.Ripple: java.util.ArrayList mPendingAnimations>;

        $z1 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $r3 = r0.<android.graphics.drawable.Ripple: java.util.ArrayList mPendingAnimations>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

     label3:
        r0.<android.graphics.drawable.Ripple: boolean mHardwareAnimating> = 0;

        return;
    }

    private void removeSelf()
    {
        android.graphics.drawable.Ripple r0;
        boolean $z0;
        android.graphics.drawable.RippleDrawable $r1;

        r0 := @this: android.graphics.drawable.Ripple;

        $z0 = r0.<android.graphics.drawable.Ripple: boolean mCanceled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.graphics.drawable.Ripple: android.graphics.drawable.RippleDrawable mOwner>;

        virtualinvoke $r1.<android.graphics.drawable.RippleDrawable: void removeRipple(android.graphics.drawable.Ripple)>(r0);

     label1:
        return;
    }

    private void invalidateSelf()
    {
        android.graphics.drawable.Ripple r0;
        android.graphics.drawable.RippleDrawable $r1;

        r0 := @this: android.graphics.drawable.Ripple;

        $r1 = r0.<android.graphics.drawable.Ripple: android.graphics.drawable.RippleDrawable mOwner>;

        virtualinvoke $r1.<android.graphics.drawable.RippleDrawable: void invalidateSelf()>();

        return;
    }

    static void access$100(android.graphics.drawable.Ripple)
    {
        android.graphics.drawable.Ripple r0;

        r0 := @parameter0: android.graphics.drawable.Ripple;

        specialinvoke r0.<android.graphics.drawable.Ripple: void removeSelf()>();

        return;
    }

    static void <clinit>()
    {
        android.view.animation.LinearInterpolator $r0;
        android.graphics.drawable.Ripple$LogInterpolator $r1;

        <android.graphics.drawable.Ripple: long RIPPLE_ENTER_DELAY> = 80L;

        <android.graphics.drawable.Ripple: float WAVE_OPACITY_DECAY_VELOCITY> = 3.0F;

        <android.graphics.drawable.Ripple: float WAVE_TOUCH_UP_ACCELERATION> = 3400.0F;

        <android.graphics.drawable.Ripple: float WAVE_TOUCH_DOWN_ACCELERATION> = 1024.0F;

        <android.graphics.drawable.Ripple: float GLOBAL_SPEED> = 1.0F;

        $r0 = new android.view.animation.LinearInterpolator;

        specialinvoke $r0.<android.view.animation.LinearInterpolator: void <init>()>();

        <android.graphics.drawable.Ripple: android.animation.TimeInterpolator LINEAR_INTERPOLATOR> = $r0;

        $r1 = new android.graphics.drawable.Ripple$LogInterpolator;

        specialinvoke $r1.<android.graphics.drawable.Ripple$LogInterpolator: void <init>(android.graphics.drawable.Ripple$1)>(null);

        <android.graphics.drawable.Ripple: android.animation.TimeInterpolator DECEL_INTERPOLATOR> = $r1;

        return;
    }
}
