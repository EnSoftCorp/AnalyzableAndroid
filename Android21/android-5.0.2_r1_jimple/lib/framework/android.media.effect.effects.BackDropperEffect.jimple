public class android.media.effect.effects.BackDropperEffect extends android.media.effect.FilterGraphEffect
{
    private static final java.lang.String mGraphDefinition;
    private android.media.effect.EffectUpdateListener mEffectListener;
    private android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener mLearningListener;

    public void <init>(android.media.effect.EffectContext, java.lang.String)
    {
        android.media.effect.effects.BackDropperEffect r0;
        android.media.effect.EffectContext r1;
        java.lang.String r2;
        android.filterfw.core.Filter r3;
        android.media.effect.effects.BackDropperEffect$1 $r4;
        android.filterfw.core.FilterGraph $r5;
        android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener $r6;

        r0 := @this: android.media.effect.effects.BackDropperEffect;

        r1 := @parameter0: android.media.effect.EffectContext;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.media.effect.FilterGraphEffect: void <init>(android.media.effect.EffectContext,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Class)>(r1, r2, "@import android.filterpacks.base;\n@import android.filterpacks.videoproc;\n@import android.filterpacks.videosrc;\n\n@filter GLTextureSource foreground {\n  texId = 0;\n  width = 0;\n  height = 0;\n  repeatFrame = true;\n}\n\n@filter MediaSource background {\n  sourceUrl = \"no_file_specified\";\n  waitForNewFrame = false;\n  sourceIsUrl = true;\n}\n\n@filter BackDropperFilter replacer {\n  autowbToggle = 1;\n}\n\n@filter GLTextureTarget output {\n  texId = 0;\n}\n\n@connect foreground[frame]  => replacer[video];\n@connect background[video]  => replacer[background];\n@connect replacer[video]    => output[frame];\n", "foreground", "output", class "android/filterfw/core/OneShotScheduler");

        r0.<android.media.effect.effects.BackDropperEffect: android.media.effect.EffectUpdateListener mEffectListener> = null;

        $r4 = new android.media.effect.effects.BackDropperEffect$1;

        specialinvoke $r4.<android.media.effect.effects.BackDropperEffect$1: void <init>(android.media.effect.effects.BackDropperEffect)>(r0);

        r0.<android.media.effect.effects.BackDropperEffect: android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener mLearningListener> = $r4;

        $r5 = r0.<android.media.effect.effects.BackDropperEffect: android.filterfw.core.FilterGraph mGraph>;

        r3 = virtualinvoke $r5.<android.filterfw.core.FilterGraph: android.filterfw.core.Filter getFilter(java.lang.String)>("replacer");

        $r6 = r0.<android.media.effect.effects.BackDropperEffect: android.filterpacks.videoproc.BackDropperFilter$LearningDoneListener mLearningListener>;

        virtualinvoke r3.<android.filterfw.core.Filter: void setInputValue(java.lang.String,java.lang.Object)>("learningDoneListener", $r6);

        return;
    }

    public void setParameter(java.lang.String, java.lang.Object)
    {
        android.media.effect.effects.BackDropperEffect r0;
        java.lang.String r1;
        java.lang.Object r2;
        android.filterfw.core.Filter r3, r6;
        boolean $z0, $z1;
        android.filterfw.core.FilterGraph $r4, $r5;

        r0 := @this: android.media.effect.effects.BackDropperEffect;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("source");

        if $z0 == 0 goto label1;

        $r5 = r0.<android.media.effect.effects.BackDropperEffect: android.filterfw.core.FilterGraph mGraph>;

        r3 = virtualinvoke $r5.<android.filterfw.core.FilterGraph: android.filterfw.core.Filter getFilter(java.lang.String)>("background");

        virtualinvoke r3.<android.filterfw.core.Filter: void setInputValue(java.lang.String,java.lang.Object)>("sourceUrl", r2);

        goto label2;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("context");

        if $z1 == 0 goto label2;

        $r4 = r0.<android.media.effect.effects.BackDropperEffect: android.filterfw.core.FilterGraph mGraph>;

        r6 = virtualinvoke $r4.<android.filterfw.core.FilterGraph: android.filterfw.core.Filter getFilter(java.lang.String)>("background");

        virtualinvoke r6.<android.filterfw.core.Filter: void setInputValue(java.lang.String,java.lang.Object)>("context", r2);

     label2:
        return;
    }

    public void setUpdateListener(android.media.effect.EffectUpdateListener)
    {
        android.media.effect.effects.BackDropperEffect r0;
        android.media.effect.EffectUpdateListener r1;

        r0 := @this: android.media.effect.effects.BackDropperEffect;

        r1 := @parameter0: android.media.effect.EffectUpdateListener;

        r0.<android.media.effect.effects.BackDropperEffect: android.media.effect.EffectUpdateListener mEffectListener> = r1;

        return;
    }

    static android.media.effect.EffectUpdateListener access$000(android.media.effect.effects.BackDropperEffect)
    {
        android.media.effect.effects.BackDropperEffect r0;
        android.media.effect.EffectUpdateListener $r1;

        r0 := @parameter0: android.media.effect.effects.BackDropperEffect;

        $r1 = r0.<android.media.effect.effects.BackDropperEffect: android.media.effect.EffectUpdateListener mEffectListener>;

        return $r1;
    }

    public static void <clinit>()
    {
        <android.media.effect.effects.BackDropperEffect: java.lang.String mGraphDefinition> = "@import android.filterpacks.base;\n@import android.filterpacks.videoproc;\n@import android.filterpacks.videosrc;\n\n@filter GLTextureSource foreground {\n  texId = 0;\n  width = 0;\n  height = 0;\n  repeatFrame = true;\n}\n\n@filter MediaSource background {\n  sourceUrl = \"no_file_specified\";\n  waitForNewFrame = false;\n  sourceIsUrl = true;\n}\n\n@filter BackDropperFilter replacer {\n  autowbToggle = 1;\n}\n\n@filter GLTextureTarget output {\n  texId = 0;\n}\n\n@connect foreground[frame]  => replacer[video];\n@connect background[video]  => replacer[background];\n@connect replacer[video]    => output[frame];\n";

        return;
    }
}
