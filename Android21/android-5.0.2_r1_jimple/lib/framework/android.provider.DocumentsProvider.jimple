public abstract class android.provider.DocumentsProvider extends android.content.ContentProvider
{
    private static final java.lang.String TAG;
    private static final int MATCH_ROOTS;
    private static final int MATCH_ROOT;
    private static final int MATCH_RECENT;
    private static final int MATCH_SEARCH;
    private static final int MATCH_DOCUMENT;
    private static final int MATCH_CHILDREN;
    private static final int MATCH_DOCUMENT_TREE;
    private static final int MATCH_CHILDREN_TREE;
    private java.lang.String mAuthority;
    private android.content.UriMatcher mMatcher;

    public void <init>()
    {
        android.provider.DocumentsProvider r0;

        r0 := @this: android.provider.DocumentsProvider;

        specialinvoke r0.<android.content.ContentProvider: void <init>()>();

        return;
    }

    public void attachInfo(android.content.Context, android.content.pm.ProviderInfo)
    {
        android.provider.DocumentsProvider r0;
        android.content.Context r1;
        android.content.pm.ProviderInfo r2;
        java.lang.String $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r16, $r18, $r21, $r22, $r23, $r25;
        android.content.UriMatcher $r4, $r6, $r8, $r10, $r12, $r14, $r17, $r19, $r20;
        boolean $z0, $z1, $z2, $z3;
        java.lang.SecurityException $r24, $r26, $r27;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.pm.ProviderInfo;

        $r3 = r2.<android.content.pm.ProviderInfo: java.lang.String authority>;

        r0.<android.provider.DocumentsProvider: java.lang.String mAuthority> = $r3;

        $r4 = new android.content.UriMatcher;

        specialinvoke $r4.<android.content.UriMatcher: void <init>(int)>(-1);

        r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher> = $r4;

        $r6 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r5 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r6.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r5, "root", 1);

        $r8 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r7 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r8.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r7, "root/*", 2);

        $r10 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r9 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r10.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r9, "root/*/recent", 3);

        $r12 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r11 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r12.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r11, "root/*/search", 4);

        $r14 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r13 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r14.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r13, "document/*", 5);

        $r17 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r15 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r17.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r15, "document/*/children", 6);

        $r19 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r16 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r19.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r16, "tree/*/document/*", 7);

        $r20 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r18 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r20.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r18, "tree/*/document/*/children", 8);

        $z0 = r2.<android.content.pm.ProviderInfo: boolean exported>;

        if $z0 != 0 goto label1;

        $r26 = new java.lang.SecurityException;

        specialinvoke $r26.<java.lang.SecurityException: void <init>(java.lang.String)>("Provider must be exported");

        throw $r26;

     label1:
        $z1 = r2.<android.content.pm.ProviderInfo: boolean grantUriPermissions>;

        if $z1 != 0 goto label2;

        $r27 = new java.lang.SecurityException;

        specialinvoke $r27.<java.lang.SecurityException: void <init>(java.lang.String)>("Provider must grantUriPermissions");

        throw $r27;

     label2:
        $r22 = "android.permission.MANAGE_DOCUMENTS";

        $r21 = r2.<android.content.pm.ProviderInfo: java.lang.String readPermission>;

        $z2 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z2 == 0 goto label3;

        $r25 = "android.permission.MANAGE_DOCUMENTS";

        $r23 = r2.<android.content.pm.ProviderInfo: java.lang.String writePermission>;

        $z3 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z3 != 0 goto label4;

     label3:
        $r24 = new java.lang.SecurityException;

        specialinvoke $r24.<java.lang.SecurityException: void <init>(java.lang.String)>("Provider must be protected by MANAGE_DOCUMENTS");

        throw $r24;

     label4:
        specialinvoke r0.<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>(r1, r2);

        return;
    }

    public boolean isChildDocument(java.lang.String, java.lang.String)
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    private void enforceTree(android.net.Uri)
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2, r3, $r10;
        boolean $z0, $z1, $z2;
        java.lang.SecurityException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        $z0 = staticinvoke <android.provider.DocumentsContract: boolean isTreeUri(android.net.Uri)>(r1);

        if $z0 == 0 goto label2;

        r2 = staticinvoke <android.provider.DocumentsContract: java.lang.String getTreeDocumentId(android.net.Uri)>(r1);

        r3 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r2, r3);

        if $z1 == 0 goto label1;

        return;

     label1:
        $z2 = virtualinvoke r0.<android.provider.DocumentsProvider: boolean isChildDocument(java.lang.String,java.lang.String)>(r2, r3);

        if $z2 != 0 goto label2;

        $r4 = new java.lang.SecurityException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Document ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a descendant of ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        return;
    }

    public java.lang.String createDocument(java.lang.String, java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2, r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Create not supported");

        throw $r4;
    }

    public java.lang.String renameDocument(java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Rename not supported");

        throw $r3;
    }

    public void deleteDocument(java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Delete not supported");

        throw $r2;
    }

    public abstract android.database.Cursor queryRoots(java.lang.String[]) throws java.io.FileNotFoundException;

    public android.database.Cursor queryRecentDocuments(java.lang.String, java.lang.String[]) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1;
        java.lang.String[] r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Recent not supported");

        throw $r3;
    }

    public abstract android.database.Cursor queryDocument(java.lang.String, java.lang.String[]) throws java.io.FileNotFoundException;

    public abstract android.database.Cursor queryChildDocuments(java.lang.String, java.lang.String[], java.lang.String) throws java.io.FileNotFoundException;

    public android.database.Cursor queryChildDocumentsForManage(java.lang.String, java.lang.String[], java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r3;
        java.lang.String[] r2;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Manage not supported");

        throw $r4;
    }

    public android.database.Cursor querySearchDocuments(java.lang.String, java.lang.String, java.lang.String[]) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2;
        java.lang.String[] r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Search not supported");

        throw $r4;
    }

    public java.lang.String getDocumentType(java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r3;
        android.database.Cursor r2;
        java.lang.Throwable r4, $r5;
        boolean $z0;
        int $i0;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryDocument(java.lang.String,java.lang.String[])>(r1, null);

     label1:
        $z0 = interfaceinvoke r2.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label3;

        $i0 = interfaceinvoke r2.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("mime_type");

        r3 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>($i0);

     label2:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        return r3;

     label3:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        return null;

     label4:
        $r5 := @caughtexception;

        r4 = $r5;

     label5:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public abstract android.os.ParcelFileDescriptor openDocument(java.lang.String, java.lang.String, android.os.CancellationSignal) throws java.io.FileNotFoundException;

    public android.content.res.AssetFileDescriptor openDocumentThumbnail(java.lang.String, android.graphics.Point, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1;
        android.graphics.Point r2;
        android.os.CancellationSignal r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.graphics.Point;

        r3 := @parameter2: android.os.CancellationSignal;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Thumbnails not supported");

        throw $r4;
    }

    public final android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5, $r9, $r11, $r13, $r14, $r17, $r19, $r25;
        java.io.FileNotFoundException r6, $r24;
        android.content.UriMatcher $r7;
        int $i0;
        android.database.Cursor $r8, $r10, $r12, $r15, $r16, $r18;
        boolean $z0;
        java.lang.StringBuilder $r20, $r22, $r23;
        java.lang.UnsupportedOperationException $r21;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

     label01:
        $r7 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $i0 = virtualinvoke $r7.<android.content.UriMatcher: int match(android.net.Uri)>(r1);

        tableswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label14;
            case 3: goto label04;
            case 4: goto label06;
            case 5: goto label08;
            case 6: goto label10;
            case 7: goto label08;
            case 8: goto label10;
            default: goto label14;
        };

     label02:
        $r8 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryRoots(java.lang.String[])>(r2);

     label03:
        return $r8;

     label04:
        $r19 = staticinvoke <android.provider.DocumentsContract: java.lang.String getRootId(android.net.Uri)>(r1);

        $r18 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryRecentDocuments(java.lang.String,java.lang.String[])>($r19, r2);

     label05:
        return $r18;

     label06:
        $r14 = staticinvoke <android.provider.DocumentsContract: java.lang.String getRootId(android.net.Uri)>(r1);

        $r17 = staticinvoke <android.provider.DocumentsContract: java.lang.String getSearchDocumentsQuery(android.net.Uri)>(r1);

        $r16 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor querySearchDocuments(java.lang.String,java.lang.String,java.lang.String[])>($r14, $r17, r2);

     label07:
        return $r16;

     label08:
        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        $r13 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        $r15 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryDocument(java.lang.String,java.lang.String[])>($r13, r2);

     label09:
        return $r15;

     label10:
        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        $z0 = staticinvoke <android.provider.DocumentsContract: boolean isManageMode(android.net.Uri)>(r1);

        if $z0 == 0 goto label12;

        $r11 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        $r12 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryChildDocumentsForManage(java.lang.String,java.lang.String[],java.lang.String)>($r11, r2, r5);

     label11:
        return $r12;

     label12:
        $r9 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        $r10 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryChildDocuments(java.lang.String,java.lang.String[],java.lang.String)>($r9, r2, r5);

     label13:
        return $r10;

     label14:
        $r21 = new java.lang.UnsupportedOperationException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported Uri ");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r25);

        throw $r21;

     label15:
        $r24 := @caughtexception;

        r6 = $r24;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DocumentsProvider", "Failed during query", r6);

        return null;

        catch java.io.FileNotFoundException from label01 to label03 with label15;
        catch java.io.FileNotFoundException from label04 to label05 with label15;
        catch java.io.FileNotFoundException from label06 to label07 with label15;
        catch java.io.FileNotFoundException from label08 to label09 with label15;
        catch java.io.FileNotFoundException from label10 to label11 with label15;
        catch java.io.FileNotFoundException from label12 to label13 with label15;
        catch java.io.FileNotFoundException from label14 to label15 with label15;
    }

    public final java.lang.String getType(android.net.Uri)
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.io.FileNotFoundException r2, $r6;
        android.content.UriMatcher $r3;
        int $i0;
        java.lang.String $r4, $r5;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

     label1:
        $r3 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $i0 = virtualinvoke $r3.<android.content.UriMatcher: int match(android.net.Uri)>(r1);

        lookupswitch($i0)
        {
            case 2: goto label2;
            case 5: goto label3;
            case 7: goto label3;
            default: goto label5;
        };

     label2:
        return "vnd.android.document/root";

     label3:
        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        $r4 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        $r5 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getDocumentType(java.lang.String)>($r4);

     label4:
        return $r5;

     label5:
        return null;

     label6:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DocumentsProvider", "Failed during getType", r2);

        return null;

        catch java.io.FileNotFoundException from label1 to label2 with label6;
        catch java.io.FileNotFoundException from label3 to label4 with label6;
    }

    public android.net.Uri canonicalize(android.net.Uri)
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1, r3;
        android.content.Context r2;
        int i0, $i1;
        android.content.UriMatcher $r4;
        java.lang.String $r5, $r6, $r7;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 = virtualinvoke r0.<android.provider.DocumentsProvider: android.content.Context getContext()>();

        $r4 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $i1 = virtualinvoke $r4.<android.content.UriMatcher: int match(android.net.Uri)>(r1);

        lookupswitch($i1)
        {
            case 7: goto label1;
            default: goto label2;
        };

     label1:
        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        $r5 = virtualinvoke r1.<android.net.Uri: java.lang.String getAuthority()>();

        $r6 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        r3 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildDocumentUri(java.lang.String,java.lang.String)>($r5, $r6);

        i0 = staticinvoke <android.provider.DocumentsProvider: int getCallingOrSelfUriPermissionModeFlags(android.content.Context,android.net.Uri)>(r2, r1);

        $r7 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        virtualinvoke r2.<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>($r7, r3, i0);

        return r3;

     label2:
        return null;
    }

    private static int getCallingOrSelfUriPermissionModeFlags(android.content.Context, android.net.Uri)
    {
        android.content.Context r0;
        android.net.Uri r1;
        byte b0;
        int $i1, $i2, $i3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        b0 = 0;

        $i1 = virtualinvoke r0.<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)>(r1, 1);

        if $i1 != 0 goto label1;

        b0 = b0 | 1;

     label1:
        $i2 = virtualinvoke r0.<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)>(r1, 2);

        if $i2 != 0 goto label2;

        b0 = b0 | 2;

     label2:
        $i3 = virtualinvoke r0.<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)>(r1, 65);

        if $i3 != 0 goto label3;

        b0 = b0 | 64;

     label3:
        return b0;
    }

    public final android.net.Uri insert(android.net.Uri, android.content.ContentValues)
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        android.content.ContentValues r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Insert not supported");

        throw $r3;
    }

    public final int delete(android.net.Uri, java.lang.String, java.lang.String[])
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2;
        java.lang.String[] r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Delete not supported");

        throw $r4;
    }

    public final int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        android.content.ContentValues r2;
        java.lang.String r3;
        java.lang.String[] r4;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Update not supported");

        throw $r5;
    }

    public android.os.Bundle call(java.lang.String, java.lang.String, android.os.Bundle)
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2, r6, r7, r9, r10, r11, $r14, $r15, $r17, $r18, $r22, $r24, $r28, $r33, $r39, r40, r41;
        android.os.Bundle r3, r8, $r16, $r32;
        android.content.Context r4;
        android.net.Uri r5, r12, r42;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.os.Parcelable $r13;
        java.lang.UnsupportedOperationException $r19;
        java.lang.StringBuilder $r20, $r21, $r23, $r26, $r27, $r29, $r30, $r34, $r35, $r36, $r37;
        java.lang.SecurityException $r25;
        java.io.FileNotFoundException $r31, r43;
        java.lang.IllegalStateException $r38;
        int i0;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("android:");

        if $z0 != 0 goto label01;

        $r32 = specialinvoke r0.<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>(r1, r2, r3);

        return $r32;

     label01:
        r4 = virtualinvoke r0.<android.provider.DocumentsProvider: android.content.Context getContext()>();

        $r13 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("uri");

        r5 = (android.net.Uri) $r13;

        r6 = virtualinvoke r5.<android.net.Uri: java.lang.String getAuthority()>();

        r7 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r5);

        $r14 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 != 0 goto label02;

        $r25 = new java.lang.SecurityException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested authority ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t match provider ");

        $r28 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        $r34 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.SecurityException: void <init>(java.lang.String)>($r33);

        throw $r25;

     label02:
        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r5);

        $r16 = new android.os.Bundle;

        specialinvoke $r16.<android.os.Bundle: void <init>()>();

        r8 = $r16;

     label03:
        $r15 = "android:createDocument";

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label04;

        virtualinvoke r0.<android.provider.DocumentsProvider: void enforceWritePermissionInner(android.net.Uri)>(r5);

        r9 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("mime_type");

        r10 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("_display_name");

        r11 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String createDocument(java.lang.String,java.lang.String,java.lang.String)>(r7, r9, r10);

        r12 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildDocumentUriMaybeUsingTree(android.net.Uri,java.lang.String)>(r5, r11);

        virtualinvoke r8.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r12);

        goto label09;

     label04:
        $r17 = "android:renameDocument";

        $z3 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label07;

        virtualinvoke r0.<android.provider.DocumentsProvider: void enforceWritePermissionInner(android.net.Uri)>(r5);

        r40 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String)>("_display_name");

        r41 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String renameDocument(java.lang.String,java.lang.String)>(r7, r40);

        if r41 == null goto label06;

        r42 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildDocumentUriMaybeUsingTree(android.net.Uri,java.lang.String)>(r5, r41);

        $z5 = staticinvoke <android.provider.DocumentsContract: boolean isTreeUri(android.net.Uri)>(r42);

        if $z5 != 0 goto label05;

        i0 = staticinvoke <android.provider.DocumentsProvider: int getCallingOrSelfUriPermissionModeFlags(android.content.Context,android.net.Uri)>(r4, r5);

        $r24 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        virtualinvoke r4.<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>($r24, r42, i0);

     label05:
        virtualinvoke r8.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r42);

        virtualinvoke r0.<android.provider.DocumentsProvider: void revokeDocumentPermission(java.lang.String)>(r7);

     label06:
        goto label09;

     label07:
        $r18 = "android:deleteDocument";

        $z4 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 == 0 goto label08;

        virtualinvoke r0.<android.provider.DocumentsProvider: void enforceWritePermissionInner(android.net.Uri)>(r5);

        virtualinvoke r0.<android.provider.DocumentsProvider: void deleteDocument(java.lang.String)>(r7);

        virtualinvoke r0.<android.provider.DocumentsProvider: void revokeDocumentPermission(java.lang.String)>(r7);

        goto label09;

     label08:
        $r19 = new java.lang.UnsupportedOperationException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method not supported ");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r22);

        throw $r19;

     label09:
        goto label11;

     label10:
        $r31 := @caughtexception;

        r43 = $r31;

        $r38 = new java.lang.IllegalStateException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed call ");

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r39 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r39, r43);

        throw $r38;

     label11:
        return r8;

        catch java.io.FileNotFoundException from label03 to label09 with label10;
    }

    public final void revokeDocumentPermission(java.lang.String)
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, $r3, $r5;
        android.content.Context r2;
        android.net.Uri $r4, $r6;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<android.provider.DocumentsProvider: android.content.Context getContext()>();

        $r3 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        $r4 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildDocumentUri(java.lang.String,java.lang.String)>($r3, r1);

        virtualinvoke r2.<android.content.Context: void revokeUriPermission(android.net.Uri,int)>($r4, -1);

        $r5 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        $r6 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildTreeDocumentUri(java.lang.String,java.lang.String)>($r5, r1);

        virtualinvoke r2.<android.content.Context: void revokeUriPermission(android.net.Uri,int)>($r6, -1);

        return;
    }

    public final android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2, $r3;
        android.os.ParcelFileDescriptor $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        $r3 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        $r4 = virtualinvoke r0.<android.provider.DocumentsProvider: android.os.ParcelFileDescriptor openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)>($r3, r2, null);

        return $r4;
    }

    public final android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2, $r4;
        android.os.CancellationSignal r3;
        android.os.ParcelFileDescriptor $r5;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.CancellationSignal;

        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        $r4 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        $r5 = virtualinvoke r0.<android.provider.DocumentsProvider: android.os.ParcelFileDescriptor openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)>($r4, r2, r3);

        return $r5;
    }

    public final android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri, java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2, $r4;
        android.os.ParcelFileDescriptor r3;
        android.content.res.AssetFileDescriptor $r5;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        $r4 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        r3 = virtualinvoke r0.<android.provider.DocumentsProvider: android.os.ParcelFileDescriptor openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)>($r4, r2, null);

        if r3 == null goto label1;

        $r5 = new android.content.res.AssetFileDescriptor;

        specialinvoke $r5.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>(r3, 0L, -1L);

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public final android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri, java.lang.String, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2, $r5;
        android.os.CancellationSignal r3;
        android.os.ParcelFileDescriptor r4;
        android.content.res.AssetFileDescriptor $r6;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.CancellationSignal;

        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        $r5 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        r4 = virtualinvoke r0.<android.provider.DocumentsProvider: android.os.ParcelFileDescriptor openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)>($r5, r2, r3);

        if r4 == null goto label1;

        $r6 = new android.content.res.AssetFileDescriptor;

        specialinvoke $r6.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>(r4, 0L, -1L);

        goto label2;

     label1:
        $r6 = null;

     label2:
        return $r6;
    }

    public final android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2, $r7;
        android.os.Bundle r3;
        android.graphics.Point r4;
        android.content.res.AssetFileDescriptor $r5, $r8;
        boolean $z0;
        android.os.Parcelable $r6;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.content.extra.SIZE");

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android.content.extra.SIZE");

        r4 = (android.graphics.Point) $r6;

        $r7 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        $r8 = virtualinvoke r0.<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openDocumentThumbnail(java.lang.String,android.graphics.Point,android.os.CancellationSignal)>($r7, r4, null);

        return $r8;

     label1:
        $r5 = specialinvoke r0.<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>(r1, r2, r3);

        return $r5;
    }

    public final android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2, $r8;
        android.os.Bundle r3;
        android.os.CancellationSignal r4;
        android.graphics.Point r5;
        android.content.res.AssetFileDescriptor $r6, $r9;
        boolean $z0;
        android.os.Parcelable $r7;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.os.CancellationSignal;

        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.content.extra.SIZE");

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android.content.extra.SIZE");

        r5 = (android.graphics.Point) $r7;

        $r8 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        $r9 = virtualinvoke r0.<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openDocumentThumbnail(java.lang.String,android.graphics.Point,android.os.CancellationSignal)>($r8, r5, r4);

        return $r9;

     label1:
        $r6 = specialinvoke r0.<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>(r1, r2, r3, r4);

        return $r6;
    }

    public static void <clinit>()
    {
        <android.provider.DocumentsProvider: int MATCH_CHILDREN_TREE> = 8;

        <android.provider.DocumentsProvider: int MATCH_DOCUMENT_TREE> = 7;

        <android.provider.DocumentsProvider: int MATCH_CHILDREN> = 6;

        <android.provider.DocumentsProvider: int MATCH_DOCUMENT> = 5;

        <android.provider.DocumentsProvider: int MATCH_SEARCH> = 4;

        <android.provider.DocumentsProvider: int MATCH_RECENT> = 3;

        <android.provider.DocumentsProvider: int MATCH_ROOT> = 2;

        <android.provider.DocumentsProvider: int MATCH_ROOTS> = 1;

        <android.provider.DocumentsProvider: java.lang.String TAG> = "DocumentsProvider";

        return;
    }
}
