public final class android.provider.Settings$Secure extends android.provider.Settings$NameValueTable
{
    public static final java.lang.String SYS_PROP_SETTING_VERSION;
    public static final android.net.Uri CONTENT_URI;
    private static final android.provider.Settings$NameValueCache sNameValueCache;
    private static com.android.internal.widget.ILockSettings sLockSettings;
    private static boolean sIsSystemProcess;
    private static final java.util.HashSet MOVED_TO_LOCK_SETTINGS;
    private static final java.util.HashSet MOVED_TO_GLOBAL;
    public static final java.lang.String DEVELOPMENT_SETTINGS_ENABLED;
    public static final java.lang.String BUGREPORT_IN_POWER_MENU;
    public static final java.lang.String ADB_ENABLED;
    public static final java.lang.String ALLOW_MOCK_LOCATION;
    public static final java.lang.String ANDROID_ID;
    public static final java.lang.String BLUETOOTH_ON;
    public static final java.lang.String DATA_ROAMING;
    public static final java.lang.String DEFAULT_INPUT_METHOD;
    public static final java.lang.String SELECTED_INPUT_METHOD_SUBTYPE;
    public static final java.lang.String INPUT_METHODS_SUBTYPE_HISTORY;
    public static final java.lang.String INPUT_METHOD_SELECTOR_VISIBILITY;
    public static final java.lang.String VOICE_INTERACTION_SERVICE;
    public static final java.lang.String BLUETOOTH_HCI_LOG;
    public static final java.lang.String DEVICE_PROVISIONED;
    public static final java.lang.String USER_SETUP_COMPLETE;
    public static final java.lang.String ENABLED_INPUT_METHODS;
    public static final java.lang.String DISABLED_SYSTEM_INPUT_METHODS;
    public static final java.lang.String SHOW_IME_WITH_HARD_KEYBOARD;
    public static final java.lang.String HTTP_PROXY;
    public static final java.lang.String INSTALL_NON_MARKET_APPS;
    public static final java.lang.String LOCATION_PROVIDERS_ALLOWED;
    public static final java.lang.String LOCATION_MODE;
    public static final int LOCATION_MODE_OFF;
    public static final int LOCATION_MODE_SENSORS_ONLY;
    public static final int LOCATION_MODE_BATTERY_SAVING;
    public static final int LOCATION_MODE_HIGH_ACCURACY;
    public static final java.lang.String LOCK_BIOMETRIC_WEAK_FLAGS;
    public static final java.lang.String LOCK_PATTERN_ENABLED;
    public static final java.lang.String LOCK_PATTERN_VISIBLE;
    public static final java.lang.String LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED;
    public static final java.lang.String LOCK_SCREEN_LOCK_AFTER_TIMEOUT;
    public static final java.lang.String LOCK_SCREEN_OWNER_INFO;
    public static final java.lang.String LOCK_SCREEN_APPWIDGET_IDS;
    public static final java.lang.String USER_FINGERPRINT_IDS;
    public static final java.lang.String LOCK_SCREEN_FALLBACK_APPWIDGET_ID;
    public static final java.lang.String LOCK_SCREEN_STICKY_APPWIDGET;
    public static final java.lang.String LOCK_SCREEN_OWNER_INFO_ENABLED;
    public static final java.lang.String LOCK_SCREEN_ALLOW_PRIVATE_NOTIFICATIONS;
    public static final java.lang.String SHOW_NOTE_ABOUT_NOTIFICATION_HIDING;
    public static final java.lang.String TRUST_AGENTS_INITIALIZED;
    public static final java.lang.String LOGGING_ID;
    public static final java.lang.String NETWORK_PREFERENCE;
    public static final java.lang.String PARENTAL_CONTROL_ENABLED;
    public static final java.lang.String PARENTAL_CONTROL_LAST_UPDATE;
    public static final java.lang.String PARENTAL_CONTROL_REDIRECT_URL;
    public static final java.lang.String SETTINGS_CLASSNAME;
    public static final java.lang.String USB_MASS_STORAGE_ENABLED;
    public static final java.lang.String USE_GOOGLE_MAIL;
    public static final java.lang.String ACCESSIBILITY_ENABLED;
    public static final java.lang.String TOUCH_EXPLORATION_ENABLED;
    public static final java.lang.String ENABLED_ACCESSIBILITY_SERVICES;
    public static final java.lang.String TOUCH_EXPLORATION_GRANTED_ACCESSIBILITY_SERVICES;
    public static final java.lang.String ACCESSIBILITY_SPEAK_PASSWORD;
    public static final java.lang.String ACCESSIBILITY_HIGH_TEXT_CONTRAST_ENABLED;
    public static final java.lang.String ACCESSIBILITY_SCRIPT_INJECTION;
    public static final java.lang.String ACCESSIBILITY_SCREEN_READER_URL;
    public static final java.lang.String ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS;
    public static final java.lang.String ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED;
    public static final java.lang.String ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE;
    public static final java.lang.String ACCESSIBILITY_DISPLAY_MAGNIFICATION_AUTO_UPDATE;
    public static final java.lang.String ACCESSIBILITY_CAPTIONING_ENABLED;
    public static final java.lang.String ACCESSIBILITY_CAPTIONING_LOCALE;
    public static final java.lang.String ACCESSIBILITY_CAPTIONING_PRESET;
    public static final java.lang.String ACCESSIBILITY_CAPTIONING_BACKGROUND_COLOR;
    public static final java.lang.String ACCESSIBILITY_CAPTIONING_FOREGROUND_COLOR;
    public static final java.lang.String ACCESSIBILITY_CAPTIONING_EDGE_TYPE;
    public static final java.lang.String ACCESSIBILITY_CAPTIONING_EDGE_COLOR;
    public static final java.lang.String ACCESSIBILITY_CAPTIONING_WINDOW_COLOR;
    public static final java.lang.String ACCESSIBILITY_CAPTIONING_TYPEFACE;
    public static final java.lang.String ACCESSIBILITY_CAPTIONING_FONT_SCALE;
    public static final java.lang.String ACCESSIBILITY_DISPLAY_INVERSION_ENABLED;
    public static final java.lang.String ACCESSIBILITY_DISPLAY_DALTONIZER_ENABLED;
    public static final java.lang.String ACCESSIBILITY_DISPLAY_DALTONIZER;
    public static final java.lang.String LONG_PRESS_TIMEOUT;
    public static final java.lang.String ENABLED_PRINT_SERVICES;
    public static final java.lang.String ENABLED_ON_FIRST_BOOT_SYSTEM_PRINT_SERVICES;
    public static final java.lang.String TTS_USE_DEFAULTS;
    public static final java.lang.String TTS_DEFAULT_RATE;
    public static final java.lang.String TTS_DEFAULT_PITCH;
    public static final java.lang.String TTS_DEFAULT_SYNTH;
    public static final java.lang.String TTS_DEFAULT_LANG;
    public static final java.lang.String TTS_DEFAULT_COUNTRY;
    public static final java.lang.String TTS_DEFAULT_VARIANT;
    public static final java.lang.String TTS_DEFAULT_LOCALE;
    public static final java.lang.String TTS_ENABLED_PLUGINS;
    public static final java.lang.String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON;
    public static final java.lang.String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY;
    public static final java.lang.String WIFI_NUM_OPEN_NETWORKS_KEPT;
    public static final java.lang.String WIFI_ON;
    public static final java.lang.String WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE;
    public static final java.lang.String WIFI_WATCHDOG_AP_COUNT;
    public static final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS;
    public static final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED;
    public static final java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS;
    public static final java.lang.String WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT;
    public static final java.lang.String WIFI_WATCHDOG_MAX_AP_CHECKS;
    public static final java.lang.String WIFI_WATCHDOG_ON;
    public static final java.lang.String WIFI_WATCHDOG_WATCH_LIST;
    public static final java.lang.String WIFI_WATCHDOG_PING_COUNT;
    public static final java.lang.String WIFI_WATCHDOG_PING_DELAY_MS;
    public static final java.lang.String WIFI_WATCHDOG_PING_TIMEOUT_MS;
    public static final java.lang.String WIFI_MAX_DHCP_RETRY_COUNT;
    public static final java.lang.String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS;
    public static final java.lang.String BACKGROUND_DATA;
    public static final java.lang.String ALLOWED_GEOLOCATION_ORIGINS;
    public static final java.lang.String PREFERRED_TTY_MODE;
    public static final java.lang.String ENHANCED_VOICE_PRIVACY_ENABLED;
    public static final java.lang.String TTY_MODE_ENABLED;
    public static final java.lang.String BACKUP_ENABLED;
    public static final java.lang.String BACKUP_AUTO_RESTORE;
    public static final java.lang.String BACKUP_PROVISIONED;
    public static final java.lang.String BACKUP_TRANSPORT;
    public static final java.lang.String LAST_SETUP_SHOWN;
    public static final java.lang.String WIFI_IDLE_MS;
    public static final java.lang.String SEARCH_GLOBAL_SEARCH_ACTIVITY;
    public static final java.lang.String SEARCH_NUM_PROMOTED_SOURCES;
    public static final java.lang.String SEARCH_MAX_RESULTS_TO_DISPLAY;
    public static final java.lang.String SEARCH_MAX_RESULTS_PER_SOURCE;
    public static final java.lang.String SEARCH_WEB_RESULTS_OVERRIDE_LIMIT;
    public static final java.lang.String SEARCH_PROMOTED_SOURCE_DEADLINE_MILLIS;
    public static final java.lang.String SEARCH_SOURCE_TIMEOUT_MILLIS;
    public static final java.lang.String SEARCH_PREFILL_MILLIS;
    public static final java.lang.String SEARCH_MAX_STAT_AGE_MILLIS;
    public static final java.lang.String SEARCH_MAX_SOURCE_EVENT_AGE_MILLIS;
    public static final java.lang.String SEARCH_MIN_IMPRESSIONS_FOR_SOURCE_RANKING;
    public static final java.lang.String SEARCH_MIN_CLICKS_FOR_SOURCE_RANKING;
    public static final java.lang.String SEARCH_MAX_SHORTCUTS_RETURNED;
    public static final java.lang.String SEARCH_QUERY_THREAD_CORE_POOL_SIZE;
    public static final java.lang.String SEARCH_QUERY_THREAD_MAX_POOL_SIZE;
    public static final java.lang.String SEARCH_SHORTCUT_REFRESH_CORE_POOL_SIZE;
    public static final java.lang.String SEARCH_SHORTCUT_REFRESH_MAX_POOL_SIZE;
    public static final java.lang.String SEARCH_THREAD_KEEPALIVE_SECONDS;
    public static final java.lang.String SEARCH_PER_SOURCE_CONCURRENT_QUERY_LIMIT;
    public static final java.lang.String MOUNT_PLAY_NOTIFICATION_SND;
    public static final java.lang.String MOUNT_UMS_AUTOSTART;
    public static final java.lang.String MOUNT_UMS_PROMPT;
    public static final java.lang.String MOUNT_UMS_NOTIFY_ENABLED;
    public static final java.lang.String ANR_SHOW_BACKGROUND;
    public static final java.lang.String WEBVIEW_DATA_REDUCTION_PROXY;
    public static final java.lang.String VOICE_RECOGNITION_SERVICE;
    public static final java.lang.String PACKAGE_VERIFIER_USER_CONSENT;
    public static final java.lang.String SELECTED_SPELL_CHECKER;
    public static final java.lang.String SELECTED_SPELL_CHECKER_SUBTYPE;
    public static final java.lang.String SPELL_CHECKER_ENABLED;
    public static final java.lang.String INCALL_POWER_BUTTON_BEHAVIOR;
    public static final int INCALL_POWER_BUTTON_BEHAVIOR_SCREEN_OFF;
    public static final int INCALL_POWER_BUTTON_BEHAVIOR_HANGUP;
    public static final int INCALL_POWER_BUTTON_BEHAVIOR_DEFAULT;
    public static final java.lang.String WAKE_GESTURE_ENABLED;
    public static final java.lang.String DOZE_ENABLED;
    public static final java.lang.String UI_NIGHT_MODE;
    public static final java.lang.String SCREENSAVER_ENABLED;
    public static final java.lang.String SCREENSAVER_COMPONENTS;
    public static final java.lang.String SCREENSAVER_ACTIVATE_ON_DOCK;
    public static final java.lang.String SCREENSAVER_ACTIVATE_ON_SLEEP;
    public static final java.lang.String SCREENSAVER_DEFAULT_COMPONENT;
    public static final java.lang.String NFC_PAYMENT_DEFAULT_COMPONENT;
    public static final java.lang.String NFC_PAYMENT_FOREGROUND;
    public static final java.lang.String SMS_DEFAULT_APPLICATION;
    public static final java.lang.String ENABLED_NOTIFICATION_LISTENERS;
    public static final java.lang.String ENABLED_CONDITION_PROVIDERS;
    public static final java.lang.String BAR_SERVICE_COMPONENT;
    public static final java.lang.String IMMERSIVE_MODE_CONFIRMATIONS;
    public static final java.lang.String PRINT_SERVICE_SEARCH_URI;
    public static final java.lang.String PAYMENT_SERVICE_SEARCH_URI;
    public static final java.lang.String SKIP_FIRST_USE_HINTS;
    public static final java.lang.String UNSAFE_VOLUME_MUSIC_ACTIVE_MS;
    public static final java.lang.String LOCK_SCREEN_SHOW_NOTIFICATIONS;
    public static final java.lang.String TV_INPUT_HIDDEN_INPUTS;
    public static final java.lang.String TV_INPUT_CUSTOM_LABELS;
    public static final java.lang.String USB_AUDIO_AUTOMATIC_ROUTING_DISABLED;
    public static final java.lang.String SLEEP_TIMEOUT;
    public static final java.lang.String[] SETTINGS_TO_BACKUP;
    public static final java.lang.String[] CLONE_TO_MANAGED_PROFILE;

    public void <init>()
    {
        android.provider.Settings$Secure r0;

        r0 := @this: android.provider.Settings$Secure;

        specialinvoke r0.<android.provider.Settings$NameValueTable: void <init>()>();

        return;
    }

    public static void getMovedKeys(java.util.HashSet)
    {
        java.util.HashSet r0, $r1;

        r0 := @parameter0: java.util.HashSet;

        $r1 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke r0.<java.util.HashSet: boolean addAll(java.util.Collection)>($r1);

        return;
    }

    public static java.lang.String getString(android.content.ContentResolver, java.lang.String)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, $r2;
        int $i0;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r0, r1, $i0);

        return $r2;
    }

    public static java.lang.String getStringForUser(android.content.ContentResolver, java.lang.String, int)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, $r7, $r12, $r18, $r20;
        int i0, $i1;
        java.lang.Class r2;
        java.lang.Throwable r3, $r21;
        java.util.HashSet $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        android.provider.Settings$NameValueCache $r6;
        com.android.internal.widget.ILockSettings $r8, $r9, $r10, $r13;
        android.os.IBinder $r11;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r19;
        android.os.RemoteException $r22;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r4 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        $z0 = virtualinvoke $r4.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label01;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting ");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has moved from android.provider.Settings.Secure");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to android.provider.Settings.Global.");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Settings", $r18);

        $r20 = staticinvoke <android.provider.Settings$Global: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r0, r1, i0);

        return $r20;

     label01:
        $r5 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_LOCK_SETTINGS>;

        $z1 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label13;

        r2 = class "android/provider/Settings$Secure";

        entermonitor class "android/provider/Settings$Secure";

     label02:
        $r8 = <android.provider.Settings$Secure: com.android.internal.widget.ILockSettings sLockSettings>;

        if $r8 != null goto label05;

        $r11 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("lock_settings");

        $r13 = staticinvoke <com.android.internal.widget.ILockSettings$Stub: com.android.internal.widget.ILockSettings asInterface(android.os.IBinder)>($r11);

        <android.provider.Settings$Secure: com.android.internal.widget.ILockSettings sLockSettings> = $r13;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        if $i1 != 1000 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        <android.provider.Settings$Secure: boolean sIsSystemProcess> = $z3;

     label05:
        exitmonitor r2;

     label06:
        goto label09;

     label07:
        $r21 := @caughtexception;

        r3 = $r21;

        exitmonitor r2;

     label08:
        throw r3;

     label09:
        $r9 = <android.provider.Settings$Secure: com.android.internal.widget.ILockSettings sLockSettings>;

        if $r9 == null goto label13;

        $z2 = <android.provider.Settings$Secure: boolean sIsSystemProcess>;

        if $z2 != 0 goto label13;

     label10:
        $r10 = <android.provider.Settings$Secure: com.android.internal.widget.ILockSettings sLockSettings>;

        $r12 = interfaceinvoke $r10.<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>(r1, "0", i0);

     label11:
        return $r12;

     label12:
        $r22 := @caughtexception;

     label13:
        $r6 = <android.provider.Settings$Secure: android.provider.Settings$NameValueCache sNameValueCache>;

        $r7 = virtualinvoke $r6.<android.provider.Settings$NameValueCache: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r0, r1, i0);

        return $r7;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch android.os.RemoteException from label10 to label11 with label12;
    }

    public static boolean putString(android.content.ContentResolver, java.lang.String, java.lang.String)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, r2;
        int $i0;
        boolean $z0;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r0, r1, r2, $i0);

        return $z0;
    }

    public static boolean putStringForUser(android.content.ContentResolver, java.lang.String, java.lang.String, int)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, r2, $r3, $r11;
        int i0, $i2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.HashSet $r4;
        android.provider.Settings$NameValueCache $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $r3 = "location_mode";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        $z4 = staticinvoke <android.provider.Settings$Secure: boolean setLocationModeForUser(android.content.ContentResolver,int,int)>(r0, $i2, i0);

        return $z4;

     label1:
        $r4 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        $z1 = virtualinvoke $r4.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has moved from android.provider.Settings.System");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to android.provider.Settings.Global");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Settings", $r11);

        $z3 = staticinvoke <android.provider.Settings$Global: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r0, r1, r2, i0);

        return $z3;

     label2:
        $r5 = <android.provider.Settings$Secure: android.provider.Settings$NameValueCache sNameValueCache>;

        $z2 = virtualinvoke $r5.<android.provider.Settings$NameValueCache: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r0, r1, r2, i0);

        return $z2;
    }

    public static android.net.Uri getUriFor(java.lang.String)
    {
        java.lang.String r0, $r9;
        java.util.HashSet $r1;
        boolean $z0;
        android.net.Uri $r2, $r3, $r10, $r11;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: java.lang.String;

        $r1 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        $z0 = virtualinvoke $r1.<java.util.HashSet: boolean contains(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has moved from android.provider.Settings.Secure");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to android.provider.Settings.Global, returning global URI.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Settings", $r9);

        $r10 = <android.provider.Settings$Global: android.net.Uri CONTENT_URI>;

        $r11 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>($r10, r0);

        return $r11;

     label1:
        $r2 = <android.provider.Settings$Secure: android.net.Uri CONTENT_URI>;

        $r3 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>($r2, r0);

        return $r3;
    }

    public static int getInt(android.content.ContentResolver, java.lang.String, int)
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        int i0, $i1, $i2;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i2 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r0, r1, i0, $i1);

        return $i2;
    }

    public static int getIntForUser(android.content.ContentResolver, java.lang.String, int, int)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, r2, $r4;
        int i0, i1, $i2, $i3;
        boolean $z0;
        java.lang.NumberFormatException $r5;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r4 = "location_mode";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $i3 = staticinvoke <android.provider.Settings$Secure: int getLocationModeForUser(android.content.ContentResolver,int)>(r0, i1);

        return $i3;

     label1:
        r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r0, r1, i1);

     label2:
        if r2 == null goto label3;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        goto label4;

     label3:
        $i2 = i0;

     label4:
        return $i2;

     label5:
        $r5 := @caughtexception;

        return i0;

        catch java.lang.NumberFormatException from label2 to label4 with label5;
    }

    public static int getInt(android.content.ContentResolver, java.lang.String) throws android.provider.Settings$SettingNotFoundException
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        int $i0, $i1;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>(r0, r1, $i0);

        return $i1;
    }

    public static int getIntForUser(android.content.ContentResolver, java.lang.String, int) throws android.provider.Settings$SettingNotFoundException
    {
        android.content.ContentResolver r0;
        java.lang.String r1, r2, $r4;
        int i0, $i1, $i2;
        boolean $z0;
        java.lang.NumberFormatException $r5;
        android.provider.Settings$SettingNotFoundException $r6;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r4 = "location_mode";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <android.provider.Settings$Secure: int getLocationModeForUser(android.content.ContentResolver,int)>(r0, i0);

        return $i2;

     label1:
        r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r0, r1, i0);

     label2:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

     label3:
        return $i1;

     label4:
        $r5 := @caughtexception;

        $r6 = new android.provider.Settings$SettingNotFoundException;

        specialinvoke $r6.<android.provider.Settings$SettingNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r6;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public static boolean putInt(android.content.ContentResolver, java.lang.String, int)
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r0, r1, i0, $i1);

        return $z0;
    }

    public static boolean putIntForUser(android.content.ContentResolver, java.lang.String, int, int)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, $r2;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $z0 = staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r0, r1, $r2, i1);

        return $z0;
    }

    public static long getLong(android.content.ContentResolver, java.lang.String, long)
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        long l0, $l2;
        int $i1;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $l2 = staticinvoke <android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)>(r0, r1, l0, $i1);

        return $l2;
    }

    public static long getLongForUser(android.content.ContentResolver, java.lang.String, long, int)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, r2;
        long l0, l2, $l3;
        int i1;
        java.lang.NumberFormatException $r4;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        i1 := @parameter3: int;

        r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r0, r1, i1);

     label1:
        if r2 == null goto label2;

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);

        goto label3;

     label2:
        $l3 = l0;

     label3:
        l2 = $l3;

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        l2 = l0;

     label6:
        return l2;

        catch java.lang.NumberFormatException from label1 to label4 with label5;
    }

    public static long getLong(android.content.ContentResolver, java.lang.String) throws android.provider.Settings$SettingNotFoundException
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        int $i0;
        long $l1;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $l1 = staticinvoke <android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,int)>(r0, r1, $i0);

        return $l1;
    }

    public static long getLongForUser(android.content.ContentResolver, java.lang.String, int) throws android.provider.Settings$SettingNotFoundException
    {
        android.content.ContentResolver r0;
        java.lang.String r1, r2;
        int i0;
        long $l1;
        java.lang.NumberFormatException $r4;
        android.provider.Settings$SettingNotFoundException $r5;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r0, r1, i0);

     label1:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);

     label2:
        return $l1;

     label3:
        $r4 := @caughtexception;

        $r5 = new android.provider.Settings$SettingNotFoundException;

        specialinvoke $r5.<android.provider.Settings$SettingNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r5;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static boolean putLong(android.content.ContentResolver, java.lang.String, long)
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        long l0;
        int $i1;
        boolean $z0;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = staticinvoke <android.provider.Settings$Secure: boolean putLongForUser(android.content.ContentResolver,java.lang.String,long,int)>(r0, r1, l0, $i1);

        return $z0;
    }

    public static boolean putLongForUser(android.content.ContentResolver, java.lang.String, long, int)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, $r2;
        long l0;
        int i1;
        boolean $z0;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        i1 := @parameter3: int;

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        $z0 = staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r0, r1, $r2, i1);

        return $z0;
    }

    public static float getFloat(android.content.ContentResolver, java.lang.String, float)
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        float f0, $f1;
        int $i0;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $f1 = staticinvoke <android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>(r0, r1, f0, $i0);

        return $f1;
    }

    public static float getFloatForUser(android.content.ContentResolver, java.lang.String, float, int)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, r2;
        float f0, $f1;
        int i0;
        java.lang.NumberFormatException $r4;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        i0 := @parameter3: int;

        r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r0, r1, i0);

     label1:
        if r2 == null goto label2;

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);

        goto label3;

     label2:
        $f1 = f0;

     label3:
        return $f1;

     label4:
        $r4 := @caughtexception;

        return f0;

        catch java.lang.NumberFormatException from label1 to label3 with label4;
    }

    public static float getFloat(android.content.ContentResolver, java.lang.String) throws android.provider.Settings$SettingNotFoundException
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        int $i0;
        float $f0;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $f0 = staticinvoke <android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)>(r0, r1, $i0);

        return $f0;
    }

    public static float getFloatForUser(android.content.ContentResolver, java.lang.String, int) throws android.provider.Settings$SettingNotFoundException
    {
        android.content.ContentResolver r0;
        java.lang.String r1, r2;
        int i0;
        float $f0;
        android.provider.Settings$SettingNotFoundException $r4, $r6;
        java.lang.NumberFormatException $r5;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r0, r1, i0);

        if r2 != null goto label1;

        $r4 = new android.provider.Settings$SettingNotFoundException;

        specialinvoke $r4.<android.provider.Settings$SettingNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r4;

     label1:
        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);

     label2:
        return $f0;

     label3:
        $r5 := @caughtexception;

        $r6 = new android.provider.Settings$SettingNotFoundException;

        specialinvoke $r6.<android.provider.Settings$SettingNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r6;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static boolean putFloat(android.content.ContentResolver, java.lang.String, float)
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        float f0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = staticinvoke <android.provider.Settings$Secure: boolean putFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>(r0, r1, f0, $i0);

        return $z0;
    }

    public static boolean putFloatForUser(android.content.ContentResolver, java.lang.String, float, int)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, $r2;
        float f0;
        int i0;
        boolean $z0;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        i0 := @parameter3: int;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        $z0 = staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r0, r1, $r2, i0);

        return $z0;
    }

    public static final boolean isLocationProviderEnabled(android.content.ContentResolver, java.lang.String)
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        int $i0;
        boolean $z0;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $z0 = staticinvoke <android.provider.Settings$Secure: boolean isLocationProviderEnabledForUser(android.content.ContentResolver,java.lang.String,int)>(r0, r1, $i0);

        return $z0;
    }

    public static final boolean isLocationProviderEnabledForUser(android.content.ContentResolver, java.lang.String, int)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, r2;
        int i0;
        boolean $z0;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r0, "location_providers_allowed", i0);

        $z0 = staticinvoke <android.text.TextUtils: boolean delimitedStringContains(java.lang.String,char,java.lang.String)>(r2, 44, r1);

        return $z0;
    }

    public static final void setLocationProviderEnabled(android.content.ContentResolver, java.lang.String, boolean)
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        boolean z0;
        int $i0;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        staticinvoke <android.provider.Settings$Secure: boolean setLocationProviderEnabledForUser(android.content.ContentResolver,java.lang.String,boolean,int)>(r0, r1, z0, $i0);

        return;
    }

    public static final boolean setLocationProviderEnabledForUser(android.content.ContentResolver, java.lang.String, boolean, int)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, r12;
        boolean z0, $z1;
        int i0;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r11;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        $r4 = staticinvoke <android.provider.Settings: java.lang.Object access$000()>();

        r2 = $r4;

        entermonitor $r4;

     label1:
        if z0 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $z1 = staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r0, "location_providers_allowed", r12, i0);

        exitmonitor r2;

     label4:
        return $z1;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private static final boolean setLocationModeForUser(android.content.ContentResolver, int, int)
    {
        android.content.ContentResolver r0;
        int i0, i1;
        java.lang.Object r1, $r3;
        boolean z0, z1, z2, z3, $z4;
        java.lang.Throwable r2, $r8;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r9;

        r0 := @parameter0: android.content.ContentResolver;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = staticinvoke <android.provider.Settings: java.lang.Object access$000()>();

        r1 = $r3;

        entermonitor $r3;

     label01:
        z0 = 0;

        z1 = 0;

        tableswitch(i0)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            default: goto label06;
        };

     label02:
        goto label07;

     label03:
        z0 = 1;

        goto label07;

     label04:
        z1 = 1;

        goto label07;

     label05:
        z0 = 1;

        z1 = 1;

        goto label07;

     label06:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid location mode: ");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label07:
        z2 = staticinvoke <android.provider.Settings$Secure: boolean setLocationProviderEnabledForUser(android.content.ContentResolver,java.lang.String,boolean,int)>(r0, "gps", z0, i1);

        z3 = staticinvoke <android.provider.Settings$Secure: boolean setLocationProviderEnabledForUser(android.content.ContentResolver,java.lang.String,boolean,int)>(r0, "network", z1, i1);

        if z2 == 0 goto label08;

        if z3 == 0 goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        exitmonitor r1;

     label10:
        return $z4;

     label11:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label12:
        throw r2;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private static final int getLocationModeForUser(android.content.ContentResolver, int)
    {
        android.content.ContentResolver r0;
        int i0;
        java.lang.Object r1, $r3;
        boolean z0, z1;
        java.lang.Throwable r2, $r4;

        r0 := @parameter0: android.content.ContentResolver;

        i0 := @parameter1: int;

        $r3 = staticinvoke <android.provider.Settings: java.lang.Object access$000()>();

        r1 = $r3;

        entermonitor $r3;

     label01:
        z0 = staticinvoke <android.provider.Settings$Secure: boolean isLocationProviderEnabledForUser(android.content.ContentResolver,java.lang.String,int)>(r0, "gps", i0);

        z1 = staticinvoke <android.provider.Settings$Secure: boolean isLocationProviderEnabledForUser(android.content.ContentResolver,java.lang.String,int)>(r0, "network", i0);

        if z0 == 0 goto label03;

        if z1 == 0 goto label03;

        exitmonitor r1;

     label02:
        return 3;

     label03:
        if z0 == 0 goto label05;

        exitmonitor r1;

     label04:
        return 1;

     label05:
        if z1 == 0 goto label07;

        exitmonitor r1;

     label06:
        return 2;

     label07:
        exitmonitor r1;

     label08:
        return 0;

     label09:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    static void <clinit>()
    {
        android.net.Uri $r0, $r2;
        android.provider.Settings$NameValueCache $r1;
        java.util.HashSet $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r112, $r113, $r114, $r117, $r118, $r119, $r120, $r121, $r122;
        java.lang.String[] $r115, $r116;

        <android.provider.Settings$Secure: java.lang.String SLEEP_TIMEOUT> = "sleep_timeout";

        <android.provider.Settings$Secure: java.lang.String USB_AUDIO_AUTOMATIC_ROUTING_DISABLED> = "usb_audio_automatic_routing_disabled";

        <android.provider.Settings$Secure: java.lang.String TV_INPUT_CUSTOM_LABELS> = "tv_input_custom_labels";

        <android.provider.Settings$Secure: java.lang.String TV_INPUT_HIDDEN_INPUTS> = "tv_input_hidden_inputs";

        <android.provider.Settings$Secure: java.lang.String LOCK_SCREEN_SHOW_NOTIFICATIONS> = "lock_screen_show_notifications";

        <android.provider.Settings$Secure: java.lang.String UNSAFE_VOLUME_MUSIC_ACTIVE_MS> = "unsafe_volume_music_active_ms";

        <android.provider.Settings$Secure: java.lang.String SKIP_FIRST_USE_HINTS> = "skip_first_use_hints";

        <android.provider.Settings$Secure: java.lang.String PAYMENT_SERVICE_SEARCH_URI> = "payment_service_search_uri";

        <android.provider.Settings$Secure: java.lang.String PRINT_SERVICE_SEARCH_URI> = "print_service_search_uri";

        <android.provider.Settings$Secure: java.lang.String IMMERSIVE_MODE_CONFIRMATIONS> = "immersive_mode_confirmations";

        <android.provider.Settings$Secure: java.lang.String BAR_SERVICE_COMPONENT> = "bar_service_component";

        <android.provider.Settings$Secure: java.lang.String ENABLED_CONDITION_PROVIDERS> = "enabled_condition_providers";

        <android.provider.Settings$Secure: java.lang.String ENABLED_NOTIFICATION_LISTENERS> = "enabled_notification_listeners";

        <android.provider.Settings$Secure: java.lang.String SMS_DEFAULT_APPLICATION> = "sms_default_application";

        <android.provider.Settings$Secure: java.lang.String NFC_PAYMENT_FOREGROUND> = "nfc_payment_foreground";

        <android.provider.Settings$Secure: java.lang.String NFC_PAYMENT_DEFAULT_COMPONENT> = "nfc_payment_default_component";

        <android.provider.Settings$Secure: java.lang.String SCREENSAVER_DEFAULT_COMPONENT> = "screensaver_default_component";

        <android.provider.Settings$Secure: java.lang.String SCREENSAVER_ACTIVATE_ON_SLEEP> = "screensaver_activate_on_sleep";

        <android.provider.Settings$Secure: java.lang.String SCREENSAVER_ACTIVATE_ON_DOCK> = "screensaver_activate_on_dock";

        <android.provider.Settings$Secure: java.lang.String SCREENSAVER_COMPONENTS> = "screensaver_components";

        <android.provider.Settings$Secure: java.lang.String SCREENSAVER_ENABLED> = "screensaver_enabled";

        <android.provider.Settings$Secure: java.lang.String UI_NIGHT_MODE> = "ui_night_mode";

        <android.provider.Settings$Secure: java.lang.String DOZE_ENABLED> = "doze_enabled";

        <android.provider.Settings$Secure: java.lang.String WAKE_GESTURE_ENABLED> = "wake_gesture_enabled";

        <android.provider.Settings$Secure: int INCALL_POWER_BUTTON_BEHAVIOR_DEFAULT> = 1;

        <android.provider.Settings$Secure: int INCALL_POWER_BUTTON_BEHAVIOR_HANGUP> = 2;

        <android.provider.Settings$Secure: int INCALL_POWER_BUTTON_BEHAVIOR_SCREEN_OFF> = 1;

        <android.provider.Settings$Secure: java.lang.String INCALL_POWER_BUTTON_BEHAVIOR> = "incall_power_button_behavior";

        <android.provider.Settings$Secure: java.lang.String SPELL_CHECKER_ENABLED> = "spell_checker_enabled";

        <android.provider.Settings$Secure: java.lang.String SELECTED_SPELL_CHECKER_SUBTYPE> = "selected_spell_checker_subtype";

        <android.provider.Settings$Secure: java.lang.String SELECTED_SPELL_CHECKER> = "selected_spell_checker";

        <android.provider.Settings$Secure: java.lang.String PACKAGE_VERIFIER_USER_CONSENT> = "package_verifier_user_consent";

        <android.provider.Settings$Secure: java.lang.String VOICE_RECOGNITION_SERVICE> = "voice_recognition_service";

        <android.provider.Settings$Secure: java.lang.String WEBVIEW_DATA_REDUCTION_PROXY> = "webview_data_reduction_proxy";

        <android.provider.Settings$Secure: java.lang.String ANR_SHOW_BACKGROUND> = "anr_show_background";

        <android.provider.Settings$Secure: java.lang.String MOUNT_UMS_NOTIFY_ENABLED> = "mount_ums_notify_enabled";

        <android.provider.Settings$Secure: java.lang.String MOUNT_UMS_PROMPT> = "mount_ums_prompt";

        <android.provider.Settings$Secure: java.lang.String MOUNT_UMS_AUTOSTART> = "mount_ums_autostart";

        <android.provider.Settings$Secure: java.lang.String MOUNT_PLAY_NOTIFICATION_SND> = "mount_play_not_snd";

        <android.provider.Settings$Secure: java.lang.String SEARCH_PER_SOURCE_CONCURRENT_QUERY_LIMIT> = "search_per_source_concurrent_query_limit";

        <android.provider.Settings$Secure: java.lang.String SEARCH_THREAD_KEEPALIVE_SECONDS> = "search_thread_keepalive_seconds";

        <android.provider.Settings$Secure: java.lang.String SEARCH_SHORTCUT_REFRESH_MAX_POOL_SIZE> = "search_shortcut_refresh_max_pool_size";

        <android.provider.Settings$Secure: java.lang.String SEARCH_SHORTCUT_REFRESH_CORE_POOL_SIZE> = "search_shortcut_refresh_core_pool_size";

        <android.provider.Settings$Secure: java.lang.String SEARCH_QUERY_THREAD_MAX_POOL_SIZE> = "search_query_thread_max_pool_size";

        <android.provider.Settings$Secure: java.lang.String SEARCH_QUERY_THREAD_CORE_POOL_SIZE> = "search_query_thread_core_pool_size";

        <android.provider.Settings$Secure: java.lang.String SEARCH_MAX_SHORTCUTS_RETURNED> = "search_max_shortcuts_returned";

        <android.provider.Settings$Secure: java.lang.String SEARCH_MIN_CLICKS_FOR_SOURCE_RANKING> = "search_min_clicks_for_source_ranking";

        <android.provider.Settings$Secure: java.lang.String SEARCH_MIN_IMPRESSIONS_FOR_SOURCE_RANKING> = "search_min_impressions_for_source_ranking";

        <android.provider.Settings$Secure: java.lang.String SEARCH_MAX_SOURCE_EVENT_AGE_MILLIS> = "search_max_source_event_age_millis";

        <android.provider.Settings$Secure: java.lang.String SEARCH_MAX_STAT_AGE_MILLIS> = "search_max_stat_age_millis";

        <android.provider.Settings$Secure: java.lang.String SEARCH_PREFILL_MILLIS> = "search_prefill_millis";

        <android.provider.Settings$Secure: java.lang.String SEARCH_SOURCE_TIMEOUT_MILLIS> = "search_source_timeout_millis";

        <android.provider.Settings$Secure: java.lang.String SEARCH_PROMOTED_SOURCE_DEADLINE_MILLIS> = "search_promoted_source_deadline_millis";

        <android.provider.Settings$Secure: java.lang.String SEARCH_WEB_RESULTS_OVERRIDE_LIMIT> = "search_web_results_override_limit";

        <android.provider.Settings$Secure: java.lang.String SEARCH_MAX_RESULTS_PER_SOURCE> = "search_max_results_per_source";

        <android.provider.Settings$Secure: java.lang.String SEARCH_MAX_RESULTS_TO_DISPLAY> = "search_max_results_to_display";

        <android.provider.Settings$Secure: java.lang.String SEARCH_NUM_PROMOTED_SOURCES> = "search_num_promoted_sources";

        <android.provider.Settings$Secure: java.lang.String SEARCH_GLOBAL_SEARCH_ACTIVITY> = "search_global_search_activity";

        <android.provider.Settings$Secure: java.lang.String WIFI_IDLE_MS> = "wifi_idle_ms";

        <android.provider.Settings$Secure: java.lang.String LAST_SETUP_SHOWN> = "last_setup_shown";

        <android.provider.Settings$Secure: java.lang.String BACKUP_TRANSPORT> = "backup_transport";

        <android.provider.Settings$Secure: java.lang.String BACKUP_PROVISIONED> = "backup_provisioned";

        <android.provider.Settings$Secure: java.lang.String BACKUP_AUTO_RESTORE> = "backup_auto_restore";

        <android.provider.Settings$Secure: java.lang.String BACKUP_ENABLED> = "backup_enabled";

        <android.provider.Settings$Secure: java.lang.String TTY_MODE_ENABLED> = "tty_mode_enabled";

        <android.provider.Settings$Secure: java.lang.String ENHANCED_VOICE_PRIVACY_ENABLED> = "enhanced_voice_privacy_enabled";

        <android.provider.Settings$Secure: java.lang.String PREFERRED_TTY_MODE> = "preferred_tty_mode";

        <android.provider.Settings$Secure: java.lang.String ALLOWED_GEOLOCATION_ORIGINS> = "allowed_geolocation_origins";

        <android.provider.Settings$Secure: java.lang.String BACKGROUND_DATA> = "background_data";

        <android.provider.Settings$Secure: java.lang.String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS> = "wifi_mobile_data_transition_wakelock_timeout_ms";

        <android.provider.Settings$Secure: java.lang.String WIFI_MAX_DHCP_RETRY_COUNT> = "wifi_max_dhcp_retry_count";

        <android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_PING_TIMEOUT_MS> = "wifi_watchdog_ping_timeout_ms";

        <android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_PING_DELAY_MS> = "wifi_watchdog_ping_delay_ms";

        <android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_PING_COUNT> = "wifi_watchdog_ping_count";

        <android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_WATCH_LIST> = "wifi_watchdog_watch_list";

        <android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_ON> = "wifi_watchdog_on";

        <android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_MAX_AP_CHECKS> = "wifi_watchdog_max_ap_checks";

        <android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT> = "wifi_watchdog_initial_ignored_ping_count";

        <android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS> = "wifi_watchdog_background_check_timeout_ms";

        <android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED> = "wifi_watchdog_background_check_enabled";

        <android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS> = "wifi_watchdog_background_check_delay_ms";

        <android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_AP_COUNT> = "wifi_watchdog_ap_count";

        <android.provider.Settings$Secure: java.lang.String WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE> = "wifi_watchdog_acceptable_packet_loss_percentage";

        <android.provider.Settings$Secure: java.lang.String WIFI_ON> = "wifi_on";

        <android.provider.Settings$Secure: java.lang.String WIFI_NUM_OPEN_NETWORKS_KEPT> = "wifi_num_open_networks_kept";

        <android.provider.Settings$Secure: java.lang.String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY> = "wifi_networks_available_repeat_delay";

        <android.provider.Settings$Secure: java.lang.String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON> = "wifi_networks_available_notification_on";

        <android.provider.Settings$Secure: java.lang.String TTS_ENABLED_PLUGINS> = "tts_enabled_plugins";

        <android.provider.Settings$Secure: java.lang.String TTS_DEFAULT_LOCALE> = "tts_default_locale";

        <android.provider.Settings$Secure: java.lang.String TTS_DEFAULT_VARIANT> = "tts_default_variant";

        <android.provider.Settings$Secure: java.lang.String TTS_DEFAULT_COUNTRY> = "tts_default_country";

        <android.provider.Settings$Secure: java.lang.String TTS_DEFAULT_LANG> = "tts_default_lang";

        <android.provider.Settings$Secure: java.lang.String TTS_DEFAULT_SYNTH> = "tts_default_synth";

        <android.provider.Settings$Secure: java.lang.String TTS_DEFAULT_PITCH> = "tts_default_pitch";

        <android.provider.Settings$Secure: java.lang.String TTS_DEFAULT_RATE> = "tts_default_rate";

        <android.provider.Settings$Secure: java.lang.String TTS_USE_DEFAULTS> = "tts_use_defaults";

        <android.provider.Settings$Secure: java.lang.String ENABLED_ON_FIRST_BOOT_SYSTEM_PRINT_SERVICES> = "enabled_on_first_boot_system_print_services";

        <android.provider.Settings$Secure: java.lang.String ENABLED_PRINT_SERVICES> = "enabled_print_services";

        <android.provider.Settings$Secure: java.lang.String LONG_PRESS_TIMEOUT> = "long_press_timeout";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_DISPLAY_DALTONIZER> = "accessibility_display_daltonizer";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_DISPLAY_DALTONIZER_ENABLED> = "accessibility_display_daltonizer_enabled";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_DISPLAY_INVERSION_ENABLED> = "accessibility_display_inversion_enabled";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_CAPTIONING_FONT_SCALE> = "accessibility_captioning_font_scale";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_CAPTIONING_TYPEFACE> = "accessibility_captioning_typeface";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_CAPTIONING_WINDOW_COLOR> = "accessibility_captioning_window_color";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_CAPTIONING_EDGE_COLOR> = "accessibility_captioning_edge_color";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_CAPTIONING_EDGE_TYPE> = "accessibility_captioning_edge_type";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_CAPTIONING_FOREGROUND_COLOR> = "accessibility_captioning_foreground_color";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_CAPTIONING_BACKGROUND_COLOR> = "accessibility_captioning_background_color";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_CAPTIONING_PRESET> = "accessibility_captioning_preset";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_CAPTIONING_LOCALE> = "accessibility_captioning_locale";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_CAPTIONING_ENABLED> = "accessibility_captioning_enabled";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_DISPLAY_MAGNIFICATION_AUTO_UPDATE> = "accessibility_display_magnification_auto_update";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE> = "accessibility_display_magnification_scale";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED> = "accessibility_display_magnification_enabled";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS> = "accessibility_web_content_key_bindings";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_SCREEN_READER_URL> = "accessibility_script_injection_url";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_SCRIPT_INJECTION> = "accessibility_script_injection";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_HIGH_TEXT_CONTRAST_ENABLED> = "high_text_contrast_enabled";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_SPEAK_PASSWORD> = "speak_password";

        <android.provider.Settings$Secure: java.lang.String TOUCH_EXPLORATION_GRANTED_ACCESSIBILITY_SERVICES> = "touch_exploration_granted_accessibility_services";

        <android.provider.Settings$Secure: java.lang.String ENABLED_ACCESSIBILITY_SERVICES> = "enabled_accessibility_services";

        <android.provider.Settings$Secure: java.lang.String TOUCH_EXPLORATION_ENABLED> = "touch_exploration_enabled";

        <android.provider.Settings$Secure: java.lang.String ACCESSIBILITY_ENABLED> = "accessibility_enabled";

        <android.provider.Settings$Secure: java.lang.String USE_GOOGLE_MAIL> = "use_google_mail";

        <android.provider.Settings$Secure: java.lang.String USB_MASS_STORAGE_ENABLED> = "usb_mass_storage_enabled";

        <android.provider.Settings$Secure: java.lang.String SETTINGS_CLASSNAME> = "settings_classname";

        <android.provider.Settings$Secure: java.lang.String PARENTAL_CONTROL_REDIRECT_URL> = "parental_control_redirect_url";

        <android.provider.Settings$Secure: java.lang.String PARENTAL_CONTROL_LAST_UPDATE> = "parental_control_last_update";

        <android.provider.Settings$Secure: java.lang.String PARENTAL_CONTROL_ENABLED> = "parental_control_enabled";

        <android.provider.Settings$Secure: java.lang.String NETWORK_PREFERENCE> = "network_preference";

        <android.provider.Settings$Secure: java.lang.String LOGGING_ID> = "logging_id";

        <android.provider.Settings$Secure: java.lang.String TRUST_AGENTS_INITIALIZED> = "trust_agents_initialized";

        <android.provider.Settings$Secure: java.lang.String SHOW_NOTE_ABOUT_NOTIFICATION_HIDING> = "show_note_about_notification_hiding";

        <android.provider.Settings$Secure: java.lang.String LOCK_SCREEN_ALLOW_PRIVATE_NOTIFICATIONS> = "lock_screen_allow_private_notifications";

        <android.provider.Settings$Secure: java.lang.String LOCK_SCREEN_OWNER_INFO_ENABLED> = "lock_screen_owner_info_enabled";

        <android.provider.Settings$Secure: java.lang.String LOCK_SCREEN_STICKY_APPWIDGET> = "lock_screen_sticky_appwidget";

        <android.provider.Settings$Secure: java.lang.String LOCK_SCREEN_FALLBACK_APPWIDGET_ID> = "lock_screen_fallback_appwidget_id";

        <android.provider.Settings$Secure: java.lang.String USER_FINGERPRINT_IDS> = "user_fingerprint_ids";

        <android.provider.Settings$Secure: java.lang.String LOCK_SCREEN_APPWIDGET_IDS> = "lock_screen_appwidget_ids";

        <android.provider.Settings$Secure: java.lang.String LOCK_SCREEN_OWNER_INFO> = "lock_screen_owner_info";

        <android.provider.Settings$Secure: java.lang.String LOCK_SCREEN_LOCK_AFTER_TIMEOUT> = "lock_screen_lock_after_timeout";

        <android.provider.Settings$Secure: java.lang.String LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED> = "lock_pattern_tactile_feedback_enabled";

        <android.provider.Settings$Secure: java.lang.String LOCK_PATTERN_VISIBLE> = "lock_pattern_visible_pattern";

        <android.provider.Settings$Secure: java.lang.String LOCK_PATTERN_ENABLED> = "lock_pattern_autolock";

        <android.provider.Settings$Secure: java.lang.String LOCK_BIOMETRIC_WEAK_FLAGS> = "lock_biometric_weak_flags";

        <android.provider.Settings$Secure: int LOCATION_MODE_HIGH_ACCURACY> = 3;

        <android.provider.Settings$Secure: int LOCATION_MODE_BATTERY_SAVING> = 2;

        <android.provider.Settings$Secure: int LOCATION_MODE_SENSORS_ONLY> = 1;

        <android.provider.Settings$Secure: int LOCATION_MODE_OFF> = 0;

        <android.provider.Settings$Secure: java.lang.String LOCATION_MODE> = "location_mode";

        <android.provider.Settings$Secure: java.lang.String LOCATION_PROVIDERS_ALLOWED> = "location_providers_allowed";

        <android.provider.Settings$Secure: java.lang.String INSTALL_NON_MARKET_APPS> = "install_non_market_apps";

        <android.provider.Settings$Secure: java.lang.String HTTP_PROXY> = "http_proxy";

        <android.provider.Settings$Secure: java.lang.String SHOW_IME_WITH_HARD_KEYBOARD> = "show_ime_with_hard_keyboard";

        <android.provider.Settings$Secure: java.lang.String DISABLED_SYSTEM_INPUT_METHODS> = "disabled_system_input_methods";

        <android.provider.Settings$Secure: java.lang.String ENABLED_INPUT_METHODS> = "enabled_input_methods";

        <android.provider.Settings$Secure: java.lang.String USER_SETUP_COMPLETE> = "user_setup_complete";

        <android.provider.Settings$Secure: java.lang.String DEVICE_PROVISIONED> = "device_provisioned";

        <android.provider.Settings$Secure: java.lang.String BLUETOOTH_HCI_LOG> = "bluetooth_hci_log";

        <android.provider.Settings$Secure: java.lang.String VOICE_INTERACTION_SERVICE> = "voice_interaction_service";

        <android.provider.Settings$Secure: java.lang.String INPUT_METHOD_SELECTOR_VISIBILITY> = "input_method_selector_visibility";

        <android.provider.Settings$Secure: java.lang.String INPUT_METHODS_SUBTYPE_HISTORY> = "input_methods_subtype_history";

        <android.provider.Settings$Secure: java.lang.String SELECTED_INPUT_METHOD_SUBTYPE> = "selected_input_method_subtype";

        <android.provider.Settings$Secure: java.lang.String DEFAULT_INPUT_METHOD> = "default_input_method";

        <android.provider.Settings$Secure: java.lang.String DATA_ROAMING> = "data_roaming";

        <android.provider.Settings$Secure: java.lang.String BLUETOOTH_ON> = "bluetooth_on";

        <android.provider.Settings$Secure: java.lang.String ANDROID_ID> = "android_id";

        <android.provider.Settings$Secure: java.lang.String ALLOW_MOCK_LOCATION> = "mock_location";

        <android.provider.Settings$Secure: java.lang.String ADB_ENABLED> = "adb_enabled";

        <android.provider.Settings$Secure: java.lang.String BUGREPORT_IN_POWER_MENU> = "bugreport_in_power_menu";

        <android.provider.Settings$Secure: java.lang.String DEVELOPMENT_SETTINGS_ENABLED> = "development_settings_enabled";

        <android.provider.Settings$Secure: java.lang.String SYS_PROP_SETTING_VERSION> = "sys.settings_secure_version";

        $r0 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://settings/secure");

        <android.provider.Settings$Secure: android.net.Uri CONTENT_URI> = $r0;

        $r1 = new android.provider.Settings$NameValueCache;

        $r2 = <android.provider.Settings$Secure: android.net.Uri CONTENT_URI>;

        specialinvoke $r1.<android.provider.Settings$NameValueCache: void <init>(java.lang.String,android.net.Uri,java.lang.String,java.lang.String)>("sys.settings_secure_version", $r2, "GET_secure", "PUT_secure");

        <android.provider.Settings$Secure: android.provider.Settings$NameValueCache sNameValueCache> = $r1;

        <android.provider.Settings$Secure: com.android.internal.widget.ILockSettings sLockSettings> = null;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>(int)>(3);

        <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_LOCK_SETTINGS> = $r3;

        $r4 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_LOCK_SETTINGS>;

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>("lock_pattern_autolock");

        $r5 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_LOCK_SETTINGS>;

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>("lock_pattern_visible_pattern");

        $r6 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_LOCK_SETTINGS>;

        virtualinvoke $r6.<java.util.HashSet: boolean add(java.lang.Object)>("lock_pattern_tactile_feedback_enabled");

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL> = $r7;

        $r8 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r8.<java.util.HashSet: boolean add(java.lang.Object)>("adb_enabled");

        $r9 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r9.<java.util.HashSet: boolean add(java.lang.Object)>("assisted_gps_enabled");

        $r10 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r10.<java.util.HashSet: boolean add(java.lang.Object)>("bluetooth_on");

        $r11 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r11.<java.util.HashSet: boolean add(java.lang.Object)>("bugreport_in_power_menu");

        $r12 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r12.<java.util.HashSet: boolean add(java.lang.Object)>("cdma_cell_broadcast_sms");

        $r13 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r13.<java.util.HashSet: boolean add(java.lang.Object)>("roaming_settings");

        $r14 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>("subscription_mode");

        $r15 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r15.<java.util.HashSet: boolean add(java.lang.Object)>("data_activity_timeout_mobile");

        $r16 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r16.<java.util.HashSet: boolean add(java.lang.Object)>("data_activity_timeout_wifi");

        $r17 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r17.<java.util.HashSet: boolean add(java.lang.Object)>("data_roaming");

        $r18 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r18.<java.util.HashSet: boolean add(java.lang.Object)>("development_settings_enabled");

        $r20 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r20.<java.util.HashSet: boolean add(java.lang.Object)>("device_provisioned");

        $r19 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r19.<java.util.HashSet: boolean add(java.lang.Object)>("display_density_forced");

        $r22 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r22.<java.util.HashSet: boolean add(java.lang.Object)>("display_size_forced");

        $r21 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r21.<java.util.HashSet: boolean add(java.lang.Object)>("download_manager_max_bytes_over_mobile");

        $r24 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r24.<java.util.HashSet: boolean add(java.lang.Object)>("download_manager_recommended_max_bytes_over_mobile");

        $r23 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r23.<java.util.HashSet: boolean add(java.lang.Object)>("mobile_data");

        $r26 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r26.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_dev_bucket_duration");

        $r25 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r25.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_dev_delete_age");

        $r28 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r28.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_dev_persist_bytes");

        $r27 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r27.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_dev_rotate_age");

        $r30 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r30.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_enabled");

        $r29 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r29.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_global_alert_bytes");

        $r32 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r32.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_poll_interval");

        $r31 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r31.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_report_xt_over_dev");

        $r34 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r34.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_sample_enabled");

        $r33 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r33.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_time_cache_max_age");

        $r37 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r37.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_uid_bucket_duration");

        $r38 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r38.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_uid_delete_age");

        $r35 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r35.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_uid_persist_bytes");

        $r36 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r36.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_uid_rotate_age");

        $r41 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r41.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_uid_tag_bucket_duration");

        $r42 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r42.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_uid_tag_delete_age");

        $r39 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r39.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_uid_tag_persist_bytes");

        $r40 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r40.<java.util.HashSet: boolean add(java.lang.Object)>("netstats_uid_tag_rotate_age");

        $r45 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r45.<java.util.HashSet: boolean add(java.lang.Object)>("network_preference");

        $r46 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r46.<java.util.HashSet: boolean add(java.lang.Object)>("nitz_update_diff");

        $r43 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r43.<java.util.HashSet: boolean add(java.lang.Object)>("nitz_update_spacing");

        $r44 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r44.<java.util.HashSet: boolean add(java.lang.Object)>("ntp_server");

        $r49 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r49.<java.util.HashSet: boolean add(java.lang.Object)>("ntp_timeout");

        $r50 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r50.<java.util.HashSet: boolean add(java.lang.Object)>("pdp_watchdog_error_poll_count");

        $r47 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r47.<java.util.HashSet: boolean add(java.lang.Object)>("pdp_watchdog_long_poll_interval_ms");

        $r48 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r48.<java.util.HashSet: boolean add(java.lang.Object)>("pdp_watchdog_max_pdp_reset_fail_count");

        $r54 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r54.<java.util.HashSet: boolean add(java.lang.Object)>("pdp_watchdog_poll_interval_ms");

        $r53 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r53.<java.util.HashSet: boolean add(java.lang.Object)>("pdp_watchdog_trigger_packet_count");

        $r52 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r52.<java.util.HashSet: boolean add(java.lang.Object)>("sampling_profiler_ms");

        $r51 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r51.<java.util.HashSet: boolean add(java.lang.Object)>("setup_prepaid_data_service_url");

        $r58 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r58.<java.util.HashSet: boolean add(java.lang.Object)>("setup_prepaid_detection_redir_host");

        $r57 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r57.<java.util.HashSet: boolean add(java.lang.Object)>("setup_prepaid_detection_target_url");

        $r56 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r56.<java.util.HashSet: boolean add(java.lang.Object)>("tether_dun_apn");

        $r55 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r55.<java.util.HashSet: boolean add(java.lang.Object)>("tether_dun_required");

        $r62 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r62.<java.util.HashSet: boolean add(java.lang.Object)>("tether_supported");

        $r61 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r61.<java.util.HashSet: boolean add(java.lang.Object)>("usb_mass_storage_enabled");

        $r60 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r60.<java.util.HashSet: boolean add(java.lang.Object)>("use_google_mail");

        $r59 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r59.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_country_code");

        $r66 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r66.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_framework_scan_interval_ms");

        $r65 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r65.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_frequency_band");

        $r64 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r64.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_idle_ms");

        $r63 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r63.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_max_dhcp_retry_count");

        $r71 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r71.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_mobile_data_transition_wakelock_timeout_ms");

        $r72 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r72.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_networks_available_notification_on");

        $r73 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r73.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_networks_available_repeat_delay");

        $r74 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r74.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_num_open_networks_kept");

        $r67 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r67.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_on");

        $r68 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r68.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_p2p_device_name");

        $r69 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r69.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_saved_state");

        $r70 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r70.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_supplicant_scan_interval_ms");

        $r79 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r79.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_suspend_optimizations_enabled");

        $r80 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r80.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_enhanced_auto_join");

        $r81 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r81.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_network_show_rssi");

        $r82 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r82.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_watchdog_on");

        $r75 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r75.<java.util.HashSet: boolean add(java.lang.Object)>("wifi_watchdog_poor_network_test_enabled");

        $r76 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r76.<java.util.HashSet: boolean add(java.lang.Object)>("wimax_networks_available_notification_on");

        $r77 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r77.<java.util.HashSet: boolean add(java.lang.Object)>("package_verifier_enable");

        $r78 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r78.<java.util.HashSet: boolean add(java.lang.Object)>("verifier_timeout");

        $r88 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r88.<java.util.HashSet: boolean add(java.lang.Object)>("verifier_default_response");

        $r87 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r87.<java.util.HashSet: boolean add(java.lang.Object)>("data_stall_alarm_non_aggressive_delay_in_ms");

        $r90 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r90.<java.util.HashSet: boolean add(java.lang.Object)>("data_stall_alarm_aggressive_delay_in_ms");

        $r89 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r89.<java.util.HashSet: boolean add(java.lang.Object)>("gprs_register_check_period_ms");

        $r84 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r84.<java.util.HashSet: boolean add(java.lang.Object)>("wtf_is_fatal");

        $r83 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r83.<java.util.HashSet: boolean add(java.lang.Object)>("battery_discharge_duration_threshold");

        $r86 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r86.<java.util.HashSet: boolean add(java.lang.Object)>("battery_discharge_threshold");

        $r85 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r85.<java.util.HashSet: boolean add(java.lang.Object)>("send_action_app_error");

        $r96 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r96.<java.util.HashSet: boolean add(java.lang.Object)>("dropbox_age_seconds");

        $r95 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r95.<java.util.HashSet: boolean add(java.lang.Object)>("dropbox_max_files");

        $r98 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r98.<java.util.HashSet: boolean add(java.lang.Object)>("dropbox_quota_kb");

        $r97 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r97.<java.util.HashSet: boolean add(java.lang.Object)>("dropbox_quota_percent");

        $r92 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r92.<java.util.HashSet: boolean add(java.lang.Object)>("dropbox_reserve_percent");

        $r91 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r91.<java.util.HashSet: boolean add(java.lang.Object)>("dropbox:");

        $r94 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r94.<java.util.HashSet: boolean add(java.lang.Object)>("logcat_for_");

        $r93 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r93.<java.util.HashSet: boolean add(java.lang.Object)>("sys_free_storage_log_interval");

        $r105 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r105.<java.util.HashSet: boolean add(java.lang.Object)>("disk_free_change_reporting_threshold");

        $r106 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r106.<java.util.HashSet: boolean add(java.lang.Object)>("sys_storage_threshold_percentage");

        $r103 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r103.<java.util.HashSet: boolean add(java.lang.Object)>("sys_storage_threshold_max_bytes");

        $r104 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r104.<java.util.HashSet: boolean add(java.lang.Object)>("sys_storage_full_threshold_bytes");

        $r101 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r101.<java.util.HashSet: boolean add(java.lang.Object)>("sync_max_retry_delay_in_seconds");

        $r102 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r102.<java.util.HashSet: boolean add(java.lang.Object)>("connectivity_change_delay");

        $r99 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r99.<java.util.HashSet: boolean add(java.lang.Object)>("captive_portal_detection_enabled");

        $r100 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r100.<java.util.HashSet: boolean add(java.lang.Object)>("captive_portal_server");

        $r113 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r113.<java.util.HashSet: boolean add(java.lang.Object)>("nsd_on");

        $r114 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r114.<java.util.HashSet: boolean add(java.lang.Object)>("set_install_location");

        $r111 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r111.<java.util.HashSet: boolean add(java.lang.Object)>("default_install_location");

        $r112 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r112.<java.util.HashSet: boolean add(java.lang.Object)>("inet_condition_debounce_up_delay");

        $r109 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r109.<java.util.HashSet: boolean add(java.lang.Object)>("inet_condition_debounce_down_delay");

        $r110 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r110.<java.util.HashSet: boolean add(java.lang.Object)>("read_external_storage_enforced_default");

        $r107 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r107.<java.util.HashSet: boolean add(java.lang.Object)>("http_proxy");

        $r108 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r108.<java.util.HashSet: boolean add(java.lang.Object)>("global_http_proxy_host");

        $r122 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r122.<java.util.HashSet: boolean add(java.lang.Object)>("global_http_proxy_port");

        $r121 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r121.<java.util.HashSet: boolean add(java.lang.Object)>("global_http_proxy_exclusion_list");

        $r120 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r120.<java.util.HashSet: boolean add(java.lang.Object)>("set_global_http_proxy");

        $r119 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r119.<java.util.HashSet: boolean add(java.lang.Object)>("default_dns_server");

        $r118 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r118.<java.util.HashSet: boolean add(java.lang.Object)>("preferred_network_mode");

        $r117 = <android.provider.Settings$Secure: java.util.HashSet MOVED_TO_GLOBAL>;

        virtualinvoke $r117.<java.util.HashSet: boolean add(java.lang.Object)>("webview_data_reduction_proxy_key");

        $r116 = newarray (java.lang.String)[41];

        $r116[0] = "bugreport_in_power_menu";

        $r116[1] = "mock_location";

        $r116[2] = "parental_control_enabled";

        $r116[3] = "parental_control_redirect_url";

        $r116[4] = "usb_mass_storage_enabled";

        $r116[5] = "accessibility_display_magnification_enabled";

        $r116[6] = "accessibility_display_magnification_scale";

        $r116[7] = "accessibility_display_magnification_auto_update";

        $r116[8] = "accessibility_script_injection";

        $r116[9] = "backup_auto_restore";

        $r116[10] = "enabled_accessibility_services";

        $r116[11] = "touch_exploration_granted_accessibility_services";

        $r116[12] = "touch_exploration_enabled";

        $r116[13] = "accessibility_enabled";

        $r116[14] = "speak_password";

        $r116[15] = "high_text_contrast_enabled";

        $r116[16] = "accessibility_captioning_enabled";

        $r116[17] = "accessibility_captioning_locale";

        $r116[18] = "accessibility_captioning_background_color";

        $r116[19] = "accessibility_captioning_foreground_color";

        $r116[20] = "accessibility_captioning_edge_type";

        $r116[21] = "accessibility_captioning_edge_color";

        $r116[22] = "accessibility_captioning_typeface";

        $r116[23] = "accessibility_captioning_font_scale";

        $r116[24] = "tts_use_defaults";

        $r116[25] = "tts_default_rate";

        $r116[26] = "tts_default_pitch";

        $r116[27] = "tts_default_synth";

        $r116[28] = "tts_default_lang";

        $r116[29] = "tts_default_country";

        $r116[30] = "tts_enabled_plugins";

        $r116[31] = "tts_default_locale";

        $r116[32] = "wifi_networks_available_notification_on";

        $r116[33] = "wifi_networks_available_repeat_delay";

        $r116[34] = "wifi_num_open_networks_kept";

        $r116[35] = "mount_play_not_snd";

        $r116[36] = "mount_ums_autostart";

        $r116[37] = "mount_ums_prompt";

        $r116[38] = "mount_ums_notify_enabled";

        $r116[39] = "ui_night_mode";

        $r116[40] = "sleep_timeout";

        <android.provider.Settings$Secure: java.lang.String[] SETTINGS_TO_BACKUP> = $r116;

        $r115 = newarray (java.lang.String)[12];

        $r115[0] = "accessibility_enabled";

        $r115[1] = "mock_location";

        $r115[2] = "allowed_geolocation_origins";

        $r115[3] = "default_input_method";

        $r115[4] = "enabled_accessibility_services";

        $r115[5] = "enabled_input_methods";

        $r115[6] = "location_mode";

        $r115[7] = "location_providers_allowed";

        $r115[8] = "lock_screen_allow_private_notifications";

        $r115[9] = "selected_input_method_subtype";

        $r115[10] = "selected_spell_checker";

        $r115[11] = "selected_spell_checker_subtype";

        <android.provider.Settings$Secure: java.lang.String[] CLONE_TO_MANAGED_PROFILE> = $r115;

        return;
    }
}
