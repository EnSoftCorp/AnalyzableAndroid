public class android.view.View extends java.lang.Object implements android.graphics.drawable.Drawable$Callback, android.view.KeyEvent$Callback, android.view.accessibility.AccessibilityEventSource
{
    private static final boolean DBG;
    protected static final java.lang.String VIEW_LOG_TAG;
    public static final java.lang.String DEBUG_LAYOUT_PROPERTY;
    public static boolean mDebugViewAttributes;
    public static final int NO_ID;
    private static boolean sCompatibilityDone;
    private static boolean sUseBrokenMakeMeasureSpec;
    private static boolean sIgnoreMeasureCache;
    private static final int NOT_FOCUSABLE;
    private static final int FOCUSABLE;
    private static final int FOCUSABLE_MASK;
    private static final int FITS_SYSTEM_WINDOWS;
    public static final int VISIBLE;
    public static final int INVISIBLE;
    public static final int GONE;
    static final int VISIBILITY_MASK;
    private static final int[] VISIBILITY_FLAGS;
    static final int ENABLED;
    static final int DISABLED;
    static final int ENABLED_MASK;
    static final int WILL_NOT_DRAW;
    static final int DRAW_MASK;
    static final int SCROLLBARS_NONE;
    static final int SCROLLBARS_HORIZONTAL;
    static final int SCROLLBARS_VERTICAL;
    static final int SCROLLBARS_MASK;
    static final int FILTER_TOUCHES_WHEN_OBSCURED;
    static final int OPTIONAL_FITS_SYSTEM_WINDOWS;
    static final int FADING_EDGE_NONE;
    static final int FADING_EDGE_HORIZONTAL;
    static final int FADING_EDGE_VERTICAL;
    static final int FADING_EDGE_MASK;
    static final int CLICKABLE;
    static final int DRAWING_CACHE_ENABLED;
    static final int SAVE_DISABLED;
    static final int SAVE_DISABLED_MASK;
    static final int WILL_NOT_CACHE_DRAWING;
    static final int FOCUSABLE_IN_TOUCH_MODE;
    public static final int DRAWING_CACHE_QUALITY_LOW;
    public static final int DRAWING_CACHE_QUALITY_HIGH;
    public static final int DRAWING_CACHE_QUALITY_AUTO;
    private static final int[] DRAWING_CACHE_QUALITY_FLAGS;
    static final int DRAWING_CACHE_QUALITY_MASK;
    static final int LONG_CLICKABLE;
    static final int DUPLICATE_PARENT_STATE;
    public static final int SCROLLBARS_INSIDE_OVERLAY;
    public static final int SCROLLBARS_INSIDE_INSET;
    public static final int SCROLLBARS_OUTSIDE_OVERLAY;
    public static final int SCROLLBARS_OUTSIDE_INSET;
    static final int SCROLLBARS_INSET_MASK;
    static final int SCROLLBARS_OUTSIDE_MASK;
    static final int SCROLLBARS_STYLE_MASK;
    public static final int KEEP_SCREEN_ON;
    public static final int SOUND_EFFECTS_ENABLED;
    public static final int HAPTIC_FEEDBACK_ENABLED;
    static final int PARENT_SAVE_DISABLED;
    static final int PARENT_SAVE_DISABLED_MASK;
    public static final int FOCUSABLES_ALL;
    public static final int FOCUSABLES_TOUCH_MODE;
    public static final int FOCUS_BACKWARD;
    public static final int FOCUS_FORWARD;
    public static final int FOCUS_LEFT;
    public static final int FOCUS_UP;
    public static final int FOCUS_RIGHT;
    public static final int FOCUS_DOWN;
    public static final int MEASURED_SIZE_MASK;
    public static final int MEASURED_STATE_MASK;
    public static final int MEASURED_HEIGHT_STATE_SHIFT;
    public static final int MEASURED_STATE_TOO_SMALL;
    protected static final int[] EMPTY_STATE_SET;
    protected static final int[] ENABLED_STATE_SET;
    protected static final int[] FOCUSED_STATE_SET;
    protected static final int[] SELECTED_STATE_SET;
    protected static final int[] PRESSED_STATE_SET;
    protected static final int[] WINDOW_FOCUSED_STATE_SET;
    protected static final int[] ENABLED_FOCUSED_STATE_SET;
    protected static final int[] ENABLED_SELECTED_STATE_SET;
    protected static final int[] ENABLED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] FOCUSED_SELECTED_STATE_SET;
    protected static final int[] FOCUSED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] ENABLED_FOCUSED_SELECTED_STATE_SET;
    protected static final int[] ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_SELECTED_STATE_SET;
    protected static final int[] PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_FOCUSED_SELECTED_STATE_SET;
    protected static final int[] PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_SELECTED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    private static final int[][] VIEW_STATE_SETS;
    static final int VIEW_STATE_WINDOW_FOCUSED;
    static final int VIEW_STATE_SELECTED;
    static final int VIEW_STATE_FOCUSED;
    static final int VIEW_STATE_ENABLED;
    static final int VIEW_STATE_PRESSED;
    static final int VIEW_STATE_ACTIVATED;
    static final int VIEW_STATE_ACCELERATED;
    static final int VIEW_STATE_HOVERED;
    static final int VIEW_STATE_DRAG_CAN_ACCEPT;
    static final int VIEW_STATE_DRAG_HOVERED;
    static final int[] VIEW_STATE_IDS;
    private static final int POPULATING_ACCESSIBILITY_EVENT_TYPES;
    static final java.lang.ThreadLocal sThreadLocal;
    private android.util.SparseArray mKeyedTags;
    private static int sNextAccessibilityViewId;
    protected android.view.animation.Animation mCurrentAnimation;
    int mMeasuredWidth;
    int mMeasuredHeight;
    boolean mRecreateDisplayList;
    int mID;
    int mAccessibilityViewId;
    private int mAccessibilityCursorPosition;
    android.view.View$SendViewStateChangedAccessibilityEvent mSendViewStateChangedAccessibilityEvent;
    protected java.lang.Object mTag;
    static final int PFLAG_WANTS_FOCUS;
    static final int PFLAG_FOCUSED;
    static final int PFLAG_SELECTED;
    static final int PFLAG_IS_ROOT_NAMESPACE;
    static final int PFLAG_HAS_BOUNDS;
    static final int PFLAG_DRAWN;
    static final int PFLAG_DRAW_ANIMATION;
    static final int PFLAG_SKIP_DRAW;
    static final int PFLAG_ONLY_DRAWS_BACKGROUND;
    static final int PFLAG_REQUEST_TRANSPARENT_REGIONS;
    static final int PFLAG_DRAWABLE_STATE_DIRTY;
    static final int PFLAG_MEASURED_DIMENSION_SET;
    static final int PFLAG_FORCE_LAYOUT;
    static final int PFLAG_LAYOUT_REQUIRED;
    private static final int PFLAG_PRESSED;
    static final int PFLAG_DRAWING_CACHE_VALID;
    static final int PFLAG_ANIMATION_STARTED;
    private static final int PFLAG_SAVE_STATE_CALLED;
    static final int PFLAG_ALPHA_SET;
    static final int PFLAG_SCROLL_CONTAINER;
    static final int PFLAG_SCROLL_CONTAINER_ADDED;
    static final int PFLAG_DIRTY;
    static final int PFLAG_DIRTY_OPAQUE;
    static final int PFLAG_DIRTY_MASK;
    static final int PFLAG_OPAQUE_BACKGROUND;
    static final int PFLAG_OPAQUE_SCROLLBARS;
    static final int PFLAG_OPAQUE_MASK;
    private static final int PFLAG_PREPRESSED;
    static final int PFLAG_CANCEL_NEXT_UP_EVENT;
    private static final int PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH;
    private static final int PFLAG_HOVERED;
    private static final int PFLAG_DOES_NOTHING_REUSE_PLEASE;
    static final int PFLAG_ACTIVATED;
    static final int PFLAG_INVALIDATED;
    static final int PFLAG2_DRAG_CAN_ACCEPT;
    static final int PFLAG2_DRAG_HOVERED;
    public static final int LAYOUT_DIRECTION_LTR;
    public static final int LAYOUT_DIRECTION_RTL;
    public static final int LAYOUT_DIRECTION_INHERIT;
    public static final int LAYOUT_DIRECTION_LOCALE;
    static final int PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT;
    static final int PFLAG2_LAYOUT_DIRECTION_MASK;
    static final int PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL;
    static final int PFLAG2_LAYOUT_DIRECTION_RESOLVED;
    static final int PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK;
    private static final int[] LAYOUT_DIRECTION_FLAGS;
    private static final int LAYOUT_DIRECTION_DEFAULT;
    static final int LAYOUT_DIRECTION_RESOLVED_DEFAULT;
    public static final int TEXT_DIRECTION_INHERIT;
    public static final int TEXT_DIRECTION_FIRST_STRONG;
    public static final int TEXT_DIRECTION_ANY_RTL;
    public static final int TEXT_DIRECTION_LTR;
    public static final int TEXT_DIRECTION_RTL;
    public static final int TEXT_DIRECTION_LOCALE;
    private static final int TEXT_DIRECTION_DEFAULT;
    static final int TEXT_DIRECTION_RESOLVED_DEFAULT;
    static final int PFLAG2_TEXT_DIRECTION_MASK_SHIFT;
    static final int PFLAG2_TEXT_DIRECTION_MASK;
    private static final int[] PFLAG2_TEXT_DIRECTION_FLAGS;
    static final int PFLAG2_TEXT_DIRECTION_RESOLVED;
    static final int PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT;
    static final int PFLAG2_TEXT_DIRECTION_RESOLVED_MASK;
    static final int PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
    public static final int TEXT_ALIGNMENT_INHERIT;
    public static final int TEXT_ALIGNMENT_GRAVITY;
    public static final int TEXT_ALIGNMENT_TEXT_START;
    public static final int TEXT_ALIGNMENT_TEXT_END;
    public static final int TEXT_ALIGNMENT_CENTER;
    public static final int TEXT_ALIGNMENT_VIEW_START;
    public static final int TEXT_ALIGNMENT_VIEW_END;
    private static final int TEXT_ALIGNMENT_DEFAULT;
    static final int TEXT_ALIGNMENT_RESOLVED_DEFAULT;
    static final int PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT;
    static final int PFLAG2_TEXT_ALIGNMENT_MASK;
    private static final int[] PFLAG2_TEXT_ALIGNMENT_FLAGS;
    static final int PFLAG2_TEXT_ALIGNMENT_RESOLVED;
    static final int PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT;
    static final int PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK;
    private static final int PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
    static final int PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_AUTO;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_YES;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_NO;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS;
    static final int IMPORTANT_FOR_ACCESSIBILITY_DEFAULT;
    static final int PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK;
    static final int PFLAG2_ACCESSIBILITY_LIVE_REGION_SHIFT;
    public static final int ACCESSIBILITY_LIVE_REGION_NONE;
    public static final int ACCESSIBILITY_LIVE_REGION_POLITE;
    public static final int ACCESSIBILITY_LIVE_REGION_ASSERTIVE;
    static final int ACCESSIBILITY_LIVE_REGION_DEFAULT;
    static final int PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK;
    static final int PFLAG2_ACCESSIBILITY_FOCUSED;
    static final int PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED;
    static final int PFLAG2_VIEW_QUICK_REJECTED;
    static final int PFLAG2_PADDING_RESOLVED;
    static final int PFLAG2_DRAWABLE_RESOLVED;
    static final int PFLAG2_HAS_TRANSIENT_STATE;
    static final int ALL_RTL_PROPERTIES_RESOLVED;
    static final int PFLAG3_VIEW_IS_ANIMATING_TRANSFORM;
    static final int PFLAG3_VIEW_IS_ANIMATING_ALPHA;
    static final int PFLAG3_IS_LAID_OUT;
    static final int PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;
    static final int PFLAG3_CALLED_SUPER;
    static final int PFLAG3_APPLYING_INSETS;
    static final int PFLAG3_FITTING_SYSTEM_WINDOWS;
    static final int PFLAG3_NESTED_SCROLLING_ENABLED;
    static final int PFLAG3_OUTLINE_INVALID;
    static final int DRAG_MASK;
    public static final int OVER_SCROLL_ALWAYS;
    public static final int OVER_SCROLL_IF_CONTENT_SCROLLS;
    public static final int OVER_SCROLL_NEVER;
    public static final int SYSTEM_UI_FLAG_VISIBLE;
    public static final int SYSTEM_UI_FLAG_LOW_PROFILE;
    public static final int SYSTEM_UI_FLAG_HIDE_NAVIGATION;
    public static final int SYSTEM_UI_FLAG_FULLSCREEN;
    public static final int SYSTEM_UI_FLAG_LAYOUT_STABLE;
    public static final int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;
    public static final int SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;
    public static final int SYSTEM_UI_FLAG_IMMERSIVE;
    public static final int SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
    public static final int STATUS_BAR_HIDDEN;
    public static final int STATUS_BAR_VISIBLE;
    public static final int STATUS_BAR_DISABLE_EXPAND;
    public static final int STATUS_BAR_DISABLE_NOTIFICATION_ICONS;
    public static final int STATUS_BAR_DISABLE_NOTIFICATION_ALERTS;
    public static final int STATUS_BAR_DISABLE_NOTIFICATION_TICKER;
    public static final int STATUS_BAR_DISABLE_SYSTEM_INFO;
    public static final int STATUS_BAR_DISABLE_HOME;
    public static final int STATUS_BAR_DISABLE_BACK;
    public static final int STATUS_BAR_DISABLE_CLOCK;
    public static final int STATUS_BAR_DISABLE_RECENT;
    public static final int STATUS_BAR_DISABLE_SEARCH;
    public static final int STATUS_BAR_TRANSIENT;
    public static final int NAVIGATION_BAR_TRANSIENT;
    public static final int STATUS_BAR_UNHIDE;
    public static final int NAVIGATION_BAR_UNHIDE;
    public static final int STATUS_BAR_TRANSLUCENT;
    public static final int NAVIGATION_BAR_TRANSLUCENT;
    public static final int RECENT_APPS_VISIBLE;
    public static final int SYSTEM_UI_TRANSPARENT;
    public static final int PUBLIC_STATUS_BAR_VISIBILITY_MASK;
    public static final int SYSTEM_UI_CLEARABLE_FLAGS;
    public static final int SYSTEM_UI_LAYOUT_FLAGS;
    public static final int FIND_VIEWS_WITH_TEXT;
    public static final int FIND_VIEWS_WITH_CONTENT_DESCRIPTION;
    public static final int FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS;
    public static final int ACCESSIBILITY_CURSOR_POSITION_UNDEFINED;
    public static final int SCREEN_STATE_OFF;
    public static final int SCREEN_STATE_ON;
    public static final int SCROLL_AXIS_NONE;
    public static final int SCROLL_AXIS_HORIZONTAL;
    public static final int SCROLL_AXIS_VERTICAL;
    private int mOverScrollMode;
    protected android.view.ViewParent mParent;
    android.view.View$AttachInfo mAttachInfo;
    int mPrivateFlags;
    int mPrivateFlags2;
    int mPrivateFlags3;
    int mSystemUiVisibility;
    int mTransientStateCount;
    int mWindowAttachCount;
    protected android.view.ViewGroup$LayoutParams mLayoutParams;
    int mViewFlags;
    android.view.View$TransformationInfo mTransformationInfo;
    android.graphics.Rect mClipBounds;
    private boolean mLastIsOpaque;
    protected int mLeft;
    protected int mRight;
    protected int mTop;
    protected int mBottom;
    protected int mScrollX;
    protected int mScrollY;
    protected int mPaddingLeft;
    protected int mPaddingRight;
    protected int mPaddingTop;
    protected int mPaddingBottom;
    private android.graphics.Insets mLayoutInsets;
    private java.lang.CharSequence mContentDescription;
    private int mLabelForId;
    private android.view.View$MatchLabelForPredicate mMatchLabelForPredicate;
    private android.view.View$MatchIdPredicate mMatchIdPredicate;
    protected int mUserPaddingRight;
    protected int mUserPaddingBottom;
    protected int mUserPaddingLeft;
    int mUserPaddingStart;
    int mUserPaddingEnd;
    int mUserPaddingLeftInitial;
    int mUserPaddingRightInitial;
    private static final int UNDEFINED_PADDING;
    private boolean mLeftPaddingDefined;
    private boolean mRightPaddingDefined;
    int mOldWidthMeasureSpec;
    int mOldHeightMeasureSpec;
    private android.util.LongSparseLongArray mMeasureCache;
    private android.graphics.drawable.Drawable mBackground;
    private android.view.View$TintInfo mBackgroundTint;
    private android.view.RenderNode mBackgroundRenderNode;
    private int mBackgroundResource;
    private boolean mBackgroundSizeChanged;
    private java.lang.String mTransitionName;
    android.view.View$ListenerInfo mListenerInfo;
    protected android.content.Context mContext;
    private final android.content.res.Resources mResources;
    private android.view.View$ScrollabilityCache mScrollCache;
    private int[] mDrawableState;
    android.view.ViewOutlineProvider mOutlineProvider;
    private android.animation.StateListAnimator mStateListAnimator;
    private int mNextFocusLeftId;
    private int mNextFocusRightId;
    private int mNextFocusUpId;
    private int mNextFocusDownId;
    int mNextFocusForwardId;
    private android.view.View$CheckForLongPress mPendingCheckForLongPress;
    private android.view.View$CheckForTap mPendingCheckForTap;
    private android.view.View$PerformClick mPerformClick;
    private android.view.View$SendViewScrolledAccessibilityEvent mSendViewScrolledAccessibilityEvent;
    private android.view.View$UnsetPressedState mUnsetPressedState;
    private boolean mHasPerformedLongPress;
    private int mMinHeight;
    private int mMinWidth;
    private android.view.TouchDelegate mTouchDelegate;
    private int mDrawingCacheBackgroundColor;
    private android.view.ViewTreeObserver mFloatingTreeObserver;
    private int mTouchSlop;
    private android.view.ViewPropertyAnimator mAnimator;
    public static final int DRAG_FLAG_GLOBAL;
    private float mVerticalScrollFactor;
    private int mVerticalScrollbarPosition;
    public static final int SCROLLBAR_POSITION_DEFAULT;
    public static final int SCROLLBAR_POSITION_LEFT;
    public static final int SCROLLBAR_POSITION_RIGHT;
    public static final int LAYER_TYPE_NONE;
    public static final int LAYER_TYPE_SOFTWARE;
    public static final int LAYER_TYPE_HARDWARE;
    int mLayerType;
    android.graphics.Paint mLayerPaint;
    public boolean mCachingFailed;
    private android.graphics.Bitmap mDrawingCache;
    private android.graphics.Bitmap mUnscaledDrawingCache;
    final android.view.RenderNode mRenderNode;
    private boolean mSendingHoverAccessibilityEvents;
    android.view.View$AccessibilityDelegate mAccessibilityDelegate;
    android.view.ViewOverlay mOverlay;
    private android.view.ViewParent mNestedScrollingParent;
    protected final android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier;
    private static final java.util.concurrent.atomic.AtomicInteger sNextGeneratedId;
    private int[] mTempNestedScrollConsumed;
    android.view.GhostView mGhostView;
    public java.lang.String[] mAttributes;
    private static android.util.SparseArray mAttributeMap;
    private static final int PROVIDER_BACKGROUND;
    private static final int PROVIDER_NONE;
    private static final int PROVIDER_BOUNDS;
    private static final int PROVIDER_PADDED_BOUNDS;
    public static final android.util.Property ALPHA;
    public static final android.util.Property TRANSLATION_X;
    public static final android.util.Property TRANSLATION_Y;
    public static final android.util.Property TRANSLATION_Z;
    public static final android.util.Property X;
    public static final android.util.Property Y;
    public static final android.util.Property Z;
    public static final android.util.Property ROTATION;
    public static final android.util.Property ROTATION_X;
    public static final android.util.Property ROTATION_Y;
    public static final android.util.Property SCALE_X;
    public static final android.util.Property SCALE_Y;

    public void <init>(android.content.Context)
    {
        android.view.View r0;
        android.content.Context r1;
        int i0, $i1;
        android.view.ViewOutlineProvider $r2;
        boolean $z0, $z1, $z2, $z3;
        android.view.ViewConfiguration $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        android.view.RenderNode $r6;
        android.content.pm.ApplicationInfo $r7;
        android.content.res.Resources $r8;
        android.view.InputEventConsistencyVerifier $r9;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.View: android.view.animation.Animation mCurrentAnimation> = null;

        r0.<android.view.View: boolean mRecreateDisplayList> = 0;

        r0.<android.view.View: int mID> = -1;

        r0.<android.view.View: int mAccessibilityViewId> = -1;

        r0.<android.view.View: int mAccessibilityCursorPosition> = -1;

        r0.<android.view.View: java.lang.Object mTag> = null;

        r0.<android.view.View: int mTransientStateCount> = 0;

        r0.<android.view.View: android.graphics.Rect mClipBounds> = null;

        r0.<android.view.View: int mPaddingLeft> = 0;

        r0.<android.view.View: int mPaddingRight> = 0;

        r0.<android.view.View: int mLabelForId> = -1;

        r0.<android.view.View: boolean mLeftPaddingDefined> = 0;

        r0.<android.view.View: boolean mRightPaddingDefined> = 0;

        r0.<android.view.View: int mOldWidthMeasureSpec> = -2147483648;

        r0.<android.view.View: int mOldHeightMeasureSpec> = -2147483648;

        r0.<android.view.View: int[] mDrawableState> = null;

        $r2 = <android.view.ViewOutlineProvider: android.view.ViewOutlineProvider BACKGROUND>;

        r0.<android.view.View: android.view.ViewOutlineProvider mOutlineProvider> = $r2;

        r0.<android.view.View: int mNextFocusLeftId> = -1;

        r0.<android.view.View: int mNextFocusRightId> = -1;

        r0.<android.view.View: int mNextFocusUpId> = -1;

        r0.<android.view.View: int mNextFocusDownId> = -1;

        r0.<android.view.View: int mNextFocusForwardId> = -1;

        r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap> = null;

        r0.<android.view.View: android.view.TouchDelegate mTouchDelegate> = null;

        r0.<android.view.View: int mDrawingCacheBackgroundColor> = 0;

        r0.<android.view.View: android.view.ViewPropertyAnimator mAnimator> = null;

        r0.<android.view.View: int mLayerType> = 0;

        $z0 = staticinvoke <android.view.InputEventConsistencyVerifier: boolean isInstrumentationEnabled()>();

        if $z0 == 0 goto label1;

        $r9 = new android.view.InputEventConsistencyVerifier;

        specialinvoke $r9.<android.view.InputEventConsistencyVerifier: void <init>(java.lang.Object,int)>(r0, 0);

        goto label2;

     label1:
        $r9 = null;

     label2:
        r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier> = $r9;

        r0.<android.view.View: android.content.Context mContext> = r1;

        if r1 == null goto label3;

        $r8 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        goto label4;

     label3:
        $r8 = null;

     label4:
        r0.<android.view.View: android.content.res.Resources mResources> = $r8;

        r0.<android.view.View: int mViewFlags> = 402653184;

        r0.<android.view.View: int mPrivateFlags2> = 140296;

        $r3 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r1);

        $i1 = virtualinvoke $r3.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        r0.<android.view.View: int mTouchSlop> = $i1;

        virtualinvoke r0.<android.view.View: void setOverScrollMode(int)>(1);

        r0.<android.view.View: int mUserPaddingStart> = -2147483648;

        r0.<android.view.View: int mUserPaddingEnd> = -2147483648;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = staticinvoke <android.view.RenderNode: android.view.RenderNode create(java.lang.String,android.view.View)>($r5, r0);

        r0.<android.view.View: android.view.RenderNode mRenderNode> = $r6;

        $z1 = <android.view.View: boolean sCompatibilityDone>;

        if $z1 != 0 goto label9;

        if r1 == null goto label9;

        $r7 = virtualinvoke r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i0 = $r7.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if i0 > 17 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        <android.view.View: boolean sUseBrokenMakeMeasureSpec> = $z3;

        if i0 >= 19 goto label7;

        $z2 = 1;

        goto label8;

     label7:
        $z2 = 0;

     label8:
        <android.view.View: boolean sIgnoreMeasureCache> = $z2;

        <android.view.View: boolean sCompatibilityDone> = 1;

     label9:
        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.view.View r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.view.View r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.view.View r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74;
        android.content.res.TypedArray r3;
        android.graphics.drawable.Drawable r4;
        boolean z0, z1, z2, z3, z4, z5, z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, z30;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, $f9, $f10, $f11;
        java.lang.String r5, $r17, $r25;
        int[] $r6, $r20, $r21, $r22, $r26, $r27;
        android.content.pm.ApplicationInfo $r7;
        android.view.View$TintInfo $r8, $r9, $r10, $r11, $r13, $r15, $r16, $r18;
        android.content.res.ColorStateList $r12;
        android.graphics.PorterDuff$Mode $r14;
        android.animation.StateListAnimator $r19;
        android.view.View$1 $r23;
        java.lang.IllegalStateException $r24;
        java.lang.CharSequence $r28;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context)>(r1);

        $r6 = <com.android.internal.R$styleable: int[] View>;

        r3 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r2, $r6, i0, i1);

        $z7 = <android.view.View: boolean mDebugViewAttributes>;

        if $z7 == 0 goto label001;

        specialinvoke r0.<android.view.View: void saveAttributeData(android.util.AttributeSet,android.content.res.TypedArray)>(r2, r3);

     label001:
        r4 = null;

        i2 = -1;

        i3 = -1;

        i4 = -1;

        i5 = -1;

        i6 = -2147483648;

        i7 = -2147483648;

        i8 = -1;

        i9 = 0;

        i10 = 0;

        z0 = 0;

        i11 = 0;

        i12 = 0;

        f0 = 0.0F;

        f2 = 0.0F;

        f1 = 0.0F;

        f4 = 0.0F;

        f3 = 0.0F;

        f6 = 0.0F;

        f5 = 0.0F;

        f8 = 1.0F;

        f7 = 1.0F;

        z1 = 0;

        i13 = 0;

        i14 = r0.<android.view.View: int mOverScrollMode>;

        z2 = 0;

        z5 = 0;

        z6 = 0;

        z3 = 0;

        z4 = 0;

        $r7 = virtualinvoke r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i17 = $r7.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        i18 = virtualinvoke r3.<android.content.res.TypedArray: int getIndexCount()>();

        i15 = 0;

     label002:
        if i15 >= i18 goto label079;

        i16 = virtualinvoke r3.<android.content.res.TypedArray: int getIndex(int)>(i15);

        tableswitch(i16)
        {
            case 8: goto label050;
            case 9: goto label029;
            case 10: goto label030;
            case 11: goto label015;
            case 12: goto label016;
            case 13: goto label003;
            case 14: goto label004;
            case 15: goto label005;
            case 16: goto label006;
            case 17: goto label007;
            case 18: goto label008;
            case 19: goto label032;
            case 20: goto label033;
            case 21: goto label038;
            case 22: goto label031;
            case 23: goto label047;
            case 24: goto label048;
            case 25: goto label078;
            case 26: goto label054;
            case 27: goto label055;
            case 28: goto label056;
            case 29: goto label057;
            case 30: goto label034;
            case 31: goto label035;
            case 32: goto label036;
            case 33: goto label042;
            case 34: goto label037;
            case 35: goto label059;
            case 36: goto label060;
            case 37: goto label045;
            case 38: goto label052;
            case 39: goto label051;
            case 40: goto label046;
            case 41: goto label061;
            case 42: goto label043;
            case 43: goto label078;
            case 44: goto label078;
            case 45: goto label078;
            case 46: goto label063;
            case 47: goto label053;
            case 48: goto label017;
            case 49: goto label018;
            case 50: goto label019;
            case 51: goto label020;
            case 52: goto label021;
            case 53: goto label027;
            case 54: goto label028;
            case 55: goto label024;
            case 56: goto label025;
            case 57: goto label026;
            case 58: goto label064;
            case 59: goto label058;
            case 60: goto label065;
            case 61: goto label049;
            case 62: goto label068;
            case 63: goto label066;
            case 64: goto label067;
            case 65: goto label039;
            case 66: goto label009;
            case 67: goto label012;
            case 68: goto label044;
            case 69: goto label069;
            case 70: goto label022;
            case 71: goto label070;
            case 72: goto label071;
            case 73: goto label023;
            case 74: goto label072;
            case 75: goto label073;
            case 76: goto label075;
            case 77: goto label077;
            default: goto label078;
        };

     label003:
        r4 = virtualinvoke r3.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(i16);

        goto label078;

     label004:
        i8 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i16, -1);

        r0.<android.view.View: int mUserPaddingLeftInitial> = i8;

        r0.<android.view.View: int mUserPaddingRightInitial> = i8;

        z3 = 1;

        z4 = 1;

        goto label078;

     label005:
        i2 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i16, -1);

        r0.<android.view.View: int mUserPaddingLeftInitial> = i2;

        z3 = 1;

        goto label078;

     label006:
        i3 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i16, -1);

        goto label078;

     label007:
        i4 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i16, -1);

        r0.<android.view.View: int mUserPaddingRightInitial> = i4;

        z4 = 1;

        goto label078;

     label008:
        i5 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i16, -1);

        goto label078;

     label009:
        i6 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i16, -2147483648);

        if i6 == -2147483648 goto label010;

        $z15 = 1;

        goto label011;

     label010:
        $z15 = 0;

     label011:
        z5 = $z15;

        goto label078;

     label012:
        i7 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i16, -2147483648);

        if i7 == -2147483648 goto label013;

        $z16 = 1;

        goto label014;

     label013:
        $z16 = 0;

     label014:
        z6 = $z16;

        goto label078;

     label015:
        i11 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i16, 0);

        goto label078;

     label016:
        i12 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i16, 0);

        goto label078;

     label017:
        $f10 = virtualinvoke r3.<android.content.res.TypedArray: float getFloat(int,float)>(i16, 1.0F);

        virtualinvoke r0.<android.view.View: void setAlpha(float)>($f10);

        goto label078;

     label018:
        $i65 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i16, 0);

        $f11 = (float) $i65;

        virtualinvoke r0.<android.view.View: void setPivotX(float)>($f11);

        goto label078;

     label019:
        $i61 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i16, 0);

        $f9 = (float) $i61;

        virtualinvoke r0.<android.view.View: void setPivotY(float)>($f9);

        goto label078;

     label020:
        $i62 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i16, 0);

        f0 = (float) $i62;

        z1 = 1;

        goto label078;

     label021:
        $i63 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i16, 0);

        f2 = (float) $i63;

        z1 = 1;

        goto label078;

     label022:
        $i37 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i16, 0);

        f1 = (float) $i37;

        z1 = 1;

        goto label078;

     label023:
        $i39 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i16, 0);

        f4 = (float) $i39;

        z1 = 1;

        goto label078;

     label024:
        f3 = virtualinvoke r3.<android.content.res.TypedArray: float getFloat(int,float)>(i16, 0.0F);

        z1 = 1;

        goto label078;

     label025:
        f6 = virtualinvoke r3.<android.content.res.TypedArray: float getFloat(int,float)>(i16, 0.0F);

        z1 = 1;

        goto label078;

     label026:
        f5 = virtualinvoke r3.<android.content.res.TypedArray: float getFloat(int,float)>(i16, 0.0F);

        z1 = 1;

        goto label078;

     label027:
        f8 = virtualinvoke r3.<android.content.res.TypedArray: float getFloat(int,float)>(i16, 1.0F);

        z1 = 1;

        goto label078;

     label028:
        f7 = virtualinvoke r3.<android.content.res.TypedArray: float getFloat(int,float)>(i16, 1.0F);

        z1 = 1;

        goto label078;

     label029:
        $i72 = virtualinvoke r3.<android.content.res.TypedArray: int getResourceId(int,int)>(i16, -1);

        r0.<android.view.View: int mID> = $i72;

        goto label078;

     label030:
        $r28 = virtualinvoke r3.<android.content.res.TypedArray: java.lang.CharSequence getText(int)>(i16);

        r0.<android.view.View: java.lang.Object mTag> = $r28;

        goto label078;

     label031:
        $z23 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i16, 0);

        if $z23 == 0 goto label078;

        i9 = i9 | 2;

        i10 = i10 | 2;

        goto label078;

     label032:
        $z28 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i16, 0);

        if $z28 == 0 goto label078;

        i9 = i9 | 1;

        i10 = i10 | 1;

        goto label078;

     label033:
        $z29 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i16, 0);

        if $z29 == 0 goto label078;

        i9 = i9 | 262145;

        i10 = i10 | 262145;

        goto label078;

     label034:
        $z27 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i16, 0);

        if $z27 == 0 goto label078;

        i9 = i9 | 16384;

        i10 = i10 | 16384;

        goto label078;

     label035:
        $z26 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i16, 0);

        if $z26 == 0 goto label078;

        i9 = i9 | 2097152;

        i10 = i10 | 2097152;

        goto label078;

     label036:
        $z25 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i16, 1);

        if $z25 != 0 goto label078;

        i9 = i9 | 65536;

        i10 = i10 | 65536;

        goto label078;

     label037:
        $z24 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i16, 0);

        if $z24 == 0 goto label078;

        i9 = i9 | 4194304;

        i10 = i10 | 4194304;

        goto label078;

     label038:
        i21 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i16, 0);

        if i21 == 0 goto label078;

        $r26 = <android.view.View: int[] VISIBILITY_FLAGS>;

        $i74 = $r26[i21];

        i9 = i9 | $i74;

        i10 = i10 | 12;

        goto label078;

     label039:
        $i40 = r0.<android.view.View: int mPrivateFlags2>;

        $i41 = $i40 & -61;

        r0.<android.view.View: int mPrivateFlags2> = $i41;

        i22 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i16, -1);

        if i22 == -1 goto label040;

        $r20 = <android.view.View: int[] LAYOUT_DIRECTION_FLAGS>;

        $i44 = $r20[i22];

        goto label041;

     label040:
        $i44 = 2;

     label041:
        i19 = $i44;

        $i48 = r0.<android.view.View: int mPrivateFlags2>;

        $i47 = i19 << 2;

        $i46 = $i48 | $i47;

        r0.<android.view.View: int mPrivateFlags2> = $i46;

        goto label078;

     label042:
        i20 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i16, 0);

        if i20 == 0 goto label078;

        $r27 = <android.view.View: int[] DRAWING_CACHE_QUALITY_FLAGS>;

        $i71 = $r27[i20];

        i9 = i9 | $i71;

        i10 = i10 | 1572864;

        goto label078;

     label043:
        $r25 = virtualinvoke r3.<android.content.res.TypedArray: java.lang.String getString(int)>(i16);

        virtualinvoke r0.<android.view.View: void setContentDescription(java.lang.CharSequence)>($r25);

        goto label078;

     label044:
        $i42 = virtualinvoke r3.<android.content.res.TypedArray: int getResourceId(int,int)>(i16, -1);

        virtualinvoke r0.<android.view.View: void setLabelFor(int)>($i42);

        goto label078;

     label045:
        $z20 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i16, 1);

        if $z20 != 0 goto label078;

        i9 = i9 & -134217729;

        i10 = i10 | 134217728;

        goto label078;

     label046:
        $z17 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i16, 1);

        if $z17 != 0 goto label078;

        i9 = i9 & -268435457;

        i10 = i10 | 268435456;

        goto label078;

     label047:
        i24 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i16, 0);

        if i24 == 0 goto label078;

        i9 = i9 | i24;

        i10 = i10 | 768;

        z2 = 1;

        goto label078;

     label048:
        if i17 < 14 goto label049;

        goto label078;

     label049:
        i25 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i16, 0);

        if i25 == 0 goto label078;

        i9 = i9 | i25;

        i10 = i10 | 12288;

        virtualinvoke r0.<android.view.View: void initializeFadingEdgeInternal(android.content.res.TypedArray)>(r3);

        goto label078;

     label050:
        i13 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i16, 0);

        if i13 == 0 goto label078;

        $i73 = i13 & 50331648;

        i9 = i9 | $i73;

        i10 = i10 | 50331648;

        goto label078;

     label051:
        z0 = 1;

        $z19 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i16, 0);

        if $z19 == 0 goto label078;

        virtualinvoke r0.<android.view.View: void setScrollContainer(boolean)>(1);

        goto label078;

     label052:
        $z18 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i16, 0);

        if $z18 == 0 goto label078;

        i9 = i9 | 67108864;

        i10 = i10 | 67108864;

        goto label078;

     label053:
        $z21 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i16, 0);

        if $z21 == 0 goto label078;

        i9 = i9 | 1024;

        i10 = i10 | 1024;

        goto label078;

     label054:
        $i69 = virtualinvoke r3.<android.content.res.TypedArray: int getResourceId(int,int)>(i16, -1);

        r0.<android.view.View: int mNextFocusLeftId> = $i69;

        goto label078;

     label055:
        $i68 = virtualinvoke r3.<android.content.res.TypedArray: int getResourceId(int,int)>(i16, -1);

        r0.<android.view.View: int mNextFocusRightId> = $i68;

        goto label078;

     label056:
        $i67 = virtualinvoke r3.<android.content.res.TypedArray: int getResourceId(int,int)>(i16, -1);

        r0.<android.view.View: int mNextFocusUpId> = $i67;

        goto label078;

     label057:
        $i66 = virtualinvoke r3.<android.content.res.TypedArray: int getResourceId(int,int)>(i16, -1);

        r0.<android.view.View: int mNextFocusDownId> = $i66;

        goto label078;

     label058:
        $i55 = virtualinvoke r3.<android.content.res.TypedArray: int getResourceId(int,int)>(i16, -1);

        r0.<android.view.View: int mNextFocusForwardId> = $i55;

        goto label078;

     label059:
        $i70 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i16, 0);

        r0.<android.view.View: int mMinWidth> = $i70;

        goto label078;

     label060:
        $i64 = virtualinvoke r3.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i16, 0);

        r0.<android.view.View: int mMinHeight> = $i64;

        goto label078;

     label061:
        $z22 = virtualinvoke r1.<android.content.Context: boolean isRestricted()>();

        if $z22 == 0 goto label062;

        $r24 = new java.lang.IllegalStateException;

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The android:onClick attribute cannot be used within a restricted context");

        throw $r24;

     label062:
        r5 = virtualinvoke r3.<android.content.res.TypedArray: java.lang.String getString(int)>(i16);

        if r5 == null goto label078;

        $r23 = new android.view.View$1;

        specialinvoke $r23.<android.view.View$1: void <init>(android.view.View,java.lang.String)>(r0, r5);

        virtualinvoke r0.<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>($r23);

        goto label078;

     label063:
        i14 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i16, 1);

        goto label078;

     label064:
        $i54 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i16, 0);

        r0.<android.view.View: int mVerticalScrollbarPosition> = $i54;

        goto label078;

     label065:
        $i56 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i16, 0);

        virtualinvoke r0.<android.view.View: void setLayerType(int,android.graphics.Paint)>($i56, null);

        goto label078;

     label066:
        $i49 = r0.<android.view.View: int mPrivateFlags2>;

        $i50 = $i49 & -449;

        r0.<android.view.View: int mPrivateFlags2> = $i50;

        i23 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i16, -1);

        if i23 == -1 goto label078;

        $i59 = r0.<android.view.View: int mPrivateFlags2>;

        $r21 = <android.view.View: int[] PFLAG2_TEXT_DIRECTION_FLAGS>;

        $i60 = $r21[i23];

        $i58 = $i59 | $i60;

        r0.<android.view.View: int mPrivateFlags2> = $i58;

        goto label078;

     label067:
        $i45 = r0.<android.view.View: int mPrivateFlags2>;

        $i43 = $i45 & -57345;

        r0.<android.view.View: int mPrivateFlags2> = $i43;

        i26 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i16, 1);

        $i51 = r0.<android.view.View: int mPrivateFlags2>;

        $r22 = <android.view.View: int[] PFLAG2_TEXT_ALIGNMENT_FLAGS>;

        $i53 = $r22[i26];

        $i52 = $i51 | $i53;

        r0.<android.view.View: int mPrivateFlags2> = $i52;

        goto label078;

     label068:
        $i57 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i16, 0);

        virtualinvoke r0.<android.view.View: void setImportantForAccessibility(int)>($i57);

        goto label078;

     label069:
        $i36 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i16, 0);

        virtualinvoke r0.<android.view.View: void setAccessibilityLiveRegion(int)>($i36);

        goto label078;

     label070:
        $r17 = virtualinvoke r3.<android.content.res.TypedArray: java.lang.String getString(int)>(i16);

        virtualinvoke r0.<android.view.View: void setTransitionName(java.lang.String)>($r17);

        goto label078;

     label071:
        $z14 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i16, 0);

        virtualinvoke r0.<android.view.View: void setNestedScrollingEnabled(boolean)>($z14);

        goto label078;

     label072:
        $i38 = virtualinvoke r3.<android.content.res.TypedArray: int getResourceId(int,int)>(i16, 0);

        $r19 = staticinvoke <android.animation.AnimatorInflater: android.animation.StateListAnimator loadStateListAnimator(android.content.Context,int)>(r1, $i38);

        virtualinvoke r0.<android.view.View: void setStateListAnimator(android.animation.StateListAnimator)>($r19);

        goto label078;

     label073:
        $r10 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if $r10 != null goto label074;

        $r18 = new android.view.View$TintInfo;

        specialinvoke $r18.<android.view.View$TintInfo: void <init>(android.view.View$1)>(null);

        r0.<android.view.View: android.view.View$TintInfo mBackgroundTint> = $r18;

     label074:
        $r11 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r12 = virtualinvoke r3.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(75);

        $r11.<android.view.View$TintInfo: android.content.res.ColorStateList mTintList> = $r12;

        $r13 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r13.<android.view.View$TintInfo: boolean mHasTintList> = 1;

        goto label078;

     label075:
        $r8 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if $r8 != null goto label076;

        $r16 = new android.view.View$TintInfo;

        specialinvoke $r16.<android.view.View$TintInfo: void <init>(android.view.View$1)>(null);

        r0.<android.view.View: android.view.View$TintInfo mBackgroundTint> = $r16;

     label076:
        $r9 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $i35 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(76, -1);

        $r14 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode)>($i35, null);

        $r9.<android.view.View$TintInfo: android.graphics.PorterDuff$Mode mTintMode> = $r14;

        $r15 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r15.<android.view.View$TintInfo: boolean mHasTintMode> = 1;

        goto label078;

     label077:
        $i32 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(77, 0);

        specialinvoke r0.<android.view.View: void setOutlineProviderFromAttribute(int)>($i32);

     label078:
        i15 = i15 + 1;

        goto label002;

     label079:
        virtualinvoke r0.<android.view.View: void setOverScrollMode(int)>(i14);

        r0.<android.view.View: int mUserPaddingStart> = i6;

        r0.<android.view.View: int mUserPaddingEnd> = i7;

        if r4 == null goto label080;

        virtualinvoke r0.<android.view.View: void setBackground(android.graphics.drawable.Drawable)>(r4);

     label080:
        r0.<android.view.View: boolean mLeftPaddingDefined> = z3;

        r0.<android.view.View: boolean mRightPaddingDefined> = z4;

        if i8 < 0 goto label081;

        i2 = i8;

        i3 = i8;

        i4 = i8;

        i5 = i8;

        r0.<android.view.View: int mUserPaddingLeftInitial> = i8;

        r0.<android.view.View: int mUserPaddingRightInitial> = i8;

     label081:
        $z9 = specialinvoke r0.<android.view.View: boolean isRtlCompatibilityMode()>();

        if $z9 == 0 goto label088;

        $z11 = r0.<android.view.View: boolean mLeftPaddingDefined>;

        if $z11 != 0 goto label082;

        if z5 == 0 goto label082;

        i2 = i6;

     label082:
        if i2 < 0 goto label083;

        $i33 = i2;

        goto label084;

     label083:
        $i33 = r0.<android.view.View: int mUserPaddingLeftInitial>;

     label084:
        r0.<android.view.View: int mUserPaddingLeftInitial> = $i33;

        $z13 = r0.<android.view.View: boolean mRightPaddingDefined>;

        if $z13 != 0 goto label085;

        if z6 == 0 goto label085;

        i4 = i7;

     label085:
        if i4 < 0 goto label086;

        $i34 = i4;

        goto label087;

     label086:
        $i34 = r0.<android.view.View: int mUserPaddingRightInitial>;

     label087:
        r0.<android.view.View: int mUserPaddingRightInitial> = $i34;

        goto label093;

     label088:
        if z5 != 0 goto label089;

        if z6 == 0 goto label090;

     label089:
        $z12 = 1;

        goto label091;

     label090:
        $z12 = 0;

     label091:
        z30 = $z12;

        $z8 = r0.<android.view.View: boolean mLeftPaddingDefined>;

        if $z8 == 0 goto label092;

        if z30 != 0 goto label092;

        r0.<android.view.View: int mUserPaddingLeftInitial> = i2;

     label092:
        $z10 = r0.<android.view.View: boolean mRightPaddingDefined>;

        if $z10 == 0 goto label093;

        if z30 != 0 goto label093;

        r0.<android.view.View: int mUserPaddingRightInitial> = i4;

     label093:
        $i31 = r0.<android.view.View: int mUserPaddingLeftInitial>;

        if i3 < 0 goto label094;

        $i27 = i3;

        goto label095;

     label094:
        $i27 = r0.<android.view.View: int mPaddingTop>;

     label095:
        $i28 = r0.<android.view.View: int mUserPaddingRightInitial>;

        if i5 < 0 goto label096;

        $i29 = i5;

        goto label097;

     label096:
        $i29 = r0.<android.view.View: int mPaddingBottom>;

     label097:
        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>($i31, $i27, $i28, $i29);

        if i10 == 0 goto label098;

        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i9, i10);

     label098:
        if z2 == 0 goto label099;

        virtualinvoke r0.<android.view.View: void initializeScrollbarsInternal(android.content.res.TypedArray)>(r3);

     label099:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        if i13 == 0 goto label100;

        virtualinvoke r0.<android.view.View: void recomputePadding()>();

     label100:
        if i11 != 0 goto label101;

        if i12 == 0 goto label102;

     label101:
        virtualinvoke r0.<android.view.View: void scrollTo(int,int)>(i11, i12);

     label102:
        if z1 == 0 goto label103;

        virtualinvoke r0.<android.view.View: void setTranslationX(float)>(f0);

        virtualinvoke r0.<android.view.View: void setTranslationY(float)>(f2);

        virtualinvoke r0.<android.view.View: void setTranslationZ(float)>(f1);

        virtualinvoke r0.<android.view.View: void setElevation(float)>(f4);

        virtualinvoke r0.<android.view.View: void setRotation(float)>(f3);

        virtualinvoke r0.<android.view.View: void setRotationX(float)>(f6);

        virtualinvoke r0.<android.view.View: void setRotationY(float)>(f5);

        virtualinvoke r0.<android.view.View: void setScaleX(float)>(f8);

        virtualinvoke r0.<android.view.View: void setScaleY(float)>(f7);

     label103:
        if z0 != 0 goto label104;

        $i30 = i9 & 512;

        if $i30 == 0 goto label104;

        virtualinvoke r0.<android.view.View: void setScrollContainer(boolean)>(1);

     label104:
        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        return;
    }

    void <init>()
    {
        android.view.View r0;
        android.view.ViewOutlineProvider $r1;
        boolean $z0;
        java.lang.Class $r2;
        java.lang.String $r3;
        android.view.RenderNode $r4;
        android.view.InputEventConsistencyVerifier $r5;

        r0 := @this: android.view.View;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.View: android.view.animation.Animation mCurrentAnimation> = null;

        r0.<android.view.View: boolean mRecreateDisplayList> = 0;

        r0.<android.view.View: int mID> = -1;

        r0.<android.view.View: int mAccessibilityViewId> = -1;

        r0.<android.view.View: int mAccessibilityCursorPosition> = -1;

        r0.<android.view.View: java.lang.Object mTag> = null;

        r0.<android.view.View: int mTransientStateCount> = 0;

        r0.<android.view.View: android.graphics.Rect mClipBounds> = null;

        r0.<android.view.View: int mPaddingLeft> = 0;

        r0.<android.view.View: int mPaddingRight> = 0;

        r0.<android.view.View: int mLabelForId> = -1;

        r0.<android.view.View: boolean mLeftPaddingDefined> = 0;

        r0.<android.view.View: boolean mRightPaddingDefined> = 0;

        r0.<android.view.View: int mOldWidthMeasureSpec> = -2147483648;

        r0.<android.view.View: int mOldHeightMeasureSpec> = -2147483648;

        r0.<android.view.View: int[] mDrawableState> = null;

        $r1 = <android.view.ViewOutlineProvider: android.view.ViewOutlineProvider BACKGROUND>;

        r0.<android.view.View: android.view.ViewOutlineProvider mOutlineProvider> = $r1;

        r0.<android.view.View: int mNextFocusLeftId> = -1;

        r0.<android.view.View: int mNextFocusRightId> = -1;

        r0.<android.view.View: int mNextFocusUpId> = -1;

        r0.<android.view.View: int mNextFocusDownId> = -1;

        r0.<android.view.View: int mNextFocusForwardId> = -1;

        r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap> = null;

        r0.<android.view.View: android.view.TouchDelegate mTouchDelegate> = null;

        r0.<android.view.View: int mDrawingCacheBackgroundColor> = 0;

        r0.<android.view.View: android.view.ViewPropertyAnimator mAnimator> = null;

        r0.<android.view.View: int mLayerType> = 0;

        $z0 = staticinvoke <android.view.InputEventConsistencyVerifier: boolean isInstrumentationEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = new android.view.InputEventConsistencyVerifier;

        specialinvoke $r5.<android.view.InputEventConsistencyVerifier: void <init>(java.lang.Object,int)>(r0, 0);

        goto label2;

     label1:
        $r5 = null;

     label2:
        r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier> = $r5;

        r0.<android.view.View: android.content.res.Resources mResources> = null;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <android.view.RenderNode: android.view.RenderNode create(java.lang.String,android.view.View)>($r3, r0);

        r0.<android.view.View: android.view.RenderNode mRenderNode> = $r4;

        return;
    }

    private static android.util.SparseArray getAttributeMap()
    {
        android.util.SparseArray $r0, $r1, $r2;

        $r0 = <android.view.View: android.util.SparseArray mAttributeMap>;

        if $r0 != null goto label1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        <android.view.View: android.util.SparseArray mAttributeMap> = $r2;

     label1:
        $r1 = <android.view.View: android.util.SparseArray mAttributeMap>;

        return $r1;
    }

    private void saveAttributeData(android.util.AttributeSet, android.content.res.TypedArray)
    {
        android.view.View r0;
        android.util.AttributeSet r1;
        android.content.res.TypedArray r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        android.util.SparseArray r3;
        java.lang.String r4, $r11, $r12, $r15;
        java.lang.String[] $r5, $r7, $r8, $r13, $r14;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.CharSequence $r9;
        android.content.res.Resources $r10;
        android.content.res.Resources$NotFoundException $r16;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.util.AttributeSet;

        r2 := @parameter1: android.content.res.TypedArray;

        if r1 != null goto label01;

        $i4 = 0;

        goto label02;

     label01:
        $i4 = interfaceinvoke r1.<android.util.AttributeSet: int getAttributeCount()>();

     label02:
        $i5 = virtualinvoke r2.<android.content.res.TypedArray: int getIndexCount()>();

        $i6 = $i4 + $i5;

        i0 = $i6 * 2;

        $r5 = newarray (java.lang.String)[i0];

        r0.<android.view.View: java.lang.String[] mAttributes> = $r5;

        i1 = 0;

        if r1 == null goto label04;

        i1 = 0;

     label03:
        $i9 = interfaceinvoke r1.<android.util.AttributeSet: int getAttributeCount()>();

        if i1 >= $i9 goto label04;

        $r13 = r0.<android.view.View: java.lang.String[] mAttributes>;

        $r12 = interfaceinvoke r1.<android.util.AttributeSet: java.lang.String getAttributeName(int)>(i1);

        $r13[i1] = $r12;

        $r14 = r0.<android.view.View: java.lang.String[] mAttributes>;

        $i10 = i1 + 1;

        $r15 = interfaceinvoke r1.<android.util.AttributeSet: java.lang.String getAttributeValue(int)>(i1);

        $r14[$i10] = $r15;

        i1 = i1 + 2;

        goto label03;

     label04:
        r3 = staticinvoke <android.view.View: android.util.SparseArray getAttributeMap()>();

        i2 = 0;

     label05:
        $i7 = virtualinvoke r2.<android.content.res.TypedArray: int length()>();

        if i2 >= $i7 goto label13;

        $z0 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(i2);

        if $z0 == 0 goto label12;

     label06:
        i3 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i2, 0);

        if i3 != 0 goto label08;

     label07:
        goto label12;

     label08:
        $r6 = virtualinvoke r3.<android.util.SparseArray: java.lang.Object get(int)>(i3);

        r4 = (java.lang.String) $r6;

        if r4 != null goto label09;

        $r10 = virtualinvoke r2.<android.content.res.TypedArray: android.content.res.Resources getResources()>();

        r4 = virtualinvoke $r10.<android.content.res.Resources: java.lang.String getResourceName(int)>(i3);

        virtualinvoke r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i3, r4);

     label09:
        $r8 = r0.<android.view.View: java.lang.String[] mAttributes>;

        $r8[i1] = r4;

        $r7 = r0.<android.view.View: java.lang.String[] mAttributes>;

        $i8 = i1 + 1;

        $r9 = virtualinvoke r2.<android.content.res.TypedArray: java.lang.CharSequence getText(int)>(i2);

        $r11 = interfaceinvoke $r9.<java.lang.CharSequence: java.lang.String toString()>();

        $r7[$i8] = $r11;

        i1 = i1 + 2;

     label10:
        goto label12;

     label11:
        $r16 := @caughtexception;

     label12:
        i2 = i2 + 1;

        goto label05;

     label13:
        return;

        catch android.content.res.Resources$NotFoundException from label06 to label07 with label11;
        catch android.content.res.Resources$NotFoundException from label08 to label10 with label11;
    }

    public java.lang.String toString()
    {
        android.view.View r0;
        java.lang.StringBuilder r1, $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40;
        android.content.res.Resources r2;
        java.lang.String r3, r4, r5, $r8, $r11, $r40, $r42;
        java.lang.Class $r7;
        boolean $z0;
        char $c41, $c42, $c43, $c44, $c45, $c46, $c47, $c48, $c49, $c50, $c51, $c52, $c53, $c54, $c55;
        android.content.res.Resources$NotFoundException $r51;

        r0 := @this: android.view.View;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>(128);

        r1 = $r6;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i3 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i3 & 12;

        lookupswitch($i2)
        {
            case 0: goto label01;
            case 4: goto label02;
            case 8: goto label03;
            default: goto label04;
        };

     label01:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(86);

        goto label05;

     label02:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(73);

        goto label05;

     label03:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(71);

        goto label05;

     label04:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

     label05:
        $i4 = r0.<android.view.View: int mViewFlags>;

        $i5 = $i4 & 1;

        if $i5 != 1 goto label06;

        $c49 = 70;

        goto label07;

     label06:
        $c49 = 46;

     label07:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c49);

        $i7 = r0.<android.view.View: int mViewFlags>;

        $i6 = $i7 & 32;

        if $i6 != 0 goto label08;

        $c48 = 69;

        goto label09;

     label08:
        $c48 = 46;

     label09:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c48);

        $i8 = r0.<android.view.View: int mViewFlags>;

        $i9 = $i8 & 128;

        if $i9 != 128 goto label10;

        $c51 = 46;

        goto label11;

     label10:
        $c51 = 68;

     label11:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c51);

        $i11 = r0.<android.view.View: int mViewFlags>;

        $i10 = $i11 & 256;

        if $i10 == 0 goto label12;

        $c50 = 72;

        goto label13;

     label12:
        $c50 = 46;

     label13:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c50);

        $i12 = r0.<android.view.View: int mViewFlags>;

        $i15 = $i12 & 512;

        if $i15 == 0 goto label14;

        $c53 = 86;

        goto label15;

     label14:
        $c53 = 46;

     label15:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c53);

        $i13 = r0.<android.view.View: int mViewFlags>;

        $i14 = $i13 & 16384;

        if $i14 == 0 goto label16;

        $c52 = 67;

        goto label17;

     label16:
        $c52 = 46;

     label17:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c52);

        $i17 = r0.<android.view.View: int mViewFlags>;

        $i16 = $i17 & 2097152;

        if $i16 == 0 goto label18;

        $c55 = 76;

        goto label19;

     label18:
        $c55 = 46;

     label19:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c55);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i19 = r0.<android.view.View: int mPrivateFlags>;

        $i18 = $i19 & 8;

        if $i18 == 0 goto label20;

        $c54 = 82;

        goto label21;

     label20:
        $c54 = 46;

     label21:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c54);

        $i21 = r0.<android.view.View: int mPrivateFlags>;

        $i22 = $i21 & 2;

        if $i22 == 0 goto label22;

        $c42 = 70;

        goto label23;

     label22:
        $c42 = 46;

     label23:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c42);

        $i20 = r0.<android.view.View: int mPrivateFlags>;

        $i25 = $i20 & 4;

        if $i25 == 0 goto label24;

        $c41 = 83;

        goto label25;

     label24:
        $c41 = 46;

     label25:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c41);

        $i24 = r0.<android.view.View: int mPrivateFlags>;

        $i23 = $i24 & 33554432;

        if $i23 == 0 goto label26;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(112);

        goto label29;

     label26:
        $i28 = r0.<android.view.View: int mPrivateFlags>;

        $i27 = $i28 & 16384;

        if $i27 == 0 goto label27;

        $c43 = 80;

        goto label28;

     label27:
        $c43 = 46;

     label28:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c43);

     label29:
        $i26 = r0.<android.view.View: int mPrivateFlags>;

        $i31 = $i26 & 268435456;

        if $i31 == 0 goto label30;

        $c45 = 72;

        goto label31;

     label30:
        $c45 = 46;

     label31:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c45);

        $i30 = r0.<android.view.View: int mPrivateFlags>;

        $i29 = $i30 & 1073741824;

        if $i29 == 0 goto label32;

        $c44 = 65;

        goto label33;

     label32:
        $c44 = 46;

     label33:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c44);

        $i33 = r0.<android.view.View: int mPrivateFlags>;

        $i32 = $i33 & -2147483648;

        if $i32 == 0 goto label34;

        $c47 = 73;

        goto label35;

     label34:
        $c47 = 46;

     label35:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c47);

        $i36 = r0.<android.view.View: int mPrivateFlags>;

        $i37 = $i36 & 6291456;

        if $i37 == 0 goto label36;

        $c46 = 68;

        goto label37;

     label36:
        $c46 = 46;

     label37:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c46);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i34 = r0.<android.view.View: int mLeft>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i34);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i35 = r0.<android.view.View: int mTop>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i35);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i39 = r0.<android.view.View: int mRight>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i39);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i38 = r0.<android.view.View: int mBottom>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i38);

        i0 = virtualinvoke r0.<android.view.View: int getId()>();

        if i0 == -1 goto label45;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" #");

        $r42 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        r2 = r0.<android.view.View: android.content.res.Resources mResources>;

        $z0 = staticinvoke <android.content.res.Resources: boolean resourceHasPackage(int)>(i0);

        if $z0 == 0 goto label45;

        if r2 == null goto label45;

     label38:
        $i40 = i0 & -16777216;

        lookupswitch($i40)
        {
            case 16777216: goto label40;
            case 2130706432: goto label39;
            default: goto label41;
        };

     label39:
        r3 = "app";

        goto label42;

     label40:
        r3 = "android";

        goto label42;

     label41:
        r3 = virtualinvoke r2.<android.content.res.Resources: java.lang.String getResourcePackageName(int)>(i0);

     label42:
        r4 = virtualinvoke r2.<android.content.res.Resources: java.lang.String getResourceTypeName(int)>(i0);

        r5 = virtualinvoke r2.<android.content.res.Resources: java.lang.String getResourceEntryName(int)>(i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

     label43:
        goto label45;

     label44:
        $r51 := @caughtexception;

     label45:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r40 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r40;

        catch android.content.res.Resources$NotFoundException from label38 to label43 with label44;
    }

    protected void initializeFadingEdge(android.content.res.TypedArray)
    {
        android.view.View r0;
        android.content.res.TypedArray r1, r2;
        int[] $r3;
        android.content.Context $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.TypedArray;

        $r4 = r0.<android.view.View: android.content.Context mContext>;

        $r3 = <com.android.internal.R$styleable: int[] View>;

        r2 = virtualinvoke $r4.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r3);

        virtualinvoke r0.<android.view.View: void initializeFadingEdgeInternal(android.content.res.TypedArray)>(r2);

        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    protected void initializeFadingEdgeInternal(android.content.res.TypedArray)
    {
        android.view.View r0;
        android.content.res.TypedArray r1;
        android.content.Context $r2;
        android.view.View$ScrollabilityCache $r3;
        android.view.ViewConfiguration $r4;
        int $i0, $i1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.TypedArray;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

        $r3 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r2 = r0.<android.view.View: android.content.Context mContext>;

        $r4 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r2);

        $i0 = virtualinvoke $r4.<android.view.ViewConfiguration: int getScaledFadingEdgeLength()>();

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(25, $i0);

        $r3.<android.view.View$ScrollabilityCache: int fadingEdgeLength> = $i1;

        return;
    }

    public int getVerticalFadingEdgeLength()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        boolean $z0;
        int $i0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isVerticalFadingEdgeEnabled()>();

        if $z0 == 0 goto label1;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 == null goto label1;

        $i0 = r1.<android.view.View$ScrollabilityCache: int fadingEdgeLength>;

        return $i0;

     label1:
        return 0;
    }

    public void setFadingEdgeLength(int)
    {
        android.view.View r0;
        int i0;
        android.view.View$ScrollabilityCache $r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r1.<android.view.View$ScrollabilityCache: int fadingEdgeLength> = i0;

        return;
    }

    public int getHorizontalFadingEdgeLength()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        boolean $z0;
        int $i0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isHorizontalFadingEdgeEnabled()>();

        if $z0 == 0 goto label1;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 == null goto label1;

        $i0 = r1.<android.view.View$ScrollabilityCache: int fadingEdgeLength>;

        return $i0;

     label1:
        return 0;
    }

    public int getVerticalScrollbarWidth()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        android.widget.ScrollBarDrawable r2;
        int i0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 == null goto label3;

        r2 = r1.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        if r2 == null goto label2;

        i0 = virtualinvoke r2.<android.widget.ScrollBarDrawable: int getSize(boolean)>(1);

        if i0 > 0 goto label1;

        i0 = r1.<android.view.View$ScrollabilityCache: int scrollBarSize>;

     label1:
        return i0;

     label2:
        return 0;

     label3:
        return 0;
    }

    protected int getHorizontalScrollbarHeight()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        android.widget.ScrollBarDrawable r2;
        int i0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 == null goto label3;

        r2 = r1.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        if r2 == null goto label2;

        i0 = virtualinvoke r2.<android.widget.ScrollBarDrawable: int getSize(boolean)>(0);

        if i0 > 0 goto label1;

        i0 = r1.<android.view.View$ScrollabilityCache: int scrollBarSize>;

     label1:
        return i0;

     label2:
        return 0;

     label3:
        return 0;
    }

    protected void initializeScrollbars(android.content.res.TypedArray)
    {
        android.view.View r0;
        android.content.res.TypedArray r1, r2;
        int[] $r3;
        android.content.Context $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.TypedArray;

        $r4 = r0.<android.view.View: android.content.Context mContext>;

        $r3 = <com.android.internal.R$styleable: int[] View>;

        r2 = virtualinvoke $r4.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r3);

        virtualinvoke r0.<android.view.View: void initializeScrollbarsInternal(android.content.res.TypedArray)>(r2);

        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    protected void initializeScrollbarsInternal(android.content.res.TypedArray)
    {
        android.view.View r0;
        android.content.res.TypedArray r1;
        android.view.View$ScrollabilityCache r2;
        boolean z0, z1, z2;
        android.graphics.drawable.Drawable r3, r4, r15, r16;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.widget.ScrollBarDrawable $r5, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        android.content.Context $r6;
        android.view.ViewConfiguration $r7;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.TypedArray;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

        r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r5 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        if $r5 != null goto label1;

        $r12 = new android.widget.ScrollBarDrawable;

        specialinvoke $r12.<android.widget.ScrollBarDrawable: void <init>()>();

        r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar> = $r12;

     label1:
        z0 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(45, 1);

        if z0 != 0 goto label2;

        r2.<android.view.View$ScrollabilityCache: int state> = 1;

     label2:
        r2.<android.view.View$ScrollabilityCache: boolean fadeScrollBars> = z0;

        $i1 = staticinvoke <android.view.ViewConfiguration: int getScrollBarFadeDuration()>();

        $i2 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(43, $i1);

        r2.<android.view.View$ScrollabilityCache: int scrollBarFadeDuration> = $i2;

        $i3 = staticinvoke <android.view.ViewConfiguration: int getScrollDefaultDelay()>();

        $i4 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(44, $i3);

        r2.<android.view.View$ScrollabilityCache: int scrollBarDefaultDelayBeforeFade> = $i4;

        $r6 = r0.<android.view.View: android.content.Context mContext>;

        $r7 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r6);

        $i5 = virtualinvoke $r7.<android.view.ViewConfiguration: int getScaledScrollBarSize()>();

        $i6 = virtualinvoke r1.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(1, $i5);

        r2.<android.view.View$ScrollabilityCache: int scrollBarSize> = $i6;

        r3 = virtualinvoke r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(4);

        $r8 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r8.<android.widget.ScrollBarDrawable: void setHorizontalTrackDrawable(android.graphics.drawable.Drawable)>(r3);

        r4 = virtualinvoke r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(2);

        if r4 == null goto label3;

        $r14 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r14.<android.widget.ScrollBarDrawable: void setHorizontalThumbDrawable(android.graphics.drawable.Drawable)>(r4);

     label3:
        z1 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(6, 0);

        if z1 == 0 goto label4;

        $r13 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r13.<android.widget.ScrollBarDrawable: void setAlwaysDrawHorizontalTrack(boolean)>(1);

     label4:
        r15 = virtualinvoke r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(5);

        $r9 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r9.<android.widget.ScrollBarDrawable: void setVerticalTrackDrawable(android.graphics.drawable.Drawable)>(r15);

        r16 = virtualinvoke r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(3);

        if r16 == null goto label5;

        $r10 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r10.<android.widget.ScrollBarDrawable: void setVerticalThumbDrawable(android.graphics.drawable.Drawable)>(r16);

     label5:
        z2 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(7, 0);

        if z2 == 0 goto label6;

        $r11 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r11.<android.widget.ScrollBarDrawable: void setAlwaysDrawVerticalTrack(boolean)>(1);

     label6:
        i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        if r15 == null goto label7;

        virtualinvoke r15.<android.graphics.drawable.Drawable: void setLayoutDirection(int)>(i0);

     label7:
        if r16 == null goto label8;

        virtualinvoke r16.<android.graphics.drawable.Drawable: void setLayoutDirection(int)>(i0);

     label8:
        virtualinvoke r0.<android.view.View: void resolvePadding()>();

        return;
    }

    private void initScrollCache()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache $r1, $r2;
        android.content.Context $r3;
        android.view.ViewConfiguration $r4;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r1 != null goto label1;

        $r2 = new android.view.View$ScrollabilityCache;

        $r3 = r0.<android.view.View: android.content.Context mContext>;

        $r4 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r3);

        specialinvoke $r2.<android.view.View$ScrollabilityCache: void <init>(android.view.ViewConfiguration,android.view.View)>($r4, r0);

        r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache> = $r2;

     label1:
        return;
    }

    private android.view.View$ScrollabilityCache getScrollCache()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache $r1;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        return $r1;
    }

    public void setVerticalScrollbarPosition(int)
    {
        android.view.View r0;
        int i0, $i1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mVerticalScrollbarPosition>;

        if $i1 == i0 goto label1;

        r0.<android.view.View: int mVerticalScrollbarPosition> = i0;

        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        return;
    }

    public int getVerticalScrollbarPosition()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mVerticalScrollbarPosition>;

        return $i0;
    }

    android.view.View$ListenerInfo getListenerInfo()
    {
        android.view.View r0;
        android.view.View$ListenerInfo $r1, $r2, $r3, $r4;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if $r1 == null goto label1;

        $r4 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        return $r4;

     label1:
        $r2 = new android.view.View$ListenerInfo;

        specialinvoke $r2.<android.view.View$ListenerInfo: void <init>()>();

        r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo> = $r2;

        $r3 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        return $r3;
    }

    public void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)
    {
        android.view.View r0;
        android.view.View$OnFocusChangeListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnFocusChangeListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.View$OnFocusChangeListener mOnFocusChangeListener> = r1;

        return;
    }

    public void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)
    {
        android.view.View r0;
        android.view.View$OnLayoutChangeListener r1;
        android.view.View$ListenerInfo r2;
        java.util.ArrayList $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnLayoutChangeListener;

        r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r3 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$100(android.view.View$ListenerInfo)>(r2);

        if $r3 != null goto label1;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$102(android.view.View$ListenerInfo,java.util.ArrayList)>(r2, $r6);

     label1:
        $r4 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$100(android.view.View$ListenerInfo)>(r2);

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r5 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$100(android.view.View$ListenerInfo)>(r2);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label2:
        return;
    }

    public void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)
    {
        android.view.View r0;
        android.view.View$OnLayoutChangeListener r1;
        android.view.View$ListenerInfo r2;
        java.util.ArrayList $r3, $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnLayoutChangeListener;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label1;

        $r3 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$100(android.view.View$ListenerInfo)>(r2);

        if $r3 != null goto label2;

     label1:
        return;

     label2:
        $r4 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$100(android.view.View$ListenerInfo)>(r2);

        virtualinvoke $r4.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)
    {
        android.view.View r0;
        android.view.View$OnAttachStateChangeListener r1;
        android.view.View$ListenerInfo r2;
        java.util.concurrent.CopyOnWriteArrayList $r3, $r4, $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnAttachStateChangeListener;

        r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r3 = staticinvoke <android.view.View$ListenerInfo: java.util.concurrent.CopyOnWriteArrayList access$200(android.view.View$ListenerInfo)>(r2);

        if $r3 != null goto label1;

        $r5 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r5.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        staticinvoke <android.view.View$ListenerInfo: java.util.concurrent.CopyOnWriteArrayList access$202(android.view.View$ListenerInfo,java.util.concurrent.CopyOnWriteArrayList)>(r2, $r5);

     label1:
        $r4 = staticinvoke <android.view.View$ListenerInfo: java.util.concurrent.CopyOnWriteArrayList access$200(android.view.View$ListenerInfo)>(r2);

        virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)
    {
        android.view.View r0;
        android.view.View$OnAttachStateChangeListener r1;
        android.view.View$ListenerInfo r2;
        java.util.concurrent.CopyOnWriteArrayList $r3, $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnAttachStateChangeListener;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label1;

        $r3 = staticinvoke <android.view.View$ListenerInfo: java.util.concurrent.CopyOnWriteArrayList access$200(android.view.View$ListenerInfo)>(r2);

        if $r3 != null goto label2;

     label1:
        return;

     label2:
        $r4 = staticinvoke <android.view.View$ListenerInfo: java.util.concurrent.CopyOnWriteArrayList access$200(android.view.View$ListenerInfo)>(r2);

        virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public android.view.View$OnFocusChangeListener getOnFocusChangeListener()
    {
        android.view.View r0;
        android.view.View$ListenerInfo r1;
        android.view.View$OnFocusChangeListener $r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$ListenerInfo: android.view.View$OnFocusChangeListener mOnFocusChangeListener>;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void setOnClickListener(android.view.View$OnClickListener)
    {
        android.view.View r0;
        android.view.View$OnClickListener r1;
        boolean $z0;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnClickListener;

        $z0 = virtualinvoke r0.<android.view.View: boolean isClickable()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void setClickable(boolean)>(1);

     label1:
        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.View$OnClickListener mOnClickListener> = r1;

        return;
    }

    public boolean hasOnClickListeners()
    {
        android.view.View r0;
        android.view.View$ListenerInfo r1;
        android.view.View$OnClickListener $r2;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$ListenerInfo: android.view.View$OnClickListener mOnClickListener>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setOnLongClickListener(android.view.View$OnLongClickListener)
    {
        android.view.View r0;
        android.view.View$OnLongClickListener r1;
        boolean $z0;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnLongClickListener;

        $z0 = virtualinvoke r0.<android.view.View: boolean isLongClickable()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void setLongClickable(boolean)>(1);

     label1:
        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.View$OnLongClickListener mOnLongClickListener> = r1;

        return;
    }

    public void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)
    {
        android.view.View r0;
        android.view.View$OnCreateContextMenuListener r1;
        boolean $z0;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnCreateContextMenuListener;

        $z0 = virtualinvoke r0.<android.view.View: boolean isLongClickable()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void setLongClickable(boolean)>(1);

     label1:
        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.View$OnCreateContextMenuListener mOnCreateContextMenuListener> = r1;

        return;
    }

    public boolean performClick()
    {
        android.view.View r0;
        boolean z0;
        android.view.View$ListenerInfo r1;
        android.view.View$OnClickListener $r2, $r3;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$ListenerInfo: android.view.View$OnClickListener mOnClickListener>;

        if $r2 == null goto label1;

        virtualinvoke r0.<android.view.View: void playSoundEffect(int)>(0);

        $r3 = r1.<android.view.View$ListenerInfo: android.view.View$OnClickListener mOnClickListener>;

        interfaceinvoke $r3.<android.view.View$OnClickListener: void onClick(android.view.View)>(r0);

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void sendAccessibilityEvent(int)>(1);

        return z0;
    }

    public boolean callOnClick()
    {
        android.view.View r0;
        android.view.View$ListenerInfo r1;
        android.view.View$OnClickListener $r2, $r3;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$ListenerInfo: android.view.View$OnClickListener mOnClickListener>;

        if $r2 == null goto label1;

        $r3 = r1.<android.view.View$ListenerInfo: android.view.View$OnClickListener mOnClickListener>;

        interfaceinvoke $r3.<android.view.View$OnClickListener: void onClick(android.view.View)>(r0);

        return 1;

     label1:
        return 0;
    }

    public boolean performLongClick()
    {
        android.view.View r0;
        boolean z0;
        android.view.View$ListenerInfo r1;
        android.view.View$OnLongClickListener $r2, $r3;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void sendAccessibilityEvent(int)>(2);

        z0 = 0;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$ListenerInfo: android.view.View$OnLongClickListener mOnLongClickListener>;

        if $r2 == null goto label1;

        $r3 = r1.<android.view.View$ListenerInfo: android.view.View$OnLongClickListener mOnLongClickListener>;

        z0 = interfaceinvoke $r3.<android.view.View$OnLongClickListener: boolean onLongClick(android.view.View)>(r0);

     label1:
        if z0 != 0 goto label2;

        z0 = virtualinvoke r0.<android.view.View: boolean showContextMenu()>();

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r0.<android.view.View: boolean performHapticFeedback(int)>(0);

     label3:
        return z0;
    }

    protected boolean performButtonActionOnTouchDown(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        int $i0, $i1, $i2;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getButtonState()>();

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $i2 = virtualinvoke r1.<android.view.MotionEvent: int getMetaState()>();

        $z0 = virtualinvoke r0.<android.view.View: boolean showContextMenu(float,float,int)>($f0, $f1, $i2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean showContextMenu()
    {
        android.view.View r0;
        android.view.ViewParent $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = interfaceinvoke $r1.<android.view.ViewParent: boolean showContextMenuForChild(android.view.View)>(r0);

        return $z0;
    }

    public boolean showContextMenu(float, float, int)
    {
        android.view.View r0;
        float f0, f1;
        int i0;
        boolean $z0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean showContextMenu()>();

        return $z0;
    }

    public android.view.ActionMode startActionMode(android.view.ActionMode$Callback)
    {
        android.view.View r0;
        android.view.ActionMode$Callback r1;
        android.view.ViewParent r2;
        android.view.ActionMode $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ActionMode$Callback;

        r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        if r2 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r2.<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>(r0, r1);

        return $r3;
    }

    public void setOnKeyListener(android.view.View$OnKeyListener)
    {
        android.view.View r0;
        android.view.View$OnKeyListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnKeyListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        staticinvoke <android.view.View$ListenerInfo: android.view.View$OnKeyListener access$302(android.view.View$ListenerInfo,android.view.View$OnKeyListener)>($r2, r1);

        return;
    }

    public void setOnTouchListener(android.view.View$OnTouchListener)
    {
        android.view.View r0;
        android.view.View$OnTouchListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnTouchListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        staticinvoke <android.view.View$ListenerInfo: android.view.View$OnTouchListener access$402(android.view.View$ListenerInfo,android.view.View$OnTouchListener)>($r2, r1);

        return;
    }

    public void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)
    {
        android.view.View r0;
        android.view.View$OnGenericMotionListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnGenericMotionListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        staticinvoke <android.view.View$ListenerInfo: android.view.View$OnGenericMotionListener access$502(android.view.View$ListenerInfo,android.view.View$OnGenericMotionListener)>($r2, r1);

        return;
    }

    public void setOnHoverListener(android.view.View$OnHoverListener)
    {
        android.view.View r0;
        android.view.View$OnHoverListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnHoverListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        staticinvoke <android.view.View$ListenerInfo: android.view.View$OnHoverListener access$602(android.view.View$ListenerInfo,android.view.View$OnHoverListener)>($r2, r1);

        return;
    }

    public void setOnDragListener(android.view.View$OnDragListener)
    {
        android.view.View r0;
        android.view.View$OnDragListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnDragListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        staticinvoke <android.view.View$ListenerInfo: android.view.View$OnDragListener access$702(android.view.View$ListenerInfo,android.view.View$OnDragListener)>($r2, r1);

        return;
    }

    void handleFocusGainInternal(int, android.graphics.Rect)
    {
        android.view.View r0, r2, $r9, $r10;
        int i0, $i1, $i2, $i3, $i4;
        android.graphics.Rect r1;
        android.view.View$AttachInfo $r3, $r5, $r6;
        android.view.ViewParent $r4, $r8;
        android.view.ViewTreeObserver $r7;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        $i1 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & 2;

        if $i2 != 0 goto label5;

        $i3 = r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 | 2;

        r0.<android.view.View: int mPrivateFlags> = $i4;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label1;

        $r9 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        $r10 = virtualinvoke $r9.<android.view.View: android.view.View findFocus()>();

        goto label2;

     label1:
        $r10 = null;

     label2:
        r2 = $r10;

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r4 == null goto label3;

        $r8 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r8.<android.view.ViewParent: void requestChildFocus(android.view.View,android.view.View)>(r0, r0);

     label3:
        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r5 == null goto label4;

        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r7.<android.view.ViewTreeObserver: void dispatchOnGlobalFocusChange(android.view.View,android.view.View)>(r2, r0);

     label4:
        virtualinvoke r0.<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>(1, i0, r1);

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

     label5:
        return;
    }

    public void getHotspotBounds(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        r2 = virtualinvoke r0.<android.view.View: android.graphics.drawable.Drawable getBackground()>();

        if r2 == null goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void getHotspotBounds(android.graphics.Rect)>(r1);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void getBoundsOnScreen(android.graphics.Rect)>(r1);

     label2:
        return;
    }

    public boolean requestRectangleOnScreen(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $z0 = virtualinvoke r0.<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>(r1, 0);

        return $z0;
    }

    public boolean requestRectangleOnScreen(android.graphics.Rect, boolean)
    {
        android.view.View r0, r2, r5;
        android.graphics.Rect r1;
        boolean z0, z1, $z2, $z3, $z4;
        android.graphics.RectF r3, $r8;
        android.view.ViewParent r4, $r6;
        android.view.View$AttachInfo $r7, $r9;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.graphics.Matrix $r10;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        z0 := @parameter1: boolean;

        $r6 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r6 != null goto label1;

        return 0;

     label1:
        r2 = r0;

        $r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r7 == null goto label2;

        $r9 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r8 = $r9.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect>;

        goto label3;

     label2:
        $r8 = new android.graphics.RectF;

        specialinvoke $r8.<android.graphics.RectF: void <init>()>();

     label3:
        r3 = $r8;

        virtualinvoke r3.<android.graphics.RectF: void set(android.graphics.Rect)>(r1);

        r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        z1 = 0;

     label4:
        if r4 == null goto label7;

        $f0 = r3.<android.graphics.RectF: float left>;

        $i3 = (int) $f0;

        $f1 = r3.<android.graphics.RectF: float top>;

        $i1 = (int) $f1;

        $f2 = r3.<android.graphics.RectF: float right>;

        $i2 = (int) $f2;

        $f3 = r3.<android.graphics.RectF: float bottom>;

        $i0 = (int) $f3;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i3, $i1, $i2, $i0);

        $z2 = interfaceinvoke r4.<android.view.ViewParent: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>(r2, r1, z0);

        z1 = z1 | $z2;

        $z3 = virtualinvoke r2.<android.view.View: boolean hasIdentityMatrix()>();

        if $z3 != 0 goto label5;

        $r10 = virtualinvoke r2.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r10.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r3);

     label5:
        $i4 = r2.<android.view.View: int mLeft>;

        $f5 = (float) $i4;

        $i5 = r2.<android.view.View: int mTop>;

        $f4 = (float) $i5;

        virtualinvoke r3.<android.graphics.RectF: void offset(float,float)>($f5, $f4);

        $z4 = r4 instanceof android.view.View;

        if $z4 != 0 goto label6;

        goto label7;

     label6:
        r5 = (android.view.View) r4;

        $i7 = virtualinvoke r5.<android.view.View: int getScrollX()>();

        $i6 = neg $i7;

        $f6 = (float) $i6;

        $i8 = virtualinvoke r5.<android.view.View: int getScrollY()>();

        $i9 = neg $i8;

        $f7 = (float) $i9;

        virtualinvoke r3.<android.graphics.RectF: void offset(float,float)>($f6, $f7);

        r2 = r5;

        r4 = virtualinvoke r2.<android.view.View: android.view.ViewParent getParent()>();

        goto label4;

     label7:
        return z1;
    }

    public void clearFocus()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void clearFocusInternal(android.view.View,boolean,boolean)>(null, 1, 1);

        return;
    }

    void clearFocusInternal(android.view.View, boolean, boolean)
    {
        android.view.View r0, r1;
        boolean z0, z1, $z2;
        int $i0, $i1, $i2, $i3;
        android.view.ViewParent $r2, $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label3;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -3;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        if z0 == 0 goto label1;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void clearChildFocus(android.view.View)>(r0);

     label1:
        virtualinvoke r0.<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>(0, 0, null);

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        if z0 == 0 goto label3;

        if z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<android.view.View: boolean rootViewRequestFocus()>();

        if $z2 != 0 goto label3;

     label2:
        virtualinvoke r0.<android.view.View: void notifyGlobalFocusCleared(android.view.View)>(r0);

     label3:
        return;
    }

    void notifyGlobalFocusCleared(android.view.View)
    {
        android.view.View r0, r1;
        android.view.View$AttachInfo $r2, $r3;
        android.view.ViewTreeObserver $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        if r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r4.<android.view.ViewTreeObserver: void dispatchOnGlobalFocusChange(android.view.View,android.view.View)>(r1, null);

     label1:
        return;
    }

    boolean rootViewRequestFocus()
    {
        android.view.View r0, r1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.view.View: boolean requestFocus()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    void unFocus(android.view.View)
    {
        android.view.View r0, r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.View: void clearFocusInternal(android.view.View,boolean,boolean)>(r1, 0, 0);

        return;
    }

    public boolean hasFocus()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasFocusable()
    {
        android.view.View r0;
        android.view.ViewParent r1;
        android.view.ViewGroup r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isFocusableInTouchMode()>();

        if $z0 != 0 goto label3;

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

     label1:
        $z3 = r1 instanceof android.view.ViewGroup;

        if $z3 == 0 goto label3;

        r2 = (android.view.ViewGroup) r1;

        $z4 = virtualinvoke r2.<android.view.ViewGroup: boolean shouldBlockFocusForTouchscreen()>();

        if $z4 == 0 goto label2;

        return 0;

     label2:
        r1 = interfaceinvoke r1.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label1;

     label3:
        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 12;

        if $i1 != 0 goto label4;

        $z1 = virtualinvoke r0.<android.view.View: boolean isFocusable()>();

        if $z1 == 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    protected void onFocusChanged(boolean, int, android.graphics.Rect)
    {
        android.view.View r0;
        boolean z0, $z1, $z2, $z3;
        int i0;
        android.graphics.Rect r1;
        android.view.inputmethod.InputMethodManager r2;
        android.view.View$ListenerInfo r3;
        android.view.View$AttachInfo $r4, $r5, $r9, $r10, $r11, $r12;
        android.view.KeyEvent$DispatcherState $r6;
        android.view.View$OnFocusChangeListener $r7, $r8;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Rect;

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void sendAccessibilityEvent(int)>(8);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

     label2:
        r2 = staticinvoke <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager peekInstance()>();

        if z0 != 0 goto label5;

        $z2 = virtualinvoke r0.<android.view.View: boolean isPressed()>();

        if $z2 == 0 goto label3;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

     label3:
        if r2 == null goto label4;

        $r12 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r12 == null goto label4;

        $r11 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z3 = $r11.<android.view.View$AttachInfo: boolean mHasWindowFocus>;

        if $z3 == 0 goto label4;

        virtualinvoke r2.<android.view.inputmethod.InputMethodManager: void focusOut(android.view.View)>(r0);

     label4:
        virtualinvoke r0.<android.view.View: void onFocusLost()>();

        goto label6;

     label5:
        if r2 == null goto label6;

        $r9 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r9 == null goto label6;

        $r10 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z1 = $r10.<android.view.View$AttachInfo: boolean mHasWindowFocus>;

        if $z1 == 0 goto label6;

        virtualinvoke r2.<android.view.inputmethod.InputMethodManager: void focusIn(android.view.View)>(r0);

     label6:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        r3 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r3 == null goto label7;

        $r7 = r3.<android.view.View$ListenerInfo: android.view.View$OnFocusChangeListener mOnFocusChangeListener>;

        if $r7 == null goto label7;

        $r8 = r3.<android.view.View$ListenerInfo: android.view.View$OnFocusChangeListener mOnFocusChangeListener>;

        interfaceinvoke $r8.<android.view.View$OnFocusChangeListener: void onFocusChange(android.view.View,boolean)>(r0, z0);

     label7:
        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label8;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.view.KeyEvent$DispatcherState mKeyDispatchState>;

        virtualinvoke $r6.<android.view.KeyEvent$DispatcherState: void reset(java.lang.Object)>(r0);

     label8:
        return;
    }

    public void sendAccessibilityEvent(int)
    {
        android.view.View r0;
        int i0;
        android.view.View$AccessibilityDelegate $r1, $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        virtualinvoke $r2.<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)>(r0, i0);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void sendAccessibilityEventInternal(int)>(i0);

     label2:
        return;
    }

    public void announceForAccessibility(java.lang.CharSequence)
    {
        android.view.View r0;
        java.lang.CharSequence r1;
        android.view.accessibility.AccessibilityEvent r2;
        android.content.Context $r3;
        android.view.accessibility.AccessibilityManager $r4;
        boolean $z0;
        android.view.ViewParent $r5, $r7;
        java.util.List $r6;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.CharSequence;

        $r3 = r0.<android.view.View: android.content.Context mContext>;

        $r4 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r3);

        $z0 = virtualinvoke $r4.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r5 == null goto label1;

        r2 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>(16384);

        virtualinvoke r0.<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r2);

        $r6 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: java.util.List getText()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1);

        virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: void setContentDescription(java.lang.CharSequence)>(null);

        $r7 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r7.<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r2);

     label1:
        return;
    }

    void sendAccessibilityEventInternal(int)
    {
        android.view.View r0;
        int i0;
        android.content.Context $r1;
        android.view.accessibility.AccessibilityManager $r2;
        boolean $z0;
        android.view.accessibility.AccessibilityEvent $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        $r2 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r1);

        $z0 = virtualinvoke $r2.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>(i0);

        virtualinvoke r0.<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>($r3);

     label1:
        return;
    }

    public void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.View$AccessibilityDelegate $r2, $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        virtualinvoke $r3.<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void sendAccessibilityEventUncheckedInternal(android.view.accessibility.AccessibilityEvent)>(r1);

     label2:
        return;
    }

    void sendAccessibilityEventUncheckedInternal(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;
        boolean $z0;
        int $i0, $i1;
        android.view.ViewParent $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $z0 = virtualinvoke r0.<android.view.View: boolean isShown()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        $i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        $i1 = $i0 & 172479;

        if $i1 == 0 goto label2;

        virtualinvoke r0.<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

     label2:
        $r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        interfaceinvoke $r2.<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1);

        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.View$AccessibilityDelegate $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        $z1 = virtualinvoke $r3.<android.view.View$AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1);

        return $z1;

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean dispatchPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)>(r1);

        return $z0;
    }

    boolean dispatchPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        virtualinvoke r0.<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        return 0;
    }

    public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.View$AccessibilityDelegate $r2, $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        virtualinvoke $r3.<android.view.View$AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void onPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)>(r1);

     label2:
        return;
    }

    void onPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        return;
    }

    public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.View$AccessibilityDelegate $r2, $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        virtualinvoke $r3.<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void onInitializeAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)>(r1);

     label2:
        return;
    }

    void onInitializeAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0, $r9;
        android.view.accessibility.AccessibilityEvent r1;
        java.util.ArrayList r2, $r10;
        java.lang.Class $r3;
        java.lang.String $r4, $r6;
        android.content.Context $r5;
        boolean $z0;
        java.lang.CharSequence $r7, r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.View$AttachInfo $r8, $r11, $r12;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setSource(android.view.View)>(r0);

        $r3 = class "android/view/View";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setClassName(java.lang.CharSequence)>($r4);

        $r5 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>($r6);

        $z0 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setEnabled(boolean)>($z0);

        $r7 = r0.<android.view.View: java.lang.CharSequence mContentDescription>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setContentDescription(java.lang.CharSequence)>($r7);

        $i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        lookupswitch($i0)
        {
            case 8: goto label1;
            case 8192: goto label5;
            default: goto label6;
        };

     label1:
        $r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r8 == null goto label2;

        $r11 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r10 = $r11.<android.view.View$AttachInfo: java.util.ArrayList mTempArrayList>;

        goto label3;

     label2:
        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

     label3:
        r2 = $r10;

        $r9 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        virtualinvoke $r9.<android.view.View: void addFocusables(java.util.ArrayList,int,int)>(r2, 2, 0);

        $i6 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setItemCount(int)>($i6);

        $i5 = virtualinvoke r2.<java.util.ArrayList: int indexOf(java.lang.Object)>(r0);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setCurrentItemIndex(int)>($i5);

        $r12 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r12 == null goto label4;

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

     label4:
        goto label6;

     label5:
        r13 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        if r13 == null goto label6;

        $i1 = interfaceinvoke r13.<java.lang.CharSequence: int length()>();

        if $i1 <= 0 goto label6;

        $i2 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionStart()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setFromIndex(int)>($i2);

        $i3 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionEnd()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setToIndex(int)>($i3);

        $i4 = interfaceinvoke r13.<java.lang.CharSequence: int length()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setItemCount(int)>($i4);

     label6:
        return;
    }

    public android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()
    {
        android.view.View r0;
        android.view.View$AccessibilityDelegate $r1, $r3;
        android.view.accessibility.AccessibilityNodeInfo $r2, $r4;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if $r1 == null goto label1;

        $r3 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        $r4 = virtualinvoke $r3.<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(android.view.View)>(r0);

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfoInternal()>();

        return $r2;
    }

    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfoInternal()
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityNodeProvider r1;
        android.view.accessibility.AccessibilityNodeInfo r2, $r3;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>(-1);

        return $r3;

     label1:
        r2 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)>(r0);

        virtualinvoke r0.<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>(r2);

        return r2;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        android.view.View$AccessibilityDelegate $r2, $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        $r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        virtualinvoke $r3.<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(r0, r1);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)>(r1);

     label2:
        return;
    }

    public void getBoundsOnScreen(android.graphics.Rect)
    {
        android.view.View r0, r4;
        android.graphics.Rect r1;
        android.graphics.RectF r2;
        android.view.ViewParent r3;
        android.view.View$AttachInfo $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18;
        boolean $z0, $z1, $z2, $z3;
        android.graphics.Matrix $r9, $r10;
        android.view.ViewRootImpl r11;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r5 != null goto label1;

        return;

     label1:
        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r6.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect>;

        $i1 = r0.<android.view.View: int mRight>;

        $i0 = r0.<android.view.View: int mLeft>;

        $i2 = $i1 - $i0;

        $f1 = (float) $i2;

        $i4 = r0.<android.view.View: int mBottom>;

        $i3 = r0.<android.view.View: int mTop>;

        $i5 = $i4 - $i3;

        $f0 = (float) $i5;

        virtualinvoke r2.<android.graphics.RectF: void set(float,float,float,float)>(0.0F, 0.0F, $f1, $f0);

        $z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if $z0 != 0 goto label2;

        $r10 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r10.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r2);

     label2:
        $i7 = r0.<android.view.View: int mLeft>;

        $f2 = (float) $i7;

        $i6 = r0.<android.view.View: int mTop>;

        $f3 = (float) $i6;

        virtualinvoke r2.<android.graphics.RectF: void offset(float,float)>($f2, $f3);

        r3 = r0.<android.view.View: android.view.ViewParent mParent>;

     label3:
        $z2 = r3 instanceof android.view.View;

        if $z2 == 0 goto label5;

        r4 = (android.view.View) r3;

        $i14 = r4.<android.view.View: int mScrollX>;

        $i18 = neg $i14;

        $f16 = (float) $i18;

        $i19 = r4.<android.view.View: int mScrollY>;

        $i17 = neg $i19;

        $f15 = (float) $i17;

        virtualinvoke r2.<android.graphics.RectF: void offset(float,float)>($f16, $f15);

        $z3 = virtualinvoke r4.<android.view.View: boolean hasIdentityMatrix()>();

        if $z3 != 0 goto label4;

        $r9 = virtualinvoke r4.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r9.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r2);

     label4:
        $i21 = r4.<android.view.View: int mLeft>;

        $f17 = (float) $i21;

        $i20 = r4.<android.view.View: int mTop>;

        $f18 = (float) $i20;

        virtualinvoke r2.<android.graphics.RectF: void offset(float,float)>($f17, $f18);

        r3 = r4.<android.view.View: android.view.ViewParent mParent>;

        goto label3;

     label5:
        $z1 = r3 instanceof android.view.ViewRootImpl;

        if $z1 == 0 goto label6;

        r11 = (android.view.ViewRootImpl) r3;

        $i15 = r11.<android.view.ViewRootImpl: int mCurScrollY>;

        $i16 = neg $i15;

        $f14 = (float) $i16;

        virtualinvoke r2.<android.graphics.RectF: void offset(float,float)>(0.0F, $f14);

     label6:
        $r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i8 = $r7.<android.view.View$AttachInfo: int mWindowLeft>;

        $f4 = (float) $i8;

        $r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i9 = $r8.<android.view.View$AttachInfo: int mWindowTop>;

        $f5 = (float) $i9;

        virtualinvoke r2.<android.graphics.RectF: void offset(float,float)>($f4, $f5);

        $f7 = r2.<android.graphics.RectF: float left>;

        $f6 = $f7 + 0.5F;

        $i11 = (int) $f6;

        $f9 = r2.<android.graphics.RectF: float top>;

        $f8 = $f9 + 0.5F;

        $i10 = (int) $f8;

        $f12 = r2.<android.graphics.RectF: float right>;

        $f13 = $f12 + 0.5F;

        $i13 = (int) $f13;

        $f10 = r2.<android.graphics.RectF: float bottom>;

        $f11 = $f10 + 0.5F;

        $i12 = (int) $f11;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i11, $i10, $i13, $i12);

        return;
    }

    void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.View r0, r4, r5, $r14, r18, r19;
        android.view.accessibility.AccessibilityNodeInfo r1;
        android.graphics.Rect r2;
        android.view.ViewParent r3;
        java.lang.String r6, $r9, $r12;
        android.view.View$AttachInfo $r7, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.content.Context $r8;
        java.lang.Class $r10;
        java.lang.CharSequence $r11, r20;
        android.content.res.Resources $r15;
        android.content.res.Resources$NotFoundException $r16;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        $r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r7.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        virtualinvoke r0.<android.view.View: void getDrawingRect(android.graphics.Rect)>(r2);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>(r2);

        virtualinvoke r0.<android.view.View: void getBoundsOnScreen(android.graphics.Rect)>(r2);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>(r2);

        r3 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParentForAccessibility()>();

        $z0 = r3 instanceof android.view.View;

        if $z0 == 0 goto label01;

        $r14 = (android.view.View) r3;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>($r14);

     label01:
        $i0 = r0.<android.view.View: int mID>;

        if $i0 == -1 goto label07;

        r4 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        if r4 != null goto label02;

        r4 = r0;

     label02:
        $i7 = r0.<android.view.View: int mID>;

        r5 = specialinvoke r4.<android.view.View: android.view.View findLabelForView(android.view.View,int)>(r0, $i7);

        if r5 == null goto label03;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)>(r5);

     label03:
        $r13 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i9 = $r13.<android.view.View$AttachInfo: int mAccessibilityFetchFlags>;

        $i10 = $i9 & 16;

        if $i10 == 0 goto label07;

        $i8 = r0.<android.view.View: int mID>;

        $z16 = staticinvoke <android.content.res.Resources: boolean resourceHasPackage(int)>($i8);

        if $z16 == 0 goto label07;

     label04:
        $r15 = virtualinvoke r0.<android.view.View: android.content.res.Resources getResources()>();

        $i11 = r0.<android.view.View: int mID>;

        r6 = virtualinvoke $r15.<android.content.res.Resources: java.lang.String getResourceName(int)>($i11);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setViewIdResourceName(java.lang.String)>(r6);

     label05:
        goto label07;

     label06:
        $r16 := @caughtexception;

     label07:
        $i1 = r0.<android.view.View: int mLabelForId>;

        if $i1 == -1 goto label09;

        r18 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        if r18 != null goto label08;

        r18 = r0;

     label08:
        $i6 = r0.<android.view.View: int mLabelForId>;

        r19 = specialinvoke r18.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r0, $i6);

        if r19 == null goto label09;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)>(r19);

     label09:
        $z1 = virtualinvoke r0.<android.view.View: boolean isVisibleToUser()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)>($z1);

        $r8 = r0.<android.view.View: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>($r9);

        $r10 = class "android/view/View";

        $r12 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>($r12);

        $r11 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getContentDescription()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)>($r11);

        $z3 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>($z3);

        $z2 = virtualinvoke r0.<android.view.View: boolean isClickable()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>($z2);

        $z5 = virtualinvoke r0.<android.view.View: boolean isFocusable()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>($z5);

        $z4 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>($z4);

        $z7 = virtualinvoke r0.<android.view.View: boolean isAccessibilityFocused()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)>($z7);

        $z6 = virtualinvoke r0.<android.view.View: boolean isSelected()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)>($z6);

        $z8 = virtualinvoke r0.<android.view.View: boolean isLongClickable()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>($z8);

        $i2 = virtualinvoke r0.<android.view.View: int getAccessibilityLiveRegion()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setLiveRegion(int)>($i2);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(4);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(8);

        $z10 = virtualinvoke r0.<android.view.View: boolean isFocusable()>();

        if $z10 == 0 goto label11;

        $z15 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z15 == 0 goto label10;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(2);

        goto label11;

     label10:
        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(1);

     label11:
        $z9 = virtualinvoke r0.<android.view.View: boolean isAccessibilityFocused()>();

        if $z9 != 0 goto label12;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(64);

        goto label13;

     label12:
        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(128);

     label13:
        $z12 = virtualinvoke r0.<android.view.View: boolean isClickable()>();

        if $z12 == 0 goto label14;

        $z14 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        if $z14 == 0 goto label14;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(16);

     label14:
        $z11 = virtualinvoke r0.<android.view.View: boolean isLongClickable()>();

        if $z11 == 0 goto label15;

        $z13 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        if $z13 == 0 goto label15;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(32);

     label15:
        r20 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        if r20 == null goto label16;

        $i3 = interfaceinvoke r20.<java.lang.CharSequence: int length()>();

        if $i3 <= 0 goto label16;

        $i4 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionStart()>();

        $i5 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionEnd()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setTextSelection(int,int)>($i4, $i5);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(131072);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(256);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(512);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)>(11);

     label16:
        return;

        catch android.content.res.Resources$NotFoundException from label04 to label05 with label06;
    }

    private android.view.View findLabelForView(android.view.View, int)
    {
        android.view.View r0, r1, $r5;
        int i0;
        android.view.View$MatchLabelForPredicate $r2, $r3, $r4, $r6;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        $r2 = r0.<android.view.View: android.view.View$MatchLabelForPredicate mMatchLabelForPredicate>;

        if $r2 != null goto label1;

        $r6 = new android.view.View$MatchLabelForPredicate;

        specialinvoke $r6.<android.view.View$MatchLabelForPredicate: void <init>(android.view.View,android.view.View$1)>(r0, null);

        r0.<android.view.View: android.view.View$MatchLabelForPredicate mMatchLabelForPredicate> = $r6;

     label1:
        $r3 = r0.<android.view.View: android.view.View$MatchLabelForPredicate mMatchLabelForPredicate>;

        staticinvoke <android.view.View$MatchLabelForPredicate: int access$902(android.view.View$MatchLabelForPredicate,int)>($r3, i0);

        $r4 = r0.<android.view.View: android.view.View$MatchLabelForPredicate mMatchLabelForPredicate>;

        $r5 = virtualinvoke r0.<android.view.View: android.view.View findViewByPredicateInsideOut(android.view.View,com.android.internal.util.Predicate)>(r1, $r4);

        return $r5;
    }

    protected boolean isVisibleToUser()
    {
        android.view.View r0;
        boolean $z0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isVisibleToUser(android.graphics.Rect)>(null);

        return $z0;
    }

    protected boolean isVisibleToUser(android.graphics.Rect)
    {
        android.view.View r0, r3;
        android.graphics.Rect r1, r9;
        java.lang.Object r2;
        android.graphics.Point r4;
        android.view.View$AttachInfo $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        boolean $z0, $z1, $z2;
        float $f0, $f1;
        byte $b5, $b7;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r5 == null goto label8;

        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r6.<android.view.View$AttachInfo: int mWindowVisibility>;

        if $i0 == 0 goto label1;

        return 0;

     label1:
        r2 = r0;

     label2:
        $z0 = r2 instanceof android.view.View;

        if $z0 == 0 goto label5;

        r3 = (android.view.View) r2;

        $f0 = virtualinvoke r3.<android.view.View: float getAlpha()>();

        $b5 = $f0 cmpg 0.0F;

        if $b5 <= 0 goto label3;

        $f1 = virtualinvoke r3.<android.view.View: float getTransitionAlpha()>();

        $b7 = $f1 cmpg 0.0F;

        if $b7 <= 0 goto label3;

        $i6 = virtualinvoke r3.<android.view.View: int getVisibility()>();

        if $i6 == 0 goto label4;

     label3:
        return 0;

     label4:
        r2 = r3.<android.view.View: android.view.ViewParent mParent>;

        goto label2;

     label5:
        $r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r9 = $r7.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        $r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r4 = $r8.<android.view.View$AttachInfo: android.graphics.Point mPoint>;

        $z1 = virtualinvoke r0.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>(r9, r4);

        if $z1 != 0 goto label6;

        return 0;

     label6:
        if r1 == null goto label7;

        $i1 = r4.<android.graphics.Point: int x>;

        $i4 = neg $i1;

        $i2 = r4.<android.graphics.Point: int y>;

        $i3 = neg $i2;

        virtualinvoke r9.<android.graphics.Rect: void offset(int,int)>($i4, $i3);

        $z2 = virtualinvoke r1.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r9);

        return $z2;

     label7:
        return 1;

     label8:
        return 0;
    }

    boolean computeClickPointInScreenForAccessibility(android.graphics.Region, android.graphics.Point)
    {
        android.view.View r0;
        android.graphics.Region r1, r6, $r16;
        android.graphics.Point r2;
        android.graphics.RectF r3, r7;
        java.util.List r4;
        android.view.ViewGroup r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20;
        float[] r8;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;
        android.view.View$AttachInfo $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r19;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z9;
        android.view.ViewParent $r13, $r23;
        android.graphics.PathMeasure $r18, r26;
        java.lang.Object $r20;
        android.graphics.Region$Op $r21, $r22;
        android.graphics.Rect r24;
        android.graphics.Path r25;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Region;

        r2 := @parameter1: android.graphics.Point;

        $r9 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r9 != null goto label01;

        return 0;

     label01:
        $r10 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i3 = $r10.<android.view.View$AttachInfo: int mWindowVisibility>;

        if $i3 == 0 goto label02;

        return 0;

     label02:
        $r11 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r3 = $r11.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect>;

        $i4 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $f1 = (float) $i4;

        $i5 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $f2 = (float) $i5;

        virtualinvoke r3.<android.graphics.RectF: void set(float,float,float,float)>(0.0F, 0.0F, $f1, $f2);

        $r12 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r4 = $r12.<android.view.View$AttachInfo: java.util.List mTmpRectList>;

        interfaceinvoke r4.<java.util.List: void clear()>();

        $r13 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = $r13 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label03;

        $r23 = r0.<android.view.View: android.view.ViewParent mParent>;

        r5 = (android.view.ViewGroup) $r23;

        $z9 = virtualinvoke r5.<android.view.ViewGroup: boolean translateBoundsAndIntersectionsInWindowCoordinates(android.view.View,android.graphics.RectF,java.util.List)>(r0, r3, r4);

        if $z9 != 0 goto label03;

        interfaceinvoke r4.<java.util.List: void clear()>();

        return 0;

     label03:
        $r15 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        i20 = $r15.<android.view.View$AttachInfo: int mWindowLeft>;

        $r14 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        i0 = $r14.<android.view.View$AttachInfo: int mWindowTop>;

        $f3 = (float) i20;

        $f4 = (float) i0;

        virtualinvoke r3.<android.graphics.RectF: void offset(float,float)>($f3, $f4);

        $f5 = (float) i20;

        $f6 = (float) i0;

        staticinvoke <android.view.View: void offsetRects(java.util.List,float,float)>(r4, $f5, $f6);

        $z1 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label04;

        if r1 != null goto label04;

        $f18 = virtualinvoke r3.<android.graphics.RectF: float centerX()>();

        $i19 = (int) $f18;

        $f19 = virtualinvoke r3.<android.graphics.RectF: float centerY()>();

        $i18 = (int) $f19;

        virtualinvoke r2.<android.graphics.Point: void set(int,int)>($i19, $i18);

        goto label12;

     label04:
        $r16 = new android.graphics.Region;

        specialinvoke $r16.<android.graphics.Region: void <init>()>();

        r6 = $r16;

        $f7 = r3.<android.graphics.RectF: float left>;

        $i9 = (int) $f7;

        $f8 = r3.<android.graphics.RectF: float top>;

        $i8 = (int) $f8;

        $f9 = r3.<android.graphics.RectF: float right>;

        $i7 = (int) $f9;

        $f10 = r3.<android.graphics.RectF: float bottom>;

        $i6 = (int) $f10;

        virtualinvoke r6.<android.graphics.Region: boolean set(int,int,int,int)>($i9, $i8, $i7, $i6);

        i1 = interfaceinvoke r4.<java.util.List: int size()>();

        i2 = i1 - 1;

     label05:
        if i2 < 0 goto label06;

        $r20 = interfaceinvoke r4.<java.util.List: java.lang.Object remove(int)>(i2);

        r7 = (android.graphics.RectF) $r20;

        $f14 = r7.<android.graphics.RectF: float left>;

        $i17 = (int) $f14;

        $f15 = r7.<android.graphics.RectF: float top>;

        $i16 = (int) $f15;

        $f16 = r7.<android.graphics.RectF: float right>;

        $i15 = (int) $f16;

        $f17 = r7.<android.graphics.RectF: float bottom>;

        $i14 = (int) $f17;

        $r22 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke r6.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>($i17, $i16, $i15, $i14, $r22);

        i2 = i2 + -1;

        goto label05;

     label06:
        $z4 = virtualinvoke r6.<android.graphics.Region: boolean isEmpty()>();

        if $z4 == 0 goto label07;

        return 0;

     label07:
        if r1 == null goto label08;

        $r21 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        virtualinvoke r6.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>(r1, $r21);

     label08:
        $z5 = virtualinvoke r6.<android.graphics.Region: boolean isEmpty()>();

        if $z5 == 0 goto label09;

        return 0;

     label09:
        $z3 = virtualinvoke r6.<android.graphics.Region: boolean isRect()>();

        if $z3 == 0 goto label10;

        $r19 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r24 = $r19.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        virtualinvoke r6.<android.graphics.Region: boolean getBounds(android.graphics.Rect)>(r24);

        $i13 = virtualinvoke r24.<android.graphics.Rect: int centerX()>();

        $i12 = virtualinvoke r24.<android.graphics.Rect: int centerY()>();

        virtualinvoke r2.<android.graphics.Point: void set(int,int)>($i13, $i12);

        return 1;

     label10:
        r25 = virtualinvoke r6.<android.graphics.Region: android.graphics.Path getBoundaryPath()>();

        $r18 = new android.graphics.PathMeasure;

        specialinvoke $r18.<android.graphics.PathMeasure: void <init>(android.graphics.Path,boolean)>(r25, 0);

        r26 = $r18;

        $r17 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r8 = $r17.<android.view.View$AttachInfo: float[] mTmpTransformLocation>;

        $f11 = virtualinvoke r26.<android.graphics.PathMeasure: float getLength()>();

        f0 = $f11 * 0.01F;

        $z6 = virtualinvoke r26.<android.graphics.PathMeasure: boolean getPosTan(float,float[],float[])>(f0, r8, null);

        if $z6 != 0 goto label11;

        return 0;

     label11:
        $f13 = r8[0];

        $i11 = staticinvoke <java.lang.Math: int round(float)>($f13);

        $f12 = r8[1];

        $i10 = staticinvoke <java.lang.Math: int round(float)>($f12);

        virtualinvoke r2.<android.graphics.Point: void set(int,int)>($i11, $i10);

     label12:
        return 1;
    }

    static void offsetRects(java.util.List, float, float)
    {
        java.util.List r0;
        float f0, f1;
        int i0, i1;
        android.graphics.RectF r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.util.List;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r1 = (android.graphics.RectF) $r2;

        virtualinvoke r1.<android.graphics.RectF: void offset(float,float)>(f0, f1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public android.view.View$AccessibilityDelegate getAccessibilityDelegate()
    {
        android.view.View r0;
        android.view.View$AccessibilityDelegate $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        return $r1;
    }

    public void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)
    {
        android.view.View r0;
        android.view.View$AccessibilityDelegate r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$AccessibilityDelegate;

        r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate> = r1;

        return;
    }

    public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
    {
        android.view.View r0;
        android.view.View$AccessibilityDelegate $r1, $r2;
        android.view.accessibility.AccessibilityNodeProvider $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        $r3 = virtualinvoke $r2.<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)>(r0);

        return $r3;

     label1:
        return null;
    }

    public int getAccessibilityViewId()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mAccessibilityViewId>;

        if $i0 != -1 goto label1;

        $i2 = <android.view.View: int sNextAccessibilityViewId>;

        $i3 = $i2 + 1;

        <android.view.View: int sNextAccessibilityViewId> = $i3;

        r0.<android.view.View: int mAccessibilityViewId> = $i2;

     label1:
        $i1 = r0.<android.view.View: int mAccessibilityViewId>;

        return $i1;
    }

    public int getAccessibilityWindowId()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        int $i0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r2.<android.view.View$AttachInfo: int mAccessibilityWindowId>;

        goto label2;

     label1:
        $i0 = 2147483647;

     label2:
        return $i0;
    }

    public java.lang.CharSequence getContentDescription()
    {
        android.view.View r0;
        java.lang.CharSequence $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: java.lang.CharSequence mContentDescription>;

        return $r1;
    }

    public void setContentDescription(java.lang.CharSequence)
    {
        android.view.View r0;
        java.lang.CharSequence r1, $r2, $r3;
        boolean z0, $z1, $z2;
        int $i0, $i1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<android.view.View: java.lang.CharSequence mContentDescription>;

        if $r2 != null goto label1;

        if r1 != null goto label2;

        return;

     label1:
        $r3 = r0.<android.view.View: java.lang.CharSequence mContentDescription>;

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return;

     label2:
        r0.<android.view.View: java.lang.CharSequence mContentDescription> = r1;

        if r1 == null goto label3;

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i1 <= 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z0 = $z2;

        if z0 == 0 goto label5;

        $i0 = virtualinvoke r0.<android.view.View: int getImportantForAccessibility()>();

        if $i0 != 0 goto label5;

        virtualinvoke r0.<android.view.View: void setImportantForAccessibility(int)>(1);

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

        goto label6;

     label5:
        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(4);

     label6:
        return;
    }

    public int getLabelFor()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mLabelForId>;

        return $i0;
    }

    public void setLabelFor(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mLabelForId> = i0;

        $i1 = r0.<android.view.View: int mLabelForId>;

        if $i1 == -1 goto label1;

        $i2 = r0.<android.view.View: int mID>;

        if $i2 != -1 goto label1;

        $i3 = staticinvoke <android.view.View: int generateViewId()>();

        r0.<android.view.View: int mID> = $i3;

     label1:
        return;
    }

    protected void onFocusLost()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void resetPressedState()>();

        return;
    }

    private void resetPressedState()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 32;

        if $i1 != 32 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean isPressed()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

        $z1 = r0.<android.view.View: boolean mHasPerformedLongPress>;

        if $z1 != 0 goto label2;

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

     label2:
        return;
    }

    public boolean isFocused()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public android.view.View findFocus()
    {
        android.view.View r0, $r1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $r1 = r0;

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    public boolean isScrollContainer()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 1048576;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setScrollContainer(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.View$AttachInfo $r1, $r3, $r4;
        java.util.ArrayList $r2, $r5;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label1;

        $i6 = r0.<android.view.View: int mPrivateFlags>;

        $i7 = $i6 & 1048576;

        if $i7 != 0 goto label1;

        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        $i8 = r0.<android.view.View: int mPrivateFlags>;

        $i9 = $i8 | 1048576;

        r0.<android.view.View: int mPrivateFlags> = $i9;

     label1:
        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 | 524288;

        r0.<android.view.View: int mPrivateFlags> = $i5;

        goto label4;

     label2:
        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 1048576;

        if $i1 == 0 goto label3;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r0);

     label3:
        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -1572865;

        r0.<android.view.View: int mPrivateFlags> = $i3;

     label4:
        return;
    }

    public int getDrawingCacheQuality()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 1572864;

        return $i1;
    }

    public void setDrawingCacheQuality(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 1572864);

        return;
    }

    public boolean getKeepScreenOn()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 67108864;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setKeepScreenOn(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i0 = 67108864;

        goto label2;

     label1:
        $i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($i0, 67108864);

        return;
    }

    public int getNextFocusLeftId()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mNextFocusLeftId>;

        return $i0;
    }

    public void setNextFocusLeftId(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mNextFocusLeftId> = i0;

        return;
    }

    public int getNextFocusRightId()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mNextFocusRightId>;

        return $i0;
    }

    public void setNextFocusRightId(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mNextFocusRightId> = i0;

        return;
    }

    public int getNextFocusUpId()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mNextFocusUpId>;

        return $i0;
    }

    public void setNextFocusUpId(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mNextFocusUpId> = i0;

        return;
    }

    public int getNextFocusDownId()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mNextFocusDownId>;

        return $i0;
    }

    public void setNextFocusDownId(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mNextFocusDownId> = i0;

        return;
    }

    public int getNextFocusForwardId()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mNextFocusForwardId>;

        return $i0;
    }

    public void setNextFocusForwardId(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mNextFocusForwardId> = i0;

        return;
    }

    public boolean isShown()
    {
        android.view.View r0, r1;
        android.view.ViewParent r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 = r0;

     label1:
        $i0 = r1.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 12;

        if $i1 == 0 goto label2;

        return 0;

     label2:
        r2 = r1.<android.view.View: android.view.ViewParent mParent>;

        if r2 != null goto label3;

        return 0;

     label3:
        $z0 = r2 instanceof android.view.View;

        if $z0 != 0 goto label4;

        return 1;

     label4:
        r1 = (android.view.View) r2;

        if r1 != null goto label1;

        return 0;
    }

    protected boolean fitSystemWindows(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        boolean z0, $z1;
        java.lang.Throwable r2, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.WindowInsets $r3, $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 32;

        if $i1 != 0 goto label5;

        if r1 != null goto label1;

        return 0;

     label1:
        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 | 64;

        r0.<android.view.View: int mPrivateFlags3> = $i3;

        $r3 = new android.view.WindowInsets;

        specialinvoke $r3.<android.view.WindowInsets: void <init>(android.graphics.Rect)>(r1);

        $r4 = virtualinvoke r0.<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>($r3);

        z0 = virtualinvoke $r4.<android.view.WindowInsets: boolean isConsumed()>();

     label2:
        $i4 = r0.<android.view.View: int mPrivateFlags3>;

        $i5 = $i4 & -65;

        r0.<android.view.View: int mPrivateFlags3> = $i5;

        return z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        $i6 = r0.<android.view.View: int mPrivateFlags3>;

        $i7 = $i6 & -65;

        r0.<android.view.View: int mPrivateFlags3> = $i7;

        throw r2;

     label5:
        $z1 = specialinvoke r0.<android.view.View: boolean fitSystemWindowsInt(android.graphics.Rect)>(r1);

        return $z1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean fitSystemWindowsInt(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1, r2, $r5;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.ThreadLocal $r3, $r6;
        java.lang.Object $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 2;

        if $i1 != 2 goto label2;

        r0.<android.view.View: int mUserPaddingStart> = -2147483648;

        r0.<android.view.View: int mUserPaddingEnd> = -2147483648;

        $r3 = <android.view.View: java.lang.ThreadLocal sThreadLocal>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (android.graphics.Rect) $r4;

        if r2 != null goto label1;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r2 = $r5;

        $r6 = <android.view.View: java.lang.ThreadLocal sThreadLocal>;

        virtualinvoke $r6.<java.lang.ThreadLocal: void set(java.lang.Object)>(r2);

     label1:
        z0 = virtualinvoke r0.<android.view.View: boolean computeFitSystemWindows(android.graphics.Rect,android.graphics.Rect)>(r1, r2);

        $i2 = r2.<android.graphics.Rect: int left>;

        r0.<android.view.View: int mUserPaddingLeftInitial> = $i2;

        $i3 = r2.<android.graphics.Rect: int right>;

        r0.<android.view.View: int mUserPaddingRightInitial> = $i3;

        $i7 = r2.<android.graphics.Rect: int left>;

        $i6 = r2.<android.graphics.Rect: int top>;

        $i5 = r2.<android.graphics.Rect: int right>;

        $i4 = r2.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>($i7, $i6, $i5, $i4);

        return z0;

     label2:
        return 0;
    }

    public android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)
    {
        android.view.View r0;
        android.view.WindowInsets r1, $r3, $r5;
        int $i0, $i1;
        android.graphics.Rect $r2, $r4;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.WindowInsets;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 64;

        if $i1 != 0 goto label1;

        $r4 = virtualinvoke r1.<android.view.WindowInsets: android.graphics.Rect getSystemWindowInsets()>();

        $z1 = virtualinvoke r0.<android.view.View: boolean fitSystemWindows(android.graphics.Rect)>($r4);

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke r1.<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>();

        return $r5;

     label1:
        $r2 = virtualinvoke r1.<android.view.WindowInsets: android.graphics.Rect getSystemWindowInsets()>();

        $z0 = specialinvoke r0.<android.view.View: boolean fitSystemWindowsInt(android.graphics.Rect)>($r2);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r1.<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>();

        return $r3;

     label2:
        return r1;
    }

    public void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)
    {
        android.view.View r0;
        android.view.View$OnApplyWindowInsetsListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnApplyWindowInsetsListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.View$OnApplyWindowInsetsListener mOnApplyWindowInsetsListener> = r1;

        return;
    }

    public android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)
    {
        android.view.View r0;
        android.view.WindowInsets r1, r2, r10;
        java.lang.Throwable r3, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.View$ListenerInfo $r4, $r5, $r7;
        android.view.View$OnApplyWindowInsetsListener $r6, $r8;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.WindowInsets;

     label1:
        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 | 32;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

        $r4 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if $r4 == null goto label3;

        $r5 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r6 = $r5.<android.view.View$ListenerInfo: android.view.View$OnApplyWindowInsetsListener mOnApplyWindowInsetsListener>;

        if $r6 == null goto label3;

        $r7 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r8 = $r7.<android.view.View$ListenerInfo: android.view.View$OnApplyWindowInsetsListener mOnApplyWindowInsetsListener>;

        r2 = interfaceinvoke $r8.<android.view.View$OnApplyWindowInsetsListener: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>(r0, r1);

     label2:
        $i4 = r0.<android.view.View: int mPrivateFlags3>;

        $i5 = $i4 & -33;

        r0.<android.view.View: int mPrivateFlags3> = $i5;

        return r2;

     label3:
        r10 = virtualinvoke r0.<android.view.View: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>(r1);

     label4:
        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 & -33;

        r0.<android.view.View: int mPrivateFlags3> = $i3;

        return r10;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

     label6:
        $i7 = r0.<android.view.View: int mPrivateFlags3>;

        $i6 = $i7 & -33;

        r0.<android.view.View: int mPrivateFlags3> = $i6;

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected boolean computeFitSystemWindows(android.graphics.Rect, android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1, r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        android.view.View$AttachInfo $r4, $r5, $r6, $r7;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 2048;

        if $i1 == 0 goto label1;

        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label1;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i2 = $r5.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        $i3 = $i2 & 1536;

        if $i3 != 0 goto label2;

        $r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r7.<android.view.View$AttachInfo: boolean mOverscanRequested>;

        if $z0 != 0 goto label2;

     label1:
        virtualinvoke r2.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

        return 1;

     label2:
        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r3 = $r6.<android.view.View$AttachInfo: android.graphics.Rect mOverscanInsets>;

        virtualinvoke r2.<android.graphics.Rect: void set(android.graphics.Rect)>(r3);

        $i5 = r1.<android.graphics.Rect: int left>;

        $i4 = r3.<android.graphics.Rect: int left>;

        $i6 = $i5 - $i4;

        r1.<android.graphics.Rect: int left> = $i6;

        $i8 = r1.<android.graphics.Rect: int top>;

        $i7 = r3.<android.graphics.Rect: int top>;

        $i10 = $i8 - $i7;

        r1.<android.graphics.Rect: int top> = $i10;

        $i12 = r1.<android.graphics.Rect: int right>;

        $i9 = r3.<android.graphics.Rect: int right>;

        $i11 = $i12 - $i9;

        r1.<android.graphics.Rect: int right> = $i11;

        $i13 = r1.<android.graphics.Rect: int bottom>;

        $i14 = r3.<android.graphics.Rect: int bottom>;

        $i15 = $i13 - $i14;

        r1.<android.graphics.Rect: int bottom> = $i15;

        return 0;
    }

    public android.view.WindowInsets computeSystemWindowInsets(android.view.WindowInsets, android.graphics.Rect)
    {
        android.view.View r0;
        android.view.WindowInsets r1, $r4;
        android.graphics.Rect r2, $r3;
        int $i0, $i1, $i2, $i3;
        android.view.View$AttachInfo $r5, $r6;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.WindowInsets;

        r2 := @parameter1: android.graphics.Rect;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 2048;

        if $i1 == 0 goto label1;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r5 == null goto label1;

        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i2 = $r6.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        $i3 = $i2 & 1536;

        if $i3 != 0 goto label2;

     label1:
        $r3 = virtualinvoke r1.<android.view.WindowInsets: android.graphics.Rect getSystemWindowInsets()>();

        virtualinvoke r2.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

        $r4 = virtualinvoke r1.<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>();

        return $r4;

     label2:
        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

        return r1;
    }

    public void setFitsSystemWindows(boolean)
    {
        android.view.View r0;
        boolean z0;
        byte $b0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b0 = 2;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($b0, 2);

        return;
    }

    public boolean getFitsSystemWindows()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 2;

        if $i1 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean fitsSystemWindows()
    {
        android.view.View r0;
        boolean $z0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean getFitsSystemWindows()>();

        return $z0;
    }

    public void requestFitSystemWindows()
    {
        android.view.View r0;
        android.view.ViewParent $r1, $r2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r2.<android.view.ViewParent: void requestFitSystemWindows()>();

     label1:
        return;
    }

    public void requestApplyInsets()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void requestFitSystemWindows()>();

        return;
    }

    public void makeOptionalFitsSystemWindows()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(2048, 2048);

        return;
    }

    public int getVisibility()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 12;

        return $i1;
    }

    public void setVisibility(int)
    {
        android.view.View r0;
        int i0;
        android.graphics.drawable.Drawable $r1, $r2;
        boolean $z1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 12);

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r1 == null goto label3;

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if i0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z1, 0);

     label3:
        return;
    }

    public boolean isEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 32;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setEnabled(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        byte $b0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        if z0 != $z1 goto label1;

        return;

     label1:
        if z0 == 0 goto label2;

        $b0 = 0;

        goto label3;

     label2:
        $b0 = 32;

     label3:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($b0, 32);

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        if z0 != 0 goto label4;

        virtualinvoke r0.<android.view.View: void cancelPendingInputEvents()>();

     label4:
        return;
    }

    public void setFocusable(boolean)
    {
        android.view.View r0;
        boolean z0;
        byte $b0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(0, 262144);

     label1:
        if z0 == 0 goto label2;

        $b0 = 1;

        goto label3;

     label2:
        $b0 = 0;

     label3:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($b0, 1);

        return;
    }

    public void setFocusableInTouchMode(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i0 = 262144;

        goto label2;

     label1:
        $i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($i0, 262144);

        if z0 == 0 goto label3;

        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(1, 1);

     label3:
        return;
    }

    public void setSoundEffectsEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i0 = 134217728;

        goto label2;

     label1:
        $i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($i0, 134217728);

        return;
    }

    public boolean isSoundEffectsEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 134217728;

        if 134217728 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setHapticFeedbackEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i0 = 268435456;

        goto label2;

     label1:
        $i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($i0, 268435456);

        return;
    }

    public boolean isHapticFeedbackEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 268435456;

        if 268435456 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getRawLayoutDirection()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 12;

        $i2 = $i1 >> 2;

        return $i2;
    }

    public void setLayoutDirection(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.view.View: int getRawLayoutDirection()>();

        if $i1 == i0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 & -13;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        virtualinvoke r0.<android.view.View: void resetRtlProperties()>();

        $i6 = r0.<android.view.View: int mPrivateFlags2>;

        $i4 = i0 << 2;

        $i5 = $i4 & 12;

        $i7 = $i6 | $i5;

        r0.<android.view.View: int mPrivateFlags2> = $i7;

        virtualinvoke r0.<android.view.View: boolean resolveRtlPropertiesIfNeeded()>();

        virtualinvoke r0.<android.view.View: void requestLayout()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label1:
        return;
    }

    public int getLayoutDirection()
    {
        android.view.View r0;
        int i0, $i1, $i2, $i4, $i5;
        android.content.Context $r1;
        android.content.pm.ApplicationInfo $r2;
        byte $b3;

        r0 := @this: android.view.View;

        $r1 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i0 = $r2.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if i0 >= 17 goto label1;

        $i4 = r0.<android.view.View: int mPrivateFlags2>;

        $i5 = $i4 | 32;

        r0.<android.view.View: int mPrivateFlags2> = $i5;

        return 0;

     label1:
        $i1 = r0.<android.view.View: int mPrivateFlags2>;

        $i2 = $i1 & 16;

        if $i2 != 16 goto label2;

        $b3 = 1;

        goto label3;

     label2:
        $b3 = 0;

     label3:
        return $b3;
    }

    public boolean isLayoutRtl()
    {
        android.view.View r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasTransientState()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -2147483648;

        if $i1 != -2147483648 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setHasTransientState(boolean)
    {
        android.view.View r0;
        boolean z0;
        java.lang.AbstractMethodError r1, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        android.view.ViewParent $r2, $r3, $r6;
        java.lang.StringBuilder $r4, $r9, $r10;
        java.lang.String $r7, $r11;
        java.lang.Class $r8;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label01;

        $i10 = r0.<android.view.View: int mTransientStateCount>;

        $i1 = $i10 + 1;

        goto label02;

     label01:
        $i0 = r0.<android.view.View: int mTransientStateCount>;

        $i1 = $i0 - 1;

     label02:
        r0.<android.view.View: int mTransientStateCount> = $i1;

        $i2 = r0.<android.view.View: int mTransientStateCount>;

        if $i2 >= 0 goto label03;

        r0.<android.view.View: int mTransientStateCount> = 0;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("View", "hasTransientState decremented below 0: unmatched pair of setHasTransientState calls");

        goto label11;

     label03:
        if z0 == 0 goto label04;

        $i8 = r0.<android.view.View: int mTransientStateCount>;

        if $i8 == 1 goto label05;

     label04:
        if z0 != 0 goto label11;

        $i3 = r0.<android.view.View: int mTransientStateCount>;

        if $i3 != 0 goto label11;

     label05:
        $i4 = r0.<android.view.View: int mPrivateFlags2>;

        $i5 = $i4 & 2147483647;

        if z0 == 0 goto label06;

        $i7 = -2147483648;

        goto label07;

     label06:
        $i7 = 0;

     label07:
        $i6 = $i5 | $i7;

        r0.<android.view.View: int mPrivateFlags2> = $i6;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r2 == null goto label11;

     label08:
        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void childHasTransientStateChanged(android.view.View,boolean)>(r0, z0);

     label09:
        goto label11;

     label10:
        $r5 := @caughtexception;

        r1 = $r5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r8 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r8.<java.lang.Class: java.lang.String getSimpleName()>();

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r11, r1);

     label11:
        return;

        catch java.lang.AbstractMethodError from label08 to label09 with label10;
    }

    public boolean isAttachedToWindow()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isLaidOut()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 4;

        if $i1 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setWillNotDraw(boolean)
    {
        android.view.View r0;
        boolean z0;
        short $s0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $s0 = 128;

        goto label2;

     label1:
        $s0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($s0, 128);

        return;
    }

    public boolean willNotDraw()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 128;

        if $i1 != 128 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setWillNotCacheDrawing(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i0 = 131072;

        goto label2;

     label1:
        $i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($i0, 131072);

        return;
    }

    public boolean willNotCacheDrawing()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 131072;

        if $i1 != 131072 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isClickable()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 16384;

        if $i1 != 16384 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setClickable(boolean)
    {
        android.view.View r0;
        boolean z0;
        short $s0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $s0 = 16384;

        goto label2;

     label1:
        $s0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($s0, 16384);

        return;
    }

    public boolean isLongClickable()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 2097152;

        if $i1 != 2097152 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setLongClickable(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i0 = 2097152;

        goto label2;

     label1:
        $i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($i0, 2097152);

        return;
    }

    private void setPressed(boolean, float, float)
    {
        android.view.View r0;
        boolean z0;
        float f0, f1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void drawableHotspotChanged(float,float)>(f0, f1);

     label1:
        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(z0);

        return;
    }

    public void setPressed(boolean)
    {
        android.view.View r0;
        boolean z0, z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 16384;

        if $i1 != 16384 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if z0 == $z3 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z1 = $z2;

        if z0 == 0 goto label5;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 | 16384;

        r0.<android.view.View: int mPrivateFlags> = $i5;

        goto label6;

     label5:
        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -16385;

        r0.<android.view.View: int mPrivateFlags> = $i3;

     label6:
        if z1 == 0 goto label7;

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

     label7:
        virtualinvoke r0.<android.view.View: void dispatchSetPressed(boolean)>(z0);

        return;
    }

    protected void dispatchSetPressed(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean isPressed()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 16384;

        if $i1 != 16384 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSaveEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 65536;

        if $i1 == 65536 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setSaveEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = 65536;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($i0, 65536);

        return;
    }

    public boolean getFilterTouchesWhenObscured()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setFilterTouchesWhenObscured(boolean)
    {
        android.view.View r0;
        boolean z0;
        short $s0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $s0 = 1024;

        goto label2;

     label1:
        $s0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($s0, 1024);

        return;
    }

    public boolean isSaveFromParentEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 536870912;

        if $i1 == 536870912 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setSaveFromParentEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = 536870912;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($i0, 536870912);

        return;
    }

    public final boolean isFocusable()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 1;

        if 1 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isFocusableInTouchMode()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 262144;

        if 262144 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public android.view.View focusSearch(int)
    {
        android.view.View r0, $r3;
        int i0;
        android.view.ViewParent $r1, $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r3 = interfaceinvoke $r2.<android.view.ViewParent: android.view.View focusSearch(android.view.View,int)>(r0, i0);

        return $r3;

     label1:
        return null;
    }

    public boolean dispatchUnhandledMove(android.view.View, int)
    {
        android.view.View r0, r1;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        return 0;
    }

    android.view.View findUserSetNextFocus(android.view.View, int)
    {
        android.view.View r0, r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.view.View$2 $r8;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        lookupswitch(i0)
        {
            case 1: goto label11;
            case 2: goto label09;
            case 17: goto label01;
            case 33: goto label05;
            case 66: goto label03;
            case 130: goto label07;
            default: goto label13;
        };

     label01:
        $i8 = r0.<android.view.View: int mNextFocusLeftId>;

        if $i8 != -1 goto label02;

        return null;

     label02:
        $i9 = r0.<android.view.View: int mNextFocusLeftId>;

        $r5 = specialinvoke r0.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r1, $i9);

        return $r5;

     label03:
        $i4 = r0.<android.view.View: int mNextFocusRightId>;

        if $i4 != -1 goto label04;

        return null;

     label04:
        $i5 = r0.<android.view.View: int mNextFocusRightId>;

        $r3 = specialinvoke r0.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r1, $i5);

        return $r3;

     label05:
        $i6 = r0.<android.view.View: int mNextFocusUpId>;

        if $i6 != -1 goto label06;

        return null;

     label06:
        $i7 = r0.<android.view.View: int mNextFocusUpId>;

        $r4 = specialinvoke r0.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r1, $i7);

        return $r4;

     label07:
        $i2 = r0.<android.view.View: int mNextFocusDownId>;

        if $i2 != -1 goto label08;

        return null;

     label08:
        $i3 = r0.<android.view.View: int mNextFocusDownId>;

        $r2 = specialinvoke r0.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r1, $i3);

        return $r2;

     label09:
        $i11 = r0.<android.view.View: int mNextFocusForwardId>;

        if $i11 != -1 goto label10;

        return null;

     label10:
        $i10 = r0.<android.view.View: int mNextFocusForwardId>;

        $r6 = specialinvoke r0.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r1, $i10);

        return $r6;

     label11:
        $i12 = r0.<android.view.View: int mID>;

        if $i12 != -1 goto label12;

        return null;

     label12:
        i1 = r0.<android.view.View: int mID>;

        $r8 = new android.view.View$2;

        specialinvoke $r8.<android.view.View$2: void <init>(android.view.View,int)>(r0, i1);

        $r7 = virtualinvoke r1.<android.view.View: android.view.View findViewByPredicateInsideOut(android.view.View,com.android.internal.util.Predicate)>(r0, $r8);

        return $r7;

     label13:
        return null;
    }

    private android.view.View findViewInsideOutShouldExist(android.view.View, int)
    {
        android.view.View r0, r1, r2;
        int i0;
        android.view.View$MatchIdPredicate $r3, $r4, $r5, $r10;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        $r3 = r0.<android.view.View: android.view.View$MatchIdPredicate mMatchIdPredicate>;

        if $r3 != null goto label1;

        $r10 = new android.view.View$MatchIdPredicate;

        specialinvoke $r10.<android.view.View$MatchIdPredicate: void <init>(android.view.View,android.view.View$1)>(r0, null);

        r0.<android.view.View: android.view.View$MatchIdPredicate mMatchIdPredicate> = $r10;

     label1:
        $r4 = r0.<android.view.View: android.view.View$MatchIdPredicate mMatchIdPredicate>;

        $r4.<android.view.View$MatchIdPredicate: int mId> = i0;

        $r5 = r0.<android.view.View: android.view.View$MatchIdPredicate mMatchIdPredicate>;

        r2 = virtualinvoke r1.<android.view.View: android.view.View findViewByPredicateInsideOut(android.view.View,com.android.internal.util.Predicate)>(r0, $r5);

        if r2 != null goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t find view with id ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r9);

     label2:
        return r2;
    }

    public java.util.ArrayList getFocusables(int)
    {
        android.view.View r0;
        int i0;
        java.util.ArrayList r1, $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(24);

        r1 = $r2;

        virtualinvoke r0.<android.view.View: void addFocusables(java.util.ArrayList,int)>(r1, i0);

        return r1;
    }

    public void addFocusables(java.util.ArrayList, int)
    {
        android.view.View r0;
        java.util.ArrayList r1;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.view.View: void addFocusables(java.util.ArrayList,int,int)>(r1, i0, 1);

        return;
    }

    public void addFocusables(java.util.ArrayList, int, int)
    {
        android.view.View r0;
        java.util.ArrayList r1;
        int i0, i1, $i2;
        boolean $z0, $z2, $z3;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean isFocusable()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $i2 = i1 & 1;

        if $i2 != 1 goto label3;

        $z2 = virtualinvoke r0.<android.view.View: boolean isInTouchMode()>();

        if $z2 == 0 goto label3;

        $z3 = virtualinvoke r0.<android.view.View: boolean isFocusableInTouchMode()>();

        if $z3 != 0 goto label3;

        return;

     label3:
        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        return;
    }

    public void findViewsWithText(java.util.ArrayList, java.lang.CharSequence, int)
    {
        android.view.View r0;
        java.util.ArrayList r1;
        java.lang.CharSequence r2, $r6, $r7, $r9;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String r3, r4, $r8, $r10;
        android.view.accessibility.AccessibilityNodeProvider $r5;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        $r5 = virtualinvoke r0.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if $r5 == null goto label1;

        $i4 = i0 & 4;

        if $i4 == 0 goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        goto label2;

     label1:
        $i1 = i0 & 2;

        if $i1 == 0 goto label2;

        if r2 == null goto label2;

        $i2 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        if $i2 <= 0 goto label2;

        $r6 = r0.<android.view.View: java.lang.CharSequence mContentDescription>;

        if $r6 == null goto label2;

        $r7 = r0.<android.view.View: java.lang.CharSequence mContentDescription>;

        $i3 = interfaceinvoke $r7.<java.lang.CharSequence: int length()>();

        if $i3 <= 0 goto label2;

        $r8 = interfaceinvoke r2.<java.lang.CharSequence: java.lang.String toString()>();

        r3 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>();

        $r9 = r0.<android.view.View: java.lang.CharSequence mContentDescription>;

        $r10 = interfaceinvoke $r9.<java.lang.CharSequence: java.lang.String toString()>();

        r4 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>(r3);

        if $z0 == 0 goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label2:
        return;
    }

    public java.util.ArrayList getTouchables()
    {
        android.view.View r0;
        java.util.ArrayList r1, $r2;

        r0 := @this: android.view.View;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = $r2;

        virtualinvoke r0.<android.view.View: void addTouchables(java.util.ArrayList)>(r1);

        return r1;
    }

    public void addTouchables(java.util.ArrayList)
    {
        android.view.View r0;
        java.util.ArrayList r1;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.ArrayList;

        i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = i0 & 16384;

        if $i1 == 16384 goto label1;

        $i3 = i0 & 2097152;

        if $i3 != 2097152 goto label2;

     label1:
        $i2 = i0 & 32;

        if $i2 != 0 goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label2:
        return;
    }

    public boolean isAccessibilityFocused()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 67108864;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean requestAccessibilityFocus()
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityManager r1;
        android.view.ViewRootImpl r2;
        android.content.Context $r3;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        $r3 = r0.<android.view.View: android.content.Context mContext>;

        r1 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r3);

        $z0 = virtualinvoke r1.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 12;

        if $i1 == 0 goto label3;

        return 0;

     label3:
        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 & 67108864;

        if $i3 != 0 goto label5;

        $i4 = r0.<android.view.View: int mPrivateFlags2>;

        $i5 = $i4 | 67108864;

        r0.<android.view.View: int mPrivateFlags2> = $i5;

        r2 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r2 == null goto label4;

        virtualinvoke r2.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(r0, null);

     label4:
        virtualinvoke r0.<android.view.View: void invalidate()>();

        virtualinvoke r0.<android.view.View: void sendAccessibilityEvent(int)>(32768);

        return 1;

     label5:
        return 0;
    }

    public void clearAccessibilityFocus()
    {
        android.view.View r0, r2;
        android.view.ViewRootImpl r1;
        boolean $z0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void clearAccessibilityFocusNoCallbacks()>();

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<android.view.ViewRootImpl: android.view.View getAccessibilityFocusedHost()>();

        if r2 == null goto label1;

        $z0 = staticinvoke <android.view.ViewRootImpl: boolean isViewDescendantOf(android.view.View,android.view.View)>(r2, r0);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

     label1:
        return;
    }

    private void sendAccessibilityHoverEvent(int)
    {
        android.view.View r0, r1;
        int i0;
        android.view.ViewParent r2;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 = r0;

     label1:
        $z0 = virtualinvoke r1.<android.view.View: boolean includeForAccessibility()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.view.View: void sendAccessibilityEvent(int)>(i0);

        return;

     label2:
        r2 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();

        $z1 = r2 instanceof android.view.View;

        if $z1 == 0 goto label3;

        r1 = (android.view.View) r2;

        goto label4;

     label3:
        return;

     label4:
        goto label1;
    }

    void clearAccessibilityFocusNoCallbacks()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 67108864;

        if $i1 == 0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 & -67108865;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        virtualinvoke r0.<android.view.View: void invalidate()>();

        virtualinvoke r0.<android.view.View: void sendAccessibilityEvent(int)>(65536);

     label1:
        return;
    }

    public final boolean requestFocus()
    {
        android.view.View r0;
        boolean $z0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean requestFocus(int)>(130);

        return $z0;
    }

    public final boolean requestFocus(int)
    {
        android.view.View r0;
        int i0;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(i0, null);

        return $z0;
    }

    public boolean requestFocus(int, android.graphics.Rect)
    {
        android.view.View r0;
        int i0;
        android.graphics.Rect r1;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        $z0 = specialinvoke r0.<android.view.View: boolean requestFocusNoSearch(int,android.graphics.Rect)>(i0, r1);

        return $z0;
    }

    private boolean requestFocusNoSearch(int, android.graphics.Rect)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.graphics.Rect r1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 1;

        if $i2 != 1 goto label1;

        $i3 = r0.<android.view.View: int mViewFlags>;

        $i4 = $i3 & 12;

        if $i4 == 0 goto label2;

     label1:
        return 0;

     label2:
        $z0 = virtualinvoke r0.<android.view.View: boolean isInTouchMode()>();

        if $z0 == 0 goto label3;

        $i5 = r0.<android.view.View: int mViewFlags>;

        $i6 = $i5 & 262144;

        if 262144 == $i6 goto label3;

        return 0;

     label3:
        $z1 = specialinvoke r0.<android.view.View: boolean hasAncestorThatBlocksDescendantFocus()>();

        if $z1 == 0 goto label4;

        return 0;

     label4:
        virtualinvoke r0.<android.view.View: void handleFocusGainInternal(int,android.graphics.Rect)>(i0, r1);

        return 1;
    }

    public final boolean requestFocusFromTouch()
    {
        android.view.View r0;
        android.view.ViewRootImpl r1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isInTouchMode()>();

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.ViewRootImpl: boolean ensureTouchMode(boolean)>(0);

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean requestFocus(int)>(130);

        return $z1;
    }

    private boolean hasAncestorThatBlocksDescendantFocus()
    {
        android.view.View r0;
        boolean z0, $z1, $z2;
        android.view.ViewParent r1;
        android.view.ViewGroup r2;
        int $i0;

        r0 := @this: android.view.View;

        z0 = virtualinvoke r0.<android.view.View: boolean isFocusableInTouchMode()>();

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

     label1:
        $z1 = r1 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label4;

        r2 = (android.view.ViewGroup) r1;

        $i0 = virtualinvoke r2.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 == 393216 goto label2;

        if z0 != 0 goto label3;

        $z2 = virtualinvoke r2.<android.view.ViewGroup: boolean shouldBlockFocusForTouchscreen()>();

        if $z2 == 0 goto label3;

     label2:
        return 1;

     label3:
        r1 = virtualinvoke r2.<android.view.ViewGroup: android.view.ViewParent getParent()>();

        goto label1;

     label4:
        return 0;
    }

    public int getImportantForAccessibility()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 7340032;

        $i2 = $i1 >> 20;

        return $i2;
    }

    public void setAccessibilityLiveRegion(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.view.View: int getAccessibilityLiveRegion()>();

        if i0 == $i1 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 & -25165825;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        $i6 = r0.<android.view.View: int mPrivateFlags2>;

        $i4 = i0 << 23;

        $i5 = $i4 & 25165824;

        $i7 = $i6 | $i5;

        r0.<android.view.View: int mPrivateFlags2> = $i7;

        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

     label1:
        return;
    }

    public int getAccessibilityLiveRegion()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 25165824;

        $i2 = $i1 >> 23;

        return $i2;
    }

    public void setImportantForAccessibility(int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0, z1, $z2, $z3, $z4, $z5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.view.View: int getImportantForAccessibility()>();

        if i0 == i1 goto label8;

        if i1 == 0 goto label1;

        if i0 != 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        z0 = $z5;

        if z0 == 0 goto label4;

        $z3 = virtualinvoke r0.<android.view.View: boolean includeForAccessibility()>();

        if $z3 == 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        z1 = $z4;

        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 & -7340033;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        $i6 = r0.<android.view.View: int mPrivateFlags2>;

        $i4 = i0 << 20;

        $i5 = $i4 & 7340032;

        $i7 = $i6 | $i5;

        r0.<android.view.View: int mPrivateFlags2> = $i7;

        if z0 == 0 goto label6;

        $z2 = virtualinvoke r0.<android.view.View: boolean includeForAccessibility()>();

        if z1 == $z2 goto label7;

     label6:
        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

        goto label8;

     label7:
        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

     label8:
        return;
    }

    public boolean isImportantForAccessibility()
    {
        android.view.View r0, $r3;
        int i0, $i1, $i2, $i3, $i4;
        android.view.ViewParent r1;
        boolean $z0, $z1, $z2, $z3;
        android.view.accessibility.AccessibilityNodeProvider $r2;

        r0 := @this: android.view.View;

        $i1 = r0.<android.view.View: int mPrivateFlags2>;

        $i2 = $i1 & 7340032;

        i0 = $i2 >> 20;

        if i0 == 2 goto label1;

        if i0 != 4 goto label2;

     label1:
        return 0;

     label2:
        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

     label3:
        $z0 = r1 instanceof android.view.View;

        if $z0 == 0 goto label5;

        $r3 = (android.view.View) r1;

        $i4 = virtualinvoke $r3.<android.view.View: int getImportantForAccessibility()>();

        if $i4 != 4 goto label4;

        return 0;

     label4:
        r1 = interfaceinvoke r1.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label3;

     label5:
        if i0 == 1 goto label6;

        $z1 = virtualinvoke r0.<android.view.View: boolean isActionableForAccessibility()>();

        if $z1 != 0 goto label6;

        $z2 = specialinvoke r0.<android.view.View: boolean hasListenersForAccessibility()>();

        if $z2 != 0 goto label6;

        $r2 = virtualinvoke r0.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if $r2 != null goto label6;

        $i3 = virtualinvoke r0.<android.view.View: int getAccessibilityLiveRegion()>();

        if $i3 == 0 goto label7;

     label6:
        $z3 = 1;

        goto label8;

     label7:
        $z3 = 0;

     label8:
        return $z3;
    }

    public android.view.ViewParent getParentForAccessibility()
    {
        android.view.View r0, r1;
        android.view.ViewParent $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = $r2 instanceof android.view.View;

        if $z0 == 0 goto label2;

        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        r1 = (android.view.View) $r3;

        $z1 = virtualinvoke r1.<android.view.View: boolean includeForAccessibility()>();

        if $z1 == 0 goto label1;

        $r6 = r0.<android.view.View: android.view.ViewParent mParent>;

        return $r6;

     label1:
        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r5 = interfaceinvoke $r4.<android.view.ViewParent: android.view.ViewParent getParentForAccessibility()>();

        return $r5;

     label2:
        return null;
    }

    public void addChildrenForAccessibility(java.util.ArrayList)
    {
        android.view.View r0;
        java.util.ArrayList r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.ArrayList;

        return;
    }

    public boolean includeForAccessibility()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label4;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r2.<android.view.View$AttachInfo: int mAccessibilityFetchFlags>;

        $i1 = $i0 & 8;

        if $i1 != 0 goto label1;

        $z0 = virtualinvoke r0.<android.view.View: boolean isImportantForAccessibility()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        return 0;
    }

    public boolean isActionableForAccessibility()
    {
        android.view.View r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isClickable()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<android.view.View: boolean isLongClickable()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<android.view.View: boolean isFocusable()>();

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private boolean hasListenersForAccessibility()
    {
        android.view.View r0;
        android.view.View$ListenerInfo r1;
        android.view.TouchDelegate $r2;
        android.view.View$OnKeyListener $r3;
        android.view.View$OnTouchListener $r4;
        android.view.View$OnGenericMotionListener $r5;
        android.view.View$OnHoverListener $r6;
        android.view.View$OnDragListener $r7;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        if $r2 != null goto label1;

        $r3 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnKeyListener access$300(android.view.View$ListenerInfo)>(r1);

        if $r3 != null goto label1;

        $r4 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnTouchListener access$400(android.view.View$ListenerInfo)>(r1);

        if $r4 != null goto label1;

        $r5 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnGenericMotionListener access$500(android.view.View$ListenerInfo)>(r1);

        if $r5 != null goto label1;

        $r6 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnHoverListener access$600(android.view.View$ListenerInfo)>(r1);

        if $r6 != null goto label1;

        $r7 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnDragListener access$700(android.view.View$ListenerInfo)>(r1);

        if $r7 == null goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void notifyViewAccessibilityStateChangedIfNeeded(int)
    {
        android.view.View r0;
        int i0;
        android.content.Context $r1;
        android.view.accessibility.AccessibilityManager $r2;
        boolean $z0;
        android.view.View$SendViewStateChangedAccessibilityEvent $r3, $r4, $r5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        $r2 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r1);

        $z0 = virtualinvoke $r2.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<android.view.View: android.view.View$SendViewStateChangedAccessibilityEvent mSendViewStateChangedAccessibilityEvent>;

        if $r3 != null goto label2;

        $r5 = new android.view.View$SendViewStateChangedAccessibilityEvent;

        specialinvoke $r5.<android.view.View$SendViewStateChangedAccessibilityEvent: void <init>(android.view.View,android.view.View$1)>(r0, null);

        r0.<android.view.View: android.view.View$SendViewStateChangedAccessibilityEvent mSendViewStateChangedAccessibilityEvent> = $r5;

     label2:
        $r4 = r0.<android.view.View: android.view.View$SendViewStateChangedAccessibilityEvent mSendViewStateChangedAccessibilityEvent>;

        virtualinvoke $r4.<android.view.View$SendViewStateChangedAccessibilityEvent: void runOrPost(int)>(i0);

        return;
    }

    public void notifySubtreeAccessibilityStateChangedIfNeeded()
    {
        android.view.View r0;
        java.lang.AbstractMethodError r1, $r6;
        android.content.Context $r2;
        android.view.accessibility.AccessibilityManager $r3;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        android.view.ViewParent $r4, $r5, $r8;
        java.lang.StringBuilder $r7, $r10, $r13;
        java.lang.Class $r9;
        java.lang.String $r11, $r12;

        r0 := @this: android.view.View;

        $r2 = r0.<android.view.View: android.content.Context mContext>;

        $r3 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r2);

        $z0 = virtualinvoke $r3.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 134217728;

        if $i1 != 0 goto label5;

        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 | 134217728;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r4 == null goto label5;

     label2:
        $r5 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r5.<android.view.ViewParent: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>(r0, r0, 1);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r9.<java.lang.Class: java.lang.String getSimpleName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r12, r1);

     label5:
        return;

        catch java.lang.AbstractMethodError from label2 to label3 with label4;
    }

    void resetSubtreeAccessibilityStateChanged()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -134217729;

        r0.<android.view.View: int mPrivateFlags2> = $i1;

        return;
    }

    public boolean performAccessibilityAction(int, android.os.Bundle)
    {
        android.view.View r0;
        int i0;
        android.os.Bundle r1;
        android.view.View$AccessibilityDelegate $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        $r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        $z1 = virtualinvoke $r3.<android.view.View$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>(r0, i0, r1);

        return $z1;

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean performAccessibilityActionInternal(int,android.os.Bundle)>(i0, r1);

        return $z0;
    }

    boolean performAccessibilityActionInternal(int, android.os.Bundle)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8;
        android.os.Bundle r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z7, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z19, $z20, z21;
        android.view.ViewRootImpl $r2;
        java.lang.CharSequence r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        lookupswitch(i0)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 4: goto label07;
            case 8: goto label08;
            case 16: goto label01;
            case 32: goto label02;
            case 64: goto label11;
            case 128: goto label12;
            case 256: goto label13;
            case 512: goto label14;
            case 131072: goto label15;
            default: goto label22;
        };

     label01:
        $z9 = virtualinvoke r0.<android.view.View: boolean isClickable()>();

        if $z9 == 0 goto label22;

        virtualinvoke r0.<android.view.View: boolean performClick()>();

        return 1;

     label02:
        $z7 = virtualinvoke r0.<android.view.View: boolean isLongClickable()>();

        if $z7 == 0 goto label22;

        virtualinvoke r0.<android.view.View: boolean performLongClick()>();

        return 1;

     label03:
        $z20 = virtualinvoke r0.<android.view.View: boolean hasFocus()>();

        if $z20 != 0 goto label22;

        $r2 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r2.<android.view.ViewRootImpl: boolean ensureTouchMode(boolean)>(0);

        $z19 = virtualinvoke r0.<android.view.View: boolean requestFocus()>();

        return $z19;

     label04:
        $z14 = virtualinvoke r0.<android.view.View: boolean hasFocus()>();

        if $z14 == 0 goto label22;

        virtualinvoke r0.<android.view.View: void clearFocus()>();

        $z17 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z17 != 0 goto label05;

        $z16 = 1;

        goto label06;

     label05:
        $z16 = 0;

     label06:
        return $z16;

     label07:
        $z12 = virtualinvoke r0.<android.view.View: boolean isSelected()>();

        if $z12 != 0 goto label22;

        virtualinvoke r0.<android.view.View: void setSelected(boolean)>(1);

        $z15 = virtualinvoke r0.<android.view.View: boolean isSelected()>();

        return $z15;

     label08:
        $z11 = virtualinvoke r0.<android.view.View: boolean isSelected()>();

        if $z11 == 0 goto label22;

        virtualinvoke r0.<android.view.View: void setSelected(boolean)>(0);

        $z10 = virtualinvoke r0.<android.view.View: boolean isSelected()>();

        if $z10 != 0 goto label09;

        $z13 = 1;

        goto label10;

     label09:
        $z13 = 0;

     label10:
        return $z13;

     label11:
        $z5 = virtualinvoke r0.<android.view.View: boolean isAccessibilityFocused()>();

        if $z5 != 0 goto label22;

        $z4 = virtualinvoke r0.<android.view.View: boolean requestAccessibilityFocus()>();

        return $z4;

     label12:
        $z2 = virtualinvoke r0.<android.view.View: boolean isAccessibilityFocused()>();

        if $z2 == 0 goto label22;

        virtualinvoke r0.<android.view.View: void clearAccessibilityFocus()>();

        return 1;

     label13:
        if r1 == null goto label22;

        i1 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String)>("ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT");

        z0 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String)>("ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN");

        $z3 = specialinvoke r0.<android.view.View: boolean traverseAtGranularity(int,boolean,boolean)>(i1, 1, z0);

        return $z3;

     label14:
        if r1 == null goto label22;

        i7 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String)>("ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT");

        z21 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String)>("ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN");

        $z1 = specialinvoke r0.<android.view.View: boolean traverseAtGranularity(int,boolean,boolean)>(i7, 0, z21);

        return $z1;

     label15:
        r3 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        if r3 != null goto label16;

        return 0;

     label16:
        if r1 == null goto label17;

        $i6 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("ACTION_ARGUMENT_SELECTION_START_INT", -1);

        goto label18;

     label17:
        $i6 = -1;

     label18:
        i8 = $i6;

        if r1 == null goto label19;

        $i5 = virtualinvoke r1.<android.os.Bundle: int getInt(java.lang.String,int)>("ACTION_ARGUMENT_SELECTION_END_INT", -1);

        goto label20;

     label19:
        $i5 = -1;

     label20:
        i2 = $i5;

        $i3 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionStart()>();

        if $i3 != i8 goto label21;

        $i4 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionEnd()>();

        if $i4 == i2 goto label22;

     label21:
        if i8 != i2 goto label22;

        virtualinvoke r0.<android.view.View: void setAccessibilitySelection(int,int)>(i8, i2);

        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

        return 1;

     label22:
        return 0;
    }

    private boolean traverseAtGranularity(int, boolean, boolean)
    {
        android.view.View r0;
        int i0, i1, i2, i3, i4, i5, $i7, $i8, $i10, $i11, $i12;
        boolean z0, z1, $z2;
        java.lang.CharSequence r1;
        android.view.AccessibilityIterators$TextSegmentIterator r2;
        int[] r3, $r4;
        short s6, $s9;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        if r1 == null goto label01;

        $i7 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i7 != 0 goto label02;

     label01:
        return 0;

     label02:
        r2 = virtualinvoke r0.<android.view.View: android.view.AccessibilityIterators$TextSegmentIterator getIteratorForGranularity(int)>(i0);

        if r2 != null goto label03;

        return 0;

     label03:
        i1 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionEnd()>();

        if i1 != -1 goto label06;

        if z0 == 0 goto label04;

        $i12 = 0;

        goto label05;

     label04:
        $i12 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

     label05:
        i1 = $i12;

     label06:
        if z0 == 0 goto label07;

        $r4 = interfaceinvoke r2.<android.view.AccessibilityIterators$TextSegmentIterator: int[] following(int)>(i1);

        goto label08;

     label07:
        $r4 = interfaceinvoke r2.<android.view.AccessibilityIterators$TextSegmentIterator: int[] preceding(int)>(i1);

     label08:
        r3 = $r4;

        if r3 != null goto label09;

        return 0;

     label09:
        i2 = r3[0];

        i3 = r3[1];

        if z1 == 0 goto label15;

        $z2 = virtualinvoke r0.<android.view.View: boolean isAccessibilitySelectionExtendable()>();

        if $z2 == 0 goto label15;

        i4 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionStart()>();

        if i4 != -1 goto label12;

        if z0 == 0 goto label10;

        $i10 = i2;

        goto label11;

     label10:
        $i10 = i3;

     label11:
        i4 = $i10;

     label12:
        if z0 == 0 goto label13;

        $i11 = i3;

        goto label14;

     label13:
        $i11 = i2;

     label14:
        i5 = $i11;

        goto label18;

     label15:
        if z0 == 0 goto label16;

        $i8 = i3;

        goto label17;

     label16:
        $i8 = i2;

     label17:
        i5 = $i8;

        i4 = $i8;

     label18:
        virtualinvoke r0.<android.view.View: void setAccessibilitySelection(int,int)>(i4, i5);

        if z0 == 0 goto label19;

        $s9 = 256;

        goto label20;

     label19:
        $s9 = 512;

     label20:
        s6 = $s9;

        specialinvoke r0.<android.view.View: void sendViewTextTraversedAtGranularityEvent(int,int,int,int)>(s6, i0, i2, i3);

        return 1;
    }

    public java.lang.CharSequence getIterableTextForAccessibility()
    {
        android.view.View r0;
        java.lang.CharSequence $r1;

        r0 := @this: android.view.View;

        $r1 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getContentDescription()>();

        return $r1;
    }

    public boolean isAccessibilitySelectionExtendable()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    public int getAccessibilitySelectionStart()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mAccessibilityCursorPosition>;

        return $i0;
    }

    public int getAccessibilitySelectionEnd()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionStart()>();

        return $i0;
    }

    public void setAccessibilitySelection(int, int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3;
        java.lang.CharSequence $r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != i1 goto label1;

        $i3 = r0.<android.view.View: int mAccessibilityCursorPosition>;

        if i1 != $i3 goto label1;

        return;

     label1:
        if i0 < 0 goto label2;

        if i0 != i1 goto label2;

        $r1 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if i1 > $i2 goto label2;

        r0.<android.view.View: int mAccessibilityCursorPosition> = i0;

        goto label3;

     label2:
        r0.<android.view.View: int mAccessibilityCursorPosition> = -1;

     label3:
        virtualinvoke r0.<android.view.View: void sendAccessibilityEvent(int)>(8192);

        return;
    }

    private void sendViewTextTraversedAtGranularityEvent(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.ViewParent $r2, $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r2 != null goto label1;

        return;

     label1:
        r1 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>(131072);

        virtualinvoke r0.<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        virtualinvoke r0.<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setFromIndex(int)>(i2);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setToIndex(int)>(i3);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setAction(int)>(i0);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setMovementGranularity(int)>(i1);

        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1);

        return;
    }

    public android.view.AccessibilityIterators$TextSegmentIterator getIteratorForGranularity(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3;
        java.lang.CharSequence r1, r14, r16;
        android.view.AccessibilityIterators$CharacterTextSegmentIterator r2;
        java.lang.String $r3, $r8, $r13;
        android.content.Context $r4, $r10;
        android.content.res.Resources $r5, $r9;
        android.content.res.Configuration $r6, $r12;
        java.util.Locale $r7, $r11;
        android.view.AccessibilityIterators$WordTextSegmentIterator r15;
        android.view.AccessibilityIterators$ParagraphTextSegmentIterator r17;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label3;
            case 8: goto label5;
            default: goto label6;
        };

     label1:
        r1 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        if r1 == null goto label2;

        $i3 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i3 <= 0 goto label2;

        $r10 = r0.<android.view.View: android.content.Context mContext>;

        $r9 = virtualinvoke $r10.<android.content.Context: android.content.res.Resources getResources()>();

        $r12 = virtualinvoke $r9.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $r11 = $r12.<android.content.res.Configuration: java.util.Locale locale>;

        r2 = staticinvoke <android.view.AccessibilityIterators$CharacterTextSegmentIterator: android.view.AccessibilityIterators$CharacterTextSegmentIterator getInstance(java.util.Locale)>($r11);

        $r13 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r2.<android.view.AccessibilityIterators$CharacterTextSegmentIterator: void initialize(java.lang.String)>($r13);

        return r2;

     label2:
        goto label6;

     label3:
        r14 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        if r14 == null goto label4;

        $i2 = interfaceinvoke r14.<java.lang.CharSequence: int length()>();

        if $i2 <= 0 goto label4;

        $r4 = r0.<android.view.View: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $r7 = $r6.<android.content.res.Configuration: java.util.Locale locale>;

        r15 = staticinvoke <android.view.AccessibilityIterators$WordTextSegmentIterator: android.view.AccessibilityIterators$WordTextSegmentIterator getInstance(java.util.Locale)>($r7);

        $r8 = interfaceinvoke r14.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r15.<android.view.AccessibilityIterators$WordTextSegmentIterator: void initialize(java.lang.String)>($r8);

        return r15;

     label4:
        goto label6;

     label5:
        r16 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        if r16 == null goto label6;

        $i1 = interfaceinvoke r16.<java.lang.CharSequence: int length()>();

        if $i1 <= 0 goto label6;

        r17 = staticinvoke <android.view.AccessibilityIterators$ParagraphTextSegmentIterator: android.view.AccessibilityIterators$ParagraphTextSegmentIterator getInstance()>();

        $r3 = interfaceinvoke r16.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r17.<android.view.AccessibilityIterators$ParagraphTextSegmentIterator: void initialize(java.lang.String)>($r3);

        return r17;

     label6:
        return null;
    }

    public void dispatchStartTemporaryDetach()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void onStartTemporaryDetach()>();

        return;
    }

    public void onStartTemporaryDetach()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void removeUnsetPressCallback()>();

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 67108864;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        return;
    }

    public void dispatchFinishTemporaryDetach()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void onFinishTemporaryDetach()>();

        return;
    }

    public void onFinishTemporaryDetach()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return;
    }

    public android.view.KeyEvent$DispatcherState getKeyDispatcherState()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        android.view.KeyEvent$DispatcherState $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.KeyEvent$DispatcherState mKeyDispatchState>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public boolean dispatchKeyEventPreIme(android.view.KeyEvent)
    {
        android.view.View r0;
        android.view.KeyEvent r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $z0 = virtualinvoke r0.<android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)>($i0, r1);

        return $z0;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        android.view.View r0;
        android.view.KeyEvent r1;
        android.view.View$ListenerInfo r2;
        android.view.InputEventConsistencyVerifier $r3, $r5, $r6, $r11;
        android.view.View$AttachInfo $r4, $r7;
        boolean $z0, $z1;
        android.view.KeyEvent$DispatcherState $r8;
        android.view.View$OnKeyListener $r9, $r10;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.KeyEvent;

        $r3 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r3 == null goto label1;

        $r11 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r11.<android.view.InputEventConsistencyVerifier: void onKeyEvent(android.view.KeyEvent,int)>(r1, 0);

     label1:
        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label2;

        $r9 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnKeyListener access$300(android.view.View$ListenerInfo)>(r2);

        if $r9 == null goto label2;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 32;

        if $i1 != 0 goto label2;

        $r10 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnKeyListener access$300(android.view.View$ListenerInfo)>(r2);

        $i2 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $z1 = interfaceinvoke $r10.<android.view.View$OnKeyListener: boolean onKey(android.view.View,int,android.view.KeyEvent)>(r0, $i2, r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label3;

        $r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r8 = $r7.<android.view.View$AttachInfo: android.view.KeyEvent$DispatcherState mKeyDispatchState>;

        goto label4;

     label3:
        $r8 = null;

     label4:
        $z0 = virtualinvoke r1.<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)>(r0, $r8, r0);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        $r5 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r5 == null goto label6;

        $r6 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r6.<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>(r1, 0);

     label6:
        return 0;
    }

    public boolean dispatchKeyShortcutEvent(android.view.KeyEvent)
    {
        android.view.View r0;
        android.view.KeyEvent r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $z0 = virtualinvoke r0.<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)>($i0, r1);

        return $z0;
    }

    public boolean dispatchTouchEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        boolean z0, $z1, $z2, $z3;
        int i0, $i1, $i2;
        android.view.View$ListenerInfo r2;
        android.view.InputEventConsistencyVerifier $r3, $r4, $r5, $r8;
        android.view.View$OnTouchListener $r6, $r7;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        z0 = 0;

        $r3 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r3 == null goto label1;

        $r8 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r8.<android.view.InputEventConsistencyVerifier: void onTouchEvent(android.view.MotionEvent,int)>(r1, 0);

     label1:
        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if i0 != 0 goto label2;

        virtualinvoke r0.<android.view.View: void stopNestedScroll()>();

     label2:
        $z1 = virtualinvoke r0.<android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)>(r1);

        if $z1 == 0 goto label4;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label3;

        $r6 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnTouchListener access$400(android.view.View$ListenerInfo)>(r2);

        if $r6 == null goto label3;

        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 32;

        if $i2 != 0 goto label3;

        $r7 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnTouchListener access$400(android.view.View$ListenerInfo)>(r2);

        $z3 = interfaceinvoke $r7.<android.view.View$OnTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)>(r0, r1);

        if $z3 == 0 goto label3;

        z0 = 1;

     label3:
        if z0 != 0 goto label4;

        $z2 = virtualinvoke r0.<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>(r1);

        if $z2 == 0 goto label4;

        z0 = 1;

     label4:
        if z0 != 0 goto label5;

        $r4 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r4 == null goto label5;

        $r5 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r5.<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>(r1, 0);

     label5:
        if i0 == 1 goto label6;

        if i0 == 3 goto label6;

        if i0 != 0 goto label7;

        if z0 != 0 goto label7;

     label6:
        virtualinvoke r0.<android.view.View: void stopNestedScroll()>();

     label7:
        return z0;
    }

    public boolean onFilterTouchEventForSecurity(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        $i2 = virtualinvoke r1.<android.view.MotionEvent: int getFlags()>();

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public boolean dispatchTrackballEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        android.view.InputEventConsistencyVerifier $r2, $r3;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r3.<android.view.InputEventConsistencyVerifier: void onTrackballEvent(android.view.MotionEvent,int)>(r1, 0);

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public boolean dispatchGenericMotionEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        int i0, i1, $i2;
        android.view.InputEventConsistencyVerifier $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r2 == null goto label1;

        $r5 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r5.<android.view.InputEventConsistencyVerifier: void onGenericMotionEvent(android.view.MotionEvent,int)>(r1, 0);

     label1:
        i0 = virtualinvoke r1.<android.view.MotionEvent: int getSource()>();

        $i2 = i0 & 2;

        if $i2 == 0 goto label5;

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        if i1 == 9 goto label2;

        if i1 == 7 goto label2;

        if i1 != 10 goto label3;

     label2:
        $z2 = virtualinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        if $z2 == 0 goto label4;

        return 1;

     label3:
        $z3 = virtualinvoke r0.<android.view.View: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>(r1);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        goto label6;

     label5:
        $z0 = virtualinvoke r0.<android.view.View: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>(r1);

        if $z0 == 0 goto label6;

        return 1;

     label6:
        $z1 = specialinvoke r0.<android.view.View: boolean dispatchGenericMotionEventInternal(android.view.MotionEvent)>(r1);

        if $z1 == 0 goto label7;

        return 1;

     label7:
        $r3 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r3 == null goto label8;

        $r4 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r4.<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>(r1, 0);

     label8:
        return 0;
    }

    private boolean dispatchGenericMotionEventInternal(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        android.view.View$ListenerInfo r2;
        boolean $z0, $z1;
        android.view.InputEventConsistencyVerifier $r3, $r4;
        android.view.View$OnGenericMotionListener $r5, $r6;
        int $i0, $i1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label1;

        $r5 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnGenericMotionListener access$500(android.view.View$ListenerInfo)>(r2);

        if $r5 == null goto label1;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 32;

        if $i1 != 0 goto label1;

        $r6 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnGenericMotionListener access$500(android.view.View$ListenerInfo)>(r2);

        $z1 = interfaceinvoke $r6.<android.view.View$OnGenericMotionListener: boolean onGenericMotion(android.view.View,android.view.MotionEvent)>(r0, r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r3 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r3 == null goto label3;

        $r4 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r4.<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>(r1, 0);

     label3:
        return 0;
    }

    protected boolean dispatchHoverEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        android.view.View$ListenerInfo r2;
        boolean $z0, $z1;
        android.view.View$OnHoverListener $r3, $r4;
        int $i0, $i1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label1;

        $r3 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnHoverListener access$600(android.view.View$ListenerInfo)>(r2);

        if $r3 == null goto label1;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 32;

        if $i1 != 0 goto label1;

        $r4 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnHoverListener access$600(android.view.View$ListenerInfo)>(r2);

        $z1 = interfaceinvoke $r4.<android.view.View$OnHoverListener: boolean onHover(android.view.View,android.view.MotionEvent)>(r0, r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    protected boolean hasHoveredChild()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    protected boolean dispatchGenericPointerEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        return 0;
    }

    protected boolean dispatchGenericFocusedEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        return 0;
    }

    public final boolean dispatchPointerEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        boolean $z0, $z1, $z2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = virtualinvoke r1.<android.view.MotionEvent: boolean isTouchEvent()>();

        if $z0 == 0 goto label1;

        $z2 = virtualinvoke r0.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r1);

        return $z2;

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(r1);

        return $z1;
    }

    public void dispatchWindowFocusChanged(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.view.View: void onWindowFocusChanged(boolean)>(z0);

        return;
    }

    public void onWindowFocusChanged(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        android.view.inputmethod.InputMethodManager r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        r1 = staticinvoke <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager peekInstance()>();

        if z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<android.view.View: boolean isPressed()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

     label1:
        if r1 == null goto label2;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label2;

        virtualinvoke r1.<android.view.inputmethod.InputMethodManager: void focusOut(android.view.View)>(r0);

     label2:
        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        specialinvoke r0.<android.view.View: void removeTapCallback()>();

        virtualinvoke r0.<android.view.View: void onFocusLost()>();

        goto label4;

     label3:
        if r1 == null goto label4;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label4;

        virtualinvoke r1.<android.view.inputmethod.InputMethodManager: void focusIn(android.view.View)>(r0);

     label4:
        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        return;
    }

    public boolean hasWindowFocus()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r2.<android.view.View$AttachInfo: boolean mHasWindowFocus>;

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected void dispatchVisibilityChanged(android.view.View, int)
    {
        android.view.View r0, r1;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.view.View: void onVisibilityChanged(android.view.View,int)>(r1, i0);

        return;
    }

    protected void onVisibilityChanged(android.view.View, int)
    {
        android.view.View r0, r1;
        int i0, $i1, $i2;
        android.view.View$AttachInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        if i0 != 0 goto label2;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label1;

        specialinvoke r0.<android.view.View: boolean initialAwakenScrollBars()>();

        goto label2;

     label1:
        $i1 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 | 134217728;

        r0.<android.view.View: int mPrivateFlags> = $i2;

     label2:
        return;
    }

    public void dispatchDisplayHint(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.View: void onDisplayHint(int)>(i0);

        return;
    }

    protected void onDisplayHint(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        return;
    }

    public void dispatchWindowVisibilityChanged(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.View: void onWindowVisibilityChanged(int)>(i0);

        return;
    }

    protected void onWindowVisibilityChanged(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        specialinvoke r0.<android.view.View: boolean initialAwakenScrollBars()>();

     label1:
        return;
    }

    public int getWindowVisibility()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        int $i0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r2.<android.view.View$AttachInfo: int mWindowVisibility>;

        goto label2;

     label1:
        $i0 = 8;

     label2:
        return $i0;
    }

    public void getWindowVisibleDisplayFrame(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1, r11;
        android.view.View$AttachInfo $r3, $r5, $r6, $r9;
        android.hardware.display.DisplayManagerGlobal $r4;
        android.view.IWindow $r7;
        android.view.IWindowSession $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.os.RemoteException $r10;
        android.view.Display r12;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label5;

     label1:
        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r8 = $r5.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.view.IWindow mWindow>;

        interfaceinvoke $r8.<android.view.IWindowSession: void getDisplayFrame(android.view.IWindow,android.graphics.Rect)>($r7, r1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        return;

     label4:
        $r9 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r11 = $r9.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        $i1 = r1.<android.graphics.Rect: int left>;

        $i0 = r11.<android.graphics.Rect: int left>;

        $i2 = $i1 + $i0;

        r1.<android.graphics.Rect: int left> = $i2;

        $i4 = r1.<android.graphics.Rect: int top>;

        $i3 = r11.<android.graphics.Rect: int top>;

        $i6 = $i4 + $i3;

        r1.<android.graphics.Rect: int top> = $i6;

        $i8 = r1.<android.graphics.Rect: int right>;

        $i5 = r11.<android.graphics.Rect: int right>;

        $i7 = $i8 - $i5;

        r1.<android.graphics.Rect: int right> = $i7;

        $i9 = r1.<android.graphics.Rect: int bottom>;

        $i10 = r11.<android.graphics.Rect: int bottom>;

        $i11 = $i9 - $i10;

        r1.<android.graphics.Rect: int bottom> = $i11;

        return;

     label5:
        $r4 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        r12 = virtualinvoke $r4.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(0);

        virtualinvoke r12.<android.view.Display: void getRectSize(android.graphics.Rect)>(r1);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dispatchConfigurationChanged(android.content.res.Configuration)
    {
        android.view.View r0;
        android.content.res.Configuration r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.Configuration;

        virtualinvoke r0.<android.view.View: void onConfigurationChanged(android.content.res.Configuration)>(r1);

        return;
    }

    protected void onConfigurationChanged(android.content.res.Configuration)
    {
        android.view.View r0;
        android.content.res.Configuration r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.Configuration;

        return;
    }

    void dispatchCollectViewAttributes(android.view.View$AttachInfo, int)
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$AttachInfo;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.view.View: void performCollectViewAttributes(android.view.View$AttachInfo,int)>(r1, i0);

        return;
    }

    void performCollectViewAttributes(android.view.View$AttachInfo, int)
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.View$ListenerInfo r2;
        android.view.View$OnSystemUiVisibilityChangeListener $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$AttachInfo;

        i0 := @parameter1: int;

        $i1 = i0 & 12;

        if $i1 != 0 goto label2;

        $i2 = r0.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 67108864;

        if $i3 != 67108864 goto label1;

        r1.<android.view.View$AttachInfo: boolean mKeepScreenOn> = 1;

     label1:
        $i5 = r1.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        $i4 = r0.<android.view.View: int mSystemUiVisibility>;

        $i6 = $i5 | $i4;

        r1.<android.view.View$AttachInfo: int mSystemUiVisibility> = $i6;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label2;

        $r3 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnSystemUiVisibilityChangeListener access$1200(android.view.View$ListenerInfo)>(r2);

        if $r3 == null goto label2;

        r1.<android.view.View$AttachInfo: boolean mHasSystemUiListeners> = 1;

     label2:
        return;
    }

    void needGlobalAttributesUpdate(boolean)
    {
        android.view.View r0;
        boolean z0, $z1, $z2, $z3;
        android.view.View$AttachInfo r1;
        int $i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label2;

        $z1 = r1.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z1 != 0 goto label2;

        if z0 != 0 goto label1;

        $z2 = r1.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        if $z2 != 0 goto label1;

        $i0 = r1.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        if $i0 != 0 goto label1;

        $z3 = r1.<android.view.View$AttachInfo: boolean mHasSystemUiListeners>;

        if $z3 == 0 goto label2;

     label1:
        r1.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 1;

     label2:
        return;
    }

    public boolean isInTouchMode()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z1 = $r2.<android.view.View$AttachInfo: boolean mInTouchMode>;

        return $z1;

     label1:
        $z0 = staticinvoke <android.view.ViewRootImpl: boolean isInTouchMode()>();

        return $z0;
    }

    public final android.content.Context getContext()
    {
        android.view.View r0;
        android.content.Context $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        return $r1;
    }

    public boolean onKeyPreIme(int, android.view.KeyEvent)
    {
        android.view.View r0;
        int i0;
        android.view.KeyEvent r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        return 0;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.KeyEvent r1;
        boolean z0, $z1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        z0 = 0;

        $z1 = staticinvoke <android.view.KeyEvent: boolean isConfirmKey(int)>(i0);

        if $z1 == 0 goto label3;

        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 32;

        if $i2 != 32 goto label1;

        return 1;

     label1:
        $i3 = r0.<android.view.View: int mViewFlags>;

        $i4 = $i3 & 16384;

        if $i4 == 16384 goto label2;

        $i6 = r0.<android.view.View: int mViewFlags>;

        $i7 = $i6 & 2097152;

        if $i7 != 2097152 goto label3;

     label2:
        $i5 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i5 != 0 goto label3;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(1);

        specialinvoke r0.<android.view.View: void checkForLongClick(int)>(0);

        return 1;

     label3:
        return z0;
    }

    public boolean onKeyLongPress(int, android.view.KeyEvent)
    {
        android.view.View r0;
        int i0;
        android.view.KeyEvent r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        return 0;
    }

    public boolean onKeyUp(int, android.view.KeyEvent)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4;
        android.view.KeyEvent r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        $z0 = staticinvoke <android.view.KeyEvent: boolean isConfirmKey(int)>(i0);

        if $z0 == 0 goto label2;

        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 32;

        if $i2 != 32 goto label1;

        return 1;

     label1:
        $i3 = r0.<android.view.View: int mViewFlags>;

        $i4 = $i3 & 16384;

        if $i4 != 16384 goto label2;

        $z1 = virtualinvoke r0.<android.view.View: boolean isPressed()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

        $z2 = r0.<android.view.View: boolean mHasPerformedLongPress>;

        if $z2 != 0 goto label2;

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        $z3 = virtualinvoke r0.<android.view.View: boolean performClick()>();

        return $z3;

     label2:
        return 0;
    }

    public boolean onKeyMultiple(int, int, android.view.KeyEvent)
    {
        android.view.View r0;
        int i0, i1;
        android.view.KeyEvent r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.KeyEvent;

        return 0;
    }

    public boolean onKeyShortcut(int, android.view.KeyEvent)
    {
        android.view.View r0;
        int i0;
        android.view.KeyEvent r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        return 0;
    }

    public boolean onCheckIsTextEditor()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
    {
        android.view.View r0;
        android.view.inputmethod.EditorInfo r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        return null;
    }

    public boolean checkInputConnectionProxy(android.view.View)
    {
        android.view.View r0, r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        return 0;
    }

    public void createContextMenu(android.view.ContextMenu)
    {
        android.view.View r0;
        android.view.ContextMenu r1;
        android.view.ContextMenu$ContextMenuInfo r2;
        android.view.View$ListenerInfo r3;
        com.android.internal.view.menu.MenuBuilder $r4, $r5;
        android.view.ViewParent $r6, $r7;
        android.view.View$OnCreateContextMenuListener $r8, $r9;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ContextMenu;

        r2 = virtualinvoke r0.<android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>();

        $r4 = (com.android.internal.view.menu.MenuBuilder) r1;

        virtualinvoke $r4.<com.android.internal.view.menu.MenuBuilder: void setCurrentMenuInfo(android.view.ContextMenu$ContextMenuInfo)>(r2);

        virtualinvoke r0.<android.view.View: void onCreateContextMenu(android.view.ContextMenu)>(r1);

        r3 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r3 == null goto label1;

        $r8 = r3.<android.view.View$ListenerInfo: android.view.View$OnCreateContextMenuListener mOnCreateContextMenuListener>;

        if $r8 == null goto label1;

        $r9 = r3.<android.view.View$ListenerInfo: android.view.View$OnCreateContextMenuListener mOnCreateContextMenuListener>;

        interfaceinvoke $r9.<android.view.View$OnCreateContextMenuListener: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>(r1, r0, r2);

     label1:
        $r5 = (com.android.internal.view.menu.MenuBuilder) r1;

        virtualinvoke $r5.<com.android.internal.view.menu.MenuBuilder: void setCurrentMenuInfo(android.view.ContextMenu$ContextMenuInfo)>(null);

        $r6 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r6 == null goto label2;

        $r7 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r7.<android.view.ViewParent: void createContextMenu(android.view.ContextMenu)>(r1);

     label2:
        return;
    }

    protected android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return null;
    }

    protected void onCreateContextMenu(android.view.ContextMenu)
    {
        android.view.View r0;
        android.view.ContextMenu r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ContextMenu;

        return;
    }

    public boolean onTrackballEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        return 0;
    }

    public boolean onGenericMotionEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        return 0;
    }

    public boolean onHoverEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        int i0;
        boolean $z0, $z1, $z3, $z4, $z5;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        $z0 = r0.<android.view.View: boolean mSendingHoverAccessibilityEvents>;

        if $z0 != 0 goto label2;

        if i0 == 9 goto label1;

        if i0 != 7 goto label4;

     label1:
        $z4 = virtualinvoke r0.<android.view.View: boolean hasHoveredChild()>();

        if $z4 != 0 goto label4;

        $f2 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f3 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $z5 = virtualinvoke r0.<android.view.View: boolean pointInView(float,float)>($f2, $f3);

        if $z5 == 0 goto label4;

        specialinvoke r0.<android.view.View: void sendAccessibilityHoverEvent(int)>(128);

        r0.<android.view.View: boolean mSendingHoverAccessibilityEvents> = 1;

        goto label4;

     label2:
        if i0 == 10 goto label3;

        if i0 != 2 goto label4;

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $z3 = virtualinvoke r0.<android.view.View: boolean pointInView(float,float)>($f0, $f1);

        if $z3 != 0 goto label4;

     label3:
        r0.<android.view.View: boolean mSendingHoverAccessibilityEvents> = 0;

        specialinvoke r0.<android.view.View: void sendAccessibilityHoverEvent(int)>(256);

     label4:
        $z1 = specialinvoke r0.<android.view.View: boolean isHoverable()>();

        if $z1 == 0 goto label8;

        lookupswitch(i0)
        {
            case 9: goto label5;
            case 10: goto label6;
            default: goto label7;
        };

     label5:
        virtualinvoke r0.<android.view.View: void setHovered(boolean)>(1);

        goto label7;

     label6:
        virtualinvoke r0.<android.view.View: void setHovered(boolean)>(0);

     label7:
        specialinvoke r0.<android.view.View: boolean dispatchGenericMotionEventInternal(android.view.MotionEvent)>(r1);

        return 1;

     label8:
        return 0;
    }

    private boolean isHoverable()
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = i0 & 32;

        if $i1 != 32 goto label1;

        return 0;

     label1:
        $i2 = i0 & 16384;

        if $i2 == 16384 goto label2;

        $i3 = i0 & 2097152;

        if $i3 != 2097152 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public boolean isHovered()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 268435456;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setHovered(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 268435456;

        if $i5 != 0 goto label2;

        $i6 = r0.<android.view.View: int mPrivateFlags>;

        $i7 = $i6 | 268435456;

        r0.<android.view.View: int mPrivateFlags> = $i7;

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        virtualinvoke r0.<android.view.View: void onHoverChanged(boolean)>(1);

        goto label2;

     label1:
        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 268435456;

        if $i1 == 0 goto label2;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -268435457;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        virtualinvoke r0.<android.view.View: void onHoverChanged(boolean)>(0);

     label2:
        return;
    }

    public void onHoverChanged(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        float f0, f1, $f2, $f3, $f4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        boolean z0, z1, $z2, $z3, $z4, $z7, $z8, $z9, $z10, $z11, $z12, $z14, $z15, z16;
        android.view.TouchDelegate $r2, $r16;
        android.view.View$UnsetPressedState $r3, $r4, $r5, $r6, $r7;
        long $l8, $l15;
        android.view.View$PerformClick $r8, $r9, $r10;
        android.view.View$CheckForTap $r11, $r12, $r13, $r14, $r15;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = i0 & 32;

        if $i1 != 32 goto label05;

        $i17 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        if $i17 != 1 goto label01;

        $i19 = r0.<android.view.View: int mPrivateFlags>;

        $i22 = $i19 & 16384;

        if $i22 == 0 goto label01;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

     label01:
        $i21 = i0 & 16384;

        if $i21 == 16384 goto label02;

        $i20 = i0 & 2097152;

        if $i20 != 2097152 goto label03;

     label02:
        $z15 = 1;

        goto label04;

     label03:
        $z15 = 0;

     label04:
        return $z15;

     label05:
        $r2 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        if $r2 == null goto label06;

        $r16 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        $z14 = virtualinvoke $r16.<android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>(r1);

        if $z14 == 0 goto label06;

        return 1;

     label06:
        $i2 = i0 & 16384;

        if $i2 == 16384 goto label07;

        $i18 = i0 & 2097152;

        if $i18 != 2097152 goto label26;

     label07:
        $i3 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        tableswitch($i3)
        {
            case 0: goto label19;
            case 1: goto label08;
            case 2: goto label24;
            case 3: goto label23;
            default: goto label25;
        };

     label08:
        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 33554432;

        if $i5 == 0 goto label09;

        $z11 = 1;

        goto label10;

     label09:
        $z11 = 0;

     label10:
        z0 = $z11;

        $i6 = r0.<android.view.View: int mPrivateFlags>;

        $i7 = $i6 & 16384;

        if $i7 != 0 goto label11;

        if z0 == 0 goto label25;

     label11:
        z1 = 0;

        $z2 = virtualinvoke r0.<android.view.View: boolean isFocusable()>();

        if $z2 == 0 goto label12;

        $z9 = virtualinvoke r0.<android.view.View: boolean isFocusableInTouchMode()>();

        if $z9 == 0 goto label12;

        $z8 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z8 != 0 goto label12;

        z1 = virtualinvoke r0.<android.view.View: boolean requestFocus()>();

     label12:
        if z0 == 0 goto label13;

        specialinvoke r0.<android.view.View: void setPressed(boolean,float,float)>(1, f0, f1);

     label13:
        $z3 = r0.<android.view.View: boolean mHasPerformedLongPress>;

        if $z3 != 0 goto label15;

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        if z1 != 0 goto label15;

        $r9 = r0.<android.view.View: android.view.View$PerformClick mPerformClick>;

        if $r9 != null goto label14;

        $r10 = new android.view.View$PerformClick;

        specialinvoke $r10.<android.view.View$PerformClick: void <init>(android.view.View,android.view.View$1)>(r0, null);

        r0.<android.view.View: android.view.View$PerformClick mPerformClick> = $r10;

     label14:
        $r8 = r0.<android.view.View: android.view.View$PerformClick mPerformClick>;

        $z7 = virtualinvoke r0.<android.view.View: boolean post(java.lang.Runnable)>($r8);

        if $z7 != 0 goto label15;

        virtualinvoke r0.<android.view.View: boolean performClick()>();

     label15:
        $r3 = r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        if $r3 != null goto label16;

        $r7 = new android.view.View$UnsetPressedState;

        specialinvoke $r7.<android.view.View$UnsetPressedState: void <init>(android.view.View,android.view.View$1)>(r0, null);

        r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState> = $r7;

     label16:
        if z0 == 0 goto label17;

        $r5 = r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        $i9 = staticinvoke <android.view.ViewConfiguration: int getPressedStateDuration()>();

        $l8 = (long) $i9;

        virtualinvoke r0.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r5, $l8);

        goto label18;

     label17:
        $r4 = r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        $z4 = virtualinvoke r0.<android.view.View: boolean post(java.lang.Runnable)>($r4);

        if $z4 != 0 goto label18;

        $r6 = r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        virtualinvoke $r6.<android.view.View$UnsetPressedState: void run()>();

     label18:
        specialinvoke r0.<android.view.View: void removeTapCallback()>();

        goto label25;

     label19:
        r0.<android.view.View: boolean mHasPerformedLongPress> = 0;

        $z12 = virtualinvoke r0.<android.view.View: boolean performButtonActionOnTouchDown(android.view.MotionEvent)>(r1);

        if $z12 == 0 goto label20;

        goto label25;

     label20:
        z16 = virtualinvoke r0.<android.view.View: boolean isInScrollingContainer()>();

        if z16 == 0 goto label22;

        $i13 = r0.<android.view.View: int mPrivateFlags>;

        $i14 = $i13 | 33554432;

        r0.<android.view.View: int mPrivateFlags> = $i14;

        $r11 = r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap>;

        if $r11 != null goto label21;

        $r15 = new android.view.View$CheckForTap;

        specialinvoke $r15.<android.view.View$CheckForTap: void <init>(android.view.View,android.view.View$1)>(r0, null);

        r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap> = $r15;

     label21:
        $r12 = r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap>;

        $f4 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $r12.<android.view.View$CheckForTap: float x> = $f4;

        $r14 = r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap>;

        $f3 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $r14.<android.view.View$CheckForTap: float y> = $f3;

        $r13 = r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap>;

        $i16 = staticinvoke <android.view.ViewConfiguration: int getTapTimeout()>();

        $l15 = (long) $i16;

        virtualinvoke r0.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r13, $l15);

        goto label25;

     label22:
        specialinvoke r0.<android.view.View: void setPressed(boolean,float,float)>(1, f0, f1);

        specialinvoke r0.<android.view.View: void checkForLongClick(int)>(0);

        goto label25;

     label23:
        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

        specialinvoke r0.<android.view.View: void removeTapCallback()>();

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        goto label25;

     label24:
        virtualinvoke r0.<android.view.View: void drawableHotspotChanged(float,float)>(f0, f1);

        $i10 = r0.<android.view.View: int mTouchSlop>;

        $f2 = (float) $i10;

        $z10 = virtualinvoke r0.<android.view.View: boolean pointInView(float,float,float)>(f0, f1, $f2);

        if $z10 != 0 goto label25;

        specialinvoke r0.<android.view.View: void removeTapCallback()>();

        $i11 = r0.<android.view.View: int mPrivateFlags>;

        $i12 = $i11 & 16384;

        if $i12 == 0 goto label25;

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

     label25:
        return 1;

     label26:
        return 0;
    }

    public boolean isInScrollingContainer()
    {
        android.view.View r0;
        android.view.ViewParent r1;
        boolean $z0, $z1;
        android.view.ViewGroup $r2;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

     label1:
        if r1 == null goto label3;

        $z0 = r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label3;

        $r2 = (android.view.ViewGroup) r1;

        $z1 = virtualinvoke $r2.<android.view.ViewGroup: boolean shouldDelayChildPressedState()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        r1 = interfaceinvoke r1.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label1;

     label3:
        return 0;
    }

    private void removeLongPressCallback()
    {
        android.view.View r0;
        android.view.View$CheckForLongPress $r1, $r2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r2);

     label1:
        return;
    }

    private void removePerformClickCallback()
    {
        android.view.View r0;
        android.view.View$PerformClick $r1, $r2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$PerformClick mPerformClick>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$PerformClick mPerformClick>;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r2);

     label1:
        return;
    }

    private void removeUnsetPressCallback()
    {
        android.view.View r0;
        int $i0, $i1;
        android.view.View$UnsetPressedState $r1, $r2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 16384;

        if $i1 == 0 goto label1;

        $r1 = r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        if $r1 == null goto label1;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

        $r2 = r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r2);

     label1:
        return;
    }

    private void removeTapCallback()
    {
        android.view.View r0;
        android.view.View$CheckForTap $r1, $r2;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap>;

        if $r1 == null goto label1;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -33554433;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        $r2 = r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap>;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r2);

     label1:
        return;
    }

    public void cancelLongPress()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        specialinvoke r0.<android.view.View: void removeTapCallback()>();

        return;
    }

    private void removeSendViewScrolledAccessibilityEventCallback()
    {
        android.view.View r0;
        android.view.View$SendViewScrolledAccessibilityEvent $r1, $r2, $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$SendViewScrolledAccessibilityEvent mSendViewScrolledAccessibilityEvent>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$SendViewScrolledAccessibilityEvent mSendViewScrolledAccessibilityEvent>;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r2);

        $r3 = r0.<android.view.View: android.view.View$SendViewScrolledAccessibilityEvent mSendViewScrolledAccessibilityEvent>;

        $r3.<android.view.View$SendViewScrolledAccessibilityEvent: boolean mIsPending> = 0;

     label1:
        return;
    }

    public void setTouchDelegate(android.view.TouchDelegate)
    {
        android.view.View r0;
        android.view.TouchDelegate r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.TouchDelegate;

        r0.<android.view.View: android.view.TouchDelegate mTouchDelegate> = r1;

        return;
    }

    public android.view.TouchDelegate getTouchDelegate()
    {
        android.view.View r0;
        android.view.TouchDelegate $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        return $r1;
    }

    public final void requestUnbufferedDispatch(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        int i0;
        android.view.View$AttachInfo $r2, $r3;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label2;

        if i0 == 0 goto label1;

        if i0 != 2 goto label2;

     label1:
        $z0 = virtualinvoke r1.<android.view.MotionEvent: boolean isTouchEvent()>();

        if $z0 != 0 goto label3;

     label2:
        return;

     label3:
        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3.<android.view.View$AttachInfo: boolean mUnbufferedDispatchRequested> = 1;

        return;
    }

    void setFlags(int, int)
    {
        android.view.View r0, $r14, $r17, $r23;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        android.content.Context $r1;
        android.view.accessibility.AccessibilityManager $r2;
        android.view.View$AttachInfo $r3, $r4, $r13, $r16, $r18, $r20, $r21;
        android.view.ViewParent $r5, $r6, $r8, $r9, $r11, $r12, $r15, $r19, $r22, $r24, $r25, $r26, $r27;
        android.graphics.drawable.Drawable $r7;
        android.view.ViewGroup $r10;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        $r2 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r1);

        z0 = virtualinvoke $r2.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if z0 == 0 goto label01;

        $z8 = virtualinvoke r0.<android.view.View: boolean includeForAccessibility()>();

        if $z8 == 0 goto label01;

        $z9 = 1;

        goto label02;

     label01:
        $z9 = 0;

     label02:
        z1 = $z9;

        i2 = r0.<android.view.View: int mViewFlags>;

        $i7 = r0.<android.view.View: int mViewFlags>;

        $i6 = i1 ^ -1;

        $i9 = $i7 & $i6;

        $i8 = i0 & i1;

        $i11 = $i9 | $i8;

        r0.<android.view.View: int mViewFlags> = $i11;

        $i10 = r0.<android.view.View: int mViewFlags>;

        i3 = $i10 ^ i2;

        if i3 != 0 goto label03;

        return;

     label03:
        i4 = r0.<android.view.View: int mPrivateFlags>;

        $i13 = i3 & 1;

        if $i13 == 0 goto label05;

        $i59 = i4 & 16;

        if $i59 == 0 goto label05;

        $i55 = i2 & 1;

        if $i55 != 1 goto label04;

        $i60 = i4 & 2;

        if $i60 == 0 goto label04;

        virtualinvoke r0.<android.view.View: void clearFocus()>();

        goto label05;

     label04:
        $i54 = i2 & 1;

        if $i54 != 0 goto label05;

        $i56 = i4 & 2;

        if $i56 != 0 goto label05;

        $r25 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r25 == null goto label05;

        $r27 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r27.<android.view.ViewParent: void focusableViewAvailable(android.view.View)>(r0);

     label05:
        i5 = i0 & 12;

        if i5 != 0 goto label06;

        $i53 = i3 & 12;

        if $i53 == 0 goto label06;

        $i52 = r0.<android.view.View: int mPrivateFlags>;

        $i49 = $i52 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i49;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        virtualinvoke r0.<android.view.View: void needGlobalAttributesUpdate(boolean)>(1);

        $r22 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r22 == null goto label06;

        $i50 = r0.<android.view.View: int mBottom>;

        $i51 = r0.<android.view.View: int mTop>;

        if $i50 <= $i51 goto label06;

        $i57 = r0.<android.view.View: int mRight>;

        $i58 = r0.<android.view.View: int mLeft>;

        if $i57 <= $i58 goto label06;

        $r26 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r26.<android.view.ViewParent: void focusableViewAvailable(android.view.View)>(r0);

     label06:
        $i12 = i3 & 8;

        if $i12 == 0 goto label10;

        virtualinvoke r0.<android.view.View: void needGlobalAttributesUpdate(boolean)>(0);

        virtualinvoke r0.<android.view.View: void requestLayout()>();

        $i42 = r0.<android.view.View: int mViewFlags>;

        $i48 = $i42 & 12;

        if $i48 != 8 goto label09;

        $z7 = virtualinvoke r0.<android.view.View: boolean hasFocus()>();

        if $z7 == 0 goto label07;

        virtualinvoke r0.<android.view.View: void clearFocus()>();

     label07:
        virtualinvoke r0.<android.view.View: void clearAccessibilityFocus()>();

        virtualinvoke r0.<android.view.View: void destroyDrawingCache()>();

        $r19 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z6 = $r19 instanceof android.view.View;

        if $z6 == 0 goto label08;

        $r24 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r23 = (android.view.View) $r24;

        virtualinvoke $r23.<android.view.View: void invalidate(boolean)>(1);

     label08:
        $i46 = r0.<android.view.View: int mPrivateFlags>;

        $i47 = $i46 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i47;

     label09:
        $r20 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r20 == null goto label10;

        $r21 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r21.<android.view.View$AttachInfo: boolean mViewVisibilityChanged> = 1;

     label10:
        $i15 = i3 & 4;

        if $i15 == 0 goto label13;

        virtualinvoke r0.<android.view.View: void needGlobalAttributesUpdate(boolean)>(0);

        $i41 = r0.<android.view.View: int mPrivateFlags>;

        $i43 = $i41 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i43;

        $i44 = r0.<android.view.View: int mViewFlags>;

        $i45 = $i44 & 12;

        if $i45 != 4 goto label12;

        $r17 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        if $r17 == r0 goto label12;

        $z5 = virtualinvoke r0.<android.view.View: boolean hasFocus()>();

        if $z5 == 0 goto label11;

        virtualinvoke r0.<android.view.View: void clearFocus()>();

     label11:
        virtualinvoke r0.<android.view.View: void clearAccessibilityFocus()>();

     label12:
        $r18 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r18 == null goto label13;

        $r16 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r16.<android.view.View$AttachInfo: boolean mViewVisibilityChanged> = 1;

     label13:
        $i14 = i3 & 12;

        if $i14 == 0 goto label17;

        if i5 == 0 goto label14;

        $r13 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r13 == null goto label14;

        specialinvoke r0.<android.view.View: void cleanupDraw()>();

     label14:
        $r9 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z4 = $r9 instanceof android.view.ViewGroup;

        if $z4 == 0 goto label15;

        $r11 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r10 = (android.view.ViewGroup) $r11;

        $i40 = i3 & 12;

        virtualinvoke $r10.<android.view.ViewGroup: void onChildVisibilityChanged(android.view.View,int,int)>(r0, $i40, i5);

        $r15 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r14 = (android.view.View) $r15;

        virtualinvoke $r14.<android.view.View: void invalidate(boolean)>(1);

        goto label16;

     label15:
        $r8 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r8 == null goto label16;

        $r12 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r12.<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>(r0, null);

     label16:
        virtualinvoke r0.<android.view.View: void dispatchVisibilityChanged(android.view.View,int)>(r0, i5);

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label17:
        $i17 = i3 & 131072;

        if $i17 == 0 goto label18;

        virtualinvoke r0.<android.view.View: void destroyDrawingCache()>();

     label18:
        $i16 = i3 & 32768;

        if $i16 == 0 goto label19;

        virtualinvoke r0.<android.view.View: void destroyDrawingCache()>();

        $i35 = r0.<android.view.View: int mPrivateFlags>;

        $i39 = $i35 & -32769;

        r0.<android.view.View: int mPrivateFlags> = $i39;

        virtualinvoke r0.<android.view.View: void invalidateParentCaches()>();

     label19:
        $i19 = i3 & 1572864;

        if $i19 == 0 goto label20;

        virtualinvoke r0.<android.view.View: void destroyDrawingCache()>();

        $i37 = r0.<android.view.View: int mPrivateFlags>;

        $i36 = $i37 & -32769;

        r0.<android.view.View: int mPrivateFlags> = $i36;

     label20:
        $i18 = i3 & 128;

        if $i18 == 0 goto label24;

        $i26 = r0.<android.view.View: int mViewFlags>;

        $i27 = $i26 & 128;

        if $i27 == 0 goto label22;

        $r7 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r7 == null goto label21;

        $i34 = r0.<android.view.View: int mPrivateFlags>;

        $i31 = $i34 & -129;

        r0.<android.view.View: int mPrivateFlags> = $i31;

        $i32 = r0.<android.view.View: int mPrivateFlags>;

        $i38 = $i32 | 256;

        r0.<android.view.View: int mPrivateFlags> = $i38;

        goto label23;

     label21:
        $i28 = r0.<android.view.View: int mPrivateFlags>;

        $i33 = $i28 | 128;

        r0.<android.view.View: int mPrivateFlags> = $i33;

        goto label23;

     label22:
        $i29 = r0.<android.view.View: int mPrivateFlags>;

        $i30 = $i29 & -129;

        r0.<android.view.View: int mPrivateFlags> = $i30;

     label23:
        virtualinvoke r0.<android.view.View: void requestLayout()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label24:
        $i21 = i3 & 67108864;

        if $i21 == 0 goto label25;

        $r5 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r5 == null goto label25;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label25;

        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z3 = $r4.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z3 != 0 goto label25;

        $r6 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r6.<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>(r0);

     label25:
        if z0 == 0 goto label29;

        $i20 = i3 & 1;

        if $i20 != 0 goto label26;

        $i22 = i3 & 12;

        if $i22 != 0 goto label26;

        $i24 = i3 & 16384;

        if $i24 != 0 goto label26;

        $i23 = i3 & 2097152;

        if $i23 == 0 goto label28;

     label26:
        $z2 = virtualinvoke r0.<android.view.View: boolean includeForAccessibility()>();

        if z1 == $z2 goto label27;

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

        goto label29;

     label27:
        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

        goto label29;

     label28:
        $i25 = i3 & 32;

        if $i25 == 0 goto label29;

        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

     label29:
        return;
    }

    public void bringToFront()
    {
        android.view.View r0;
        android.view.ViewParent $r1, $r2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r2.<android.view.ViewParent: void bringChildToFront(android.view.View)>(r0);

     label1:
        return;
    }

    protected void onScrollChanged(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3;
        android.view.View$AttachInfo r1;
        android.content.Context $r2;
        android.view.accessibility.AccessibilityManager $r3;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r2 = r0.<android.view.View: android.content.Context mContext>;

        $r3 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r2);

        $z0 = virtualinvoke $r3.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.view.View: void postSendViewScrolledAccessibilityEventCallback()>();

     label1:
        r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label2;

        r1.<android.view.View$AttachInfo: boolean mViewScrollChanged> = 1;

     label2:
        return;
    }

    protected void onSizeChanged(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        return;
    }

    protected void dispatchDraw(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        return;
    }

    public final android.view.ViewParent getParent()
    {
        android.view.View r0;
        android.view.ViewParent $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        return $r1;
    }

    public void setScrollX(int)
    {
        android.view.View r0;
        int i0, $i1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mScrollY>;

        virtualinvoke r0.<android.view.View: void scrollTo(int,int)>(i0, $i1);

        return;
    }

    public void setScrollY(int)
    {
        android.view.View r0;
        int i0, $i1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mScrollX>;

        virtualinvoke r0.<android.view.View: void scrollTo(int,int)>($i1, i0);

        return;
    }

    public final int getScrollX()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mScrollX>;

        return $i0;
    }

    public final int getScrollY()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mScrollY>;

        return $i0;
    }

    public final int getWidth()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i1 = r0.<android.view.View: int mRight>;

        $i0 = r0.<android.view.View: int mLeft>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public final int getHeight()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i1 = r0.<android.view.View: int mBottom>;

        $i0 = r0.<android.view.View: int mTop>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public void getDrawingRect(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $i0 = r0.<android.view.View: int mScrollX>;

        r1.<android.graphics.Rect: int left> = $i0;

        $i1 = r0.<android.view.View: int mScrollY>;

        r1.<android.graphics.Rect: int top> = $i1;

        $i5 = r0.<android.view.View: int mScrollX>;

        $i3 = r0.<android.view.View: int mRight>;

        $i2 = r0.<android.view.View: int mLeft>;

        $i4 = $i3 - $i2;

        $i6 = $i5 + $i4;

        r1.<android.graphics.Rect: int right> = $i6;

        $i10 = r0.<android.view.View: int mScrollY>;

        $i8 = r0.<android.view.View: int mBottom>;

        $i7 = r0.<android.view.View: int mTop>;

        $i9 = $i8 - $i7;

        $i11 = $i10 + $i9;

        r1.<android.graphics.Rect: int bottom> = $i11;

        return;
    }

    public final int getMeasuredWidth()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mMeasuredWidth>;

        $i1 = $i0 & 16777215;

        return $i1;
    }

    public final int getMeasuredWidthAndState()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mMeasuredWidth>;

        return $i0;
    }

    public final int getMeasuredHeight()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mMeasuredHeight>;

        $i1 = $i0 & 16777215;

        return $i1;
    }

    public final int getMeasuredHeightAndState()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mMeasuredHeight>;

        return $i0;
    }

    public final int getMeasuredState()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mMeasuredWidth>;

        $i4 = $i0 & -16777216;

        $i1 = r0.<android.view.View: int mMeasuredHeight>;

        $i2 = $i1 >> 16;

        $i3 = $i2 & -256;

        $i5 = $i4 | $i3;

        return $i5;
    }

    public android.graphics.Matrix getMatrix()
    {
        android.view.View r0;
        android.graphics.Matrix r1;
        android.view.View$TransformationInfo $r2;
        android.view.RenderNode $r3;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void ensureTransformationInfo()>();

        $r2 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        r1 = staticinvoke <android.view.View$TransformationInfo: android.graphics.Matrix access$1600(android.view.View$TransformationInfo)>($r2);

        $r3 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r3.<android.view.RenderNode: void getMatrix(android.graphics.Matrix)>(r1);

        return r1;
    }

    final boolean hasIdentityMatrix()
    {
        android.view.View r0;
        android.view.RenderNode $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.view.RenderNode: boolean hasIdentityMatrix()>();

        return $z0;
    }

    void ensureTransformationInfo()
    {
        android.view.View r0;
        android.view.View$TransformationInfo $r1, $r2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        if $r1 != null goto label1;

        $r2 = new android.view.View$TransformationInfo;

        specialinvoke $r2.<android.view.View$TransformationInfo: void <init>()>();

        r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo> = $r2;

     label1:
        return;
    }

    public final android.graphics.Matrix getInverseMatrix()
    {
        android.view.View r0;
        android.graphics.Matrix r1, $r3, $r6;
        android.view.View$TransformationInfo $r2, $r4, $r7;
        android.view.RenderNode $r5;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void ensureTransformationInfo()>();

        $r2 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $r3 = staticinvoke <android.view.View$TransformationInfo: android.graphics.Matrix access$1700(android.view.View$TransformationInfo)>($r2);

        if $r3 != null goto label1;

        $r7 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $r6 = new android.graphics.Matrix;

        specialinvoke $r6.<android.graphics.Matrix: void <init>()>();

        staticinvoke <android.view.View$TransformationInfo: android.graphics.Matrix access$1702(android.view.View$TransformationInfo,android.graphics.Matrix)>($r7, $r6);

     label1:
        $r4 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        r1 = staticinvoke <android.view.View$TransformationInfo: android.graphics.Matrix access$1700(android.view.View$TransformationInfo)>($r4);

        $r5 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r5.<android.view.RenderNode: void getInverseMatrix(android.graphics.Matrix)>(r1);

        return r1;
    }

    public float getCameraDistance()
    {
        android.view.View r0;
        float f0, $f1, $f2, $f3;
        android.content.res.Resources $r1;
        android.util.DisplayMetrics $r2;
        int $i0;
        android.view.RenderNode $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.content.res.Resources mResources>;

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i0 = $r2.<android.util.DisplayMetrics: int densityDpi>;

        f0 = (float) $i0;

        $r3 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f1 = virtualinvoke $r3.<android.view.RenderNode: float getCameraDistance()>();

        $f2 = $f1 * f0;

        $f3 = neg $f2;

        return $f3;
    }

    public void setCameraDistance(float)
    {
        android.view.View r0;
        float f0, f1, $f2, $f3, $f4;
        android.content.res.Resources $r1;
        android.util.DisplayMetrics $r2;
        int $i0;
        android.view.RenderNode $r3;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $r1 = r0.<android.view.View: android.content.res.Resources mResources>;

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i0 = $r2.<android.util.DisplayMetrics: int densityDpi>;

        f1 = (float) $i0;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r3 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>(f0);

        $f3 = neg $f2;

        $f4 = $f3 / f1;

        virtualinvoke $r3.<android.view.RenderNode: boolean setCameraDistance(float)>($f4);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        return;
    }

    public float getRotation()
    {
        android.view.View r0;
        android.view.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.view.RenderNode: float getRotation()>();

        return $f0;
    }

    public void setRotation(float)
    {
        android.view.View r0;
        float f0, $f1;
        byte $b0;
        android.view.RenderNode $r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getRotation()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setRotation(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label1:
        return;
    }

    public float getRotationY()
    {
        android.view.View r0;
        android.view.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.view.RenderNode: float getRotationY()>();

        return $f0;
    }

    public void setRotationY(float)
    {
        android.view.View r0;
        float f0, $f1;
        byte $b0;
        android.view.RenderNode $r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getRotationY()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setRotationY(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label1:
        return;
    }

    public float getRotationX()
    {
        android.view.View r0;
        android.view.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.view.RenderNode: float getRotationX()>();

        return $f0;
    }

    public void setRotationX(float)
    {
        android.view.View r0;
        float f0, $f1;
        byte $b0;
        android.view.RenderNode $r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getRotationX()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setRotationX(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label1:
        return;
    }

    public float getScaleX()
    {
        android.view.View r0;
        android.view.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.view.RenderNode: float getScaleX()>();

        return $f0;
    }

    public void setScaleX(float)
    {
        android.view.View r0;
        float f0, $f1;
        byte $b0;
        android.view.RenderNode $r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getScaleX()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setScaleX(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label1:
        return;
    }

    public float getScaleY()
    {
        android.view.View r0;
        android.view.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.view.RenderNode: float getScaleY()>();

        return $f0;
    }

    public void setScaleY(float)
    {
        android.view.View r0;
        float f0, $f1;
        byte $b0;
        android.view.RenderNode $r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getScaleY()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setScaleY(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label1:
        return;
    }

    public float getPivotX()
    {
        android.view.View r0;
        android.view.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.view.RenderNode: float getPivotX()>();

        return $f0;
    }

    public void setPivotX(float)
    {
        android.view.View r0;
        float f0, $f1;
        android.view.RenderNode $r1, $r2;
        boolean $z0;
        byte $b0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.view.RenderNode: boolean isPivotExplicitlySet()>();

        if $z0 == 0 goto label1;

        $f1 = virtualinvoke r0.<android.view.View: float getPivotX()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r2 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r2.<android.view.RenderNode: boolean setPivotX(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

     label2:
        return;
    }

    public float getPivotY()
    {
        android.view.View r0;
        android.view.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.view.RenderNode: float getPivotY()>();

        return $f0;
    }

    public void setPivotY(float)
    {
        android.view.View r0;
        float f0, $f1;
        android.view.RenderNode $r1, $r2;
        boolean $z0;
        byte $b0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.view.RenderNode: boolean isPivotExplicitlySet()>();

        if $z0 == 0 goto label1;

        $f1 = virtualinvoke r0.<android.view.View: float getPivotY()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r2 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r2.<android.view.RenderNode: boolean setPivotY(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

     label2:
        return;
    }

    public float getAlpha()
    {
        android.view.View r0;
        android.view.View$TransformationInfo $r1, $r2;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $f0 = $r2.<android.view.View$TransformationInfo: float mAlpha>;

        goto label2;

     label1:
        $f0 = 1.0F;

     label2:
        return $f0;
    }

    public boolean hasOverlappingRendering()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 1;
    }

    public void setAlpha(float)
    {
        android.view.View r0;
        float f0, $f1, $f2, $f3;
        android.view.View$TransformationInfo $r1, $r2;
        byte $b0;
        int $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        android.view.RenderNode $r3;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        virtualinvoke r0.<android.view.View: void ensureTransformationInfo()>();

        $r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $f1 = $r1.<android.view.View$TransformationInfo: float mAlpha>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label2;

        $r2 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $r2.<android.view.View$TransformationInfo: float mAlpha> = f0;

        $f2 = f0 * 255.0F;

        $i1 = (int) $f2;

        $z0 = virtualinvoke r0.<android.view.View: boolean onSetAlpha(int)>($i1);

        if $z0 == 0 goto label1;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 | 262144;

        r0.<android.view.View: int mPrivateFlags> = $i5;

        virtualinvoke r0.<android.view.View: void invalidateParentCaches()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        goto label2;

     label1:
        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -262145;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r3 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f3 = specialinvoke r0.<android.view.View: float getFinalAlpha()>();

        virtualinvoke $r3.<android.view.RenderNode: boolean setAlpha(float)>($f3);

        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

     label2:
        return;
    }

    boolean setAlphaNoInvalidation(float)
    {
        android.view.View r0;
        float f0, $f1, $f2, $f3;
        boolean z0;
        android.view.View$TransformationInfo $r1, $r2;
        byte $b0;
        int $i1, $i2, $i3, $i4, $i5;
        android.view.RenderNode $r3;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        virtualinvoke r0.<android.view.View: void ensureTransformationInfo()>();

        $r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $f1 = $r1.<android.view.View$TransformationInfo: float mAlpha>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label2;

        $r2 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $r2.<android.view.View$TransformationInfo: float mAlpha> = f0;

        $f2 = f0 * 255.0F;

        $i1 = (int) $f2;

        z0 = virtualinvoke r0.<android.view.View: boolean onSetAlpha(int)>($i1);

        if z0 == 0 goto label1;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 | 262144;

        r0.<android.view.View: int mPrivateFlags> = $i5;

        return 1;

     label1:
        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -262145;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        $r3 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f3 = specialinvoke r0.<android.view.View: float getFinalAlpha()>();

        virtualinvoke $r3.<android.view.RenderNode: boolean setAlpha(float)>($f3);

     label2:
        return 0;
    }

    public void setTransitionAlpha(float)
    {
        android.view.View r0;
        float f0, $f1, $f2;
        android.view.View$TransformationInfo $r1, $r2;
        byte $b0;
        int $i1, $i2;
        android.view.RenderNode $r3;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        virtualinvoke r0.<android.view.View: void ensureTransformationInfo()>();

        $r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $f1 = $r1.<android.view.View$TransformationInfo: float mTransitionAlpha>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        $r2 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $r2.<android.view.View$TransformationInfo: float mTransitionAlpha> = f0;

        $i1 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & -262145;

        r0.<android.view.View: int mPrivateFlags> = $i2;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r3 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f2 = specialinvoke r0.<android.view.View: float getFinalAlpha()>();

        virtualinvoke $r3.<android.view.RenderNode: boolean setAlpha(float)>($f2);

     label1:
        return;
    }

    private float getFinalAlpha()
    {
        android.view.View r0;
        android.view.View$TransformationInfo $r1, $r2, $r3;
        float $f0, $f1, $f2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $f1 = $r2.<android.view.View$TransformationInfo: float mAlpha>;

        $r3 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $f0 = $r3.<android.view.View$TransformationInfo: float mTransitionAlpha>;

        $f2 = $f1 * $f0;

        return $f2;

     label1:
        return 1.0F;
    }

    public float getTransitionAlpha()
    {
        android.view.View r0;
        android.view.View$TransformationInfo $r1, $r2;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $f0 = $r2.<android.view.View$TransformationInfo: float mTransitionAlpha>;

        goto label2;

     label1:
        $f0 = 1.0F;

     label2:
        return $f0;
    }

    public final int getTop()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mTop>;

        return $i0;
    }

    public final void setTop(int)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24;
        boolean z0;
        android.view.RenderNode $r1;
        android.view.View$AttachInfo $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i3 = r0.<android.view.View: int mTop>;

        if i0 == $i3 goto label6;

        z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if z0 == 0 goto label3;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label4;

        $i17 = r0.<android.view.View: int mTop>;

        if i0 >= $i17 goto label1;

        i1 = i0;

        $i22 = r0.<android.view.View: int mTop>;

        i2 = i0 - $i22;

        goto label2;

     label1:
        i1 = r0.<android.view.View: int mTop>;

        i2 = 0;

     label2:
        $i19 = r0.<android.view.View: int mRight>;

        $i16 = r0.<android.view.View: int mLeft>;

        $i20 = $i19 - $i16;

        $i18 = r0.<android.view.View: int mBottom>;

        $i21 = $i18 - i1;

        virtualinvoke r0.<android.view.View: void invalidate(int,int,int,int)>(0, i2, $i20, $i21);

        goto label4;

     label3:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label4:
        $i5 = r0.<android.view.View: int mRight>;

        $i4 = r0.<android.view.View: int mLeft>;

        i23 = $i5 - $i4;

        $i7 = r0.<android.view.View: int mBottom>;

        $i6 = r0.<android.view.View: int mTop>;

        i24 = $i7 - $i6;

        r0.<android.view.View: int mTop> = i0;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $i8 = r0.<android.view.View: int mTop>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setTop(int)>($i8);

        $i10 = r0.<android.view.View: int mBottom>;

        $i9 = r0.<android.view.View: int mTop>;

        $i12 = $i10 - $i9;

        specialinvoke r0.<android.view.View: void sizeChange(int,int,int,int)>(i23, $i12, i23, i24);

        if z0 != 0 goto label5;

        $i13 = r0.<android.view.View: int mPrivateFlags>;

        $i15 = $i13 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i15;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label5:
        r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

        $i11 = r0.<android.view.View: int mPrivateFlags2>;

        $i14 = $i11 & 268435456;

        if $i14 != 268435456 goto label6;

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

     label6:
        return;
    }

    public final int getBottom()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mBottom>;

        return $i0;
    }

    public boolean isDirty()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 6291456;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void setBottom(int)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22;
        boolean z0;
        android.view.RenderNode $r1;
        android.view.View$AttachInfo $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i3 = r0.<android.view.View: int mBottom>;

        if i0 == $i3 goto label6;

        z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if z0 == 0 goto label3;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label4;

        $i17 = r0.<android.view.View: int mBottom>;

        if i0 >= $i17 goto label1;

        i1 = r0.<android.view.View: int mBottom>;

        goto label2;

     label1:
        i1 = i0;

     label2:
        $i19 = r0.<android.view.View: int mRight>;

        $i16 = r0.<android.view.View: int mLeft>;

        $i20 = $i19 - $i16;

        $i18 = r0.<android.view.View: int mTop>;

        $i21 = i1 - $i18;

        virtualinvoke r0.<android.view.View: void invalidate(int,int,int,int)>(0, 0, $i20, $i21);

        goto label4;

     label3:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label4:
        $i5 = r0.<android.view.View: int mRight>;

        $i4 = r0.<android.view.View: int mLeft>;

        i22 = $i5 - $i4;

        $i7 = r0.<android.view.View: int mBottom>;

        $i6 = r0.<android.view.View: int mTop>;

        i2 = $i7 - $i6;

        r0.<android.view.View: int mBottom> = i0;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $i8 = r0.<android.view.View: int mBottom>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setBottom(int)>($i8);

        $i10 = r0.<android.view.View: int mBottom>;

        $i9 = r0.<android.view.View: int mTop>;

        $i12 = $i10 - $i9;

        specialinvoke r0.<android.view.View: void sizeChange(int,int,int,int)>(i22, $i12, i22, i2);

        if z0 != 0 goto label5;

        $i13 = r0.<android.view.View: int mPrivateFlags>;

        $i15 = $i13 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i15;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label5:
        r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

        $i11 = r0.<android.view.View: int mPrivateFlags2>;

        $i14 = $i11 & 268435456;

        if $i14 != 268435456 goto label6;

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

     label6:
        return;
    }

    public final int getLeft()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mLeft>;

        return $i0;
    }

    public final void setLeft(int)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23;
        boolean z0;
        android.view.RenderNode $r1;
        android.view.View$AttachInfo $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i3 = r0.<android.view.View: int mLeft>;

        if i0 == $i3 goto label6;

        z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if z0 == 0 goto label3;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label4;

        $i15 = r0.<android.view.View: int mLeft>;

        if i0 >= $i15 goto label1;

        i1 = i0;

        $i20 = r0.<android.view.View: int mLeft>;

        i2 = i0 - $i20;

        goto label2;

     label1:
        i1 = r0.<android.view.View: int mLeft>;

        i2 = 0;

     label2:
        $i17 = r0.<android.view.View: int mRight>;

        $i21 = $i17 - i1;

        $i19 = r0.<android.view.View: int mBottom>;

        $i16 = r0.<android.view.View: int mTop>;

        $i18 = $i19 - $i16;

        virtualinvoke r0.<android.view.View: void invalidate(int,int,int,int)>(i2, 0, $i21, $i18);

        goto label4;

     label3:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label4:
        $i5 = r0.<android.view.View: int mRight>;

        $i4 = r0.<android.view.View: int mLeft>;

        i22 = $i5 - $i4;

        $i7 = r0.<android.view.View: int mBottom>;

        $i6 = r0.<android.view.View: int mTop>;

        i23 = $i7 - $i6;

        r0.<android.view.View: int mLeft> = i0;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setLeft(int)>(i0);

        $i9 = r0.<android.view.View: int mRight>;

        $i8 = r0.<android.view.View: int mLeft>;

        $i10 = $i9 - $i8;

        specialinvoke r0.<android.view.View: void sizeChange(int,int,int,int)>($i10, i23, i22, i23);

        if z0 != 0 goto label5;

        $i14 = r0.<android.view.View: int mPrivateFlags>;

        $i13 = $i14 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i13;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label5:
        r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

        $i12 = r0.<android.view.View: int mPrivateFlags2>;

        $i11 = $i12 & 268435456;

        if $i11 != 268435456 goto label6;

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

     label6:
        return;
    }

    public final int getRight()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mRight>;

        return $i0;
    }

    public final void setRight(int)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22;
        boolean z0;
        android.view.RenderNode $r1;
        android.view.View$AttachInfo $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i3 = r0.<android.view.View: int mRight>;

        if i0 == $i3 goto label6;

        z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if z0 == 0 goto label3;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label4;

        $i17 = r0.<android.view.View: int mRight>;

        if i0 >= $i17 goto label1;

        i1 = r0.<android.view.View: int mRight>;

        goto label2;

     label1:
        i1 = i0;

     label2:
        $i16 = r0.<android.view.View: int mLeft>;

        $i20 = i1 - $i16;

        $i18 = r0.<android.view.View: int mBottom>;

        $i19 = r0.<android.view.View: int mTop>;

        $i21 = $i18 - $i19;

        virtualinvoke r0.<android.view.View: void invalidate(int,int,int,int)>(0, 0, $i20, $i21);

        goto label4;

     label3:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label4:
        $i5 = r0.<android.view.View: int mRight>;

        $i4 = r0.<android.view.View: int mLeft>;

        i22 = $i5 - $i4;

        $i7 = r0.<android.view.View: int mBottom>;

        $i6 = r0.<android.view.View: int mTop>;

        i2 = $i7 - $i6;

        r0.<android.view.View: int mRight> = i0;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $i8 = r0.<android.view.View: int mRight>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setRight(int)>($i8);

        $i10 = r0.<android.view.View: int mRight>;

        $i9 = r0.<android.view.View: int mLeft>;

        $i12 = $i10 - $i9;

        specialinvoke r0.<android.view.View: void sizeChange(int,int,int,int)>($i12, i2, i22, i2);

        if z0 != 0 goto label5;

        $i13 = r0.<android.view.View: int mPrivateFlags>;

        $i15 = $i13 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i15;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label5:
        r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

        $i11 = r0.<android.view.View: int mPrivateFlags2>;

        $i14 = $i11 & 268435456;

        if $i14 != 268435456 goto label6;

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

     label6:
        return;
    }

    public float getX()
    {
        android.view.View r0;
        int $i0;
        float $f0, $f1, $f2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mLeft>;

        $f0 = (float) $i0;

        $f1 = virtualinvoke r0.<android.view.View: float getTranslationX()>();

        $f2 = $f0 + $f1;

        return $f2;
    }

    public void setX(float)
    {
        android.view.View r0;
        float f0, $f1, $f2;
        int $i0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $i0 = r0.<android.view.View: int mLeft>;

        $f1 = (float) $i0;

        $f2 = f0 - $f1;

        virtualinvoke r0.<android.view.View: void setTranslationX(float)>($f2);

        return;
    }

    public float getY()
    {
        android.view.View r0;
        int $i0;
        float $f0, $f1, $f2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mTop>;

        $f0 = (float) $i0;

        $f1 = virtualinvoke r0.<android.view.View: float getTranslationY()>();

        $f2 = $f0 + $f1;

        return $f2;
    }

    public void setY(float)
    {
        android.view.View r0;
        float f0, $f1, $f2;
        int $i0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $i0 = r0.<android.view.View: int mTop>;

        $f1 = (float) $i0;

        $f2 = f0 - $f1;

        virtualinvoke r0.<android.view.View: void setTranslationY(float)>($f2);

        return;
    }

    public float getZ()
    {
        android.view.View r0;
        float $f0, $f1, $f2;

        r0 := @this: android.view.View;

        $f0 = virtualinvoke r0.<android.view.View: float getElevation()>();

        $f1 = virtualinvoke r0.<android.view.View: float getTranslationZ()>();

        $f2 = $f0 + $f1;

        return $f2;
    }

    public void setZ(float)
    {
        android.view.View r0;
        float f0, $f1, $f2;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getElevation()>();

        $f2 = f0 - $f1;

        virtualinvoke r0.<android.view.View: void setTranslationZ(float)>($f2);

        return;
    }

    public float getElevation()
    {
        android.view.View r0;
        android.view.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.view.RenderNode: float getElevation()>();

        return $f0;
    }

    public void setElevation(float)
    {
        android.view.View r0;
        float f0, $f1;
        byte $b0;
        android.view.RenderNode $r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getElevation()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setElevation(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

     label1:
        return;
    }

    public float getTranslationX()
    {
        android.view.View r0;
        android.view.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.view.RenderNode: float getTranslationX()>();

        return $f0;
    }

    public void setTranslationX(float)
    {
        android.view.View r0;
        float f0, $f1;
        byte $b0;
        android.view.RenderNode $r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getTranslationX()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setTranslationX(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label1:
        return;
    }

    public float getTranslationY()
    {
        android.view.View r0;
        android.view.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.view.RenderNode: float getTranslationY()>();

        return $f0;
    }

    public void setTranslationY(float)
    {
        android.view.View r0;
        float f0, $f1;
        byte $b0;
        android.view.RenderNode $r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getTranslationY()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setTranslationY(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

     label1:
        return;
    }

    public float getTranslationZ()
    {
        android.view.View r0;
        android.view.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.view.RenderNode: float getTranslationZ()>();

        return $f0;
    }

    public void setTranslationZ(float)
    {
        android.view.View r0;
        float f0, $f1;
        byte $b0;
        android.view.RenderNode $r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getTranslationZ()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setTranslationZ(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

     label1:
        return;
    }

    public void setAnimationMatrix(android.graphics.Matrix)
    {
        android.view.View r0;
        android.graphics.Matrix r1;
        android.view.RenderNode $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Matrix;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r2 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r2.<android.view.RenderNode: boolean setAnimationMatrix(android.graphics.Matrix)>(r1);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        return;
    }

    public android.animation.StateListAnimator getStateListAnimator()
    {
        android.view.View r0;
        android.animation.StateListAnimator $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.animation.StateListAnimator mStateListAnimator>;

        return $r1;
    }

    public void setStateListAnimator(android.animation.StateListAnimator)
    {
        android.view.View r0;
        android.animation.StateListAnimator r1, $r2, $r3, $r5;
        boolean $z0;
        int[] $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.animation.StateListAnimator;

        $r2 = r0.<android.view.View: android.animation.StateListAnimator mStateListAnimator>;

        if $r2 != r1 goto label1;

        return;

     label1:
        $r3 = r0.<android.view.View: android.animation.StateListAnimator mStateListAnimator>;

        if $r3 == null goto label2;

        $r5 = r0.<android.view.View: android.animation.StateListAnimator mStateListAnimator>;

        virtualinvoke $r5.<android.animation.StateListAnimator: void setTarget(android.view.View)>(null);

     label2:
        r0.<android.view.View: android.animation.StateListAnimator mStateListAnimator> = r1;

        if r1 == null goto label3;

        virtualinvoke r1.<android.animation.StateListAnimator: void setTarget(android.view.View)>(r0);

        $z0 = virtualinvoke r0.<android.view.View: boolean isAttachedToWindow()>();

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke r1.<android.animation.StateListAnimator: void setState(int[])>($r4);

     label3:
        return;
    }

    public final boolean getClipToOutline()
    {
        android.view.View r0;
        android.view.RenderNode $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.view.RenderNode: boolean getClipToOutline()>();

        return $z0;
    }

    public void setClipToOutline(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        android.view.RenderNode $r1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.view.View: void damageInParent()>();

        $z1 = virtualinvoke r0.<android.view.View: boolean getClipToOutline()>();

        if $z1 == z0 goto label1;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setClipToOutline(boolean)>(z0);

     label1:
        return;
    }

    private void setOutlineProviderFromAttribute(int)
    {
        android.view.View r0;
        int i0;
        android.view.ViewOutlineProvider $r1, $r2, $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        $r1 = <android.view.ViewOutlineProvider: android.view.ViewOutlineProvider BACKGROUND>;

        virtualinvoke r0.<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>($r1);

        goto label5;

     label2:
        virtualinvoke r0.<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>(null);

        goto label5;

     label3:
        $r3 = <android.view.ViewOutlineProvider: android.view.ViewOutlineProvider BOUNDS>;

        virtualinvoke r0.<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>($r3);

        goto label5;

     label4:
        $r2 = <android.view.ViewOutlineProvider: android.view.ViewOutlineProvider PADDED_BOUNDS>;

        virtualinvoke r0.<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>($r2);

     label5:
        return;
    }

    public void setOutlineProvider(android.view.ViewOutlineProvider)
    {
        android.view.View r0;
        android.view.ViewOutlineProvider r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewOutlineProvider;

        r0.<android.view.View: android.view.ViewOutlineProvider mOutlineProvider> = r1;

        virtualinvoke r0.<android.view.View: void invalidateOutline()>();

        return;
    }

    public android.view.ViewOutlineProvider getOutlineProvider()
    {
        android.view.View r0;
        android.view.ViewOutlineProvider $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewOutlineProvider mOutlineProvider>;

        return $r1;
    }

    public void invalidateOutline()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 | 256;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        return;
    }

    private void rebuildOutline()
    {
        android.view.View r0;
        android.graphics.Outline r1;
        android.view.View$AttachInfo $r2, $r4;
        android.view.ViewOutlineProvider $r3, $r5;
        android.view.RenderNode $r6, $r7;

        r0 := @this: android.view.View;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<android.view.View: android.view.ViewOutlineProvider mOutlineProvider>;

        if $r3 != null goto label2;

        $r7 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r7.<android.view.RenderNode: boolean setOutline(android.graphics.Outline)>(null);

        goto label3;

     label2:
        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r1 = $r4.<android.view.View$AttachInfo: android.graphics.Outline mTmpOutline>;

        virtualinvoke r1.<android.graphics.Outline: void setEmpty()>();

        virtualinvoke r1.<android.graphics.Outline: void setAlpha(float)>(1.0F);

        $r5 = r0.<android.view.View: android.view.ViewOutlineProvider mOutlineProvider>;

        virtualinvoke $r5.<android.view.ViewOutlineProvider: void getOutline(android.view.View,android.graphics.Outline)>(r0, r1);

        $r6 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r6.<android.view.RenderNode: boolean setOutline(android.graphics.Outline)>(r1);

     label3:
        return;
    }

    public boolean hasShadow()
    {
        android.view.View r0;
        android.view.RenderNode $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.view.RenderNode: boolean hasShadow()>();

        return $z0;
    }

    public void setRevealClip(boolean, float, float, float)
    {
        android.view.View r0;
        boolean z0;
        float f0, f1, f2;
        android.view.RenderNode $r1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setRevealClip(boolean,float,float,float)>(z0, f0, f1, f2);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        return;
    }

    public void getHitRect(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        android.graphics.RectF r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        android.view.View$AttachInfo $r3, $r4;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.graphics.Matrix $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 != null goto label2;

     label1:
        $i3 = r0.<android.view.View: int mLeft>;

        $i2 = r0.<android.view.View: int mTop>;

        $i1 = r0.<android.view.View: int mRight>;

        $i0 = r0.<android.view.View: int mBottom>;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i3, $i2, $i1, $i0);

        goto label3;

     label2:
        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r4.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect>;

        $i4 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $f0 = (float) $i4;

        $i5 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $f1 = (float) $i5;

        virtualinvoke r2.<android.graphics.RectF: void set(float,float,float,float)>(0.0F, 0.0F, $f0, $f1);

        $r5 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r5.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r2);

        $f2 = r2.<android.graphics.RectF: float left>;

        $i7 = (int) $f2;

        $i6 = r0.<android.view.View: int mLeft>;

        $i17 = $i7 + $i6;

        $f3 = r2.<android.graphics.RectF: float top>;

        $i8 = (int) $f3;

        $i9 = r0.<android.view.View: int mTop>;

        $i16 = $i8 + $i9;

        $f4 = r2.<android.graphics.RectF: float right>;

        $i11 = (int) $f4;

        $i10 = r0.<android.view.View: int mLeft>;

        $i14 = $i11 + $i10;

        $f5 = r2.<android.graphics.RectF: float bottom>;

        $i12 = (int) $f5;

        $i13 = r0.<android.view.View: int mTop>;

        $i15 = $i12 + $i13;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i17, $i16, $i14, $i15);

     label3:
        return;
    }

    final boolean pointInView(float, float)
    {
        android.view.View r0;
        float f0, f1, $f2, $f3;
        byte $b0, $b4, $b5, $b9;
        int $i1, $i2, $i3, $i6, $i7, $i8;
        boolean $z0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 < 0 goto label1;

        $i2 = r0.<android.view.View: int mRight>;

        $i1 = r0.<android.view.View: int mLeft>;

        $i3 = $i2 - $i1;

        $f2 = (float) $i3;

        $b4 = f0 cmpg $f2;

        if $b4 >= 0 goto label1;

        $b5 = f1 cmpl 0.0F;

        if $b5 < 0 goto label1;

        $i7 = r0.<android.view.View: int mBottom>;

        $i6 = r0.<android.view.View: int mTop>;

        $i8 = $i7 - $i6;

        $f3 = (float) $i8;

        $b9 = f1 cmpg $f3;

        if $b9 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean pointInView(float, float, float)
    {
        android.view.View r0;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8;
        byte $b0, $b1, $b5, $b9;
        int $i2, $i3, $i4, $i6, $i7, $i8;
        boolean $z0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = neg f2;

        $b0 = f0 cmpl $f3;

        if $b0 < 0 goto label1;

        $f4 = neg f2;

        $b1 = f1 cmpl $f4;

        if $b1 < 0 goto label1;

        $i3 = r0.<android.view.View: int mRight>;

        $i2 = r0.<android.view.View: int mLeft>;

        $i4 = $i3 - $i2;

        $f5 = (float) $i4;

        $f6 = $f5 + f2;

        $b5 = f0 cmpg $f6;

        if $b5 >= 0 goto label1;

        $i7 = r0.<android.view.View: int mBottom>;

        $i6 = r0.<android.view.View: int mTop>;

        $i8 = $i7 - $i6;

        $f7 = (float) $i8;

        $f8 = $f7 + f2;

        $b9 = f1 cmpg $f8;

        if $b9 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void getFocusedRect(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        virtualinvoke r0.<android.view.View: void getDrawingRect(android.graphics.Rect)>(r1);

        return;
    }

    public boolean getGlobalVisibleRect(android.graphics.Rect, android.graphics.Point)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        android.graphics.Point r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.ViewParent $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Point;

        $i3 = r0.<android.view.View: int mRight>;

        $i2 = r0.<android.view.View: int mLeft>;

        i0 = $i3 - $i2;

        $i5 = r0.<android.view.View: int mBottom>;

        $i4 = r0.<android.view.View: int mTop>;

        i1 = $i5 - $i4;

        if i0 <= 0 goto label5;

        if i1 <= 0 goto label5;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, i0, i1);

        if r2 == null goto label1;

        $i6 = r0.<android.view.View: int mScrollX>;

        $i9 = neg $i6;

        $i7 = r0.<android.view.View: int mScrollY>;

        $i8 = neg $i7;

        virtualinvoke r2.<android.graphics.Point: void set(int,int)>($i9, $i8);

     label1:
        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r3 == null goto label2;

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = interfaceinvoke $r4.<android.view.ViewParent: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>(r0, r1, r2);

        if $z0 == 0 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;

     label5:
        return 0;
    }

    public final boolean getGlobalVisibleRect(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $z0 = virtualinvoke r0.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>(r1, null);

        return $z0;
    }

    public final boolean getLocalVisibleRect(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        android.graphics.Point r2, $r4;
        android.view.View$AttachInfo $r3, $r5;
        boolean $z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label1;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r5.<android.view.View$AttachInfo: android.graphics.Point mPoint>;

        goto label2;

     label1:
        $r4 = new android.graphics.Point;

        specialinvoke $r4.<android.graphics.Point: void <init>()>();

     label2:
        r2 = $r4;

        $z0 = virtualinvoke r0.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>(r1, r2);

        if $z0 == 0 goto label3;

        $i0 = r2.<android.graphics.Point: int x>;

        $i3 = neg $i0;

        $i1 = r2.<android.graphics.Point: int y>;

        $i2 = neg $i1;

        virtualinvoke r1.<android.graphics.Rect: void offset(int,int)>($i3, $i2);

        return 1;

     label3:
        return 0;
    }

    public void offsetTopAndBottom(int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean z0, $z2, $z3;
        android.view.ViewParent r1;
        android.graphics.Rect r2;
        android.view.RenderNode $r3;
        android.view.View$AttachInfo $r4, $r5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 == 0 goto label10;

        z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if z0 == 0 goto label05;

        $z3 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z3 == 0 goto label01;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        goto label06;

     label01:
        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r1 == null goto label04;

        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label04;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r5.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        if i0 >= 0 goto label02;

        $i13 = r0.<android.view.View: int mTop>;

        i1 = $i13 + i0;

        i2 = r0.<android.view.View: int mBottom>;

        i3 = i0;

        goto label03;

     label02:
        i1 = r0.<android.view.View: int mTop>;

        $i8 = r0.<android.view.View: int mBottom>;

        i2 = $i8 + i0;

        i3 = 0;

     label03:
        $i9 = r0.<android.view.View: int mRight>;

        $i10 = r0.<android.view.View: int mLeft>;

        $i11 = $i9 - $i10;

        $i12 = i2 - i1;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>(0, i3, $i11, $i12);

        interfaceinvoke r1.<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>(r0, r2);

     label04:
        goto label06;

     label05:
        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

     label06:
        $i4 = r0.<android.view.View: int mTop>;

        $i5 = $i4 + i0;

        r0.<android.view.View: int mTop> = $i5;

        $i6 = r0.<android.view.View: int mBottom>;

        $i7 = $i6 + i0;

        r0.<android.view.View: int mBottom> = $i7;

        $r3 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r3.<android.view.RenderNode: boolean offsetTopAndBottom(int)>(i0);

        $z2 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z2 == 0 goto label07;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        goto label09;

     label07:
        if z0 != 0 goto label08;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

     label08:
        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

     label09:
        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label10:
        return;
    }

    public void offsetLeftAndRight(int)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        boolean z0, $z2, $z3;
        android.view.ViewParent r1;
        android.graphics.Rect r2;
        android.view.RenderNode $r3;
        android.view.View$AttachInfo $r4, $r5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 == 0 goto label10;

        z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if z0 == 0 goto label05;

        $z3 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z3 == 0 goto label01;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        goto label06;

     label01:
        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r1 == null goto label04;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r5 == null goto label04;

        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r4.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        if i0 >= 0 goto label02;

        $i11 = r0.<android.view.View: int mLeft>;

        i1 = $i11 + i0;

        i2 = r0.<android.view.View: int mRight>;

        goto label03;

     label02:
        i1 = r0.<android.view.View: int mLeft>;

        $i8 = r0.<android.view.View: int mRight>;

        i2 = $i8 + i0;

     label03:
        $i12 = i2 - i1;

        $i10 = r0.<android.view.View: int mBottom>;

        $i7 = r0.<android.view.View: int mTop>;

        $i9 = $i10 - $i7;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i12, $i9);

        interfaceinvoke r1.<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>(r0, r2);

     label04:
        goto label06;

     label05:
        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

     label06:
        $i3 = r0.<android.view.View: int mLeft>;

        $i4 = $i3 + i0;

        r0.<android.view.View: int mLeft> = $i4;

        $i5 = r0.<android.view.View: int mRight>;

        $i6 = $i5 + i0;

        r0.<android.view.View: int mRight> = $i6;

        $r3 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r3.<android.view.RenderNode: boolean offsetLeftAndRight(int)>(i0);

        $z2 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z2 == 0 goto label07;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        goto label09;

     label07:
        if z0 != 0 goto label08;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

     label08:
        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

     label09:
        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label10:
        return;
    }

    public android.view.ViewGroup$LayoutParams getLayoutParams()
    {
        android.view.View r0;
        android.view.ViewGroup$LayoutParams $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams>;

        return $r1;
    }

    public void setLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.view.View r0;
        android.view.ViewGroup$LayoutParams r1;
        android.view.ViewParent $r2, $r3;
        boolean $z0;
        android.view.ViewGroup $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Layout parameters cannot be null");

        throw $r5;

     label1:
        r0.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams> = r1;

        virtualinvoke r0.<android.view.View: void resolveLayoutParams()>();

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = $r2 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r4 = (android.view.ViewGroup) $r3;

        virtualinvoke $r4.<android.view.ViewGroup: void onSetLayoutParams(android.view.View,android.view.ViewGroup$LayoutParams)>(r0, r1);

     label2:
        virtualinvoke r0.<android.view.View: void requestLayout()>();

        return;
    }

    public void resolveLayoutParams()
    {
        android.view.View r0;
        android.view.ViewGroup$LayoutParams $r1, $r2;
        int $i0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams>;

        $i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        virtualinvoke $r2.<android.view.ViewGroup$LayoutParams: void resolveLayoutDirection(int)>($i0);

     label1:
        return;
    }

    public void scrollTo(int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = r0.<android.view.View: int mScrollX>;

        if $i4 != i0 goto label1;

        $i7 = r0.<android.view.View: int mScrollY>;

        if $i7 == i1 goto label2;

     label1:
        i2 = r0.<android.view.View: int mScrollX>;

        i3 = r0.<android.view.View: int mScrollY>;

        r0.<android.view.View: int mScrollX> = i0;

        r0.<android.view.View: int mScrollY> = i1;

        virtualinvoke r0.<android.view.View: void invalidateParentCaches()>();

        $i6 = r0.<android.view.View: int mScrollX>;

        $i5 = r0.<android.view.View: int mScrollY>;

        virtualinvoke r0.<android.view.View: void onScrollChanged(int,int,int,int)>($i6, $i5, i2, i3);

        $z0 = virtualinvoke r0.<android.view.View: boolean awakenScrollBars()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<android.view.View: void postInvalidateOnAnimation()>();

     label2:
        return;
    }

    public void scrollBy(int, int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = r0.<android.view.View: int mScrollX>;

        $i5 = $i2 + i0;

        $i3 = r0.<android.view.View: int mScrollY>;

        $i4 = $i3 + i1;

        virtualinvoke r0.<android.view.View: void scrollTo(int,int)>($i5, $i4);

        return;
    }

    protected boolean awakenScrollBars()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache $r1, $r2;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i0 = $r2.<android.view.View$ScrollabilityCache: int scrollBarDefaultDelayBeforeFade>;

        $z0 = virtualinvoke r0.<android.view.View: boolean awakenScrollBars(int,boolean)>($i0, 1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean initialAwakenScrollBars()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache $r1, $r2;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i0 = $r2.<android.view.View$ScrollabilityCache: int scrollBarDefaultDelayBeforeFade>;

        $i1 = $i0 * 4;

        $z0 = virtualinvoke r0.<android.view.View: boolean awakenScrollBars(int,boolean)>($i1, 1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected boolean awakenScrollBars(int)
    {
        android.view.View r0;
        int i0;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean awakenScrollBars(int,boolean)>(i0, 1);

        return $z0;
    }

    protected boolean awakenScrollBars(int, boolean)
    {
        android.view.View r0;
        int i0, $i2;
        boolean z0, $z1, $z2, $z4;
        android.view.View$ScrollabilityCache r1;
        android.widget.ScrollBarDrawable $r2, $r8;
        long $l3, $l4, l5;
        android.view.View$AttachInfo $r3, $r4, $r6;
        android.os.Handler $r5, $r7;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 == null goto label1;

        $z1 = r1.<android.view.View$ScrollabilityCache: boolean fadeScrollBars>;

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r2 = r1.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        if $r2 != null goto label3;

        $r8 = new android.widget.ScrollBarDrawable;

        specialinvoke $r8.<android.widget.ScrollBarDrawable: void <init>()>();

        r1.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar> = $r8;

     label3:
        $z2 = virtualinvoke r0.<android.view.View: boolean isHorizontalScrollBarEnabled()>();

        if $z2 != 0 goto label4;

        $z4 = virtualinvoke r0.<android.view.View: boolean isVerticalScrollBarEnabled()>();

        if $z4 == 0 goto label8;

     label4:
        if z0 == 0 goto label5;

        virtualinvoke r0.<android.view.View: void postInvalidateOnAnimation()>();

     label5:
        $i2 = r1.<android.view.View$ScrollabilityCache: int state>;

        if $i2 != 0 goto label6;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>(750, i0);

     label6:
        $l3 = staticinvoke <android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>();

        $l4 = (long) i0;

        l5 = $l3 + $l4;

        r1.<android.view.View$ScrollabilityCache: long fadeStartTime> = l5;

        r1.<android.view.View$ScrollabilityCache: int state> = 1;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label7;

        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>(r1);

        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r7.<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>(r1, l5);

     label7:
        return 1;

     label8:
        return 0;
    }

    private boolean skipInvalidate()
    {
        android.view.View r0;
        int $i0, $i1;
        android.view.animation.Animation $r1;
        android.view.ViewParent $r2, $r3;
        boolean $z0, $z1, $z2;
        android.view.ViewGroup $r4;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 12;

        if $i1 == 0 goto label2;

        $r1 = r0.<android.view.View: android.view.animation.Animation mCurrentAnimation>;

        if $r1 != null goto label2;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = $r2 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r4 = (android.view.ViewGroup) $r3;

        $z2 = virtualinvoke $r4.<android.view.ViewGroup: boolean isViewTransitioning(android.view.View)>(r0);

        if $z2 != 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public void invalidate(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        i0 = r0.<android.view.View: int mScrollX>;

        i1 = r0.<android.view.View: int mScrollY>;

        $i2 = r1.<android.graphics.Rect: int left>;

        $i9 = $i2 - i0;

        $i3 = r1.<android.graphics.Rect: int top>;

        $i8 = $i3 - i1;

        $i4 = r1.<android.graphics.Rect: int right>;

        $i7 = $i4 - i0;

        $i5 = r1.<android.graphics.Rect: int bottom>;

        $i6 = $i5 - i1;

        virtualinvoke r0.<android.view.View: void invalidateInternal(int,int,int,int,boolean,boolean)>($i9, $i8, $i7, $i6, 1, 0);

        return;
    }

    public void invalidate(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 = r0.<android.view.View: int mScrollX>;

        i5 = r0.<android.view.View: int mScrollY>;

        $i9 = i0 - i4;

        $i8 = i1 - i5;

        $i7 = i2 - i4;

        $i6 = i3 - i5;

        virtualinvoke r0.<android.view.View: void invalidateInternal(int,int,int,int,boolean,boolean)>($i9, $i8, $i7, $i6, 1, 0);

        return;
    }

    public void invalidate()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        return;
    }

    void invalidate(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $i1 = r0.<android.view.View: int mRight>;

        $i0 = r0.<android.view.View: int mLeft>;

        $i5 = $i1 - $i0;

        $i3 = r0.<android.view.View: int mBottom>;

        $i2 = r0.<android.view.View: int mTop>;

        $i4 = $i3 - $i2;

        virtualinvoke r0.<android.view.View: void invalidateInternal(int,int,int,int,boolean,boolean)>(0, 0, $i5, $i4, z0, 1);

        return;
    }

    void invalidateInternal(int, int, int, int, boolean, boolean)
    {
        android.view.View r0, r8;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        android.view.View$AttachInfo r1;
        android.view.ViewParent r2;
        android.graphics.Rect r3;
        android.view.GhostView $r4, $r7;
        android.graphics.drawable.Drawable $r5, $r6;
        byte $b8;
        float $f0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $r4 = r0.<android.view.View: android.view.GhostView mGhostView>;

        if $r4 == null goto label1;

        $r7 = r0.<android.view.View: android.view.GhostView mGhostView>;

        virtualinvoke $r7.<android.view.GhostView: void invalidate(boolean)>(z0);

        return;

     label1:
        $z2 = specialinvoke r0.<android.view.View: boolean skipInvalidate()>();

        if $z2 == 0 goto label2;

        return;

     label2:
        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 48;

        if $i5 == 48 goto label4;

        if z0 == 0 goto label3;

        $i17 = r0.<android.view.View: int mPrivateFlags>;

        $i18 = $i17 & 32768;

        if $i18 == 32768 goto label4;

     label3:
        $i16 = r0.<android.view.View: int mPrivateFlags>;

        $i15 = $i16 & -2147483648;

        if $i15 != -2147483648 goto label4;

        if z1 == 0 goto label9;

        $z6 = virtualinvoke r0.<android.view.View: boolean isOpaque()>();

        $z7 = r0.<android.view.View: boolean mLastIsOpaque>;

        if $z6 == $z7 goto label9;

     label4:
        if z1 == 0 goto label5;

        $z5 = virtualinvoke r0.<android.view.View: boolean isOpaque()>();

        r0.<android.view.View: boolean mLastIsOpaque> = $z5;

        $i14 = r0.<android.view.View: int mPrivateFlags>;

        $i13 = $i14 & -33;

        r0.<android.view.View: int mPrivateFlags> = $i13;

     label5:
        $i6 = r0.<android.view.View: int mPrivateFlags>;

        $i7 = $i6 | 2097152;

        r0.<android.view.View: int mPrivateFlags> = $i7;

        if z0 == 0 goto label6;

        $i9 = r0.<android.view.View: int mPrivateFlags>;

        $i11 = $i9 | -2147483648;

        r0.<android.view.View: int mPrivateFlags> = $i11;

        $i10 = r0.<android.view.View: int mPrivateFlags>;

        $i12 = $i10 & -32769;

        r0.<android.view.View: int mPrivateFlags> = $i12;

     label6:
        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r2 == null goto label7;

        if r1 == null goto label7;

        if i0 >= i2 goto label7;

        if i1 >= i3 goto label7;

        r3 = r1.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        virtualinvoke r3.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3);

        interfaceinvoke r2.<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>(r0, r3);

     label7:
        $r5 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r5 == null goto label8;

        $r6 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $z4 = virtualinvoke $r6.<android.graphics.drawable.Drawable: boolean isProjected()>();

        if $z4 == 0 goto label8;

        r8 = specialinvoke r0.<android.view.View: android.view.View getProjectionReceiver()>();

        if r8 == null goto label8;

        virtualinvoke r8.<android.view.View: void damageInParent()>();

     label8:
        $z3 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z3 == 0 goto label9;

        $f0 = virtualinvoke r0.<android.view.View: float getZ()>();

        $b8 = $f0 cmpl 0.0F;

        if $b8 == 0 goto label9;

        specialinvoke r0.<android.view.View: void damageShadowReceiver()>();

     label9:
        return;
    }

    private android.view.View getProjectionReceiver()
    {
        android.view.View r0, r2;
        android.view.ViewParent r1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

     label1:
        if r1 == null goto label3;

        $z0 = r1 instanceof android.view.View;

        if $z0 == 0 goto label3;

        r2 = (android.view.View) r1;

        $z1 = specialinvoke r2.<android.view.View: boolean isProjectionReceiver()>();

        if $z1 == 0 goto label2;

        return r2;

     label2:
        r1 = interfaceinvoke r1.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label1;

     label3:
        return null;
    }

    private boolean isProjectionReceiver()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void damageShadowReceiver()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.ViewParent r2;
        android.view.ViewGroup r3;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        if r2 == null goto label1;

        $z0 = r2 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        r3 = (android.view.ViewGroup) r2;

        virtualinvoke r3.<android.view.ViewGroup: void damageInParent()>();

     label1:
        return;
    }

    void invalidateViewProperty(boolean, boolean)
    {
        android.view.View r0;
        boolean z0, z1, $z2, $z3, $z4;
        float $f0;
        byte $b0;
        int $i1, $i2, $i3, $i4;
        android.view.RenderNode $r1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $z2 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z2 == 0 goto label1;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $z4 = virtualinvoke $r1.<android.view.RenderNode: boolean isValid()>();

        if $z4 == 0 goto label1;

        $i3 = r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 & 64;

        if $i4 == 0 goto label4;

     label1:
        if z0 == 0 goto label2;

        virtualinvoke r0.<android.view.View: void invalidateParentCaches()>();

     label2:
        if z1 == 0 goto label3;

        $i1 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i2;

     label3:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(0);

        goto label5;

     label4:
        virtualinvoke r0.<android.view.View: void damageInParent()>();

     label5:
        $z3 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z3 == 0 goto label6;

        if z0 == 0 goto label6;

        $f0 = virtualinvoke r0.<android.view.View: float getZ()>();

        $b0 = $f0 cmpl 0.0F;

        if $b0 == 0 goto label6;

        specialinvoke r0.<android.view.View: void damageShadowReceiver()>();

     label6:
        return;
    }

    protected void damageInParent()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.ViewParent r2, $r4, $r5, $r6;
        android.graphics.Rect r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        android.view.ViewGroup $r7;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r2 == null goto label2;

        if r1 == null goto label2;

        r3 = r1.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        $i1 = r0.<android.view.View: int mRight>;

        $i0 = r0.<android.view.View: int mLeft>;

        $i5 = $i1 - $i0;

        $i3 = r0.<android.view.View: int mBottom>;

        $i2 = r0.<android.view.View: int mTop>;

        $i4 = $i3 - $i2;

        virtualinvoke r3.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i5, $i4);

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = $r4 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r6 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r7 = (android.view.ViewGroup) $r6;

        virtualinvoke $r7.<android.view.ViewGroup: void damageChild(android.view.View,android.graphics.Rect)>(r0, r3);

        goto label2;

     label1:
        $r5 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r5.<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>(r0, r3);

     label2:
        return;
    }

    void transformRect(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        android.graphics.RectF r2;
        android.graphics.Matrix $r3, $r5;
        boolean $z0;
        android.view.View$AttachInfo $r4;
        float $f0, $f1, $f2, $f3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $r3 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getMatrix()>();

        $z0 = virtualinvoke $r3.<android.graphics.Matrix: boolean isIdentity()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r4.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect>;

        virtualinvoke r2.<android.graphics.RectF: void set(android.graphics.Rect)>(r1);

        $r5 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r5.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r2);

        $f0 = r2.<android.graphics.RectF: float left>;

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i0 = (int) $d1;

        $f1 = r2.<android.graphics.RectF: float top>;

        $d2 = (double) $f1;

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        $i1 = (int) $d3;

        $f2 = r2.<android.graphics.RectF: float right>;

        $d4 = (double) $f2;

        $d5 = staticinvoke <java.lang.Math: double ceil(double)>($d4);

        $i2 = (int) $d5;

        $f3 = r2.<android.graphics.RectF: float bottom>;

        $d6 = (double) $f3;

        $d7 = staticinvoke <java.lang.Math: double ceil(double)>($d6);

        $i3 = (int) $d7;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i0, $i1, $i2, $i3);

     label1:
        return;
    }

    protected void invalidateParentCaches()
    {
        android.view.View r0, $r3;
        android.view.ViewParent $r1, $r2;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = $r1 instanceof android.view.View;

        if $z0 == 0 goto label1;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r3 = (android.view.View) $r2;

        $i0 = $r3.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | -2147483648;

        $r3.<android.view.View: int mPrivateFlags> = $i1;

     label1:
        return;
    }

    protected void invalidateParentIfNeeded()
    {
        android.view.View r0, $r3;
        boolean $z0, $z1;
        android.view.ViewParent $r1, $r2;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z1 = $r1 instanceof android.view.View;

        if $z1 == 0 goto label1;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r3 = (android.view.View) $r2;

        virtualinvoke $r3.<android.view.View: void invalidate(boolean)>(1);

     label1:
        return;
    }

    protected void invalidateParentIfNeededAndWasQuickRejected()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 268435456;

        if $i1 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

     label1:
        return;
    }

    public boolean isOpaque()
    {
        android.view.View r0;
        int $i0, $i1;
        float $f0;
        byte $b2;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 25165824;

        if $i1 != 25165824 goto label1;

        $f0 = specialinvoke r0.<android.view.View: float getFinalAlpha()>();

        $b2 = $f0 cmpl 1.0F;

        if $b2 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void computeOpaqueFlags()
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $i11 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i11 != -1 goto label1;

        $i12 = r0.<android.view.View: int mPrivateFlags>;

        $i13 = $i12 | 8388608;

        r0.<android.view.View: int mPrivateFlags> = $i13;

        goto label2;

     label1:
        $i1 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & -8388609;

        r0.<android.view.View: int mPrivateFlags> = $i2;

     label2:
        i0 = r0.<android.view.View: int mViewFlags>;

        $i3 = i0 & 512;

        if $i3 != 0 goto label3;

        $i10 = i0 & 256;

        if $i10 == 0 goto label4;

     label3:
        $i4 = i0 & 50331648;

        if $i4 == 0 goto label4;

        $i7 = i0 & 50331648;

        if $i7 != 33554432 goto label5;

     label4:
        $i5 = r0.<android.view.View: int mPrivateFlags>;

        $i6 = $i5 | 16777216;

        r0.<android.view.View: int mPrivateFlags> = $i6;

        goto label6;

     label5:
        $i8 = r0.<android.view.View: int mPrivateFlags>;

        $i9 = $i8 & -16777217;

        r0.<android.view.View: int mPrivateFlags> = $i9;

     label6:
        return;
    }

    protected boolean hasOpaqueScrollbars()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 16777216;

        if $i1 != 16777216 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public android.os.Handler getHandler()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.os.Handler $r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        return $r2;

     label1:
        return null;
    }

    public android.view.ViewRootImpl getViewRootImpl()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        android.view.ViewRootImpl $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        return $r3;

     label1:
        return null;
    }

    public android.view.HardwareRenderer getHardwareRenderer()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        android.view.HardwareRenderer $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public boolean post(java.lang.Runnable)
    {
        android.view.View r0;
        java.lang.Runnable r1;
        android.view.View$AttachInfo r2;
        android.view.ViewRootImpl$RunQueue $r3;
        android.os.Handler $r4;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Runnable;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $r4 = r2.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>(r1);

        return $z0;

     label1:
        $r3 = staticinvoke <android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()>();

        virtualinvoke $r3.<android.view.ViewRootImpl$RunQueue: void post(java.lang.Runnable)>(r1);

        return 1;
    }

    public boolean postDelayed(java.lang.Runnable, long)
    {
        android.view.View r0;
        java.lang.Runnable r1;
        long l0;
        android.view.View$AttachInfo r2;
        android.view.ViewRootImpl$RunQueue $r3;
        android.os.Handler $r4;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $r4 = r2.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r4.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>(r1, l0);

        return $z0;

     label1:
        $r3 = staticinvoke <android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()>();

        virtualinvoke $r3.<android.view.ViewRootImpl$RunQueue: void postDelayed(java.lang.Runnable,long)>(r1, l0);

        return 1;
    }

    public void postOnAnimation(java.lang.Runnable)
    {
        android.view.View r0;
        java.lang.Runnable r1;
        android.view.View$AttachInfo r2;
        android.view.ViewRootImpl$RunQueue $r3;
        android.view.ViewRootImpl $r4;
        android.view.Choreographer $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Runnable;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $r4 = r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r5 = $r4.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        virtualinvoke $r5.<android.view.Choreographer: void postCallback(int,java.lang.Runnable,java.lang.Object)>(1, r1, null);

        goto label2;

     label1:
        $r3 = staticinvoke <android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()>();

        virtualinvoke $r3.<android.view.ViewRootImpl$RunQueue: void post(java.lang.Runnable)>(r1);

     label2:
        return;
    }

    public void postOnAnimationDelayed(java.lang.Runnable, long)
    {
        android.view.View r0;
        java.lang.Runnable r1;
        long l0;
        android.view.View$AttachInfo r2;
        android.view.ViewRootImpl$RunQueue $r3;
        android.view.ViewRootImpl $r4;
        android.view.Choreographer $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $r4 = r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r5 = $r4.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        virtualinvoke $r5.<android.view.Choreographer: void postCallbackDelayed(int,java.lang.Runnable,java.lang.Object,long)>(1, r1, null, l0);

        goto label2;

     label1:
        $r3 = staticinvoke <android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()>();

        virtualinvoke $r3.<android.view.ViewRootImpl$RunQueue: void postDelayed(java.lang.Runnable,long)>(r1, l0);

     label2:
        return;
    }

    public boolean removeCallbacks(java.lang.Runnable)
    {
        android.view.View r0;
        java.lang.Runnable r1;
        android.view.View$AttachInfo r2;
        android.view.ViewRootImpl$RunQueue $r3;
        android.os.Handler $r4;
        android.view.ViewRootImpl $r5;
        android.view.Choreographer $r6;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Runnable;

        if r1 == null goto label2;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $r4 = r2.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>(r1);

        $r5 = r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r6 = $r5.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        virtualinvoke $r6.<android.view.Choreographer: void removeCallbacks(int,java.lang.Runnable,java.lang.Object)>(1, r1, null);

     label1:
        $r3 = staticinvoke <android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()>();

        virtualinvoke $r3.<android.view.ViewRootImpl$RunQueue: void removeCallbacks(java.lang.Runnable)>(r1);

     label2:
        return 1;
    }

    public void postInvalidate()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void postInvalidateDelayed(long)>(0L);

        return;
    }

    public void postInvalidate(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>(0L, i0, i1, i2, i3);

        return;
    }

    public void postInvalidateDelayed(long)
    {
        android.view.View r0;
        long l0;
        android.view.View$AttachInfo r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: android.view.View;

        l0 := @parameter0: long;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r2.<android.view.ViewRootImpl: void dispatchInvalidateDelayed(android.view.View,long)>(r0, l0);

     label1:
        return;
    }

    public void postInvalidateDelayed(long, int, int, int, int)
    {
        android.view.View r0;
        long l0;
        int i1, i2, i3, i4;
        android.view.View$AttachInfo r1;
        android.view.View$AttachInfo$InvalidateInfo r2;
        android.view.ViewRootImpl $r3;

        r0 := @this: android.view.View;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        r2 = staticinvoke <android.view.View$AttachInfo$InvalidateInfo: android.view.View$AttachInfo$InvalidateInfo obtain()>();

        r2.<android.view.View$AttachInfo$InvalidateInfo: android.view.View target> = r0;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int left> = i1;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int top> = i2;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int right> = i3;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int bottom> = i4;

        $r3 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r3.<android.view.ViewRootImpl: void dispatchInvalidateRectDelayed(android.view.View$AttachInfo$InvalidateInfo,long)>(r2, l0);

     label1:
        return;
    }

    public void postInvalidateOnAnimation()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r2.<android.view.ViewRootImpl: void dispatchInvalidateOnAnimation(android.view.View)>(r0);

     label1:
        return;
    }

    public void postInvalidateOnAnimation(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3;
        android.view.View$AttachInfo r1;
        android.view.View$AttachInfo$InvalidateInfo r2;
        android.view.ViewRootImpl $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        r2 = staticinvoke <android.view.View$AttachInfo$InvalidateInfo: android.view.View$AttachInfo$InvalidateInfo obtain()>();

        r2.<android.view.View$AttachInfo$InvalidateInfo: android.view.View target> = r0;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int left> = i0;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int top> = i1;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int right> = i2;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int bottom> = i3;

        $r3 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r3.<android.view.ViewRootImpl: void dispatchInvalidateRectOnAnimation(android.view.View$AttachInfo$InvalidateInfo)>(r2);

     label1:
        return;
    }

    private void postSendViewScrolledAccessibilityEventCallback()
    {
        android.view.View r0;
        android.view.View$SendViewScrolledAccessibilityEvent $r1, $r2, $r3, $r4, $r5;
        boolean $z0;
        long $l0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$SendViewScrolledAccessibilityEvent mSendViewScrolledAccessibilityEvent>;

        if $r1 != null goto label1;

        $r5 = new android.view.View$SendViewScrolledAccessibilityEvent;

        specialinvoke $r5.<android.view.View$SendViewScrolledAccessibilityEvent: void <init>(android.view.View,android.view.View$1)>(r0, null);

        r0.<android.view.View: android.view.View$SendViewScrolledAccessibilityEvent mSendViewScrolledAccessibilityEvent> = $r5;

     label1:
        $r2 = r0.<android.view.View: android.view.View$SendViewScrolledAccessibilityEvent mSendViewScrolledAccessibilityEvent>;

        $z0 = $r2.<android.view.View$SendViewScrolledAccessibilityEvent: boolean mIsPending>;

        if $z0 != 0 goto label2;

        $r3 = r0.<android.view.View: android.view.View$SendViewScrolledAccessibilityEvent mSendViewScrolledAccessibilityEvent>;

        $r3.<android.view.View$SendViewScrolledAccessibilityEvent: boolean mIsPending> = 1;

        $r4 = r0.<android.view.View: android.view.View$SendViewScrolledAccessibilityEvent mSendViewScrolledAccessibilityEvent>;

        $l0 = staticinvoke <android.view.ViewConfiguration: long getSendRecurringAccessibilityEventsInterval()>();

        virtualinvoke r0.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r4, $l0);

     label2:
        return;
    }

    public void computeScroll()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return;
    }

    public boolean isHorizontalFadingEdgeEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 4096;

        if $i1 != 4096 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setHorizontalFadingEdgeEnabled(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean isHorizontalFadingEdgeEnabled()>();

        if $z1 == z0 goto label2;

        if z0 == 0 goto label1;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

     label1:
        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 ^ 4096;

        r0.<android.view.View: int mViewFlags> = $i1;

     label2:
        return;
    }

    public boolean isVerticalFadingEdgeEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 8192;

        if $i1 != 8192 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setVerticalFadingEdgeEnabled(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean isVerticalFadingEdgeEnabled()>();

        if $z1 == z0 goto label2;

        if z0 == 0 goto label1;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

     label1:
        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 ^ 8192;

        r0.<android.view.View: int mViewFlags> = $i1;

     label2:
        return;
    }

    protected float getTopFadingEdgeStrength()
    {
        android.view.View r0;
        int $i0;
        float $f0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int computeVerticalScrollOffset()>();

        if $i0 <= 0 goto label1;

        $f0 = 1.0F;

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    protected float getBottomFadingEdgeStrength()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;
        float $f0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int computeVerticalScrollOffset()>();

        $i1 = virtualinvoke r0.<android.view.View: int computeVerticalScrollExtent()>();

        $i2 = $i0 + $i1;

        $i3 = virtualinvoke r0.<android.view.View: int computeVerticalScrollRange()>();

        if $i2 >= $i3 goto label1;

        $f0 = 1.0F;

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    protected float getLeftFadingEdgeStrength()
    {
        android.view.View r0;
        int $i0;
        float $f0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollOffset()>();

        if $i0 <= 0 goto label1;

        $f0 = 1.0F;

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    protected float getRightFadingEdgeStrength()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;
        float $f0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollOffset()>();

        $i1 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollExtent()>();

        $i2 = $i0 + $i1;

        $i3 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollRange()>();

        if $i2 >= $i3 goto label1;

        $f0 = 1.0F;

        goto label2;

     label1:
        $f0 = 0.0F;

     label2:
        return $f0;
    }

    public boolean isHorizontalScrollBarEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 256;

        if $i1 != 256 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setHorizontalScrollBarEnabled(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean isHorizontalScrollBarEnabled()>();

        if $z1 == z0 goto label1;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 ^ 256;

        r0.<android.view.View: int mViewFlags> = $i1;

        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        return;
    }

    public boolean isVerticalScrollBarEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 512;

        if $i1 != 512 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setVerticalScrollBarEnabled(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean isVerticalScrollBarEnabled()>();

        if $z1 == z0 goto label1;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 ^ 512;

        r0.<android.view.View: int mViewFlags> = $i1;

        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        return;
    }

    protected void recomputePadding()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        $i3 = r0.<android.view.View: int mUserPaddingLeft>;

        $i2 = r0.<android.view.View: int mPaddingTop>;

        $i1 = r0.<android.view.View: int mUserPaddingRight>;

        $i0 = r0.<android.view.View: int mUserPaddingBottom>;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>($i3, $i2, $i1, $i0);

        return;
    }

    public void setScrollbarFadingEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        android.view.View$ScrollabilityCache r1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        r1.<android.view.View$ScrollabilityCache: boolean fadeScrollBars> = z0;

        if z0 == 0 goto label1;

        r1.<android.view.View$ScrollabilityCache: int state> = 0;

        goto label2;

     label1:
        r1.<android.view.View$ScrollabilityCache: int state> = 1;

     label2:
        return;
    }

    public boolean isScrollbarFadingEnabled()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $z0 = $r2.<android.view.View$ScrollabilityCache: boolean fadeScrollBars>;

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int getScrollBarDefaultDelayBeforeFade()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache $r1, $r2;
        int $i0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r1 != null goto label1;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getScrollDefaultDelay()>();

        goto label2;

     label1:
        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i0 = $r2.<android.view.View$ScrollabilityCache: int scrollBarDefaultDelayBeforeFade>;

     label2:
        return $i0;
    }

    public void setScrollBarDefaultDelayBeforeFade(int)
    {
        android.view.View r0;
        int i0;
        android.view.View$ScrollabilityCache $r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.view.View: android.view.View$ScrollabilityCache getScrollCache()>();

        $r1.<android.view.View$ScrollabilityCache: int scrollBarDefaultDelayBeforeFade> = i0;

        return;
    }

    public int getScrollBarFadeDuration()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache $r1, $r2;
        int $i0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r1 != null goto label1;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getScrollBarFadeDuration()>();

        goto label2;

     label1:
        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i0 = $r2.<android.view.View$ScrollabilityCache: int scrollBarFadeDuration>;

     label2:
        return $i0;
    }

    public void setScrollBarFadeDuration(int)
    {
        android.view.View r0;
        int i0;
        android.view.View$ScrollabilityCache $r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.view.View: android.view.View$ScrollabilityCache getScrollCache()>();

        $r1.<android.view.View$ScrollabilityCache: int scrollBarFadeDuration> = i0;

        return;
    }

    public int getScrollBarSize()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache $r1, $r2;
        int $i0;
        android.content.Context $r3;
        android.view.ViewConfiguration $r4;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r1 != null goto label1;

        $r3 = r0.<android.view.View: android.content.Context mContext>;

        $r4 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r3);

        $i0 = virtualinvoke $r4.<android.view.ViewConfiguration: int getScaledScrollBarSize()>();

        goto label2;

     label1:
        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i0 = $r2.<android.view.View$ScrollabilityCache: int scrollBarSize>;

     label2:
        return $i0;
    }

    public void setScrollBarSize(int)
    {
        android.view.View r0;
        int i0;
        android.view.View$ScrollabilityCache $r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.view.View: android.view.View$ScrollabilityCache getScrollCache()>();

        $r1.<android.view.View$ScrollabilityCache: int scrollBarSize> = i0;

        return;
    }

    public void setScrollBarStyle(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 50331648;

        if i0 == $i2 goto label1;

        $i3 = r0.<android.view.View: int mViewFlags>;

        $i5 = $i3 & -50331649;

        $i4 = i0 & 50331648;

        $i6 = $i5 | $i4;

        r0.<android.view.View: int mViewFlags> = $i6;

        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        return;
    }

    public int getScrollBarStyle()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 50331648;

        return $i1;
    }

    protected int computeHorizontalScrollRange()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getWidth()>();

        return $i0;
    }

    protected int computeHorizontalScrollOffset()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mScrollX>;

        return $i0;
    }

    protected int computeHorizontalScrollExtent()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getWidth()>();

        return $i0;
    }

    protected int computeVerticalScrollRange()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getHeight()>();

        return $i0;
    }

    protected int computeVerticalScrollOffset()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mScrollY>;

        return $i0;
    }

    protected int computeVerticalScrollExtent()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getHeight()>();

        return $i0;
    }

    public boolean canScrollHorizontally(int)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollOffset()>();

        $i3 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollRange()>();

        $i4 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollExtent()>();

        i2 = $i3 - $i4;

        if i2 != 0 goto label1;

        return 0;

     label1:
        if i0 >= 0 goto label4;

        if i1 <= 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $i5 = i2 - 1;

        if i1 >= $i5 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    public boolean canScrollVertically(int)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.view.View: int computeVerticalScrollOffset()>();

        $i3 = virtualinvoke r0.<android.view.View: int computeVerticalScrollRange()>();

        $i4 = virtualinvoke r0.<android.view.View: int computeVerticalScrollExtent()>();

        i2 = $i3 - $i4;

        if i2 != 0 goto label1;

        return 0;

     label1:
        if i0 >= 0 goto label4;

        if i1 <= 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $i5 = i2 - 1;

        if i1 >= $i5 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    protected final void onDrawScrollBars(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        android.view.View$ScrollabilityCache r2;
        int i0, i1, i2, i3, i4, i6, i7, i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i49, i50, i51, i52, i53, i54, i55, i56;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6;
        float[] r3, $r7, $r8;
        android.widget.ScrollBarDrawable r4, $r5, $r6;
        byte b5, $b35, $b48;
        float $f0;
        android.graphics.Interpolator $r9;
        android.graphics.Interpolator$Result $r10, $r11;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r2 == null goto label25;

        i0 = r2.<android.view.View$ScrollabilityCache: int state>;

        if i0 != 0 goto label01;

        return;

     label01:
        z0 = 0;

        if i0 != 2 goto label05;

        $r8 = r2.<android.view.View$ScrollabilityCache: float[] interpolatorValues>;

        if $r8 != null goto label02;

        $r7 = newarray (float)[1];

        r2.<android.view.View$ScrollabilityCache: float[] interpolatorValues> = $r7;

     label02:
        r3 = r2.<android.view.View$ScrollabilityCache: float[] interpolatorValues>;

        $r9 = r2.<android.view.View$ScrollabilityCache: android.graphics.Interpolator scrollBarInterpolator>;

        $r10 = virtualinvoke $r9.<android.graphics.Interpolator: android.graphics.Interpolator$Result timeToValues(float[])>(r3);

        $r11 = <android.graphics.Interpolator$Result: android.graphics.Interpolator$Result FREEZE_END>;

        if $r10 != $r11 goto label03;

        r2.<android.view.View$ScrollabilityCache: int state> = 0;

        goto label04;

     label03:
        $r6 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        $f0 = r3[0];

        $i49 = staticinvoke <java.lang.Math: int round(float)>($f0);

        virtualinvoke $r6.<android.widget.ScrollBarDrawable: void setAlpha(int)>($i49);

     label04:
        z0 = 1;

        goto label06;

     label05:
        $r5 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r5.<android.widget.ScrollBarDrawable: void setAlpha(int)>(255);

     label06:
        i50 = r0.<android.view.View: int mViewFlags>;

        $i12 = i50 & 256;

        if $i12 != 256 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        z1 = $z4;

        $i14 = i50 & 512;

        if $i14 != 512 goto label09;

        $z6 = virtualinvoke r0.<android.view.View: boolean isVerticalScrollBarHidden()>();

        if $z6 != 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        z2 = $z5;

        if z2 != 0 goto label11;

        if z1 == 0 goto label25;

     label11:
        $i16 = r0.<android.view.View: int mRight>;

        $i13 = r0.<android.view.View: int mLeft>;

        i1 = $i16 - $i13;

        $i18 = r0.<android.view.View: int mBottom>;

        $i15 = r0.<android.view.View: int mTop>;

        i2 = $i18 - $i15;

        r4 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        i3 = r0.<android.view.View: int mScrollX>;

        i4 = r0.<android.view.View: int mScrollY>;

        $i17 = i50 & 33554432;

        if $i17 != 0 goto label12;

        $b48 = -1;

        goto label13;

     label12:
        $b48 = 0;

     label13:
        b5 = $b48;

        if z1 == 0 goto label17;

        i11 = virtualinvoke r4.<android.widget.ScrollBarDrawable: int getSize(boolean)>(0);

        if i11 > 0 goto label14;

        i11 = r2.<android.view.View$ScrollabilityCache: int scrollBarSize>;

     label14:
        $i33 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollRange()>();

        $i34 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollOffset()>();

        $i39 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollExtent()>();

        virtualinvoke r4.<android.widget.ScrollBarDrawable: void setParameters(int,int,int,boolean)>($i33, $i34, $i39, 0);

        if z2 == 0 goto label15;

        $i44 = virtualinvoke r0.<android.view.View: int getVerticalScrollbarWidth()>();

        goto label16;

     label15:
        $i44 = 0;

     label16:
        i10 = $i44;

        $i38 = i4 + i2;

        $i43 = $i38 - i11;

        $i37 = r0.<android.view.View: int mUserPaddingBottom>;

        $i36 = $i37 & b5;

        i7 = $i43 - $i36;

        $i42 = r0.<android.view.View: int mPaddingLeft>;

        $i41 = $i42 & b5;

        i6 = i3 + $i41;

        $i46 = i3 + i1;

        $i40 = r0.<android.view.View: int mUserPaddingRight>;

        $i47 = $i40 & b5;

        $i45 = $i46 - $i47;

        i9 = $i45 - i10;

        i8 = i7 + i11;

        virtualinvoke r0.<android.view.View: void onDrawHorizontalScrollBar(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,int,int)>(r1, r4, i6, i7, i9, i8);

        if z0 == 0 goto label17;

        virtualinvoke r0.<android.view.View: void invalidate(int,int,int,int)>(i6, i7, i9, i8);

     label17:
        if z2 == 0 goto label25;

        i51 = virtualinvoke r4.<android.widget.ScrollBarDrawable: int getSize(boolean)>(1);

        if i51 > 0 goto label18;

        i51 = r2.<android.view.View$ScrollabilityCache: int scrollBarSize>;

     label18:
        $i19 = virtualinvoke r0.<android.view.View: int computeVerticalScrollRange()>();

        $i21 = virtualinvoke r0.<android.view.View: int computeVerticalScrollOffset()>();

        $i20 = virtualinvoke r0.<android.view.View: int computeVerticalScrollExtent()>();

        virtualinvoke r4.<android.widget.ScrollBarDrawable: void setParameters(int,int,int,boolean)>($i19, $i21, $i20, 1);

        i52 = r0.<android.view.View: int mVerticalScrollbarPosition>;

        if i52 != 0 goto label21;

        $z3 = virtualinvoke r0.<android.view.View: boolean isLayoutRtl()>();

        if $z3 == 0 goto label19;

        $b35 = 1;

        goto label20;

     label19:
        $b35 = 2;

     label20:
        i52 = $b35;

     label21:
        lookupswitch(i52)
        {
            case 1: goto label23;
            case 2: goto label22;
            default: goto label22;
        };

     label22:
        $i27 = i3 + i1;

        $i30 = $i27 - i51;

        $i31 = r0.<android.view.View: int mUserPaddingRight>;

        $i32 = $i31 & b5;

        i53 = $i30 - $i32;

        goto label24;

     label23:
        $i24 = r0.<android.view.View: int mUserPaddingLeft>;

        $i25 = $i24 & b5;

        i53 = i3 + $i25;

     label24:
        $i22 = r0.<android.view.View: int mPaddingTop>;

        $i23 = $i22 & b5;

        i54 = i4 + $i23;

        i55 = i53 + i51;

        $i26 = i4 + i2;

        $i28 = r0.<android.view.View: int mUserPaddingBottom>;

        $i29 = $i28 & b5;

        i56 = $i26 - $i29;

        virtualinvoke r0.<android.view.View: void onDrawVerticalScrollBar(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,int,int)>(r1, r4, i53, i54, i55, i56);

        if z0 == 0 goto label25;

        virtualinvoke r0.<android.view.View: void invalidate(int,int,int,int)>(i53, i54, i55, i56);

     label25:
        return;
    }

    protected boolean isVerticalScrollBarHidden()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    protected void onDrawHorizontalScrollBar(android.graphics.Canvas, android.graphics.drawable.Drawable, int, int, int, int)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        int i0, i1, i2, i3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.drawable.Drawable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        return;
    }

    protected void onDrawVerticalScrollBar(android.graphics.Canvas, android.graphics.drawable.Drawable, int, int, int, int)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        int i0, i1, i2, i3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.drawable.Drawable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        return;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        return;
    }

    void assignParent(android.view.ViewParent)
    {
        android.view.View r0;
        android.view.ViewParent r1, $r2;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewParent;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r2 != null goto label1;

        r0.<android.view.View: android.view.ViewParent mParent> = r1;

        goto label3;

     label1:
        if r1 != null goto label2;

        r0.<android.view.View: android.view.ViewParent mParent> = null;

        goto label3;

     label2:
        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("view ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" being added, but");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" it already has a parent");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label3:
        return;
    }

    protected void onAttachedToWindow()
    {
        android.view.View r0;
        android.view.inputmethod.InputMethodManager r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        android.view.ViewParent $r2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 512;

        if $i1 == 0 goto label1;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r2.<android.view.ViewParent: void requestTransparentRegion(android.view.View)>(r0);

     label1:
        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 134217728;

        if $i3 == 0 goto label2;

        specialinvoke r0.<android.view.View: boolean initialAwakenScrollBars()>();

        $i6 = r0.<android.view.View: int mPrivateFlags>;

        $i7 = $i6 & -134217729;

        r0.<android.view.View: int mPrivateFlags> = $i7;

     label2:
        $i4 = r0.<android.view.View: int mPrivateFlags3>;

        $i5 = $i4 & -5;

        r0.<android.view.View: int mPrivateFlags3> = $i5;

        virtualinvoke r0.<android.view.View: void jumpDrawablesToCurrentState()>();

        virtualinvoke r0.<android.view.View: void resetSubtreeAccessibilityStateChanged()>();

        specialinvoke r0.<android.view.View: void rebuildOutline()>();

        $z0 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z0 == 0 goto label3;

        r1 = staticinvoke <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager peekInstance()>();

        virtualinvoke r1.<android.view.inputmethod.InputMethodManager: void focusIn(android.view.View)>(r0);

     label3:
        return;
    }

    public boolean resolveRtlPropertiesIfNeeded()
    {
        android.view.View r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0;

        r0 := @this: android.view.View;

        $z0 = specialinvoke r0.<android.view.View: boolean needRtlPropertiesResolution()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean isLayoutDirectionResolved()>();

        if $z1 != 0 goto label2;

        virtualinvoke r0.<android.view.View: boolean resolveLayoutDirection()>();

        virtualinvoke r0.<android.view.View: void resolveLayoutParams()>();

     label2:
        $z2 = virtualinvoke r0.<android.view.View: boolean isTextDirectionResolved()>();

        if $z2 != 0 goto label3;

        virtualinvoke r0.<android.view.View: boolean resolveTextDirection()>();

     label3:
        $z3 = virtualinvoke r0.<android.view.View: boolean isTextAlignmentResolved()>();

        if $z3 != 0 goto label4;

        virtualinvoke r0.<android.view.View: boolean resolveTextAlignment()>();

     label4:
        $z4 = specialinvoke r0.<android.view.View: boolean isDrawablesResolved()>();

        if $z4 != 0 goto label5;

        virtualinvoke r0.<android.view.View: void resolveDrawables()>();

     label5:
        $z5 = virtualinvoke r0.<android.view.View: boolean isPaddingResolved()>();

        if $z5 != 0 goto label6;

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label6:
        $i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        virtualinvoke r0.<android.view.View: void onRtlPropertiesChanged(int)>($i0);

        return 1;
    }

    public void resetRtlProperties()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void resetResolvedLayoutDirection()>();

        virtualinvoke r0.<android.view.View: void resetResolvedTextDirection()>();

        virtualinvoke r0.<android.view.View: void resetResolvedTextAlignment()>();

        virtualinvoke r0.<android.view.View: void resetResolvedPadding()>();

        virtualinvoke r0.<android.view.View: void resetResolvedDrawables()>();

        return;
    }

    void dispatchScreenStateChanged(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.View: void onScreenStateChanged(int)>(i0);

        return;
    }

    public void onScreenStateChanged(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        return;
    }

    private boolean hasRtlSupport()
    {
        android.view.View r0;
        android.content.Context $r1;
        android.content.pm.ApplicationInfo $r2;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $z0 = virtualinvoke $r2.<android.content.pm.ApplicationInfo: boolean hasRtlSupport()>();

        return $z0;
    }

    private boolean isRtlCompatibilityMode()
    {
        android.view.View r0;
        int i0;
        android.content.Context $r1;
        android.content.pm.ApplicationInfo $r2;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $r1 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i0 = $r2.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if i0 < 17 goto label1;

        $z0 = specialinvoke r0.<android.view.View: boolean hasRtlSupport()>();

        if $z0 != 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private boolean needRtlPropertiesResolution()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 1610678816;

        if $i1 == 1610678816 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void onRtlPropertiesChanged(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        return;
    }

    public boolean resolveLayoutDirection()
    {
        android.view.View r0;
        java.lang.AbstractMethodError r1, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        boolean $z0, $z1, $z2;
        android.view.ViewParent $r2, $r3, $r7;
        java.util.Locale $r4;
        java.lang.StringBuilder $r5, $r10, $r11;
        java.lang.String $r8, $r12;
        java.lang.Class $r9;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -49;

        r0.<android.view.View: int mPrivateFlags2> = $i1;

        $z0 = specialinvoke r0.<android.view.View: boolean hasRtlSupport()>();

        if $z0 == 0 goto label9;

        $i4 = r0.<android.view.View: int mPrivateFlags2>;

        $i5 = $i4 & 12;

        $i6 = $i5 >> 2;

        tableswitch($i6)
        {
            case 1: goto label7;
            case 2: goto label1;
            case 3: goto label8;
            default: goto label9;
        };

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean canResolveLayoutDirection()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z2 = interfaceinvoke $r2.<android.view.ViewParent: boolean isLayoutDirectionResolved()>();

        if $z2 != 0 goto label4;

     label3:
        return 0;

     label4:
        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $i7 = interfaceinvoke $r3.<android.view.ViewParent: int getLayoutDirection()>();

        if $i7 != 1 goto label5;

        $i8 = r0.<android.view.View: int mPrivateFlags2>;

        $i9 = $i8 | 16;

        r0.<android.view.View: int mPrivateFlags2> = $i9;

     label5:
        goto label9;

     label6:
        $r6 := @caughtexception;

        r1 = $r6;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r9 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r9.<java.lang.Class: java.lang.String getSimpleName()>();

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r12, r1);

        goto label9;

     label7:
        $i14 = r0.<android.view.View: int mPrivateFlags2>;

        $i13 = $i14 | 16;

        r0.<android.view.View: int mPrivateFlags2> = $i13;

        goto label9;

     label8:
        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $i10 = staticinvoke <android.text.TextUtils: int getLayoutDirectionFromLocale(java.util.Locale)>($r4);

        if 1 != $i10 goto label9;

        $i12 = r0.<android.view.View: int mPrivateFlags2>;

        $i11 = $i12 | 16;

        r0.<android.view.View: int mPrivateFlags2> = $i11;

        goto label9;

     label9:
        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 | 32;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        return 1;

        catch java.lang.AbstractMethodError from label2 to label3 with label6;
        catch java.lang.AbstractMethodError from label4 to label5 with label6;
    }

    public boolean canResolveLayoutDirection()
    {
        android.view.View r0;
        java.lang.AbstractMethodError r1, $r4;
        int $i0;
        android.view.ViewParent $r2, $r3, $r6;
        boolean $z0;
        java.lang.StringBuilder $r5, $r9, $r10;
        java.lang.Class $r7;
        java.lang.String $r8, $r11;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getRawLayoutDirection()>();

        lookupswitch($i0)
        {
            case 2: goto label1;
            default: goto label6;
        };

     label1:
        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r2 == null goto label5;

     label2:
        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = interfaceinvoke $r3.<android.view.ViewParent: boolean canResolveLayoutDirection()>();

     label3:
        return $z0;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r11, r1);

     label5:
        return 0;

     label6:
        return 1;

        catch java.lang.AbstractMethodError from label2 to label3 with label4;
    }

    public void resetResolvedLayoutDirection()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -49;

        r0.<android.view.View: int mPrivateFlags2> = $i1;

        return;
    }

    public boolean isLayoutDirectionInherited()
    {
        android.view.View r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getRawLayoutDirection()>();

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isLayoutDirectionResolved()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 32;

        if $i1 != 32 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isPaddingResolved()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 536870912;

        if $i1 != 536870912 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void resolvePadding()
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        android.graphics.Rect r1, $r6;
        boolean $z0, $z1, $z2, $z4, $z5;
        android.graphics.drawable.Drawable $r2, $r4;
        java.lang.ThreadLocal $r3, $r7;
        java.lang.Object $r5;

        r0 := @this: android.view.View;

        i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        $z0 = specialinvoke r0.<android.view.View: boolean isRtlCompatibilityMode()>();

        if $z0 != 0 goto label16;

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r2 == null goto label04;

        $z1 = r0.<android.view.View: boolean mLeftPaddingDefined>;

        if $z1 == 0 goto label01;

        $z5 = r0.<android.view.View: boolean mRightPaddingDefined>;

        if $z5 != 0 goto label04;

     label01:
        $r3 = <android.view.View: java.lang.ThreadLocal sThreadLocal>;

        $r5 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (android.graphics.Rect) $r5;

        if r1 != null goto label02;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>()>();

        r1 = $r6;

        $r7 = <android.view.View: java.lang.ThreadLocal sThreadLocal>;

        virtualinvoke $r7.<java.lang.ThreadLocal: void set(java.lang.Object)>(r1);

     label02:
        $r4 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r1);

        $z2 = r0.<android.view.View: boolean mLeftPaddingDefined>;

        if $z2 != 0 goto label03;

        $i21 = r1.<android.graphics.Rect: int left>;

        r0.<android.view.View: int mUserPaddingLeftInitial> = $i21;

     label03:
        $z4 = r0.<android.view.View: boolean mRightPaddingDefined>;

        if $z4 != 0 goto label04;

        $i22 = r1.<android.graphics.Rect: int right>;

        r0.<android.view.View: int mUserPaddingRightInitial> = $i22;

     label04:
        lookupswitch(i0)
        {
            case 0: goto label09;
            case 1: goto label05;
            default: goto label09;
        };

     label05:
        $i7 = r0.<android.view.View: int mUserPaddingStart>;

        if $i7 == -2147483648 goto label06;

        $i13 = r0.<android.view.View: int mUserPaddingStart>;

        r0.<android.view.View: int mUserPaddingRight> = $i13;

        goto label07;

     label06:
        $i8 = r0.<android.view.View: int mUserPaddingRightInitial>;

        r0.<android.view.View: int mUserPaddingRight> = $i8;

     label07:
        $i9 = r0.<android.view.View: int mUserPaddingEnd>;

        if $i9 == -2147483648 goto label08;

        $i14 = r0.<android.view.View: int mUserPaddingEnd>;

        r0.<android.view.View: int mUserPaddingLeft> = $i14;

        goto label13;

     label08:
        $i10 = r0.<android.view.View: int mUserPaddingLeftInitial>;

        r0.<android.view.View: int mUserPaddingLeft> = $i10;

        goto label13;

     label09:
        $i16 = r0.<android.view.View: int mUserPaddingStart>;

        if $i16 == -2147483648 goto label10;

        $i19 = r0.<android.view.View: int mUserPaddingStart>;

        r0.<android.view.View: int mUserPaddingLeft> = $i19;

        goto label11;

     label10:
        $i15 = r0.<android.view.View: int mUserPaddingLeftInitial>;

        r0.<android.view.View: int mUserPaddingLeft> = $i15;

     label11:
        $i18 = r0.<android.view.View: int mUserPaddingEnd>;

        if $i18 == -2147483648 goto label12;

        $i20 = r0.<android.view.View: int mUserPaddingEnd>;

        r0.<android.view.View: int mUserPaddingRight> = $i20;

        goto label13;

     label12:
        $i17 = r0.<android.view.View: int mUserPaddingRightInitial>;

        r0.<android.view.View: int mUserPaddingRight> = $i17;

     label13:
        $i12 = r0.<android.view.View: int mUserPaddingBottom>;

        if $i12 < 0 goto label14;

        $i11 = r0.<android.view.View: int mUserPaddingBottom>;

        goto label15;

     label14:
        $i11 = r0.<android.view.View: int mPaddingBottom>;

     label15:
        r0.<android.view.View: int mUserPaddingBottom> = $i11;

     label16:
        $i4 = r0.<android.view.View: int mUserPaddingLeft>;

        $i3 = r0.<android.view.View: int mPaddingTop>;

        $i2 = r0.<android.view.View: int mUserPaddingRight>;

        $i1 = r0.<android.view.View: int mUserPaddingBottom>;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>($i4, $i3, $i2, $i1);

        virtualinvoke r0.<android.view.View: void onRtlPropertiesChanged(int)>(i0);

        $i5 = r0.<android.view.View: int mPrivateFlags2>;

        $i6 = $i5 | 536870912;

        r0.<android.view.View: int mPrivateFlags2> = $i6;

        return;
    }

    public void resetResolvedPadding()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -536870913;

        r0.<android.view.View: int mPrivateFlags2> = $i1;

        return;
    }

    protected void onDetachedFromWindow()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return;
    }

    protected void onDetachedFromWindowInternal()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -67108865;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 & -5;

        r0.<android.view.View: int mPrivateFlags3> = $i3;

        specialinvoke r0.<android.view.View: void removeUnsetPressCallback()>();

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        specialinvoke r0.<android.view.View: void removePerformClickCallback()>();

        specialinvoke r0.<android.view.View: void removeSendViewScrolledAccessibilityEventCallback()>();

        virtualinvoke r0.<android.view.View: void stopNestedScroll()>();

        virtualinvoke r0.<android.view.View: void jumpDrawablesToCurrentState()>();

        virtualinvoke r0.<android.view.View: void destroyDrawingCache()>();

        specialinvoke r0.<android.view.View: void cleanupDraw()>();

        r0.<android.view.View: android.view.animation.Animation mCurrentAnimation> = null;

        return;
    }

    private void cleanupDraw()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        android.view.ViewRootImpl $r3;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void resetDisplayList()>();

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r3.<android.view.ViewRootImpl: void cancelInvalidate(android.view.View)>(r0);

     label1:
        return;
    }

    void invalidateInheritedLayoutMode(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        return;
    }

    protected int getWindowAttachCount()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mWindowAttachCount>;

        return $i0;
    }

    public android.os.IBinder getWindowToken()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        android.os.IBinder $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.os.IBinder mWindowToken>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public android.view.WindowId getWindowId()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r2, $r3, $r5, $r7, $r8, $r11, $r14, $r17;
        android.view.WindowId $r4, $r6, $r13;
        android.os.IBinder $r9;
        android.view.IWindowSession $r10;
        android.view.IWindowId $r12, $r15;
        android.os.RemoteException $r16;

        r0 := @this: android.view.View;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.WindowId mWindowId>;

        if $r4 != null goto label5;

     label2:
        $r11 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r10 = $r7.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r9 = $r8.<android.view.View$AttachInfo: android.os.IBinder mWindowToken>;

        $r12 = interfaceinvoke $r10.<android.view.IWindowSession: android.view.IWindowId getWindowId(android.os.IBinder)>($r9);

        $r11.<android.view.View$AttachInfo: android.view.IWindowId mIWindowId> = $r12;

        $r17 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r13 = new android.view.WindowId;

        $r14 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r15 = $r14.<android.view.View$AttachInfo: android.view.IWindowId mIWindowId>;

        specialinvoke $r13.<android.view.WindowId: void <init>(android.view.IWindowId)>($r15);

        $r17.<android.view.View$AttachInfo: android.view.WindowId mWindowId> = $r13;

     label3:
        goto label5;

     label4:
        $r16 := @caughtexception;

     label5:
        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.view.WindowId mWindowId>;

        return $r6;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public android.os.IBinder getApplicationWindowToken()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.os.IBinder r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label2;

        r2 = r1.<android.view.View$AttachInfo: android.os.IBinder mPanelParentWindowToken>;

        if r2 != null goto label1;

        r2 = r1.<android.view.View$AttachInfo: android.os.IBinder mWindowToken>;

     label1:
        return r2;

     label2:
        return null;
    }

    public android.view.Display getDisplay()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        android.view.Display $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.Display mDisplay>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    android.view.IWindowSession getWindowSession()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        android.view.IWindowSession $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    void dispatchAttachedToWindow(android.view.View$AttachInfo, int)
    {
        android.view.View r0;
        android.view.View$AttachInfo r1, $r8, $r10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        android.view.View$ListenerInfo r2;
        java.util.concurrent.CopyOnWriteArrayList r3, $r11;
        java.util.Iterator r4;
        android.view.View$OnAttachStateChangeListener r5;
        android.view.ViewOverlay $r6, $r16;
        android.view.ViewTreeObserver $r7, $r13, $r14;
        java.lang.Object $r9;
        boolean $z0;
        java.util.ArrayList $r12;
        android.view.ViewGroup $r15;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$AttachInfo;

        i0 := @parameter1: int;

        r0.<android.view.View: android.view.View$AttachInfo mAttachInfo> = r1;

        $r6 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r6 == null goto label1;

        $r16 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r15 = virtualinvoke $r16.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r15.<android.view.ViewGroup: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)>(r1, i0);

     label1:
        $i1 = r0.<android.view.View: int mWindowAttachCount>;

        $i2 = $i1 + 1;

        r0.<android.view.View: int mWindowAttachCount> = $i2;

        $i3 = r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 | 1024;

        r0.<android.view.View: int mPrivateFlags> = $i4;

        $r7 = r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver>;

        if $r7 == null goto label2;

        $r13 = r1.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        $r14 = r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver>;

        virtualinvoke $r13.<android.view.ViewTreeObserver: void merge(android.view.ViewTreeObserver)>($r14);

        r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver> = null;

     label2:
        $i5 = r0.<android.view.View: int mPrivateFlags>;

        $i6 = $i5 & 524288;

        if $i6 == 0 goto label3;

        $r10 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r12 = $r10.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        $i11 = r0.<android.view.View: int mPrivateFlags>;

        $i10 = $i11 | 1048576;

        r0.<android.view.View: int mPrivateFlags> = $i10;

     label3:
        $r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        virtualinvoke r0.<android.view.View: void performCollectViewAttributes(android.view.View$AttachInfo,int)>($r8, i0);

        virtualinvoke r0.<android.view.View: void onAttachedToWindow()>();

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label4;

        $r11 = staticinvoke <android.view.View$ListenerInfo: java.util.concurrent.CopyOnWriteArrayList access$200(android.view.View$ListenerInfo)>(r2);

        goto label5;

     label4:
        $r11 = null;

     label5:
        r3 = $r11;

        if r3 == null goto label7;

        $i9 = virtualinvoke r3.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        if $i9 <= 0 goto label7;

        r4 = virtualinvoke r3.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.view.View$OnAttachStateChangeListener) $r9;

        interfaceinvoke r5.<android.view.View$OnAttachStateChangeListener: void onViewAttachedToWindow(android.view.View)>(r0);

        goto label6;

     label7:
        i12 = r1.<android.view.View$AttachInfo: int mWindowVisibility>;

        if i12 == 8 goto label8;

        virtualinvoke r0.<android.view.View: void onWindowVisibilityChanged(int)>(i12);

     label8:
        $i8 = r0.<android.view.View: int mPrivateFlags>;

        $i7 = $i8 & 1024;

        if $i7 == 0 goto label9;

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

     label9:
        virtualinvoke r0.<android.view.View: void needGlobalAttributesUpdate(boolean)>(0);

        return;
    }

    void dispatchDetachedFromWindow()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.concurrent.CopyOnWriteArrayList r2, $r11;
        java.util.Iterator r3;
        android.view.View$OnAttachStateChangeListener r4;
        android.view.ViewOverlay $r5, $r6;
        android.view.ViewGroup $r7;
        java.util.ArrayList $r9;
        java.lang.Object $r10;
        boolean $z1;
        android.view.View$ListenerInfo r12;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        i0 = r1.<android.view.View$AttachInfo: int mWindowVisibility>;

        if i0 == 8 goto label1;

        virtualinvoke r0.<android.view.View: void onWindowVisibilityChanged(int)>(8);

     label1:
        virtualinvoke r0.<android.view.View: void onDetachedFromWindow()>();

        virtualinvoke r0.<android.view.View: void onDetachedFromWindowInternal()>();

        r12 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r12 == null goto label2;

        $r11 = staticinvoke <android.view.View$ListenerInfo: java.util.concurrent.CopyOnWriteArrayList access$200(android.view.View$ListenerInfo)>(r12);

        goto label3;

     label2:
        $r11 = null;

     label3:
        r2 = $r11;

        if r2 == null goto label5;

        $i5 = virtualinvoke r2.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        if $i5 <= 0 goto label5;

        r3 = virtualinvoke r2.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.view.View$OnAttachStateChangeListener) $r10;

        interfaceinvoke r4.<android.view.View$OnAttachStateChangeListener: void onViewDetachedFromWindow(android.view.View)>(r0);

        goto label4;

     label5:
        $i1 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & 1048576;

        if $i2 == 0 goto label6;

        $r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r9 = $r8.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        virtualinvoke $r9.<java.util.ArrayList: boolean remove(java.lang.Object)>(r0);

        $i3 = r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 & -1048577;

        r0.<android.view.View: int mPrivateFlags> = $i4;

     label6:
        r0.<android.view.View: android.view.View$AttachInfo mAttachInfo> = null;

        $r5 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r5 == null goto label7;

        $r6 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r7 = virtualinvoke $r6.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r7.<android.view.ViewGroup: void dispatchDetachedFromWindow()>();

     label7:
        return;
    }

    public final void cancelPendingInputEvents()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void dispatchCancelPendingInputEvents()>();

        return;
    }

    void dispatchCancelPendingInputEvents()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;
        android.util.SuperNotCalledException $r1;
        java.lang.StringBuilder $r2, $r3, $r6, $r7;
        java.lang.Class $r4;
        java.lang.String $r5, $r8;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & -17;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

        virtualinvoke r0.<android.view.View: void onCancelPendingInputEvents()>();

        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 & 16;

        if $i3 == 16 goto label1;

        $r1 = new android.util.SuperNotCalledException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" did not call through to super.onCancelPendingInputEvents()");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<android.util.SuperNotCalledException: void <init>(java.lang.String)>($r8);

        throw $r1;

     label1:
        return;
    }

    public void onCancelPendingInputEvents()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void removePerformClickCallback()>();

        virtualinvoke r0.<android.view.View: void cancelLongPress()>();

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 | 16;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

        return;
    }

    public void saveHierarchyState(android.util.SparseArray)
    {
        android.view.View r0;
        android.util.SparseArray r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.util.SparseArray;

        virtualinvoke r0.<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>(r1);

        return;
    }

    protected void dispatchSaveInstanceState(android.util.SparseArray)
    {
        android.view.View r0;
        android.util.SparseArray r1;
        android.os.Parcelable r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.util.SparseArray;

        $i0 = r0.<android.view.View: int mID>;

        if $i0 == -1 goto label2;

        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 65536;

        if $i2 != 0 goto label2;

        $i3 = r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 & -131073;

        r0.<android.view.View: int mPrivateFlags> = $i4;

        r2 = virtualinvoke r0.<android.view.View: android.os.Parcelable onSaveInstanceState()>();

        $i5 = r0.<android.view.View: int mPrivateFlags>;

        $i6 = $i5 & 131072;

        if $i6 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Derived class did not call super.onSaveInstanceState()");

        throw $r3;

     label1:
        if r2 == null goto label2;

        $i7 = r0.<android.view.View: int mID>;

        virtualinvoke r1.<android.util.SparseArray: void put(int,java.lang.Object)>($i7, r2);

     label2:
        return;
    }

    protected android.os.Parcelable onSaveInstanceState()
    {
        android.view.View r0;
        int $i0, $i1;
        android.view.AbsSavedState $r1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 131072;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        $r1 = <android.view.View$BaseSavedState: android.view.AbsSavedState EMPTY_STATE>;

        return $r1;
    }

    public void restoreHierarchyState(android.util.SparseArray)
    {
        android.view.View r0;
        android.util.SparseArray r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.util.SparseArray;

        virtualinvoke r0.<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>(r1);

        return;
    }

    protected void dispatchRestoreInstanceState(android.util.SparseArray)
    {
        android.view.View r0;
        android.util.SparseArray r1;
        android.os.Parcelable r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.util.SparseArray;

        $i0 = r0.<android.view.View: int mID>;

        if $i0 == -1 goto label1;

        $i1 = r0.<android.view.View: int mID>;

        $r3 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        r2 = (android.os.Parcelable) $r3;

        if r2 == null goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -131073;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        virtualinvoke r0.<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>(r2);

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 131072;

        if $i5 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Derived class did not call super.onRestoreInstanceState()");

        throw $r4;

     label1:
        return;
    }

    protected void onRestoreInstanceState(android.os.Parcelable)
    {
        android.view.View r0;
        android.os.Parcelable r1;
        int $i0, $i1, $i2;
        android.view.AbsSavedState $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r10, $r11, $r13, $r15, $r16;
        java.lang.Class $r6;
        java.lang.String $r7, $r17;
        android.content.Context $r12;
        java.lang.Object $r14;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.os.Parcelable;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 131072;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        $r2 = <android.view.View$BaseSavedState: android.view.AbsSavedState EMPTY_STATE>;

        if r1 == $r2 goto label1;

        if r1 == null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong state class, expecting View State but received ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead. This usually happens ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("when two views of different type have the same id in the same hierarchy. ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This view\'s id is ");

        $r12 = r0.<android.view.View: android.content.Context mContext>;

        $i2 = virtualinvoke r0.<android.view.View: int getId()>();

        $r14 = staticinvoke <android.view.ViewDebug: java.lang.Object resolveId(android.content.Context,int)>($r12, $i2);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Make sure ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("other views do not use the same id.");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r3;

     label1:
        return;
    }

    public long getDrawingTime()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        long $l0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $l0 = $r2.<android.view.View$AttachInfo: long mDrawingTime>;

        goto label2;

     label1:
        $l0 = 0L;

     label2:
        return $l0;
    }

    public void setDuplicateParentStateEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i0 = 4194304;

        goto label2;

     label1:
        $i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($i0, 4194304);

        return;
    }

    public boolean isDuplicateParentStateEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 4194304;

        if $i1 != 4194304 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setLayerType(int, android.graphics.Paint)
    {
        android.view.View r0;
        int i0, $i1, $i2;
        android.graphics.Paint r1, $r4, $r6;
        boolean z0, z1, $z3;
        java.lang.IllegalArgumentException $r2;
        android.view.RenderNode $r3, $r5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Paint;

        if i0 < 0 goto label1;

        if i0 <= 2 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Layer type can only be one of: LAYER_TYPE_NONE, LAYER_TYPE_SOFTWARE or LAYER_TYPE_HARDWARE");

        throw $r2;

     label2:
        $r3 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        z0 = virtualinvoke $r3.<android.view.RenderNode: boolean setLayerType(int)>(i0);

        if z0 != 0 goto label3;

        virtualinvoke r0.<android.view.View: void setLayerPaint(android.graphics.Paint)>(r1);

        return;

     label3:
        $i1 = r0.<android.view.View: int mLayerType>;

        if $i1 != 1 goto label4;

        virtualinvoke r0.<android.view.View: void destroyDrawingCache()>();

     label4:
        r0.<android.view.View: int mLayerType> = i0;

        $i2 = r0.<android.view.View: int mLayerType>;

        if $i2 != 0 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        z1 = $z3;

        if z1 == 0 goto label7;

        $r6 = null;

        goto label9;

     label7:
        if r1 != null goto label8;

        $r6 = new android.graphics.Paint;

        specialinvoke $r6.<android.graphics.Paint: void <init>()>();

        goto label9;

     label8:
        $r6 = r1;

     label9:
        r0.<android.view.View: android.graphics.Paint mLayerPaint> = $r6;

        $r5 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $r4 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        virtualinvoke $r5.<android.view.RenderNode: boolean setLayerPaint(android.graphics.Paint)>($r4);

        virtualinvoke r0.<android.view.View: void invalidateParentCaches()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        return;
    }

    public void setLayerPaint(android.graphics.Paint)
    {
        android.view.View r0;
        android.graphics.Paint r1, $r2, $r4;
        int i0;
        android.view.RenderNode $r3;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Paint;

        i0 = virtualinvoke r0.<android.view.View: int getLayerType()>();

        if i0 == 0 goto label4;

        if r1 != null goto label1;

        $r4 = new android.graphics.Paint;

        specialinvoke $r4.<android.graphics.Paint: void <init>()>();

        goto label2;

     label1:
        $r4 = r1;

     label2:
        r0.<android.view.View: android.graphics.Paint mLayerPaint> = $r4;

        if i0 != 2 goto label3;

        $r3 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $r2 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        $z0 = virtualinvoke $r3.<android.view.RenderNode: boolean setLayerPaint(android.graphics.Paint)>($r2);

        if $z0 == 0 goto label4;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        goto label4;

     label3:
        virtualinvoke r0.<android.view.View: void invalidate()>();

     label4:
        return;
    }

    boolean hasStaticLayer()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 1;
    }

    public int getLayerType()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mLayerType>;

        return $i0;
    }

    public void buildLayer()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        int $i0, $i1, $i2, $i3;
        android.view.HardwareRenderer $r2, $r5;
        android.view.RenderNode $r3, $r4;
        boolean $z0;
        java.lang.IllegalStateException $r6;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mLayerType>;

        if $i0 != 0 goto label1;

        return;

     label1:
        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 != null goto label2;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This view must be attached to a window first");

        throw $r6;

     label2:
        $i1 = virtualinvoke r0.<android.view.View: int getWidth()>();

        if $i1 == 0 goto label3;

        $i2 = virtualinvoke r0.<android.view.View: int getHeight()>();

        if $i2 != 0 goto label4;

     label3:
        return;

     label4:
        $i3 = r0.<android.view.View: int mLayerType>;

        lookupswitch($i3)
        {
            case 1: goto label6;
            case 2: goto label5;
            default: goto label7;
        };

     label5:
        specialinvoke r0.<android.view.View: void updateDisplayListIfDirty()>();

        $r2 = r1.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r2 == null goto label7;

        $r3 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r3.<android.view.RenderNode: boolean isValid()>();

        if $z0 == 0 goto label7;

        $r5 = r1.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        $r4 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r5.<android.view.HardwareRenderer: void buildLayer(android.view.RenderNode)>($r4);

        goto label7;

     label6:
        virtualinvoke r0.<android.view.View: void buildDrawingCache(boolean)>(1);

     label7:
        return;
    }

    android.view.HardwareLayer getHardwareLayer()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return null;
    }

    protected void destroyHardwareResources()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void resetDisplayList()>();

        return;
    }

    public void setDrawingCacheEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        char $c0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        r0.<android.view.View: boolean mCachingFailed> = 0;

        if z0 == 0 goto label1;

        $c0 = 32768;

        goto label2;

     label1:
        $c0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>($c0, 32768);

        return;
    }

    public boolean isDrawingCacheEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 32768;

        if $i1 != 32768 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void outputDirtyFlags(java.lang.String, boolean, int)
    {
        android.view.View r0, r3;
        java.lang.String r1, $r17, $r19;
        boolean z0, $z1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13;
        android.view.ViewGroup r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r20, $r21;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("             DIRTY(");

        $i3 = r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 & 6291456;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") DRAWN(");

        $i5 = r0.<android.view.View: int mPrivateFlags>;

        $i6 = $i5 & 32;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" CACHE_VALID(");

        $i8 = r0.<android.view.View: int mPrivateFlags>;

        $i7 = $i8 & 32768;

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") INVALIDATED(");

        $i10 = r0.<android.view.View: int mPrivateFlags>;

        $i9 = $i10 & -2147483648;

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r17);

        if z0 == 0 goto label1;

        $i12 = r0.<android.view.View: int mPrivateFlags>;

        $i13 = $i12 & i0;

        r0.<android.view.View: int mPrivateFlags> = $i13;

     label1:
        $z1 = r0 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label3;

        r2 = (android.view.ViewGroup) r0;

        i1 = virtualinvoke r2.<android.view.ViewGroup: int getChildCount()>();

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        r3 = virtualinvoke r2.<android.view.ViewGroup: android.view.View getChildAt(int)>(i2);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<android.view.View: void outputDirtyFlags(java.lang.String,boolean,int)>($r19, z0, i0);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    protected void dispatchGetDisplayList()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return;
    }

    public boolean canHaveDisplayList()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        android.view.HardwareRenderer $r3;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void updateDisplayListIfDirty()
    {
        android.view.View r0;
        android.view.RenderNode r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        android.view.HardwareCanvas r2;
        android.view.HardwareLayer r3;
        android.graphics.Bitmap r4;
        java.lang.Throwable r5, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        android.view.View$AttachInfo $r6;
        float $f0, $f1;
        android.view.ViewOverlay $r7, $r8, $r10;
        android.view.ViewGroup $r9;
        android.graphics.Paint $r11, $r12;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $z0 = virtualinvoke r0.<android.view.View: boolean canHaveDisplayList()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        $i3 = r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 & 32768;

        if $i4 == 0 goto label02;

        $z7 = virtualinvoke r1.<android.view.RenderNode: boolean isValid()>();

        if $z7 == 0 goto label02;

        $z6 = r0.<android.view.View: boolean mRecreateDisplayList>;

        if $z6 == 0 goto label14;

     label02:
        $z1 = virtualinvoke r1.<android.view.RenderNode: boolean isValid()>();

        if $z1 == 0 goto label03;

        $z4 = r0.<android.view.View: boolean mRecreateDisplayList>;

        if $z4 != 0 goto label03;

        $i21 = r0.<android.view.View: int mPrivateFlags>;

        $i22 = $i21 | 32800;

        r0.<android.view.View: int mPrivateFlags> = $i22;

        $i19 = r0.<android.view.View: int mPrivateFlags>;

        $i20 = $i19 & -6291457;

        r0.<android.view.View: int mPrivateFlags> = $i20;

        virtualinvoke r0.<android.view.View: void dispatchGetDisplayList()>();

        return;

     label03:
        r0.<android.view.View: boolean mRecreateDisplayList> = 1;

        $i6 = r0.<android.view.View: int mRight>;

        $i5 = r0.<android.view.View: int mLeft>;

        i0 = $i6 - $i5;

        $i8 = r0.<android.view.View: int mBottom>;

        $i7 = r0.<android.view.View: int mTop>;

        i1 = $i8 - $i7;

        i2 = virtualinvoke r0.<android.view.View: int getLayerType()>();

        r2 = virtualinvoke r1.<android.view.RenderNode: android.view.HardwareCanvas start(int,int)>(i0, i1);

        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z2 = $r6.<android.view.View$AttachInfo: boolean mHighContrastText>;

        virtualinvoke r2.<android.view.HardwareCanvas: void setHighContrastText(boolean)>($z2);

     label04:
        r3 = virtualinvoke r0.<android.view.View: android.view.HardwareLayer getHardwareLayer()>();

        if r3 == null goto label05;

        $z5 = virtualinvoke r3.<android.view.HardwareLayer: boolean isValid()>();

        if $z5 == 0 goto label05;

        $r11 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        virtualinvoke r2.<android.view.HardwareCanvas: void drawHardwareLayer(android.view.HardwareLayer,float,float,android.graphics.Paint)>(r3, 0.0F, 0.0F, $r11);

        goto label10;

     label05:
        if i2 != 1 goto label07;

        virtualinvoke r0.<android.view.View: void buildDrawingCache(boolean)>(1);

        r4 = virtualinvoke r0.<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>(1);

        if r4 == null goto label06;

        $r12 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        virtualinvoke r2.<android.view.HardwareCanvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r4, 0.0F, 0.0F, $r12);

     label06:
        goto label10;

     label07:
        virtualinvoke r0.<android.view.View: void computeScroll()>();

        $i10 = r0.<android.view.View: int mScrollX>;

        $i9 = neg $i10;

        $f0 = (float) $i9;

        $i12 = r0.<android.view.View: int mScrollY>;

        $i11 = neg $i12;

        $f1 = (float) $i11;

        virtualinvoke r2.<android.view.HardwareCanvas: void translate(float,float)>($f0, $f1);

        $i14 = r0.<android.view.View: int mPrivateFlags>;

        $i13 = $i14 | 32800;

        r0.<android.view.View: int mPrivateFlags> = $i13;

        $i16 = r0.<android.view.View: int mPrivateFlags>;

        $i15 = $i16 & -6291457;

        r0.<android.view.View: int mPrivateFlags> = $i15;

        $i17 = r0.<android.view.View: int mPrivateFlags>;

        $i18 = $i17 & 128;

        if $i18 != 128 goto label08;

        virtualinvoke r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>(r2);

        $r7 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r7 == null goto label09;

        $r8 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $z3 = virtualinvoke $r8.<android.view.ViewOverlay: boolean isEmpty()>();

        if $z3 != 0 goto label09;

        $r10 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r9 = virtualinvoke $r10.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r9.<android.view.ViewGroup: void draw(android.graphics.Canvas)>(r2);

        goto label09;

     label08:
        virtualinvoke r0.<android.view.View: void draw(android.graphics.Canvas)>(r2);

     label09:
        specialinvoke r0.<android.view.View: void drawAccessibilityFocus(android.graphics.Canvas)>(r2);

     label10:
        virtualinvoke r1.<android.view.RenderNode: void end(android.view.HardwareCanvas)>(r2);

        virtualinvoke r0.<android.view.View: void setDisplayListProperties(android.view.RenderNode)>(r1);

        goto label13;

     label11:
        $r13 := @caughtexception;

        r5 = $r13;

     label12:
        virtualinvoke r1.<android.view.RenderNode: void end(android.view.HardwareCanvas)>(r2);

        virtualinvoke r0.<android.view.View: void setDisplayListProperties(android.view.RenderNode)>(r1);

        throw r5;

     label13:
        goto label15;

     label14:
        $i24 = r0.<android.view.View: int mPrivateFlags>;

        $i23 = $i24 | 32800;

        r0.<android.view.View: int mPrivateFlags> = $i23;

        $i26 = r0.<android.view.View: int mPrivateFlags>;

        $i25 = $i26 & -6291457;

        r0.<android.view.View: int mPrivateFlags> = $i25;

     label15:
        return;

        catch java.lang.Throwable from label04 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public android.view.RenderNode getDisplayList()
    {
        android.view.View r0;
        android.view.RenderNode $r1;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void updateDisplayListIfDirty()>();

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        return $r1;
    }

    private void resetDisplayList()
    {
        android.view.View r0;
        android.view.RenderNode $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.view.RenderNode: boolean isValid()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r5.<android.view.RenderNode: void destroyDisplayListData()>();

     label1:
        $r2 = r0.<android.view.View: android.view.RenderNode mBackgroundRenderNode>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.View: android.view.RenderNode mBackgroundRenderNode>;

        $z1 = virtualinvoke $r3.<android.view.RenderNode: boolean isValid()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<android.view.View: android.view.RenderNode mBackgroundRenderNode>;

        virtualinvoke $r4.<android.view.RenderNode: void destroyDisplayListData()>();

     label2:
        return;
    }

    public android.graphics.Bitmap getDrawingCache()
    {
        android.view.View r0;
        android.graphics.Bitmap $r1;

        r0 := @this: android.view.View;

        $r1 = virtualinvoke r0.<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>(0);

        return $r1;
    }

    public android.graphics.Bitmap getDrawingCache(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;
        android.graphics.Bitmap $r1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 131072;

        if $i1 != 131072 goto label1;

        return null;

     label1:
        $i2 = r0.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 32768;

        if $i3 != 32768 goto label2;

        virtualinvoke r0.<android.view.View: void buildDrawingCache(boolean)>(z0);

     label2:
        if z0 == 0 goto label3;

        $r1 = r0.<android.view.View: android.graphics.Bitmap mDrawingCache>;

        goto label4;

     label3:
        $r1 = r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache>;

     label4:
        return $r1;
    }

    public void destroyDrawingCache()
    {
        android.view.View r0;
        android.graphics.Bitmap $r1, $r2, $r3, $r4;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.Bitmap mDrawingCache>;

        if $r1 == null goto label1;

        $r4 = r0.<android.view.View: android.graphics.Bitmap mDrawingCache>;

        virtualinvoke $r4.<android.graphics.Bitmap: void recycle()>();

        r0.<android.view.View: android.graphics.Bitmap mDrawingCache> = null;

     label1:
        $r2 = r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache>;

        virtualinvoke $r3.<android.graphics.Bitmap: void recycle()>();

        r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache> = null;

     label2:
        return;
    }

    public void setDrawingCacheBackgroundColor(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mDrawingCacheBackgroundColor>;

        if i0 == $i1 goto label1;

        r0.<android.view.View: int mDrawingCacheBackgroundColor> = i0;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -32769;

        r0.<android.view.View: int mPrivateFlags> = $i3;

     label1:
        return;
    }

    public int getDrawingCacheBackgroundColor()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mDrawingCacheBackgroundColor>;

        return $i0;
    }

    public void buildDrawingCache()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void buildDrawingCache(boolean)>(0);

        return;
    }

    public void buildDrawingCache(boolean)
    {
        android.view.View r0;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        int i0, i1, i2, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i32, $i33, $i34, i35;
        android.view.View$AttachInfo r1, $r19, $r25;
        long l3, l4;
        android.graphics.Bitmap r2, $r26, $r28, $r30;
        android.graphics.Bitmap$Config r3, $r27;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;
        android.view.ViewConfiguration $r5;
        android.content.Context $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12;
        byte $b14, $b31;
        android.content.res.Resources $r13, $r15;
        java.lang.String $r14;
        android.util.DisplayMetrics $r16, $r17;
        android.graphics.Canvas $r18, $r22, r31;
        android.view.ViewOverlay $r20, $r21, $r23;
        android.view.ViewGroup $r24;
        java.lang.OutOfMemoryError $r29;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $i6 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i6 & 32768;

        if $i5 == 0 goto label02;

        if z0 == 0 goto label01;

        $r30 = r0.<android.view.View: android.graphics.Bitmap mDrawingCache>;

        if $r30 != null goto label44;

        goto label02;

     label01:
        $r28 = r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache>;

        if $r28 != null goto label44;

     label02:
        r0.<android.view.View: boolean mCachingFailed> = 0;

        $i7 = r0.<android.view.View: int mRight>;

        $i8 = r0.<android.view.View: int mLeft>;

        i0 = $i7 - $i8;

        $i9 = r0.<android.view.View: int mBottom>;

        $i10 = r0.<android.view.View: int mTop>;

        i1 = $i9 - $i10;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label03;

        $z13 = r1.<android.view.View$AttachInfo: boolean mScalingRequired>;

        if $z13 == 0 goto label03;

        $z12 = 1;

        goto label04;

     label03:
        $z12 = 0;

     label04:
        z1 = $z12;

        if z0 == 0 goto label05;

        if z1 == 0 goto label05;

        $f4 = (float) i0;

        $f7 = r1.<android.view.View$AttachInfo: float mApplicationScale>;

        $f3 = $f4 * $f7;

        $f6 = $f3 + 0.5F;

        i0 = (int) $f6;

        $f9 = (float) i1;

        $f5 = r1.<android.view.View$AttachInfo: float mApplicationScale>;

        $f8 = $f9 * $f5;

        $f10 = $f8 + 0.5F;

        i1 = (int) $f10;

     label05:
        i2 = r0.<android.view.View: int mDrawingCacheBackgroundColor>;

        if i2 != 0 goto label06;

        $z9 = virtualinvoke r0.<android.view.View: boolean isOpaque()>();

        if $z9 == 0 goto label07;

     label06:
        $z11 = 1;

        goto label08;

     label07:
        $z11 = 0;

     label08:
        z2 = $z11;

        if r1 == null goto label09;

        $z8 = r1.<android.view.View$AttachInfo: boolean mUse32BitDrawingCache>;

        if $z8 == 0 goto label09;

        $z10 = 1;

        goto label10;

     label09:
        $z10 = 0;

     label10:
        z3 = $z10;

        $i12 = i0 * i1;

        if z2 == 0 goto label11;

        if z3 != 0 goto label11;

        $b31 = 2;

        goto label12;

     label11:
        $b31 = 4;

     label12:
        $i11 = $i12 * $b31;

        l3 = (long) $i11;

        $r6 = r0.<android.view.View: android.content.Context mContext>;

        $r5 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r6);

        $i13 = virtualinvoke $r5.<android.view.ViewConfiguration: int getScaledMaximumDrawingCacheSize()>();

        l4 = (long) $i13;

        if i0 <= 0 goto label13;

        if i1 <= 0 goto label13;

        $b14 = l3 cmp l4;

        if $b14 <= 0 goto label15;

     label13:
        if i0 <= 0 goto label14;

        if i1 <= 0 goto label14;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View too large to fit into drawing cache, needs ");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, only ");

        $r9 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" available");

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r14);

     label14:
        virtualinvoke r0.<android.view.View: void destroyDrawingCache()>();

        r0.<android.view.View: boolean mCachingFailed> = 1;

        return;

     label15:
        z4 = 1;

        if z0 == 0 goto label16;

        $r26 = r0.<android.view.View: android.graphics.Bitmap mDrawingCache>;

        goto label17;

     label16:
        $r26 = r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache>;

     label17:
        r2 = $r26;

        if r2 == null goto label18;

        $i34 = virtualinvoke r2.<android.graphics.Bitmap: int getWidth()>();

        if $i34 != i0 goto label18;

        $i30 = virtualinvoke r2.<android.graphics.Bitmap: int getHeight()>();

        if $i30 == i1 goto label34;

     label18:
        if z2 != 0 goto label20;

        $i32 = r0.<android.view.View: int mViewFlags>;

        $i33 = $i32 & 1572864;

        lookupswitch($i33)
        {
            case 0: goto label19;
            case 524288: goto label19;
            case 1048576: goto label19;
            default: goto label19;
        };

     label19:
        r3 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        goto label23;

     label20:
        if z3 == 0 goto label21;

        $r27 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        goto label22;

     label21:
        $r27 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

     label22:
        r3 = $r27;

     label23:
        if r2 == null goto label24;

        virtualinvoke r2.<android.graphics.Bitmap: void recycle()>();

     label24:
        $r13 = r0.<android.view.View: android.content.res.Resources mResources>;

        $r17 = virtualinvoke $r13.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)>($r17, i0, i1, r3);

        $r15 = virtualinvoke r0.<android.view.View: android.content.res.Resources getResources()>();

        $r16 = virtualinvoke $r15.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i17 = $r16.<android.util.DisplayMetrics: int densityDpi>;

        virtualinvoke r2.<android.graphics.Bitmap: void setDensity(int)>($i17);

        if z0 == 0 goto label25;

        r0.<android.view.View: android.graphics.Bitmap mDrawingCache> = r2;

        goto label26;

     label25:
        r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache> = r2;

     label26:
        if z2 == 0 goto label27;

        if z3 == 0 goto label27;

        virtualinvoke r2.<android.graphics.Bitmap: void setHasAlpha(boolean)>(0);

     label27:
        goto label31;

     label28:
        $r29 := @caughtexception;

        if z0 == 0 goto label29;

        r0.<android.view.View: android.graphics.Bitmap mDrawingCache> = null;

        goto label30;

     label29:
        r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache> = null;

     label30:
        r0.<android.view.View: boolean mCachingFailed> = 1;

        return;

     label31:
        if i2 == 0 goto label32;

        $z6 = 1;

        goto label33;

     label32:
        $z6 = 0;

     label33:
        z4 = $z6;

     label34:
        if r1 == null goto label36;

        r31 = r1.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas>;

        if r31 != null goto label35;

        $r22 = new android.graphics.Canvas;

        specialinvoke $r22.<android.graphics.Canvas: void <init>()>();

        r31 = $r22;

     label35:
        virtualinvoke r31.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(r2);

        r1.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas> = null;

        goto label37;

     label36:
        $r18 = new android.graphics.Canvas;

        specialinvoke $r18.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r2);

        r31 = $r18;

     label37:
        if z4 == 0 goto label38;

        virtualinvoke r2.<android.graphics.Bitmap: void eraseColor(int)>(i2);

     label38:
        virtualinvoke r0.<android.view.View: void computeScroll()>();

        i35 = virtualinvoke r31.<android.graphics.Canvas: int save()>();

        if z0 == 0 goto label39;

        if z1 == 0 goto label39;

        f0 = r1.<android.view.View$AttachInfo: float mApplicationScale>;

        virtualinvoke r31.<android.graphics.Canvas: void scale(float,float)>(f0, f0);

     label39:
        $i16 = r0.<android.view.View: int mScrollX>;

        $i20 = neg $i16;

        $f2 = (float) $i20;

        $i19 = r0.<android.view.View: int mScrollY>;

        $i18 = neg $i19;

        $f1 = (float) $i18;

        virtualinvoke r31.<android.graphics.Canvas: void translate(float,float)>($f2, $f1);

        $i22 = r0.<android.view.View: int mPrivateFlags>;

        $i21 = $i22 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i21;

        $r19 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r19 == null goto label40;

        $r25 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z5 = $r25.<android.view.View$AttachInfo: boolean mHardwareAccelerated>;

        if $z5 == 0 goto label40;

        $i29 = r0.<android.view.View: int mLayerType>;

        if $i29 == 0 goto label41;

     label40:
        $i26 = r0.<android.view.View: int mPrivateFlags>;

        $i25 = $i26 | 32768;

        r0.<android.view.View: int mPrivateFlags> = $i25;

     label41:
        $i24 = r0.<android.view.View: int mPrivateFlags>;

        $i23 = $i24 & 128;

        if $i23 != 128 goto label42;

        $i28 = r0.<android.view.View: int mPrivateFlags>;

        $i27 = $i28 & -6291457;

        r0.<android.view.View: int mPrivateFlags> = $i27;

        virtualinvoke r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>(r31);

        $r21 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r21 == null goto label43;

        $r20 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $z7 = virtualinvoke $r20.<android.view.ViewOverlay: boolean isEmpty()>();

        if $z7 != 0 goto label43;

        $r23 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r24 = virtualinvoke $r23.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r24.<android.view.ViewGroup: void draw(android.graphics.Canvas)>(r31);

        goto label43;

     label42:
        virtualinvoke r0.<android.view.View: void draw(android.graphics.Canvas)>(r31);

     label43:
        specialinvoke r0.<android.view.View: void drawAccessibilityFocus(android.graphics.Canvas)>(r31);

        virtualinvoke r31.<android.graphics.Canvas: void restoreToCount(int)>(i35);

        virtualinvoke r31.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(null);

        if r1 == null goto label44;

        r1.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas> = r31;

     label44:
        return;

        catch java.lang.OutOfMemoryError from label24 to label27 with label28;
    }

    android.graphics.Bitmap createSnapshot(android.graphics.Bitmap$Config, int, boolean)
    {
        android.view.View r0;
        android.graphics.Bitmap$Config r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22;
        boolean z0, $z1;
        android.view.View$AttachInfo r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        android.graphics.Bitmap r3;
        android.content.res.Resources r4, $r6;
        android.graphics.Canvas r5, $r8, $r14;
        android.util.DisplayMetrics $r7, $r12;
        android.view.ViewOverlay $r9, $r10, $r11;
        android.view.ViewGroup $r13;
        java.lang.OutOfMemoryError $r15;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Bitmap$Config;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i6 = r0.<android.view.View: int mRight>;

        $i5 = r0.<android.view.View: int mLeft>;

        i1 = $i6 - $i5;

        $i8 = r0.<android.view.View: int mBottom>;

        $i7 = r0.<android.view.View: int mTop>;

        i2 = $i8 - $i7;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label01;

        $f9 = r2.<android.view.View$AttachInfo: float mApplicationScale>;

        goto label02;

     label01:
        $f9 = 1.0F;

     label02:
        f0 = $f9;

        $f1 = (float) i1;

        $f3 = $f1 * f0;

        $f2 = $f3 + 0.5F;

        i21 = (int) $f2;

        $f5 = (float) i2;

        $f4 = $f5 * f0;

        $f6 = $f4 + 0.5F;

        i22 = (int) $f6;

        $r6 = r0.<android.view.View: android.content.res.Resources mResources>;

        $r7 = virtualinvoke $r6.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        if i21 <= 0 goto label03;

        $i19 = i21;

        goto label04;

     label03:
        $i19 = 1;

     label04:
        if i22 <= 0 goto label05;

        $i20 = i22;

        goto label06;

     label05:
        $i20 = 1;

     label06:
        r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)>($r7, $i19, $i20, r1);

        if r3 != null goto label07;

        $r15 = new java.lang.OutOfMemoryError;

        specialinvoke $r15.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r15;

     label07:
        r4 = virtualinvoke r0.<android.view.View: android.content.res.Resources getResources()>();

        if r4 == null goto label08;

        $r12 = virtualinvoke r4.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i18 = $r12.<android.util.DisplayMetrics: int densityDpi>;

        virtualinvoke r3.<android.graphics.Bitmap: void setDensity(int)>($i18);

     label08:
        if r2 == null goto label10;

        r5 = r2.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas>;

        if r5 != null goto label09;

        $r14 = new android.graphics.Canvas;

        specialinvoke $r14.<android.graphics.Canvas: void <init>()>();

        r5 = $r14;

     label09:
        virtualinvoke r5.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(r3);

        r2.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas> = null;

        goto label11;

     label10:
        $r8 = new android.graphics.Canvas;

        specialinvoke $r8.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r3);

        r5 = $r8;

     label11:
        $i9 = i0 & -16777216;

        if $i9 == 0 goto label12;

        virtualinvoke r3.<android.graphics.Bitmap: void eraseColor(int)>(i0);

     label12:
        virtualinvoke r0.<android.view.View: void computeScroll()>();

        i3 = virtualinvoke r5.<android.graphics.Canvas: int save()>();

        virtualinvoke r5.<android.graphics.Canvas: void scale(float,float)>(f0, f0);

        $i11 = r0.<android.view.View: int mScrollX>;

        $i10 = neg $i11;

        $f8 = (float) $i10;

        $i12 = r0.<android.view.View: int mScrollY>;

        $i13 = neg $i12;

        $f7 = (float) $i13;

        virtualinvoke r5.<android.graphics.Canvas: void translate(float,float)>($f8, $f7);

        i4 = r0.<android.view.View: int mPrivateFlags>;

        $i16 = r0.<android.view.View: int mPrivateFlags>;

        $i17 = $i16 & -6291457;

        r0.<android.view.View: int mPrivateFlags> = $i17;

        $i14 = r0.<android.view.View: int mPrivateFlags>;

        $i15 = $i14 & 128;

        if $i15 != 128 goto label13;

        virtualinvoke r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>(r5);

        $r10 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r10 == null goto label14;

        $r11 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $z1 = virtualinvoke $r11.<android.view.ViewOverlay: boolean isEmpty()>();

        if $z1 != 0 goto label14;

        $r9 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r13 = virtualinvoke $r9.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r13.<android.view.ViewGroup: void draw(android.graphics.Canvas)>(r5);

        goto label14;

     label13:
        virtualinvoke r0.<android.view.View: void draw(android.graphics.Canvas)>(r5);

     label14:
        specialinvoke r0.<android.view.View: void drawAccessibilityFocus(android.graphics.Canvas)>(r5);

        r0.<android.view.View: int mPrivateFlags> = i4;

        virtualinvoke r5.<android.graphics.Canvas: void restoreToCount(int)>(i3);

        virtualinvoke r5.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(null);

        if r2 == null goto label15;

        r2.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas> = r5;

     label15:
        return r3;
    }

    public boolean isInEditMode()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    protected boolean isPaddingOffsetRequired()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    protected int getLeftPaddingOffset()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    protected int getRightPaddingOffset()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    protected int getTopPaddingOffset()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    protected int getBottomPaddingOffset()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    protected int getFadeTop(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0, $i1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        i0 = r0.<android.view.View: int mPaddingTop>;

        if z0 == 0 goto label1;

        $i1 = virtualinvoke r0.<android.view.View: int getTopPaddingOffset()>();

        i0 = i0 + $i1;

     label1:
        return i0;
    }

    protected int getFadeHeight(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        i0 = r0.<android.view.View: int mPaddingTop>;

        if z0 == 0 goto label1;

        $i7 = virtualinvoke r0.<android.view.View: int getTopPaddingOffset()>();

        i0 = i0 + $i7;

     label1:
        $i2 = r0.<android.view.View: int mBottom>;

        $i1 = r0.<android.view.View: int mTop>;

        $i4 = $i2 - $i1;

        $i3 = r0.<android.view.View: int mPaddingBottom>;

        $i5 = $i4 - $i3;

        $i6 = $i5 - i0;

        return $i6;
    }

    public boolean isHardwareAccelerated()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r2.<android.view.View$AttachInfo: boolean mHardwareAccelerated>;

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setClipBounds(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        android.view.RenderNode $r4;
        boolean $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        if r1 == null goto label3;

        $r5 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        $z1 = virtualinvoke r1.<android.graphics.Rect: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label1;

        return;

     label1:
        $r6 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        if $r6 != null goto label2;

        virtualinvoke r0.<android.view.View: void invalidate()>();

        $r12 = new android.graphics.Rect;

        specialinvoke $r12.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r1);

        r0.<android.view.View: android.graphics.Rect mClipBounds> = $r12;

        goto label4;

     label2:
        $r7 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        $i1 = $r7.<android.graphics.Rect: int left>;

        $i0 = r1.<android.graphics.Rect: int left>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $r8 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        $i4 = $r8.<android.graphics.Rect: int top>;

        $i3 = r1.<android.graphics.Rect: int top>;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        $r9 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        $i6 = $r9.<android.graphics.Rect: int right>;

        $i7 = r1.<android.graphics.Rect: int right>;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i6, $i7);

        $r10 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        $i9 = $r10.<android.graphics.Rect: int bottom>;

        $i10 = r1.<android.graphics.Rect: int bottom>;

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>($i9, $i10);

        virtualinvoke r0.<android.view.View: void invalidate(int,int,int,int)>($i2, $i5, $i8, $i11);

        $r11 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        virtualinvoke $r11.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        goto label4;

     label3:
        $r2 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        if $r2 == null goto label4;

        virtualinvoke r0.<android.view.View: void invalidate()>();

        r0.<android.view.View: android.graphics.Rect mClipBounds> = null;

     label4:
        $r4 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $r3 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        virtualinvoke $r4.<android.view.RenderNode: boolean setClipBounds(android.graphics.Rect)>($r3);

        return;
    }

    public android.graphics.Rect getClipBounds()
    {
        android.view.View r0;
        android.graphics.Rect $r1, $r2, $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        if $r1 == null goto label1;

        $r2 = new android.graphics.Rect;

        $r3 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        specialinvoke $r2.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r3);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    private boolean drawAnimation(android.view.ViewGroup, long, android.view.animation.Animation, boolean)
    {
        android.view.View r0;
        android.view.ViewGroup r1;
        long l0;
        android.view.animation.Animation r2;
        boolean z0, z1, z2, $z3;
        android.view.animation.Transformation r3, r4, $r8, $r10;
        int i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44;
        android.graphics.RectF r5, $r6, $r7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        byte $b30;
        android.view.View$AttachInfo $r9, $r11, $r12;
        android.os.Handler $r13;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewGroup;

        l0 := @parameter1: long;

        r2 := @parameter2: android.view.animation.Animation;

        z0 := @parameter3: boolean;

        i1 = r1.<android.view.ViewGroup: int mGroupFlags>;

        z1 = virtualinvoke r2.<android.view.animation.Animation: boolean isInitialized()>();

        if z1 != 0 goto label2;

        $i31 = r0.<android.view.View: int mRight>;

        $i32 = r0.<android.view.View: int mLeft>;

        $i34 = $i31 - $i32;

        $i35 = r0.<android.view.View: int mBottom>;

        $i36 = r0.<android.view.View: int mTop>;

        $i33 = $i35 - $i36;

        $i41 = virtualinvoke r1.<android.view.ViewGroup: int getWidth()>();

        $i42 = virtualinvoke r1.<android.view.ViewGroup: int getHeight()>();

        virtualinvoke r2.<android.view.animation.Animation: void initialize(int,int,int,int)>($i34, $i33, $i41, $i42);

        $i44 = r0.<android.view.View: int mRight>;

        $i43 = r0.<android.view.View: int mLeft>;

        $i40 = $i44 - $i43;

        $i38 = r0.<android.view.View: int mBottom>;

        $i37 = r0.<android.view.View: int mTop>;

        $i39 = $i38 - $i37;

        virtualinvoke r2.<android.view.animation.Animation: void initializeInvalidateRegion(int,int,int,int)>(0, 0, $i40, $i39);

        $r11 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r11 == null goto label1;

        $r12 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r13 = $r12.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke r2.<android.view.animation.Animation: void setListenerHandler(android.os.Handler)>($r13);

     label1:
        virtualinvoke r0.<android.view.View: void onAnimationStart()>();

     label2:
        r4 = virtualinvoke r1.<android.view.ViewGroup: android.view.animation.Transformation getChildTransformation()>();

        z2 = virtualinvoke r2.<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)>(l0, r4, 1.0F);

        if z0 == 0 goto label4;

        $r9 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $f6 = $r9.<android.view.View$AttachInfo: float mApplicationScale>;

        $b30 = $f6 cmpl 1.0F;

        if $b30 == 0 goto label4;

        $r8 = r1.<android.view.ViewGroup: android.view.animation.Transformation mInvalidationTransformation>;

        if $r8 != null goto label3;

        $r10 = new android.view.animation.Transformation;

        specialinvoke $r10.<android.view.animation.Transformation: void <init>()>();

        r1.<android.view.ViewGroup: android.view.animation.Transformation mInvalidationTransformation> = $r10;

     label3:
        r3 = r1.<android.view.ViewGroup: android.view.animation.Transformation mInvalidationTransformation>;

        virtualinvoke r2.<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)>(l0, r3, 1.0F);

        goto label5;

     label4:
        r3 = r4;

     label5:
        if z2 == 0 goto label9;

        $z3 = virtualinvoke r2.<android.view.animation.Animation: boolean willChangeBounds()>();

        if $z3 != 0 goto label7;

        $i19 = i1 & 144;

        if $i19 != 128 goto label6;

        $i27 = r1.<android.view.ViewGroup: int mGroupFlags>;

        $i26 = $i27 | 4;

        r1.<android.view.ViewGroup: int mGroupFlags> = $i26;

        goto label9;

     label6:
        $i20 = i1 & 4;

        if $i20 != 0 goto label9;

        $i24 = r1.<android.view.ViewGroup: int mPrivateFlags>;

        $i25 = $i24 | 64;

        r1.<android.view.ViewGroup: int mPrivateFlags> = $i25;

        $i28 = r0.<android.view.View: int mLeft>;

        $i29 = r0.<android.view.View: int mTop>;

        $i23 = r0.<android.view.View: int mRight>;

        $i22 = r0.<android.view.View: int mBottom>;

        virtualinvoke r1.<android.view.ViewGroup: void invalidate(int,int,int,int)>($i28, $i29, $i23, $i22);

        goto label9;

     label7:
        $r6 = r1.<android.view.ViewGroup: android.graphics.RectF mInvalidateRegion>;

        if $r6 != null goto label8;

        $r7 = new android.graphics.RectF;

        specialinvoke $r7.<android.graphics.RectF: void <init>()>();

        r1.<android.view.ViewGroup: android.graphics.RectF mInvalidateRegion> = $r7;

     label8:
        r5 = r1.<android.view.ViewGroup: android.graphics.RectF mInvalidateRegion>;

        $i6 = r0.<android.view.View: int mRight>;

        $i4 = r0.<android.view.View: int mLeft>;

        $i10 = $i6 - $i4;

        $i8 = r0.<android.view.View: int mBottom>;

        $i5 = r0.<android.view.View: int mTop>;

        $i7 = $i8 - $i5;

        virtualinvoke r2.<android.view.animation.Animation: void getInvalidateRegion(int,int,int,int,android.graphics.RectF,android.view.animation.Transformation)>(0, 0, $i10, $i7, r5, r3);

        $i9 = r1.<android.view.ViewGroup: int mPrivateFlags>;

        $i11 = $i9 | 64;

        r1.<android.view.ViewGroup: int mPrivateFlags> = $i11;

        $i12 = r0.<android.view.View: int mLeft>;

        $f0 = r5.<android.graphics.RectF: float left>;

        $i13 = (int) $f0;

        i2 = $i12 + $i13;

        $i16 = r0.<android.view.View: int mTop>;

        $f1 = r5.<android.graphics.RectF: float top>;

        $i14 = (int) $f1;

        i3 = $i16 + $i14;

        $f3 = virtualinvoke r5.<android.graphics.RectF: float width()>();

        $f2 = $f3 + 0.5F;

        $i15 = (int) $f2;

        $i18 = i2 + $i15;

        $f5 = virtualinvoke r5.<android.graphics.RectF: float height()>();

        $f4 = $f5 + 0.5F;

        $i17 = (int) $f4;

        $i21 = i3 + $i17;

        virtualinvoke r1.<android.view.ViewGroup: void invalidate(int,int,int,int)>(i2, i3, $i18, $i21);

     label9:
        return z2;
    }

    void setDisplayListProperties(android.view.RenderNode)
    {
        android.view.View r0;
        android.view.RenderNode r1;
        float f0, $f1, $f2, f3;
        android.view.ViewGroup r2, $r7, $r12;
        android.view.animation.Transformation r3;
        int i0, $i1, $i2, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        boolean $z0, $z2, $z3, $z6, $z7, $z10;
        android.view.ViewParent $r4, $r5, $r8, $r9, $r10;
        android.view.View$TransformationInfo $r6;
        byte $b3, $b4;
        android.graphics.Matrix $r11;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.RenderNode;

        if r1 == null goto label9;

        $i1 = r0.<android.view.View: int mPrivateFlags3>;

        $i2 = $i1 & 256;

        if $i2 == 0 goto label1;

        specialinvoke r0.<android.view.View: void rebuildOutline()>();

        $i12 = r0.<android.view.View: int mPrivateFlags3>;

        $i11 = $i12 & -257;

        r0.<android.view.View: int mPrivateFlags3> = $i11;

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean hasOverlappingRendering()>();

        virtualinvoke r1.<android.view.RenderNode: boolean setHasOverlappingRendering(boolean)>($z0);

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z2 = $r4 instanceof android.view.ViewGroup;

        if $z2 == 0 goto label4;

        $r10 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r12 = (android.view.ViewGroup) $r10;

        $i10 = $r12.<android.view.ViewGroup: int mGroupFlags>;

        $i9 = $i10 & 1;

        if $i9 == 0 goto label2;

        $z10 = 1;

        goto label3;

     label2:
        $z10 = 0;

     label3:
        virtualinvoke r1.<android.view.RenderNode: boolean setClipToBounds(boolean)>($z10);

     label4:
        f0 = 1.0F;

        $r5 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z3 = $r5 instanceof android.view.ViewGroup;

        if $z3 == 0 goto label6;

        $r8 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r7 = (android.view.ViewGroup) $r8;

        $i6 = $r7.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i6 & 2048;

        if $i5 == 0 goto label6;

        $r9 = r0.<android.view.View: android.view.ViewParent mParent>;

        r2 = (android.view.ViewGroup) $r9;

        r3 = virtualinvoke r2.<android.view.ViewGroup: android.view.animation.Transformation getChildTransformation()>();

        $z7 = virtualinvoke r2.<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>(r0, r3);

        if $z7 == 0 goto label6;

        i0 = virtualinvoke r3.<android.view.animation.Transformation: int getTransformationType()>();

        if i0 == 0 goto label6;

        $i8 = i0 & 1;

        if $i8 == 0 goto label5;

        f0 = virtualinvoke r3.<android.view.animation.Transformation: float getAlpha()>();

     label5:
        $i7 = i0 & 2;

        if $i7 == 0 goto label6;

        $r11 = virtualinvoke r3.<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>();

        virtualinvoke r1.<android.view.RenderNode: boolean setStaticMatrix(android.graphics.Matrix)>($r11);

     label6:
        $r6 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        if $r6 == null goto label8;

        $f1 = specialinvoke r0.<android.view.View: float getFinalAlpha()>();

        f3 = f0 * $f1;

        $b4 = f3 cmpg 1.0F;

        if $b4 >= 0 goto label7;

        $f2 = 255.0F * f3;

        i13 = (int) $f2;

        $z6 = virtualinvoke r0.<android.view.View: boolean onSetAlpha(int)>(i13);

        if $z6 == 0 goto label7;

        f3 = 1.0F;

     label7:
        virtualinvoke r1.<android.view.RenderNode: boolean setAlpha(float)>(f3);

        goto label9;

     label8:
        $b3 = f0 cmpg 1.0F;

        if $b3 >= 0 goto label9;

        virtualinvoke r1.<android.view.RenderNode: boolean setAlpha(float)>(f0);

     label9:
        return;
    }

    boolean draw(android.graphics.Canvas, android.view.ViewGroup, long)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        android.view.ViewGroup r2, $r11;
        long l0;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, $z10, $z11, $z13, $z14, $z16, $z20, $z23, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z34, $z35, z36, z37, z38, z39;
        int i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, i127, i128, i129, i130, i131, i132, i133;
        android.view.animation.Transformation r3, r5, $r28, $r30;
        android.view.animation.Animation r4;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, f37;
        android.view.View$AttachInfo $r6, $r7, $r25, $r29, $r32;
        byte $b18, $b19, $b89, $b98;
        android.graphics.Paint $r8, $r9, $r15, $r16, $r17, $r18, $r20, r36;
        android.view.HardwareCanvas $r10, $r19;
        android.view.ViewOverlay $r12, $r13, $r14;
        android.graphics.Rect $r21, $r22;
        android.graphics.Matrix $r23, $r24, $r26;
        android.graphics.Canvas$EdgeType $r27;
        android.view.RenderNode $r31, r33;
        android.graphics.Bitmap r34;
        android.view.HardwareLayer r35;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.view.ViewGroup;

        l0 := @parameter2: long;

        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r6 == null goto label01;

        $r32 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z35 = $r32.<android.view.View$AttachInfo: boolean mHardwareAccelerated>;

        if $z35 == 0 goto label01;

        $z34 = 1;

        goto label02;

     label01:
        $z34 = 0;

     label02:
        z0 = $z34;

        z1 = 0;

        z2 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        i1 = r2.<android.view.ViewGroup: int mGroupFlags>;

        $i10 = i1 & 256;

        if $i10 != 256 goto label03;

        $r28 = virtualinvoke r2.<android.view.ViewGroup: android.view.animation.Transformation getChildTransformation()>();

        virtualinvoke $r28.<android.view.animation.Transformation: void clear()>();

        $i120 = r2.<android.view.ViewGroup: int mGroupFlags>;

        $i121 = $i120 & -257;

        r2.<android.view.ViewGroup: int mGroupFlags> = $i121;

     label03:
        r3 = null;

        z3 = 0;

        z4 = 0;

        i2 = virtualinvoke r0.<android.view.View: int getLayerType()>();

        z6 = virtualinvoke r1.<android.graphics.Canvas: boolean isHardwareAccelerated()>();

        $i11 = i1 & 32768;

        if $i11 != 0 goto label04;

        $i122 = i1 & 16384;

        if $i122 == 0 goto label05;

     label04:
        z5 = 1;

        $r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r7 == null goto label09;

        $r29 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        z4 = $r29.<android.view.View$AttachInfo: boolean mScalingRequired>;

        goto label09;

     label05:
        if i2 != 0 goto label06;

        if z6 == 0 goto label07;

     label06:
        $z32 = 1;

        goto label08;

     label07:
        $z32 = 0;

     label08:
        z5 = $z32;

     label09:
        r4 = virtualinvoke r0.<android.view.View: android.view.animation.Animation getAnimation()>();

        if r4 == null goto label11;

        z1 = specialinvoke r0.<android.view.View: boolean drawAnimation(android.view.ViewGroup,long,android.view.animation.Animation,boolean)>(r2, l0, r4, z4);

        z3 = virtualinvoke r4.<android.view.animation.Animation: boolean willChangeTransformationMatrix()>();

        if z3 == 0 goto label10;

        $i123 = r0.<android.view.View: int mPrivateFlags3>;

        $i124 = $i123 | 1;

        r0.<android.view.View: int mPrivateFlags3> = $i124;

     label10:
        r3 = virtualinvoke r2.<android.view.ViewGroup: android.view.animation.Transformation getChildTransformation()>();

        goto label17;

     label11:
        $i14 = r0.<android.view.View: int mPrivateFlags3>;

        $i12 = $i14 & 1;

        if $i12 == 0 goto label12;

        $r31 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        virtualinvoke $r31.<android.view.RenderNode: boolean setAnimationMatrix(android.graphics.Matrix)>(null);

        $i126 = r0.<android.view.View: int mPrivateFlags3>;

        $i125 = $i126 & -2;

        r0.<android.view.View: int mPrivateFlags3> = $i125;

     label12:
        if z0 != 0 goto label17;

        $i115 = i1 & 2048;

        if $i115 == 0 goto label17;

        r5 = virtualinvoke r2.<android.view.ViewGroup: android.view.animation.Transformation getChildTransformation()>();

        z7 = virtualinvoke r2.<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>(r0, r5);

        if z7 == 0 goto label17;

        i4 = virtualinvoke r5.<android.view.animation.Transformation: int getTransformationType()>();

        if i4 == 0 goto label13;

        $r30 = r5;

        goto label14;

     label13:
        $r30 = null;

     label14:
        r3 = $r30;

        $i114 = i4 & 2;

        if $i114 == 0 goto label15;

        $z29 = 1;

        goto label16;

     label15:
        $z29 = 0;

     label16:
        z3 = $z29;

     label17:
        if z2 != 0 goto label18;

        $z30 = 1;

        goto label19;

     label18:
        $z30 = 0;

     label19:
        z36 = z3 | $z30;

        $i13 = r0.<android.view.View: int mPrivateFlags>;

        $i16 = $i13 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i16;

        if z36 != 0 goto label20;

        $i109 = i1 & 2049;

        if $i109 != 1 goto label20;

        $i110 = r0.<android.view.View: int mLeft>;

        $f33 = (float) $i110;

        $i105 = r0.<android.view.View: int mTop>;

        $f34 = (float) $i105;

        $i106 = r0.<android.view.View: int mRight>;

        $f35 = (float) $i106;

        $i107 = r0.<android.view.View: int mBottom>;

        $f36 = (float) $i107;

        $r27 = <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType BW>;

        $z31 = virtualinvoke r1.<android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)>($f33, $f34, $f35, $f36, $r27);

        if $z31 == 0 goto label20;

        $i119 = r0.<android.view.View: int mPrivateFlags>;

        $i118 = $i119 & 64;

        if $i118 != 0 goto label20;

        $i117 = r0.<android.view.View: int mPrivateFlags2>;

        $i116 = $i117 | 268435456;

        r0.<android.view.View: int mPrivateFlags2> = $i116;

        return z1;

     label20:
        $i17 = r0.<android.view.View: int mPrivateFlags2>;

        $i15 = $i17 & -268435457;

        r0.<android.view.View: int mPrivateFlags2> = $i15;

        if z6 == 0 goto label23;

        $i111 = r0.<android.view.View: int mPrivateFlags>;

        $i112 = $i111 & -2147483648;

        if $i112 != -2147483648 goto label21;

        $z28 = 1;

        goto label22;

     label21:
        $z28 = 0;

     label22:
        r0.<android.view.View: boolean mRecreateDisplayList> = $z28;

        $i113 = r0.<android.view.View: int mPrivateFlags>;

        $i108 = $i113 & 2147483647;

        r0.<android.view.View: int mPrivateFlags> = $i108;

     label23:
        r33 = null;

        r34 = null;

        z37 = 0;

        if z5 == 0 goto label30;

        if z6 != 0 goto label25;

        if i2 == 0 goto label24;

        i2 = 1;

        virtualinvoke r0.<android.view.View: void buildDrawingCache(boolean)>(1);

     label24:
        r34 = virtualinvoke r0.<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>(1);

        goto label30;

     label25:
        tableswitch(i2)
        {
            case 0: goto label29;
            case 1: goto label26;
            case 2: goto label28;
            default: goto label30;
        };

     label26:
        if z0 == 0 goto label27;

        z37 = virtualinvoke r0.<android.view.View: boolean canHaveDisplayList()>();

        goto label30;

     label27:
        virtualinvoke r0.<android.view.View: void buildDrawingCache(boolean)>(1);

        r34 = virtualinvoke r0.<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>(1);

        goto label30;

     label28:
        if z0 == 0 goto label30;

        z37 = virtualinvoke r0.<android.view.View: boolean canHaveDisplayList()>();

        goto label30;

     label29:
        z37 = virtualinvoke r0.<android.view.View: boolean canHaveDisplayList()>();

     label30:
        z38 = z0 & z37;

        if z38 == 0 goto label31;

        r33 = virtualinvoke r0.<android.view.View: android.view.RenderNode getDisplayList()>();

        $z27 = virtualinvoke r33.<android.view.RenderNode: boolean isValid()>();

        if $z27 != 0 goto label31;

        r33 = null;

        z37 = 0;

        z38 = 0;

     label31:
        i3 = 0;

        i5 = 0;

        if z37 != 0 goto label32;

        virtualinvoke r0.<android.view.View: void computeScroll()>();

        i3 = r0.<android.view.View: int mScrollX>;

        i5 = r0.<android.view.View: int mScrollY>;

     label32:
        if r34 == null goto label33;

        if z37 == 0 goto label34;

     label33:
        $z25 = 1;

        goto label35;

     label34:
        $z25 = 0;

     label35:
        z8 = $z25;

        if r34 != null goto label36;

        if z37 != 0 goto label36;

        if i2 == 2 goto label36;

        $z26 = 1;

        goto label37;

     label36:
        $z26 = 0;

     label37:
        z9 = $z26;

        i6 = -1;

        if z38 == 0 goto label38;

        if r3 == null goto label39;

     label38:
        i6 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

     label39:
        if z9 == 0 goto label40;

        $i102 = r0.<android.view.View: int mLeft>;

        $i101 = $i102 - i3;

        $f28 = (float) $i101;

        $i100 = r0.<android.view.View: int mTop>;

        $i99 = $i100 - i5;

        $f29 = (float) $i99;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f28, $f29);

        goto label43;

     label40:
        if z38 != 0 goto label41;

        $i104 = r0.<android.view.View: int mLeft>;

        $f30 = (float) $i104;

        $i103 = r0.<android.view.View: int mTop>;

        $f31 = (float) $i103;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f30, $f31);

     label41:
        if z4 == 0 goto label43;

        if z38 == 0 goto label42;

        i6 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

     label42:
        $r25 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $f32 = $r25.<android.view.View$AttachInfo: float mApplicationScale>;

        f0 = 1.0F / $f32;

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>(f0, f0);

     label43:
        if z38 == 0 goto label44;

        $f26 = 1.0F;

        goto label45;

     label44:
        $f2 = virtualinvoke r0.<android.view.View: float getAlpha()>();

        $f3 = virtualinvoke r0.<android.view.View: float getTransitionAlpha()>();

        $f26 = $f2 * $f3;

     label45:
        f37 = $f26;

        if r3 != null goto label46;

        $b98 = f37 cmpg 1.0F;

        if $b98 < 0 goto label46;

        $z23 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if $z23 == 0 goto label46;

        $i97 = r0.<android.view.View: int mPrivateFlags3>;

        $i91 = $i97 & 2;

        if $i91 != 2 goto label67;

     label46:
        if r3 != null goto label47;

        if z2 != 0 goto label53;

     label47:
        i7 = 0;

        i8 = 0;

        if z9 == 0 goto label48;

        i7 = neg i3;

        i8 = neg i5;

     label48:
        if r3 == null goto label52;

        if z36 == 0 goto label51;

        if z38 == 0 goto label49;

        $r26 = virtualinvoke r3.<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>();

        virtualinvoke r33.<android.view.RenderNode: boolean setAnimationMatrix(android.graphics.Matrix)>($r26);

        goto label50;

     label49:
        $i85 = neg i7;

        $f20 = (float) $i85;

        $i84 = neg i8;

        $f21 = (float) $i84;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f20, $f21);

        $r23 = virtualinvoke r3.<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>();

        virtualinvoke r1.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r23);

        $f27 = (float) i7;

        $f19 = (float) i8;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f27, $f19);

     label50:
        $i96 = r2.<android.view.ViewGroup: int mGroupFlags>;

        $i95 = $i96 | 256;

        r2.<android.view.ViewGroup: int mGroupFlags> = $i95;

     label51:
        f1 = virtualinvoke r3.<android.view.animation.Transformation: float getAlpha()>();

        $b89 = f1 cmpg 1.0F;

        if $b89 >= 0 goto label52;

        f37 = f37 * f1;

        $i87 = r2.<android.view.ViewGroup: int mGroupFlags>;

        $i86 = $i87 | 256;

        r2.<android.view.ViewGroup: int mGroupFlags> = $i86;

     label52:
        if z2 != 0 goto label53;

        if z38 != 0 goto label53;

        $i80 = neg i7;

        $f22 = (float) $i80;

        $i88 = neg i8;

        $f23 = (float) $i88;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f22, $f23);

        $r24 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke r1.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r24);

        $f24 = (float) i7;

        $f25 = (float) i8;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f24, $f25);

     label53:
        $b18 = f37 cmpg 1.0F;

        if $b18 < 0 goto label54;

        $i78 = r0.<android.view.View: int mPrivateFlags3>;

        $i79 = $i78 & 2;

        if $i79 != 2 goto label68;

     label54:
        $b19 = f37 cmpg 1.0F;

        if $b19 >= 0 goto label55;

        $i76 = r0.<android.view.View: int mPrivateFlags3>;

        $i77 = $i76 | 2;

        r0.<android.view.View: int mPrivateFlags3> = $i77;

        goto label56;

     label55:
        $i23 = r0.<android.view.View: int mPrivateFlags3>;

        $i22 = $i23 & -3;

        r0.<android.view.View: int mPrivateFlags3> = $i22;

     label56:
        $i21 = r2.<android.view.ViewGroup: int mGroupFlags>;

        $i20 = $i21 | 256;

        r2.<android.view.ViewGroup: int mGroupFlags> = $i20;

        if z8 == 0 goto label68;

        $f11 = 255.0F * f37;

        i127 = (int) $f11;

        $z20 = virtualinvoke r0.<android.view.View: boolean onSetAlpha(int)>(i127);

        if $z20 != 0 goto label65;

        i128 = 4;

        $i75 = i1 & 1;

        if $i75 != 0 goto label57;

        if i2 == 0 goto label58;

     label57:
        i128 = i128 | 16;

     label58:
        if z38 == 0 goto label59;

        $f17 = virtualinvoke r0.<android.view.View: float getAlpha()>();

        $f18 = f37 * $f17;

        $f12 = virtualinvoke r0.<android.view.View: float getTransitionAlpha()>();

        $f13 = $f18 * $f12;

        virtualinvoke r33.<android.view.RenderNode: boolean setAlpha(float)>($f13);

        goto label64;

     label59:
        if i2 != 0 goto label64;

        if z37 == 0 goto label60;

        $i83 = 0;

        goto label61;

     label60:
        $i83 = i3;

     label61:
        i129 = $i83;

        if z37 == 0 goto label62;

        $i82 = 0;

        goto label63;

     label62:
        $i82 = i5;

     label63:
        i9 = $i82;

        $f16 = (float) i129;

        $f15 = (float) i9;

        $i65 = r0.<android.view.View: int mRight>;

        $i74 = r0.<android.view.View: int mLeft>;

        $i64 = $i65 - $i74;

        $i67 = i129 + $i64;

        $f14 = (float) $i67;

        $i69 = r0.<android.view.View: int mBottom>;

        $i66 = r0.<android.view.View: int mTop>;

        $i68 = $i69 - $i66;

        $i70 = i9 + $i68;

        $f10 = (float) $i70;

        virtualinvoke r1.<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>($f16, $f15, $f14, $f10, i127, i128);

     label64:
        goto label66;

     label65:
        $i73 = r0.<android.view.View: int mPrivateFlags>;

        $i72 = $i73 | 262144;

        r0.<android.view.View: int mPrivateFlags> = $i72;

     label66:
        goto label68;

     label67:
        $i92 = r0.<android.view.View: int mPrivateFlags>;

        $i90 = $i92 & 262144;

        if $i90 != 262144 goto label68;

        virtualinvoke r0.<android.view.View: boolean onSetAlpha(int)>(255);

        $i93 = r0.<android.view.View: int mPrivateFlags>;

        $i94 = $i93 & -262145;

        r0.<android.view.View: int mPrivateFlags> = $i94;

     label68:
        if z38 != 0 goto label73;

        $i51 = i1 & 1;

        if $i51 != 1 goto label72;

        if r34 != null goto label72;

        if z9 == 0 goto label69;

        $i62 = r0.<android.view.View: int mRight>;

        $i63 = r0.<android.view.View: int mLeft>;

        $i61 = $i62 - $i63;

        $i71 = i3 + $i61;

        $i59 = r0.<android.view.View: int mBottom>;

        $i60 = r0.<android.view.View: int mTop>;

        $i58 = $i59 - $i60;

        $i57 = i5 + $i58;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(int,int,int,int)>(i3, i5, $i71, $i57);

        goto label72;

     label69:
        if z4 == 0 goto label70;

        if r34 != null goto label71;

     label70:
        $i48 = r0.<android.view.View: int mRight>;

        $i50 = r0.<android.view.View: int mLeft>;

        $i54 = $i48 - $i50;

        $i56 = r0.<android.view.View: int mBottom>;

        $i49 = r0.<android.view.View: int mTop>;

        $i55 = $i56 - $i49;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(int,int,int,int)>(0, 0, $i54, $i55);

        goto label72;

     label71:
        $i53 = virtualinvoke r34.<android.graphics.Bitmap: int getWidth()>();

        $i52 = virtualinvoke r34.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(int,int,int,int)>(0, 0, $i53, $i52);

     label72:
        $r21 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        if $r21 == null goto label73;

        $r22 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>($r22);

     label73:
        if z38 != 0 goto label74;

        if z37 == 0 goto label74;

        r33 = virtualinvoke r0.<android.view.View: android.view.RenderNode getDisplayList()>();

        $z16 = virtualinvoke r33.<android.view.RenderNode: boolean isValid()>();

        if $z16 != 0 goto label74;

        r33 = null;

        z37 = 0;

     label74:
        if z8 == 0 goto label85;

        z39 = 0;

        if i2 != 2 goto label80;

        if z38 != 0 goto label80;

        r35 = virtualinvoke r0.<android.view.View: android.view.HardwareLayer getHardwareLayer()>();

        if r35 == null goto label75;

        $z14 = virtualinvoke r35.<android.view.HardwareLayer: boolean isValid()>();

        if $z14 == 0 goto label75;

        $r16 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        i130 = virtualinvoke $r16.<android.graphics.Paint: int getAlpha()>();

        $r20 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        $f9 = f37 * 255.0F;

        $i47 = (int) $f9;

        virtualinvoke $r20.<android.graphics.Paint: void setAlpha(int)>($i47);

        $r19 = (android.view.HardwareCanvas) r1;

        $r18 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        virtualinvoke $r19.<android.view.HardwareCanvas: void drawHardwareLayer(android.view.HardwareLayer,float,float,android.graphics.Paint)>(r35, 0.0F, 0.0F, $r18);

        $r17 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        virtualinvoke $r17.<android.graphics.Paint: void setAlpha(int)>(i130);

        z39 = 1;

        goto label80;

     label75:
        if z37 == 0 goto label76;

        $i44 = 0;

        goto label77;

     label76:
        $i44 = i3;

     label77:
        i131 = $i44;

        if z37 == 0 goto label78;

        $i45 = 0;

        goto label79;

     label78:
        $i45 = i5;

     label79:
        i132 = $i45;

        $f8 = (float) i131;

        $f6 = (float) i132;

        $i36 = r0.<android.view.View: int mRight>;

        $i41 = i131 + $i36;

        $i37 = r0.<android.view.View: int mLeft>;

        $i40 = $i41 - $i37;

        $f7 = (float) $i40;

        $i43 = r0.<android.view.View: int mBottom>;

        $i39 = i132 + $i43;

        $i42 = r0.<android.view.View: int mTop>;

        $i38 = $i39 - $i42;

        $f5 = (float) $i38;

        $r15 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        virtualinvoke r1.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>($f8, $f6, $f7, $f5, $r15, 20);

     label80:
        if z39 != 0 goto label84;

        if z37 != 0 goto label83;

        $i29 = r0.<android.view.View: int mPrivateFlags>;

        $i30 = $i29 & 128;

        if $i30 != 128 goto label81;

        $i31 = r0.<android.view.View: int mPrivateFlags>;

        $i32 = $i31 & -6291457;

        r0.<android.view.View: int mPrivateFlags> = $i32;

        virtualinvoke r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>(r1);

        $r12 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r12 == null goto label82;

        $r13 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $z13 = virtualinvoke $r13.<android.view.ViewOverlay: boolean isEmpty()>();

        if $z13 != 0 goto label82;

        $r14 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r11 = virtualinvoke $r14.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r11.<android.view.ViewGroup: void draw(android.graphics.Canvas)>(r1);

        goto label82;

     label81:
        virtualinvoke r0.<android.view.View: void draw(android.graphics.Canvas)>(r1);

     label82:
        specialinvoke r0.<android.view.View: void drawAccessibilityFocus(android.graphics.Canvas)>(r1);

        goto label84;

     label83:
        $i33 = r0.<android.view.View: int mPrivateFlags>;

        $i34 = $i33 & -6291457;

        r0.<android.view.View: int mPrivateFlags> = $i34;

        $r10 = (android.view.HardwareCanvas) r1;

        virtualinvoke $r10.<android.view.HardwareCanvas: int drawRenderNode(android.view.RenderNode,android.graphics.Rect,int)>(r33, null, i1);

     label84:
        goto label88;

     label85:
        if r34 == null goto label88;

        $i27 = r0.<android.view.View: int mPrivateFlags>;

        $i26 = $i27 & -6291457;

        r0.<android.view.View: int mPrivateFlags> = $i26;

        i133 = 0;

        if i2 != 0 goto label86;

        r36 = r2.<android.view.ViewGroup: android.graphics.Paint mCachePaint>;

        if r36 != null goto label87;

        $r9 = new android.graphics.Paint;

        specialinvoke $r9.<android.graphics.Paint: void <init>()>();

        r36 = $r9;

        virtualinvoke r36.<android.graphics.Paint: void setDither(boolean)>(0);

        r2.<android.view.ViewGroup: android.graphics.Paint mCachePaint> = r36;

        goto label87;

     label86:
        r36 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        $r8 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        i133 = virtualinvoke $r8.<android.graphics.Paint: int getAlpha()>();

     label87:
        $f4 = f37 * 255.0F;

        $i28 = (int) $f4;

        virtualinvoke r36.<android.graphics.Paint: void setAlpha(int)>($i28);

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r34, 0.0F, 0.0F, r36);

        virtualinvoke r36.<android.graphics.Paint: void setAlpha(int)>(i133);

     label88:
        if i6 < 0 goto label89;

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i6);

     label89:
        if r4 == null goto label91;

        if z1 != 0 goto label91;

        if z6 != 0 goto label90;

        $z10 = virtualinvoke r4.<android.view.animation.Animation: boolean getFillAfter()>();

        if $z10 != 0 goto label90;

        virtualinvoke r0.<android.view.View: boolean onSetAlpha(int)>(255);

     label90:
        virtualinvoke r2.<android.view.ViewGroup: void finishAnimatingView(android.view.View,android.view.animation.Animation)>(r0, r4);

     label91:
        if z1 == 0 goto label92;

        if z6 == 0 goto label92;

        $z11 = virtualinvoke r4.<android.view.animation.Animation: boolean hasAlpha()>();

        if $z11 == 0 goto label92;

        $i25 = r0.<android.view.View: int mPrivateFlags>;

        $i24 = $i25 & 262144;

        if $i24 != 262144 goto label92;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label92:
        r0.<android.view.View: boolean mRecreateDisplayList> = 0;

        return z1;
    }

    public void draw(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i34, $i37, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i51;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, $z8, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, $f56, $f57, $f58, $f59, $f60;
        android.view.View$ScrollabilityCache r2;
        android.graphics.Matrix r3;
        android.graphics.Shader r4;
        android.view.ViewOverlay $r5, $r6, $r7, $r15, $r16, $r18;
        android.view.ViewGroup $r8, $r17;
        byte $b39, $b40, $b41, $b50;
        android.view.View$AttachInfo $r13, $r14;
        android.graphics.Paint r19;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        i0 = r0.<android.view.View: int mPrivateFlags>;

        $i11 = i0 & 6291456;

        if $i11 != 4194304 goto label02;

        $r14 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r14 == null goto label01;

        $r13 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z20 = $r13.<android.view.View$AttachInfo: boolean mIgnoreDirtyState>;

        if $z20 != 0 goto label02;

     label01:
        $z21 = 1;

        goto label03;

     label02:
        $z21 = 0;

     label03:
        z0 = $z21;

        $i13 = i0 & -6291457;

        $i12 = $i13 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i12;

        if z0 != 0 goto label04;

        specialinvoke r0.<android.view.View: void drawBackground(android.graphics.Canvas)>(r1);

     label04:
        i2 = r0.<android.view.View: int mViewFlags>;

        $i15 = i2 & 4096;

        if $i15 == 0 goto label05;

        $z23 = 1;

        goto label06;

     label05:
        $z23 = 0;

     label06:
        z1 = $z23;

        $i16 = i2 & 8192;

        if $i16 == 0 goto label07;

        $z24 = 1;

        goto label08;

     label07:
        $z24 = 0;

     label08:
        z2 = $z24;

        if z2 != 0 goto label11;

        if z1 != 0 goto label11;

        if z0 != 0 goto label09;

        virtualinvoke r0.<android.view.View: void onDraw(android.graphics.Canvas)>(r1);

     label09:
        virtualinvoke r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>(r1);

        virtualinvoke r0.<android.view.View: void onDrawScrollBars(android.graphics.Canvas)>(r1);

        $r16 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r16 == null goto label10;

        $r15 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $z22 = virtualinvoke $r15.<android.view.ViewOverlay: boolean isEmpty()>();

        if $z22 != 0 goto label10;

        $r18 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r17 = virtualinvoke $r18.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r17.<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>(r1);

     label10:
        return;

     label11:
        z3 = 0;

        z4 = 0;

        z5 = 0;

        z6 = 0;

        f0 = 0.0F;

        f1 = 0.0F;

        f2 = 0.0F;

        f3 = 0.0F;

        i3 = r0.<android.view.View: int mPaddingLeft>;

        z7 = virtualinvoke r0.<android.view.View: boolean isPaddingOffsetRequired()>();

        if z7 == 0 goto label12;

        $i51 = virtualinvoke r0.<android.view.View: int getLeftPaddingOffset()>();

        i3 = i3 + $i51;

     label12:
        $i14 = r0.<android.view.View: int mScrollX>;

        i5 = $i14 + i3;

        $i19 = r0.<android.view.View: int mRight>;

        $i17 = i5 + $i19;

        $i20 = r0.<android.view.View: int mLeft>;

        $i23 = $i17 - $i20;

        $i18 = r0.<android.view.View: int mPaddingRight>;

        $i24 = $i23 - $i18;

        i4 = $i24 - i3;

        $i21 = r0.<android.view.View: int mScrollY>;

        $i22 = virtualinvoke r0.<android.view.View: int getFadeTop(boolean)>(z7);

        i7 = $i21 + $i22;

        $i25 = virtualinvoke r0.<android.view.View: int getFadeHeight(boolean)>(z7);

        i6 = i7 + $i25;

        if z7 == 0 goto label13;

        $i48 = virtualinvoke r0.<android.view.View: int getRightPaddingOffset()>();

        i4 = i4 + $i48;

        $i49 = virtualinvoke r0.<android.view.View: int getBottomPaddingOffset()>();

        i6 = i6 + $i49;

     label13:
        r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i26 = r2.<android.view.View$ScrollabilityCache: int fadingEdgeLength>;

        f4 = (float) $i26;

        i9 = (int) f4;

        if z2 == 0 goto label14;

        $i46 = i7 + i9;

        $i45 = i6 - i9;

        if $i46 <= $i45 goto label14;

        $i47 = i6 - i7;

        i9 = $i47 / 2;

     label14:
        if z1 == 0 goto label15;

        $i43 = i5 + i9;

        $i42 = i4 - i9;

        if $i43 <= $i42 goto label15;

        $i44 = i4 - i5;

        i9 = $i44 / 2;

     label15:
        if z2 == 0 goto label20;

        $f53 = virtualinvoke r0.<android.view.View: float getTopFadingEdgeStrength()>();

        $f52 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f53);

        f0 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f52);

        $f54 = f0 * f4;

        $b40 = $f54 cmpl 1.0F;

        if $b40 <= 0 goto label16;

        $z19 = 1;

        goto label17;

     label16:
        $z19 = 0;

     label17:
        z3 = $z19;

        $f58 = virtualinvoke r0.<android.view.View: float getBottomFadingEdgeStrength()>();

        $f59 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f58);

        f1 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f59);

        $f60 = f1 * f4;

        $b50 = $f60 cmpl 1.0F;

        if $b50 <= 0 goto label18;

        $z18 = 1;

        goto label19;

     label18:
        $z18 = 0;

     label19:
        z4 = $z18;

     label20:
        if z1 == 0 goto label25;

        $f51 = virtualinvoke r0.<android.view.View: float getLeftFadingEdgeStrength()>();

        $f50 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f51);

        f2 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f50);

        $f49 = f2 * f4;

        $b39 = $f49 cmpl 1.0F;

        if $b39 <= 0 goto label21;

        $z16 = 1;

        goto label22;

     label21:
        $z16 = 0;

     label22:
        z5 = $z16;

        $f55 = virtualinvoke r0.<android.view.View: float getRightFadingEdgeStrength()>();

        $f56 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f55);

        f3 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f56);

        $f57 = f3 * f4;

        $b41 = $f57 cmpl 1.0F;

        if $b41 <= 0 goto label23;

        $z17 = 1;

        goto label24;

     label23:
        $z17 = 0;

     label24:
        z6 = $z17;

     label25:
        i1 = virtualinvoke r1.<android.graphics.Canvas: int getSaveCount()>();

        i8 = virtualinvoke r0.<android.view.View: int getSolidColor()>();

        if i8 != 0 goto label30;

        if z3 == 0 goto label26;

        $f44 = (float) i5;

        $f45 = (float) i7;

        $f46 = (float) i4;

        $i37 = i7 + i9;

        $f47 = (float) $i37;

        virtualinvoke r1.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>($f44, $f45, $f46, $f47, null, 4);

     label26:
        if z4 == 0 goto label27;

        $f48 = (float) i5;

        $i34 = i6 - i9;

        $f39 = (float) $i34;

        $f38 = (float) i4;

        $f40 = (float) i6;

        virtualinvoke r1.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>($f48, $f39, $f38, $f40, null, 4);

     label27:
        if z5 == 0 goto label28;

        $f41 = (float) i5;

        $f43 = (float) i7;

        $i31 = i5 + i9;

        $f42 = (float) $i31;

        $f33 = (float) i6;

        virtualinvoke r1.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>($f41, $f43, $f42, $f33, null, 4);

     label28:
        if z6 == 0 goto label29;

        $i33 = i4 - i9;

        $f34 = (float) $i33;

        $f36 = (float) i7;

        $f35 = (float) i4;

        $f37 = (float) i6;

        virtualinvoke r1.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>($f34, $f36, $f35, $f37, null, 4);

     label29:
        goto label31;

     label30:
        virtualinvoke r2.<android.view.View$ScrollabilityCache: void setFadeColor(int)>(i8);

     label31:
        if z0 != 0 goto label32;

        virtualinvoke r0.<android.view.View: void onDraw(android.graphics.Canvas)>(r1);

     label32:
        virtualinvoke r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>(r1);

        r19 = r2.<android.view.View$ScrollabilityCache: android.graphics.Paint paint>;

        r3 = r2.<android.view.View$ScrollabilityCache: android.graphics.Matrix matrix>;

        r4 = r2.<android.view.View$ScrollabilityCache: android.graphics.Shader shader>;

        if z3 == 0 goto label33;

        $f25 = f4 * f0;

        virtualinvoke r3.<android.graphics.Matrix: void setScale(float,float)>(1.0F, $f25);

        $f32 = (float) i5;

        $f24 = (float) i7;

        virtualinvoke r3.<android.graphics.Matrix: boolean postTranslate(float,float)>($f32, $f24);

        virtualinvoke r4.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>(r3);

        virtualinvoke r19.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r4);

        $f30 = (float) i5;

        $f31 = (float) i7;

        $f28 = (float) i4;

        $i30 = i7 + i9;

        $f29 = (float) $i30;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f30, $f31, $f28, $f29, r19);

     label33:
        if z4 == 0 goto label34;

        $f21 = f4 * f1;

        virtualinvoke r3.<android.graphics.Matrix: void setScale(float,float)>(1.0F, $f21);

        virtualinvoke r3.<android.graphics.Matrix: boolean postRotate(float)>(180.0F);

        $f17 = (float) i5;

        $f16 = (float) i6;

        virtualinvoke r3.<android.graphics.Matrix: boolean postTranslate(float,float)>($f17, $f16);

        virtualinvoke r4.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>(r3);

        virtualinvoke r19.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r4);

        $f22 = (float) i5;

        $i29 = i6 - i9;

        $f23 = (float) $i29;

        $f26 = (float) i4;

        $f27 = (float) i6;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f22, $f23, $f26, $f27, r19);

     label34:
        if z5 == 0 goto label35;

        $f13 = f4 * f2;

        virtualinvoke r3.<android.graphics.Matrix: void setScale(float,float)>(1.0F, $f13);

        virtualinvoke r3.<android.graphics.Matrix: boolean postRotate(float)>(-90.0F);

        $f15 = (float) i5;

        $f14 = (float) i7;

        virtualinvoke r3.<android.graphics.Matrix: boolean postTranslate(float,float)>($f15, $f14);

        virtualinvoke r4.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>(r3);

        virtualinvoke r19.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r4);

        $f20 = (float) i5;

        $f19 = (float) i7;

        $i28 = i5 + i9;

        $f18 = (float) $i28;

        $f12 = (float) i6;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f20, $f19, $f18, $f12, r19);

     label35:
        if z6 == 0 goto label36;

        $f6 = f4 * f3;

        virtualinvoke r3.<android.graphics.Matrix: void setScale(float,float)>(1.0F, $f6);

        virtualinvoke r3.<android.graphics.Matrix: boolean postRotate(float)>(90.0F);

        $f7 = (float) i4;

        $f5 = (float) i7;

        virtualinvoke r3.<android.graphics.Matrix: boolean postTranslate(float,float)>($f7, $f5);

        virtualinvoke r4.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>(r3);

        virtualinvoke r19.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r4);

        $i27 = i4 - i9;

        $f8 = (float) $i27;

        $f9 = (float) i7;

        $f10 = (float) i4;

        $f11 = (float) i6;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f8, $f9, $f10, $f11, r19);

     label36:
        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i1);

        virtualinvoke r0.<android.view.View: void onDrawScrollBars(android.graphics.Canvas)>(r1);

        $r7 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r7 == null goto label37;

        $r6 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $z8 = virtualinvoke $r6.<android.view.ViewOverlay: boolean isEmpty()>();

        if $z8 != 0 goto label37;

        $r5 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r8 = virtualinvoke $r5.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r8.<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>(r1);

     label37:
        return;
    }

    private void drawAccessibilityFocus(android.graphics.Canvas)
    {
        android.view.View r0, $r10;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        android.view.ViewRootImpl r3;
        android.view.accessibility.AccessibilityManager r4;
        android.graphics.drawable.Drawable r5;
        android.view.accessibility.AccessibilityNodeInfo r6;
        int[] r7;
        android.view.View$AttachInfo $r8, $r9, $r13;
        android.content.Context $r11;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12;
        float $f0, $f1;
        android.graphics.Region$Op $r12;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        $r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r8 != null goto label1;

        return;

     label1:
        $r9 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r9.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        r3 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r3 == null goto label2;

        $r10 = virtualinvoke r3.<android.view.ViewRootImpl: android.view.View getAccessibilityFocusedHost()>();

        if $r10 == r0 goto label3;

     label2:
        return;

     label3:
        $r11 = r0.<android.view.View: android.content.Context mContext>;

        r4 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r11);

        $z0 = virtualinvoke r4.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r4.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z1 != 0 goto label5;

     label4:
        return;

     label5:
        r5 = virtualinvoke r3.<android.view.ViewRootImpl: android.graphics.drawable.Drawable getAccessibilityFocusedDrawable()>();

        if r5 != null goto label6;

        return;

     label6:
        r6 = virtualinvoke r3.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo getAccessibilityFocusedVirtualView()>();

        if r6 == null goto label7;

        virtualinvoke r6.<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>(r2);

        $r13 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r7 = $r13.<android.view.View$AttachInfo: int[] mTmpLocation>;

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r7);

        $i11 = r7[0];

        $i10 = neg $i11;

        $i12 = r7[1];

        $i9 = neg $i12;

        virtualinvoke r2.<android.graphics.Rect: void offset(int,int)>($i10, $i9);

        goto label8;

     label7:
        $i0 = r0.<android.view.View: int mRight>;

        $i1 = r0.<android.view.View: int mLeft>;

        $i4 = $i0 - $i1;

        $i2 = r0.<android.view.View: int mBottom>;

        $i3 = r0.<android.view.View: int mTop>;

        $i5 = $i2 - $i3;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i4, $i5);

     label8:
        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $i6 = r0.<android.view.View: int mScrollX>;

        $f1 = (float) $i6;

        $i8 = r0.<android.view.View: int mScrollY>;

        $f0 = (float) $i8;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f1, $f0);

        $r12 = <android.graphics.Region$Op: android.graphics.Region$Op REPLACE>;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>(r2, $r12);

        virtualinvoke r5.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>(r2);

        virtualinvoke r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

        return;
    }

    private void drawBackground(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        android.view.RenderNode r3, $r6, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        boolean $z0, $z1, $z2;
        float $f0, $f1, $f2, $f3;
        android.view.View$AttachInfo $r4, $r5;
        android.view.HardwareRenderer $r7;
        android.view.HardwareCanvas $r9;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r2 != null goto label1;

        return;

     label1:
        $z0 = r0.<android.view.View: boolean mBackgroundSizeChanged>;

        if $z0 == 0 goto label2;

        $i6 = r0.<android.view.View: int mRight>;

        $i4 = r0.<android.view.View: int mLeft>;

        $i10 = $i6 - $i4;

        $i8 = r0.<android.view.View: int mBottom>;

        $i5 = r0.<android.view.View: int mTop>;

        $i7 = $i8 - $i5;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i10, $i7);

        r0.<android.view.View: boolean mBackgroundSizeChanged> = 0;

        $i9 = r0.<android.view.View: int mPrivateFlags3>;

        $i11 = $i9 | 256;

        r0.<android.view.View: int mPrivateFlags3> = $i11;

     label2:
        $z1 = virtualinvoke r1.<android.graphics.Canvas: boolean isHardwareAccelerated()>();

        if $z1 == 0 goto label3;

        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label3;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r5.<android.view.View$AttachInfo: android.view.HardwareRenderer mHardwareRenderer>;

        if $r7 == null goto label3;

        $r6 = r0.<android.view.View: android.view.RenderNode mBackgroundRenderNode>;

        $r8 = specialinvoke r0.<android.view.View: android.view.RenderNode getDrawableRenderNode(android.graphics.drawable.Drawable,android.view.RenderNode)>(r2, $r6);

        r0.<android.view.View: android.view.RenderNode mBackgroundRenderNode> = $r8;

        r3 = r0.<android.view.View: android.view.RenderNode mBackgroundRenderNode>;

        if r3 == null goto label3;

        $z2 = virtualinvoke r3.<android.view.RenderNode: boolean isValid()>();

        if $z2 == 0 goto label3;

        specialinvoke r0.<android.view.View: void setBackgroundDisplayListProperties(android.view.RenderNode)>(r3);

        $r9 = (android.view.HardwareCanvas) r1;

        virtualinvoke $r9.<android.view.HardwareCanvas: void drawRenderNode(android.view.RenderNode)>(r3);

        return;

     label3:
        i12 = r0.<android.view.View: int mScrollX>;

        i0 = r0.<android.view.View: int mScrollY>;

        $i1 = i12 | i0;

        if $i1 != 0 goto label4;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        goto label5;

     label4:
        $f1 = (float) i12;

        $f0 = (float) i0;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f1, $f0);

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        $i2 = neg i12;

        $f3 = (float) $i2;

        $i3 = neg i0;

        $f2 = (float) $i3;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f3, $f2);

     label5:
        return;
    }

    private void setBackgroundDisplayListProperties(android.view.RenderNode)
    {
        android.view.View r0;
        android.view.RenderNode r1;
        int $i0, $i1;
        float $f0, $f1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.RenderNode;

        $i0 = r0.<android.view.View: int mScrollX>;

        $f0 = (float) $i0;

        virtualinvoke r1.<android.view.RenderNode: boolean setTranslationX(float)>($f0);

        $i1 = r0.<android.view.View: int mScrollY>;

        $f1 = (float) $i1;

        virtualinvoke r1.<android.view.RenderNode: boolean setTranslationY(float)>($f1);

        return;
    }

    private android.view.RenderNode getDrawableRenderNode(android.graphics.drawable.Drawable, android.view.RenderNode)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        android.view.RenderNode r2;
        android.graphics.Rect r3;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.view.HardwareCanvas r4;
        java.lang.Throwable r5, $r8;
        boolean $z0;
        java.lang.Class $r6;
        java.lang.String $r7;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: android.view.RenderNode;

        if r2 != null goto label1;

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        r2 = staticinvoke <android.view.RenderNode: android.view.RenderNode create(java.lang.String,android.view.View)>($r7, r0);

     label1:
        r3 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        i0 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        i1 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        r4 = virtualinvoke r2.<android.view.RenderNode: android.view.HardwareCanvas start(int,int)>(i0, i1);

     label2:
        virtualinvoke r1.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4);

     label3:
        virtualinvoke r2.<android.view.RenderNode: void end(android.view.HardwareCanvas)>(r4);

        goto label6;

     label4:
        $r8 := @caughtexception;

        r5 = $r8;

     label5:
        virtualinvoke r2.<android.view.RenderNode: void end(android.view.HardwareCanvas)>(r4);

        throw r5;

     label6:
        $i5 = r3.<android.graphics.Rect: int left>;

        $i4 = r3.<android.graphics.Rect: int top>;

        $i3 = r3.<android.graphics.Rect: int right>;

        $i2 = r3.<android.graphics.Rect: int bottom>;

        virtualinvoke r2.<android.view.RenderNode: boolean setLeftTopRightBottom(int,int,int,int)>($i5, $i4, $i3, $i2);

        $z0 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isProjected()>();

        virtualinvoke r2.<android.view.RenderNode: boolean setProjectBackwards(boolean)>($z0);

        virtualinvoke r2.<android.view.RenderNode: boolean setProjectionReceiver(boolean)>(1);

        virtualinvoke r2.<android.view.RenderNode: boolean setClipToBounds(boolean)>(0);

        return r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public android.view.ViewOverlay getOverlay()
    {
        android.view.View r0;
        android.view.ViewOverlay $r1, $r2, $r3;
        android.content.Context $r4;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r1 != null goto label1;

        $r3 = new android.view.ViewOverlay;

        $r4 = r0.<android.view.View: android.content.Context mContext>;

        specialinvoke $r3.<android.view.ViewOverlay: void <init>(android.content.Context,android.view.View)>($r4, r0);

        r0.<android.view.View: android.view.ViewOverlay mOverlay> = $r3;

     label1:
        $r2 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        return $r2;
    }

    public int getSolidColor()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    private static java.lang.String printFlags(int)
    {
        int i0, i1, $i2, $i3;
        java.lang.String r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        i0 := @parameter0: int;

        r0 = "";

        i1 = 0;

        $i2 = i0 & 1;

        if $i2 != 1 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TAKES_FOCUS");

        r0 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

     label1:
        $i3 = i0 & 12;

        lookupswitch($i3)
        {
            case 4: goto label2;
            case 8: goto label4;
            default: goto label6;
        };

     label2:
        if i1 <= 0 goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r0 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INVISIBLE");

        r0 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label4:
        if i1 <= 0 goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GONE");

        r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label6:
        return r0;
    }

    private static java.lang.String printPrivateFlags(int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33;

        i0 := @parameter0: int;

        r0 = "";

        i1 = 0;

        $i2 = i0 & 1;

        if $i2 != 1 goto label01;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WANTS_FOCUS");

        r0 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

     label01:
        $i3 = i0 & 2;

        if $i3 != 2 goto label03;

        if i1 <= 0 goto label02;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r0 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FOCUSED");

        r0 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

     label03:
        $i4 = i0 & 4;

        if $i4 != 4 goto label05;

        if i1 <= 0 goto label04;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r0 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECTED");

        r0 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

     label05:
        $i5 = i0 & 8;

        if $i5 != 8 goto label07;

        if i1 <= 0 goto label06;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r0 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IS_ROOT_NAMESPACE");

        r0 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

     label07:
        $i6 = i0 & 16;

        if $i6 != 16 goto label09;

        if i1 <= 0 goto label08;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r0 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HAS_BOUNDS");

        r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

     label09:
        $i7 = i0 & 32;

        if $i7 != 32 goto label11;

        if i1 <= 0 goto label10;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DRAWN");

        r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        return r0;
    }

    public boolean isLayoutRequested()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 4096;

        if $i1 != 4096 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isLayoutModeOptical(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, $z2;
        android.view.ViewGroup $r1;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r1 = (android.view.ViewGroup) r0;

        $z1 = virtualinvoke $r1.<android.view.ViewGroup: boolean isLayoutModeOptical()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private boolean setOpticalFrame(int, int, int, int)
    {
        android.view.View r0, $r6;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        android.graphics.Insets r1, r2, $r5;
        android.view.ViewParent $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = $r3 instanceof android.view.View;

        if $z0 == 0 goto label1;

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r6 = (android.view.View) $r4;

        $r5 = virtualinvoke $r6.<android.view.View: android.graphics.Insets getOpticalInsets()>();

        goto label2;

     label1:
        $r5 = <android.graphics.Insets: android.graphics.Insets NONE>;

     label2:
        r1 = $r5;

        r2 = virtualinvoke r0.<android.view.View: android.graphics.Insets getOpticalInsets()>();

        $i4 = r1.<android.graphics.Insets: int left>;

        $i6 = i0 + $i4;

        $i5 = r2.<android.graphics.Insets: int left>;

        $i18 = $i6 - $i5;

        $i7 = r1.<android.graphics.Insets: int top>;

        $i9 = i1 + $i7;

        $i8 = r2.<android.graphics.Insets: int top>;

        $i19 = $i9 - $i8;

        $i11 = r1.<android.graphics.Insets: int left>;

        $i13 = i2 + $i11;

        $i10 = r2.<android.graphics.Insets: int right>;

        $i16 = $i13 + $i10;

        $i12 = r1.<android.graphics.Insets: int top>;

        $i14 = i3 + $i12;

        $i15 = r2.<android.graphics.Insets: int bottom>;

        $i17 = $i14 + $i15;

        $z1 = virtualinvoke r0.<android.view.View: boolean setFrame(int,int,int,int)>($i18, $i19, $i16, $i17);

        return $z1;
    }

    public void layout(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        boolean z0, $z1, $z2;
        android.view.View$ListenerInfo r1;
        java.util.ArrayList r2, $r4, $r6;
        android.view.ViewParent $r3;
        java.lang.Object $r5, $r7;
        android.view.View$OnLayoutChangeListener $r8;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i10 = r0.<android.view.View: int mPrivateFlags3>;

        $i11 = $i10 & 8;

        if $i11 == 0 goto label1;

        $i20 = r0.<android.view.View: int mOldWidthMeasureSpec>;

        $i19 = r0.<android.view.View: int mOldHeightMeasureSpec>;

        virtualinvoke r0.<android.view.View: void onMeasure(int,int)>($i20, $i19);

        $i22 = r0.<android.view.View: int mPrivateFlags3>;

        $i23 = $i22 & -9;

        r0.<android.view.View: int mPrivateFlags3> = $i23;

     label1:
        i4 = r0.<android.view.View: int mLeft>;

        i5 = r0.<android.view.View: int mTop>;

        i6 = r0.<android.view.View: int mBottom>;

        i7 = r0.<android.view.View: int mRight>;

        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z1 = staticinvoke <android.view.View: boolean isLayoutModeOptical(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $z2 = specialinvoke r0.<android.view.View: boolean setOpticalFrame(int,int,int,int)>(i0, i1, i2, i3);

        goto label3;

     label2:
        $z2 = virtualinvoke r0.<android.view.View: boolean setFrame(int,int,int,int)>(i0, i1, i2, i3);

     label3:
        z0 = $z2;

        if z0 != 0 goto label4;

        $i18 = r0.<android.view.View: int mPrivateFlags>;

        $i21 = $i18 & 8192;

        if $i21 != 8192 goto label6;

     label4:
        virtualinvoke r0.<android.view.View: void onLayout(boolean,int,int,int,int)>(z0, i0, i1, i2, i3);

        $i12 = r0.<android.view.View: int mPrivateFlags>;

        $i14 = $i12 & -8193;

        r0.<android.view.View: int mPrivateFlags> = $i14;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label6;

        $r4 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$100(android.view.View$ListenerInfo)>(r1);

        if $r4 == null goto label6;

        $r6 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$100(android.view.View$ListenerInfo)>(r1);

        $r5 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object clone()>();

        r2 = (java.util.ArrayList) $r5;

        i8 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i9 = 0;

     label5:
        if i9 >= i8 goto label6;

        $r7 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        $r8 = (android.view.View$OnLayoutChangeListener) $r7;

        interfaceinvoke $r8.<android.view.View$OnLayoutChangeListener: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>(r0, i0, i1, i2, i3, i4, i5, i7, i6);

        i9 = i9 + 1;

        goto label5;

     label6:
        $i13 = r0.<android.view.View: int mPrivateFlags>;

        $i16 = $i13 & -4097;

        r0.<android.view.View: int mPrivateFlags> = $i16;

        $i15 = r0.<android.view.View: int mPrivateFlags3>;

        $i17 = $i15 | 4;

        r0.<android.view.View: int mPrivateFlags3> = $i17;

        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        android.view.View r0;
        boolean z0;
        int i0, i1, i2, i3;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        return;
    }

    protected boolean setFrame(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        boolean z0, z1, $z3;
        android.view.RenderNode $r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        z0 = 0;

        $i9 = r0.<android.view.View: int mLeft>;

        if $i9 != i0 goto label1;

        $i29 = r0.<android.view.View: int mRight>;

        if $i29 != i2 goto label1;

        $i27 = r0.<android.view.View: int mTop>;

        if $i27 != i1 goto label1;

        $i28 = r0.<android.view.View: int mBottom>;

        if $i28 == i3 goto label7;

     label1:
        z0 = 1;

        $i10 = r0.<android.view.View: int mPrivateFlags>;

        i4 = $i10 & 32;

        $i12 = r0.<android.view.View: int mRight>;

        $i11 = r0.<android.view.View: int mLeft>;

        i5 = $i12 - $i11;

        $i13 = r0.<android.view.View: int mBottom>;

        $i14 = r0.<android.view.View: int mTop>;

        i6 = $i13 - $i14;

        i7 = i2 - i0;

        i8 = i3 - i1;

        if i7 != i5 goto label2;

        if i8 == i6 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        z1 = $z3;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(z1);

        r0.<android.view.View: int mLeft> = i0;

        r0.<android.view.View: int mTop> = i1;

        r0.<android.view.View: int mRight> = i2;

        r0.<android.view.View: int mBottom> = i3;

        $r1 = r0.<android.view.View: android.view.RenderNode mRenderNode>;

        $i17 = r0.<android.view.View: int mLeft>;

        $i18 = r0.<android.view.View: int mTop>;

        $i15 = r0.<android.view.View: int mRight>;

        $i16 = r0.<android.view.View: int mBottom>;

        virtualinvoke $r1.<android.view.RenderNode: boolean setLeftTopRightBottom(int,int,int,int)>($i17, $i18, $i15, $i16);

        $i20 = r0.<android.view.View: int mPrivateFlags>;

        $i19 = $i20 | 16;

        r0.<android.view.View: int mPrivateFlags> = $i19;

        if z1 == 0 goto label5;

        specialinvoke r0.<android.view.View: void sizeChange(int,int,int,int)>(i7, i8, i5, i6);

     label5:
        $i22 = r0.<android.view.View: int mViewFlags>;

        $i21 = $i22 & 12;

        if $i21 != 0 goto label6;

        $i26 = r0.<android.view.View: int mPrivateFlags>;

        $i25 = $i26 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i25;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(z1);

        virtualinvoke r0.<android.view.View: void invalidateParentCaches()>();

     label6:
        $i24 = r0.<android.view.View: int mPrivateFlags>;

        $i23 = $i24 | i4;

        r0.<android.view.View: int mPrivateFlags> = $i23;

        r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label7:
        return z0;
    }

    private void sizeChange(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i4, $i5;
        android.view.ViewOverlay $r1, $r2, $r4;
        android.view.ViewGroup $r3, $r5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<android.view.View: void onSizeChanged(int,int,int,int)>(i0, i1, i2, i3);

        $r1 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r3 = virtualinvoke $r2.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r3.<android.view.ViewGroup: void setRight(int)>(i0);

        $r4 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r5 = virtualinvoke $r4.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r5.<android.view.ViewGroup: void setBottom(int)>(i1);

     label1:
        $i4 = r0.<android.view.View: int mPrivateFlags3>;

        $i5 = $i4 | 256;

        r0.<android.view.View: int mPrivateFlags3> = $i5;

        return;
    }

    protected void onFinishInflate()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return;
    }

    public android.content.res.Resources getResources()
    {
        android.view.View r0;
        android.content.res.Resources $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.content.res.Resources mResources>;

        return $r1;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        android.graphics.Rect r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $z0 = virtualinvoke r0.<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>(r1);

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.Rect getDirtyBounds()>();

        i0 = r0.<android.view.View: int mScrollX>;

        i1 = r0.<android.view.View: int mScrollY>;

        $i2 = r2.<android.graphics.Rect: int left>;

        $i9 = $i2 + i0;

        $i3 = r2.<android.graphics.Rect: int top>;

        $i8 = $i3 + i1;

        $i4 = r2.<android.graphics.Rect: int right>;

        $i7 = $i4 + i0;

        $i5 = r2.<android.graphics.Rect: int bottom>;

        $i6 = $i5 + i1;

        virtualinvoke r0.<android.view.View: void invalidate(int,int,int,int)>($i9, $i8, $i7, $i6);

        $i10 = r0.<android.view.View: int mPrivateFlags3>;

        $i11 = $i10 | 256;

        r0.<android.view.View: int mPrivateFlags3> = $i11;

     label1:
        return;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        java.lang.Runnable r2;
        long l0, l1, $l2, $l3;
        boolean $z0;
        android.view.View$AttachInfo $r3, $r5;
        android.view.ViewRootImpl$RunQueue $r4;
        android.view.ViewRootImpl $r6;
        android.view.Choreographer $r7;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: java.lang.Runnable;

        l0 := @parameter2: long;

        $z0 = virtualinvoke r0.<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>(r1);

        if $z0 == 0 goto label2;

        if r2 == null goto label2;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l1 = l0 - $l2;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label1;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r7 = $r6.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $l3 = staticinvoke <android.view.Choreographer: long subtractFrameDelay(long)>(l1);

        virtualinvoke $r7.<android.view.Choreographer: void postCallbackDelayed(int,java.lang.Runnable,java.lang.Object,long)>(1, r2, r1, $l3);

        goto label2;

     label1:
        $r4 = staticinvoke <android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()>();

        virtualinvoke $r4.<android.view.ViewRootImpl$RunQueue: void postDelayed(java.lang.Runnable,long)>(r2, l1);

     label2:
        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        java.lang.Runnable r2;
        boolean $z0;
        android.view.View$AttachInfo $r3, $r5;
        android.view.ViewRootImpl$RunQueue $r4;
        android.view.ViewRootImpl $r6;
        android.view.Choreographer $r7;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: java.lang.Runnable;

        $z0 = virtualinvoke r0.<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>(r1);

        if $z0 == 0 goto label2;

        if r2 == null goto label2;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label1;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r7 = $r6.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        virtualinvoke $r7.<android.view.Choreographer: void removeCallbacks(int,java.lang.Runnable,java.lang.Object)>(1, r2, r1);

     label1:
        $r4 = staticinvoke <android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()>();

        virtualinvoke $r4.<android.view.ViewRootImpl$RunQueue: void removeCallbacks(java.lang.Runnable)>(r2);

     label2:
        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        android.view.View$AttachInfo $r2, $r3;
        android.view.ViewRootImpl $r4;
        android.view.Choreographer $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label1;

        if r1 == null goto label1;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r5 = $r4.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        virtualinvoke $r5.<android.view.Choreographer: void removeCallbacks(int,java.lang.Runnable,java.lang.Object)>(1, null, r1);

     label1:
        return;
    }

    protected void resolveDrawables()
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isLayoutDirectionResolved()>();

        if $z0 != 0 goto label1;

        $i4 = virtualinvoke r0.<android.view.View: int getRawLayoutDirection()>();

        if $i4 != 2 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean isLayoutDirectionResolved()>();

        if $z1 == 0 goto label2;

        $i1 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        goto label3;

     label2:
        $i1 = virtualinvoke r0.<android.view.View: int getRawLayoutDirection()>();

     label3:
        i0 = $i1;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r1 == null goto label4;

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setLayoutDirection(int)>(i0);

     label4:
        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 | 1073741824;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        virtualinvoke r0.<android.view.View: void onResolveDrawables(int)>(i0);

        return;
    }

    public void onResolveDrawables(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        return;
    }

    protected void resetResolvedDrawables()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -1073741825;

        r0.<android.view.View: int mPrivateFlags2> = $i1;

        return;
    }

    private boolean isDrawablesResolved()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 1073741824;

        if $i1 != 1073741824 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean verifyDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1, $r2;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void drawableStateChanged()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        android.animation.StateListAnimator $r2, $r3;
        int[] $r4, $r5;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r5);

     label1:
        $r2 = r0.<android.view.View: android.animation.StateListAnimator mStateListAnimator>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.View: android.animation.StateListAnimator mStateListAnimator>;

        $r4 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke $r3.<android.animation.StateListAnimator: void setState(int[])>($r4);

     label2:
        return;
    }

    public void drawableHotspotChanged(float, float)
    {
        android.view.View r0;
        float f0, f1;
        android.graphics.drawable.Drawable $r1, $r2;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setHotspot(float,float)>(f0, f1);

     label1:
        return;
    }

    public void refreshDrawableState()
    {
        android.view.View r0;
        android.view.ViewParent r1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 1024;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        virtualinvoke r0.<android.view.View: void drawableStateChanged()>();

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r1 == null goto label1;

        interfaceinvoke r1.<android.view.ViewParent: void childDrawableStateChanged(android.view.View)>(r0);

     label1:
        return;
    }

    public final int[] getDrawableState()
    {
        android.view.View r0;
        int[] $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: int[] mDrawableState>;

        if $r1 == null goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 1024;

        if $i3 != 0 goto label1;

        $r4 = r0.<android.view.View: int[] mDrawableState>;

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<android.view.View: int[] onCreateDrawableState(int)>(0);

        r0.<android.view.View: int[] mDrawableState> = $r2;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -1025;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        $r3 = r0.<android.view.View: int[] mDrawableState>;

        return $r3;
    }

    protected int[] onCreateDrawableState(int)
    {
        android.view.View r0, $r9;
        int i0, i1, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        int[] r1, r2, $r8;
        short s2;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.view.View$AttachInfo $r3, $r5;
        int[][] $r4;
        android.view.ViewParent $r6, $r7;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i4 = r0.<android.view.View: int mViewFlags>;

        $i5 = $i4 & 4194304;

        if $i5 != 4194304 goto label01;

        $r6 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z4 = $r6 instanceof android.view.View;

        if $z4 == 0 goto label01;

        $r7 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r9 = (android.view.View) $r7;

        $r8 = virtualinvoke $r9.<android.view.View: int[] onCreateDrawableState(int)>(i0);

        return $r8;

     label01:
        i1 = r0.<android.view.View: int mPrivateFlags>;

        s2 = 0;

        $i6 = i1 & 16384;

        if $i6 == 0 goto label02;

        s2 = s2 | 16;

     label02:
        $i7 = r0.<android.view.View: int mViewFlags>;

        $i8 = $i7 & 32;

        if $i8 != 0 goto label03;

        s2 = s2 | 8;

     label03:
        $z0 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z0 == 0 goto label04;

        s2 = s2 | 4;

     label04:
        $i9 = i1 & 4;

        if $i9 == 0 goto label05;

        s2 = s2 | 2;

     label05:
        $z1 = virtualinvoke r0.<android.view.View: boolean hasWindowFocus()>();

        if $z1 == 0 goto label06;

        s2 = s2 | 1;

     label06:
        $i10 = i1 & 1073741824;

        if $i10 == 0 goto label07;

        s2 = s2 | 32;

     label07:
        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label08;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z2 = $r5.<android.view.View$AttachInfo: boolean mHardwareAccelerationRequested>;

        if $z2 == 0 goto label08;

        $z3 = staticinvoke <android.view.HardwareRenderer: boolean isAvailable()>();

        if $z3 == 0 goto label08;

        s2 = s2 | 64;

     label08:
        $i11 = i1 & 268435456;

        if $i11 == 0 goto label09;

        s2 = s2 | 128;

     label09:
        i3 = r0.<android.view.View: int mPrivateFlags2>;

        $i13 = i3 & 1;

        if $i13 == 0 goto label10;

        s2 = s2 | 256;

     label10:
        $i12 = i3 & 2;

        if $i12 == 0 goto label11;

        s2 = s2 | 512;

     label11:
        $r4 = <android.view.View: int[][] VIEW_STATE_SETS>;

        r1 = $r4[s2];

        if i0 != 0 goto label12;

        return r1;

     label12:
        if r1 == null goto label13;

        $i14 = lengthof r1;

        $i16 = $i14 + i0;

        r2 = newarray (int)[$i16];

        $i15 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r1, 0, r2, 0, $i15);

        goto label14;

     label13:
        r2 = newarray (int)[i0];

     label14:
        return r2;
    }

    protected static int[] mergeDrawableStates(int[], int[])
    {
        int[] r0, r1;
        int i0, i1, $i2, $i3, $i4;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i0 = lengthof r0;

        i1 = i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $i4 = r0[i1];

        if $i4 != 0 goto label2;

        i1 = i1 + -1;

        goto label1;

     label2:
        $i3 = i1 + 1;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r1, 0, r0, $i3, $i2);

        return r0;
    }

    public void jumpDrawablesToCurrentState()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable $r1, $r4;
        android.animation.StateListAnimator $r2, $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r1 == null goto label1;

        $r4 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void jumpToCurrentState()>();

     label1:
        $r2 = r0.<android.view.View: android.animation.StateListAnimator mStateListAnimator>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.View: android.animation.StateListAnimator mStateListAnimator>;

        virtualinvoke $r3.<android.animation.StateListAnimator: void jumpToCurrentState()>();

     label2:
        return;
    }

    public void setBackgroundColor(int)
    {
        android.view.View r0;
        int i0;
        android.graphics.drawable.Drawable $r1, $r3, $r4;
        boolean $z0;
        android.graphics.drawable.ColorDrawable $r2, $r5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $z0 = $r1 instanceof android.graphics.drawable.ColorDrawable;

        if $z0 == 0 goto label1;

        $r3 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $r4 = virtualinvoke $r3.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        $r5 = (android.graphics.drawable.ColorDrawable) $r4;

        virtualinvoke $r5.<android.graphics.drawable.ColorDrawable: void setColor(int)>(i0);

        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        r0.<android.view.View: int mBackgroundResource> = 0;

        goto label2;

     label1:
        $r2 = new android.graphics.drawable.ColorDrawable;

        specialinvoke $r2.<android.graphics.drawable.ColorDrawable: void <init>(int)>(i0);

        virtualinvoke r0.<android.view.View: void setBackground(android.graphics.drawable.Drawable)>($r2);

     label2:
        return;
    }

    public void setBackgroundResource(int)
    {
        android.view.View r0;
        int i0, $i1;
        android.graphics.drawable.Drawable r1;
        android.content.Context $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $i1 = r0.<android.view.View: int mBackgroundResource>;

        if i0 != $i1 goto label1;

        return;

     label1:
        r1 = null;

        if i0 == 0 goto label2;

        $r2 = r0.<android.view.View: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(i0);

     label2:
        virtualinvoke r0.<android.view.View: void setBackground(android.graphics.drawable.Drawable)>(r1);

        r0.<android.view.View: int mBackgroundResource> = i0;

        return;
    }

    public void setBackground(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        virtualinvoke r0.<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    public void setBackgroundDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1, $r3, $r4, $r7, $r9, $r10, $r11, $r12;
        boolean z0, $z1, $z2, $z4;
        android.graphics.Rect r2, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;
        java.lang.ThreadLocal $r5, $r13;
        java.lang.Object $r6;
        int[] $r8;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        $r3 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r1 != $r3 goto label01;

        return;

     label01:
        z0 = 0;

        r0.<android.view.View: int mBackgroundResource> = 0;

        $r4 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r4 == null goto label02;

        $r12 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        virtualinvoke $r12.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

        $r11 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        virtualinvoke r0.<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>($r11);

     label02:
        if r1 == null goto label14;

        $r5 = <android.view.View: java.lang.ThreadLocal sThreadLocal>;

        $r6 = virtualinvoke $r5.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (android.graphics.Rect) $r6;

        if r2 != null goto label03;

        $r14 = new android.graphics.Rect;

        specialinvoke $r14.<android.graphics.Rect: void <init>()>();

        r2 = $r14;

        $r13 = <android.view.View: java.lang.ThreadLocal sThreadLocal>;

        virtualinvoke $r13.<java.lang.ThreadLocal: void set(java.lang.Object)>(r2);

     label03:
        virtualinvoke r0.<android.view.View: void resetResolvedDrawables()>();

        $i6 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setLayoutDirection(int)>($i6);

        $z1 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r2);

        if $z1 == 0 goto label07;

        virtualinvoke r0.<android.view.View: void resetResolvedPadding()>();

        $i17 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getLayoutDirection()>();

        lookupswitch($i17)
        {
            case 0: goto label05;
            case 1: goto label04;
            default: goto label05;
        };

     label04:
        $i21 = r2.<android.graphics.Rect: int right>;

        r0.<android.view.View: int mUserPaddingLeftInitial> = $i21;

        $i22 = r2.<android.graphics.Rect: int left>;

        r0.<android.view.View: int mUserPaddingRightInitial> = $i22;

        $i26 = r2.<android.graphics.Rect: int right>;

        $i25 = r2.<android.graphics.Rect: int top>;

        $i20 = r2.<android.graphics.Rect: int left>;

        $i19 = r2.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>($i26, $i25, $i20, $i19);

        goto label06;

     label05:
        $i23 = r2.<android.graphics.Rect: int left>;

        r0.<android.view.View: int mUserPaddingLeftInitial> = $i23;

        $i24 = r2.<android.graphics.Rect: int right>;

        r0.<android.view.View: int mUserPaddingRightInitial> = $i24;

        $i28 = r2.<android.graphics.Rect: int left>;

        $i27 = r2.<android.graphics.Rect: int top>;

        $i30 = r2.<android.graphics.Rect: int right>;

        $i29 = r2.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>($i28, $i27, $i30, $i29);

     label06:
        r0.<android.view.View: boolean mLeftPaddingDefined> = 0;

        r0.<android.view.View: boolean mRightPaddingDefined> = 0;

     label07:
        $r7 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r7 == null goto label08;

        $r9 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $i15 = virtualinvoke $r9.<android.graphics.drawable.Drawable: int getMinimumHeight()>();

        $i14 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getMinimumHeight()>();

        if $i15 != $i14 goto label08;

        $r10 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $i18 = virtualinvoke $r10.<android.graphics.drawable.Drawable: int getMinimumWidth()>();

        $i16 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getMinimumWidth()>();

        if $i18 == $i16 goto label09;

     label08:
        z0 = 1;

     label09:
        virtualinvoke r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        $z2 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z2 == 0 goto label10;

        $r8 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r8);

     label10:
        $i7 = virtualinvoke r0.<android.view.View: int getVisibility()>();

        if $i7 != 0 goto label11;

        $z4 = 1;

        goto label12;

     label11:
        $z4 = 0;

     label12:
        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z4, 0);

        r0.<android.view.View: android.graphics.drawable.Drawable mBackground> = r1;

        specialinvoke r0.<android.view.View: void applyBackgroundTint()>();

        $i9 = r0.<android.view.View: int mPrivateFlags>;

        $i8 = $i9 & 128;

        if $i8 == 0 goto label13;

        $i11 = r0.<android.view.View: int mPrivateFlags>;

        $i10 = $i11 & -129;

        r0.<android.view.View: int mPrivateFlags> = $i10;

        $i13 = r0.<android.view.View: int mPrivateFlags>;

        $i12 = $i13 | 256;

        r0.<android.view.View: int mPrivateFlags> = $i12;

        z0 = 1;

     label13:
        goto label16;

     label14:
        r0.<android.view.View: android.graphics.drawable.Drawable mBackground> = null;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 256;

        if $i1 == 0 goto label15;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -257;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 | 128;

        r0.<android.view.View: int mPrivateFlags> = $i5;

     label15:
        z0 = 1;

     label16:
        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        if z0 == 0 goto label17;

        virtualinvoke r0.<android.view.View: void requestLayout()>();

     label17:
        r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        return;
    }

    public android.graphics.drawable.Drawable getBackground()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        return $r1;
    }

    public void setBackgroundTintList(android.content.res.ColorStateList)
    {
        android.view.View r0;
        android.content.res.ColorStateList r1;
        android.view.View$TintInfo $r2, $r3, $r4, $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if $r2 != null goto label1;

        $r5 = new android.view.View$TintInfo;

        specialinvoke $r5.<android.view.View$TintInfo: void <init>(android.view.View$1)>(null);

        r0.<android.view.View: android.view.View$TintInfo mBackgroundTint> = $r5;

     label1:
        $r3 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r3.<android.view.View$TintInfo: android.content.res.ColorStateList mTintList> = r1;

        $r4 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r4.<android.view.View$TintInfo: boolean mHasTintList> = 1;

        specialinvoke r0.<android.view.View: void applyBackgroundTint()>();

        return;
    }

    public android.content.res.ColorStateList getBackgroundTintList()
    {
        android.view.View r0;
        android.view.View$TintInfo $r1, $r2;
        android.content.res.ColorStateList $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r3 = $r2.<android.view.View$TintInfo: android.content.res.ColorStateList mTintList>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setBackgroundTintMode(android.graphics.PorterDuff$Mode)
    {
        android.view.View r0;
        android.graphics.PorterDuff$Mode r1;
        android.view.View$TintInfo $r2, $r3, $r4, $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.PorterDuff$Mode;

        $r2 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if $r2 != null goto label1;

        $r5 = new android.view.View$TintInfo;

        specialinvoke $r5.<android.view.View$TintInfo: void <init>(android.view.View$1)>(null);

        r0.<android.view.View: android.view.View$TintInfo mBackgroundTint> = $r5;

     label1:
        $r3 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r3.<android.view.View$TintInfo: android.graphics.PorterDuff$Mode mTintMode> = r1;

        $r4 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r4.<android.view.View$TintInfo: boolean mHasTintMode> = 1;

        specialinvoke r0.<android.view.View: void applyBackgroundTint()>();

        return;
    }

    public android.graphics.PorterDuff$Mode getBackgroundTintMode()
    {
        android.view.View r0;
        android.view.View$TintInfo $r1, $r2;
        android.graphics.PorterDuff$Mode $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r3 = $r2.<android.view.View$TintInfo: android.graphics.PorterDuff$Mode mTintMode>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    private void applyBackgroundTint()
    {
        android.view.View r0;
        android.view.View$TintInfo r1, $r3;
        android.graphics.drawable.Drawable $r2, $r4, $r5, $r7, $r9;
        boolean $z0, $z1, $z2, $z3;
        android.graphics.PorterDuff$Mode $r6;
        android.content.res.ColorStateList $r8;

        r0 := @this: android.view.View;

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r2 == null goto label3;

        $r3 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if $r3 == null goto label3;

        r1 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $z0 = r1.<android.view.View$TintInfo: boolean mHasTintList>;

        if $z0 != 0 goto label1;

        $z3 = r1.<android.view.View$TintInfo: boolean mHasTintMode>;

        if $z3 == 0 goto label3;

     label1:
        $r4 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $r5 = virtualinvoke $r4.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        r0.<android.view.View: android.graphics.drawable.Drawable mBackground> = $r5;

        $z1 = r1.<android.view.View$TintInfo: boolean mHasTintList>;

        if $z1 == 0 goto label2;

        $r9 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $r8 = r1.<android.view.View$TintInfo: android.content.res.ColorStateList mTintList>;

        virtualinvoke $r9.<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>($r8);

     label2:
        $z2 = r1.<android.view.View$TintInfo: boolean mHasTintMode>;

        if $z2 == 0 goto label3;

        $r7 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $r6 = r1.<android.view.View$TintInfo: android.graphics.PorterDuff$Mode mTintMode>;

        virtualinvoke $r7.<android.graphics.drawable.Drawable: void setTintMode(android.graphics.PorterDuff$Mode)>($r6);

     label3:
        return;
    }

    public void setPadding(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<android.view.View: void resetResolvedPadding()>();

        r0.<android.view.View: int mUserPaddingStart> = -2147483648;

        r0.<android.view.View: int mUserPaddingEnd> = -2147483648;

        r0.<android.view.View: int mUserPaddingLeftInitial> = i0;

        r0.<android.view.View: int mUserPaddingRightInitial> = i2;

        r0.<android.view.View: boolean mLeftPaddingDefined> = 1;

        r0.<android.view.View: boolean mRightPaddingDefined> = 1;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    protected void internalSetPadding(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        boolean z0, $z1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r0.<android.view.View: int mUserPaddingLeft> = i0;

        r0.<android.view.View: int mUserPaddingRight> = i2;

        r0.<android.view.View: int mUserPaddingBottom> = i3;

        i4 = r0.<android.view.View: int mViewFlags>;

        z0 = 0;

        $i6 = i4 & 768;

        if $i6 == 0 goto label10;

        $i11 = i4 & 512;

        if $i11 == 0 goto label07;

        $i14 = i4 & 16777216;

        if $i14 != 0 goto label01;

        $i17 = 0;

        goto label02;

     label01:
        $i17 = virtualinvoke r0.<android.view.View: int getVerticalScrollbarWidth()>();

     label02:
        i5 = $i17;

        $i16 = r0.<android.view.View: int mVerticalScrollbarPosition>;

        tableswitch($i16)
        {
            case 0: goto label03;
            case 1: goto label06;
            case 2: goto label05;
            default: goto label07;
        };

     label03:
        $z1 = virtualinvoke r0.<android.view.View: boolean isLayoutRtl()>();

        if $z1 == 0 goto label04;

        i0 = i0 + i5;

        goto label07;

     label04:
        i2 = i2 + i5;

        goto label07;

     label05:
        i2 = i2 + i5;

        goto label07;

     label06:
        i0 = i0 + i5;

     label07:
        $i12 = i4 & 256;

        if $i12 == 0 goto label10;

        $i13 = i4 & 16777216;

        if $i13 != 0 goto label08;

        $i15 = 0;

        goto label09;

     label08:
        $i15 = virtualinvoke r0.<android.view.View: int getHorizontalScrollbarHeight()>();

     label09:
        i3 = i3 + $i15;

     label10:
        $i7 = r0.<android.view.View: int mPaddingLeft>;

        if $i7 == i0 goto label11;

        z0 = 1;

        r0.<android.view.View: int mPaddingLeft> = i0;

     label11:
        $i8 = r0.<android.view.View: int mPaddingTop>;

        if $i8 == i1 goto label12;

        z0 = 1;

        r0.<android.view.View: int mPaddingTop> = i1;

     label12:
        $i9 = r0.<android.view.View: int mPaddingRight>;

        if $i9 == i2 goto label13;

        z0 = 1;

        r0.<android.view.View: int mPaddingRight> = i2;

     label13:
        $i10 = r0.<android.view.View: int mPaddingBottom>;

        if $i10 == i3 goto label14;

        z0 = 1;

        r0.<android.view.View: int mPaddingBottom> = i3;

     label14:
        if z0 == 0 goto label15;

        virtualinvoke r0.<android.view.View: void requestLayout()>();

     label15:
        return;
    }

    public void setPaddingRelative(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i4;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<android.view.View: void resetResolvedPadding()>();

        r0.<android.view.View: int mUserPaddingStart> = i0;

        r0.<android.view.View: int mUserPaddingEnd> = i2;

        r0.<android.view.View: boolean mLeftPaddingDefined> = 1;

        r0.<android.view.View: boolean mRightPaddingDefined> = 1;

        $i4 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        lookupswitch($i4)
        {
            case 0: goto label2;
            case 1: goto label1;
            default: goto label2;
        };

     label1:
        r0.<android.view.View: int mUserPaddingLeftInitial> = i2;

        r0.<android.view.View: int mUserPaddingRightInitial> = i0;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>(i2, i1, i0, i3);

        goto label3;

     label2:
        r0.<android.view.View: int mUserPaddingLeftInitial> = i0;

        r0.<android.view.View: int mUserPaddingRightInitial> = i2;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>(i0, i1, i2, i3);

     label3:
        return;
    }

    public int getPaddingTop()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPaddingTop>;

        return $i0;
    }

    public int getPaddingBottom()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPaddingBottom>;

        return $i0;
    }

    public int getPaddingLeft()
    {
        android.view.View r0;
        boolean $z0;
        int $i0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isPaddingResolved()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        $i0 = r0.<android.view.View: int mPaddingLeft>;

        return $i0;
    }

    public int getPaddingStart()
    {
        android.view.View r0;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isPaddingResolved()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        $i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        if $i0 != 1 goto label2;

        $i1 = r0.<android.view.View: int mPaddingRight>;

        goto label3;

     label2:
        $i1 = r0.<android.view.View: int mPaddingLeft>;

     label3:
        return $i1;
    }

    public int getPaddingRight()
    {
        android.view.View r0;
        boolean $z0;
        int $i0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isPaddingResolved()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        $i0 = r0.<android.view.View: int mPaddingRight>;

        return $i0;
    }

    public int getPaddingEnd()
    {
        android.view.View r0;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isPaddingResolved()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        $i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        if $i0 != 1 goto label2;

        $i1 = r0.<android.view.View: int mPaddingLeft>;

        goto label3;

     label2:
        $i1 = r0.<android.view.View: int mPaddingRight>;

     label3:
        return $i1;
    }

    public boolean isPaddingRelative()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mUserPaddingStart>;

        if $i0 != -2147483648 goto label1;

        $i1 = r0.<android.view.View: int mUserPaddingEnd>;

        if $i1 == -2147483648 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    android.graphics.Insets computeOpticalInsets()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable $r1, $r2;
        android.graphics.Insets $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r1 != null goto label1;

        $r3 = <android.graphics.Insets: android.graphics.Insets NONE>;

        goto label2;

     label1:
        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $r3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: android.graphics.Insets getOpticalInsets()>();

     label2:
        return $r3;
    }

    public void resetPaddingToInitialValues()
    {
        android.view.View r0;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: android.view.View;

        $z0 = specialinvoke r0.<android.view.View: boolean isRtlCompatibilityMode()>();

        if $z0 == 0 goto label01;

        $i8 = r0.<android.view.View: int mUserPaddingLeftInitial>;

        r0.<android.view.View: int mPaddingLeft> = $i8;

        $i9 = r0.<android.view.View: int mUserPaddingRightInitial>;

        r0.<android.view.View: int mPaddingRight> = $i9;

        return;

     label01:
        $z1 = virtualinvoke r0.<android.view.View: boolean isLayoutRtl()>();

        if $z1 == 0 goto label06;

        $i4 = r0.<android.view.View: int mUserPaddingEnd>;

        if $i4 < 0 goto label02;

        $i5 = r0.<android.view.View: int mUserPaddingEnd>;

        goto label03;

     label02:
        $i5 = r0.<android.view.View: int mUserPaddingLeftInitial>;

     label03:
        r0.<android.view.View: int mPaddingLeft> = $i5;

        $i6 = r0.<android.view.View: int mUserPaddingStart>;

        if $i6 < 0 goto label04;

        $i7 = r0.<android.view.View: int mUserPaddingStart>;

        goto label05;

     label04:
        $i7 = r0.<android.view.View: int mUserPaddingRightInitial>;

     label05:
        r0.<android.view.View: int mPaddingRight> = $i7;

        goto label11;

     label06:
        $i0 = r0.<android.view.View: int mUserPaddingStart>;

        if $i0 < 0 goto label07;

        $i1 = r0.<android.view.View: int mUserPaddingStart>;

        goto label08;

     label07:
        $i1 = r0.<android.view.View: int mUserPaddingLeftInitial>;

     label08:
        r0.<android.view.View: int mPaddingLeft> = $i1;

        $i2 = r0.<android.view.View: int mUserPaddingEnd>;

        if $i2 < 0 goto label09;

        $i3 = r0.<android.view.View: int mUserPaddingEnd>;

        goto label10;

     label09:
        $i3 = r0.<android.view.View: int mUserPaddingRightInitial>;

     label10:
        r0.<android.view.View: int mPaddingRight> = $i3;

     label11:
        return;
    }

    public android.graphics.Insets getOpticalInsets()
    {
        android.view.View r0;
        android.graphics.Insets $r1, $r2, $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.Insets mLayoutInsets>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<android.view.View: android.graphics.Insets computeOpticalInsets()>();

        r0.<android.view.View: android.graphics.Insets mLayoutInsets> = $r3;

     label1:
        $r2 = r0.<android.view.View: android.graphics.Insets mLayoutInsets>;

        return $r2;
    }

    public void setOpticalInsets(android.graphics.Insets)
    {
        android.view.View r0;
        android.graphics.Insets r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Insets;

        r0.<android.view.View: android.graphics.Insets mLayoutInsets> = r1;

        return;
    }

    public void setSelected(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        int $i0, $i1, $i2, $i3, $i4;
        byte $b5;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == z0 goto label6;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -5;

        if z0 == 0 goto label3;

        $b5 = 4;

        goto label4;

     label3:
        $b5 = 0;

     label4:
        $i4 = $i3 | $b5;

        r0.<android.view.View: int mPrivateFlags> = $i4;

        if z0 != 0 goto label5;

        specialinvoke r0.<android.view.View: void resetPressedState()>();

     label5:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        virtualinvoke r0.<android.view.View: void dispatchSetSelected(boolean)>(z0);

        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

     label6:
        return;
    }

    protected void dispatchSetSelected(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean isSelected()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setActivated(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 1073741824;

        if $i1 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == z0 goto label5;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -1073741825;

        if z0 == 0 goto label3;

        $i5 = 1073741824;

        goto label4;

     label3:
        $i5 = 0;

     label4:
        $i4 = $i3 | $i5;

        r0.<android.view.View: int mPrivateFlags> = $i4;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        virtualinvoke r0.<android.view.View: void dispatchSetActivated(boolean)>(z0);

     label5:
        return;
    }

    protected void dispatchSetActivated(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean isActivated()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 1073741824;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public android.view.ViewTreeObserver getViewTreeObserver()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r5;
        android.view.ViewTreeObserver $r2, $r3, $r4, $r6;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        return $r6;

     label1:
        $r2 = r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver>;

        if $r2 != null goto label2;

        $r4 = new android.view.ViewTreeObserver;

        specialinvoke $r4.<android.view.ViewTreeObserver: void <init>()>();

        r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver> = $r4;

     label2:
        $r3 = r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver>;

        return $r3;
    }

    public android.view.View getRootView()
    {
        android.view.View r0, r1, r7;
        android.view.View$AttachInfo $r2, $r6;
        android.view.ViewParent $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: android.view.View;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label1;

        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r1 = $r6.<android.view.View$AttachInfo: android.view.View mRootView>;

        if r1 == null goto label1;

        return r1;

     label1:
        r7 = r0;

     label2:
        $r3 = r7.<android.view.View: android.view.ViewParent mParent>;

        if $r3 == null goto label3;

        $r4 = r7.<android.view.View: android.view.ViewParent mParent>;

        $z0 = $r4 instanceof android.view.View;

        if $z0 == 0 goto label3;

        $r5 = r7.<android.view.View: android.view.ViewParent mParent>;

        r7 = (android.view.View) $r5;

        goto label2;

     label3:
        return r7;
    }

    public boolean toGlobalMotionEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        android.view.View$AttachInfo r2;
        android.graphics.Matrix r3, $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 != null goto label1;

        return 0;

     label1:
        r3 = r2.<android.view.View$AttachInfo: android.graphics.Matrix mTmpMatrix>;

        $r4 = <android.graphics.Matrix: android.graphics.Matrix IDENTITY_MATRIX>;

        virtualinvoke r3.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r4);

        virtualinvoke r0.<android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)>(r3);

        virtualinvoke r1.<android.view.MotionEvent: void transform(android.graphics.Matrix)>(r3);

        return 1;
    }

    public boolean toLocalMotionEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        android.view.View$AttachInfo r2;
        android.graphics.Matrix r3, $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 != null goto label1;

        return 0;

     label1:
        r3 = r2.<android.view.View$AttachInfo: android.graphics.Matrix mTmpMatrix>;

        $r4 = <android.graphics.Matrix: android.graphics.Matrix IDENTITY_MATRIX>;

        virtualinvoke r3.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r4);

        virtualinvoke r0.<android.view.View: void transformMatrixToLocal(android.graphics.Matrix)>(r3);

        virtualinvoke r1.<android.view.MotionEvent: void transform(android.graphics.Matrix)>(r3);

        return 1;
    }

    public void transformMatrixToGlobal(android.graphics.Matrix)
    {
        android.view.View r0, r3;
        android.graphics.Matrix r1, $r4;
        android.view.ViewParent r2;
        boolean $z0, $z1, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        float $f0, $f1, $f2, $f3, $f4;
        android.view.ViewRootImpl r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Matrix;

        r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = r2 instanceof android.view.View;

        if $z0 == 0 goto label1;

        r3 = (android.view.View) r2;

        virtualinvoke r3.<android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)>(r1);

        $i5 = r3.<android.view.View: int mScrollX>;

        $i4 = neg $i5;

        $f3 = (float) $i4;

        $i7 = r3.<android.view.View: int mScrollY>;

        $i6 = neg $i7;

        $f4 = (float) $i6;

        virtualinvoke r1.<android.graphics.Matrix: boolean preTranslate(float,float)>($f3, $f4);

        goto label2;

     label1:
        $z1 = r2 instanceof android.view.ViewRootImpl;

        if $z1 == 0 goto label2;

        r5 = (android.view.ViewRootImpl) r2;

        virtualinvoke r5.<android.view.ViewRootImpl: void transformMatrixToGlobal(android.graphics.Matrix)>(r1);

        $i2 = r5.<android.view.ViewRootImpl: int mCurScrollY>;

        $i3 = neg $i2;

        $f2 = (float) $i3;

        virtualinvoke r1.<android.graphics.Matrix: boolean preTranslate(float,float)>(0.0F, $f2);

     label2:
        $i0 = r0.<android.view.View: int mLeft>;

        $f1 = (float) $i0;

        $i1 = r0.<android.view.View: int mTop>;

        $f0 = (float) $i1;

        virtualinvoke r1.<android.graphics.Matrix: boolean preTranslate(float,float)>($f1, $f0);

        $z3 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if $z3 != 0 goto label3;

        $r4 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke r1.<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>($r4);

     label3:
        return;
    }

    public void transformMatrixToLocal(android.graphics.Matrix)
    {
        android.view.View r0, r3;
        android.graphics.Matrix r1, $r4;
        android.view.ViewParent r2;
        boolean $z0, $z1, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        float $f0, $f1, $f2, $f3, $f4;
        android.view.ViewRootImpl r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Matrix;

        r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = r2 instanceof android.view.View;

        if $z0 == 0 goto label1;

        r3 = (android.view.View) r2;

        virtualinvoke r3.<android.view.View: void transformMatrixToLocal(android.graphics.Matrix)>(r1);

        $i5 = r3.<android.view.View: int mScrollX>;

        $f4 = (float) $i5;

        $i6 = r3.<android.view.View: int mScrollY>;

        $f3 = (float) $i6;

        virtualinvoke r1.<android.graphics.Matrix: boolean postTranslate(float,float)>($f4, $f3);

        goto label2;

     label1:
        $z1 = r2 instanceof android.view.ViewRootImpl;

        if $z1 == 0 goto label2;

        r5 = (android.view.ViewRootImpl) r2;

        virtualinvoke r5.<android.view.ViewRootImpl: void transformMatrixToLocal(android.graphics.Matrix)>(r1);

        $i4 = r5.<android.view.ViewRootImpl: int mCurScrollY>;

        $f2 = (float) $i4;

        virtualinvoke r1.<android.graphics.Matrix: boolean postTranslate(float,float)>(0.0F, $f2);

     label2:
        $i0 = r0.<android.view.View: int mLeft>;

        $i1 = neg $i0;

        $f1 = (float) $i1;

        $i2 = r0.<android.view.View: int mTop>;

        $i3 = neg $i2;

        $f0 = (float) $i3;

        virtualinvoke r1.<android.graphics.Matrix: boolean postTranslate(float,float)>($f1, $f0);

        $z3 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if $z3 != 0 goto label3;

        $r4 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getInverseMatrix()>();

        virtualinvoke r1.<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>($r4);

     label3:
        return;
    }

    public int[] getLocationOnScreen()
    {
        android.view.View r0;
        int[] r1;

        r0 := @this: android.view.View;

        r1 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r1);

        return r1;
    }

    public void getLocationOnScreen(int[])
    {
        android.view.View r0;
        int[] r1;
        android.view.View$AttachInfo r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        r1 := @parameter0: int[];

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r1);

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $i1 = r1[0];

        $i0 = r2.<android.view.View$AttachInfo: int mWindowLeft>;

        $i2 = $i1 + $i0;

        r1[0] = $i2;

        $i4 = r1[1];

        $i3 = r2.<android.view.View$AttachInfo: int mWindowTop>;

        $i5 = $i4 + $i3;

        r1[1] = $i5;

     label1:
        return;
    }

    public void getLocationInWindow(int[])
    {
        android.view.View r0, r4;
        int[] r1;
        float[] r2;
        android.view.ViewParent r3;
        java.lang.IllegalArgumentException $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.View$AttachInfo $r6, $r7;
        boolean $z0, $z1, $z2, $z3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24;
        android.graphics.Matrix $r8, $r9;
        android.view.ViewRootImpl r10;

        r0 := @this: android.view.View;

        r1 := @parameter0: int[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 >= 2 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("location must be an array of two integers");

        throw $r5;

     label2:
        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r6 != null goto label3;

        r1[1] = 0;

        r1[0] = 0;

        return;

     label3:
        $r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r7.<android.view.View$AttachInfo: float[] mTmpTransformLocation>;

        r2[1] = 0.0F;

        r2[0] = 0.0F;

        $z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if $z0 != 0 goto label4;

        $r9 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r9.<android.graphics.Matrix: void mapPoints(float[])>(r2);

     label4:
        $f1 = r2[0];

        $i1 = r0.<android.view.View: int mLeft>;

        $f0 = (float) $i1;

        $f2 = $f1 + $f0;

        r2[0] = $f2;

        $f5 = r2[1];

        $i2 = r0.<android.view.View: int mTop>;

        $f3 = (float) $i2;

        $f4 = $f5 + $f3;

        r2[1] = $f4;

        r3 = r0.<android.view.View: android.view.ViewParent mParent>;

     label5:
        $z2 = r3 instanceof android.view.View;

        if $z2 == 0 goto label7;

        r4 = (android.view.View) r3;

        $f15 = r2[0];

        $i6 = r4.<android.view.View: int mScrollX>;

        $f13 = (float) $i6;

        $f16 = $f15 - $f13;

        r2[0] = $f16;

        $f17 = r2[1];

        $i7 = r4.<android.view.View: int mScrollY>;

        $f14 = (float) $i7;

        $f18 = $f17 - $f14;

        r2[1] = $f18;

        $z3 = virtualinvoke r4.<android.view.View: boolean hasIdentityMatrix()>();

        if $z3 != 0 goto label6;

        $r8 = virtualinvoke r4.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r8.<android.graphics.Matrix: void mapPoints(float[])>(r2);

     label6:
        $f21 = r2[0];

        $i8 = r4.<android.view.View: int mLeft>;

        $f20 = (float) $i8;

        $f19 = $f21 + $f20;

        r2[0] = $f19;

        $f24 = r2[1];

        $i9 = r4.<android.view.View: int mTop>;

        $f23 = (float) $i9;

        $f22 = $f24 + $f23;

        r2[1] = $f22;

        r3 = r4.<android.view.View: android.view.ViewParent mParent>;

        goto label5;

     label7:
        $z1 = r3 instanceof android.view.ViewRootImpl;

        if $z1 == 0 goto label8;

        r10 = (android.view.ViewRootImpl) r3;

        $f12 = r2[1];

        $i5 = r10.<android.view.ViewRootImpl: int mCurScrollY>;

        $f10 = (float) $i5;

        $f11 = $f12 - $f10;

        r2[1] = $f11;

     label8:
        $f7 = r2[0];

        $f6 = $f7 + 0.5F;

        $i3 = (int) $f6;

        r1[0] = $i3;

        $f8 = r2[1];

        $f9 = $f8 + 0.5F;

        $i4 = (int) $f9;

        r1[1] = $i4;

        return;
    }

    protected android.view.View findViewTraversal(int)
    {
        android.view.View r0;
        int i0, $i1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mID>;

        if i0 != $i1 goto label1;

        return r0;

     label1:
        return null;
    }

    protected android.view.View findViewWithTagTraversal(java.lang.Object)
    {
        android.view.View r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r2 = r0.<android.view.View: java.lang.Object mTag>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        return null;
    }

    protected android.view.View findViewByPredicateTraversal(com.android.internal.util.Predicate, android.view.View)
    {
        android.view.View r0, r2;
        com.android.internal.util.Predicate r1;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: com.android.internal.util.Predicate;

        r2 := @parameter1: android.view.View;

        $z0 = interfaceinvoke r1.<com.android.internal.util.Predicate: boolean apply(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        return null;
    }

    public final android.view.View findViewById(int)
    {
        android.view.View r0, $r1;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<android.view.View: android.view.View findViewTraversal(int)>(i0);

        return $r1;
    }

    final android.view.View findViewByAccessibilityId(int)
    {
        android.view.View r0, $r1;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<android.view.View: android.view.View findViewByAccessibilityIdTraversal(int)>(i0);

        return $r1;
    }

    public android.view.View findViewByAccessibilityIdTraversal(int)
    {
        android.view.View r0;
        int i0, $i1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.view.View: int getAccessibilityViewId()>();

        if $i1 != i0 goto label1;

        return r0;

     label1:
        return null;
    }

    public final android.view.View findViewWithTag(java.lang.Object)
    {
        android.view.View r0, $r2;
        java.lang.Object r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<android.view.View: android.view.View findViewWithTagTraversal(java.lang.Object)>(r1);

        return $r2;
    }

    public final android.view.View findViewByPredicate(com.android.internal.util.Predicate)
    {
        android.view.View r0, $r2;
        com.android.internal.util.Predicate r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: com.android.internal.util.Predicate;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View findViewByPredicateTraversal(com.android.internal.util.Predicate,android.view.View)>(r1, null);

        return $r2;
    }

    public final android.view.View findViewByPredicateInsideOut(android.view.View, com.android.internal.util.Predicate)
    {
        android.view.View r0, r1, r3, r4;
        com.android.internal.util.Predicate r2;
        android.view.ViewParent r5;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: com.android.internal.util.Predicate;

        r3 = null;

     label1:
        r4 = virtualinvoke r1.<android.view.View: android.view.View findViewByPredicateTraversal(com.android.internal.util.Predicate,android.view.View)>(r2, r3);

        if r4 != null goto label2;

        if r1 != r0 goto label3;

     label2:
        return r4;

     label3:
        r5 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();

        if r5 == null goto label4;

        $z0 = r5 instanceof android.view.View;

        if $z0 != 0 goto label5;

     label4:
        return null;

     label5:
        r3 = r1;

        r1 = (android.view.View) r5;

        goto label1;
    }

    public void setId(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mID> = i0;

        $i1 = r0.<android.view.View: int mID>;

        if $i1 != -1 goto label1;

        $i2 = r0.<android.view.View: int mLabelForId>;

        if $i2 == -1 goto label1;

        $i3 = staticinvoke <android.view.View: int generateViewId()>();

        r0.<android.view.View: int mID> = $i3;

     label1:
        return;
    }

    public void setIsRootNamespace(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 | 8;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -9;

        r0.<android.view.View: int mPrivateFlags> = $i1;

     label2:
        return;
    }

    public boolean isRootNamespace()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getId()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mID>;

        return $i0;
    }

    public java.lang.Object getTag()
    {
        android.view.View r0;
        java.lang.Object $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: java.lang.Object mTag>;

        return $r1;
    }

    public void setTag(java.lang.Object)
    {
        android.view.View r0;
        java.lang.Object r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Object;

        r0.<android.view.View: java.lang.Object mTag> = r1;

        return;
    }

    public java.lang.Object getTag(int)
    {
        android.view.View r0;
        int i0;
        android.util.SparseArray $r1, $r2;
        java.lang.Object $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.View: android.util.SparseArray mKeyedTags>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.util.SparseArray mKeyedTags>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        return $r3;

     label1:
        return null;
    }

    public void setTag(int, java.lang.Object)
    {
        android.view.View r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $i1 = i0 >>> 24;

        if $i1 >= 2 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The key must be an application-specific resource id.");

        throw $r2;

     label1:
        specialinvoke r0.<android.view.View: void setKeyedTag(int,java.lang.Object)>(i0, r1);

        return;
    }

    public void setTagInternal(int, java.lang.Object)
    {
        android.view.View r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $i1 = i0 >>> 24;

        if $i1 == 1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The key must be a framework-specific resource id.");

        throw $r2;

     label1:
        specialinvoke r0.<android.view.View: void setKeyedTag(int,java.lang.Object)>(i0, r1);

        return;
    }

    private void setKeyedTag(int, java.lang.Object)
    {
        android.view.View r0;
        int i0;
        java.lang.Object r1;
        android.util.SparseArray $r2, $r3, $r4;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<android.view.View: android.util.SparseArray mKeyedTags>;

        if $r2 != null goto label1;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>(int)>(2);

        r0.<android.view.View: android.util.SparseArray mKeyedTags> = $r4;

     label1:
        $r3 = r0.<android.view.View: android.util.SparseArray mKeyedTags>;

        virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1);

        return;
    }

    public void debug()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void debug(int)>(0);

        return;
    }

    protected void debug(int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i20, $i21, $i23, $i25, $i27, $i28, $i29;
        java.lang.String r1, $r45, $r55, $r66, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95;
        java.lang.Object r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r44, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77;
        android.view.ViewGroup$LayoutParams $r42, $r43;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i2 = i0 - 1;

        r1 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>($i2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+ ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        r78 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = virtualinvoke r0.<android.view.View: int getId()>();

        if i1 == -1 goto label1;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r78);

        $r74 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (id=");

        $r77 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r76 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r78 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r2 = virtualinvoke r0.<android.view.View: java.lang.Object getTag()>();

        if r2 == null goto label2;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r72 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r78);

        $r71 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (tag=");

        $r70 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r69 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r78 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", r78);

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label3;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r66 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>(i0);

        $r65 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r64 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FOCUSED");

        r79 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", r79);

     label3:
        r80 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>(i0);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r80);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("frame={");

        $i6 = r0.<android.view.View: int mLeft>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i7 = r0.<android.view.View: int mTop>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i8 = r0.<android.view.View: int mRight>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i9 = r0.<android.view.View: int mBottom>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} scroll={");

        $i10 = r0.<android.view.View: int mScrollX>;

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i11 = r0.<android.view.View: int mScrollY>;

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} ");

        r81 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", r81);

        $i13 = r0.<android.view.View: int mPaddingLeft>;

        if $i13 != 0 goto label4;

        $i29 = r0.<android.view.View: int mPaddingTop>;

        if $i29 != 0 goto label4;

        $i28 = r0.<android.view.View: int mPaddingRight>;

        if $i28 != 0 goto label4;

        $i27 = r0.<android.view.View: int mPaddingBottom>;

        if $i27 == 0 goto label5;

     label4:
        r82 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>(i0);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r82);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("padding={");

        $i14 = r0.<android.view.View: int mPaddingLeft>;

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i15 = r0.<android.view.View: int mPaddingTop>;

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i17 = r0.<android.view.View: int mPaddingRight>;

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i16 = r0.<android.view.View: int mPaddingBottom>;

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        r83 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", r83);

     label5:
        r84 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>(i0);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mMeasureWidth=");

        $i20 = r0.<android.view.View: int mMeasuredWidth>;

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mMeasureHeight=");

        $i21 = r0.<android.view.View: int mMeasuredHeight>;

        $r36 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        r85 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", r85);

        r86 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>(i0);

        $r42 = r0.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams>;

        if $r42 != null goto label6;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r86);

        $r59 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BAD! no layout params");

        r87 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label6:
        $r43 = r0.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams>;

        r87 = virtualinvoke $r43.<android.view.ViewGroup$LayoutParams: java.lang.String debug(java.lang.String)>(r86);

     label7:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", r87);

        r88 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>(i0);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r88);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("flags={");

        r89 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r89);

        $i23 = r0.<android.view.View: int mViewFlags>;

        $r45 = staticinvoke <android.view.View: java.lang.String printFlags(int)>($i23);

        $r44 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        r90 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r90);

        $r52 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        r91 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", r91);

        r92 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>(i0);

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r92);

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("privateFlags={");

        r93 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r93);

        $i25 = r0.<android.view.View: int mPrivateFlags>;

        $r55 = staticinvoke <android.view.View: java.lang.String printPrivateFlags(int)>($i25);

        $r56 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        r94 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r94);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        r95 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", r95);

        return;
    }

    protected static java.lang.String debugIndent(int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.StringBuilder r0, $r1, $r3;
        java.lang.String $r2;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        $i2 = i0 * 2;

        $i3 = $i2 + 3;

        $i4 = $i3 * 2;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i4);

        r0 = $r1;

        i1 = 0;

     label1:
        $i5 = i0 * 2;

        $i6 = $i5 + 3;

        if i1 >= $i6 goto label2;

        $r3 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public int getBaseline()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return -1;
    }

    public boolean isInLayout()
    {
        android.view.View r0;
        android.view.ViewRootImpl r1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.view.ViewRootImpl: boolean isInLayout()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void requestLayout()
    {
        android.view.View r0, $r7, $r11;
        android.view.ViewRootImpl r1;
        android.util.LongSparseLongArray $r2, $r14;
        android.view.View$AttachInfo $r3, $r5, $r6, $r8, $r12, $r13;
        int $i0, $i1, $i2, $i3;
        android.view.ViewParent $r4, $r9, $r10;
        boolean $z0, $z1, $z2;

        r0 := @this: android.view.View;

        $r2 = r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache>;

        if $r2 == null goto label1;

        $r14 = r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache>;

        virtualinvoke $r14.<android.util.LongSparseLongArray: void clear()>();

     label1:
        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label3;

        $r12 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r11 = $r12.<android.view.View$AttachInfo: android.view.View mViewRequestingLayout>;

        if $r11 != null goto label3;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r1 == null goto label2;

        $z2 = virtualinvoke r1.<android.view.ViewRootImpl: boolean isInLayout()>();

        if $z2 == 0 goto label2;

        $z1 = virtualinvoke r1.<android.view.ViewRootImpl: boolean requestLayoutDuringLayout(android.view.View)>(r0);

        if $z1 != 0 goto label2;

        return;

     label2:
        $r13 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r13.<android.view.View$AttachInfo: android.view.View mViewRequestingLayout> = r0;

     label3:
        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 4096;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 | -2147483648;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r4 == null goto label4;

        $r9 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = interfaceinvoke $r9.<android.view.ViewParent: boolean isLayoutRequested()>();

        if $z0 != 0 goto label4;

        $r10 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r10.<android.view.ViewParent: void requestLayout()>();

     label4:
        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r5 == null goto label5;

        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.view.View mViewRequestingLayout>;

        if $r7 != r0 goto label5;

        $r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r8.<android.view.View$AttachInfo: android.view.View mViewRequestingLayout> = null;

     label5:
        return;
    }

    public void forceLayout()
    {
        android.view.View r0;
        android.util.LongSparseLongArray $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache>;

        virtualinvoke $r2.<android.util.LongSparseLongArray: void clear()>();

     label1:
        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 4096;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 | -2147483648;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        return;
    }

    public final void measure(int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i29, $i30, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, i43;
        boolean z0, $z1, $z3;
        android.graphics.Insets r1;
        long l4, $l5, $l6, $l7, $l8, $l23, $l25, $l26, $l27, $l28, $l31, l42;
        android.view.ViewParent $r2;
        android.util.LongSparseLongArray $r3, $r4, $r5, $r6, $r8;
        java.lang.IllegalStateException $r7;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 = staticinvoke <android.view.View: boolean isLayoutModeOptical(java.lang.Object)>(r0);

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z1 = staticinvoke <android.view.View: boolean isLayoutModeOptical(java.lang.Object)>($r2);

        if z0 == $z1 goto label05;

        r1 = virtualinvoke r0.<android.view.View: android.graphics.Insets getOpticalInsets()>();

        $i37 = r1.<android.graphics.Insets: int left>;

        $i38 = r1.<android.graphics.Insets: int right>;

        i2 = $i37 + $i38;

        $i40 = r1.<android.graphics.Insets: int top>;

        $i36 = r1.<android.graphics.Insets: int bottom>;

        i3 = $i40 + $i36;

        if z0 == 0 goto label01;

        $i41 = neg i2;

        goto label02;

     label01:
        $i41 = i2;

     label02:
        i0 = staticinvoke <android.view.View$MeasureSpec: int adjust(int,int)>(i0, $i41);

        if z0 == 0 goto label03;

        $i39 = neg i3;

        goto label04;

     label03:
        $i39 = i3;

     label04:
        i1 = staticinvoke <android.view.View$MeasureSpec: int adjust(int,int)>(i1, $i39);

     label05:
        $l5 = (long) i0;

        $l8 = $l5 << 32;

        $l6 = (long) i1;

        $l7 = $l6 & 4294967295L;

        l42 = $l8 | $l7;

        $r3 = r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache>;

        if $r3 != null goto label06;

        $r8 = new android.util.LongSparseLongArray;

        specialinvoke $r8.<android.util.LongSparseLongArray: void <init>(int)>(2);

        r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache> = $r8;

     label06:
        $i9 = r0.<android.view.View: int mPrivateFlags>;

        $i11 = $i9 & 4096;

        if $i11 == 4096 goto label07;

        $i34 = r0.<android.view.View: int mOldWidthMeasureSpec>;

        if i0 != $i34 goto label07;

        $i33 = r0.<android.view.View: int mOldHeightMeasureSpec>;

        if i1 == $i33 goto label14;

     label07:
        $i10 = r0.<android.view.View: int mPrivateFlags>;

        $i12 = $i10 & -2049;

        r0.<android.view.View: int mPrivateFlags> = $i12;

        virtualinvoke r0.<android.view.View: boolean resolveRtlPropertiesIfNeeded()>();

        $i14 = r0.<android.view.View: int mPrivateFlags>;

        $i13 = $i14 & 4096;

        if $i13 != 4096 goto label08;

        $i15 = -1;

        goto label09;

     label08:
        $r4 = r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache>;

        $i15 = virtualinvoke $r4.<android.util.LongSparseLongArray: int indexOfKey(long)>(l42);

     label09:
        i43 = $i15;

        if i43 < 0 goto label10;

        $z3 = <android.view.View: boolean sIgnoreMeasureCache>;

        if $z3 == 0 goto label11;

     label10:
        virtualinvoke r0.<android.view.View: void onMeasure(int,int)>(i0, i1);

        $i17 = r0.<android.view.View: int mPrivateFlags3>;

        $i16 = $i17 & -9;

        r0.<android.view.View: int mPrivateFlags3> = $i16;

        goto label12;

     label11:
        $r6 = r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache>;

        l4 = virtualinvoke $r6.<android.util.LongSparseLongArray: long valueAt(int)>(i43);

        $l31 = l4 >> 32;

        $i29 = (int) $l31;

        $i32 = (int) l4;

        specialinvoke r0.<android.view.View: void setMeasuredDimensionRaw(int,int)>($i29, $i32);

        $i30 = r0.<android.view.View: int mPrivateFlags3>;

        $i35 = $i30 | 8;

        r0.<android.view.View: int mPrivateFlags3> = $i35;

     label12:
        $i19 = r0.<android.view.View: int mPrivateFlags>;

        $i18 = $i19 & 2048;

        if $i18 == 2048 goto label13;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("onMeasure() did not set the measured dimension by calling setMeasuredDimension()");

        throw $r7;

     label13:
        $i21 = r0.<android.view.View: int mPrivateFlags>;

        $i20 = $i21 | 8192;

        r0.<android.view.View: int mPrivateFlags> = $i20;

     label14:
        r0.<android.view.View: int mOldWidthMeasureSpec> = i0;

        r0.<android.view.View: int mOldHeightMeasureSpec> = i1;

        $r5 = r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache>;

        $i24 = r0.<android.view.View: int mMeasuredWidth>;

        $l25 = (long) $i24;

        $l28 = $l25 << 32;

        $i22 = r0.<android.view.View: int mMeasuredHeight>;

        $l23 = (long) $i22;

        $l27 = $l23 & 4294967295L;

        $l26 = $l28 | $l27;

        virtualinvoke $r5.<android.util.LongSparseLongArray: void put(long,long)>(l42, $l26);

        return;
    }

    protected void onMeasure(int, int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<android.view.View: int getSuggestedMinimumWidth()>();

        $i3 = staticinvoke <android.view.View: int getDefaultSize(int,int)>($i2, i0);

        $i4 = virtualinvoke r0.<android.view.View: int getSuggestedMinimumHeight()>();

        $i5 = staticinvoke <android.view.View: int getDefaultSize(int,int)>($i4, i1);

        virtualinvoke r0.<android.view.View: void setMeasuredDimension(int,int)>($i3, $i5);

        return;
    }

    protected final void setMeasuredDimension(int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean z0, $z1;
        android.graphics.Insets r1;
        android.view.ViewParent $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 = staticinvoke <android.view.View: boolean isLayoutModeOptical(java.lang.Object)>(r0);

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z1 = staticinvoke <android.view.View: boolean isLayoutModeOptical(java.lang.Object)>($r2);

        if z0 == $z1 goto label5;

        r1 = virtualinvoke r0.<android.view.View: android.graphics.Insets getOpticalInsets()>();

        $i5 = r1.<android.graphics.Insets: int left>;

        $i4 = r1.<android.graphics.Insets: int right>;

        i2 = $i5 + $i4;

        $i7 = r1.<android.graphics.Insets: int top>;

        $i6 = r1.<android.graphics.Insets: int bottom>;

        i3 = $i7 + $i6;

        if z0 == 0 goto label1;

        $i8 = i2;

        goto label2;

     label1:
        $i8 = neg i2;

     label2:
        i0 = i0 + $i8;

        if z0 == 0 goto label3;

        $i9 = i3;

        goto label4;

     label3:
        $i9 = neg i3;

     label4:
        i1 = i1 + $i9;

     label5:
        specialinvoke r0.<android.view.View: void setMeasuredDimensionRaw(int,int)>(i0, i1);

        return;
    }

    private void setMeasuredDimensionRaw(int, int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<android.view.View: int mMeasuredWidth> = i0;

        r0.<android.view.View: int mMeasuredHeight> = i1;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 | 2048;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        return;
    }

    public static int combineMeasuredStates(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 | i1;

        return $i2;
    }

    public static int resolveSize(int, int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.view.View: int resolveSizeAndState(int,int,int)>(i0, i1, 0);

        $i3 = $i2 & 16777215;

        return $i3;
    }

    public static int resolveSizeAndState(int, int, int)
    {
        int i0, i1, i2, i3, i4, i5, $i6, $i7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 = i0;

        i4 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i1);

        i5 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i1);

        lookupswitch(i4)
        {
            case -2147483648: goto label2;
            case 0: goto label1;
            case 1073741824: goto label4;
            default: goto label5;
        };

     label1:
        i3 = i0;

        goto label5;

     label2:
        if i5 >= i0 goto label3;

        i3 = i5 | 16777216;

        goto label5;

     label3:
        i3 = i0;

        goto label5;

     label4:
        i3 = i5;

     label5:
        $i6 = i2 & -16777216;

        $i7 = i3 | $i6;

        return $i7;
    }

    public static int getDefaultSize(int, int)
    {
        int i0, i1, i2, i3, i4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0;

        i3 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i1);

        i4 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i1);

        lookupswitch(i3)
        {
            case -2147483648: goto label2;
            case 0: goto label1;
            case 1073741824: goto label2;
            default: goto label3;
        };

     label1:
        i2 = i0;

        goto label3;

     label2:
        i2 = i4;

     label3:
        return i2;
    }

    protected int getSuggestedMinimumHeight()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r1 != null goto label1;

        $i2 = r0.<android.view.View: int mMinHeight>;

        goto label2;

     label1:
        $i0 = r0.<android.view.View: int mMinHeight>;

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $i1 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getMinimumHeight()>();

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

     label2:
        return $i2;
    }

    protected int getSuggestedMinimumWidth()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r1 != null goto label1;

        $i2 = r0.<android.view.View: int mMinWidth>;

        goto label2;

     label1:
        $i0 = r0.<android.view.View: int mMinWidth>;

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $i1 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getMinimumWidth()>();

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

     label2:
        return $i2;
    }

    public int getMinimumHeight()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mMinHeight>;

        return $i0;
    }

    public void setMinimumHeight(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mMinHeight> = i0;

        virtualinvoke r0.<android.view.View: void requestLayout()>();

        return;
    }

    public int getMinimumWidth()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mMinWidth>;

        return $i0;
    }

    public void setMinimumWidth(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mMinWidth> = i0;

        virtualinvoke r0.<android.view.View: void requestLayout()>();

        return;
    }

    public android.view.animation.Animation getAnimation()
    {
        android.view.View r0;
        android.view.animation.Animation $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.animation.Animation mCurrentAnimation>;

        return $r1;
    }

    public void startAnimation(android.view.animation.Animation)
    {
        android.view.View r0;
        android.view.animation.Animation r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.animation.Animation;

        virtualinvoke r1.<android.view.animation.Animation: void setStartTime(long)>(-1L);

        virtualinvoke r0.<android.view.View: void setAnimation(android.view.animation.Animation)>(r1);

        virtualinvoke r0.<android.view.View: void invalidateParentCaches()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        return;
    }

    public void clearAnimation()
    {
        android.view.View r0;
        android.view.animation.Animation $r1, $r2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.animation.Animation mCurrentAnimation>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.animation.Animation mCurrentAnimation>;

        virtualinvoke $r2.<android.view.animation.Animation: void detach()>();

     label1:
        r0.<android.view.View: android.view.animation.Animation mCurrentAnimation> = null;

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

        return;
    }

    public void setAnimation(android.view.animation.Animation)
    {
        android.view.View r0;
        android.view.animation.Animation r1;
        android.view.View$AttachInfo $r2, $r3;
        int $i0;
        long $l1, $l3;
        byte $b2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.animation.Animation;

        r0.<android.view.View: android.view.animation.Animation mCurrentAnimation> = r1;

        if r1 == null goto label2;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r3.<android.view.View$AttachInfo: int mDisplayState>;

        if $i0 != 1 goto label1;

        $l1 = virtualinvoke r1.<android.view.animation.Animation: long getStartTime()>();

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label1;

        $l3 = staticinvoke <android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>();

        virtualinvoke r1.<android.view.animation.Animation: void setStartTime(long)>($l3);

     label1:
        virtualinvoke r1.<android.view.animation.Animation: void reset()>();

     label2:
        return;
    }

    protected void onAnimationStart()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 65536;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        return;
    }

    protected void onAnimationEnd()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -65537;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        return;
    }

    protected boolean onSetAlpha(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean gatherTransparentRegion(android.graphics.Region)
    {
        android.view.View r0;
        android.graphics.Region r1;
        android.view.View$AttachInfo r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        int[] r3;
        android.graphics.drawable.Drawable $r4, $r5, $r6;
        android.graphics.Region$Op $r7;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Region;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label2;

        if r2 == null goto label2;

        i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = i0 & 128;

        if $i1 != 0 goto label1;

        r3 = r2.<android.view.View$AttachInfo: int[] mTransparentLocation>;

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r3);

        $i14 = r3[0];

        $i15 = r3[1];

        $i5 = r3[0];

        $i4 = r0.<android.view.View: int mRight>;

        $i7 = $i5 + $i4;

        $i6 = r0.<android.view.View: int mLeft>;

        $i12 = $i7 - $i6;

        $i10 = r3[1];

        $i8 = r0.<android.view.View: int mBottom>;

        $i11 = $i10 + $i8;

        $i9 = r0.<android.view.View: int mTop>;

        $i13 = $i11 - $i9;

        $r7 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke r1.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>($i14, $i15, $i12, $i13, $r7);

        goto label2;

     label1:
        $i2 = i0 & 256;

        if $i2 == 0 goto label2;

        $r4 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r4 == null goto label2;

        $r5 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $i3 = virtualinvoke $r5.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i3 == -2 goto label2;

        $r6 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        virtualinvoke r0.<android.view.View: void applyDrawableToTransparentRegion(android.graphics.drawable.Drawable,android.graphics.Region)>($r6, r1);

     label2:
        return 1;
    }

    public void playSoundEffect(int)
    {
        android.view.View r0;
        int i0;
        android.view.View$AttachInfo $r1, $r2, $r4;
        android.view.View$AttachInfo$Callbacks $r3, $r5;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.View$AttachInfo$Callbacks mRootCallbacks>;

        if $r3 == null goto label1;

        $z0 = virtualinvoke r0.<android.view.View: boolean isSoundEffectsEnabled()>();

        if $z0 != 0 goto label2;

     label1:
        return;

     label2:
        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: android.view.View$AttachInfo$Callbacks mRootCallbacks>;

        interfaceinvoke $r5.<android.view.View$AttachInfo$Callbacks: void playSoundEffect(int)>(i0);

        return;
    }

    public boolean performHapticFeedback(int)
    {
        android.view.View r0;
        int i0;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean performHapticFeedback(int,int)>(i0, 0);

        return $z0;
    }

    public boolean performHapticFeedback(int, int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3;
        android.view.View$AttachInfo $r1, $r2;
        android.view.View$AttachInfo$Callbacks $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i2 = i1 & 1;

        if $i2 != 0 goto label2;

        $z2 = virtualinvoke r0.<android.view.View: boolean isHapticFeedbackEnabled()>();

        if $z2 != 0 goto label2;

        return 0;

     label2:
        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.View$AttachInfo$Callbacks mRootCallbacks>;

        $i3 = i1 & 2;

        if $i3 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z0 = interfaceinvoke $r3.<android.view.View$AttachInfo$Callbacks: boolean performHapticFeedback(int,boolean)>(i0, $z1);

        return $z0;
    }

    public void setSystemUiVisibility(int)
    {
        android.view.View r0;
        int i0, $i1;
        android.view.ViewParent $r1, $r4;
        android.view.View$AttachInfo $r2, $r3;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mSystemUiVisibility>;

        if i0 == $i1 goto label1;

        r0.<android.view.View: int mSystemUiVisibility> = i0;

        $r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r3.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z0 != 0 goto label1;

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r4.<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>(r0);

     label1:
        return;
    }

    public int getSystemUiVisibility()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mSystemUiVisibility>;

        return $i0;
    }

    public int getWindowSystemUiVisibility()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1, $r2;
        int $i0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r2.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public void onWindowSystemUiVisibilityChanged(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        return;
    }

    public void dispatchWindowSystemUiVisiblityChanged(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.View: void onWindowSystemUiVisibilityChanged(int)>(i0);

        return;
    }

    public void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)
    {
        android.view.View r0;
        android.view.View$OnSystemUiVisibilityChangeListener r1;
        android.view.View$ListenerInfo $r2;
        android.view.ViewParent $r4, $r7;
        android.view.View$AttachInfo $r5, $r6;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnSystemUiVisibilityChangeListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        staticinvoke <android.view.View$ListenerInfo: android.view.View$OnSystemUiVisibilityChangeListener access$1202(android.view.View$ListenerInfo,android.view.View$OnSystemUiVisibilityChangeListener)>($r2, r1);

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r4 == null goto label1;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r5 == null goto label1;

        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r6.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z0 != 0 goto label1;

        $r7 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r7.<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>(r0);

     label1:
        return;
    }

    public void dispatchSystemUiVisibilityChanged(int)
    {
        android.view.View r0;
        int i0, $i1;
        android.view.View$ListenerInfo r1;
        android.view.View$OnSystemUiVisibilityChangeListener $r2, $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        $r2 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnSystemUiVisibilityChangeListener access$1200(android.view.View$ListenerInfo)>(r1);

        if $r2 == null goto label1;

        $r3 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnSystemUiVisibilityChangeListener access$1200(android.view.View$ListenerInfo)>(r1);

        $i1 = i0 & 16383;

        interfaceinvoke $r3.<android.view.View$OnSystemUiVisibilityChangeListener: void onSystemUiVisibilityChange(int)>($i1);

     label1:
        return;
    }

    boolean updateLocalSystemUiVisibility(int, int)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = r0.<android.view.View: int mSystemUiVisibility>;

        $i3 = i1 ^ -1;

        $i6 = $i4 & $i3;

        $i5 = i0 & i1;

        i2 = $i6 | $i5;

        $i7 = r0.<android.view.View: int mSystemUiVisibility>;

        if i2 == $i7 goto label1;

        virtualinvoke r0.<android.view.View: void setSystemUiVisibility(int)>(i2);

        return 1;

     label1:
        return 0;
    }

    public void setDisabledSystemUiVisibility(int)
    {
        android.view.View r0;
        int i0, $i1;
        android.view.View$AttachInfo $r1, $r2, $r3;
        android.view.ViewParent $r4, $r5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i1 = $r2.<android.view.View$AttachInfo: int mDisabledSystemUiVisibility>;

        if $i1 == i0 goto label1;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3.<android.view.View$AttachInfo: int mDisabledSystemUiVisibility> = i0;

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r4 == null goto label1;

        $r5 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r5.<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>(r0);

     label1:
        return;
    }

    public final boolean startDrag(android.content.ClipData, android.view.View$DragShadowBuilder, java.lang.Object, int)
    {
        android.view.View r0;
        android.content.ClipData r1;
        android.view.View$DragShadowBuilder r2;
        java.lang.Object r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean z0;
        android.graphics.Point r4, r5, $r10, $r11;
        android.view.Surface r6, $r13;
        android.os.IBinder r7;
        android.graphics.Canvas r8;
        java.lang.Throwable r9, $r21;
        java.lang.IllegalStateException $r12;
        android.view.View$AttachInfo $r14, $r15, $r19, $r20;
        android.view.IWindowSession $r16, $r23;
        android.view.IWindow $r17, $r22;
        android.graphics.PorterDuff$Mode $r18;
        float $f0, $f1, $f2, $f3;
        java.lang.Exception $r24, r26;
        android.view.ViewRootImpl r25;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.ClipData;

        r2 := @parameter1: android.view.View$DragShadowBuilder;

        r3 := @parameter2: java.lang.Object;

        i0 := @parameter3: int;

        z0 = 0;

        $r10 = new android.graphics.Point;

        specialinvoke $r10.<android.graphics.Point: void <init>()>();

        r4 = $r10;

        $r11 = new android.graphics.Point;

        specialinvoke $r11.<android.graphics.Point: void <init>()>();

        r5 = $r11;

        virtualinvoke r2.<android.view.View$DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)>(r4, r5);

        $i1 = r4.<android.graphics.Point: int x>;

        if $i1 < 0 goto label01;

        $i3 = r4.<android.graphics.Point: int y>;

        if $i3 < 0 goto label01;

        $i2 = r5.<android.graphics.Point: int x>;

        if $i2 < 0 goto label01;

        $i4 = r5.<android.graphics.Point: int y>;

        if $i4 >= 0 goto label02;

     label01:
        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Drag shadow dimensions must not be negative");

        throw $r12;

     label02:
        $r13 = new android.view.Surface;

        specialinvoke $r13.<android.view.Surface: void <init>()>();

        r6 = $r13;

     label03:
        $r15 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r16 = $r15.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r14 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r17 = $r14.<android.view.View$AttachInfo: android.view.IWindow mWindow>;

        $i5 = r4.<android.graphics.Point: int x>;

        $i6 = r4.<android.graphics.Point: int y>;

        r7 = interfaceinvoke $r16.<android.view.IWindowSession: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)>($r17, i0, $i5, $i6, r6);

        if r7 == null goto label09;

        r8 = virtualinvoke r6.<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>(null);

     label04:
        $r18 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode CLEAR>;

        virtualinvoke r8.<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(0, $r18);

        virtualinvoke r2.<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>(r8);

     label05:
        virtualinvoke r6.<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>(r8);

        goto label08;

     label06:
        $r21 := @caughtexception;

        r9 = $r21;

     label07:
        virtualinvoke r6.<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>(r8);

        throw r9;

     label08:
        r25 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke r25.<android.view.ViewRootImpl: void setLocalDragState(java.lang.Object)>(r3);

        virtualinvoke r25.<android.view.ViewRootImpl: void getLastTouchPoint(android.graphics.Point)>(r4);

        $r20 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r23 = $r20.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r19 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r22 = $r19.<android.view.View$AttachInfo: android.view.IWindow mWindow>;

        $i9 = r4.<android.graphics.Point: int x>;

        $f1 = (float) $i9;

        $i10 = r4.<android.graphics.Point: int y>;

        $f0 = (float) $i10;

        $i7 = r5.<android.graphics.Point: int x>;

        $f3 = (float) $i7;

        $i8 = r5.<android.graphics.Point: int y>;

        $f2 = (float) $i8;

        z0 = interfaceinvoke $r23.<android.view.IWindowSession: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)>($r22, r7, $f1, $f0, $f3, $f2, r1);

        virtualinvoke r6.<android.view.Surface: void release()>();

     label09:
        goto label11;

     label10:
        $r24 := @caughtexception;

        r26 = $r24;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", "Unable to initiate drag", r26);

        virtualinvoke r6.<android.view.Surface: void destroy()>();

     label11:
        return z0;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Exception from label03 to label09 with label10;
    }

    public boolean onDragEvent(android.view.DragEvent)
    {
        android.view.View r0;
        android.view.DragEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.DragEvent;

        return 0;
    }

    public boolean dispatchDragEvent(android.view.DragEvent)
    {
        android.view.View r0;
        android.view.DragEvent r1;
        android.view.View$ListenerInfo r2;
        boolean $z0, $z1;
        android.view.View$OnDragListener $r3, $r4;
        int $i0, $i1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.DragEvent;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label1;

        $r3 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnDragListener access$700(android.view.View$ListenerInfo)>(r2);

        if $r3 == null goto label1;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 32;

        if $i1 != 0 goto label1;

        $r4 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnDragListener access$700(android.view.View$ListenerInfo)>(r2);

        $z1 = interfaceinvoke $r4.<android.view.View$OnDragListener: boolean onDrag(android.view.View,android.view.DragEvent)>(r0, r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean onDragEvent(android.view.DragEvent)>(r1);

        return $z0;
    }

    boolean canAcceptDrag()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void onCloseSystemDialogs(java.lang.String)
    {
        android.view.View r0;
        java.lang.String r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void applyDrawableToTransparentRegion(android.graphics.drawable.Drawable, android.graphics.Region)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        android.graphics.Region r2, r3;
        android.graphics.Rect r4;
        android.view.View$AttachInfo r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        int[] r6;
        android.graphics.Region$Op $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: android.graphics.Region;

        r3 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>();

        r4 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r3 == null goto label5;

        if r5 == null goto label5;

        $i2 = virtualinvoke r0.<android.view.View: int getRight()>();

        $i3 = virtualinvoke r0.<android.view.View: int getLeft()>();

        i0 = $i2 - $i3;

        $i4 = virtualinvoke r0.<android.view.View: int getBottom()>();

        $i6 = virtualinvoke r0.<android.view.View: int getTop()>();

        i1 = $i4 - $i6;

        $i5 = r4.<android.graphics.Rect: int left>;

        if $i5 <= 0 goto label1;

        $i14 = r4.<android.graphics.Rect: int left>;

        $r12 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke r3.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>(0, 0, $i14, i1, $r12);

     label1:
        $i8 = r4.<android.graphics.Rect: int right>;

        if $i8 >= i0 goto label2;

        $i15 = r4.<android.graphics.Rect: int right>;

        $r11 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke r3.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>($i15, 0, i0, i1, $r11);

     label2:
        $i7 = r4.<android.graphics.Rect: int top>;

        if $i7 <= 0 goto label3;

        $i13 = r4.<android.graphics.Rect: int top>;

        $r10 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke r3.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>(0, 0, i0, $i13, $r10);

     label3:
        $i10 = r4.<android.graphics.Rect: int bottom>;

        if $i10 >= i1 goto label4;

        $i12 = r4.<android.graphics.Rect: int bottom>;

        $r9 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke r3.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>(0, $i12, i0, i1, $r9);

     label4:
        r6 = r5.<android.view.View$AttachInfo: int[] mTransparentLocation>;

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r6);

        $i11 = r6[0];

        $i9 = r6[1];

        virtualinvoke r3.<android.graphics.Region: void translate(int,int)>($i11, $i9);

        $r8 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        virtualinvoke r2.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>(r3, $r8);

        goto label6;

     label5:
        $r7 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke r2.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>(r4, $r7);

     label6:
        return;
    }

    private void checkForLongClick(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4;
        android.view.View$CheckForLongPress $r1, $r2, $r3, $r4;
        long $l5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 2097152;

        if $i2 != 2097152 goto label2;

        r0.<android.view.View: boolean mHasPerformedLongPress> = 0;

        $r1 = r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        if $r1 != null goto label1;

        $r4 = new android.view.View$CheckForLongPress;

        specialinvoke $r4.<android.view.View$CheckForLongPress: void <init>(android.view.View,android.view.View$1)>(r0, null);

        r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress> = $r4;

     label1:
        $r2 = r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        virtualinvoke $r2.<android.view.View$CheckForLongPress: void rememberWindowAttachCount()>();

        $r3 = r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        $i3 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $i4 = $i3 - i0;

        $l5 = (long) $i4;

        virtualinvoke r0.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r3, $l5);

     label2:
        return;
    }

    public static android.view.View inflate(android.content.Context, int, android.view.ViewGroup)
    {
        android.content.Context r0;
        int i0;
        android.view.ViewGroup r1;
        android.view.LayoutInflater r2;
        android.view.View $r3;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.ViewGroup;

        r2 = staticinvoke <android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>(r0);

        $r3 = virtualinvoke r2.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(i0, r1);

        return $r3;
    }

    protected boolean overScrollBy(int, int, int, int, int, int, int, int, boolean)
    {
        android.view.View r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, $i15, $i16, $i17, $i18;
        boolean z0, z1, z2, z3, z4, z5, z6, $z7, $z8, $z9, $z10, $z11;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        z0 := @parameter8: boolean;

        i8 = r0.<android.view.View: int mOverScrollMode>;

        $i15 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollRange()>();

        $i17 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollExtent()>();

        if $i15 <= $i17 goto label01;

        $z10 = 1;

        goto label02;

     label01:
        $z10 = 0;

     label02:
        z1 = $z10;

        $i16 = virtualinvoke r0.<android.view.View: int computeVerticalScrollRange()>();

        $i18 = virtualinvoke r0.<android.view.View: int computeVerticalScrollExtent()>();

        if $i16 <= $i18 goto label03;

        $z11 = 1;

        goto label04;

     label03:
        $z11 = 0;

     label04:
        z2 = $z11;

        if i8 == 0 goto label05;

        if i8 != 1 goto label06;

        if z1 == 0 goto label06;

     label05:
        $z8 = 1;

        goto label07;

     label06:
        $z8 = 0;

     label07:
        z3 = $z8;

        if i8 == 0 goto label08;

        if i8 != 1 goto label09;

        if z2 == 0 goto label09;

     label08:
        $z9 = 1;

        goto label10;

     label09:
        $z9 = 0;

     label10:
        z4 = $z9;

        i9 = i2 + i0;

        if z3 != 0 goto label11;

        i6 = 0;

     label11:
        i11 = i3 + i1;

        if z4 != 0 goto label12;

        i7 = 0;

     label12:
        i10 = neg i6;

        i13 = i6 + i4;

        i12 = neg i7;

        i14 = i7 + i5;

        z5 = 0;

        if i9 <= i13 goto label13;

        i9 = i13;

        z5 = 1;

        goto label14;

     label13:
        if i9 >= i10 goto label14;

        i9 = i10;

        z5 = 1;

     label14:
        z6 = 0;

        if i11 <= i14 goto label15;

        i11 = i14;

        z6 = 1;

        goto label16;

     label15:
        if i11 >= i12 goto label16;

        i11 = i12;

        z6 = 1;

     label16:
        virtualinvoke r0.<android.view.View: void onOverScrolled(int,int,boolean,boolean)>(i9, i11, z5, z6);

        if z5 != 0 goto label17;

        if z6 == 0 goto label18;

     label17:
        $z7 = 1;

        goto label19;

     label18:
        $z7 = 0;

     label19:
        return $z7;
    }

    protected void onOverScrolled(int, int, boolean, boolean)
    {
        android.view.View r0;
        int i0, i1;
        boolean z0, z1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        return;
    }

    public int getOverScrollMode()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mOverScrollMode>;

        return $i0;
    }

    public void setOverScrollMode(int)
    {
        android.view.View r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid overscroll mode ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        r0.<android.view.View: int mOverScrollMode> = i0;

        return;
    }

    public void setNestedScrollingEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 | 128;

        r0.<android.view.View: int mPrivateFlags3> = $i3;

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void stopNestedScroll()>();

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & -129;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

     label2:
        return;
    }

    public boolean isNestedScrollingEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 128;

        if $i1 != 128 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean startNestedScroll(int)
    {
        android.view.View r0, r2;
        int i0;
        android.view.ViewParent r1;
        java.lang.AbstractMethodError r3, $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean hasNestedScrollingParent()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean isNestedScrollingEnabled()>();

        if $z1 == 0 goto label9;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        r2 = r0;

     label2:
        if r1 == null goto label9;

     label3:
        $z2 = interfaceinvoke r1.<android.view.ViewParent: boolean onStartNestedScroll(android.view.View,android.view.View,int)>(r2, r0, i0);

        if $z2 == 0 goto label5;

        r0.<android.view.View: android.view.ViewParent mNestedScrollingParent> = r1;

        interfaceinvoke r1.<android.view.ViewParent: void onNestedScrollAccepted(android.view.View,android.view.View,int)>(r2, r0, i0);

     label4:
        return 1;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        r3 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ViewParent ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not implement interface ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("method onStartNestedScroll");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r10, r3);

     label7:
        $z3 = r1 instanceof android.view.View;

        if $z3 == 0 goto label8;

        r2 = (android.view.View) r1;

     label8:
        r1 = interfaceinvoke r1.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label2;

     label9:
        return 0;

        catch java.lang.AbstractMethodError from label3 to label4 with label6;
    }

    public void stopNestedScroll()
    {
        android.view.View r0;
        android.view.ViewParent $r1, $r2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        interfaceinvoke $r2.<android.view.ViewParent: void onStopNestedScroll(android.view.View)>(r0);

        r0.<android.view.View: android.view.ViewParent mNestedScrollingParent> = null;

     label1:
        return;
    }

    public boolean hasNestedScrollingParent()
    {
        android.view.View r0;
        android.view.ViewParent $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean dispatchNestedScroll(int, int, int, int, int[])
    {
        android.view.View r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        int[] r1;
        boolean $z0;
        android.view.ViewParent $r2, $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: int[];

        $z0 = virtualinvoke r0.<android.view.View: boolean isNestedScrollingEnabled()>();

        if $z0 == 0 goto label5;

        $r2 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        if $r2 == null goto label5;

        if i0 != 0 goto label1;

        if i1 != 0 goto label1;

        if i2 != 0 goto label1;

        if i3 == 0 goto label4;

     label1:
        i4 = 0;

        i5 = 0;

        if r1 == null goto label2;

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r1);

        i4 = r1[0];

        i5 = r1[1];

     label2:
        $r3 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void onNestedScroll(android.view.View,int,int,int,int)>(r0, i0, i1, i2, i3);

        if r1 == null goto label3;

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r1);

        $i6 = r1[0];

        $i7 = $i6 - i4;

        r1[0] = $i7;

        $i8 = r1[1];

        $i9 = $i8 - i5;

        r1[1] = $i9;

     label3:
        return 1;

     label4:
        if r1 == null goto label5;

        r1[0] = 0;

        r1[1] = 0;

     label5:
        return 0;
    }

    public boolean dispatchNestedPreScroll(int, int, int[], int[])
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] r1, r2, $r5, $r6;
        boolean $z0, $z1;
        android.view.ViewParent $r3, $r4;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: int[];

        $z0 = virtualinvoke r0.<android.view.View: boolean isNestedScrollingEnabled()>();

        if $z0 == 0 goto label10;

        $r3 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        if $r3 == null goto label10;

        if i0 != 0 goto label01;

        if i1 == 0 goto label09;

     label01:
        i2 = 0;

        i3 = 0;

        if r2 == null goto label02;

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r2);

        i2 = r2[0];

        i3 = r2[1];

     label02:
        if r1 != null goto label04;

        $r5 = r0.<android.view.View: int[] mTempNestedScrollConsumed>;

        if $r5 != null goto label03;

        $r6 = newarray (int)[2];

        r0.<android.view.View: int[] mTempNestedScrollConsumed> = $r6;

     label03:
        r1 = r0.<android.view.View: int[] mTempNestedScrollConsumed>;

     label04:
        r1[0] = 0;

        r1[1] = 0;

        $r4 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        interfaceinvoke $r4.<android.view.ViewParent: void onNestedPreScroll(android.view.View,int,int,int[])>(r0, i0, i1, r1);

        if r2 == null goto label05;

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r2);

        $i6 = r2[0];

        $i7 = $i6 - i2;

        r2[0] = $i7;

        $i8 = r2[1];

        $i9 = $i8 - i3;

        r2[1] = $i9;

     label05:
        $i4 = r1[0];

        if $i4 != 0 goto label06;

        $i5 = r1[1];

        if $i5 == 0 goto label07;

     label06:
        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        return $z1;

     label09:
        if r2 == null goto label10;

        r2[0] = 0;

        r2[1] = 0;

     label10:
        return 0;
    }

    public boolean dispatchNestedFling(float, float, boolean)
    {
        android.view.View r0;
        float f0, f1;
        boolean z0, $z1, $z2;
        android.view.ViewParent $r1, $r2;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        z0 := @parameter2: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean isNestedScrollingEnabled()>();

        if $z1 == 0 goto label1;

        $r1 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        $z2 = interfaceinvoke $r2.<android.view.ViewParent: boolean onNestedFling(android.view.View,float,float,boolean)>(r0, f0, f1, z0);

        return $z2;

     label1:
        return 0;
    }

    public boolean dispatchNestedPreFling(float, float)
    {
        android.view.View r0;
        float f0, f1;
        boolean $z0, $z1;
        android.view.ViewParent $r1, $r2;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = virtualinvoke r0.<android.view.View: boolean isNestedScrollingEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        $z1 = interfaceinvoke $r2.<android.view.ViewParent: boolean onNestedPreFling(android.view.View,float,float)>(r0, f0, f1);

        return $z1;

     label1:
        return 0;
    }

    protected float getVerticalScrollFactor()
    {
        android.view.View r0;
        android.util.TypedValue r1, $r2;
        float $f0, $f1, $f2;
        byte $b0;
        android.content.Context $r3, $r5;
        android.content.res.Resources$Theme $r4;
        boolean $z0;
        android.content.res.Resources $r6;
        android.util.DisplayMetrics $r7;
        java.lang.IllegalStateException $r8;

        r0 := @this: android.view.View;

        $f0 = r0.<android.view.View: float mVerticalScrollFactor>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label2;

        $r2 = new android.util.TypedValue;

        specialinvoke $r2.<android.util.TypedValue: void <init>()>();

        r1 = $r2;

        $r3 = r0.<android.view.View: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        $z0 = virtualinvoke $r4.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16842829, r1, 1);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Expected theme to define listPreferredItemHeight.");

        throw $r8;

     label1:
        $r5 = r0.<android.view.View: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $r7 = virtualinvoke $r6.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f2 = virtualinvoke r1.<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>($r7);

        r0.<android.view.View: float mVerticalScrollFactor> = $f2;

     label2:
        $f1 = r0.<android.view.View: float mVerticalScrollFactor>;

        return $f1;
    }

    protected float getHorizontalScrollFactor()
    {
        android.view.View r0;
        float $f0;

        r0 := @this: android.view.View;

        $f0 = virtualinvoke r0.<android.view.View: float getVerticalScrollFactor()>();

        return $f0;
    }

    public int getRawTextDirection()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 448;

        $i2 = $i1 >> 6;

        return $i2;
    }

    public void setTextDirection(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.view.View: int getRawTextDirection()>();

        if $i1 == i0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 & -449;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        virtualinvoke r0.<android.view.View: void resetResolvedTextDirection()>();

        $i6 = r0.<android.view.View: int mPrivateFlags2>;

        $i4 = i0 << 6;

        $i5 = $i4 & 448;

        $i7 = $i6 | $i5;

        r0.<android.view.View: int mPrivateFlags2> = $i7;

        virtualinvoke r0.<android.view.View: boolean resolveTextDirection()>();

        $i8 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        virtualinvoke r0.<android.view.View: void onRtlPropertiesChanged(int)>($i8);

        virtualinvoke r0.<android.view.View: void requestLayout()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label1:
        return;
    }

    public int getTextDirection()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 7168;

        $i2 = $i1 >> 10;

        return $i2;
    }

    public boolean resolveTextDirection()
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, i25;
        java.lang.AbstractMethodError r1, r2, $r5, $r13;
        boolean $z0, $z1, $z2;
        android.view.ViewParent $r3, $r4, $r6, $r14;
        java.lang.Class $r7, $r15;
        java.lang.StringBuilder $r8, $r9, $r12, $r16, $r18, $r19;
        java.lang.String $r10, $r11, $r17, $r20;

        r0 := @this: android.view.View;

        $i1 = r0.<android.view.View: int mPrivateFlags2>;

        $i2 = $i1 & -7681;

        r0.<android.view.View: int mPrivateFlags2> = $i2;

        $z0 = specialinvoke r0.<android.view.View: boolean hasRtlSupport()>();

        if $z0 == 0 goto label15;

        i0 = virtualinvoke r0.<android.view.View: int getRawTextDirection()>();

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label12;
            case 2: goto label12;
            case 3: goto label12;
            case 4: goto label12;
            case 5: goto label12;
            default: goto label13;
        };

     label01:
        $z1 = virtualinvoke r0.<android.view.View: boolean canResolveTextDirection()>();

        if $z1 != 0 goto label02;

        $i15 = r0.<android.view.View: int mPrivateFlags2>;

        $i14 = $i15 | 1024;

        r0.<android.view.View: int mPrivateFlags2> = $i14;

        return 0;

     label02:
        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z2 = interfaceinvoke $r3.<android.view.ViewParent: boolean isTextDirectionResolved()>();

        if $z2 != 0 goto label04;

        $i13 = r0.<android.view.View: int mPrivateFlags2>;

        $i12 = $i13 | 1024;

        r0.<android.view.View: int mPrivateFlags2> = $i12;

     label03:
        return 0;

     label04:
        goto label06;

     label05:
        $r5 := @caughtexception;

        r1 = $r5;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r9 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r10, r1);

        $i23 = r0.<android.view.View: int mPrivateFlags2>;

        $i21 = $i23 | 1536;

        r0.<android.view.View: int mPrivateFlags2> = $i21;

        return 1;

     label06:
        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        i25 = interfaceinvoke $r4.<android.view.ViewParent: int getTextDirection()>();

     label07:
        goto label09;

     label08:
        $r13 := @caughtexception;

        r2 = $r13;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r14 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r15.<java.lang.Class: java.lang.String getSimpleName()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r17, r2);

        i25 = 3;

     label09:
        tableswitch(i25)
        {
            case 1: goto label10;
            case 2: goto label10;
            case 3: goto label10;
            case 4: goto label10;
            case 5: goto label10;
            default: goto label11;
        };

     label10:
        $i9 = r0.<android.view.View: int mPrivateFlags2>;

        $i7 = i25 << 10;

        $i8 = $i9 | $i7;

        r0.<android.view.View: int mPrivateFlags2> = $i8;

        goto label14;

     label11:
        $i11 = r0.<android.view.View: int mPrivateFlags2>;

        $i10 = $i11 | 1024;

        r0.<android.view.View: int mPrivateFlags2> = $i10;

        goto label14;

     label12:
        $i16 = r0.<android.view.View: int mPrivateFlags2>;

        $i17 = i0 << 10;

        $i19 = $i16 | $i17;

        r0.<android.view.View: int mPrivateFlags2> = $i19;

        goto label14;

     label13:
        $i18 = r0.<android.view.View: int mPrivateFlags2>;

        $i20 = $i18 | 1024;

        r0.<android.view.View: int mPrivateFlags2> = $i20;

     label14:
        goto label16;

     label15:
        $i3 = r0.<android.view.View: int mPrivateFlags2>;

        $i4 = $i3 | 1024;

        r0.<android.view.View: int mPrivateFlags2> = $i4;

     label16:
        $i5 = r0.<android.view.View: int mPrivateFlags2>;

        $i6 = $i5 | 512;

        r0.<android.view.View: int mPrivateFlags2> = $i6;

        return 1;

        catch java.lang.AbstractMethodError from label02 to label03 with label05;
        catch java.lang.AbstractMethodError from label06 to label07 with label08;
    }

    public boolean canResolveTextDirection()
    {
        android.view.View r0;
        java.lang.AbstractMethodError r1, $r4;
        int $i0;
        android.view.ViewParent $r2, $r3, $r6;
        boolean $z0;
        java.lang.StringBuilder $r5, $r9, $r10;
        java.lang.Class $r7;
        java.lang.String $r8, $r11;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getRawTextDirection()>();

        lookupswitch($i0)
        {
            case 0: goto label1;
            default: goto label6;
        };

     label1:
        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r2 == null goto label5;

     label2:
        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = interfaceinvoke $r3.<android.view.ViewParent: boolean canResolveTextDirection()>();

     label3:
        return $z0;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r11, r1);

     label5:
        return 0;

     label6:
        return 1;

        catch java.lang.AbstractMethodError from label2 to label3 with label4;
    }

    public void resetResolvedTextDirection()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -7681;

        r0.<android.view.View: int mPrivateFlags2> = $i1;

        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 | 1024;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        return;
    }

    public boolean isTextDirectionInherited()
    {
        android.view.View r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getRawTextDirection()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isTextDirectionResolved()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 512;

        if $i1 != 512 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getRawTextAlignment()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 57344;

        $i2 = $i1 >> 13;

        return $i2;
    }

    public void setTextAlignment(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.view.View: int getRawTextAlignment()>();

        if i0 == $i1 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 & -57345;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        virtualinvoke r0.<android.view.View: void resetResolvedTextAlignment()>();

        $i6 = r0.<android.view.View: int mPrivateFlags2>;

        $i4 = i0 << 13;

        $i5 = $i4 & 57344;

        $i7 = $i6 | $i5;

        r0.<android.view.View: int mPrivateFlags2> = $i7;

        virtualinvoke r0.<android.view.View: boolean resolveTextAlignment()>();

        $i8 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        virtualinvoke r0.<android.view.View: void onRtlPropertiesChanged(int)>($i8);

        virtualinvoke r0.<android.view.View: void requestLayout()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label1:
        return;
    }

    public int getTextAlignment()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 917504;

        $i2 = $i1 >> 17;

        return $i2;
    }

    public boolean resolveTextAlignment()
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, i25;
        java.lang.AbstractMethodError r1, r2, $r5, $r13;
        boolean $z0, $z1, $z2;
        android.view.ViewParent $r3, $r4, $r6, $r14;
        java.lang.Class $r7, $r15;
        java.lang.StringBuilder $r8, $r9, $r12, $r16, $r18, $r19;
        java.lang.String $r10, $r11, $r17, $r20;

        r0 := @this: android.view.View;

        $i1 = r0.<android.view.View: int mPrivateFlags2>;

        $i2 = $i1 & -983041;

        r0.<android.view.View: int mPrivateFlags2> = $i2;

        $z0 = specialinvoke r0.<android.view.View: boolean hasRtlSupport()>();

        if $z0 == 0 goto label15;

        i0 = virtualinvoke r0.<android.view.View: int getRawTextAlignment()>();

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label12;
            case 2: goto label12;
            case 3: goto label12;
            case 4: goto label12;
            case 5: goto label12;
            case 6: goto label12;
            default: goto label13;
        };

     label01:
        $z1 = virtualinvoke r0.<android.view.View: boolean canResolveTextAlignment()>();

        if $z1 != 0 goto label02;

        $i15 = r0.<android.view.View: int mPrivateFlags2>;

        $i14 = $i15 | 131072;

        r0.<android.view.View: int mPrivateFlags2> = $i14;

        return 0;

     label02:
        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z2 = interfaceinvoke $r3.<android.view.ViewParent: boolean isTextAlignmentResolved()>();

        if $z2 != 0 goto label04;

        $i13 = r0.<android.view.View: int mPrivateFlags2>;

        $i12 = $i13 | 131072;

        r0.<android.view.View: int mPrivateFlags2> = $i12;

     label03:
        return 0;

     label04:
        goto label06;

     label05:
        $r5 := @caughtexception;

        r1 = $r5;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r9 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r10, r1);

        $i23 = r0.<android.view.View: int mPrivateFlags2>;

        $i21 = $i23 | 196608;

        r0.<android.view.View: int mPrivateFlags2> = $i21;

        return 1;

     label06:
        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        i25 = interfaceinvoke $r4.<android.view.ViewParent: int getTextAlignment()>();

     label07:
        goto label09;

     label08:
        $r13 := @caughtexception;

        r2 = $r13;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r14 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r15.<java.lang.Class: java.lang.String getSimpleName()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r17, r2);

        i25 = 1;

     label09:
        tableswitch(i25)
        {
            case 1: goto label10;
            case 2: goto label10;
            case 3: goto label10;
            case 4: goto label10;
            case 5: goto label10;
            case 6: goto label10;
            default: goto label11;
        };

     label10:
        $i9 = r0.<android.view.View: int mPrivateFlags2>;

        $i7 = i25 << 17;

        $i8 = $i9 | $i7;

        r0.<android.view.View: int mPrivateFlags2> = $i8;

        goto label14;

     label11:
        $i11 = r0.<android.view.View: int mPrivateFlags2>;

        $i10 = $i11 | 131072;

        r0.<android.view.View: int mPrivateFlags2> = $i10;

        goto label14;

     label12:
        $i16 = r0.<android.view.View: int mPrivateFlags2>;

        $i17 = i0 << 17;

        $i19 = $i16 | $i17;

        r0.<android.view.View: int mPrivateFlags2> = $i19;

        goto label14;

     label13:
        $i18 = r0.<android.view.View: int mPrivateFlags2>;

        $i20 = $i18 | 131072;

        r0.<android.view.View: int mPrivateFlags2> = $i20;

     label14:
        goto label16;

     label15:
        $i3 = r0.<android.view.View: int mPrivateFlags2>;

        $i4 = $i3 | 131072;

        r0.<android.view.View: int mPrivateFlags2> = $i4;

     label16:
        $i5 = r0.<android.view.View: int mPrivateFlags2>;

        $i6 = $i5 | 65536;

        r0.<android.view.View: int mPrivateFlags2> = $i6;

        return 1;

        catch java.lang.AbstractMethodError from label02 to label03 with label05;
        catch java.lang.AbstractMethodError from label06 to label07 with label08;
    }

    public boolean canResolveTextAlignment()
    {
        android.view.View r0;
        java.lang.AbstractMethodError r1, $r4;
        int $i0;
        android.view.ViewParent $r2, $r3, $r6;
        boolean $z0;
        java.lang.StringBuilder $r5, $r9, $r10;
        java.lang.Class $r7;
        java.lang.String $r8, $r11;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getRawTextAlignment()>();

        lookupswitch($i0)
        {
            case 0: goto label1;
            default: goto label6;
        };

     label1:
        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r2 == null goto label5;

     label2:
        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = interfaceinvoke $r3.<android.view.ViewParent: boolean canResolveTextAlignment()>();

     label3:
        return $z0;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r11, r1);

     label5:
        return 0;

     label6:
        return 1;

        catch java.lang.AbstractMethodError from label2 to label3 with label4;
    }

    public void resetResolvedTextAlignment()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -983041;

        r0.<android.view.View: int mPrivateFlags2> = $i1;

        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 | 131072;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        return;
    }

    public boolean isTextAlignmentInherited()
    {
        android.view.View r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getRawTextAlignment()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isTextAlignmentResolved()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 65536;

        if $i1 != 65536 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int generateViewId()
    {
        int i0, i1;
        java.util.concurrent.atomic.AtomicInteger $r0, $r1;
        boolean $z0;

     label1:
        $r0 = <android.view.View: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId>;

        i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        i1 = i0 + 1;

        if i1 <= 16777215 goto label2;

        i1 = 1;

     label2:
        $r1 = <android.view.View: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, i1);

        if $z0 == 0 goto label3;

        return i0;

     label3:
        goto label1;
    }

    public void captureTransitioningViews(java.util.List)
    {
        android.view.View r0;
        java.util.List r1;
        int $i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.List;

        $i0 = virtualinvoke r0.<android.view.View: int getVisibility()>();

        if $i0 != 0 goto label1;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

     label1:
        return;
    }

    public void findNamedViews(java.util.Map)
    {
        android.view.View r0;
        java.util.Map r1;
        java.lang.String r2;
        int $i0;
        android.view.GhostView $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.Map;

        $i0 = virtualinvoke r0.<android.view.View: int getVisibility()>();

        if $i0 == 0 goto label1;

        $r4 = r0.<android.view.View: android.view.GhostView mGhostView>;

        if $r4 == null goto label2;

     label1:
        r2 = virtualinvoke r0.<android.view.View: java.lang.String getTransitionName()>();

        if r2 == null goto label2;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r0);

     label2:
        return;
    }

    public void hackTurnOffWindowResizeAnim(boolean)
    {
        android.view.View r0;
        boolean z0;
        android.view.View$AttachInfo $r1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r1.<android.view.View$AttachInfo: boolean mTurnOffWindowResizeAnim> = z0;

        return;
    }

    public android.view.ViewPropertyAnimator animate()
    {
        android.view.View r0;
        android.view.ViewPropertyAnimator $r1, $r2, $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewPropertyAnimator mAnimator>;

        if $r1 != null goto label1;

        $r3 = new android.view.ViewPropertyAnimator;

        specialinvoke $r3.<android.view.ViewPropertyAnimator: void <init>(android.view.View)>(r0);

        r0.<android.view.View: android.view.ViewPropertyAnimator mAnimator> = $r3;

     label1:
        $r2 = r0.<android.view.View: android.view.ViewPropertyAnimator mAnimator>;

        return $r2;
    }

    public final void setTransitionName(java.lang.String)
    {
        android.view.View r0;
        java.lang.String r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.String;

        r0.<android.view.View: java.lang.String mTransitionName> = r1;

        return;
    }

    public java.lang.String getTransitionName()
    {
        android.view.View r0;
        java.lang.String $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: java.lang.String mTransitionName>;

        return $r1;
    }

    private boolean inLiveRegion()
    {
        android.view.View r0, $r2;
        android.view.ViewParent r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getAccessibilityLiveRegion()>();

        if $i0 == 0 goto label1;

        return 1;

     label1:
        r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

     label2:
        $z0 = r1 instanceof android.view.View;

        if $z0 == 0 goto label4;

        $r2 = (android.view.View) r1;

        $i1 = virtualinvoke $r2.<android.view.View: int getAccessibilityLiveRegion()>();

        if $i1 == 0 goto label3;

        return 1;

     label3:
        r1 = interfaceinvoke r1.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label2;

     label4:
        return 0;
    }

    private static void dumpFlags()
    {
        java.util.HashMap r0;
        java.lang.reflect.Field[] r1;
        int i0, i1, i2, i3, i4, $i6, $i7;
        java.lang.reflect.Field r2;
        java.lang.Class $r3, $r8, $r9, $r10;
        java.util.Set $r4;
        boolean $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r5, $r7, $r11;
        java.lang.String $r6, $r16, $r17, $r22, r27;
        int[] $r12, r23;
        java.lang.StringBuilder $r13, $r14, $r15, $r18, $r19;
        java.lang.IllegalAccessException $r20, r24;
        java.lang.RuntimeException $r21;
        java.util.ArrayList r25;
        java.util.Iterator r26;

        r0 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

     label01:
        $r3 = class "android/view/View";

        r1 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r1;

        i1 = 0;

     label02:
        if i1 >= i0 goto label06;

        r2 = r1[i1];

        i2 = virtualinvoke r2.<java.lang.reflect.Field: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i2);

        if $z3 == 0 goto label05;

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>(i2);

        if $z2 == 0 goto label05;

        $r9 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r8 = <java.lang.Integer: java.lang.Class TYPE>;

        $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z4 == 0 goto label03;

        i3 = virtualinvoke r2.<java.lang.reflect.Field: int getInt(java.lang.Object)>(null);

        $r22 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>();

        staticinvoke <android.view.View: void dumpFlag(java.util.HashMap,java.lang.String,int)>(r0, $r22, i3);

        goto label05;

     label03:
        $r10 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z5 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(class "[I");

        if $z5 == 0 goto label05;

        $r11 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r12 = (int[]) $r11;

        r23 = (int[]) $r12;

        i4 = 0;

     label04:
        $i6 = lengthof r23;

        if i4 >= $i6 goto label05;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>();

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $i7 = r23[i4];

        staticinvoke <android.view.View: void dumpFlag(java.util.HashMap,java.lang.String,int)>(r0, $r17, $i7);

        i4 = i4 + 1;

        goto label04;

     label05:
        i1 = i1 + 1;

        goto label02;

     label06:
        goto label08;

     label07:
        $r20 := @caughtexception;

        r24 = $r20;

        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r24);

        throw $r21;

     label08:
        r25 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        $r4 = virtualinvoke r0.<java.util.HashMap: java.util.Set keySet()>();

        virtualinvoke r25.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        staticinvoke <java.util.Collections: void sort(java.util.List)>(r25);

        r26 = virtualinvoke r25.<java.util.ArrayList: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r5 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r27 = (java.lang.String) $r5;

        $r7 = virtualinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r27);

        $r6 = (java.lang.String) $r7;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r6);

        goto label09;

     label10:
        return;

        catch java.lang.IllegalAccessException from label01 to label06 with label07;
    }

    private static void dumpFlag(java.util.HashMap, java.lang.String, int)
    {
        java.util.HashMap r0;
        java.lang.String r1, r2, r3, r4, $r6, $r7, $r16;
        int i0, i1;
        java.lang.Object[] $r5;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @parameter0: java.util.HashMap;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>(i0);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%32s", $r5);

        r2 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(char,char)>(48, 32);

        i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(95);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        if i1 <= 0 goto label1;

        $r16 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        goto label2;

     label1:
        $r16 = r1;

     label2:
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    static boolean access$2000()
    {
        boolean $z0;

        $z0 = <android.view.View: boolean sUseBrokenMakeMeasureSpec>;

        return $z0;
    }

    static boolean access$2102(android.view.View, boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        r0.<android.view.View: boolean mHasPerformedLongPress> = z0;

        return z0;
    }

    static void access$2200(android.view.View, boolean, float, float)
    {
        android.view.View r0;
        boolean z0;
        float f0, f1;

        r0 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        specialinvoke r0.<android.view.View: void setPressed(boolean,float,float)>(z0, f0, f1);

        return;
    }

    static void access$2300(android.view.View, int)
    {
        android.view.View r0;
        int i0;

        r0 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        specialinvoke r0.<android.view.View: void checkForLongClick(int)>(i0);

        return;
    }

    static int access$2400(android.view.View)
    {
        android.view.View r0;
        int $i0;

        r0 := @parameter0: android.view.View;

        $i0 = r0.<android.view.View: int mLabelForId>;

        return $i0;
    }

    static boolean access$2500(android.view.View)
    {
        android.view.View r0;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        $z0 = specialinvoke r0.<android.view.View: boolean inLiveRegion()>();

        return $z0;
    }

    static void <clinit>()
    {
        int[] r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r14, $r16, $r18, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r36, $r38, $r40, $r42, $r44, $r46, $r48, $r50, $r51, $r53, $r55, $r57, $r59, $r61, $r63, $r65, $r68, $r70, $r72, $r74, $r76, $r80, $r81, $r82, $r94, $r95, $r96, $r98;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28;
        int[][] $r10, $r11, $r12, $r13, $r15, $r17, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r49, $r52, $r54, $r56, $r58, $r60, $r62, $r64, $r66, $r67, $r69, $r71, $r73, $r91;
        java.util.concurrent.atomic.AtomicInteger $r75;
        android.view.View$4 $r77;
        android.view.View$3 $r78;
        java.lang.ThreadLocal $r79;
        android.view.View$11 $r83;
        android.view.View$12 $r84;
        android.view.View$9 $r85;
        android.view.View$10 $r86;
        android.view.View$7 $r87;
        android.view.View$8 $r88;
        android.view.View$5 $r89;
        android.view.View$6 $r90;
        android.view.View$13 $r92;
        android.view.View$14 $r93;
        java.lang.IllegalStateException $r97;

        <android.view.View: int PROVIDER_PADDED_BOUNDS> = 3;

        <android.view.View: int PROVIDER_BOUNDS> = 2;

        <android.view.View: int PROVIDER_NONE> = 1;

        <android.view.View: int PROVIDER_BACKGROUND> = 0;

        <android.view.View: int LAYER_TYPE_HARDWARE> = 2;

        <android.view.View: int LAYER_TYPE_SOFTWARE> = 1;

        <android.view.View: int LAYER_TYPE_NONE> = 0;

        <android.view.View: int SCROLLBAR_POSITION_RIGHT> = 2;

        <android.view.View: int SCROLLBAR_POSITION_LEFT> = 1;

        <android.view.View: int SCROLLBAR_POSITION_DEFAULT> = 0;

        <android.view.View: int DRAG_FLAG_GLOBAL> = 1;

        <android.view.View: int UNDEFINED_PADDING> = -2147483648;

        <android.view.View: int SCROLL_AXIS_VERTICAL> = 2;

        <android.view.View: int SCROLL_AXIS_HORIZONTAL> = 1;

        <android.view.View: int SCROLL_AXIS_NONE> = 0;

        <android.view.View: int SCREEN_STATE_ON> = 1;

        <android.view.View: int SCREEN_STATE_OFF> = 0;

        <android.view.View: int ACCESSIBILITY_CURSOR_POSITION_UNDEFINED> = -1;

        <android.view.View: int FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS> = 4;

        <android.view.View: int FIND_VIEWS_WITH_CONTENT_DESCRIPTION> = 2;

        <android.view.View: int FIND_VIEWS_WITH_TEXT> = 1;

        <android.view.View: int SYSTEM_UI_LAYOUT_FLAGS> = 1536;

        <android.view.View: int SYSTEM_UI_CLEARABLE_FLAGS> = 7;

        <android.view.View: int PUBLIC_STATUS_BAR_VISIBILITY_MASK> = 16383;

        <android.view.View: int SYSTEM_UI_TRANSPARENT> = 32768;

        <android.view.View: int RECENT_APPS_VISIBLE> = 16384;

        <android.view.View: int NAVIGATION_BAR_TRANSLUCENT> = -2147483648;

        <android.view.View: int STATUS_BAR_TRANSLUCENT> = 1073741824;

        <android.view.View: int NAVIGATION_BAR_UNHIDE> = 536870912;

        <android.view.View: int STATUS_BAR_UNHIDE> = 268435456;

        <android.view.View: int NAVIGATION_BAR_TRANSIENT> = 134217728;

        <android.view.View: int STATUS_BAR_TRANSIENT> = 67108864;

        <android.view.View: int STATUS_BAR_DISABLE_SEARCH> = 33554432;

        <android.view.View: int STATUS_BAR_DISABLE_RECENT> = 16777216;

        <android.view.View: int STATUS_BAR_DISABLE_CLOCK> = 8388608;

        <android.view.View: int STATUS_BAR_DISABLE_BACK> = 4194304;

        <android.view.View: int STATUS_BAR_DISABLE_HOME> = 2097152;

        <android.view.View: int STATUS_BAR_DISABLE_SYSTEM_INFO> = 1048576;

        <android.view.View: int STATUS_BAR_DISABLE_NOTIFICATION_TICKER> = 524288;

        <android.view.View: int STATUS_BAR_DISABLE_NOTIFICATION_ALERTS> = 262144;

        <android.view.View: int STATUS_BAR_DISABLE_NOTIFICATION_ICONS> = 131072;

        <android.view.View: int STATUS_BAR_DISABLE_EXPAND> = 65536;

        <android.view.View: int STATUS_BAR_VISIBLE> = 0;

        <android.view.View: int STATUS_BAR_HIDDEN> = 1;

        <android.view.View: int SYSTEM_UI_FLAG_IMMERSIVE_STICKY> = 4096;

        <android.view.View: int SYSTEM_UI_FLAG_IMMERSIVE> = 2048;

        <android.view.View: int SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN> = 1024;

        <android.view.View: int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION> = 512;

        <android.view.View: int SYSTEM_UI_FLAG_LAYOUT_STABLE> = 256;

        <android.view.View: int SYSTEM_UI_FLAG_FULLSCREEN> = 4;

        <android.view.View: int SYSTEM_UI_FLAG_HIDE_NAVIGATION> = 2;

        <android.view.View: int SYSTEM_UI_FLAG_LOW_PROFILE> = 1;

        <android.view.View: int SYSTEM_UI_FLAG_VISIBLE> = 0;

        <android.view.View: int OVER_SCROLL_NEVER> = 2;

        <android.view.View: int OVER_SCROLL_IF_CONTENT_SCROLLS> = 1;

        <android.view.View: int OVER_SCROLL_ALWAYS> = 0;

        <android.view.View: int DRAG_MASK> = 3;

        <android.view.View: int PFLAG3_OUTLINE_INVALID> = 256;

        <android.view.View: int PFLAG3_NESTED_SCROLLING_ENABLED> = 128;

        <android.view.View: int PFLAG3_FITTING_SYSTEM_WINDOWS> = 64;

        <android.view.View: int PFLAG3_APPLYING_INSETS> = 32;

        <android.view.View: int PFLAG3_CALLED_SUPER> = 16;

        <android.view.View: int PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT> = 8;

        <android.view.View: int PFLAG3_IS_LAID_OUT> = 4;

        <android.view.View: int PFLAG3_VIEW_IS_ANIMATING_ALPHA> = 2;

        <android.view.View: int PFLAG3_VIEW_IS_ANIMATING_TRANSFORM> = 1;

        <android.view.View: int ALL_RTL_PROPERTIES_RESOLVED> = 1610678816;

        <android.view.View: int PFLAG2_HAS_TRANSIENT_STATE> = -2147483648;

        <android.view.View: int PFLAG2_DRAWABLE_RESOLVED> = 1073741824;

        <android.view.View: int PFLAG2_PADDING_RESOLVED> = 536870912;

        <android.view.View: int PFLAG2_VIEW_QUICK_REJECTED> = 268435456;

        <android.view.View: int PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED> = 134217728;

        <android.view.View: int PFLAG2_ACCESSIBILITY_FOCUSED> = 67108864;

        <android.view.View: int PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK> = 25165824;

        <android.view.View: int ACCESSIBILITY_LIVE_REGION_DEFAULT> = 0;

        <android.view.View: int ACCESSIBILITY_LIVE_REGION_ASSERTIVE> = 2;

        <android.view.View: int ACCESSIBILITY_LIVE_REGION_POLITE> = 1;

        <android.view.View: int ACCESSIBILITY_LIVE_REGION_NONE> = 0;

        <android.view.View: int PFLAG2_ACCESSIBILITY_LIVE_REGION_SHIFT> = 23;

        <android.view.View: int PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK> = 7340032;

        <android.view.View: int IMPORTANT_FOR_ACCESSIBILITY_DEFAULT> = 0;

        <android.view.View: int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS> = 4;

        <android.view.View: int IMPORTANT_FOR_ACCESSIBILITY_NO> = 2;

        <android.view.View: int IMPORTANT_FOR_ACCESSIBILITY_YES> = 1;

        <android.view.View: int IMPORTANT_FOR_ACCESSIBILITY_AUTO> = 0;

        <android.view.View: int PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT> = 20;

        <android.view.View: int PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT> = 131072;

        <android.view.View: int PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK> = 917504;

        <android.view.View: int PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT> = 17;

        <android.view.View: int PFLAG2_TEXT_ALIGNMENT_RESOLVED> = 65536;

        <android.view.View: int PFLAG2_TEXT_ALIGNMENT_MASK> = 57344;

        <android.view.View: int PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT> = 13;

        <android.view.View: int TEXT_ALIGNMENT_RESOLVED_DEFAULT> = 1;

        <android.view.View: int TEXT_ALIGNMENT_DEFAULT> = 1;

        <android.view.View: int TEXT_ALIGNMENT_VIEW_END> = 6;

        <android.view.View: int TEXT_ALIGNMENT_VIEW_START> = 5;

        <android.view.View: int TEXT_ALIGNMENT_CENTER> = 4;

        <android.view.View: int TEXT_ALIGNMENT_TEXT_END> = 3;

        <android.view.View: int TEXT_ALIGNMENT_TEXT_START> = 2;

        <android.view.View: int TEXT_ALIGNMENT_GRAVITY> = 1;

        <android.view.View: int TEXT_ALIGNMENT_INHERIT> = 0;

        <android.view.View: int PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT> = 1024;

        <android.view.View: int PFLAG2_TEXT_DIRECTION_RESOLVED_MASK> = 7168;

        <android.view.View: int PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT> = 10;

        <android.view.View: int PFLAG2_TEXT_DIRECTION_RESOLVED> = 512;

        <android.view.View: int PFLAG2_TEXT_DIRECTION_MASK> = 448;

        <android.view.View: int PFLAG2_TEXT_DIRECTION_MASK_SHIFT> = 6;

        <android.view.View: int TEXT_DIRECTION_RESOLVED_DEFAULT> = 1;

        <android.view.View: int TEXT_DIRECTION_DEFAULT> = 0;

        <android.view.View: int TEXT_DIRECTION_LOCALE> = 5;

        <android.view.View: int TEXT_DIRECTION_RTL> = 4;

        <android.view.View: int TEXT_DIRECTION_LTR> = 3;

        <android.view.View: int TEXT_DIRECTION_ANY_RTL> = 2;

        <android.view.View: int TEXT_DIRECTION_FIRST_STRONG> = 1;

        <android.view.View: int TEXT_DIRECTION_INHERIT> = 0;

        <android.view.View: int LAYOUT_DIRECTION_RESOLVED_DEFAULT> = 0;

        <android.view.View: int LAYOUT_DIRECTION_DEFAULT> = 2;

        <android.view.View: int PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK> = 48;

        <android.view.View: int PFLAG2_LAYOUT_DIRECTION_RESOLVED> = 32;

        <android.view.View: int PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL> = 16;

        <android.view.View: int PFLAG2_LAYOUT_DIRECTION_MASK> = 12;

        <android.view.View: int PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT> = 2;

        <android.view.View: int LAYOUT_DIRECTION_LOCALE> = 3;

        <android.view.View: int LAYOUT_DIRECTION_INHERIT> = 2;

        <android.view.View: int LAYOUT_DIRECTION_RTL> = 1;

        <android.view.View: int LAYOUT_DIRECTION_LTR> = 0;

        <android.view.View: int PFLAG2_DRAG_HOVERED> = 2;

        <android.view.View: int PFLAG2_DRAG_CAN_ACCEPT> = 1;

        <android.view.View: int PFLAG_INVALIDATED> = -2147483648;

        <android.view.View: int PFLAG_ACTIVATED> = 1073741824;

        <android.view.View: int PFLAG_DOES_NOTHING_REUSE_PLEASE> = 536870912;

        <android.view.View: int PFLAG_HOVERED> = 268435456;

        <android.view.View: int PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH> = 134217728;

        <android.view.View: int PFLAG_CANCEL_NEXT_UP_EVENT> = 67108864;

        <android.view.View: int PFLAG_PREPRESSED> = 33554432;

        <android.view.View: int PFLAG_OPAQUE_MASK> = 25165824;

        <android.view.View: int PFLAG_OPAQUE_SCROLLBARS> = 16777216;

        <android.view.View: int PFLAG_OPAQUE_BACKGROUND> = 8388608;

        <android.view.View: int PFLAG_DIRTY_MASK> = 6291456;

        <android.view.View: int PFLAG_DIRTY_OPAQUE> = 4194304;

        <android.view.View: int PFLAG_DIRTY> = 2097152;

        <android.view.View: int PFLAG_SCROLL_CONTAINER_ADDED> = 1048576;

        <android.view.View: int PFLAG_SCROLL_CONTAINER> = 524288;

        <android.view.View: int PFLAG_ALPHA_SET> = 262144;

        <android.view.View: int PFLAG_SAVE_STATE_CALLED> = 131072;

        <android.view.View: int PFLAG_ANIMATION_STARTED> = 65536;

        <android.view.View: int PFLAG_DRAWING_CACHE_VALID> = 32768;

        <android.view.View: int PFLAG_PRESSED> = 16384;

        <android.view.View: int PFLAG_LAYOUT_REQUIRED> = 8192;

        <android.view.View: int PFLAG_FORCE_LAYOUT> = 4096;

        <android.view.View: int PFLAG_MEASURED_DIMENSION_SET> = 2048;

        <android.view.View: int PFLAG_DRAWABLE_STATE_DIRTY> = 1024;

        <android.view.View: int PFLAG_REQUEST_TRANSPARENT_REGIONS> = 512;

        <android.view.View: int PFLAG_ONLY_DRAWS_BACKGROUND> = 256;

        <android.view.View: int PFLAG_SKIP_DRAW> = 128;

        <android.view.View: int PFLAG_DRAW_ANIMATION> = 64;

        <android.view.View: int PFLAG_DRAWN> = 32;

        <android.view.View: int PFLAG_HAS_BOUNDS> = 16;

        <android.view.View: int PFLAG_IS_ROOT_NAMESPACE> = 8;

        <android.view.View: int PFLAG_SELECTED> = 4;

        <android.view.View: int PFLAG_FOCUSED> = 2;

        <android.view.View: int PFLAG_WANTS_FOCUS> = 1;

        <android.view.View: int POPULATING_ACCESSIBILITY_EVENT_TYPES> = 172479;

        <android.view.View: int VIEW_STATE_DRAG_HOVERED> = 512;

        <android.view.View: int VIEW_STATE_DRAG_CAN_ACCEPT> = 256;

        <android.view.View: int VIEW_STATE_HOVERED> = 128;

        <android.view.View: int VIEW_STATE_ACCELERATED> = 64;

        <android.view.View: int VIEW_STATE_ACTIVATED> = 32;

        <android.view.View: int VIEW_STATE_PRESSED> = 16;

        <android.view.View: int VIEW_STATE_ENABLED> = 8;

        <android.view.View: int VIEW_STATE_FOCUSED> = 4;

        <android.view.View: int VIEW_STATE_SELECTED> = 2;

        <android.view.View: int VIEW_STATE_WINDOW_FOCUSED> = 1;

        <android.view.View: int MEASURED_STATE_TOO_SMALL> = 16777216;

        <android.view.View: int MEASURED_HEIGHT_STATE_SHIFT> = 16;

        <android.view.View: int MEASURED_STATE_MASK> = -16777216;

        <android.view.View: int MEASURED_SIZE_MASK> = 16777215;

        <android.view.View: int FOCUS_DOWN> = 130;

        <android.view.View: int FOCUS_RIGHT> = 66;

        <android.view.View: int FOCUS_UP> = 33;

        <android.view.View: int FOCUS_LEFT> = 17;

        <android.view.View: int FOCUS_FORWARD> = 2;

        <android.view.View: int FOCUS_BACKWARD> = 1;

        <android.view.View: int FOCUSABLES_TOUCH_MODE> = 1;

        <android.view.View: int FOCUSABLES_ALL> = 0;

        <android.view.View: int PARENT_SAVE_DISABLED_MASK> = 536870912;

        <android.view.View: int PARENT_SAVE_DISABLED> = 536870912;

        <android.view.View: int HAPTIC_FEEDBACK_ENABLED> = 268435456;

        <android.view.View: int SOUND_EFFECTS_ENABLED> = 134217728;

        <android.view.View: int KEEP_SCREEN_ON> = 67108864;

        <android.view.View: int SCROLLBARS_STYLE_MASK> = 50331648;

        <android.view.View: int SCROLLBARS_OUTSIDE_MASK> = 33554432;

        <android.view.View: int SCROLLBARS_INSET_MASK> = 16777216;

        <android.view.View: int SCROLLBARS_OUTSIDE_INSET> = 50331648;

        <android.view.View: int SCROLLBARS_OUTSIDE_OVERLAY> = 33554432;

        <android.view.View: int SCROLLBARS_INSIDE_INSET> = 16777216;

        <android.view.View: int SCROLLBARS_INSIDE_OVERLAY> = 0;

        <android.view.View: int DUPLICATE_PARENT_STATE> = 4194304;

        <android.view.View: int LONG_CLICKABLE> = 2097152;

        <android.view.View: int DRAWING_CACHE_QUALITY_MASK> = 1572864;

        <android.view.View: int DRAWING_CACHE_QUALITY_AUTO> = 0;

        <android.view.View: int DRAWING_CACHE_QUALITY_HIGH> = 1048576;

        <android.view.View: int DRAWING_CACHE_QUALITY_LOW> = 524288;

        <android.view.View: int FOCUSABLE_IN_TOUCH_MODE> = 262144;

        <android.view.View: int WILL_NOT_CACHE_DRAWING> = 131072;

        <android.view.View: int SAVE_DISABLED_MASK> = 65536;

        <android.view.View: int SAVE_DISABLED> = 65536;

        <android.view.View: int DRAWING_CACHE_ENABLED> = 32768;

        <android.view.View: int CLICKABLE> = 16384;

        <android.view.View: int FADING_EDGE_MASK> = 12288;

        <android.view.View: int FADING_EDGE_VERTICAL> = 8192;

        <android.view.View: int FADING_EDGE_HORIZONTAL> = 4096;

        <android.view.View: int FADING_EDGE_NONE> = 0;

        <android.view.View: int OPTIONAL_FITS_SYSTEM_WINDOWS> = 2048;

        <android.view.View: int FILTER_TOUCHES_WHEN_OBSCURED> = 1024;

        <android.view.View: int SCROLLBARS_MASK> = 768;

        <android.view.View: int SCROLLBARS_VERTICAL> = 512;

        <android.view.View: int SCROLLBARS_HORIZONTAL> = 256;

        <android.view.View: int SCROLLBARS_NONE> = 0;

        <android.view.View: int DRAW_MASK> = 128;

        <android.view.View: int WILL_NOT_DRAW> = 128;

        <android.view.View: int ENABLED_MASK> = 32;

        <android.view.View: int DISABLED> = 32;

        <android.view.View: int ENABLED> = 0;

        <android.view.View: int VISIBILITY_MASK> = 12;

        <android.view.View: int GONE> = 8;

        <android.view.View: int INVISIBLE> = 4;

        <android.view.View: int VISIBLE> = 0;

        <android.view.View: int FITS_SYSTEM_WINDOWS> = 2;

        <android.view.View: int FOCUSABLE_MASK> = 1;

        <android.view.View: int FOCUSABLE> = 1;

        <android.view.View: int NOT_FOCUSABLE> = 0;

        <android.view.View: int NO_ID> = -1;

        <android.view.View: java.lang.String DEBUG_LAYOUT_PROPERTY> = "debug.layout";

        <android.view.View: java.lang.String VIEW_LOG_TAG> = "View";

        <android.view.View: boolean DBG> = 0;

        <android.view.View: boolean mDebugViewAttributes> = 0;

        <android.view.View: boolean sCompatibilityDone> = 0;

        <android.view.View: boolean sUseBrokenMakeMeasureSpec> = 0;

        <android.view.View: boolean sIgnoreMeasureCache> = 0;

        $r2 = newarray (int)[3];

        $r2[0] = 0;

        $r2[1] = 4;

        $r2[2] = 8;

        <android.view.View: int[] VISIBILITY_FLAGS> = $r2;

        $r3 = newarray (int)[3];

        $r3[0] = 0;

        $r3[1] = 524288;

        $r3[2] = 1048576;

        <android.view.View: int[] DRAWING_CACHE_QUALITY_FLAGS> = $r3;

        $r4 = newarray (int)[20];

        $r4[0] = 16842909;

        $r4[1] = 1;

        $r4[2] = 16842913;

        $r4[3] = 2;

        $r4[4] = 16842908;

        $r4[5] = 4;

        $r4[6] = 16842910;

        $r4[7] = 8;

        $r4[8] = 16842919;

        $r4[9] = 16;

        $r4[10] = 16843518;

        $r4[11] = 32;

        $r4[12] = 16843547;

        $r4[13] = 64;

        $r4[14] = 16843623;

        $r4[15] = 128;

        $r4[16] = 16843624;

        $r4[17] = 256;

        $r4[18] = 16843625;

        $r4[19] = 512;

        <android.view.View: int[] VIEW_STATE_IDS> = $r4;

        $r5 = <android.view.View: int[] VIEW_STATE_IDS>;

        $i5 = lengthof $r5;

        $i7 = $i5 / 2;

        $r6 = <com.android.internal.R$styleable: int[] ViewDrawableStates>;

        $i6 = lengthof $r6;

        if $i7 == $i6 goto label01;

        $r97 = new java.lang.IllegalStateException;

        specialinvoke $r97.<java.lang.IllegalStateException: void <init>(java.lang.String)>("VIEW_STATE_IDs array length does not match ViewDrawableStates style array");

        throw $r97;

     label01:
        $r7 = <android.view.View: int[] VIEW_STATE_IDS>;

        $i8 = lengthof $r7;

        r0 = newarray (int)[$i8];

        i0 = 0;

     label02:
        $r8 = <com.android.internal.R$styleable: int[] ViewDrawableStates>;

        $i9 = lengthof $r8;

        if i0 >= $i9 goto label06;

        $r96 = <com.android.internal.R$styleable: int[] ViewDrawableStates>;

        i1 = $r96[i0];

        i2 = 0;

     label03:
        $r95 = <android.view.View: int[] VIEW_STATE_IDS>;

        $i19 = lengthof $r95;

        if i2 >= $i19 goto label05;

        $r94 = <android.view.View: int[] VIEW_STATE_IDS>;

        $i18 = $r94[i2];

        if $i18 != i1 goto label04;

        $i17 = i0 * 2;

        r0[$i17] = i1;

        $i25 = i0 * 2;

        $i22 = $i25 + 1;

        $r98 = <android.view.View: int[] VIEW_STATE_IDS>;

        $i24 = i2 + 1;

        $i23 = $r98[$i24];

        r0[$i22] = $i23;

     label04:
        i2 = i2 + 2;

        goto label03;

     label05:
        i0 = i0 + 1;

        goto label02;

     label06:
        $r9 = <android.view.View: int[] VIEW_STATE_IDS>;

        $i11 = lengthof $r9;

        i26 = $i11 / 2;

        $i10 = 1 << i26;

        $r11 = newarray (int[])[$i10];

        <android.view.View: int[][] VIEW_STATE_SETS> = $r11;

        i27 = 0;

     label07:
        $r10 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $i12 = lengthof $r10;

        if i27 >= $i12 goto label11;

        i28 = staticinvoke <java.lang.Integer: int bitCount(int)>(i27);

        r1 = newarray (int)[i28];

        i3 = 0;

        i4 = 0;

     label08:
        $i16 = lengthof r0;

        if i4 >= $i16 goto label10;

        $i15 = i4 + 1;

        $i13 = r0[$i15];

        $i14 = i27 & $i13;

        if $i14 == 0 goto label09;

        $i21 = i3;

        i3 = i3 + 1;

        $i20 = r0[i4];

        r1[$i21] = $i20;

     label09:
        i4 = i4 + 2;

        goto label08;

     label10:
        $r91 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r91[i27] = r1;

        i27 = i27 + 1;

        goto label07;

     label11:
        $r12 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r14 = $r12[0];

        <android.view.View: int[] EMPTY_STATE_SET> = $r14;

        $r13 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r16 = $r13[1];

        <android.view.View: int[] WINDOW_FOCUSED_STATE_SET> = $r16;

        $r15 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r18 = $r15[2];

        <android.view.View: int[] SELECTED_STATE_SET> = $r18;

        $r17 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r21 = $r17[3];

        <android.view.View: int[] SELECTED_WINDOW_FOCUSED_STATE_SET> = $r21;

        $r22 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r19 = $r22[4];

        <android.view.View: int[] FOCUSED_STATE_SET> = $r19;

        $r20 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r25 = $r20[5];

        <android.view.View: int[] FOCUSED_WINDOW_FOCUSED_STATE_SET> = $r25;

        $r26 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r23 = $r26[6];

        <android.view.View: int[] FOCUSED_SELECTED_STATE_SET> = $r23;

        $r24 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r29 = $r24[7];

        <android.view.View: int[] FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r29;

        $r30 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r27 = $r30[8];

        <android.view.View: int[] ENABLED_STATE_SET> = $r27;

        $r28 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r33 = $r28[9];

        <android.view.View: int[] ENABLED_WINDOW_FOCUSED_STATE_SET> = $r33;

        $r34 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r31 = $r34[10];

        <android.view.View: int[] ENABLED_SELECTED_STATE_SET> = $r31;

        $r32 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r38 = $r32[11];

        <android.view.View: int[] ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r38;

        $r37 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r36 = $r37[12];

        <android.view.View: int[] ENABLED_FOCUSED_STATE_SET> = $r36;

        $r35 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r42 = $r35[13];

        <android.view.View: int[] ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET> = $r42;

        $r41 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r40 = $r41[14];

        <android.view.View: int[] ENABLED_FOCUSED_SELECTED_STATE_SET> = $r40;

        $r39 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r46 = $r39[15];

        <android.view.View: int[] ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r46;

        $r45 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r44 = $r45[16];

        <android.view.View: int[] PRESSED_STATE_SET> = $r44;

        $r43 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r50 = $r43[17];

        <android.view.View: int[] PRESSED_WINDOW_FOCUSED_STATE_SET> = $r50;

        $r49 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r48 = $r49[18];

        <android.view.View: int[] PRESSED_SELECTED_STATE_SET> = $r48;

        $r47 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r55 = $r47[19];

        <android.view.View: int[] PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r55;

        $r56 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r57 = $r56[20];

        <android.view.View: int[] PRESSED_FOCUSED_STATE_SET> = $r57;

        $r58 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r51 = $r58[21];

        <android.view.View: int[] PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET> = $r51;

        $r52 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r53 = $r52[22];

        <android.view.View: int[] PRESSED_FOCUSED_SELECTED_STATE_SET> = $r53;

        $r54 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r63 = $r54[23];

        <android.view.View: int[] PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r63;

        $r64 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r65 = $r64[24];

        <android.view.View: int[] PRESSED_ENABLED_STATE_SET> = $r65;

        $r66 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r59 = $r66[25];

        <android.view.View: int[] PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET> = $r59;

        $r60 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r61 = $r60[26];

        <android.view.View: int[] PRESSED_ENABLED_SELECTED_STATE_SET> = $r61;

        $r62 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r72 = $r62[27];

        <android.view.View: int[] PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r72;

        $r71 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r74 = $r71[28];

        <android.view.View: int[] PRESSED_ENABLED_FOCUSED_STATE_SET> = $r74;

        $r73 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r68 = $r73[29];

        <android.view.View: int[] PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET> = $r68;

        $r67 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r70 = $r67[30];

        <android.view.View: int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET> = $r70;

        $r69 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r80 = $r69[31];

        <android.view.View: int[] PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r80;

        $r79 = new java.lang.ThreadLocal;

        specialinvoke $r79.<java.lang.ThreadLocal: void <init>()>();

        <android.view.View: java.lang.ThreadLocal sThreadLocal> = $r79;

        $r82 = newarray (int)[4];

        $r82[0] = 0;

        $r82[1] = 1;

        $r82[2] = 2;

        $r82[3] = 3;

        <android.view.View: int[] LAYOUT_DIRECTION_FLAGS> = $r82;

        $r81 = newarray (int)[6];

        $r81[0] = 0;

        $r81[1] = 64;

        $r81[2] = 128;

        $r81[3] = 192;

        $r81[4] = 256;

        $r81[5] = 320;

        <android.view.View: int[] PFLAG2_TEXT_DIRECTION_FLAGS> = $r81;

        $r76 = newarray (int)[7];

        $r76[0] = 0;

        $r76[1] = 8192;

        $r76[2] = 16384;

        $r76[3] = 24576;

        $r76[4] = 32768;

        $r76[5] = 40960;

        $r76[6] = 49152;

        <android.view.View: int[] PFLAG2_TEXT_ALIGNMENT_FLAGS> = $r76;

        $r75 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r75.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        <android.view.View: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId> = $r75;

        $r78 = new android.view.View$3;

        specialinvoke $r78.<android.view.View$3: void <init>(java.lang.String)>("alpha");

        <android.view.View: android.util.Property ALPHA> = $r78;

        $r77 = new android.view.View$4;

        specialinvoke $r77.<android.view.View$4: void <init>(java.lang.String)>("translationX");

        <android.view.View: android.util.Property TRANSLATION_X> = $r77;

        $r89 = new android.view.View$5;

        specialinvoke $r89.<android.view.View$5: void <init>(java.lang.String)>("translationY");

        <android.view.View: android.util.Property TRANSLATION_Y> = $r89;

        $r90 = new android.view.View$6;

        specialinvoke $r90.<android.view.View$6: void <init>(java.lang.String)>("translationZ");

        <android.view.View: android.util.Property TRANSLATION_Z> = $r90;

        $r87 = new android.view.View$7;

        specialinvoke $r87.<android.view.View$7: void <init>(java.lang.String)>("x");

        <android.view.View: android.util.Property X> = $r87;

        $r88 = new android.view.View$8;

        specialinvoke $r88.<android.view.View$8: void <init>(java.lang.String)>("y");

        <android.view.View: android.util.Property Y> = $r88;

        $r85 = new android.view.View$9;

        specialinvoke $r85.<android.view.View$9: void <init>(java.lang.String)>("z");

        <android.view.View: android.util.Property Z> = $r85;

        $r86 = new android.view.View$10;

        specialinvoke $r86.<android.view.View$10: void <init>(java.lang.String)>("rotation");

        <android.view.View: android.util.Property ROTATION> = $r86;

        $r83 = new android.view.View$11;

        specialinvoke $r83.<android.view.View$11: void <init>(java.lang.String)>("rotationX");

        <android.view.View: android.util.Property ROTATION_X> = $r83;

        $r84 = new android.view.View$12;

        specialinvoke $r84.<android.view.View$12: void <init>(java.lang.String)>("rotationY");

        <android.view.View: android.util.Property ROTATION_Y> = $r84;

        $r92 = new android.view.View$13;

        specialinvoke $r92.<android.view.View$13: void <init>(java.lang.String)>("scaleX");

        <android.view.View: android.util.Property SCALE_X> = $r92;

        $r93 = new android.view.View$14;

        specialinvoke $r93.<android.view.View$14: void <init>(java.lang.String)>("scaleY");

        <android.view.View: android.util.Property SCALE_Y> = $r93;

        return;
    }
}
