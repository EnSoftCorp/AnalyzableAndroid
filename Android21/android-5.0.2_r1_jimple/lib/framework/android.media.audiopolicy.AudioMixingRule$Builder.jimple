public class android.media.audiopolicy.AudioMixingRule$Builder extends java.lang.Object
{
    private java.util.ArrayList mCriteria;

    public void <init>()
    {
        android.media.audiopolicy.AudioMixingRule$Builder r0;
        java.util.ArrayList $r1;

        r0 := @this: android.media.audiopolicy.AudioMixingRule$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<android.media.audiopolicy.AudioMixingRule$Builder: java.util.ArrayList mCriteria> = $r1;

        return;
    }

    public android.media.audiopolicy.AudioMixingRule$Builder addRule(android.media.AudioAttributes, int) throws java.lang.IllegalArgumentException
    {
        android.media.audiopolicy.AudioMixingRule$Builder r0;
        android.media.AudioAttributes r1, $r11;
        int i0, $i1, $i2, $i3;
        java.util.ArrayList r2, $r6, $r7, $r9;
        java.util.Iterator r3;
        android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion r4, $r8;
        java.lang.Throwable r5, $r23;
        boolean $z0;
        java.lang.Object $r10;
        java.lang.StringBuilder $r12, $r14, $r15, $r17, $r19, $r20;
        java.lang.IllegalArgumentException $r13, $r18, $r21;
        java.lang.String $r16, $r22;

        r0 := @this: android.media.audiopolicy.AudioMixingRule$Builder;

        r1 := @parameter0: android.media.AudioAttributes;

        i0 := @parameter1: int;

        if r1 != null goto label01;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioAttributes argument");

        throw $r21;

     label01:
        if i0 == 1 goto label02;

        if i0 == 2 goto label02;

        $r18 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal rule value ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r18;

     label02:
        $r6 = r0.<android.media.audiopolicy.AudioMixingRule$Builder: java.util.ArrayList mCriteria>;

        r2 = $r6;

        entermonitor $r6;

     label03:
        $r7 = r0.<android.media.audiopolicy.AudioMixingRule$Builder: java.util.ArrayList mCriteria>;

        r3 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion) $r10;

        if i0 == 1 goto label05;

        if i0 != 2 goto label08;

     label05:
        $r11 = r4.<android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion: android.media.AudioAttributes mAttr>;

        $i1 = virtualinvoke $r11.<android.media.AudioAttributes: int getUsage()>();

        $i3 = virtualinvoke r1.<android.media.AudioAttributes: int getUsage()>();

        if $i1 != $i3 goto label08;

        $i2 = r4.<android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion: int mRule>;

        if $i2 != i0 goto label07;

        exitmonitor r2;

     label06:
        return r0;

     label07:
        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Contradictory rule exists for ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label08:
        goto label04;

     label09:
        $r9 = r0.<android.media.audiopolicy.AudioMixingRule$Builder: java.util.ArrayList mCriteria>;

        $r8 = new android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion;

        specialinvoke $r8.<android.media.audiopolicy.AudioMixingRule$AttributeMatchCriterion: void <init>(android.media.AudioAttributes,int)>(r1, i0);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        exitmonitor r2;

     label10:
        goto label13;

     label11:
        $r23 := @caughtexception;

        r5 = $r23;

        exitmonitor r2;

     label12:
        throw r5;

     label13:
        return r0;

        catch java.lang.Throwable from label03 to label06 with label11;
        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public android.media.audiopolicy.AudioMixingRule build()
    {
        android.media.audiopolicy.AudioMixingRule$Builder r0;
        android.media.audiopolicy.AudioMixingRule $r1;
        java.util.ArrayList $r2;

        r0 := @this: android.media.audiopolicy.AudioMixingRule$Builder;

        $r1 = new android.media.audiopolicy.AudioMixingRule;

        $r2 = r0.<android.media.audiopolicy.AudioMixingRule$Builder: java.util.ArrayList mCriteria>;

        specialinvoke $r1.<android.media.audiopolicy.AudioMixingRule: void <init>(java.util.ArrayList,android.media.audiopolicy.AudioMixingRule$1)>($r2, null);

        return $r1;
    }
}
