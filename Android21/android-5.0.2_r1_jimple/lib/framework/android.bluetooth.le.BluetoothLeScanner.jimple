public final class android.bluetooth.le.BluetoothLeScanner extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean DBG;
    private final android.bluetooth.IBluetoothManager mBluetoothManager;
    private final android.os.Handler mHandler;
    private android.bluetooth.BluetoothAdapter mBluetoothAdapter;
    private final java.util.Map mLeScanClients;

    public void <init>(android.bluetooth.IBluetoothManager)
    {
        android.bluetooth.le.BluetoothLeScanner r0;
        android.bluetooth.IBluetoothManager r1;
        android.bluetooth.BluetoothAdapter $r2;
        android.os.Handler $r3;
        android.os.Looper $r4;
        java.util.HashMap $r5;

        r0 := @this: android.bluetooth.le.BluetoothLeScanner;

        r1 := @parameter0: android.bluetooth.IBluetoothManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.bluetooth.le.BluetoothLeScanner: android.bluetooth.IBluetoothManager mBluetoothManager> = r1;

        $r2 = staticinvoke <android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()>();

        r0.<android.bluetooth.le.BluetoothLeScanner: android.bluetooth.BluetoothAdapter mBluetoothAdapter> = $r2;

        $r3 = new android.os.Handler;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper)>($r4);

        r0.<android.bluetooth.le.BluetoothLeScanner: android.os.Handler mHandler> = $r3;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<android.bluetooth.le.BluetoothLeScanner: java.util.Map mLeScanClients> = $r5;

        return;
    }

    public void startScan(android.bluetooth.le.ScanCallback)
    {
        android.bluetooth.le.BluetoothLeScanner r0;
        android.bluetooth.le.ScanCallback r1;
        android.bluetooth.le.ScanSettings$Builder $r2;
        android.bluetooth.le.ScanSettings $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.bluetooth.le.BluetoothLeScanner;

        r1 := @parameter0: android.bluetooth.le.ScanCallback;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback is null");

        throw $r4;

     label1:
        $r2 = new android.bluetooth.le.ScanSettings$Builder;

        specialinvoke $r2.<android.bluetooth.le.ScanSettings$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<android.bluetooth.le.ScanSettings$Builder: android.bluetooth.le.ScanSettings build()>();

        virtualinvoke r0.<android.bluetooth.le.BluetoothLeScanner: void startScan(java.util.List,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)>(null, $r3, r1);

        return;
    }

    public void startScan(java.util.List, android.bluetooth.le.ScanSettings, android.bluetooth.le.ScanCallback)
    {
        android.bluetooth.le.BluetoothLeScanner r0;
        java.util.List r1;
        android.bluetooth.le.ScanSettings r2;
        android.bluetooth.le.ScanCallback r3;

        r0 := @this: android.bluetooth.le.BluetoothLeScanner;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.bluetooth.le.ScanSettings;

        r3 := @parameter2: android.bluetooth.le.ScanCallback;

        specialinvoke r0.<android.bluetooth.le.BluetoothLeScanner: void startScan(java.util.List,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback,java.util.List)>(r1, r2, r3, null);

        return;
    }

    private void startScan(java.util.List, android.bluetooth.le.ScanSettings, android.bluetooth.le.ScanCallback, java.util.List)
    {
        android.bluetooth.le.BluetoothLeScanner r0;
        java.util.List r1, r4;
        android.bluetooth.le.ScanSettings r2;
        android.bluetooth.le.ScanCallback r3;
        java.util.Map r5, $r11, $r12;
        android.bluetooth.IBluetoothGatt r6;
        java.lang.Throwable r8, $r15;
        android.bluetooth.BluetoothAdapter $r9;
        java.lang.IllegalArgumentException $r10;
        boolean $z0, $z1;
        android.bluetooth.IBluetoothManager $r13;
        android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper $r14, r17;
        android.os.RemoteException $r16;

        r0 := @this: android.bluetooth.le.BluetoothLeScanner;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.bluetooth.le.ScanSettings;

        r3 := @parameter2: android.bluetooth.le.ScanCallback;

        r4 := @parameter3: java.util.List;

        $r9 = r0.<android.bluetooth.le.BluetoothLeScanner: android.bluetooth.BluetoothAdapter mBluetoothAdapter>;

        staticinvoke <android.bluetooth.le.BluetoothLeUtils: void checkAdapterStateOn(android.bluetooth.BluetoothAdapter)>($r9);

        if r2 == null goto label01;

        if r3 != null goto label02;

     label01:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("settings or callback is null");

        throw $r10;

     label02:
        $r11 = r0.<android.bluetooth.le.BluetoothLeScanner: java.util.Map mLeScanClients>;

        r5 = $r11;

        entermonitor $r11;

     label03:
        $r12 = r0.<android.bluetooth.le.BluetoothLeScanner: java.util.Map mLeScanClients>;

        $z0 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        if $z0 == 0 goto label05;

        specialinvoke r0.<android.bluetooth.le.BluetoothLeScanner: void postCallbackError(android.bluetooth.le.ScanCallback,int)>(r3, 1);

        exitmonitor r5;

     label04:
        return;

     label05:
        $r13 = r0.<android.bluetooth.le.BluetoothLeScanner: android.bluetooth.IBluetoothManager mBluetoothManager>;

        r6 = interfaceinvoke $r13.<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>();

     label06:
        goto label08;

     label07:
        $r16 := @caughtexception;

        r6 = null;

     label08:
        if r6 != null goto label10;

        specialinvoke r0.<android.bluetooth.le.BluetoothLeScanner: void postCallbackError(android.bluetooth.le.ScanCallback,int)>(r3, 3);

        exitmonitor r5;

     label09:
        return;

     label10:
        $z1 = specialinvoke r0.<android.bluetooth.le.BluetoothLeScanner: boolean isSettingsConfigAllowedForScan(android.bluetooth.le.ScanSettings)>(r2);

        if $z1 != 0 goto label12;

        specialinvoke r0.<android.bluetooth.le.BluetoothLeScanner: void postCallbackError(android.bluetooth.le.ScanCallback,int)>(r3, 4);

        exitmonitor r5;

     label11:
        return;

     label12:
        $r14 = new android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper;

        specialinvoke $r14.<android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper: void <init>(android.bluetooth.le.BluetoothLeScanner,android.bluetooth.IBluetoothGatt,java.util.List,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback,java.util.List)>(r0, r6, r1, r2, r3, r4);

        r17 = $r14;

        virtualinvoke r17.<android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper: void startRegisteration()>();

        exitmonitor r5;

     label13:
        goto label16;

     label14:
        $r15 := @caughtexception;

        r8 = $r15;

        exitmonitor r5;

     label15:
        throw r8;

     label16:
        return;

        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public void stopScan(android.bluetooth.le.ScanCallback)
    {
        android.bluetooth.le.BluetoothLeScanner r0;
        android.bluetooth.le.ScanCallback r1;
        java.util.Map r2, $r6, $r7;
        android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper r3;
        java.lang.Throwable r4, $r9;
        android.bluetooth.BluetoothAdapter $r5;
        java.lang.Object $r8;

        r0 := @this: android.bluetooth.le.BluetoothLeScanner;

        r1 := @parameter0: android.bluetooth.le.ScanCallback;

        $r5 = r0.<android.bluetooth.le.BluetoothLeScanner: android.bluetooth.BluetoothAdapter mBluetoothAdapter>;

        staticinvoke <android.bluetooth.le.BluetoothLeUtils: void checkAdapterStateOn(android.bluetooth.BluetoothAdapter)>($r5);

        $r6 = r0.<android.bluetooth.le.BluetoothLeScanner: java.util.Map mLeScanClients>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<android.bluetooth.le.BluetoothLeScanner: java.util.Map mLeScanClients>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper) $r8;

        if r3 != null goto label3;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("BluetoothLeScanner", "could not find callback wrapper");

        exitmonitor r2;

     label2:
        return;

     label3:
        virtualinvoke r3.<android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper: void stopLeScan()>();

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void flushPendingScanResults(android.bluetooth.le.ScanCallback)
    {
        android.bluetooth.le.BluetoothLeScanner r0;
        android.bluetooth.le.ScanCallback r1;
        java.util.Map r2, $r6, $r7;
        android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper r3;
        java.lang.Throwable r4, $r10;
        android.bluetooth.BluetoothAdapter $r5;
        java.lang.Object $r8;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: android.bluetooth.le.BluetoothLeScanner;

        r1 := @parameter0: android.bluetooth.le.ScanCallback;

        $r5 = r0.<android.bluetooth.le.BluetoothLeScanner: android.bluetooth.BluetoothAdapter mBluetoothAdapter>;

        staticinvoke <android.bluetooth.le.BluetoothLeUtils: void checkAdapterStateOn(android.bluetooth.BluetoothAdapter)>($r5);

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback cannot be null!");

        throw $r9;

     label1:
        $r6 = r0.<android.bluetooth.le.BluetoothLeScanner: java.util.Map mLeScanClients>;

        r2 = $r6;

        entermonitor $r6;

     label2:
        $r7 = r0.<android.bluetooth.le.BluetoothLeScanner: java.util.Map mLeScanClients>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper) $r8;

        if r3 != null goto label4;

        exitmonitor r2;

     label3:
        return;

     label4:
        virtualinvoke r3.<android.bluetooth.le.BluetoothLeScanner$BleScanCallbackWrapper: void flushPendingBatchResults()>();

        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void startTruncatedScan(java.util.List, android.bluetooth.le.ScanSettings, android.bluetooth.le.ScanCallback)
    {
        android.bluetooth.le.BluetoothLeScanner r0;
        java.util.List r1, $r12;
        android.bluetooth.le.ScanSettings r2;
        android.bluetooth.le.ScanCallback r3;
        int i0;
        java.util.ArrayList r4, r5, $r8, $r9;
        java.util.Iterator r6;
        android.bluetooth.le.TruncatedFilter r7;
        boolean $z0;
        java.lang.Object $r10;
        android.bluetooth.le.ScanFilter $r11;

        r0 := @this: android.bluetooth.le.BluetoothLeScanner;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.bluetooth.le.ScanSettings;

        r3 := @parameter2: android.bluetooth.le.ScanCallback;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(i0);

        r4 = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(i0);

        r5 = $r9;

        r6 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.bluetooth.le.TruncatedFilter) $r10;

        $r11 = virtualinvoke r7.<android.bluetooth.le.TruncatedFilter: android.bluetooth.le.ScanFilter getFilter()>();

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = virtualinvoke r7.<android.bluetooth.le.TruncatedFilter: java.util.List getStorageDescriptors()>();

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label1;

     label2:
        specialinvoke r0.<android.bluetooth.le.BluetoothLeScanner: void startScan(java.util.List,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback,java.util.List)>(r4, r2, r3, r5);

        return;
    }

    public void cleanup()
    {
        android.bluetooth.le.BluetoothLeScanner r0;
        java.util.Map $r1;

        r0 := @this: android.bluetooth.le.BluetoothLeScanner;

        $r1 = r0.<android.bluetooth.le.BluetoothLeScanner: java.util.Map mLeScanClients>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    private void postCallbackError(android.bluetooth.le.ScanCallback, int)
    {
        android.bluetooth.le.BluetoothLeScanner r0;
        android.bluetooth.le.ScanCallback r1;
        int i0;
        android.bluetooth.le.BluetoothLeScanner$1 $r2;
        android.os.Handler $r3;

        r0 := @this: android.bluetooth.le.BluetoothLeScanner;

        r1 := @parameter0: android.bluetooth.le.ScanCallback;

        i0 := @parameter1: int;

        $r3 = r0.<android.bluetooth.le.BluetoothLeScanner: android.os.Handler mHandler>;

        $r2 = new android.bluetooth.le.BluetoothLeScanner$1;

        specialinvoke $r2.<android.bluetooth.le.BluetoothLeScanner$1: void <init>(android.bluetooth.le.BluetoothLeScanner,android.bluetooth.le.ScanCallback,int)>(r0, r1, i0);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private boolean isSettingsConfigAllowedForScan(android.bluetooth.le.ScanSettings)
    {
        android.bluetooth.le.BluetoothLeScanner r0;
        android.bluetooth.le.ScanSettings r1;
        int i0;
        android.bluetooth.BluetoothAdapter $r2;
        boolean $z0;
        long $l1;
        byte $b2;

        r0 := @this: android.bluetooth.le.BluetoothLeScanner;

        r1 := @parameter0: android.bluetooth.le.ScanSettings;

        $r2 = r0.<android.bluetooth.le.BluetoothLeScanner: android.bluetooth.BluetoothAdapter mBluetoothAdapter>;

        $z0 = virtualinvoke $r2.<android.bluetooth.BluetoothAdapter: boolean isOffloadedFilteringSupported()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        i0 = virtualinvoke r1.<android.bluetooth.le.ScanSettings: int getCallbackType()>();

        if i0 != 1 goto label2;

        $l1 = virtualinvoke r1.<android.bluetooth.le.ScanSettings: long getReportDelayMillis()>();

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    static void access$000(android.bluetooth.le.BluetoothLeScanner, android.bluetooth.le.ScanCallback, int)
    {
        android.bluetooth.le.BluetoothLeScanner r0;
        android.bluetooth.le.ScanCallback r1;
        int i0;

        r0 := @parameter0: android.bluetooth.le.BluetoothLeScanner;

        r1 := @parameter1: android.bluetooth.le.ScanCallback;

        i0 := @parameter2: int;

        specialinvoke r0.<android.bluetooth.le.BluetoothLeScanner: void postCallbackError(android.bluetooth.le.ScanCallback,int)>(r1, i0);

        return;
    }

    static java.util.Map access$100(android.bluetooth.le.BluetoothLeScanner)
    {
        android.bluetooth.le.BluetoothLeScanner r0;
        java.util.Map $r1;

        r0 := @parameter0: android.bluetooth.le.BluetoothLeScanner;

        $r1 = r0.<android.bluetooth.le.BluetoothLeScanner: java.util.Map mLeScanClients>;

        return $r1;
    }

    public static void <clinit>()
    {
        <android.bluetooth.le.BluetoothLeScanner: boolean DBG> = 1;

        <android.bluetooth.le.BluetoothLeScanner: java.lang.String TAG> = "BluetoothLeScanner";

        return;
    }
}
