public class android.text.method.WordIterator extends java.lang.Object implements android.text.Selection$PositionIterator
{
    private static final int WINDOW_WIDTH;
    private java.lang.String mString;
    private int mOffsetShift;
    private java.text.BreakIterator mIterator;

    public void <init>()
    {
        android.text.method.WordIterator r0;
        java.util.Locale $r1;

        r0 := @this: android.text.method.WordIterator;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<android.text.method.WordIterator: void <init>(java.util.Locale)>($r1);

        return;
    }

    public void <init>(java.util.Locale)
    {
        android.text.method.WordIterator r0;
        java.util.Locale r1;
        java.text.BreakIterator $r2;

        r0 := @this: android.text.method.WordIterator;

        r1 := @parameter0: java.util.Locale;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance(java.util.Locale)>(r1);

        r0.<android.text.method.WordIterator: java.text.BreakIterator mIterator> = $r2;

        return;
    }

    public void setCharSequence(java.lang.CharSequence, int, int)
    {
        android.text.method.WordIterator r0;
        java.lang.CharSequence r1, $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        java.lang.String $r3, $r4, $r7;
        java.text.BreakIterator $r5;
        android.text.SpannableStringBuilder $r6;

        r0 := @this: android.text.method.WordIterator;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = i0 - 50;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i3);

        r0.<android.text.method.WordIterator: int mOffsetShift> = $i4;

        $i5 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i6 = i1 + 50;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i6);

        $z0 = r1 instanceof android.text.SpannableStringBuilder;

        if $z0 == 0 goto label1;

        $r6 = (android.text.SpannableStringBuilder) r1;

        $i8 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        $r7 = virtualinvoke $r6.<android.text.SpannableStringBuilder: java.lang.String substring(int,int)>($i8, i2);

        r0.<android.text.method.WordIterator: java.lang.String mString> = $r7;

        goto label2;

     label1:
        $i7 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        $r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i7, i2);

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        r0.<android.text.method.WordIterator: java.lang.String mString> = $r3;

     label2:
        $r5 = r0.<android.text.method.WordIterator: java.text.BreakIterator mIterator>;

        $r4 = r0.<android.text.method.WordIterator: java.lang.String mString>;

        virtualinvoke $r5.<java.text.BreakIterator: void setText(java.lang.String)>($r4);

        return;
    }

    public int preceding(int)
    {
        android.text.method.WordIterator r0;
        int i0, i1, $i2, $i3, $i4;
        java.text.BreakIterator $r1;
        boolean $z0;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $i2 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        i1 = i0 - $i2;

     label1:
        $r1 = r0.<android.text.method.WordIterator: java.text.BreakIterator mIterator>;

        i1 = virtualinvoke $r1.<java.text.BreakIterator: int preceding(int)>(i1);

        if i1 != -1 goto label2;

        return -1;

     label2:
        $z0 = specialinvoke r0.<android.text.method.WordIterator: boolean isOnLetterOrDigit(int)>(i1);

        if $z0 == 0 goto label1;

        $i3 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        $i4 = i1 + $i3;

        return $i4;
    }

    public int following(int)
    {
        android.text.method.WordIterator r0;
        int i0, i1, $i2, $i3, $i4;
        java.text.BreakIterator $r1;
        boolean $z0;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $i2 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        i1 = i0 - $i2;

     label1:
        $r1 = r0.<android.text.method.WordIterator: java.text.BreakIterator mIterator>;

        i1 = virtualinvoke $r1.<java.text.BreakIterator: int following(int)>(i1);

        if i1 != -1 goto label2;

        return -1;

     label2:
        $z0 = specialinvoke r0.<android.text.method.WordIterator: boolean isAfterLetterOrDigit(int)>(i1);

        if $z0 == 0 goto label1;

        $i3 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        $i4 = i1 + $i3;

        return $i4;
    }

    public int getBeginning(int)
    {
        android.text.method.WordIterator r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0, $z1, $z2;
        java.text.BreakIterator $r1, $r2, $r3;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $i2 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        i1 = i0 - $i2;

        specialinvoke r0.<android.text.method.WordIterator: void checkOffsetIsValid(int)>(i1);

        $z0 = specialinvoke r0.<android.text.method.WordIterator: boolean isOnLetterOrDigit(int)>(i1);

        if $z0 == 0 goto label2;

        $r2 = r0.<android.text.method.WordIterator: java.text.BreakIterator mIterator>;

        $z2 = virtualinvoke $r2.<java.text.BreakIterator: boolean isBoundary(int)>(i1);

        if $z2 == 0 goto label1;

        $i10 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        $i9 = i1 + $i10;

        return $i9;

     label1:
        $r3 = r0.<android.text.method.WordIterator: java.text.BreakIterator mIterator>;

        $i6 = virtualinvoke $r3.<java.text.BreakIterator: int preceding(int)>(i1);

        $i7 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        $i8 = $i6 + $i7;

        return $i8;

     label2:
        $z1 = specialinvoke r0.<android.text.method.WordIterator: boolean isAfterLetterOrDigit(int)>(i1);

        if $z1 == 0 goto label3;

        $r1 = r0.<android.text.method.WordIterator: java.text.BreakIterator mIterator>;

        $i3 = virtualinvoke $r1.<java.text.BreakIterator: int preceding(int)>(i1);

        $i4 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        $i5 = $i3 + $i4;

        return $i5;

     label3:
        return -1;
    }

    public int getEnd(int)
    {
        android.text.method.WordIterator r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0, $z1, $z2;
        java.text.BreakIterator $r1, $r2, $r3;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $i2 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        i1 = i0 - $i2;

        specialinvoke r0.<android.text.method.WordIterator: void checkOffsetIsValid(int)>(i1);

        $z0 = specialinvoke r0.<android.text.method.WordIterator: boolean isAfterLetterOrDigit(int)>(i1);

        if $z0 == 0 goto label2;

        $r2 = r0.<android.text.method.WordIterator: java.text.BreakIterator mIterator>;

        $z2 = virtualinvoke $r2.<java.text.BreakIterator: boolean isBoundary(int)>(i1);

        if $z2 == 0 goto label1;

        $i10 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        $i9 = i1 + $i10;

        return $i9;

     label1:
        $r3 = r0.<android.text.method.WordIterator: java.text.BreakIterator mIterator>;

        $i6 = virtualinvoke $r3.<java.text.BreakIterator: int following(int)>(i1);

        $i7 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        $i8 = $i6 + $i7;

        return $i8;

     label2:
        $z1 = specialinvoke r0.<android.text.method.WordIterator: boolean isOnLetterOrDigit(int)>(i1);

        if $z1 == 0 goto label3;

        $r1 = r0.<android.text.method.WordIterator: java.text.BreakIterator mIterator>;

        $i3 = virtualinvoke $r1.<java.text.BreakIterator: int following(int)>(i1);

        $i4 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        $i5 = $i3 + $i4;

        return $i5;

     label3:
        return -1;
    }

    private boolean isAfterLetterOrDigit(int)
    {
        android.text.method.WordIterator r0;
        int i0, i1, $i2;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        if i0 < 1 goto label1;

        $r1 = r0.<android.text.method.WordIterator: java.lang.String mString>;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i0 > $i2 goto label1;

        $r2 = r0.<android.text.method.WordIterator: java.lang.String mString>;

        i1 = virtualinvoke $r2.<java.lang.String: int codePointBefore(int)>(i0);

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(int)>(i1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isOnLetterOrDigit(int)
    {
        android.text.method.WordIterator r0;
        int i0, i1, $i2;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<android.text.method.WordIterator: java.lang.String mString>;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i0 >= $i2 goto label1;

        $r2 = r0.<android.text.method.WordIterator: java.lang.String mString>;

        i1 = virtualinvoke $r2.<java.lang.String: int codePointAt(int)>(i0);

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(int)>(i1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void checkOffsetIsValid(int)
    {
        android.text.method.WordIterator r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10;
        java.lang.String $r8, $r11, $r12;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r11 = r0.<android.text.method.WordIterator: java.lang.String mString>;

        $i7 = virtualinvoke $r11.<java.lang.String: int length()>();

        if i0 <= $i7 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid offset: ");

        $i1 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        $i2 = i0 + $i1;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Valid range is [");

        $i3 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r8 = r0.<android.text.method.WordIterator: java.lang.String mString>;

        $i4 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i5 = r0.<android.text.method.WordIterator: int mOffsetShift>;

        $i6 = $i4 + $i5;

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <android.text.method.WordIterator: int WINDOW_WIDTH> = 50;

        return;
    }
}
