public final class android.os.StrictMode extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean LOG_V;
    private static final boolean IS_USER_BUILD;
    private static final boolean IS_ENG_BUILD;
    public static final java.lang.String DISABLE_PROPERTY;
    public static final java.lang.String VISUAL_PROPERTY;
    private static final long MIN_LOG_INTERVAL_MS;
    private static final long MIN_DIALOG_INTERVAL_MS;
    private static final int MAX_SPAN_TAGS;
    private static final int MAX_OFFENSES_PER_LOOP;
    public static final int DETECT_DISK_WRITE;
    public static final int DETECT_DISK_READ;
    public static final int DETECT_NETWORK;
    public static final int DETECT_CUSTOM;
    private static final int ALL_THREAD_DETECT_BITS;
    public static final int DETECT_VM_CURSOR_LEAKS;
    public static final int DETECT_VM_CLOSABLE_LEAKS;
    public static final int DETECT_VM_ACTIVITY_LEAKS;
    private static final int DETECT_VM_INSTANCE_LEAKS;
    public static final int DETECT_VM_REGISTRATION_LEAKS;
    private static final int DETECT_VM_FILE_URI_EXPOSURE;
    private static final int ALL_VM_DETECT_BITS;
    public static final int PENALTY_LOG;
    public static final int PENALTY_DIALOG;
    public static final int PENALTY_DEATH;
    public static final int PENALTY_DEATH_ON_NETWORK;
    public static final int PENALTY_FLASH;
    public static final int PENALTY_DROPBOX;
    public static final int PENALTY_GATHER;
    private static final int THREAD_PENALTY_MASK;
    private static final int VM_PENALTY_MASK;
    private static final java.util.HashMap EMPTY_CLASS_LIMIT_MAP;
    private static volatile int sVmPolicyMask;
    private static volatile android.os.StrictMode$VmPolicy sVmPolicy;
    private static final java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight;
    private static final java.lang.ThreadLocal gatheredViolations;
    private static final java.lang.ThreadLocal violationsBeingTimed;
    private static final java.lang.ThreadLocal threadHandler;
    private static final java.lang.ThreadLocal threadAndroidPolicy;
    private static long sLastInstanceCountCheckMillis;
    private static boolean sIsIdlerRegistered;
    private static final android.os.MessageQueue$IdleHandler sProcessIdleHandler;
    private static final java.util.HashMap sLastVmViolationTime;
    private static final android.os.StrictMode$Span NO_OP_SPAN;
    private static final java.lang.ThreadLocal sThisThreadSpanState;
    private static android.util.Singleton sWindowManager;
    private static final java.util.HashMap sExpectedActivityInstanceCount;

    private void <init>()
    {
        android.os.StrictMode r0;

        r0 := @this: android.os.StrictMode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setThreadPolicy(android.os.StrictMode$ThreadPolicy)
    {
        android.os.StrictMode$ThreadPolicy r0;
        int $i0;

        r0 := @parameter0: android.os.StrictMode$ThreadPolicy;

        $i0 = r0.<android.os.StrictMode$ThreadPolicy: int mask>;

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>($i0);

        return;
    }

    private static void setThreadPolicyMask(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.os.StrictMode: void setBlockGuardPolicy(int)>(i0);

        staticinvoke <android.os.Binder: void setThreadStrictModePolicy(int)>(i0);

        return;
    }

    private static void setBlockGuardPolicy(int)
    {
        int i0;
        dalvik.system.BlockGuard$Policy r0, $r4;
        android.os.StrictMode$AndroidBlockGuardPolicy r1;
        boolean $z0;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r4 = <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy LAX_POLICY>;

        staticinvoke <dalvik.system.BlockGuard: void setThreadPolicy(dalvik.system.BlockGuard$Policy)>($r4);

        return;

     label1:
        r0 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = r0 instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 == 0 goto label2;

        r1 = (android.os.StrictMode$AndroidBlockGuardPolicy) r0;

        goto label3;

     label2:
        $r2 = <android.os.StrictMode: java.lang.ThreadLocal threadAndroidPolicy>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (android.os.StrictMode$AndroidBlockGuardPolicy) $r3;

        staticinvoke <dalvik.system.BlockGuard: void setThreadPolicy(dalvik.system.BlockGuard$Policy)>(r1);

     label3:
        virtualinvoke r1.<android.os.StrictMode$AndroidBlockGuardPolicy: void setPolicyMask(int)>(i0);

        return;
    }

    private static void setCloseGuardEnabled(boolean)
    {
        boolean z0, $z1;
        dalvik.system.CloseGuard$Reporter $r0;
        android.os.StrictMode$AndroidCloseGuardReporter $r1;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard$Reporter getReporter()>();

        $z1 = $r0 instanceof android.os.StrictMode$AndroidCloseGuardReporter;

        if $z1 != 0 goto label1;

        $r1 = new android.os.StrictMode$AndroidCloseGuardReporter;

        specialinvoke $r1.<android.os.StrictMode$AndroidCloseGuardReporter: void <init>(android.os.StrictMode$1)>(null);

        staticinvoke <dalvik.system.CloseGuard: void setReporter(dalvik.system.CloseGuard$Reporter)>($r1);

     label1:
        staticinvoke <dalvik.system.CloseGuard: void setEnabled(boolean)>(z0);

        return;
    }

    public static int getThreadPolicyMask()
    {
        dalvik.system.BlockGuard$Policy $r0;
        int $i0;

        $r0 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $i0 = interfaceinvoke $r0.<dalvik.system.BlockGuard$Policy: int getPolicyMask()>();

        return $i0;
    }

    public static android.os.StrictMode$ThreadPolicy getThreadPolicy()
    {
        android.os.StrictMode$ThreadPolicy $r0;
        int $i0;

        $r0 = new android.os.StrictMode$ThreadPolicy;

        $i0 = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

        specialinvoke $r0.<android.os.StrictMode$ThreadPolicy: void <init>(int,android.os.StrictMode$1)>($i0, null);

        return $r0;
    }

    public static android.os.StrictMode$ThreadPolicy allowThreadDiskWrites()
    {
        int i0, i1;
        android.os.StrictMode$ThreadPolicy $r0;

        i0 = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

        i1 = i0 & -4;

        if i1 == i0 goto label1;

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i1);

     label1:
        $r0 = new android.os.StrictMode$ThreadPolicy;

        specialinvoke $r0.<android.os.StrictMode$ThreadPolicy: void <init>(int,android.os.StrictMode$1)>(i0, null);

        return $r0;
    }

    public static android.os.StrictMode$ThreadPolicy allowThreadDiskReads()
    {
        int i0, i1;
        android.os.StrictMode$ThreadPolicy $r0;

        i0 = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

        i1 = i0 & -3;

        if i1 == i0 goto label1;

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i1);

     label1:
        $r0 = new android.os.StrictMode$ThreadPolicy;

        specialinvoke $r0.<android.os.StrictMode$ThreadPolicy: void <init>(int,android.os.StrictMode$1)>(i0, null);

        return $r0;
    }

    private static boolean amTheSystemServerProcess()
    {
        java.lang.Throwable r0, $r4;
        java.lang.StackTraceElement[] r1;
        int i0, i1, $i2;
        java.lang.StackTraceElement r2;
        java.lang.String r3;
        boolean $z0;

        $i2 = staticinvoke <android.os.Process: int myUid()>();

        if $i2 == 1000 goto label1;

        return 0;

     label1:
        $r4 = new java.lang.Throwable;

        specialinvoke $r4.<java.lang.Throwable: void <init>()>();

        r0 = $r4;

        virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        r3 = virtualinvoke r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        if r3 == null goto label3;

        $z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("com.android.server.");

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static boolean conditionallyEnableDebugLogging()
    {
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        short s0;
        android.os.StrictMode$VmPolicy$Builder r0, $r1, $r2;
        android.os.StrictMode$VmPolicy $r3;

        $z2 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.strictmode.visual", 0);

        if $z2 == 0 goto label01;

        $z8 = staticinvoke <android.os.StrictMode: boolean amTheSystemServerProcess()>();

        if $z8 != 0 goto label01;

        $z10 = 1;

        goto label02;

     label01:
        $z10 = 0;

     label02:
        z0 = $z10;

        z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.strictmode.disable", 0);

        if z0 != 0 goto label04;

        $z9 = <android.os.StrictMode: boolean IS_USER_BUILD>;

        if $z9 != 0 goto label03;

        if z1 == 0 goto label04;

     label03:
        staticinvoke <android.os.StrictMode: void setCloseGuardEnabled(boolean)>(0);

        return 0;

     label04:
        $z3 = <android.os.StrictMode: boolean IS_ENG_BUILD>;

        if $z3 == 0 goto label05;

        z0 = 1;

     label05:
        s0 = 7;

        $z4 = <android.os.StrictMode: boolean IS_USER_BUILD>;

        if $z4 != 0 goto label06;

        s0 = s0 | 128;

     label06:
        if z0 == 0 goto label07;

        s0 = s0 | 2048;

     label07:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(s0);

        $z5 = <android.os.StrictMode: boolean IS_USER_BUILD>;

        if $z5 == 0 goto label08;

        staticinvoke <android.os.StrictMode: void setCloseGuardEnabled(boolean)>(0);

        goto label10;

     label08:
        $r1 = new android.os.StrictMode$VmPolicy$Builder;

        specialinvoke $r1.<android.os.StrictMode$VmPolicy$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectAll()>();

        r0 = virtualinvoke $r2.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyDropBox()>();

        $z6 = <android.os.StrictMode: boolean IS_ENG_BUILD>;

        if $z6 == 0 goto label09;

        virtualinvoke r0.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyLog()>();

     label09:
        $r3 = virtualinvoke r0.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy build()>();

        staticinvoke <android.os.StrictMode: void setVmPolicy(android.os.StrictMode$VmPolicy)>($r3);

        $z7 = staticinvoke <android.os.StrictMode: boolean vmClosableObjectLeaksEnabled()>();

        staticinvoke <android.os.StrictMode: void setCloseGuardEnabled(boolean)>($z7);

     label10:
        return 1;
    }

    public static void enableDeathOnNetwork()
    {
        int i0, i1, $i2;

        i0 = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

        $i2 = i0 | 4;

        i1 = $i2 | 512;

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i1);

        return;
    }

    private static int parsePolicyFromMessage(java.lang.String)
    {
        java.lang.String r0, r1;
        int i0, $i1;
        boolean $z0;
        java.lang.Integer $r3;
        java.lang.NumberFormatException $r4;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("policy=");

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);

        if i0 != -1 goto label3;

        return 0;

     label3:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(7, i0);

     label4:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r1);

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

     label5:
        return $i1;

     label6:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label4 to label5 with label6;
    }

    private static int parseViolationFromMessage(java.lang.String)
    {
        java.lang.String r0, r1, $r3;
        int i0, i1, i2, $i3, $i4;
        java.lang.Integer $r4;
        java.lang.NumberFormatException $r5;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("violation=");

        if i0 != -1 goto label2;

        return 0;

     label2:
        $r3 = "violation=";

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        i1 = i0 + $i3;

        i2 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(32, i1);

        if i2 != -1 goto label3;

        i2 = virtualinvoke r0.<java.lang.String: int length()>();

     label3:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i1, i2);

     label4:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r1);

        $i4 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label5:
        return $i4;

     label6:
        $r5 := @caughtexception;

        return 0;

        catch java.lang.NumberFormatException from label4 to label5 with label6;
    }

    private static boolean tooManyViolationsThisLoop()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        java.util.ArrayList $r2;
        int $i0;
        boolean $z0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal violationsBeingTimed>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (java.util.ArrayList) $r1;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 < 10 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static void executeDeathPenalty(android.os.StrictMode$ViolationInfo)
    {
        android.os.StrictMode$ViolationInfo r0;
        int i0, $i1;
        android.app.ApplicationErrorReport$CrashInfo $r1;
        java.lang.String $r2;
        android.os.StrictMode$StrictModeViolation $r3;

        r0 := @parameter0: android.os.StrictMode$ViolationInfo;

        $r1 = r0.<android.os.StrictMode$ViolationInfo: android.app.ApplicationErrorReport$CrashInfo crashInfo>;

        $r2 = $r1.<android.app.ApplicationErrorReport$CrashInfo: java.lang.String exceptionMessage>;

        i0 = staticinvoke <android.os.StrictMode: int parseViolationFromMessage(java.lang.String)>($r2);

        $r3 = new android.os.StrictMode$StrictModeViolation;

        $i1 = r0.<android.os.StrictMode$ViolationInfo: int policy>;

        specialinvoke $r3.<android.os.StrictMode$StrictModeViolation: void <init>(int,int,java.lang.String)>($i1, i0, null);

        throw $r3;
    }

    private static void dropboxViolationAsync(int, android.os.StrictMode$ViolationInfo)
    {
        int i0, i1;
        android.os.StrictMode$ViolationInfo r0;
        java.util.concurrent.atomic.AtomicInteger $r1, $r7;
        boolean $z0;
        android.os.StrictMode$5 $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        i0 := @parameter0: int;

        r0 := @parameter1: android.os.StrictMode$ViolationInfo;

        $r1 = <android.os.StrictMode: java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight>;

        i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        if i1 <= 20 goto label1;

        $r7 = <android.os.StrictMode: java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        return;

     label1:
        $z0 = <android.os.StrictMode: boolean LOG_V>;

        if $z0 == 0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropboxing async; in-flight=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("StrictMode", $r6);

     label2:
        $r2 = new android.os.StrictMode$5;

        specialinvoke $r2.<android.os.StrictMode$5: void <init>(java.lang.String,int,android.os.StrictMode$ViolationInfo)>("callActivityManagerForStrictModeDropbox", i0, r0);

        virtualinvoke $r2.<android.os.StrictMode$5: void start()>();

        return;
    }

    static boolean hasGatheredViolations()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void clearGatheredViolations()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        virtualinvoke $r0.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);

        return;
    }

    public static void conditionallyCheckInstanceCounts()
    {
        android.os.StrictMode$VmPolicy r0;
        java.util.Iterator r1;
        java.util.Map$Entry r2;
        java.lang.Class r3;
        int i0, $i2;
        long l1, $l3;
        android.os.StrictMode$InstanceCountViolation r4, $r12;
        java.util.HashMap $r5, $r6;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8, $r9, $r10;
        java.lang.Integer $r11;
        byte $b4;
        java.lang.String $r13;

        r0 = staticinvoke <android.os.StrictMode: android.os.StrictMode$VmPolicy getVmPolicy()>();

        $r5 = r0.<android.os.StrictMode$VmPolicy: java.util.HashMap classInstanceLimit>;

        $i2 = virtualinvoke $r5.<java.util.HashMap: int size()>();

        if $i2 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.System: void runFinalization()>();

        staticinvoke <java.lang.System: void gc()>();

        $r6 = r0.<android.os.StrictMode$VmPolicy: java.util.HashMap classInstanceLimit>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r8;

        $r10 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        r3 = (java.lang.Class) $r10;

        $r9 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.Integer) $r9;

        i0 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        l1 = staticinvoke <dalvik.system.VMDebug: long countInstancesOfClass(java.lang.Class,boolean)>(r3, 0);

        $l3 = (long) i0;

        $b4 = l1 cmp $l3;

        if $b4 > 0 goto label3;

        goto label2;

     label3:
        $r12 = new android.os.StrictMode$InstanceCountViolation;

        specialinvoke $r12.<android.os.StrictMode$InstanceCountViolation: void <init>(java.lang.Class,long,int)>(r3, l1, i0);

        r4 = $r12;

        $r13 = virtualinvoke r4.<java.lang.Throwable: java.lang.String getMessage()>();

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>($r13, r4);

        goto label2;

     label4:
        return;
    }

    public static void setVmPolicy(android.os.StrictMode$VmPolicy)
    {
        android.os.StrictMode$VmPolicy r0;
        java.lang.Class r1;
        android.os.Looper r2;
        android.os.MessageQueue r3;
        java.lang.Throwable r4, $r8;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        java.util.HashMap $r5;
        android.os.MessageQueue$IdleHandler $r6, $r7;

        r0 := @parameter0: android.os.StrictMode$VmPolicy;

        r1 = class "android/os/StrictMode";

        entermonitor class "android/os/StrictMode";

     label1:
        <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy> = r0;

        $i0 = r0.<android.os.StrictMode$VmPolicy: int mask>;

        <android.os.StrictMode: int sVmPolicyMask> = $i0;

        $z0 = staticinvoke <android.os.StrictMode: boolean vmClosableObjectLeaksEnabled()>();

        staticinvoke <android.os.StrictMode: void setCloseGuardEnabled(boolean)>($z0);

        r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if r2 == null goto label4;

        r3 = r2.<android.os.Looper: android.os.MessageQueue mQueue>;

        $r5 = r0.<android.os.StrictMode$VmPolicy: java.util.HashMap classInstanceLimit>;

        $i1 = virtualinvoke $r5.<java.util.HashMap: int size()>();

        if $i1 == 0 goto label2;

        $i2 = <android.os.StrictMode: int sVmPolicyMask>;

        $i3 = $i2 & 208;

        if $i3 != 0 goto label3;

     label2:
        $r6 = <android.os.StrictMode: android.os.MessageQueue$IdleHandler sProcessIdleHandler>;

        virtualinvoke r3.<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)>($r6);

        <android.os.StrictMode: boolean sIsIdlerRegistered> = 0;

        goto label4;

     label3:
        $z1 = <android.os.StrictMode: boolean sIsIdlerRegistered>;

        if $z1 != 0 goto label4;

        $r7 = <android.os.StrictMode: android.os.MessageQueue$IdleHandler sProcessIdleHandler>;

        virtualinvoke r3.<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>($r7);

        <android.os.StrictMode: boolean sIsIdlerRegistered> = 1;

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r1;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public static android.os.StrictMode$VmPolicy getVmPolicy()
    {
        java.lang.Class r0;
        java.lang.Throwable r1, $r3;
        android.os.StrictMode$VmPolicy $r2;

        r0 = class "android/os/StrictMode";

        entermonitor class "android/os/StrictMode";

     label1:
        $r2 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        exitmonitor r0;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

     label4:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void enableDefaults()
    {
        android.os.StrictMode$ThreadPolicy$Builder $r0, $r1, $r2;
        android.os.StrictMode$ThreadPolicy $r3;
        android.os.StrictMode$VmPolicy$Builder $r4, $r5, $r6;
        android.os.StrictMode$VmPolicy $r7;

        $r0 = new android.os.StrictMode$ThreadPolicy$Builder;

        specialinvoke $r0.<android.os.StrictMode$ThreadPolicy$Builder: void <init>()>();

        $r1 = virtualinvoke $r0.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectAll()>();

        $r2 = virtualinvoke $r1.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyLog()>();

        $r3 = virtualinvoke $r2.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy build()>();

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>($r3);

        $r4 = new android.os.StrictMode$VmPolicy$Builder;

        specialinvoke $r4.<android.os.StrictMode$VmPolicy$Builder: void <init>()>();

        $r5 = virtualinvoke $r4.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectAll()>();

        $r6 = virtualinvoke $r5.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyLog()>();

        $r7 = virtualinvoke $r6.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy build()>();

        staticinvoke <android.os.StrictMode: void setVmPolicy(android.os.StrictMode$VmPolicy)>($r7);

        return;
    }

    public static boolean vmSqliteObjectLeaksEnabled()
    {
        int $i0, $i1;
        boolean $z0;

        $i0 = <android.os.StrictMode: int sVmPolicyMask>;

        $i1 = $i0 & 512;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean vmClosableObjectLeaksEnabled()
    {
        int $i0, $i1;
        boolean $z0;

        $i0 = <android.os.StrictMode: int sVmPolicyMask>;

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean vmRegistrationLeaksEnabled()
    {
        int $i0, $i1;
        boolean $z0;

        $i0 = <android.os.StrictMode: int sVmPolicyMask>;

        $i1 = $i0 & 8192;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean vmFileUriExposureEnabled()
    {
        int $i0, $i1;
        boolean $z0;

        $i0 = <android.os.StrictMode: int sVmPolicyMask>;

        $i1 = $i0 & 16384;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void onSqliteObjectLeaked(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>(r0, r1);

        return;
    }

    public static void onWebViewMethodCalledOnWrongThread(java.lang.Throwable)
    {
        java.lang.Throwable r0;

        r0 := @parameter0: java.lang.Throwable;

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>(null, r0);

        return;
    }

    public static void onIntentReceiverLeaked(java.lang.Throwable)
    {
        java.lang.Throwable r0;

        r0 := @parameter0: java.lang.Throwable;

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>(null, r0);

        return;
    }

    public static void onServiceConnectionLeaked(java.lang.Throwable)
    {
        java.lang.Throwable r0;

        r0 := @parameter0: java.lang.Throwable;

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>(null, r0);

        return;
    }

    public static void onFileUriExposed(java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file:// Uri exposed through ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.Throwable;

        specialinvoke $r5.<java.lang.Throwable: void <init>(java.lang.String)>(r1);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>(r1, $r5);

        return;
    }

    public static void onVmPolicyViolation(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1, r5, r7, $r20, $r21;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6;
        android.os.StrictMode$ViolationInfo r2, $r8;
        java.lang.Integer r3;
        long l0, l1, l2;
        java.util.HashMap r4, $r9, $r10, $r13, $r15;
        android.os.RemoteException r6, $r22;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, i19, i20;
        byte $b11, $b15, $b17;
        java.io.PrintStream $r11;
        android.app.IActivityManager $r12;
        android.os.IBinder $r14;
        java.lang.Object $r16;
        java.lang.Long $r17, $r19;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        $i3 = <android.os.StrictMode: int sVmPolicyMask>;

        $i5 = $i3 & 128;

        if $i5 == 0 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        z0 = $z6;

        $i4 = <android.os.StrictMode: int sVmPolicyMask>;

        $i7 = $i4 & 64;

        if $i7 == 0 goto label03;

        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        z1 = $z4;

        $i6 = <android.os.StrictMode: int sVmPolicyMask>;

        $i8 = $i6 & 16;

        if $i8 == 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        z2 = $z5;

        $r8 = new android.os.StrictMode$ViolationInfo;

        $i10 = <android.os.StrictMode: int sVmPolicyMask>;

        specialinvoke $r8.<android.os.StrictMode$ViolationInfo: void <init>(java.lang.Throwable,int)>(r1, $i10);

        r2 = $r8;

        r2.<android.os.StrictMode$ViolationInfo: int numAnimationsRunning> = 0;

        r2.<android.os.StrictMode$ViolationInfo: java.lang.String[] tags> = null;

        r2.<android.os.StrictMode$ViolationInfo: java.lang.String broadcastIntentAction> = null;

        $i9 = virtualinvoke r2.<android.os.StrictMode$ViolationInfo: int hashCode()>();

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l1 = 0L;

        l2 = 9223372036854775807L;

        $r10 = <android.os.StrictMode: java.util.HashMap sLastVmViolationTime>;

        r4 = $r10;

        entermonitor $r10;

     label07:
        $r9 = <android.os.StrictMode: java.util.HashMap sLastVmViolationTime>;

        $z3 = virtualinvoke $r9.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r3);

        if $z3 == 0 goto label08;

        $r15 = <android.os.StrictMode: java.util.HashMap sLastVmViolationTime>;

        $r16 = virtualinvoke $r15.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        $r19 = (java.lang.Long) $r16;

        l1 = virtualinvoke $r19.<java.lang.Long: long longValue()>();

        l2 = l0 - l1;

     label08:
        $b11 = l2 cmp 1000L;

        if $b11 <= 0 goto label09;

        $r13 = <android.os.StrictMode: java.util.HashMap sLastVmViolationTime>;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r17);

     label09:
        exitmonitor r4;

     label10:
        goto label13;

     label11:
        $r21 := @caughtexception;

        r5 = $r21;

        exitmonitor r4;

     label12:
        throw r5;

     label13:
        if z2 == 0 goto label14;

        $b17 = l2 cmp 1000L;

        if $b17 <= 0 goto label14;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StrictMode", r0, r1);

     label14:
        $i13 = <android.os.StrictMode: int sVmPolicyMask>;

        $i12 = 32256 & $i13;

        i19 = 128 | $i12;

        if z0 == 0 goto label15;

        if z1 != 0 goto label15;

        staticinvoke <android.os.StrictMode: void dropboxViolationAsync(int,android.os.StrictMode$ViolationInfo)>(i19, r2);

        return;

     label15:
        if z0 == 0 goto label22;

        $b15 = l1 cmp 0L;

        if $b15 != 0 goto label22;

        i20 = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

     label16:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(0);

        $r12 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r14 = staticinvoke <com.android.internal.os.RuntimeInit: android.os.IBinder getApplicationObject()>();

        interfaceinvoke $r12.<android.app.IActivityManager: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>($r14, i19, r2);

     label17:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i20);

        goto label22;

     label18:
        $r22 := @caughtexception;

        r6 = $r22;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StrictMode", "RemoteException trying to handle StrictMode violation", r6);

     label19:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i20);

        goto label22;

     label20:
        $r20 := @caughtexception;

        r7 = $r20;

     label21:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i20);

        throw r7;

     label22:
        if z1 == 0 goto label23;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("StrictMode VmPolicy violation with POLICY_DEATH; shutting down.");

        $i14 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i14);

        staticinvoke <java.lang.System: void exit(int)>(10);

     label23:
        return;

        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch android.os.RemoteException from label16 to label17 with label18;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    static void writeGatheredViolationsToParcel(android.os.Parcel)
    {
        android.os.Parcel r0;
        java.util.ArrayList r1;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10;
        java.lang.ThreadLocal $r2, $r4;
        java.lang.Object $r3, $r9;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19;
        java.lang.String $r8, $r17;
        android.os.StrictMode$ViolationInfo $r10;

        r0 := @parameter0: android.os.Parcel;

        $r2 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (java.util.ArrayList) $r3;

        if r1 != null goto label1;

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(0);

        goto label6;

     label1:
        $i3 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>($i3);

        i0 = 0;

     label2:
        $i4 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i0 >= $i4 goto label4;

        i1 = virtualinvoke r0.<android.os.Parcel: int dataPosition()>();

        $r9 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r10 = (android.os.StrictMode$ViolationInfo) $r9;

        virtualinvoke $r10.<android.os.StrictMode$ViolationInfo: void writeToParcel(android.os.Parcel,int)>(r0, 0);

        $i7 = virtualinvoke r0.<android.os.Parcel: int dataPosition()>();

        i2 = $i7 - i1;

        if i2 <= 10240 goto label3;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrote violation #");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $i8 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $i10 = virtualinvoke r0.<android.os.Parcel: int dataPosition()>();

        $i9 = $i10 - i1;

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StrictMode", $r17);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        $z0 = <android.os.StrictMode: boolean LOG_V>;

        if $z0 == 0 goto label5;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wrote violations to response parcel; num=");

        $i5 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("StrictMode", $r8);

     label5:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

     label6:
        $r4 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        virtualinvoke $r4.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);

        return;
    }

    static void readAndHandleBinderCallViolations(android.os.Parcel)
    {
        android.os.Parcel r0;
        java.io.StringWriter r1, $r6;
        com.android.internal.util.FastPrintWriter r2, $r7;
        java.lang.String r3, r5, $r12, $r13, $r17, $r22, $r23, $r26, $r30, $r35;
        int i0, i1, i2, $i3, $i4;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        android.os.StrictMode$ViolationInfo r4, $r10, $r34;
        android.os.StrictMode$LogStackTrace $r8;
        android.app.ApplicationErrorReport$CrashInfo $r9, $r14, $r19, $r21;
        java.lang.StringBuilder $r11, $r15, $r16, $r18, $r24, $r25, $r27, $r28, $r29, $r31, $r32, $r33, $r36, $r37;
        android.os.StrictMode$AndroidBlockGuardPolicy $r20;
        dalvik.system.BlockGuard$Policy r39;

        r0 := @parameter0: android.os.Parcel;

        $r6 = new java.io.StringWriter;

        specialinvoke $r6.<java.io.StringWriter: void <init>()>();

        r1 = $r6;

        $r7 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r7.<com.android.internal.util.FastPrintWriter: void <init>(java.io.Writer,boolean,int)>(r1, 0, 256);

        r2 = $r7;

        $r8 = new android.os.StrictMode$LogStackTrace;

        specialinvoke $r8.<android.os.StrictMode$LogStackTrace: void <init>(android.os.StrictMode$1)>(null);

        virtualinvoke $r8.<android.os.StrictMode$LogStackTrace: void printStackTrace(java.io.PrintWriter)>(r2);

        virtualinvoke r2.<java.io.PrintWriter: void flush()>();

        r3 = virtualinvoke r1.<java.io.StringWriter: java.lang.String toString()>();

        i0 = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

        $i3 = i0 & 256;

        if $i3 == 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        z0 = $z5;

        i1 = virtualinvoke r0.<android.os.Parcel: int readInt()>();

        i2 = 0;

     label03:
        if i2 >= i1 goto label13;

        $z1 = <android.os.StrictMode: boolean LOG_V>;

        if $z1 == 0 goto label04;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("strict mode violation stacks read from binder call.  i=");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("StrictMode", $r35);

     label04:
        $r10 = new android.os.StrictMode$ViolationInfo;

        if z0 != 0 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        specialinvoke $r10.<android.os.StrictMode$ViolationInfo: void <init>(android.os.Parcel,boolean)>(r0, $z3);

        r4 = $r10;

        $r9 = r4.<android.os.StrictMode$ViolationInfo: android.app.ApplicationErrorReport$CrashInfo crashInfo>;

        $r12 = $r9.<android.app.ApplicationErrorReport$CrashInfo: java.lang.String stackTrace>;

        if $r12 == null goto label11;

        $r19 = r4.<android.os.StrictMode$ViolationInfo: android.app.ApplicationErrorReport$CrashInfo crashInfo>;

        $r23 = $r19.<android.app.ApplicationErrorReport$CrashInfo: java.lang.String stackTrace>;

        $i4 = virtualinvoke $r23.<java.lang.String: int length()>();

        if $i4 <= 10000 goto label11;

        $r21 = r4.<android.os.StrictMode$ViolationInfo: android.app.ApplicationErrorReport$CrashInfo crashInfo>;

        $r22 = $r21.<android.app.ApplicationErrorReport$CrashInfo: java.lang.String stackTrace>;

        r5 = virtualinvoke $r22.<java.lang.String: java.lang.String substring(int)>(256);

     label07:
        if i2 >= i1 goto label10;

        $r34 = new android.os.StrictMode$ViolationInfo;

        if z0 != 0 goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        specialinvoke $r34.<android.os.StrictMode$ViolationInfo: void <init>(android.os.Parcel,boolean)>(r0, $z4);

        i2 = i2 + 1;

        goto label07;

     label10:
        staticinvoke <android.os.StrictMode: void clearGatheredViolations()>();

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stack is too large: numViolations=");

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" policy=#");

        $r26 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" front=");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtfStack(java.lang.String,java.lang.String)>("StrictMode", $r30);

        return;

     label11:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = r4.<android.os.StrictMode$ViolationInfo: android.app.ApplicationErrorReport$CrashInfo crashInfo>;

        $r13 = $r14.<android.app.ApplicationErrorReport$CrashInfo: java.lang.String stackTrace>;

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("# via Binder call with stack:\n");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14.<android.app.ApplicationErrorReport$CrashInfo: java.lang.String stackTrace> = $r17;

        r39 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z2 = r39 instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z2 == 0 goto label12;

        $r20 = (android.os.StrictMode$AndroidBlockGuardPolicy) r39;

        virtualinvoke $r20.<android.os.StrictMode$AndroidBlockGuardPolicy: void handleViolationWithTimingAttempt(android.os.StrictMode$ViolationInfo)>(r4);

     label12:
        i2 = i2 + 1;

        goto label03;

     label13:
        return;
    }

    private static void onBinderStrictModePolicyChange(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.os.StrictMode: void setBlockGuardPolicy(int)>(i0);

        return;
    }

    public static android.os.StrictMode$Span enterCriticalSpan(java.lang.String)
    {
        java.lang.String r0, $r16;
        android.os.StrictMode$ThreadSpanState r1, r2;
        java.lang.Throwable r3, $r21;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r4;
        java.lang.ThreadLocal $r5;
        java.lang.Object $r6;
        android.os.StrictMode$Span $r8, $r9, $r10, $r11, $r18, $r19, $r20, r22;
        long $l0;
        int $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r17;

        r0 := @parameter0: java.lang.String;

        $z0 = <android.os.StrictMode: boolean IS_USER_BUILD>;

        if $z0 == 0 goto label01;

        $r20 = <android.os.StrictMode: android.os.StrictMode$Span NO_OP_SPAN>;

        return $r20;

     label01:
        if r0 == null goto label02;

        $z1 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label03;

     label02:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name must be non-null and non-empty");

        throw $r4;

     label03:
        $r5 = <android.os.StrictMode: java.lang.ThreadLocal sThisThreadSpanState>;

        $r6 = virtualinvoke $r5.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (android.os.StrictMode$ThreadSpanState) $r6;

        r2 = r1;

        entermonitor r1;

     label04:
        $r8 = r1.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mFreeListHead>;

        if $r8 == null goto label05;

        r22 = r1.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mFreeListHead>;

        $r18 = staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$1800(android.os.StrictMode$Span)>(r22);

        r1.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mFreeListHead> = $r18;

        $i4 = r1.<android.os.StrictMode$ThreadSpanState: int mFreeListSize>;

        $i5 = $i4 - 1;

        r1.<android.os.StrictMode$ThreadSpanState: int mFreeListSize> = $i5;

        goto label06;

     label05:
        $r9 = new android.os.StrictMode$Span;

        specialinvoke $r9.<android.os.StrictMode$Span: void <init>(android.os.StrictMode$ThreadSpanState)>(r1);

        r22 = $r9;

     label06:
        staticinvoke <android.os.StrictMode$Span: java.lang.String access$1902(android.os.StrictMode$Span,java.lang.String)>(r22, r0);

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.os.StrictMode$Span: long access$2002(android.os.StrictMode$Span,long)>(r22, $l0);

        $r10 = r1.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mActiveHead>;

        staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$1802(android.os.StrictMode$Span,android.os.StrictMode$Span)>(r22, $r10);

        staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$2102(android.os.StrictMode$Span,android.os.StrictMode$Span)>(r22, null);

        r1.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mActiveHead> = r22;

        $i1 = r1.<android.os.StrictMode$ThreadSpanState: int mActiveSize>;

        $i2 = $i1 + 1;

        r1.<android.os.StrictMode$ThreadSpanState: int mActiveSize> = $i2;

        $r11 = staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$1800(android.os.StrictMode$Span)>(r22);

        if $r11 == null goto label07;

        $r19 = staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$1800(android.os.StrictMode$Span)>(r22);

        staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$2102(android.os.StrictMode$Span,android.os.StrictMode$Span)>($r19, r22);

     label07:
        $z2 = <android.os.StrictMode: boolean LOG_V>;

        if $z2 == 0 goto label08;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Span enter=");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; size=");

        $i3 = r1.<android.os.StrictMode$ThreadSpanState: int mActiveSize>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("StrictMode", $r16);

     label08:
        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r21 := @caughtexception;

        r3 = $r21;

        exitmonitor r2;

     label11:
        throw r3;

     label12:
        return r22;

        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public static void noteSlowCall(java.lang.String)
    {
        java.lang.String r0;
        dalvik.system.BlockGuard$Policy r1;
        boolean $z0;
        android.os.StrictMode$AndroidBlockGuardPolicy $r2;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = r1 instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = (android.os.StrictMode$AndroidBlockGuardPolicy) r1;

        virtualinvoke $r2.<android.os.StrictMode$AndroidBlockGuardPolicy: void onCustomSlowCall(java.lang.String)>(r0);

        return;
    }

    public static void noteDiskRead()
    {
        dalvik.system.BlockGuard$Policy r0;
        boolean $z0;
        android.os.StrictMode$AndroidBlockGuardPolicy $r1;

        r0 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = r0 instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = (android.os.StrictMode$AndroidBlockGuardPolicy) r0;

        virtualinvoke $r1.<android.os.StrictMode$AndroidBlockGuardPolicy: void onReadFromDisk()>();

        return;
    }

    public static void noteDiskWrite()
    {
        dalvik.system.BlockGuard$Policy r0;
        boolean $z0;
        android.os.StrictMode$AndroidBlockGuardPolicy $r1;

        r0 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = r0 instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = (android.os.StrictMode$AndroidBlockGuardPolicy) r0;

        virtualinvoke $r1.<android.os.StrictMode$AndroidBlockGuardPolicy: void onWriteToDisk()>();

        return;
    }

    public static java.lang.Object trackActivity(java.lang.Object)
    {
        java.lang.Object r0;
        android.os.StrictMode$InstanceTracker $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = new android.os.StrictMode$InstanceTracker;

        specialinvoke $r1.<android.os.StrictMode$InstanceTracker: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    public static void incrementExpectedActivityCount(java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.Integer r2, r3;
        java.lang.Throwable r4, $r10;
        android.os.StrictMode$VmPolicy $r5;
        int $i0, $i1, $i2, $i3;
        java.util.HashMap $r6, $r8;
        java.lang.Object $r7;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label01;

        return;

     label01:
        r1 = class "android/os/StrictMode";

        entermonitor class "android/os/StrictMode";

     label02:
        $r5 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r5.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 & 2048;

        if $i1 != 0 goto label04;

        exitmonitor r1;

     label03:
        return;

     label04:
        $r6 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (java.lang.Integer) $r7;

        if r2 != null goto label05;

        $i3 = 1;

        goto label06;

     label05:
        $i2 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        $i3 = $i2 + 1;

     label06:
        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r8 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r3);

        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r1;

     label09:
        throw r4;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public static void decrementExpectedActivityCount(java.lang.Class)
    {
        java.lang.Class r0, r1;
        int i0, i1, $i2, $i3, $i6, $i7, $i8, i9;
        java.lang.Integer r2, $r8;
        java.lang.Throwable r3, $r14;
        android.os.StrictMode$VmPolicy $r4;
        java.util.HashMap $r5, $r7, $r11;
        java.lang.Object $r6;
        long $l4, l10;
        android.os.StrictMode$InstanceCountViolation $r10, r15;
        byte $b5;
        java.lang.String $r12;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label01;

        return;

     label01:
        r1 = class "android/os/StrictMode";

        entermonitor class "android/os/StrictMode";

     label02:
        $r4 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i2 = $r4.<android.os.StrictMode$VmPolicy: int mask>;

        $i3 = $i2 & 2048;

        if $i3 != 0 goto label04;

        exitmonitor r1;

     label03:
        return;

     label04:
        $r5 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (java.lang.Integer) $r6;

        if r2 == null goto label05;

        $i6 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        if $i6 != 0 goto label06;

     label05:
        $i7 = 0;

        goto label07;

     label06:
        $i8 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        $i7 = $i8 - 1;

     label07:
        i1 = $i7;

        if i1 != 0 goto label08;

        $r11 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r0);

        goto label09;

     label08:
        $r7 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r8);

     label09:
        i0 = i1 + 1;

        exitmonitor r1;

     label10:
        goto label13;

     label11:
        $r14 := @caughtexception;

        r3 = $r14;

        exitmonitor r1;

     label12:
        throw r3;

     label13:
        i9 = staticinvoke <android.os.StrictMode$InstanceTracker: int getInstanceCount(java.lang.Class)>(r0);

        if i9 > i0 goto label14;

        return;

     label14:
        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.System: void runFinalization()>();

        staticinvoke <java.lang.System: void gc()>();

        l10 = staticinvoke <dalvik.system.VMDebug: long countInstancesOfClass(java.lang.Class,boolean)>(r0, 0);

        $l4 = (long) i0;

        $b5 = l10 cmp $l4;

        if $b5 <= 0 goto label15;

        $r10 = new android.os.StrictMode$InstanceCountViolation;

        specialinvoke $r10.<android.os.StrictMode$InstanceCountViolation: void <init>(java.lang.Class,long,int)>(r0, l10, i0);

        r15 = $r10;

        $r12 = virtualinvoke r15.<java.lang.Throwable: java.lang.String getMessage()>();

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(java.lang.String,java.lang.Throwable)>($r12, r15);

     label15:
        return;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    static java.util.HashMap access$100()
    {
        java.util.HashMap $r0;

        $r0 = <android.os.StrictMode: java.util.HashMap EMPTY_CLASS_LIMIT_MAP>;

        return $r0;
    }

    static boolean access$400()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.StrictMode: boolean tooManyViolationsThisLoop()>();

        return $z0;
    }

    static java.lang.ThreadLocal access$500()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal violationsBeingTimed>;

        return $r0;
    }

    static android.util.Singleton access$600()
    {
        android.util.Singleton $r0;

        $r0 = <android.os.StrictMode: android.util.Singleton sWindowManager>;

        return $r0;
    }

    static java.lang.ThreadLocal access$700()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal threadHandler>;

        return $r0;
    }

    static boolean access$800()
    {
        boolean $z0;

        $z0 = <android.os.StrictMode: boolean LOG_V>;

        return $z0;
    }

    static java.lang.ThreadLocal access$900()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        return $r0;
    }

    static int access$1000(java.lang.String)
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.StrictMode: int parseViolationFromMessage(java.lang.String)>(r0);

        return $i0;
    }

    static void access$1100(int, android.os.StrictMode$ViolationInfo)
    {
        int i0;
        android.os.StrictMode$ViolationInfo r0;

        i0 := @parameter0: int;

        r0 := @parameter1: android.os.StrictMode$ViolationInfo;

        staticinvoke <android.os.StrictMode: void dropboxViolationAsync(int,android.os.StrictMode$ViolationInfo)>(i0, r0);

        return;
    }

    static void access$1200(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i0);

        return;
    }

    static void access$1300(android.os.StrictMode$ViolationInfo)
    {
        android.os.StrictMode$ViolationInfo r0;

        r0 := @parameter0: android.os.StrictMode$ViolationInfo;

        staticinvoke <android.os.StrictMode: void executeDeathPenalty(android.os.StrictMode$ViolationInfo)>(r0);

        return;
    }

    static java.util.concurrent.atomic.AtomicInteger access$1400()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = <android.os.StrictMode: java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight>;

        return $r0;
    }

    static long access$1500()
    {
        long $l0;

        $l0 = <android.os.StrictMode: long sLastInstanceCountCheckMillis>;

        return $l0;
    }

    static long access$1502(long)
    {
        long l0;

        l0 := @parameter0: long;

        <android.os.StrictMode: long sLastInstanceCountCheckMillis> = l0;

        return l0;
    }

    static java.lang.ThreadLocal access$2200()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal sThisThreadSpanState>;

        return $r0;
    }

    static void <clinit>()
    {
        boolean $z0, $z1, $z2;
        java.lang.String $r0, $r1, $r2, $r3;
        java.util.HashMap $r4, $r12, $r15;
        android.os.StrictMode$VmPolicy $r5;
        java.util.concurrent.atomic.AtomicInteger $r6;
        android.os.StrictMode$1 $r7;
        android.os.StrictMode$2 $r8;
        android.os.StrictMode$3 $r9;
        android.os.StrictMode$4 $r10;
        android.os.StrictMode$6 $r11;
        android.os.StrictMode$8 $r13;
        android.os.StrictMode$7 $r14;
        android.os.StrictMode$9 $r16;

        <android.os.StrictMode: int VM_PENALTY_MASK> = 208;

        <android.os.StrictMode: int THREAD_PENALTY_MASK> = 3056;

        <android.os.StrictMode: int PENALTY_GATHER> = 256;

        <android.os.StrictMode: int PENALTY_DROPBOX> = 128;

        <android.os.StrictMode: int PENALTY_FLASH> = 2048;

        <android.os.StrictMode: int PENALTY_DEATH_ON_NETWORK> = 512;

        <android.os.StrictMode: int PENALTY_DEATH> = 64;

        <android.os.StrictMode: int PENALTY_DIALOG> = 32;

        <android.os.StrictMode: int PENALTY_LOG> = 16;

        <android.os.StrictMode: int ALL_VM_DETECT_BITS> = 32256;

        <android.os.StrictMode: int DETECT_VM_FILE_URI_EXPOSURE> = 16384;

        <android.os.StrictMode: int DETECT_VM_REGISTRATION_LEAKS> = 8192;

        <android.os.StrictMode: int DETECT_VM_INSTANCE_LEAKS> = 4096;

        <android.os.StrictMode: int DETECT_VM_ACTIVITY_LEAKS> = 2048;

        <android.os.StrictMode: int DETECT_VM_CLOSABLE_LEAKS> = 1024;

        <android.os.StrictMode: int DETECT_VM_CURSOR_LEAKS> = 512;

        <android.os.StrictMode: int ALL_THREAD_DETECT_BITS> = 15;

        <android.os.StrictMode: int DETECT_CUSTOM> = 8;

        <android.os.StrictMode: int DETECT_NETWORK> = 4;

        <android.os.StrictMode: int DETECT_DISK_READ> = 2;

        <android.os.StrictMode: int DETECT_DISK_WRITE> = 1;

        <android.os.StrictMode: int MAX_OFFENSES_PER_LOOP> = 10;

        <android.os.StrictMode: int MAX_SPAN_TAGS> = 20;

        <android.os.StrictMode: long MIN_DIALOG_INTERVAL_MS> = 30000L;

        <android.os.StrictMode: long MIN_LOG_INTERVAL_MS> = 1000L;

        <android.os.StrictMode: java.lang.String VISUAL_PROPERTY> = "persist.sys.strictmode.visual";

        <android.os.StrictMode: java.lang.String DISABLE_PROPERTY> = "persist.sys.strictmode.disable";

        <android.os.StrictMode: java.lang.String TAG> = "StrictMode";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("StrictMode", 2);

        <android.os.StrictMode: boolean LOG_V> = $z0;

        $r1 = "user";

        $r0 = <android.os.Build: java.lang.String TYPE>;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        <android.os.StrictMode: boolean IS_USER_BUILD> = $z1;

        $r3 = "eng";

        $r2 = <android.os.Build: java.lang.String TYPE>;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        <android.os.StrictMode: boolean IS_ENG_BUILD> = $z2;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <android.os.StrictMode: java.util.HashMap EMPTY_CLASS_LIMIT_MAP> = $r4;

        <android.os.StrictMode: int sVmPolicyMask> = 0;

        $r5 = <android.os.StrictMode$VmPolicy: android.os.StrictMode$VmPolicy LAX>;

        <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        <android.os.StrictMode: java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight> = $r6;

        $r7 = new android.os.StrictMode$1;

        specialinvoke $r7.<android.os.StrictMode$1: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations> = $r7;

        $r8 = new android.os.StrictMode$2;

        specialinvoke $r8.<android.os.StrictMode$2: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal violationsBeingTimed> = $r8;

        $r9 = new android.os.StrictMode$3;

        specialinvoke $r9.<android.os.StrictMode$3: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal threadHandler> = $r9;

        $r10 = new android.os.StrictMode$4;

        specialinvoke $r10.<android.os.StrictMode$4: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal threadAndroidPolicy> = $r10;

        <android.os.StrictMode: long sLastInstanceCountCheckMillis> = 0L;

        <android.os.StrictMode: boolean sIsIdlerRegistered> = 0;

        $r11 = new android.os.StrictMode$6;

        specialinvoke $r11.<android.os.StrictMode$6: void <init>()>();

        <android.os.StrictMode: android.os.MessageQueue$IdleHandler sProcessIdleHandler> = $r11;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        <android.os.StrictMode: java.util.HashMap sLastVmViolationTime> = $r12;

        $r14 = new android.os.StrictMode$7;

        specialinvoke $r14.<android.os.StrictMode$7: void <init>()>();

        <android.os.StrictMode: android.os.StrictMode$Span NO_OP_SPAN> = $r14;

        $r13 = new android.os.StrictMode$8;

        specialinvoke $r13.<android.os.StrictMode$8: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal sThisThreadSpanState> = $r13;

        $r16 = new android.os.StrictMode$9;

        specialinvoke $r16.<android.os.StrictMode$9: void <init>()>();

        <android.os.StrictMode: android.util.Singleton sWindowManager> = $r16;

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount> = $r15;

        return;
    }
}
