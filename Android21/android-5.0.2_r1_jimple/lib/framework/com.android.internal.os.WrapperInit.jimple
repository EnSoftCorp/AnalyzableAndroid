public class com.android.internal.os.WrapperInit extends java.lang.Object
{
    private static final java.lang.String TAG;

    private void <init>()
    {
        com.android.internal.os.WrapperInit r0;

        r0 := @this: com.android.internal.os.WrapperInit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0, r10;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.io.FileDescriptor r1;
        java.io.DataOutputStream r2, $r5;
        java.lang.String $r3, $r4;
        java.io.FileOutputStream $r6;
        java.io.IOException $r7, r9;
        com.android.internal.os.ZygoteInit$MethodAndArgsCaller $r8, r11;

        r0 := @parameter0: java.lang.String[];

     label1:
        $r3 = r0[0];

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r3, 10);

        $r4 = r0[1];

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r4, 10);

        if i0 == 0 goto label5;

     label2:
        r1 = staticinvoke <com.android.internal.os.ZygoteInit: java.io.FileDescriptor createFileDescriptor(int)>(i0);

        $r5 = new java.io.DataOutputStream;

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>(r1);

        specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r6);

        r2 = $r5;

        $i5 = staticinvoke <android.os.Process: int myPid()>();

        virtualinvoke r2.<java.io.DataOutputStream: void writeInt(int)>($i5);

        virtualinvoke r2.<java.io.DataOutputStream: void close()>();

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r9 = $r7;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidRuntime", "Could not write pid of wrapped process to Zygote pipe.", r9);

     label5:
        staticinvoke <com.android.internal.os.ZygoteInit: void preload()>();

        $i2 = lengthof r0;

        $i3 = $i2 - 2;

        r10 = newarray (java.lang.String)[$i3];

        $i4 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 2, r10, 0, $i4);

        staticinvoke <com.android.internal.os.RuntimeInit: void wrapperInit(int,java.lang.String[])>(i1, r10);

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

        r11 = $r8;

        virtualinvoke r11.<com.android.internal.os.ZygoteInit$MethodAndArgsCaller: void run()>();

     label8:
        return;

        catch java.io.IOException from label2 to label3 with label4;
        catch com.android.internal.os.ZygoteInit$MethodAndArgsCaller from label1 to label6 with label7;
    }

    public static void execApplication(java.lang.String, java.lang.String, int, java.io.FileDescriptor, java.lang.String[])
    {
        java.lang.String r0, r1, $r11;
        int i0, $i1;
        java.io.FileDescriptor r2;
        java.lang.String[] r3;
        java.lang.StringBuilder r4, $r5, $r12, $r13;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: java.io.FileDescriptor;

        r3 := @parameter4: java.lang.String[];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(r0);

        r4 = $r5;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" /system/bin/app_process /system/bin --application");

        if r1 == null goto label1;

        $r12 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \'--nice-name=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

     label1:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" com.android.internal.os.WrapperInit ");

        if r2 == null goto label2;

        $i1 = virtualinvoke r2.<java.io.FileDescriptor: int getInt$()>();

        goto label3;

     label2:
        $i1 = 0;

     label3:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        staticinvoke <com.android.internal.os.Zygote: void appendQuotedShellArgs(java.lang.StringBuilder,java.lang.String[])>(r4, r3);

        $r11 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.os.Zygote: void execShell(java.lang.String)>($r11);

        return;
    }

    public static void execStandalone(java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        java.lang.String r0, r1, r2, $r10;
        java.lang.String[] r3;
        java.lang.StringBuilder r4, $r5, $r6, $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String[];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(r0);

        r4 = $r5;

        $r6 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" /system/bin/dalvikvm -classpath \'");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        staticinvoke <com.android.internal.os.Zygote: void appendQuotedShellArgs(java.lang.StringBuilder,java.lang.String[])>(r4, r3);

        $r10 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.os.Zygote: void execShell(java.lang.String)>($r10);

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.os.WrapperInit: java.lang.String TAG> = "AndroidRuntime";

        return;
    }
}
