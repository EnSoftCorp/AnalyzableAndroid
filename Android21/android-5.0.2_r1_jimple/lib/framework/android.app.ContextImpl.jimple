class android.app.ContextImpl extends android.content.Context
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static android.util.ArrayMap sSharedPrefs;
    final android.app.ActivityThread mMainThread;
    final android.app.LoadedApk mPackageInfo;
    private final android.os.IBinder mActivityToken;
    private final android.os.UserHandle mUser;
    private final android.app.ContextImpl$ApplicationContentResolver mContentResolver;
    private final java.lang.String mBasePackageName;
    private final java.lang.String mOpPackageName;
    private final android.app.ResourcesManager mResourcesManager;
    private final android.content.res.Resources mResources;
    private final android.view.Display mDisplay;
    private final android.view.DisplayAdjustments mDisplayAdjustments;
    private final android.content.res.Configuration mOverrideConfiguration;
    private final boolean mRestricted;
    private android.content.Context mOuterContext;
    private int mThemeResource;
    private android.content.res.Resources$Theme mTheme;
    private android.content.pm.PackageManager mPackageManager;
    private android.content.Context mReceiverRestrictedContext;
    private final java.lang.Object mSync;
    private java.io.File mDatabasesDir;
    private java.io.File mPreferencesDir;
    private java.io.File mFilesDir;
    private java.io.File mNoBackupFilesDir;
    private java.io.File mCacheDir;
    private java.io.File mCodeCacheDir;
    private java.io.File[] mExternalObbDirs;
    private java.io.File[] mExternalFilesDirs;
    private java.io.File[] mExternalCacheDirs;
    private java.io.File[] mExternalMediaDirs;
    private static final java.lang.String[] EMPTY_FILE_LIST;
    private static final java.util.HashMap SYSTEM_SERVICE_MAP;
    private static int sNextPerContextServiceCacheIndex;
    private static android.app.ContextImpl$ServiceFetcher WALLPAPER_FETCHER;
    final java.util.ArrayList mServiceCache;

    private static void registerService(java.lang.String, android.app.ContextImpl$ServiceFetcher)
    {
        java.lang.String r0;
        android.app.ContextImpl$ServiceFetcher r1;
        boolean $z0;
        java.util.HashMap $r2;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.app.ContextImpl$ServiceFetcher;

        $z0 = r1 instanceof android.app.ContextImpl$StaticServiceFetcher;

        if $z0 != 0 goto label1;

        $i0 = <android.app.ContextImpl: int sNextPerContextServiceCacheIndex>;

        $i1 = $i0 + 1;

        <android.app.ContextImpl: int sNextPerContextServiceCacheIndex> = $i1;

        r1.<android.app.ContextImpl$ServiceFetcher: int mContextCacheIndex> = $i0;

     label1:
        $r2 = <android.app.ContextImpl: java.util.HashMap SYSTEM_SERVICE_MAP>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    static android.app.ContextImpl getImpl(android.content.Context)
    {
        android.content.Context r0, r1, $r4;
        boolean $z0;
        android.app.ContextImpl $r2;
        android.content.ContextWrapper $r3;

        r0 := @parameter0: android.content.Context;

     label1:
        $z0 = r0 instanceof android.content.ContextWrapper;

        if $z0 == 0 goto label2;

        $r3 = (android.content.ContextWrapper) r0;

        $r4 = virtualinvoke $r3.<android.content.ContextWrapper: android.content.Context getBaseContext()>();

        r1 = $r4;

        if $r4 == null goto label2;

        r0 = r1;

        goto label1;

     label2:
        $r2 = (android.app.ContextImpl) r0;

        return $r2;
    }

    public android.content.res.AssetManager getAssets()
    {
        android.app.ContextImpl r0;
        android.content.res.Resources $r1;
        android.content.res.AssetManager $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = virtualinvoke r0.<android.app.ContextImpl: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.AssetManager getAssets()>();

        return $r2;
    }

    public android.content.res.Resources getResources()
    {
        android.app.ContextImpl r0;
        android.content.res.Resources $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        return $r1;
    }

    public android.content.pm.PackageManager getPackageManager()
    {
        android.app.ContextImpl r0;
        android.content.pm.IPackageManager r1;
        android.content.pm.PackageManager $r2, $r4;
        android.app.ApplicationPackageManager $r3;

        r0 := @this: android.app.ContextImpl;

        $r2 = r0.<android.app.ContextImpl: android.content.pm.PackageManager mPackageManager>;

        if $r2 == null goto label1;

        $r4 = r0.<android.app.ContextImpl: android.content.pm.PackageManager mPackageManager>;

        return $r4;

     label1:
        r1 = staticinvoke <android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()>();

        if r1 == null goto label2;

        $r3 = new android.app.ApplicationPackageManager;

        specialinvoke $r3.<android.app.ApplicationPackageManager: void <init>(android.app.ContextImpl,android.content.pm.IPackageManager)>(r0, r1);

        r0.<android.app.ContextImpl: android.content.pm.PackageManager mPackageManager> = $r3;

        return $r3;

     label2:
        return null;
    }

    public android.content.ContentResolver getContentResolver()
    {
        android.app.ContextImpl r0;
        android.app.ContextImpl$ApplicationContentResolver $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.app.ContextImpl$ApplicationContentResolver mContentResolver>;

        return $r1;
    }

    public android.os.Looper getMainLooper()
    {
        android.app.ContextImpl r0;
        android.app.ActivityThread $r1;
        android.os.Looper $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r2 = virtualinvoke $r1.<android.app.ActivityThread: android.os.Looper getLooper()>();

        return $r2;
    }

    public android.content.Context getApplicationContext()
    {
        android.app.ContextImpl r0;
        android.app.LoadedApk $r1, $r4;
        android.app.ActivityThread $r2;
        android.app.Application $r3;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r1 == null goto label1;

        $r4 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r3 = virtualinvoke $r4.<android.app.LoadedApk: android.app.Application getApplication()>();

        goto label2;

     label1:
        $r2 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r3 = virtualinvoke $r2.<android.app.ActivityThread: android.app.Application getApplication()>();

     label2:
        return $r3;
    }

    public void setTheme(int)
    {
        android.app.ContextImpl r0;
        int i0;

        r0 := @this: android.app.ContextImpl;

        i0 := @parameter0: int;

        r0.<android.app.ContextImpl: int mThemeResource> = i0;

        return;
    }

    public int getThemeResId()
    {
        android.app.ContextImpl r0;
        int $i0;

        r0 := @this: android.app.ContextImpl;

        $i0 = r0.<android.app.ContextImpl: int mThemeResource>;

        return $i0;
    }

    public android.content.res.Resources$Theme getTheme()
    {
        android.app.ContextImpl r0;
        android.content.res.Resources$Theme $r1, $r2, $r6, $r7;
        int $i0, $i1, $i2, $i3;
        android.content.Context $r3;
        android.content.pm.ApplicationInfo $r4;
        android.content.res.Resources $r5;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.content.res.Resources$Theme mTheme>;

        if $r1 != null goto label1;

        $i0 = r0.<android.app.ContextImpl: int mThemeResource>;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i1 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        $i2 = staticinvoke <android.content.res.Resources: int selectDefaultTheme(int,int)>($i0, $i1);

        r0.<android.app.ContextImpl: int mThemeResource> = $i2;

        $r5 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        $r6 = virtualinvoke $r5.<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>();

        r0.<android.app.ContextImpl: android.content.res.Resources$Theme mTheme> = $r6;

        $r7 = r0.<android.app.ContextImpl: android.content.res.Resources$Theme mTheme>;

        $i3 = r0.<android.app.ContextImpl: int mThemeResource>;

        virtualinvoke $r7.<android.content.res.Resources$Theme: void applyStyle(int,boolean)>($i3, 1);

     label1:
        $r2 = r0.<android.app.ContextImpl: android.content.res.Resources$Theme mTheme>;

        return $r2;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        android.app.ContextImpl r0;
        android.app.LoadedApk $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r1 == null goto label1;

        $r3 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r2 = virtualinvoke $r3.<android.app.LoadedApk: java.lang.ClassLoader getClassLoader()>();

        goto label2;

     label1:
        $r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label2:
        return $r2;
    }

    public java.lang.String getPackageName()
    {
        android.app.ContextImpl r0;
        android.app.LoadedApk $r1, $r2;
        java.lang.String $r3;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r3 = virtualinvoke $r2.<android.app.LoadedApk: java.lang.String getPackageName()>();

        return $r3;

     label1:
        return "android";
    }

    public java.lang.String getBasePackageName()
    {
        android.app.ContextImpl r0;
        java.lang.String $r1, $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: java.lang.String mBasePackageName>;

        if $r1 == null goto label1;

        $r2 = r0.<android.app.ContextImpl: java.lang.String mBasePackageName>;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

     label2:
        return $r2;
    }

    public java.lang.String getOpPackageName()
    {
        android.app.ContextImpl r0;
        java.lang.String $r1, $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: java.lang.String mOpPackageName>;

        if $r1 == null goto label1;

        $r2 = r0.<android.app.ContextImpl: java.lang.String mOpPackageName>;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getBasePackageName()>();

     label2:
        return $r2;
    }

    public android.content.pm.ApplicationInfo getApplicationInfo()
    {
        android.app.ContextImpl r0;
        android.app.LoadedApk $r1, $r3;
        java.lang.RuntimeException $r2;
        android.content.pm.ApplicationInfo $r4;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r1 == null goto label1;

        $r3 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r4 = virtualinvoke $r3.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        return $r4;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r2;
    }

    public java.lang.String getPackageResourcePath()
    {
        android.app.ContextImpl r0;
        android.app.LoadedApk $r1, $r3;
        java.lang.RuntimeException $r2;
        java.lang.String $r4;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r1 == null goto label1;

        $r3 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r4 = virtualinvoke $r3.<android.app.LoadedApk: java.lang.String getResDir()>();

        return $r4;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r2;
    }

    public java.lang.String getPackageCodePath()
    {
        android.app.ContextImpl r0;
        android.app.LoadedApk $r1, $r3;
        java.lang.RuntimeException $r2;
        java.lang.String $r4;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r1 == null goto label1;

        $r3 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r4 = virtualinvoke $r3.<android.app.LoadedApk: java.lang.String getAppDir()>();

        return $r4;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r2;
    }

    public java.io.File getSharedPrefsFile(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, $r6;
        java.io.File $r2, $r7;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<android.app.ContextImpl: java.io.File getPreferencesDir()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = specialinvoke r0.<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>($r2, $r6);

        return $r7;
    }

    public android.content.SharedPreferences getSharedPreferences(java.lang.String, int)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, r4;
        int i0, $i1, $i2, $i3;
        android.app.SharedPreferencesImpl r2, $r16, r22;
        java.lang.Class r3;
        android.util.ArrayMap r5, $r8, $r9, $r17, $r19, $r21;
        java.io.File r6;
        java.lang.Throwable r7, $r20;
        java.lang.Object $r10, $r13;
        android.app.LoadedApk $r11;
        android.content.pm.ApplicationInfo $r12, $r14;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r3 = class "android/app/ContextImpl";

        entermonitor class "android/app/ContextImpl";

     label01:
        $r8 = <android.app.ContextImpl: android.util.ArrayMap sSharedPrefs>;

        if $r8 != null goto label02;

        $r21 = new android.util.ArrayMap;

        specialinvoke $r21.<android.util.ArrayMap: void <init>()>();

        <android.app.ContextImpl: android.util.ArrayMap sSharedPrefs> = $r21;

     label02:
        r4 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $r9 = <android.app.ContextImpl: android.util.ArrayMap sSharedPrefs>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (android.util.ArrayMap) $r10;

        if r5 != null goto label03;

        $r17 = new android.util.ArrayMap;

        specialinvoke $r17.<android.util.ArrayMap: void <init>()>();

        r5 = $r17;

        $r19 = <android.app.ContextImpl: android.util.ArrayMap sSharedPrefs>;

        virtualinvoke $r19.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

     label03:
        $r11 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r12 = virtualinvoke $r11.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i1 = $r12.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i1 >= 19 goto label04;

        if r1 != null goto label04;

        r1 = "null";

     label04:
        $r13 = virtualinvoke r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.app.SharedPreferencesImpl) $r13;

        if r2 != null goto label06;

        r6 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getSharedPrefsFile(java.lang.String)>(r1);

        $r16 = new android.app.SharedPreferencesImpl;

        specialinvoke $r16.<android.app.SharedPreferencesImpl: void <init>(java.io.File,int)>(r6, i0);

        r22 = $r16;

        virtualinvoke r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r22);

        exitmonitor r3;

     label05:
        return r22;

     label06:
        exitmonitor r3;

     label07:
        goto label10;

     label08:
        $r20 := @caughtexception;

        r7 = $r20;

        exitmonitor r3;

     label09:
        throw r7;

     label10:
        $i2 = i0 & 4;

        if $i2 != 0 goto label11;

        $r14 = virtualinvoke r0.<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i3 = $r14.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i3 >= 11 goto label12;

     label11:
        virtualinvoke r2.<android.app.SharedPreferencesImpl: void startReloadIfChangedUnexpectedly()>();

     label12:
        return r2;

        catch java.lang.Throwable from label01 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private java.io.File getPreferencesDir()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        java.io.File $r4, $r5, $r6, $r7;

        r0 := @this: android.app.ContextImpl;

        $r3 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.app.ContextImpl: java.io.File mPreferencesDir>;

        if $r4 != null goto label2;

        $r6 = new java.io.File;

        $r7 = specialinvoke r0.<android.app.ContextImpl: java.io.File getDataDirFile()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "shared_prefs");

        r0.<android.app.ContextImpl: java.io.File mPreferencesDir> = $r6;

     label2:
        $r5 = r0.<android.app.ContextImpl: java.io.File mPreferencesDir>;

        exitmonitor r1;

     label3:
        return $r5;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.io.FileInputStream openFileInput(java.lang.String) throws java.io.FileNotFoundException
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        java.io.File r2, $r3;
        java.io.FileInputStream $r4;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getFilesDir()>();

        r2 = specialinvoke r0.<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>($r3, r1);

        $r4 = new java.io.FileInputStream;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        return $r4;
    }

    public java.io.FileOutputStream openFileOutput(java.lang.String, int) throws java.io.FileNotFoundException
    {
        android.app.ContextImpl r0;
        java.lang.String r1, $r7, $r9, $r10;
        int i0, $i1;
        boolean z0, $z1;
        java.io.File r2, $r5, r13;
        java.io.FileOutputStream r3, r4, $r6, $r11;
        java.io.FileNotFoundException $r8;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = i0 & 32768;

        if $i1 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        $r5 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getFilesDir()>();

        r2 = specialinvoke r0.<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>($r5, r1);

     label3:
        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r2, z0);

        r3 = $r6;

        $r7 = virtualinvoke r2.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.app.ContextImpl: void setFilePermissionsFromMode(java.lang.String,int,int)>($r7, i0, 0);

     label4:
        return r3;

     label5:
        $r8 := @caughtexception;

        r13 = virtualinvoke r2.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke r13.<java.io.File: boolean mkdir()>();

        $r9 = virtualinvoke r13.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r9, 505, -1, -1);

        $r11 = new java.io.FileOutputStream;

        specialinvoke $r11.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r2, z0);

        r4 = $r11;

        $r10 = virtualinvoke r2.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.app.ContextImpl: void setFilePermissionsFromMode(java.lang.String,int,int)>($r10, i0, 0);

        return r4;

        catch java.io.FileNotFoundException from label3 to label4 with label5;
    }

    public boolean deleteFile(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        java.io.File r2, $r3;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getFilesDir()>();

        r2 = specialinvoke r0.<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>($r3, r1);

        $z0 = virtualinvoke r2.<java.io.File: boolean delete()>();

        return $z0;
    }

    private static java.io.File createFilesDirLocked(java.io.File)
    {
        java.io.File r0;
        boolean $z0, $z1, $z2;
        java.lang.String $r1, $r4, $r6;
        java.lang.StringBuilder $r2, $r3, $r5;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<java.io.File: boolean mkdirs()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label1;

        return r0;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create files subdir ");

        $r4 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ContextImpl", $r6);

        return null;

     label2:
        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r1, 505, -1, -1);

     label3:
        return r0;
    }

    public java.io.File getFilesDir()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r9;
        java.io.File $r4, $r5, $r6, $r7, $r8;

        r0 := @this: android.app.ContextImpl;

        $r3 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.app.ContextImpl: java.io.File mFilesDir>;

        if $r4 != null goto label2;

        $r7 = new java.io.File;

        $r8 = specialinvoke r0.<android.app.ContextImpl: java.io.File getDataDirFile()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "files");

        r0.<android.app.ContextImpl: java.io.File mFilesDir> = $r7;

     label2:
        $r5 = r0.<android.app.ContextImpl: java.io.File mFilesDir>;

        $r6 = staticinvoke <android.app.ContextImpl: java.io.File createFilesDirLocked(java.io.File)>($r5);

        exitmonitor r1;

     label3:
        return $r6;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.io.File getNoBackupFilesDir()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r9;
        java.io.File $r4, $r5, $r6, $r7, $r8;

        r0 := @this: android.app.ContextImpl;

        $r3 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.app.ContextImpl: java.io.File mNoBackupFilesDir>;

        if $r4 != null goto label2;

        $r7 = new java.io.File;

        $r8 = specialinvoke r0.<android.app.ContextImpl: java.io.File getDataDirFile()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "no_backup");

        r0.<android.app.ContextImpl: java.io.File mNoBackupFilesDir> = $r7;

     label2:
        $r5 = r0.<android.app.ContextImpl: java.io.File mNoBackupFilesDir>;

        $r6 = staticinvoke <android.app.ContextImpl: java.io.File createFilesDirLocked(java.io.File)>($r5);

        exitmonitor r1;

     label3:
        return $r6;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.io.File getExternalFilesDir(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        java.io.File[] $r2;
        java.io.File $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.app.ContextImpl: java.io.File[] getExternalFilesDirs(java.lang.String)>(r1);

        $r3 = $r2[0];

        return $r3;
    }

    public java.io.File[] getExternalFilesDirs(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, $r9;
        java.lang.Object r2, $r5;
        java.io.File[] r3, $r6, $r7, $r10;
        java.lang.Throwable r4, $r11;
        java.lang.String[] $r8;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<android.app.ContextImpl: java.io.File[] mExternalFilesDirs>;

        if $r6 != null goto label2;

        $r9 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $r10 = staticinvoke <android.os.Environment: java.io.File[] buildExternalStorageAppFilesDirs(java.lang.String)>($r9);

        r0.<android.app.ContextImpl: java.io.File[] mExternalFilesDirs> = $r10;

     label2:
        r3 = r0.<android.app.ContextImpl: java.io.File[] mExternalFilesDirs>;

        if r1 == null goto label3;

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = r1;

        r3 = staticinvoke <android.os.Environment: java.io.File[] buildPaths(java.io.File[],java.lang.String[])>(r3, $r8);

     label3:
        $r7 = specialinvoke r0.<android.app.ContextImpl: java.io.File[] ensureDirsExistOrFilter(java.io.File[])>(r3);

        exitmonitor r2;

     label4:
        return $r7;

     label5:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r2;

     label6:
        throw r4;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.io.File getObbDir()
    {
        android.app.ContextImpl r0;
        java.io.File[] $r1;
        java.io.File $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = virtualinvoke r0.<android.app.ContextImpl: java.io.File[] getObbDirs()>();

        $r2 = $r1[0];

        return $r2;
    }

    public java.io.File[] getObbDirs()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r9;
        java.io.File[] $r4, $r5, $r6, $r8;
        java.lang.String $r7;

        r0 := @this: android.app.ContextImpl;

        $r3 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.app.ContextImpl: java.io.File[] mExternalObbDirs>;

        if $r4 != null goto label2;

        $r7 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $r8 = staticinvoke <android.os.Environment: java.io.File[] buildExternalStorageAppObbDirs(java.lang.String)>($r7);

        r0.<android.app.ContextImpl: java.io.File[] mExternalObbDirs> = $r8;

     label2:
        $r5 = r0.<android.app.ContextImpl: java.io.File[] mExternalObbDirs>;

        $r6 = specialinvoke r0.<android.app.ContextImpl: java.io.File[] ensureDirsExistOrFilter(java.io.File[])>($r5);

        exitmonitor r1;

     label3:
        return $r6;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.io.File getCacheDir()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r9;
        java.io.File $r4, $r5, $r6, $r7, $r8;

        r0 := @this: android.app.ContextImpl;

        $r3 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.app.ContextImpl: java.io.File mCacheDir>;

        if $r4 != null goto label2;

        $r7 = new java.io.File;

        $r8 = specialinvoke r0.<android.app.ContextImpl: java.io.File getDataDirFile()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "cache");

        r0.<android.app.ContextImpl: java.io.File mCacheDir> = $r7;

     label2:
        $r5 = r0.<android.app.ContextImpl: java.io.File mCacheDir>;

        $r6 = staticinvoke <android.app.ContextImpl: java.io.File createFilesDirLocked(java.io.File)>($r5);

        exitmonitor r1;

     label3:
        return $r6;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.io.File getCodeCacheDir()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r9;
        java.io.File $r4, $r5, $r6, $r7, $r8;

        r0 := @this: android.app.ContextImpl;

        $r3 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.app.ContextImpl: java.io.File mCodeCacheDir>;

        if $r4 != null goto label2;

        $r7 = new java.io.File;

        $r8 = specialinvoke r0.<android.app.ContextImpl: java.io.File getDataDirFile()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "code_cache");

        r0.<android.app.ContextImpl: java.io.File mCodeCacheDir> = $r7;

     label2:
        $r5 = r0.<android.app.ContextImpl: java.io.File mCodeCacheDir>;

        $r6 = staticinvoke <android.app.ContextImpl: java.io.File createFilesDirLocked(java.io.File)>($r5);

        exitmonitor r1;

     label3:
        return $r6;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.io.File getExternalCacheDir()
    {
        android.app.ContextImpl r0;
        java.io.File[] $r1;
        java.io.File $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = virtualinvoke r0.<android.app.ContextImpl: java.io.File[] getExternalCacheDirs()>();

        $r2 = $r1[0];

        return $r2;
    }

    public java.io.File[] getExternalCacheDirs()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r9;
        java.io.File[] $r4, $r5, $r6, $r8;
        java.lang.String $r7;

        r0 := @this: android.app.ContextImpl;

        $r3 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.app.ContextImpl: java.io.File[] mExternalCacheDirs>;

        if $r4 != null goto label2;

        $r7 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $r8 = staticinvoke <android.os.Environment: java.io.File[] buildExternalStorageAppCacheDirs(java.lang.String)>($r7);

        r0.<android.app.ContextImpl: java.io.File[] mExternalCacheDirs> = $r8;

     label2:
        $r5 = r0.<android.app.ContextImpl: java.io.File[] mExternalCacheDirs>;

        $r6 = specialinvoke r0.<android.app.ContextImpl: java.io.File[] ensureDirsExistOrFilter(java.io.File[])>($r5);

        exitmonitor r1;

     label3:
        return $r6;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.io.File[] getExternalMediaDirs()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r9;
        java.io.File[] $r4, $r5, $r6, $r8;
        java.lang.String $r7;

        r0 := @this: android.app.ContextImpl;

        $r3 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.app.ContextImpl: java.io.File[] mExternalMediaDirs>;

        if $r4 != null goto label2;

        $r7 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $r8 = staticinvoke <android.os.Environment: java.io.File[] buildExternalStorageAppMediaDirs(java.lang.String)>($r7);

        r0.<android.app.ContextImpl: java.io.File[] mExternalMediaDirs> = $r8;

     label2:
        $r5 = r0.<android.app.ContextImpl: java.io.File[] mExternalMediaDirs>;

        $r6 = specialinvoke r0.<android.app.ContextImpl: java.io.File[] ensureDirsExistOrFilter(java.io.File[])>($r5);

        exitmonitor r1;

     label3:
        return $r6;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.io.File getFileStreamPath(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        java.io.File $r2, $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getFilesDir()>();

        $r3 = specialinvoke r0.<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>($r2, r1);

        return $r3;
    }

    public java.lang.String[] fileList()
    {
        android.app.ContextImpl r0;
        java.lang.String[] r1, $r3;
        java.io.File $r2;

        r0 := @this: android.app.ContextImpl;

        $r2 = virtualinvoke r0.<android.app.ContextImpl: java.io.File getFilesDir()>();

        r1 = virtualinvoke $r2.<java.io.File: java.lang.String[] list()>();

        if r1 == null goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = <android.app.ContextImpl: java.lang.String[] EMPTY_FILE_LIST>;

     label2:
        return $r3;
    }

    public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        int i0;
        android.database.sqlite.SQLiteDatabase$CursorFactory r2;
        android.database.sqlite.SQLiteDatabase $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>(r1, i0, r2, null);

        return $r3;
    }

    public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory, android.database.DatabaseErrorHandler)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, $r6, $r7;
        int i0, i1, $i2;
        android.database.sqlite.SQLiteDatabase$CursorFactory r2;
        android.database.DatabaseErrorHandler r3;
        java.io.File r4;
        android.database.sqlite.SQLiteDatabase r5;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        r3 := @parameter3: android.database.DatabaseErrorHandler;

        r4 = specialinvoke r0.<android.app.ContextImpl: java.io.File validateFilePath(java.lang.String,boolean)>(r1, 1);

        i1 = 268435456;

        $i2 = i0 & 8;

        if $i2 == 0 goto label1;

        i1 = i1 | 536870912;

     label1:
        $r6 = virtualinvoke r4.<java.io.File: java.lang.String getPath()>();

        r5 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>($r6, r2, i1, r3);

        $r7 = virtualinvoke r4.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.app.ContextImpl: void setFilePermissionsFromMode(java.lang.String,int,int)>($r7, i0, 0);

        return r5;
    }

    public boolean deleteDatabase(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        java.io.File r2;
        boolean $z0;
        java.lang.Exception $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

     label1:
        r2 = specialinvoke r0.<android.app.ContextImpl: java.io.File validateFilePath(java.lang.String,boolean)>(r1, 0);

        $z0 = staticinvoke <android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>(r2);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.io.File getDatabasePath(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        java.io.File $r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<android.app.ContextImpl: java.io.File validateFilePath(java.lang.String,boolean)>(r1, 0);

        return $r2;
    }

    public java.lang.String[] databaseList()
    {
        android.app.ContextImpl r0;
        java.lang.String[] r1, $r3;
        java.io.File $r2;

        r0 := @this: android.app.ContextImpl;

        $r2 = specialinvoke r0.<android.app.ContextImpl: java.io.File getDatabasesDir()>();

        r1 = virtualinvoke $r2.<java.io.File: java.lang.String[] list()>();

        if r1 == null goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = <android.app.ContextImpl: java.lang.String[] EMPTY_FILE_LIST>;

     label2:
        return $r3;
    }

    private java.io.File getDatabasesDir()
    {
        android.app.ContextImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r11;
        java.io.File $r4, $r5, $r7, $r8, $r9, $r10;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        $r3 = r0.<android.app.ContextImpl: java.lang.Object mSync>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<android.app.ContextImpl: java.io.File mDatabasesDir>;

        if $r4 != null goto label2;

        $r9 = new java.io.File;

        $r10 = specialinvoke r0.<android.app.ContextImpl: java.io.File getDataDirFile()>();

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "databases");

        r0.<android.app.ContextImpl: java.io.File mDatabasesDir> = $r9;

     label2:
        $r5 = r0.<android.app.ContextImpl: java.io.File mDatabasesDir>;

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getPath()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("databases");

        if $z0 == 0 goto label3;

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>("/data/system");

        r0.<android.app.ContextImpl: java.io.File mDatabasesDir> = $r8;

     label3:
        $r7 = r0.<android.app.ContextImpl: java.io.File mDatabasesDir>;

        exitmonitor r1;

     label4:
        return $r7;

     label5:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public android.graphics.drawable.Drawable getWallpaper()
    {
        android.app.ContextImpl r0;
        android.app.WallpaperManager $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = specialinvoke r0.<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>();

        $r2 = virtualinvoke $r1.<android.app.WallpaperManager: android.graphics.drawable.Drawable getDrawable()>();

        return $r2;
    }

    public android.graphics.drawable.Drawable peekWallpaper()
    {
        android.app.ContextImpl r0;
        android.app.WallpaperManager $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = specialinvoke r0.<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>();

        $r2 = virtualinvoke $r1.<android.app.WallpaperManager: android.graphics.drawable.Drawable peekDrawable()>();

        return $r2;
    }

    public int getWallpaperDesiredMinimumWidth()
    {
        android.app.ContextImpl r0;
        android.app.WallpaperManager $r1;
        int $i0;

        r0 := @this: android.app.ContextImpl;

        $r1 = specialinvoke r0.<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>();

        $i0 = virtualinvoke $r1.<android.app.WallpaperManager: int getDesiredMinimumWidth()>();

        return $i0;
    }

    public int getWallpaperDesiredMinimumHeight()
    {
        android.app.ContextImpl r0;
        android.app.WallpaperManager $r1;
        int $i0;

        r0 := @this: android.app.ContextImpl;

        $r1 = specialinvoke r0.<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>();

        $i0 = virtualinvoke $r1.<android.app.WallpaperManager: int getDesiredMinimumHeight()>();

        return $i0;
    }

    public void setWallpaper(android.graphics.Bitmap) throws java.io.IOException
    {
        android.app.ContextImpl r0;
        android.graphics.Bitmap r1;
        android.app.WallpaperManager $r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.graphics.Bitmap;

        $r2 = specialinvoke r0.<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>();

        virtualinvoke $r2.<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>(r1);

        return;
    }

    public void setWallpaper(java.io.InputStream) throws java.io.IOException
    {
        android.app.ContextImpl r0;
        java.io.InputStream r1;
        android.app.WallpaperManager $r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.io.InputStream;

        $r2 = specialinvoke r0.<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>();

        virtualinvoke $r2.<android.app.WallpaperManager: void setStream(java.io.InputStream)>(r1);

        return;
    }

    public void clearWallpaper() throws java.io.IOException
    {
        android.app.ContextImpl r0;
        android.app.WallpaperManager $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = specialinvoke r0.<android.app.ContextImpl: android.app.WallpaperManager getWallpaperManager()>();

        virtualinvoke $r1.<android.app.WallpaperManager: void clear()>();

        return;
    }

    public void startActivity(android.content.Intent)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        virtualinvoke r0.<android.app.ContextImpl: void startActivity(android.content.Intent,android.os.Bundle)>(r1, null);

        return;
    }

    public void startActivityAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        virtualinvoke r0.<android.app.ContextImpl: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)>(r1, null, r2);

        return;
    }

    public void startActivity(android.content.Intent, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.Bundle r2;
        int $i0, $i1;
        android.app.ActivityThread $r3, $r6;
        android.app.Instrumentation $r4;
        android.content.Context $r5;
        android.app.ActivityThread$ApplicationThread $r7;
        android.app.Activity $r8;
        android.util.AndroidRuntimeException $r10;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.Bundle;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $i0 = virtualinvoke r1.<android.content.Intent: int getFlags()>();

        $i1 = $i0 & 268435456;

        if $i1 != 0 goto label1;

        $r10 = new android.util.AndroidRuntimeException;

        specialinvoke $r10.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?");

        throw $r10;

     label1:
        $r3 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r4 = virtualinvoke $r3.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        $r5 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r6 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r8 = (android.app.Activity) null;

        virtualinvoke $r4.<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int,android.os.Bundle)>($r5, $r7, null, $r8, r1, -1, r2);

        return;
    }

    public void startActivityAsUser(android.content.Intent, android.os.Bundle, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.Bundle r2;
        android.os.UserHandle r3;
        android.app.IActivityManager $r5;
        android.app.ActivityThread $r6;
        android.app.ActivityThread$ApplicationThread $r7;
        java.lang.String $r8, $r10;
        android.content.ContentResolver $r9;
        int $i1;
        android.os.RemoteException $r11;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.Bundle;

        r3 := @parameter2: android.os.UserHandle;

     label1:
        $r5 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r6 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r8 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getBasePackageName()>();

        $r9 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        $r10 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r9);

        $i1 = virtualinvoke r3.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r5.<android.app.IActivityManager: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>($r7, $r8, r1, $r10, null, null, 0, 268435456, null, r2, $i1);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startActivities(android.content.Intent[])
    {
        android.app.ContextImpl r0;
        android.content.Intent[] r1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent[];

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        virtualinvoke r0.<android.app.ContextImpl: void startActivities(android.content.Intent[],android.os.Bundle)>(r1, null);

        return;
    }

    public void startActivitiesAsUser(android.content.Intent[], android.os.Bundle, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent[] r1;
        android.os.Bundle r2;
        android.os.UserHandle r3;
        android.content.Intent $r4;
        int $i0, $i1, $i2;
        android.app.ActivityThread $r5, $r8;
        android.app.Instrumentation $r6;
        android.content.Context $r7;
        android.app.ActivityThread$ApplicationThread $r9;
        android.app.Activity $r10;
        android.util.AndroidRuntimeException $r11;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent[];

        r2 := @parameter1: android.os.Bundle;

        r3 := @parameter2: android.os.UserHandle;

        $r4 = r1[0];

        $i0 = virtualinvoke $r4.<android.content.Intent: int getFlags()>();

        $i1 = $i0 & 268435456;

        if $i1 != 0 goto label1;

        $r11 = new android.util.AndroidRuntimeException;

        specialinvoke $r11.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("Calling startActivities() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag on first Intent. Is this really what you want?");

        throw $r11;

     label1:
        $r5 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        $r7 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r8 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r9 = virtualinvoke $r8.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r10 = (android.app.Activity) null;

        $i2 = virtualinvoke r3.<android.os.UserHandle: int getIdentifier()>();

        virtualinvoke $r6.<android.app.Instrumentation: void execStartActivitiesAsUser(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent[],android.os.Bundle,int)>($r7, $r9, null, $r10, r1, r2, $i2);

        return;
    }

    public void startActivities(android.content.Intent[], android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent[] r1;
        android.os.Bundle r2;
        android.content.Intent $r3;
        int $i0, $i1;
        android.app.ActivityThread $r4, $r7;
        android.app.Instrumentation $r5;
        android.content.Context $r6;
        android.app.ActivityThread$ApplicationThread $r8;
        android.app.Activity $r9;
        android.util.AndroidRuntimeException $r10;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent[];

        r2 := @parameter1: android.os.Bundle;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r3 = r1[0];

        $i0 = virtualinvoke $r3.<android.content.Intent: int getFlags()>();

        $i1 = $i0 & 268435456;

        if $i1 != 0 goto label1;

        $r10 = new android.util.AndroidRuntimeException;

        specialinvoke $r10.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("Calling startActivities() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag on first Intent. Is this really what you want?");

        throw $r10;

     label1:
        $r4 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r5 = virtualinvoke $r4.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        $r6 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r8 = virtualinvoke $r7.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r9 = (android.app.Activity) null;

        virtualinvoke $r5.<android.app.Instrumentation: void execStartActivities(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent[],android.os.Bundle)>($r6, $r8, null, $r9, r1, r2);

        return;
    }

    public void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int) throws android.content.IntentSender$SendIntentException
    {
        android.app.ContextImpl r0;
        android.content.IntentSender r1;
        android.content.Intent r2;
        int i0, i1, i2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.IntentSender;

        r2 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        virtualinvoke r0.<android.app.ContextImpl: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>(r1, r2, i0, i1, i2, null);

        return;
    }

    public void startIntentSender(android.content.IntentSender, android.content.Intent, int, int, int, android.os.Bundle) throws android.content.IntentSender$SendIntentException
    {
        android.app.ContextImpl r0;
        android.content.IntentSender r1;
        android.content.Intent r2;
        int i0, i1, i2, i3;
        android.os.Bundle r3;
        java.lang.String r4;
        android.app.IActivityManager $r5;
        android.app.ActivityThread $r6;
        android.app.ActivityThread$ApplicationThread $r7;
        android.content.IntentSender$SendIntentException $r8;
        android.content.ContentResolver $r9;
        android.os.RemoteException $r10;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.IntentSender;

        r2 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.os.Bundle;

     label1:
        r4 = null;

        if r2 == null goto label2;

        virtualinvoke r2.<android.content.Intent: boolean migrateExtraStreamToClipData()>();

        virtualinvoke r2.<android.content.Intent: void prepareToLeaveProcess()>();

        $r9 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r4 = virtualinvoke r2.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r9);

     label2:
        $r5 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r6 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        i3 = interfaceinvoke $r5.<android.app.IActivityManager: int startActivityIntentSender(android.app.IApplicationThread,android.content.IntentSender,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)>($r7, r1, r2, r4, null, null, 0, i0, i1, r3);

        if i3 != -6 goto label3;

        $r8 = new android.content.IntentSender$SendIntentException;

        specialinvoke $r8.<android.content.IntentSender$SendIntentException: void <init>()>();

        throw $r8;

     label3:
        staticinvoke <android.app.Instrumentation: void checkStartActivityResult(int,java.lang.Object)>(i3, null);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

     label6:
        return;

        catch android.os.RemoteException from label1 to label4 with label5;
    }

    public void sendBroadcast(android.content.Intent)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        java.lang.String r2;
        android.content.ContentResolver $r4;
        android.app.IActivityManager $r5;
        android.app.ActivityThread $r6;
        android.app.ActivityThread$ApplicationThread $r7;
        int $i0;
        android.os.RemoteException $r8;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r4 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r2 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r4);

     label1:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r5 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r6 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r5.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int)>($r7, r1, r2, null, -1, null, null, null, -1, 0, 0, $i0);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendBroadcast(android.content.Intent, java.lang.String)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        java.lang.String r2, r3;
        android.content.ContentResolver $r5;
        android.app.IActivityManager $r6;
        android.app.ActivityThread $r7;
        android.app.ActivityThread$ApplicationThread $r8;
        int $i0;
        android.os.RemoteException $r9;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r5 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r3 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r5);

     label1:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r6 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r8 = virtualinvoke $r7.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r6.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int)>($r8, r1, r3, null, -1, null, null, r2, -1, 0, 0, $i0);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendBroadcast(android.content.Intent, java.lang.String, int)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        java.lang.String r2, r3;
        int i0, $i1;
        android.content.ContentResolver $r5;
        android.app.IActivityManager $r6;
        android.app.ActivityThread $r7;
        android.app.ActivityThread$ApplicationThread $r8;
        android.os.RemoteException $r9;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r5 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r3 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r5);

     label1:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r6 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r8 = virtualinvoke $r7.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i1 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r6.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int)>($r8, r1, r3, null, -1, null, null, r2, i0, 0, 0, $i1);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        java.lang.String r2, r3;
        android.content.ContentResolver $r5;
        android.app.IActivityManager $r6;
        android.app.ActivityThread $r7;
        android.app.ActivityThread$ApplicationThread $r8;
        int $i0;
        android.os.RemoteException $r9;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r5 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r3 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r5);

     label1:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r6 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r8 = virtualinvoke $r7.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r6.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int)>($r8, r1, r3, null, -1, null, null, r2, -1, 1, 0, $i0);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        java.lang.String r2, r5;
        android.content.BroadcastReceiver r3;
        android.os.Handler r4;
        int i0;
        android.os.Bundle r6;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.BroadcastReceiver;

        r4 := @parameter3: android.os.Handler;

        i0 := @parameter4: int;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: android.os.Bundle;

        virtualinvoke r0.<android.app.ContextImpl: void sendOrderedBroadcast(android.content.Intent,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r1, r2, -1, r3, r4, i0, r5, r6);

        return;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String, int, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        java.lang.String r2, r5, r8;
        int i0, i1, $i2;
        android.content.BroadcastReceiver r3;
        android.os.Handler r4;
        android.os.Bundle r6;
        android.content.IIntentReceiver r7;
        android.content.ContentResolver $r10;
        android.app.IActivityManager $r11;
        android.app.ActivityThread $r12, $r17, $r19, $r23;
        android.app.ActivityThread$ApplicationThread $r13;
        android.app.LoadedApk $r14, $r18;
        android.content.Context $r15, $r20;
        android.app.LoadedApk$ReceiverDispatcher $r16;
        android.app.Instrumentation $r21;
        android.os.RemoteException $r22;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.content.BroadcastReceiver;

        r4 := @parameter4: android.os.Handler;

        i1 := @parameter5: int;

        r5 := @parameter6: java.lang.String;

        r6 := @parameter7: android.os.Bundle;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        r7 = null;

        if r3 == null goto label4;

        $r14 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r14 == null goto label2;

        if r4 != null goto label1;

        $r23 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r4 = virtualinvoke $r23.<android.app.ActivityThread: android.os.Handler getHandler()>();

     label1:
        $r18 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r20 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r19 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r21 = virtualinvoke $r19.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        r7 = virtualinvoke $r18.<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r3, $r20, r4, $r21, 0);

        goto label4;

     label2:
        if r4 != null goto label3;

        $r17 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r4 = virtualinvoke $r17.<android.app.ActivityThread: android.os.Handler getHandler()>();

     label3:
        $r16 = new android.app.LoadedApk$ReceiverDispatcher;

        $r15 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        specialinvoke $r16.<android.app.LoadedApk$ReceiverDispatcher: void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r3, $r15, r4, null, 0);

        r7 = virtualinvoke $r16.<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>();

     label4:
        $r10 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r8 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r10);

     label5:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r11 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r12 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r13 = virtualinvoke $r12.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i2 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r11.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int)>($r13, r1, r8, r7, i1, r5, r6, r2, i0, 1, 0, $i2);

     label6:
        goto label8;

     label7:
        $r22 := @caughtexception;

     label8:
        return;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.String r3;
        android.content.ContentResolver $r5;
        android.app.IActivityManager $r6;
        android.app.ActivityThread $r7;
        android.app.ActivityThread$ApplicationThread $r8;
        int $i1;
        android.os.RemoteException $r9;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r5 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r3 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r5);

     label1:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r6 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r8 = virtualinvoke $r7.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r6.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int)>($r8, r1, r3, null, -1, null, null, null, -1, 0, 0, $i1);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.String r3, r4;
        android.content.ContentResolver $r6;
        android.app.IActivityManager $r7;
        android.app.ActivityThread $r8;
        android.app.ActivityThread$ApplicationThread $r9;
        int $i1;
        android.os.RemoteException $r10;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: java.lang.String;

        $r6 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r4 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r6);

     label1:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r7 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r8 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r9 = virtualinvoke $r8.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r7.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int)>($r9, r1, r4, null, -1, null, null, r3, -1, 0, 0, $i1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.String r3, r6;
        android.content.BroadcastReceiver r4;
        android.os.Handler r5;
        int i0;
        android.os.Bundle r7;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.BroadcastReceiver;

        r5 := @parameter4: android.os.Handler;

        i0 := @parameter5: int;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: android.os.Bundle;

        virtualinvoke r0.<android.app.ContextImpl: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r1, r2, r3, -1, r4, r5, i0, r6, r7);

        return;
    }

    public void sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, int, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.String r3, r6, r9;
        int i0, i1, $i3;
        android.content.BroadcastReceiver r4;
        android.os.Handler r5;
        android.os.Bundle r7;
        android.content.IIntentReceiver r8;
        android.content.ContentResolver $r11;
        android.app.IActivityManager $r12;
        android.app.ActivityThread$ApplicationThread $r13;
        android.app.ActivityThread $r14, $r18, $r22, $r24;
        android.app.LoadedApk$ReceiverDispatcher $r15;
        android.app.LoadedApk $r16, $r20;
        android.content.Context $r17, $r19;
        android.app.Instrumentation $r21;
        android.os.RemoteException $r23;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r4 := @parameter4: android.content.BroadcastReceiver;

        r5 := @parameter5: android.os.Handler;

        i1 := @parameter6: int;

        r6 := @parameter7: java.lang.String;

        r7 := @parameter8: android.os.Bundle;

        r8 = null;

        if r4 == null goto label4;

        $r16 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r16 == null goto label2;

        if r5 != null goto label1;

        $r24 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r5 = virtualinvoke $r24.<android.app.ActivityThread: android.os.Handler getHandler()>();

     label1:
        $r20 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r19 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r22 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r21 = virtualinvoke $r22.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        r8 = virtualinvoke $r20.<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r4, $r19, r5, $r21, 0);

        goto label4;

     label2:
        if r5 != null goto label3;

        $r18 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r5 = virtualinvoke $r18.<android.app.ActivityThread: android.os.Handler getHandler()>();

     label3:
        $r15 = new android.app.LoadedApk$ReceiverDispatcher;

        $r17 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        specialinvoke $r15.<android.app.LoadedApk$ReceiverDispatcher: void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r4, $r17, r5, null, 0);

        r8 = virtualinvoke $r15.<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>();

     label4:
        $r11 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r9 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r11);

     label5:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r12 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r14 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r13 = virtualinvoke $r14.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i3 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r12.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int)>($r13, r1, r9, r8, i1, r6, r7, r3, i0, 1, 0, $i3);

     label6:
        goto label8;

     label7:
        $r23 := @caughtexception;

     label8:
        return;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void sendStickyBroadcast(android.content.Intent)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        java.lang.String r2;
        android.content.ContentResolver $r4;
        android.app.IActivityManager $r5;
        android.app.ActivityThread $r6;
        android.app.ActivityThread$ApplicationThread $r7;
        int $i0;
        android.os.RemoteException $r8;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r4 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r2 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r4);

     label1:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r5 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r6 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r5.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int)>($r7, r1, r2, null, -1, null, null, null, -1, 0, 1, $i0);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendStickyOrderedBroadcast(android.content.Intent, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.content.BroadcastReceiver r2;
        android.os.Handler r3;
        int i0, $i1;
        java.lang.String r4, r7;
        android.os.Bundle r5;
        android.content.IIntentReceiver r6;
        android.content.ContentResolver $r9;
        android.app.IActivityManager $r10;
        android.app.ActivityThread $r11, $r16, $r18, $r22;
        android.app.ActivityThread$ApplicationThread $r12;
        android.app.LoadedApk $r13, $r17;
        android.content.Context $r14, $r19;
        android.app.LoadedApk$ReceiverDispatcher $r15;
        android.app.Instrumentation $r20;
        android.os.RemoteException $r21;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.BroadcastReceiver;

        r3 := @parameter2: android.os.Handler;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: android.os.Bundle;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        r6 = null;

        if r2 == null goto label4;

        $r13 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r13 == null goto label2;

        if r3 != null goto label1;

        $r22 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r3 = virtualinvoke $r22.<android.app.ActivityThread: android.os.Handler getHandler()>();

     label1:
        $r17 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r19 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r18 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r20 = virtualinvoke $r18.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        r6 = virtualinvoke $r17.<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r2, $r19, r3, $r20, 0);

        goto label4;

     label2:
        if r3 != null goto label3;

        $r16 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r3 = virtualinvoke $r16.<android.app.ActivityThread: android.os.Handler getHandler()>();

     label3:
        $r15 = new android.app.LoadedApk$ReceiverDispatcher;

        $r14 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        specialinvoke $r15.<android.app.LoadedApk$ReceiverDispatcher: void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r2, $r14, r3, null, 0);

        r6 = virtualinvoke $r15.<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>();

     label4:
        $r9 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r7 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r9);

     label5:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r10 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r11 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r12 = virtualinvoke $r11.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i1 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r10.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int)>($r12, r1, r7, r6, i0, r4, r5, null, -1, 1, 1, $i1);

     label6:
        goto label8;

     label7:
        $r21 := @caughtexception;

     label8:
        return;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void removeStickyBroadcast(android.content.Intent)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1, $r8;
        java.lang.String r2;
        android.content.ContentResolver $r4;
        android.app.IActivityManager $r5;
        android.app.ActivityThread $r6;
        android.app.ActivityThread$ApplicationThread $r7;
        int $i0;
        android.net.Uri $r9;
        android.os.RemoteException $r11;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        $r4 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r2 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r4);

        if r2 == null goto label1;

        $r8 = new android.content.Intent;

        specialinvoke $r8.<android.content.Intent: void <init>(android.content.Intent)>(r1);

        r1 = $r8;

        $r9 = virtualinvoke r1.<android.content.Intent: android.net.Uri getData()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>($r9, r2);

     label1:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r5 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r6 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        interfaceinvoke $r5.<android.app.IActivityManager: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>($r7, r1, $i0);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        java.lang.String r3;
        android.content.ContentResolver $r5;
        android.app.IActivityManager $r6;
        android.app.ActivityThread $r7;
        android.app.ActivityThread$ApplicationThread $r8;
        int $i1;
        android.os.RemoteException $r9;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r5 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r3 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r5);

     label1:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r6 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r8 = virtualinvoke $r7.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r6.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int)>($r8, r1, r3, null, -1, null, null, null, -1, 0, 1, $i1);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendStickyOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        android.content.BroadcastReceiver r3;
        android.os.Handler r4;
        int i0, $i2;
        java.lang.String r5, r8;
        android.os.Bundle r6;
        android.content.IIntentReceiver r7;
        android.content.ContentResolver $r10;
        android.app.IActivityManager $r11;
        android.app.ActivityThread $r12, $r17, $r21, $r23;
        android.app.ActivityThread$ApplicationThread $r13;
        android.app.LoadedApk$ReceiverDispatcher $r14;
        android.app.LoadedApk $r15, $r19;
        android.content.Context $r16, $r18;
        android.app.Instrumentation $r20;
        android.os.RemoteException $r22;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: android.content.BroadcastReceiver;

        r4 := @parameter3: android.os.Handler;

        i0 := @parameter4: int;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: android.os.Bundle;

        r7 = null;

        if r3 == null goto label4;

        $r15 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r15 == null goto label2;

        if r4 != null goto label1;

        $r23 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r4 = virtualinvoke $r23.<android.app.ActivityThread: android.os.Handler getHandler()>();

     label1:
        $r19 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r18 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r21 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r20 = virtualinvoke $r21.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        r7 = virtualinvoke $r19.<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r3, $r18, r4, $r20, 0);

        goto label4;

     label2:
        if r4 != null goto label3;

        $r17 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r4 = virtualinvoke $r17.<android.app.ActivityThread: android.os.Handler getHandler()>();

     label3:
        $r14 = new android.app.LoadedApk$ReceiverDispatcher;

        $r16 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        specialinvoke $r14.<android.app.LoadedApk$ReceiverDispatcher: void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r3, $r16, r4, null, 0);

        r7 = virtualinvoke $r14.<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>();

     label4:
        $r10 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r8 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r10);

     label5:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r11 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r12 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r13 = virtualinvoke $r12.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i2 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r11.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int)>($r13, r1, r8, r7, i0, r5, r6, null, -1, 1, 1, $i2);

     label6:
        goto label8;

     label7:
        $r22 := @caughtexception;

     label8:
        return;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void removeStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1, $r9;
        android.os.UserHandle r2;
        java.lang.String r3;
        android.content.ContentResolver $r5;
        android.app.IActivityManager $r6;
        android.app.ActivityThread $r7;
        android.app.ActivityThread$ApplicationThread $r8;
        int $i0;
        android.net.Uri $r10;
        android.os.RemoteException $r12;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r5 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        r3 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r5);

        if r3 == null goto label1;

        $r9 = new android.content.Intent;

        specialinvoke $r9.<android.content.Intent: void <init>(android.content.Intent)>(r1);

        r1 = $r9;

        $r10 = virtualinvoke r1.<android.content.Intent: android.net.Uri getData()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>($r10, r3);

     label1:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r6 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r8 = virtualinvoke $r7.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke $r6.<android.app.IActivityManager: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>($r8, r1, $i0);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)
    {
        android.app.ContextImpl r0;
        android.content.BroadcastReceiver r1;
        android.content.IntentFilter r2;
        android.content.Intent $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.BroadcastReceiver;

        r2 := @parameter1: android.content.IntentFilter;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>(r1, r2, null, null);

        return $r3;
    }

    public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler)
    {
        android.app.ContextImpl r0;
        android.content.BroadcastReceiver r1;
        android.content.IntentFilter r2;
        java.lang.String r3;
        android.os.Handler r4;
        int $i0;
        android.content.Context $r5;
        android.content.Intent $r6;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.BroadcastReceiver;

        r2 := @parameter1: android.content.IntentFilter;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Handler;

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        $r5 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r6 = specialinvoke r0.<android.app.ContextImpl: android.content.Intent registerReceiverInternal(android.content.BroadcastReceiver,int,android.content.IntentFilter,java.lang.String,android.os.Handler,android.content.Context)>(r1, $i0, r2, r3, r4, $r5);

        return $r6;
    }

    public android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver, android.os.UserHandle, android.content.IntentFilter, java.lang.String, android.os.Handler)
    {
        android.app.ContextImpl r0;
        android.content.BroadcastReceiver r1;
        android.os.UserHandle r2;
        android.content.IntentFilter r3;
        java.lang.String r4;
        android.os.Handler r5;
        int $i0;
        android.content.Context $r6;
        android.content.Intent $r7;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.BroadcastReceiver;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: android.content.IntentFilter;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: android.os.Handler;

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $r6 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r7 = specialinvoke r0.<android.app.ContextImpl: android.content.Intent registerReceiverInternal(android.content.BroadcastReceiver,int,android.content.IntentFilter,java.lang.String,android.os.Handler,android.content.Context)>(r1, $i0, r3, r4, r5, $r6);

        return $r7;
    }

    private android.content.Intent registerReceiverInternal(android.content.BroadcastReceiver, int, android.content.IntentFilter, java.lang.String, android.os.Handler, android.content.Context)
    {
        android.app.ContextImpl r0;
        android.content.BroadcastReceiver r1;
        int i0;
        android.content.IntentFilter r2;
        java.lang.String r3, $r11;
        android.os.Handler r4;
        android.content.Context r5;
        android.content.IIntentReceiver r6;
        android.app.IActivityManager $r8;
        android.app.ActivityThread $r9, $r15, $r16, $r19;
        android.app.ActivityThread$ApplicationThread $r10;
        android.content.Intent $r12;
        android.app.LoadedApk $r13, $r18;
        android.app.LoadedApk$ReceiverDispatcher $r14;
        android.app.Instrumentation $r17;
        android.os.RemoteException $r20;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.BroadcastReceiver;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.IntentFilter;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.os.Handler;

        r5 := @parameter5: android.content.Context;

        r6 = null;

        if r1 == null goto label4;

        $r13 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r13 == null goto label2;

        if r5 == null goto label2;

        if r4 != null goto label1;

        $r19 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r4 = virtualinvoke $r19.<android.app.ActivityThread: android.os.Handler getHandler()>();

     label1:
        $r18 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r16 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r17 = virtualinvoke $r16.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        r6 = virtualinvoke $r18.<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r1, r5, r4, $r17, 1);

        goto label4;

     label2:
        if r4 != null goto label3;

        $r15 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        r4 = virtualinvoke $r15.<android.app.ActivityThread: android.os.Handler getHandler()>();

     label3:
        $r14 = new android.app.LoadedApk$ReceiverDispatcher;

        specialinvoke $r14.<android.app.LoadedApk$ReceiverDispatcher: void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>(r1, r5, r4, null, 1);

        r6 = virtualinvoke $r14.<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>();

     label4:
        $r8 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r9 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r10 = virtualinvoke $r9.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r11 = r0.<android.app.ContextImpl: java.lang.String mBasePackageName>;

        $r12 = interfaceinvoke $r8.<android.app.IActivityManager: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)>($r10, $r11, r6, r2, r3, i0);

     label5:
        return $r12;

     label6:
        $r20 := @caughtexception;

        return null;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void unregisterReceiver(android.content.BroadcastReceiver)
    {
        android.app.ContextImpl r0;
        android.content.BroadcastReceiver r1;
        android.content.IIntentReceiver r2;
        android.app.LoadedApk $r4, $r6;
        java.lang.RuntimeException $r5;
        android.content.Context $r7;
        android.app.IActivityManager $r8;
        android.os.RemoteException $r9;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.BroadcastReceiver;

        $r4 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r4 == null goto label5;

        $r6 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r7 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        r2 = virtualinvoke $r6.<android.app.LoadedApk: android.content.IIntentReceiver forgetReceiverDispatcher(android.content.Context,android.content.BroadcastReceiver)>($r7, r1);

     label1:
        $r8 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r8.<android.app.IActivityManager: void unregisterReceiver(android.content.IIntentReceiver)>(r2);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        goto label6;

     label5:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r5;

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void validateServiceIntent(android.content.Intent)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        java.lang.IllegalArgumentException r2, $r14;
        android.content.ComponentName $r3;
        java.lang.String $r4, $r10, $r12, $r17;
        android.content.pm.ApplicationInfo $r5;
        int $i0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r13, $r15, $r16;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        $r3 = virtualinvoke r1.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r3 != null goto label2;

        $r4 = virtualinvoke r1.<android.content.Intent: java.lang.String getPackage()>();

        if $r4 != null goto label2;

        $r5 = virtualinvoke r0.<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 < 21 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service Intent must be explicit: ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        r2 = $r14;

        throw r2;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Implicit intents with startService are not safe: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = staticinvoke <android.os.Debug: java.lang.String getCallers(int,int)>(2, 3);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ContextImpl", $r12);

     label2:
        return;
    }

    public android.content.ComponentName startService(android.content.Intent)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle $r2;
        android.content.ComponentName $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r2 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $r3 = specialinvoke r0.<android.app.ContextImpl: android.content.ComponentName startServiceCommon(android.content.Intent,android.os.UserHandle)>(r1, $r2);

        return $r3;
    }

    public boolean stopService(android.content.Intent)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle $r2;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r2 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $z0 = specialinvoke r0.<android.app.ContextImpl: boolean stopServiceCommon(android.content.Intent,android.os.UserHandle)>(r1, $r2);

        return $z0;
    }

    public android.content.ComponentName startServiceAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        android.content.ComponentName $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = specialinvoke r0.<android.app.ContextImpl: android.content.ComponentName startServiceCommon(android.content.Intent,android.os.UserHandle)>(r1, r2);

        return $r3;
    }

    private android.content.ComponentName startServiceCommon(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        android.content.ComponentName r3;
        android.app.IActivityManager $r4;
        android.app.ActivityThread $r5;
        android.app.ActivityThread$ApplicationThread $r6;
        android.content.ContentResolver $r7;
        java.lang.String $r8, $r9, $r10, $r17, $r19, $r25, $r27;
        int $i0;
        boolean $z0, $z1;
        java.lang.SecurityException $r11, $r18;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r20, $r21, $r22, $r23, $r24;
        android.os.RemoteException $r26;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

     label1:
        specialinvoke r0.<android.app.ContextImpl: void validateServiceIntent(android.content.Intent)>(r1);

        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r4 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r5 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r7 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        $r8 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r7);

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        r3 = interfaceinvoke $r4.<android.app.IActivityManager: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>($r6, r1, $r8, $i0);

        if r3 == null goto label3;

        $r9 = virtualinvoke r3.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("!");

        if $z0 == 0 goto label2;

        $r18 = new java.lang.SecurityException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to start service ");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without permission ");

        $r25 = virtualinvoke r3.<android.content.ComponentName: java.lang.String getClassName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.SecurityException: void <init>(java.lang.String)>($r27);

        throw $r18;

     label2:
        $r10 = virtualinvoke r3.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("!!");

        if $z1 == 0 goto label3;

        $r11 = new java.lang.SecurityException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to start service ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r17 = virtualinvoke r3.<android.content.ComponentName: java.lang.String getClassName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>($r19);

        throw $r11;

     label3:
        return r3;

     label4:
        $r26 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public boolean stopServiceAsUser(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $z0 = specialinvoke r0.<android.app.ContextImpl: boolean stopServiceCommon(android.content.Intent,android.os.UserHandle)>(r1, r2);

        return $z0;
    }

    private boolean stopServiceCommon(android.content.Intent, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        int i0, $i1;
        android.app.IActivityManager $r3;
        android.app.ActivityThread $r4;
        android.app.ActivityThread$ApplicationThread $r5;
        android.content.ContentResolver $r6;
        java.lang.String $r7, $r13;
        boolean $z0;
        java.lang.SecurityException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        android.os.RemoteException $r12;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

     label1:
        specialinvoke r0.<android.app.ContextImpl: void validateServiceIntent(android.content.Intent)>(r1);

        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r4 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r5 = virtualinvoke $r4.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r6 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        $r7 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r6);

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        i0 = interfaceinvoke $r3.<android.app.IActivityManager: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>($r5, r1, $r7, $i1);

        if i0 >= 0 goto label2;

        $r8 = new java.lang.SecurityException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to stop service ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label2:
        if i0 == 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;

     label5:
        $r12 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label4 with label5;
    }

    public boolean bindService(android.content.Intent, android.content.ServiceConnection, int)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.content.ServiceConnection r2;
        int i0;
        android.os.UserHandle $r3;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.ServiceConnection;

        i0 := @parameter2: int;

        specialinvoke r0.<android.app.ContextImpl: void warnIfCallingFromSystemProcess()>();

        $r3 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

        $z0 = specialinvoke r0.<android.app.ContextImpl: boolean bindServiceCommon(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(r1, r2, i0, $r3);

        return $z0;
    }

    public boolean bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.content.ServiceConnection r2;
        int i0;
        android.os.UserHandle r3;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.ServiceConnection;

        i0 := @parameter2: int;

        r3 := @parameter3: android.os.UserHandle;

        $z0 = specialinvoke r0.<android.app.ContextImpl: boolean bindServiceCommon(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(r1, r2, i0, r3);

        return $z0;
    }

    private boolean bindServiceCommon(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle)
    {
        android.app.ContextImpl r0;
        android.content.Intent r1;
        android.content.ServiceConnection r2;
        int i0, i1, $i2, $i3, $i4;
        android.os.UserHandle r3;
        android.app.IServiceConnection r4;
        android.os.IBinder r5, $r14;
        android.app.LoadedApk $r6, $r8, $r23, $r25;
        java.lang.RuntimeException $r7;
        android.content.Context $r9;
        android.app.ActivityThread $r10, $r12;
        android.os.Handler $r11;
        android.app.IActivityManager $r13;
        android.app.ActivityThread$ApplicationThread $r15;
        java.lang.String $r16, $r21;
        android.content.ContentResolver $r17;
        java.lang.SecurityException $r18;
        boolean $z0;
        java.lang.StringBuilder $r19, $r20, $r22;
        java.lang.IllegalArgumentException $r24;
        android.content.pm.ApplicationInfo $r26;
        android.os.RemoteException $r27;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.ServiceConnection;

        i0 := @parameter2: int;

        r3 := @parameter3: android.os.UserHandle;

        if r2 != null goto label1;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connection is null");

        throw $r24;

     label1:
        $r6 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r6 == null goto label2;

        $r8 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r9 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        $r10 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r11 = virtualinvoke $r10.<android.app.ActivityThread: android.os.Handler getHandler()>();

        r4 = virtualinvoke $r8.<android.app.LoadedApk: android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection,android.content.Context,android.os.Handler,int)>(r2, $r9, $r11, i0);

        goto label3;

     label2:
        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r7;

     label3:
        specialinvoke r0.<android.app.ContextImpl: void validateServiceIntent(android.content.Intent)>(r1);

     label4:
        r5 = virtualinvoke r0.<android.app.ContextImpl: android.os.IBinder getActivityToken()>();

        if r5 != null goto label5;

        $i3 = i0 & 1;

        if $i3 != 0 goto label5;

        $r23 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r23 == null goto label5;

        $r25 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r26 = virtualinvoke $r25.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i4 = $r26.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i4 >= 14 goto label5;

        i0 = i0 | 32;

     label5:
        virtualinvoke r1.<android.content.Intent: void prepareToLeaveProcess()>();

        $r13 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r12 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r15 = virtualinvoke $r12.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r14 = virtualinvoke r0.<android.app.ContextImpl: android.os.IBinder getActivityToken()>();

        $r17 = virtualinvoke r0.<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>();

        $r16 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r17);

        $i2 = virtualinvoke r3.<android.os.UserHandle: int getIdentifier()>();

        i1 = interfaceinvoke $r13.<android.app.IActivityManager: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,int)>($r15, $r14, r1, $r16, r4, i0, $i2);

        if i1 >= 0 goto label6;

        $r18 = new java.lang.SecurityException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to bind to service ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.SecurityException: void <init>(java.lang.String)>($r21);

        throw $r18;

     label6:
        if i1 == 0 goto label7;

        $z0 = 1;

        goto label8;

     label7:
        $z0 = 0;

     label8:
        return $z0;

     label9:
        $r27 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label4 to label8 with label9;
    }

    public void unbindService(android.content.ServiceConnection)
    {
        android.app.ContextImpl r0;
        android.content.ServiceConnection r1;
        android.app.IServiceConnection r2;
        android.app.LoadedApk $r4, $r6;
        java.lang.RuntimeException $r5;
        android.content.Context $r7;
        android.app.IActivityManager $r8;
        java.lang.IllegalArgumentException $r9;
        android.os.RemoteException $r10;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.ServiceConnection;

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connection is null");

        throw $r9;

     label1:
        $r4 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r4 == null goto label6;

        $r6 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r7 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        r2 = virtualinvoke $r6.<android.app.LoadedApk: android.app.IServiceConnection forgetServiceDispatcher(android.content.Context,android.content.ServiceConnection)>($r7, r1);

     label2:
        $r8 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r8.<android.app.IActivityManager: boolean unbindService(android.app.IServiceConnection)>(r2);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

     label5:
        goto label7;

     label6:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r5;

     label7:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public boolean startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle)
    {
        android.app.ContextImpl r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        android.os.Bundle r3;
        android.app.IActivityManager $r5;
        int $i0;
        boolean $z0;
        android.os.RemoteException $r6;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

     label1:
        if r3 == null goto label2;

        virtualinvoke r3.<android.os.Bundle: boolean setAllowFds(boolean)>(0);

     label2:
        $r5 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        $z0 = interfaceinvoke $r5.<android.app.IActivityManager: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,java.lang.String)>(r1, r2, 0, r3, null, null, $i0, null);

     label3:
        return $z0;

     label4:
        $r6 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label3 with label4;
    }

    public java.lang.Object getSystemService(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        android.app.ContextImpl$ServiceFetcher r2;
        java.util.HashMap $r3;
        java.lang.Object $r4, $r5;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = <android.app.ContextImpl: java.util.HashMap SYSTEM_SERVICE_MAP>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.app.ContextImpl$ServiceFetcher) $r4;

        if r2 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke r2.<android.app.ContextImpl$ServiceFetcher: java.lang.Object getService(android.app.ContextImpl)>(r0);

     label2:
        return $r5;
    }

    private android.app.WallpaperManager getWallpaperManager()
    {
        android.app.ContextImpl r0;
        android.app.ContextImpl$ServiceFetcher $r1;
        java.lang.Object $r2;
        android.app.WallpaperManager $r3;

        r0 := @this: android.app.ContextImpl;

        $r1 = <android.app.ContextImpl: android.app.ContextImpl$ServiceFetcher WALLPAPER_FETCHER>;

        $r2 = virtualinvoke $r1.<android.app.ContextImpl$ServiceFetcher: java.lang.Object getService(android.app.ContextImpl)>(r0);

        $r3 = (android.app.WallpaperManager) $r2;

        return $r3;
    }

    static android.os.DropBoxManager createDropBoxManager()
    {
        android.os.IBinder r0;
        com.android.internal.os.IDropBoxManagerService r1;
        android.os.DropBoxManager $r2;

        r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("dropbox");

        r1 = staticinvoke <com.android.internal.os.IDropBoxManagerService$Stub: com.android.internal.os.IDropBoxManagerService asInterface(android.os.IBinder)>(r0);

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = new android.os.DropBoxManager;

        specialinvoke $r2.<android.os.DropBoxManager: void <init>(com.android.internal.os.IDropBoxManagerService)>(r1);

        return $r2;
    }

    public int checkPermission(java.lang.String, int, int)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        int i0, i1, $i2;
        android.app.IActivityManager $r3;
        java.lang.IllegalArgumentException $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("permission is null");

        throw $r4;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i2 = interfaceinvoke $r3.<android.app.IActivityManager: int checkPermission(java.lang.String,int,int)>(r1, i0, i1);

     label2:
        return $i2;

     label3:
        $r5 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkCallingPermission(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("permission is null");

        throw $r2;

     label1:
        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        if i0 == $i1 goto label2;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = virtualinvoke r0.<android.app.ContextImpl: int checkPermission(java.lang.String,int,int)>(r1, i0, $i2);

        return $i3;

     label2:
        return -1;
    }

    public int checkCallingOrSelfPermission(java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("permission is null");

        throw $r2;

     label1:
        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = virtualinvoke r0.<android.app.ContextImpl: int checkPermission(java.lang.String,int,int)>(r1, $i0, $i1);

        return $i2;
    }

    private void enforce(java.lang.String, int, boolean, int, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, r2, $r10, $r13, $r22;
        int i0, i1;
        boolean z0;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        r2 := @parameter4: java.lang.String;

        if i0 == 0 goto label5;

        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        if r2 == null goto label1;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r22 = "";

     label2:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        if z0 == 0 goto label3;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Neither user ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nor current process has ");

        $r10 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r13);

        throw $r3;

     label5:
        return;
    }

    public void enforcePermission(java.lang.String, int, int, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, r2;
        int i0, i1, $i2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $i2 = virtualinvoke r0.<android.app.ContextImpl: int checkPermission(java.lang.String,int,int)>(r1, i0, i1);

        specialinvoke r0.<android.app.ContextImpl: void enforce(java.lang.String,int,boolean,int,java.lang.String)>(r1, $i2, 0, i1, r2);

        return;
    }

    public void enforceCallingPermission(java.lang.String, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, r2;
        int $i0, $i1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int checkCallingPermission(java.lang.String)>(r1);

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<android.app.ContextImpl: void enforce(java.lang.String,int,boolean,int,java.lang.String)>(r1, $i0, 0, $i1, r2);

        return;
    }

    public void enforceCallingOrSelfPermission(java.lang.String, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, r2;
        int $i0, $i1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int checkCallingOrSelfPermission(java.lang.String)>(r1);

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<android.app.ContextImpl: void enforce(java.lang.String,int,boolean,int,java.lang.String)>(r1, $i0, 1, $i1, r2);

        return;
    }

    public void grantUriPermission(java.lang.String, android.net.Uri, int)
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        android.net.Uri r2, $r7;
        int i0, $i1;
        android.app.IActivityManager $r4;
        android.app.ActivityThread $r5;
        android.app.ActivityThread$ApplicationThread $r6;
        android.os.RemoteException $r8;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

     label1:
        $r4 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r5 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r7 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r2);

        $i1 = specialinvoke r0.<android.app.ContextImpl: int resolveUserId(android.net.Uri)>(r2);

        interfaceinvoke $r4.<android.app.IActivityManager: void grantUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int,int)>($r6, r1, $r7, i0, $i1);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void revokeUriPermission(android.net.Uri, int)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1, $r6;
        int i0, $i1;
        android.app.IActivityManager $r3;
        android.app.ActivityThread $r4;
        android.app.ActivityThread$ApplicationThread $r5;
        android.os.RemoteException $r7;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r4 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r5 = virtualinvoke $r4.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r6 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r1);

        $i1 = specialinvoke r0.<android.app.ContextImpl: int resolveUserId(android.net.Uri)>(r1);

        interfaceinvoke $r3.<android.app.IActivityManager: void revokeUriPermission(android.app.IApplicationThread,android.net.Uri,int,int)>($r5, $r6, i0, $i1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkUriPermission(android.net.Uri, int, int, int)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1, $r4;
        int i0, i1, i2, $i3, $i4;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r5;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r4 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r1);

        $i3 = specialinvoke r0.<android.app.ContextImpl: int resolveUserId(android.net.Uri)>(r1);

        $i4 = interfaceinvoke $r3.<android.app.IActivityManager: int checkUriPermission(android.net.Uri,int,int,int,int)>($r4, i0, i1, i2, $i3);

     label2:
        return $i4;

     label3:
        $r5 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private int resolveUserId(android.net.Uri)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        int $i0, $i1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        $i0 = virtualinvoke r0.<android.app.ContextImpl: int getUserId()>();

        $i1 = staticinvoke <android.content.ContentProvider: int getUserIdFromUri(android.net.Uri,int)>(r1, $i0);

        return $i1;
    }

    public int checkCallingUriPermission(android.net.Uri, int)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        int i0, i1, $i2, $i3, $i4;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Process: int myPid()>();

        if i1 == $i2 goto label1;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i4 = virtualinvoke r0.<android.app.ContextImpl: int checkUriPermission(android.net.Uri,int,int,int)>(r1, i1, $i3, i0);

        return $i4;

     label1:
        return -1;
    }

    public int checkCallingOrSelfUriPermission(android.net.Uri, int)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = virtualinvoke r0.<android.app.ContextImpl: int checkUriPermission(android.net.Uri,int,int,int)>(r1, $i1, $i2, i0);

        return $i3;
    }

    public int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        java.lang.String r2, r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        $i3 = i2 & 1;

        if $i3 == 0 goto label2;

        if r2 == null goto label1;

        $i7 = virtualinvoke r0.<android.app.ContextImpl: int checkPermission(java.lang.String,int,int)>(r2, i0, i1);

        if $i7 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i4 = i2 & 2;

        if $i4 == 0 goto label4;

        if r3 == null goto label3;

        $i6 = virtualinvoke r0.<android.app.ContextImpl: int checkPermission(java.lang.String,int,int)>(r3, i0, i1);

        if $i6 != 0 goto label4;

     label3:
        return 0;

     label4:
        if r1 == null goto label5;

        $i5 = virtualinvoke r0.<android.app.ContextImpl: int checkUriPermission(android.net.Uri,int,int,int)>(r1, i0, i1, i2);

        goto label6;

     label5:
        $i5 = -1;

     label6:
        return $i5;
    }

    private java.lang.String uriModeFlagToString(int)
    {
        android.app.ContextImpl r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.StringBuilder r1, $r2, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r7, $r9;

        r0 := @this: android.app.ContextImpl;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("read and ");

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("write and ");

     label2:
        $i3 = i0 & 64;

        if $i3 == 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("persistable and ");

     label3:
        $i4 = i0 & 128;

        if $i4 == 0 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prefix and ");

     label4:
        $i5 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i5 <= 5 goto label5;

        $i6 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i7 = $i6 - 5;

        virtualinvoke r1.<java.lang.StringBuilder: void setLength(int)>($i7);

        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown permission mode flags: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    private void enforceForUri(int, int, boolean, int, android.net.Uri, java.lang.String)
    {
        android.app.ContextImpl r0;
        int i0, i1, i2;
        boolean z0;
        android.net.Uri r1;
        java.lang.String r2, $r10, $r13, $r16, $r25;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;

        r0 := @this: android.app.ContextImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        i2 := @parameter3: int;

        r1 := @parameter4: android.net.Uri;

        r2 := @parameter5: java.lang.String;

        if i1 == 0 goto label5;

        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        if r2 == null goto label1;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r25 = "";

     label2:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        if z0 == 0 goto label3;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Neither user ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nor current process has ");

        $r10 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r13 = specialinvoke r0.<android.app.ContextImpl: java.lang.String uriModeFlagToString(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" permission on ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r16);

        throw $r3;

     label5:
        return;
    }

    public void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        int i0, i1, i2, $i3;
        java.lang.String r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: java.lang.String;

        $i3 = virtualinvoke r0.<android.app.ContextImpl: int checkUriPermission(android.net.Uri,int,int,int)>(r1, i0, i1, i2);

        specialinvoke r0.<android.app.ContextImpl: void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)>(i2, $i3, 0, i1, r1, r2);

        return;
    }

    public void enforceCallingUriPermission(android.net.Uri, int, java.lang.String)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        int i0, $i1, $i2;
        java.lang.String r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = virtualinvoke r0.<android.app.ContextImpl: int checkCallingUriPermission(android.net.Uri,int)>(r1, i0);

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<android.app.ContextImpl: void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)>(i0, $i1, 0, $i2, r1, r2);

        return;
    }

    public void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        int i0, $i1, $i2;
        java.lang.String r2;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $i1 = virtualinvoke r0.<android.app.ContextImpl: int checkCallingOrSelfUriPermission(android.net.Uri,int)>(r1, i0);

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<android.app.ContextImpl: void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)>(i0, $i1, 1, $i2, r1, r2);

        return;
    }

    public void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String)
    {
        android.app.ContextImpl r0;
        android.net.Uri r1;
        java.lang.String r2, r3, r4;
        int i0, i1, i2, $i3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r4 := @parameter6: java.lang.String;

        $i3 = virtualinvoke r0.<android.app.ContextImpl: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>(r1, r2, r3, i0, i1, i2);

        specialinvoke r0.<android.app.ContextImpl: void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)>(i2, $i3, 0, i1, r1, r4);

        return;
    }

    private void warnIfCallingFromSystemProcess()
    {
        android.app.ContextImpl r0;
        int $i0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: android.app.ContextImpl;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        if $i0 != 1000 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling a method in the system process without a qualified user: ");

        $r3 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(5);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ContextImpl", $r5);

     label1:
        return;
    }

    public android.content.Context createApplicationContext(android.content.pm.ApplicationInfo, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ContextImpl r0, r3, $r14;
        android.content.pm.ApplicationInfo r1;
        int i0, $i1, $i2, $i3, $i4;
        android.app.LoadedApk r2;
        boolean z0, $z1;
        android.content.res.Resources $r4, $r19;
        android.app.ActivityThread $r5, $r17;
        android.content.res.CompatibilityInfo $r6;
        android.content.pm.PackageManager$NameNotFoundException $r7;
        java.lang.StringBuilder $r8, $r9, $r11, $r13;
        java.lang.String $r10, $r12;
        android.os.UserHandle $r15;
        android.os.IBinder $r16;
        android.content.res.Configuration $r18;
        android.view.Display $r20;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        i0 := @parameter1: int;

        $r5 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r4 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        $r6 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $i1 = i0 | 1073741824;

        r2 = virtualinvoke $r5.<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,int)>(r1, $r6, $i1);

        if r2 == null goto label3;

        $i2 = i0 & 4;

        if $i2 != 4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        $r14 = new android.app.ContextImpl;

        $r17 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r16 = r0.<android.app.ContextImpl: android.os.IBinder mActivityToken>;

        $r15 = new android.os.UserHandle;

        $i3 = r1.<android.content.pm.ApplicationInfo: int uid>;

        $i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i3);

        specialinvoke $r15.<android.os.UserHandle: void <init>(int)>($i4);

        $r20 = r0.<android.app.ContextImpl: android.view.Display mDisplay>;

        $r18 = r0.<android.app.ContextImpl: android.content.res.Configuration mOverrideConfiguration>;

        specialinvoke $r14.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,android.os.IBinder,android.os.UserHandle,boolean,android.view.Display,android.content.res.Configuration)>(r0, $r17, r2, $r16, $r15, z0, $r20, $r18);

        r3 = $r14;

        $r19 = r3.<android.app.ContextImpl: android.content.res.Resources mResources>;

        if $r19 == null goto label3;

        return r3;

     label3:
        $r7 = new android.content.pm.PackageManager$NameNotFoundException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Application package ");

        $r10 = r1.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r12);

        throw $r7;
    }

    public android.content.Context createPackageContext(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ContextImpl r0;
        java.lang.String r1;
        int i0;
        android.os.UserHandle $r2, $r3;
        android.content.Context $r4;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        if $r2 == null goto label1;

        $r3 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        goto label2;

     label1:
        $r3 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

     label2:
        $r4 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>(r1, i0, $r3);

        return $r4;
    }

    public android.content.Context createPackageContextAsUser(java.lang.String, int, android.os.UserHandle) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ContextImpl r0, r4, $r5, $r21;
        java.lang.String r1, $r18;
        int i0, $i1, $i2, $i3;
        android.os.UserHandle r2;
        boolean z0, $z1, $z2, $z3;
        android.app.LoadedApk r3, $r9;
        android.content.res.Configuration $r6, $r20;
        android.view.Display $r7, $r23;
        android.os.IBinder $r8, $r22;
        android.app.ActivityThread $r10, $r11, $r24;
        android.content.res.Resources $r12, $r25;
        android.content.res.CompatibilityInfo $r13;
        java.lang.StringBuilder $r14, $r16, $r17, $r19;
        android.content.pm.PackageManager$NameNotFoundException $r15;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.UserHandle;

        $i1 = i0 & 4;

        if $i1 != 4 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("system");

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("android");

        if $z2 == 0 goto label4;

     label3:
        $r5 = new android.app.ContextImpl;

        $r10 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r9 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r8 = r0.<android.app.ContextImpl: android.os.IBinder mActivityToken>;

        $r7 = r0.<android.app.ContextImpl: android.view.Display mDisplay>;

        $r6 = r0.<android.app.ContextImpl: android.content.res.Configuration mOverrideConfiguration>;

        specialinvoke $r5.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,android.os.IBinder,android.os.UserHandle,boolean,android.view.Display,android.content.res.Configuration)>(r0, $r10, $r9, $r8, r2, z0, $r7, $r6);

        return $r5;

     label4:
        $r11 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r12 = r0.<android.app.ContextImpl: android.content.res.Resources mResources>;

        $r13 = virtualinvoke $r12.<android.content.res.Resources: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $i2 = i0 | 1073741824;

        $i3 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        r3 = virtualinvoke $r11.<android.app.ActivityThread: android.app.LoadedApk getPackageInfo(java.lang.String,android.content.res.CompatibilityInfo,int,int)>(r1, $r13, $i2, $i3);

        if r3 == null goto label5;

        $r21 = new android.app.ContextImpl;

        $r24 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r22 = r0.<android.app.ContextImpl: android.os.IBinder mActivityToken>;

        $r23 = r0.<android.app.ContextImpl: android.view.Display mDisplay>;

        $r20 = r0.<android.app.ContextImpl: android.content.res.Configuration mOverrideConfiguration>;

        specialinvoke $r21.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,android.os.IBinder,android.os.UserHandle,boolean,android.view.Display,android.content.res.Configuration)>(r0, $r24, r3, $r22, r2, z0, $r23, $r20);

        r4 = $r21;

        $r25 = r4.<android.app.ContextImpl: android.content.res.Resources mResources>;

        if $r25 == null goto label5;

        return r4;

     label5:
        $r15 = new android.content.pm.PackageManager$NameNotFoundException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Application package ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r18);

        throw $r15;
    }

    public android.content.Context createConfigurationContext(android.content.res.Configuration)
    {
        android.app.ContextImpl r0, $r2;
        android.content.res.Configuration r1;
        android.view.Display $r3;
        boolean $z0;
        android.os.UserHandle $r4;
        android.os.IBinder $r5;
        android.app.LoadedApk $r6;
        android.app.ActivityThread $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.res.Configuration;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("overrideConfiguration must not be null");

        throw $r8;

     label1:
        $r2 = new android.app.ContextImpl;

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r5 = r0.<android.app.ContextImpl: android.os.IBinder mActivityToken>;

        $r4 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $z0 = r0.<android.app.ContextImpl: boolean mRestricted>;

        $r3 = r0.<android.app.ContextImpl: android.view.Display mDisplay>;

        specialinvoke $r2.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,android.os.IBinder,android.os.UserHandle,boolean,android.view.Display,android.content.res.Configuration)>(r0, $r7, $r6, $r5, $r4, $z0, $r3, r1);

        return $r2;
    }

    public android.content.Context createDisplayContext(android.view.Display)
    {
        android.app.ContextImpl r0, $r2;
        android.view.Display r1;
        android.content.res.Configuration $r3;
        boolean $z0;
        android.os.UserHandle $r4;
        android.os.IBinder $r5;
        android.app.LoadedApk $r6;
        android.app.ActivityThread $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.view.Display;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("display must not be null");

        throw $r8;

     label1:
        $r2 = new android.app.ContextImpl;

        $r7 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        $r6 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r5 = r0.<android.app.ContextImpl: android.os.IBinder mActivityToken>;

        $r4 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $z0 = r0.<android.app.ContextImpl: boolean mRestricted>;

        $r3 = r0.<android.app.ContextImpl: android.content.res.Configuration mOverrideConfiguration>;

        specialinvoke $r2.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,android.os.IBinder,android.os.UserHandle,boolean,android.view.Display,android.content.res.Configuration)>(r0, $r7, $r6, $r5, $r4, $z0, r1, $r3);

        return $r2;
    }

    private int getDisplayId()
    {
        android.app.ContextImpl r0;
        android.view.Display $r1, $r2;
        int $i0;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.view.Display mDisplay>;

        if $r1 == null goto label1;

        $r2 = r0.<android.app.ContextImpl: android.view.Display mDisplay>;

        $i0 = virtualinvoke $r2.<android.view.Display: int getDisplayId()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public boolean isRestricted()
    {
        android.app.ContextImpl r0;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        $z0 = r0.<android.app.ContextImpl: boolean mRestricted>;

        return $z0;
    }

    public android.view.DisplayAdjustments getDisplayAdjustments(int)
    {
        android.app.ContextImpl r0;
        int i0;
        android.view.DisplayAdjustments $r1;

        r0 := @this: android.app.ContextImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.app.ContextImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        return $r1;
    }

    private java.io.File getDataDirFile()
    {
        android.app.ContextImpl r0;
        android.app.LoadedApk $r1, $r3;
        java.lang.RuntimeException $r2;
        java.io.File $r4;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        if $r1 == null goto label1;

        $r3 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r4 = virtualinvoke $r3.<android.app.LoadedApk: java.io.File getDataDirFile()>();

        return $r4;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r2;
    }

    public java.io.File getDir(java.lang.String, int)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, $r7, r8;
        int i0;
        java.io.File r2, $r6;
        java.lang.StringBuilder $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("app_");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = specialinvoke r0.<android.app.ContextImpl: java.io.File getDataDirFile()>();

        r2 = specialinvoke r0.<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>($r6, r8);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke r2.<java.io.File: boolean mkdir()>();

        $r7 = virtualinvoke r2.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.app.ContextImpl: void setFilePermissionsFromMode(java.lang.String,int,int)>($r7, i0, 505);

     label1:
        return r2;
    }

    public int getUserId()
    {
        android.app.ContextImpl r0;
        android.os.UserHandle $r1;
        int $i0;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.os.UserHandle mUser>;

        $i0 = virtualinvoke $r1.<android.os.UserHandle: int getIdentifier()>();

        return $i0;
    }

    static android.app.ContextImpl createSystemContext(android.app.ActivityThread)
    {
        android.app.ActivityThread r0;
        android.app.LoadedApk r1, $r3;
        android.app.ContextImpl r2, $r4;
        android.app.ResourcesManager $r5, $r8;
        android.content.res.Resources $r6;
        android.content.res.Configuration $r7;
        android.util.DisplayMetrics $r9;

        r0 := @parameter0: android.app.ActivityThread;

        $r3 = new android.app.LoadedApk;

        specialinvoke $r3.<android.app.LoadedApk: void <init>(android.app.ActivityThread)>(r0);

        r1 = $r3;

        $r4 = new android.app.ContextImpl;

        specialinvoke $r4.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,android.os.IBinder,android.os.UserHandle,boolean,android.view.Display,android.content.res.Configuration)>(null, r0, r1, null, null, 0, null, null);

        r2 = $r4;

        $r6 = r2.<android.app.ContextImpl: android.content.res.Resources mResources>;

        $r5 = r2.<android.app.ContextImpl: android.app.ResourcesManager mResourcesManager>;

        $r7 = virtualinvoke $r5.<android.app.ResourcesManager: android.content.res.Configuration getConfiguration()>();

        $r8 = r2.<android.app.ContextImpl: android.app.ResourcesManager mResourcesManager>;

        $r9 = virtualinvoke $r8.<android.app.ResourcesManager: android.util.DisplayMetrics getDisplayMetricsLocked(int)>(0);

        virtualinvoke $r6.<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>($r7, $r9);

        return r2;
    }

    static android.app.ContextImpl createAppContext(android.app.ActivityThread, android.app.LoadedApk)
    {
        android.app.ActivityThread r0;
        android.app.LoadedApk r1;
        android.app.ContextImpl $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: android.app.ActivityThread;

        r1 := @parameter1: android.app.LoadedApk;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("packageInfo");

        throw $r3;

     label1:
        $r2 = new android.app.ContextImpl;

        specialinvoke $r2.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,android.os.IBinder,android.os.UserHandle,boolean,android.view.Display,android.content.res.Configuration)>(null, r0, r1, null, null, 0, null, null);

        return $r2;
    }

    static android.app.ContextImpl createActivityContext(android.app.ActivityThread, android.app.LoadedApk, android.os.IBinder)
    {
        android.app.ActivityThread r0;
        android.app.LoadedApk r1;
        android.os.IBinder r2;
        android.app.ContextImpl $r3;
        java.lang.IllegalArgumentException $r4, $r5;

        r0 := @parameter0: android.app.ActivityThread;

        r1 := @parameter1: android.app.LoadedApk;

        r2 := @parameter2: android.os.IBinder;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("packageInfo");

        throw $r5;

     label1:
        if r2 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("activityInfo");

        throw $r4;

     label2:
        $r3 = new android.app.ContextImpl;

        specialinvoke $r3.<android.app.ContextImpl: void <init>(android.app.ContextImpl,android.app.ActivityThread,android.app.LoadedApk,android.os.IBinder,android.os.UserHandle,boolean,android.view.Display,android.content.res.Configuration)>(null, r0, r1, r2, null, 0, null, null);

        return $r3;
    }

    private void <init>(android.app.ContextImpl, android.app.ActivityThread, android.app.LoadedApk, android.os.IBinder, android.os.UserHandle, boolean, android.view.Display, android.content.res.Configuration)
    {
        android.app.ContextImpl r0, r1;
        android.app.ActivityThread r2;
        android.app.LoadedApk r3;
        android.os.IBinder r4;
        android.os.UserHandle r5;
        boolean z0;
        android.view.Display r6;
        android.content.res.Configuration r7;
        int i0, $i1, $i2, $i3;
        android.content.res.CompatibilityInfo r8, $r28;
        android.content.res.Resources r9;
        android.content.pm.ApplicationInfo r10, $r25;
        android.view.DisplayAdjustments $r11, $r15, $r16, $r30;
        java.lang.Object $r12;
        java.util.ArrayList $r13;
        android.app.ResourcesManager $r14, $r22;
        java.lang.String $r17, $r19, $r20, $r21, $r23, $r26;
        android.app.ContextImpl$ApplicationContentResolver $r18;
        java.lang.String[] $r24, $r27, $r29;
        float $f0, $f1;
        byte $b4;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.app.ContextImpl;

        r2 := @parameter1: android.app.ActivityThread;

        r3 := @parameter2: android.app.LoadedApk;

        r4 := @parameter3: android.os.IBinder;

        r5 := @parameter4: android.os.UserHandle;

        z0 := @parameter5: boolean;

        r6 := @parameter6: android.view.Display;

        r7 := @parameter7: android.content.res.Configuration;

        specialinvoke r0.<android.content.Context: void <init>()>();

        $r11 = new android.view.DisplayAdjustments;

        specialinvoke $r11.<android.view.DisplayAdjustments: void <init>()>();

        r0.<android.app.ContextImpl: android.view.DisplayAdjustments mDisplayAdjustments> = $r11;

        r0.<android.app.ContextImpl: int mThemeResource> = 0;

        r0.<android.app.ContextImpl: android.content.res.Resources$Theme mTheme> = null;

        r0.<android.app.ContextImpl: android.content.Context mReceiverRestrictedContext> = null;

        $r12 = new java.lang.Object;

        specialinvoke $r12.<java.lang.Object: void <init>()>();

        r0.<android.app.ContextImpl: java.lang.Object mSync> = $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<android.app.ContextImpl: java.util.ArrayList mServiceCache> = $r13;

        r0.<android.app.ContextImpl: android.content.Context mOuterContext> = r0;

        r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread> = r2;

        r0.<android.app.ContextImpl: android.os.IBinder mActivityToken> = r4;

        r0.<android.app.ContextImpl: boolean mRestricted> = z0;

        if r5 != null goto label1;

        r5 = staticinvoke <android.os.Process: android.os.UserHandle myUserHandle()>();

     label1:
        r0.<android.app.ContextImpl: android.os.UserHandle mUser> = r5;

        r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo> = r3;

        $r14 = staticinvoke <android.app.ResourcesManager: android.app.ResourcesManager getInstance()>();

        r0.<android.app.ContextImpl: android.app.ResourcesManager mResourcesManager> = $r14;

        r0.<android.app.ContextImpl: android.view.Display mDisplay> = r6;

        r0.<android.app.ContextImpl: android.content.res.Configuration mOverrideConfiguration> = r7;

        i0 = specialinvoke r0.<android.app.ContextImpl: int getDisplayId()>();

        r8 = null;

        if r1 == null goto label2;

        $r30 = virtualinvoke r1.<android.app.ContextImpl: android.view.DisplayAdjustments getDisplayAdjustments(int)>(i0);

        r8 = virtualinvoke $r30.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

     label2:
        if r8 != null goto label3;

        if i0 != 0 goto label3;

        r8 = virtualinvoke r3.<android.app.LoadedApk: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

     label3:
        $r16 = r0.<android.app.ContextImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        virtualinvoke $r16.<android.view.DisplayAdjustments: void setCompatibilityInfo(android.content.res.CompatibilityInfo)>(r8);

        $r15 = r0.<android.app.ContextImpl: android.view.DisplayAdjustments mDisplayAdjustments>;

        virtualinvoke $r15.<android.view.DisplayAdjustments: void setActivityToken(android.os.IBinder)>(r4);

        r9 = virtualinvoke r3.<android.app.LoadedApk: android.content.res.Resources getResources(android.app.ActivityThread)>(r2);

        if r9 == null goto label5;

        if r4 != null goto label4;

        if i0 != 0 goto label4;

        if r7 != null goto label4;

        if r8 == null goto label5;

        $f0 = r8.<android.content.res.CompatibilityInfo: float applicationScale>;

        $r28 = virtualinvoke r9.<android.content.res.Resources: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $f1 = $r28.<android.content.res.CompatibilityInfo: float applicationScale>;

        $b4 = $f0 cmpl $f1;

        if $b4 == 0 goto label5;

     label4:
        $r22 = r0.<android.app.ContextImpl: android.app.ResourcesManager mResourcesManager>;

        $r26 = virtualinvoke r3.<android.app.LoadedApk: java.lang.String getResDir()>();

        $r27 = virtualinvoke r3.<android.app.LoadedApk: java.lang.String[] getSplitResDirs()>();

        $r24 = virtualinvoke r3.<android.app.LoadedApk: java.lang.String[] getOverlayDirs()>();

        $r25 = virtualinvoke r3.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $r29 = $r25.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        r9 = virtualinvoke $r22.<android.app.ResourcesManager: android.content.res.Resources getTopLevelResources(java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],int,android.content.res.Configuration,android.content.res.CompatibilityInfo,android.os.IBinder)>($r26, $r27, $r24, $r29, i0, r7, r8, r4);

     label5:
        r0.<android.app.ContextImpl: android.content.res.Resources mResources> = r9;

        if r1 == null goto label6;

        $r20 = r1.<android.app.ContextImpl: java.lang.String mBasePackageName>;

        r0.<android.app.ContextImpl: java.lang.String mBasePackageName> = $r20;

        $r23 = r1.<android.app.ContextImpl: java.lang.String mOpPackageName>;

        r0.<android.app.ContextImpl: java.lang.String mOpPackageName> = $r23;

        goto label8;

     label6:
        $r17 = r3.<android.app.LoadedApk: java.lang.String mPackageName>;

        r0.<android.app.ContextImpl: java.lang.String mBasePackageName> = $r17;

        r10 = virtualinvoke r3.<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i1 = r10.<android.content.pm.ApplicationInfo: int uid>;

        if $i1 != 1000 goto label7;

        $i3 = r10.<android.content.pm.ApplicationInfo: int uid>;

        $i2 = staticinvoke <android.os.Process: int myUid()>();

        if $i3 == $i2 goto label7;

        $r21 = staticinvoke <android.app.ActivityThread: java.lang.String currentPackageName()>();

        r0.<android.app.ContextImpl: java.lang.String mOpPackageName> = $r21;

        goto label8;

     label7:
        $r19 = r0.<android.app.ContextImpl: java.lang.String mBasePackageName>;

        r0.<android.app.ContextImpl: java.lang.String mOpPackageName> = $r19;

     label8:
        $r18 = new android.app.ContextImpl$ApplicationContentResolver;

        specialinvoke $r18.<android.app.ContextImpl$ApplicationContentResolver: void <init>(android.content.Context,android.app.ActivityThread,android.os.UserHandle)>(r0, r2, r5);

        r0.<android.app.ContextImpl: android.app.ContextImpl$ApplicationContentResolver mContentResolver> = $r18;

        return;
    }

    void installSystemApplicationInfo(android.content.pm.ApplicationInfo, java.lang.ClassLoader)
    {
        android.app.ContextImpl r0;
        android.content.pm.ApplicationInfo r1;
        java.lang.ClassLoader r2;
        android.app.LoadedApk $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        r2 := @parameter1: java.lang.ClassLoader;

        $r3 = r0.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        virtualinvoke $r3.<android.app.LoadedApk: void installSystemApplicationInfo(android.content.pm.ApplicationInfo,java.lang.ClassLoader)>(r1, r2);

        return;
    }

    final void scheduleFinalCleanup(java.lang.String, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, r2;
        android.app.ActivityThread $r3;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.app.ContextImpl: android.app.ActivityThread mMainThread>;

        virtualinvoke $r3.<android.app.ActivityThread: void scheduleContextCleanup(android.app.ContextImpl,java.lang.String,java.lang.String)>(r0, r1, r2);

        return;
    }

    final void performFinalCleanup(java.lang.String, java.lang.String)
    {
        android.content.Context $r0;
        android.app.ContextImpl r1;
        java.lang.String r2, r3;
        android.app.LoadedApk $r4;

        r1 := @this: android.app.ContextImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r4 = r1.<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>;

        $r0 = virtualinvoke r1.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        virtualinvoke $r4.<android.app.LoadedApk: void removeContextRegistrations(android.content.Context,java.lang.String,java.lang.String)>($r0, r2, r3);

        return;
    }

    final android.content.Context getReceiverRestrictedContext()
    {
        android.app.ContextImpl r0;
        android.content.Context $r1, $r3, $r4;
        android.app.ReceiverRestrictedContext $r2;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.content.Context mReceiverRestrictedContext>;

        if $r1 == null goto label1;

        $r4 = r0.<android.app.ContextImpl: android.content.Context mReceiverRestrictedContext>;

        return $r4;

     label1:
        $r2 = new android.app.ReceiverRestrictedContext;

        $r3 = virtualinvoke r0.<android.app.ContextImpl: android.content.Context getOuterContext()>();

        specialinvoke $r2.<android.app.ReceiverRestrictedContext: void <init>(android.content.Context)>($r3);

        r0.<android.app.ContextImpl: android.content.Context mReceiverRestrictedContext> = $r2;

        return $r2;
    }

    final void setOuterContext(android.content.Context)
    {
        android.app.ContextImpl r0;
        android.content.Context r1;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: android.content.Context;

        r0.<android.app.ContextImpl: android.content.Context mOuterContext> = r1;

        return;
    }

    final android.content.Context getOuterContext()
    {
        android.app.ContextImpl r0;
        android.content.Context $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.content.Context mOuterContext>;

        return $r1;
    }

    final android.os.IBinder getActivityToken()
    {
        android.app.ContextImpl r0;
        android.os.IBinder $r1;

        r0 := @this: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.os.IBinder mActivityToken>;

        return $r1;
    }

    static void setFilePermissionsFromMode(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1, i2, $i3, $i4;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = 432 | i1;

        $i3 = i0 & 1;

        if $i3 == 0 goto label1;

        i2 = i2 | 4;

     label1:
        $i4 = i0 & 2;

        if $i4 == 0 goto label2;

        i2 = i2 | 2;

     label2:
        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>(r0, i2, -1, -1);

        return;
    }

    private java.io.File validateFilePath(java.lang.String, boolean)
    {
        android.app.ContextImpl r0;
        java.lang.String r1, r4, $r5, r8;
        boolean z0, $z1, $z2;
        java.io.File r2, r3, $r6, $r7;
        char $c0, $c1, $c3, $c5;
        int $i4, $i6;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $c1 = <java.io.File: char separatorChar>;

        if $c0 != $c1 goto label1;

        $c3 = <java.io.File: char separatorChar>;

        $i4 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>($c3);

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r4);

        r2 = $r6;

        $c5 = <java.io.File: char separatorChar>;

        $i6 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>($c5);

        r8 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i6);

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, r8);

        r3 = $r7;

        goto label2;

     label1:
        r2 = specialinvoke r0.<android.app.ContextImpl: java.io.File getDatabasesDir()>();

        r3 = specialinvoke r0.<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>(r2, r1);

     label2:
        if z0 == 0 goto label3;

        $z1 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r2.<java.io.File: boolean mkdir()>();

        if $z2 == 0 goto label3;

        $r5 = virtualinvoke r2.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r5, 505, -1, -1);

     label3:
        return r3;
    }

    private java.io.File makeFilename(java.io.File, java.lang.String)
    {
        android.app.ContextImpl r0;
        java.io.File r1, $r9;
        java.lang.String r2, $r8;
        char $c0;
        int $i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.lang.String;

        $c0 = <java.io.File: char separatorChar>;

        $i1 = virtualinvoke r2.<java.lang.String: int indexOf(int)>($c0);

        if $i1 >= 0 goto label1;

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r2);

        return $r9;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contains a path separator");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r3;
    }

    private java.io.File[] ensureDirsExistOrFilter(java.io.File[])
    {
        android.app.ContextImpl r0;
        java.io.File[] r1, r2;
        int i0, i1, $i2, $i3;
        java.io.File r3;
        android.os.storage.IMountService r4;
        boolean $z0, $z1, $z2;
        android.os.IBinder $r6;
        java.lang.String $r7, $r8, $r12;
        java.lang.StringBuilder $r9, $r10, $r11;
        android.os.RemoteException $r13;

        r0 := @this: android.app.ContextImpl;

        r1 := @parameter0: java.io.File[];

        $i2 = lengthof r1;

        r2 = newarray (java.io.File)[$i2];

        i0 = 0;

     label1:
        $i3 = lengthof r1;

        if i0 >= $i3 goto label7;

        r3 = r1[i0];

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label6;

        $z1 = virtualinvoke r3.<java.io.File: boolean mkdirs()>();

        if $z1 != 0 goto label6;

        $z2 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label6;

        $r6 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        r4 = staticinvoke <android.os.storage.IMountService$Stub: android.os.storage.IMountService asInterface(android.os.IBinder)>($r6);

        i1 = -1;

     label2:
        $r7 = virtualinvoke r0.<android.app.ContextImpl: java.lang.String getPackageName()>();

        $r8 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        i1 = interfaceinvoke r4.<android.os.storage.IMountService: int mkdirs(java.lang.String,java.lang.String)>($r7, $r8);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

     label5:
        if i1 == 0 goto label6;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to ensure directory: ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ContextImpl", $r12);

        r3 = null;

     label6:
        r2[i0] = r3;

        i0 = i0 + 1;

        goto label1;

     label7:
        return r2;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    static int access$000()
    {
        int $i0;

        $i0 = <android.app.ContextImpl: int sNextPerContextServiceCacheIndex>;

        return $i0;
    }

    static android.view.Display access$100(android.app.ContextImpl)
    {
        android.app.ContextImpl r0;
        android.view.Display $r1;

        r0 := @parameter0: android.app.ContextImpl;

        $r1 = r0.<android.app.ContextImpl: android.view.Display mDisplay>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.HashMap $r1;
        android.app.ContextImpl$1 $r2;
        android.app.ContextImpl$2 $r3;
        android.app.ContextImpl$3 $r4;
        android.app.ContextImpl$4 $r5;
        android.app.ContextImpl$5 $r6;
        android.app.ContextImpl$6 $r7;
        android.app.ContextImpl$7 $r8;
        android.app.ContextImpl$8 $r9;
        android.app.ContextImpl$9 $r10;
        android.app.ContextImpl$10 $r11;
        android.app.ContextImpl$11 $r12;
        android.app.ContextImpl$12 $r13;
        android.app.ContextImpl$13 $r14;
        android.app.ContextImpl$14 $r15;
        android.app.ContextImpl$15 $r16;
        android.app.ContextImpl$16 $r17;
        android.app.ContextImpl$18 $r18;
        android.app.ContextImpl$17 $r19;
        android.app.ContextImpl$20 $r20;
        android.app.ContextImpl$19 $r21;
        android.app.ContextImpl$22 $r22;
        android.app.ContextImpl$21 $r23;
        android.app.ContextImpl$24 $r24;
        android.app.ContextImpl$23 $r25;
        android.app.ContextImpl$26 $r26;
        android.app.ContextImpl$25 $r27;
        android.app.ContextImpl$28 $r28;
        android.app.ContextImpl$27 $r29;
        android.app.ContextImpl$30 $r30;
        android.app.ContextImpl$29 $r31;
        android.app.ContextImpl$32 $r32;
        android.app.ContextImpl$31 $r33;
        android.app.ContextImpl$35 $r34;
        android.app.ContextImpl$36 $r35;
        android.app.ContextImpl$33 $r36;
        android.app.ContextImpl$34 $r37;
        android.app.ContextImpl$39 $r38;
        android.app.ContextImpl$ServiceFetcher $r39;
        android.app.ContextImpl$37 $r40;
        android.app.ContextImpl$38 $r41;
        android.app.ContextImpl$42 $r42;
        android.app.ContextImpl$43 $r43;
        android.app.ContextImpl$40 $r44;
        android.app.ContextImpl$41 $r45;
        android.app.ContextImpl$46 $r46;
        android.app.ContextImpl$47 $r47;
        android.app.ContextImpl$44 $r48;
        android.app.ContextImpl$45 $r49;
        android.app.ContextImpl$51 $r50;
        android.app.ContextImpl$50 $r51;
        android.app.ContextImpl$49 $r52;
        android.app.ContextImpl$48 $r53;
        android.app.ContextImpl$55 $r54;
        android.app.ContextImpl$54 $r55;
        android.app.ContextImpl$53 $r56;
        android.app.ContextImpl$52 $r57;
        android.app.ContextImpl$59 $r58;
        android.app.ContextImpl$58 $r59;
        android.app.ContextImpl$57 $r60;
        android.app.ContextImpl$56 $r61;
        android.app.ContextImpl$62 $r62;
        android.app.ContextImpl$61 $r63;
        android.app.ContextImpl$60 $r64;

        <android.app.ContextImpl: boolean DEBUG> = 0;

        <android.app.ContextImpl: java.lang.String TAG> = "ContextImpl";

        $r0 = newarray (java.lang.String)[0];

        <android.app.ContextImpl: java.lang.String[] EMPTY_FILE_LIST> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <android.app.ContextImpl: java.util.HashMap SYSTEM_SERVICE_MAP> = $r1;

        <android.app.ContextImpl: int sNextPerContextServiceCacheIndex> = 0;

        $r2 = new android.app.ContextImpl$1;

        specialinvoke $r2.<android.app.ContextImpl$1: void <init>()>();

        <android.app.ContextImpl: android.app.ContextImpl$ServiceFetcher WALLPAPER_FETCHER> = $r2;

        $r3 = new android.app.ContextImpl$2;

        specialinvoke $r3.<android.app.ContextImpl$2: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("accessibility", $r3);

        $r4 = new android.app.ContextImpl$3;

        specialinvoke $r4.<android.app.ContextImpl$3: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("captioning", $r4);

        $r5 = new android.app.ContextImpl$4;

        specialinvoke $r5.<android.app.ContextImpl$4: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("account", $r5);

        $r6 = new android.app.ContextImpl$5;

        specialinvoke $r6.<android.app.ContextImpl$5: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("activity", $r6);

        $r7 = new android.app.ContextImpl$6;

        specialinvoke $r7.<android.app.ContextImpl$6: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("alarm", $r7);

        $r8 = new android.app.ContextImpl$7;

        specialinvoke $r8.<android.app.ContextImpl$7: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("audio", $r8);

        $r9 = new android.app.ContextImpl$8;

        specialinvoke $r9.<android.app.ContextImpl$8: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("media_router", $r9);

        $r10 = new android.app.ContextImpl$9;

        specialinvoke $r10.<android.app.ContextImpl$9: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("bluetooth", $r10);

        $r11 = new android.app.ContextImpl$10;

        specialinvoke $r11.<android.app.ContextImpl$10: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("hdmi_control", $r11);

        $r12 = new android.app.ContextImpl$11;

        specialinvoke $r12.<android.app.ContextImpl$11: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("clipboard", $r12);

        $r13 = new android.app.ContextImpl$12;

        specialinvoke $r13.<android.app.ContextImpl$12: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("connectivity", $r13);

        $r14 = new android.app.ContextImpl$13;

        specialinvoke $r14.<android.app.ContextImpl$13: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("country_detector", $r14);

        $r15 = new android.app.ContextImpl$14;

        specialinvoke $r15.<android.app.ContextImpl$14: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("device_policy", $r15);

        $r16 = new android.app.ContextImpl$15;

        specialinvoke $r16.<android.app.ContextImpl$15: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("download", $r16);

        $r17 = new android.app.ContextImpl$16;

        specialinvoke $r17.<android.app.ContextImpl$16: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("batterymanager", $r17);

        $r19 = new android.app.ContextImpl$17;

        specialinvoke $r19.<android.app.ContextImpl$17: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("nfc", $r19);

        $r18 = new android.app.ContextImpl$18;

        specialinvoke $r18.<android.app.ContextImpl$18: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("dropbox", $r18);

        $r21 = new android.app.ContextImpl$19;

        specialinvoke $r21.<android.app.ContextImpl$19: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("input", $r21);

        $r20 = new android.app.ContextImpl$20;

        specialinvoke $r20.<android.app.ContextImpl$20: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("display", $r20);

        $r23 = new android.app.ContextImpl$21;

        specialinvoke $r23.<android.app.ContextImpl$21: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("input_method", $r23);

        $r22 = new android.app.ContextImpl$22;

        specialinvoke $r22.<android.app.ContextImpl$22: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("textservices", $r22);

        $r25 = new android.app.ContextImpl$23;

        specialinvoke $r25.<android.app.ContextImpl$23: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("keyguard", $r25);

        $r24 = new android.app.ContextImpl$24;

        specialinvoke $r24.<android.app.ContextImpl$24: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("layout_inflater", $r24);

        $r27 = new android.app.ContextImpl$25;

        specialinvoke $r27.<android.app.ContextImpl$25: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("location", $r27);

        $r26 = new android.app.ContextImpl$26;

        specialinvoke $r26.<android.app.ContextImpl$26: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("netpolicy", $r26);

        $r29 = new android.app.ContextImpl$27;

        specialinvoke $r29.<android.app.ContextImpl$27: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("notification", $r29);

        $r28 = new android.app.ContextImpl$28;

        specialinvoke $r28.<android.app.ContextImpl$28: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("servicediscovery", $r28);

        $r31 = new android.app.ContextImpl$29;

        specialinvoke $r31.<android.app.ContextImpl$29: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("power", $r31);

        $r30 = new android.app.ContextImpl$30;

        specialinvoke $r30.<android.app.ContextImpl$30: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("search", $r30);

        $r33 = new android.app.ContextImpl$31;

        specialinvoke $r33.<android.app.ContextImpl$31: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("sensor", $r33);

        $r32 = new android.app.ContextImpl$32;

        specialinvoke $r32.<android.app.ContextImpl$32: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("statusbar", $r32);

        $r36 = new android.app.ContextImpl$33;

        specialinvoke $r36.<android.app.ContextImpl$33: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("storage", $r36);

        $r37 = new android.app.ContextImpl$34;

        specialinvoke $r37.<android.app.ContextImpl$34: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("phone", $r37);

        $r34 = new android.app.ContextImpl$35;

        specialinvoke $r34.<android.app.ContextImpl$35: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("telecom", $r34);

        $r35 = new android.app.ContextImpl$36;

        specialinvoke $r35.<android.app.ContextImpl$36: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("uimode", $r35);

        $r40 = new android.app.ContextImpl$37;

        specialinvoke $r40.<android.app.ContextImpl$37: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("usb", $r40);

        $r41 = new android.app.ContextImpl$38;

        specialinvoke $r41.<android.app.ContextImpl$38: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("serial", $r41);

        $r38 = new android.app.ContextImpl$39;

        specialinvoke $r38.<android.app.ContextImpl$39: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("vibrator", $r38);

        $r39 = <android.app.ContextImpl: android.app.ContextImpl$ServiceFetcher WALLPAPER_FETCHER>;

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("wallpaper", $r39);

        $r44 = new android.app.ContextImpl$40;

        specialinvoke $r44.<android.app.ContextImpl$40: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("wifi", $r44);

        $r45 = new android.app.ContextImpl$41;

        specialinvoke $r45.<android.app.ContextImpl$41: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("wifip2p", $r45);

        $r42 = new android.app.ContextImpl$42;

        specialinvoke $r42.<android.app.ContextImpl$42: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("wifiscanner", $r42);

        $r43 = new android.app.ContextImpl$43;

        specialinvoke $r43.<android.app.ContextImpl$43: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("rttmanager", $r43);

        $r48 = new android.app.ContextImpl$44;

        specialinvoke $r48.<android.app.ContextImpl$44: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("ethernet", $r48);

        $r49 = new android.app.ContextImpl$45;

        specialinvoke $r49.<android.app.ContextImpl$45: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("window", $r49);

        $r46 = new android.app.ContextImpl$46;

        specialinvoke $r46.<android.app.ContextImpl$46: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("user", $r46);

        $r47 = new android.app.ContextImpl$47;

        specialinvoke $r47.<android.app.ContextImpl$47: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("appops", $r47);

        $r53 = new android.app.ContextImpl$48;

        specialinvoke $r53.<android.app.ContextImpl$48: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("camera", $r53);

        $r52 = new android.app.ContextImpl$49;

        specialinvoke $r52.<android.app.ContextImpl$49: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("launcherapps", $r52);

        $r51 = new android.app.ContextImpl$50;

        specialinvoke $r51.<android.app.ContextImpl$50: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("restrictions", $r51);

        $r50 = new android.app.ContextImpl$51;

        specialinvoke $r50.<android.app.ContextImpl$51: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("print", $r50);

        $r57 = new android.app.ContextImpl$52;

        specialinvoke $r57.<android.app.ContextImpl$52: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("consumer_ir", $r57);

        $r56 = new android.app.ContextImpl$53;

        specialinvoke $r56.<android.app.ContextImpl$53: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("media_session", $r56);

        $r55 = new android.app.ContextImpl$54;

        specialinvoke $r55.<android.app.ContextImpl$54: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("trust", $r55);

        $r54 = new android.app.ContextImpl$55;

        specialinvoke $r54.<android.app.ContextImpl$55: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("fingerprint", $r54);

        $r61 = new android.app.ContextImpl$56;

        specialinvoke $r61.<android.app.ContextImpl$56: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("tv_input", $r61);

        $r60 = new android.app.ContextImpl$57;

        specialinvoke $r60.<android.app.ContextImpl$57: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("network_score", $r60);

        $r59 = new android.app.ContextImpl$58;

        specialinvoke $r59.<android.app.ContextImpl$58: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("usagestats", $r59);

        $r58 = new android.app.ContextImpl$59;

        specialinvoke $r58.<android.app.ContextImpl$59: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("jobscheduler", $r58);

        $r64 = new android.app.ContextImpl$60;

        specialinvoke $r64.<android.app.ContextImpl$60: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("persistent_data_block", $r64);

        $r63 = new android.app.ContextImpl$61;

        specialinvoke $r63.<android.app.ContextImpl$61: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("media_projection", $r63);

        $r62 = new android.app.ContextImpl$62;

        specialinvoke $r62.<android.app.ContextImpl$62: void <init>()>();

        staticinvoke <android.app.ContextImpl: void registerService(java.lang.String,android.app.ContextImpl$ServiceFetcher)>("appwidget", $r62);

        return;
    }
}
