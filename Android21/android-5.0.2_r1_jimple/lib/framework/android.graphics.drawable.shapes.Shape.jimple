public abstract class android.graphics.drawable.shapes.Shape extends java.lang.Object implements java.lang.Cloneable
{
    private float mWidth;
    private float mHeight;

    public void <init>()
    {
        android.graphics.drawable.shapes.Shape r0;

        r0 := @this: android.graphics.drawable.shapes.Shape;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final float getWidth()
    {
        android.graphics.drawable.shapes.Shape r0;
        float $f0;

        r0 := @this: android.graphics.drawable.shapes.Shape;

        $f0 = r0.<android.graphics.drawable.shapes.Shape: float mWidth>;

        return $f0;
    }

    public final float getHeight()
    {
        android.graphics.drawable.shapes.Shape r0;
        float $f0;

        r0 := @this: android.graphics.drawable.shapes.Shape;

        $f0 = r0.<android.graphics.drawable.shapes.Shape: float mHeight>;

        return $f0;
    }

    public abstract void draw(android.graphics.Canvas, android.graphics.Paint);

    public final void resize(float, float)
    {
        android.graphics.drawable.shapes.Shape r0;
        float f0, f1, $f2, $f3;
        byte $b0, $b1, $b2, $b3;

        r0 := @this: android.graphics.drawable.shapes.Shape;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        f0 = 0.0F;

     label1:
        $b1 = f1 cmpg 0.0F;

        if $b1 >= 0 goto label2;

        f1 = 0.0F;

     label2:
        $f2 = r0.<android.graphics.drawable.shapes.Shape: float mWidth>;

        $b2 = $f2 cmpl f0;

        if $b2 != 0 goto label3;

        $f3 = r0.<android.graphics.drawable.shapes.Shape: float mHeight>;

        $b3 = $f3 cmpl f1;

        if $b3 == 0 goto label4;

     label3:
        r0.<android.graphics.drawable.shapes.Shape: float mWidth> = f0;

        r0.<android.graphics.drawable.shapes.Shape: float mHeight> = f1;

        virtualinvoke r0.<android.graphics.drawable.shapes.Shape: void onResize(float,float)>(f0, f1);

     label4:
        return;
    }

    public boolean hasAlpha()
    {
        android.graphics.drawable.shapes.Shape r0;

        r0 := @this: android.graphics.drawable.shapes.Shape;

        return 1;
    }

    protected void onResize(float, float)
    {
        android.graphics.drawable.shapes.Shape r0;
        float f0, f1;

        r0 := @this: android.graphics.drawable.shapes.Shape;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        return;
    }

    public void getOutline(android.graphics.Outline)
    {
        android.graphics.drawable.shapes.Shape r0;
        android.graphics.Outline r1;

        r0 := @this: android.graphics.drawable.shapes.Shape;

        r1 := @parameter0: android.graphics.Outline;

        return;
    }

    public android.graphics.drawable.shapes.Shape clone() throws java.lang.CloneNotSupportedException
    {
        android.graphics.drawable.shapes.Shape r0, $r2;
        java.lang.Object $r1;

        r0 := @this: android.graphics.drawable.shapes.Shape;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (android.graphics.drawable.shapes.Shape) $r1;

        return $r2;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        android.graphics.drawable.shapes.Shape r0, $r1;

        r0 := @this: android.graphics.drawable.shapes.Shape;

        $r1 = virtualinvoke r0.<android.graphics.drawable.shapes.Shape: android.graphics.drawable.shapes.Shape clone()>();

        return $r1;
    }
}
