public class com.android.server.wifi.WifiScanningServiceImpl extends android.net.wifi.IWifiScanner$Stub
{
    private static final java.lang.String TAG;
    private static final boolean DBG;
    private static final int INVALID_KEY;
    private static final int MIN_PERIOD_PER_CHANNEL_MS;
    private static final int BASE;
    private static final int CMD_SCAN_RESULTS_AVAILABLE;
    private static final int CMD_FULL_SCAN_RESULTS;
    private static final int CMD_HOTLIST_AP_FOUND;
    private static final int CMD_HOTLIST_AP_LOST;
    private static final int CMD_WIFI_CHANGE_DETECTED;
    private static final int CMD_WIFI_CHANGES_STABILIZED;
    private static final int CMD_DRIVER_LOADED;
    private static final int CMD_DRIVER_UNLOADED;
    private static final int CMD_SCAN_PAUSED;
    private static final int CMD_SCAN_RESTARTED;
    private android.content.Context mContext;
    private com.android.server.wifi.WifiScanningServiceImpl$WifiScanningStateMachine mStateMachine;
    private com.android.server.wifi.WifiScanningServiceImpl$ClientHandler mClientHandler;
    java.util.HashMap mClients;
    com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine mWifiChangeStateMachine;

    public android.os.Messenger getMessenger()
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        android.os.Messenger $r1;
        com.android.server.wifi.WifiScanningServiceImpl$ClientHandler $r2;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        $r1 = new android.os.Messenger;

        $r2 = r0.<com.android.server.wifi.WifiScanningServiceImpl: com.android.server.wifi.WifiScanningServiceImpl$ClientHandler mClientHandler>;

        specialinvoke $r1.<android.os.Messenger: void <init>(android.os.Handler)>($r2);

        return $r1;
    }

    public android.os.Bundle getAvailableChannels(int)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        int i0, i1, i2, $i3, $i4;
        android.net.wifi.WifiScanner$ChannelSpec[] r1, r3;
        java.util.ArrayList r2, $r5;
        android.net.wifi.WifiScanner$ChannelSpec r4;
        android.os.Bundle $r6, r8;
        java.lang.Integer $r7;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        i0 := @parameter0: int;

        r1 = staticinvoke <com.android.server.wifi.WifiScanningServiceImpl: android.net.wifi.WifiScanner$ChannelSpec[] getChannelsForBand(int)>(i0);

        $r5 = new java.util.ArrayList;

        $i3 = lengthof r1;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i3);

        r2 = $r5;

        r3 = r1;

        i1 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r4 = r3[i2];

        $i4 = r4.<android.net.wifi.WifiScanner$ChannelSpec: int frequency>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        r8 = $r6;

        virtualinvoke r8.<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>("Channels", r2);

        return r8;
    }

    private void enforceConnectivityInternalPermission()
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        $r1 = r0.<com.android.server.wifi.WifiScanningServiceImpl: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "WifiScanningServiceImpl");

        return;
    }

    void <init>()
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        java.util.HashMap $r1;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        specialinvoke r0.<android.net.wifi.IWifiScanner$Stub: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wifi.WifiScanningServiceImpl: java.util.HashMap mClients> = $r1;

        return;
    }

    void <init>(android.content.Context)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        android.content.Context r1;
        java.util.HashMap $r2;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.net.wifi.IWifiScanner$Stub: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wifi.WifiScanningServiceImpl: java.util.HashMap mClients> = $r2;

        r0.<com.android.server.wifi.WifiScanningServiceImpl: android.content.Context mContext> = r1;

        return;
    }

    public void startService(android.content.Context)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        android.content.Context r1, $r11;
        android.os.HandlerThread r2, $r3;
        com.android.server.wifi.WifiScanningServiceImpl$ClientHandler $r4;
        android.os.Looper $r5, $r7, $r9;
        com.android.server.wifi.WifiScanningServiceImpl$WifiScanningStateMachine $r6, $r14;
        com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine $r8, $r15;
        com.android.server.wifi.WifiScanningServiceImpl$1 $r10;
        android.content.IntentFilter $r12;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        r1 := @parameter0: android.content.Context;

        r0.<com.android.server.wifi.WifiScanningServiceImpl: android.content.Context mContext> = r1;

        $r3 = new android.os.HandlerThread;

        specialinvoke $r3.<android.os.HandlerThread: void <init>(java.lang.String)>("WifiScanningService");

        r2 = $r3;

        virtualinvoke r2.<android.os.HandlerThread: void start()>();

        $r4 = new com.android.server.wifi.WifiScanningServiceImpl$ClientHandler;

        $r5 = virtualinvoke r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r4.<com.android.server.wifi.WifiScanningServiceImpl$ClientHandler: void <init>(com.android.server.wifi.WifiScanningServiceImpl,android.os.Looper)>(r0, $r5);

        r0.<com.android.server.wifi.WifiScanningServiceImpl: com.android.server.wifi.WifiScanningServiceImpl$ClientHandler mClientHandler> = $r4;

        $r6 = new com.android.server.wifi.WifiScanningServiceImpl$WifiScanningStateMachine;

        $r7 = virtualinvoke r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r6.<com.android.server.wifi.WifiScanningServiceImpl$WifiScanningStateMachine: void <init>(com.android.server.wifi.WifiScanningServiceImpl,android.os.Looper)>(r0, $r7);

        r0.<com.android.server.wifi.WifiScanningServiceImpl: com.android.server.wifi.WifiScanningServiceImpl$WifiScanningStateMachine mStateMachine> = $r6;

        $r8 = new com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine;

        $r9 = virtualinvoke r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r8.<com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine: void <init>(com.android.server.wifi.WifiScanningServiceImpl,android.os.Looper)>(r0, $r9);

        r0.<com.android.server.wifi.WifiScanningServiceImpl: com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine mWifiChangeStateMachine> = $r8;

        $r11 = r0.<com.android.server.wifi.WifiScanningServiceImpl: android.content.Context mContext>;

        $r10 = new com.android.server.wifi.WifiScanningServiceImpl$1;

        specialinvoke $r10.<com.android.server.wifi.WifiScanningServiceImpl$1: void <init>(com.android.server.wifi.WifiScanningServiceImpl)>(r0);

        $r12 = new android.content.IntentFilter;

        specialinvoke $r12.<android.content.IntentFilter: void <init>(java.lang.String)>("wifi_scan_available");

        virtualinvoke $r11.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r10, $r12);

        $r14 = r0.<com.android.server.wifi.WifiScanningServiceImpl: com.android.server.wifi.WifiScanningServiceImpl$WifiScanningStateMachine mStateMachine>;

        virtualinvoke $r14.<com.android.server.wifi.WifiScanningServiceImpl$WifiScanningStateMachine: void start()>();

        $r15 = r0.<com.android.server.wifi.WifiScanningServiceImpl: com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine mWifiChangeStateMachine>;

        virtualinvoke $r15.<com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine: void start()>();

        return;
    }

    void replySucceeded(android.os.Message, java.lang.Object)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        android.os.Message r1, r3;
        java.lang.Object r2;
        android.os.Messenger $r5, $r6;
        int $i0;
        android.os.RemoteException $r7;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        r1 := @parameter0: android.os.Message;

        r2 := @parameter1: java.lang.Object;

        $r5 = r1.<android.os.Message: android.os.Messenger replyTo>;

        if $r5 == null goto label4;

        r3 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        r3.<android.os.Message: int what> = 159761;

        $i0 = r1.<android.os.Message: int arg2>;

        r3.<android.os.Message: int arg2> = $i0;

        r3.<android.os.Message: java.lang.Object obj> = r2;

     label1:
        $r6 = r1.<android.os.Message: android.os.Messenger replyTo>;

        virtualinvoke $r6.<android.os.Messenger: void send(android.os.Message)>(r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void replyFailed(android.os.Message, int, java.lang.String)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        android.os.Message r1, r3;
        int i0, $i1;
        java.lang.String r2;
        android.os.Messenger $r5, $r7;
        android.net.wifi.WifiScanner$OperationResult $r6;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        r1 := @parameter0: android.os.Message;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r5 = r1.<android.os.Message: android.os.Messenger replyTo>;

        if $r5 == null goto label4;

        r3 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        r3.<android.os.Message: int what> = 159762;

        $i1 = r1.<android.os.Message: int arg2>;

        r3.<android.os.Message: int arg2> = $i1;

        $r6 = new android.net.wifi.WifiScanner$OperationResult;

        specialinvoke $r6.<android.net.wifi.WifiScanner$OperationResult: void <init>(int,java.lang.String)>(i0, r2);

        r3.<android.os.Message: java.lang.Object obj> = $r6;

     label1:
        $r7 = r1.<android.os.Message: android.os.Messenger replyTo>;

        virtualinvoke $r7.<android.os.Messenger: void send(android.os.Message)>(r3);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    boolean resetBuckets()
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        com.android.server.wifi.WifiScanningServiceImpl$SettingsComputer r1, $r9;
        java.util.Collection r2, r5;
        java.util.Iterator r3, r6, r31, r33;
        com.android.server.wifi.WifiScanningServiceImpl$ClientInfo r4, r32;
        android.net.wifi.WifiScanner$ScanSettings r7, r8;
        int i0, $i1, $i2, $i4, $i9, i11;
        java.util.HashMap $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.wifi.WifiScanningServiceImpl$WifiScanningStateMachine $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        java.lang.String $r15, $r23;
        long $l5, $l6;
        java.lang.Object $r24, $r25, $r27, $r28, $r29, $r30;
        java.lang.Integer $r26;
        java.util.Map$Entry r34;
        com.android.server.wifi.WifiNative$ScanSettings r35;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        $r9 = new com.android.server.wifi.WifiScanningServiceImpl$SettingsComputer;

        specialinvoke $r9.<com.android.server.wifi.WifiScanningServiceImpl$SettingsComputer: void <init>(com.android.server.wifi.WifiScanningServiceImpl$1)>(null);

        r1 = $r9;

        $r10 = r0.<com.android.server.wifi.WifiScanningServiceImpl: java.util.HashMap mClients>;

        r2 = virtualinvoke $r10.<java.util.HashMap: java.util.Collection values()>();

        r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r29 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.wifi.WifiScanningServiceImpl$ClientInfo) $r29;

        r5 = virtualinvoke r4.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: java.util.Collection getScanSettings()>();

        r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z4 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label03;

        $r30 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.net.wifi.WifiScanner$ScanSettings) $r30;

        virtualinvoke r1.<com.android.server.wifi.WifiScanningServiceImpl$SettingsComputer: void prepChannelMap(android.net.wifi.WifiScanner$ScanSettings)>(r7);

        goto label02;

     label03:
        goto label01;

     label04:
        r31 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r24 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (com.android.server.wifi.WifiScanningServiceImpl$ClientInfo) $r24;

        r33 = virtualinvoke r32.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: java.util.Iterator getScans()>();

     label06:
        $z3 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r27 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        r34 = (java.util.Map$Entry) $r27;

        $r25 = interfaceinvoke r34.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r26 = (java.lang.Integer) $r25;

        i11 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        $r28 = interfaceinvoke r34.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (android.net.wifi.WifiScanner$ScanSettings) $r28;

        i0 = virtualinvoke r1.<com.android.server.wifi.WifiScanningServiceImpl$SettingsComputer: int addScanRequestToBucket(android.net.wifi.WifiScanner$ScanSettings)>(r8);

        if i0 != -1 goto label07;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiScanningService", "could not find a good bucket");

        return 0;

     label07:
        $i9 = r8.<android.net.wifi.WifiScanner$ScanSettings: int periodInMs>;

        if i0 == $i9 goto label08;

        virtualinvoke r32.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: void reportPeriodChanged(int,android.net.wifi.WifiScanner$ScanSettings,int)>(i11, r8, i0);

     label08:
        goto label06;

     label09:
        goto label05;

     label10:
        virtualinvoke r1.<com.android.server.wifi.WifiScanningServiceImpl$SettingsComputer: void compressBuckets()>();

        r35 = virtualinvoke r1.<com.android.server.wifi.WifiScanningServiceImpl$SettingsComputer: com.android.server.wifi.WifiNative$ScanSettings getComputedSettings()>();

        $i1 = r35.<com.android.server.wifi.WifiNative$ScanSettings: int num_buckets>;

        if $i1 != 0 goto label11;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiScanningService", "Stopping scan because there are no buckets");

        staticinvoke <com.android.server.wifi.WifiNative: void stopScan()>();

        return 1;

     label11:
        $r11 = r0.<com.android.server.wifi.WifiScanningServiceImpl: com.android.server.wifi.WifiScanningServiceImpl$WifiScanningStateMachine mStateMachine>;

        $z2 = staticinvoke <com.android.server.wifi.WifiNative: boolean startScan(com.android.server.wifi.WifiNative$ScanSettings,com.android.server.wifi.WifiNative$ScanEventHandler)>(r35, $r11);

        if $z2 == 0 goto label12;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Successfully started scan of ");

        $i4 = r35.<com.android.server.wifi.WifiNative$ScanSettings: int num_buckets>;

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" buckets at");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("time = ");

        $l5 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        $l6 = $l5 / 1000L;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiScanningService", $r23);

        return 1;

     label12:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to start scan of ");

        $i2 = r35.<com.android.server.wifi.WifiNative$ScanSettings: int num_buckets>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" buckets");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiScanningService", $r15);

        return 0;
    }

    boolean addScanRequest(com.android.server.wifi.WifiScanningServiceImpl$ClientInfo, int, android.net.wifi.WifiScanner$ScanSettings)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        com.android.server.wifi.WifiScanningServiceImpl$ClientInfo r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i13, $i14;
        android.net.wifi.WifiScanner$ScanSettings r2;
        android.net.wifi.WifiScanner$ChannelSpec[] $r3, $r10;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9, $r11, $r12, $r13;
        java.lang.String $r8, $r14;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        r1 := @parameter0: com.android.server.wifi.WifiScanningServiceImpl$ClientInfo;

        i0 := @parameter1: int;

        r2 := @parameter2: android.net.wifi.WifiScanner$ScanSettings;

        $i2 = r2.<android.net.wifi.WifiScanner$ScanSettings: int periodInMs>;

        if $i2 >= 1000 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failing scan request because periodInMs is ");

        $i14 = r2.<android.net.wifi.WifiScanner$ScanSettings: int periodInMs>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiScanningService", $r14);

        return 0;

     label1:
        i1 = 0;

        $r3 = r2.<android.net.wifi.WifiScanner$ScanSettings: android.net.wifi.WifiScanner$ChannelSpec[] channels>;

        if $r3 == null goto label2;

        $r10 = r2.<android.net.wifi.WifiScanner$ScanSettings: android.net.wifi.WifiScanner$ChannelSpec[] channels>;

        $i13 = lengthof $r10;

        i1 = $i13 * 200;

        goto label5;

     label2:
        $i3 = r2.<android.net.wifi.WifiScanner$ScanSettings: int band>;

        $i4 = $i3 & 1;

        if $i4 != 0 goto label3;

        i1 = i1 + 1000;

     label3:
        $i5 = r2.<android.net.wifi.WifiScanner$ScanSettings: int band>;

        $i6 = $i5 & 2;

        if $i6 != 0 goto label4;

        i1 = i1 + 1000;

     label4:
        $i7 = r2.<android.net.wifi.WifiScanner$ScanSettings: int band>;

        $i8 = $i7 & 4;

        if $i8 != 0 goto label5;

        i1 = i1 + 2000;

     label5:
        $i9 = r2.<android.net.wifi.WifiScanner$ScanSettings: int periodInMs>;

        if $i9 >= i1 goto label6;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failing scan request because minSupportedPeriodMs is ");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but the request wants ");

        $i11 = r2.<android.net.wifi.WifiScanner$ScanSettings: int periodInMs>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiScanningService", $r8);

        return 0;

     label6:
        virtualinvoke r1.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: void addScanRequest(android.net.wifi.WifiScanner$ScanSettings,int)>(r2, i0);

        $z0 = virtualinvoke r0.<com.android.server.wifi.WifiScanningServiceImpl: boolean resetBuckets()>();

        if $z0 == 0 goto label7;

        return 1;

     label7:
        virtualinvoke r1.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: void removeScanRequest(int)>(i0);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiScanningService", "Failing scan request because failed to reset scan");

        return 0;
    }

    void removeScanRequest(com.android.server.wifi.WifiScanningServiceImpl$ClientInfo, int)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        com.android.server.wifi.WifiScanningServiceImpl$ClientInfo r1;
        int i0;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        r1 := @parameter0: com.android.server.wifi.WifiScanningServiceImpl$ClientInfo;

        i0 := @parameter1: int;

        virtualinvoke r1.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: void removeScanRequest(int)>(i0);

        virtualinvoke r0.<com.android.server.wifi.WifiScanningServiceImpl: boolean resetBuckets()>();

        return;
    }

    android.net.wifi.ScanResult[] getScanResults(com.android.server.wifi.WifiScanningServiceImpl$ClientInfo)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        com.android.server.wifi.WifiScanningServiceImpl$ClientInfo r1;
        android.net.wifi.ScanResult[] r2;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        r1 := @parameter0: com.android.server.wifi.WifiScanningServiceImpl$ClientInfo;

        r2 = staticinvoke <com.android.server.wifi.WifiNative: android.net.wifi.ScanResult[] getScanResults()>();

        virtualinvoke r1.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: void reportScanResults(android.net.wifi.ScanResult[])>(r2);

        return r2;
    }

    void resetHotlist()
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        java.util.Collection r1, r4, r23;
        int i0, i1, $i2, $i3, i4;
        java.util.Iterator r2, r5, r7, r21;
        com.android.server.wifi.WifiScanningServiceImpl$ClientInfo r3, r22;
        android.net.wifi.WifiScanner$HotlistSettings r6, r8, $r10, r24;
        java.util.HashMap $r9;
        boolean $z0, $z1, $z3, $z4;
        com.android.server.wifi.WifiScanningServiceImpl$WifiScanningStateMachine $r11;
        java.lang.Object $r12, $r14, $r16, $r19;
        android.net.wifi.WifiScanner$BssidInfo[] $r13, $r15, $r18, r20;
        android.net.wifi.WifiScanner$BssidInfo $r17;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        $r9 = r0.<com.android.server.wifi.WifiScanningServiceImpl: java.util.HashMap mClients>;

        r1 = virtualinvoke $r9.<java.util.HashMap: java.util.Collection values()>();

        i0 = 0;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r16 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.wifi.WifiScanningServiceImpl$ClientInfo) $r16;

        r4 = virtualinvoke r3.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: java.util.Collection getHotlistSettings()>();

        r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label03;

        $r19 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.net.wifi.WifiScanner$HotlistSettings) $r19;

        $r18 = r6.<android.net.wifi.WifiScanner$HotlistSettings: android.net.wifi.WifiScanner$BssidInfo[] bssidInfos>;

        $i3 = lengthof $r18;

        i0 = i0 + $i3;

        goto label02;

     label03:
        goto label01;

     label04:
        if i0 != 0 goto label05;

        staticinvoke <com.android.server.wifi.WifiNative: void resetHotlist()>();

        goto label12;

     label05:
        r20 = newarray (android.net.wifi.WifiScanner$BssidInfo)[i0];

        i4 = 0;

        r21 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r12 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (com.android.server.wifi.WifiScanningServiceImpl$ClientInfo) $r12;

        r23 = virtualinvoke r22.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: java.util.Collection getHotlistSettings()>();

        r7 = interfaceinvoke r23.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r14 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (android.net.wifi.WifiScanner$HotlistSettings) $r14;

        i1 = 0;

     label08:
        $r13 = r8.<android.net.wifi.WifiScanner$HotlistSettings: android.net.wifi.WifiScanner$BssidInfo[] bssidInfos>;

        $i2 = lengthof $r13;

        if i1 >= $i2 goto label09;

        $r15 = r8.<android.net.wifi.WifiScanner$HotlistSettings: android.net.wifi.WifiScanner$BssidInfo[] bssidInfos>;

        $r17 = $r15[i1];

        r20[i4] = $r17;

        i1 = i1 + 1;

        i4 = i4 + 1;

        goto label08;

     label09:
        goto label07;

     label10:
        goto label06;

     label11:
        $r10 = new android.net.wifi.WifiScanner$HotlistSettings;

        specialinvoke $r10.<android.net.wifi.WifiScanner$HotlistSettings: void <init>()>();

        r24 = $r10;

        r24.<android.net.wifi.WifiScanner$HotlistSettings: android.net.wifi.WifiScanner$BssidInfo[] bssidInfos> = r20;

        r24.<android.net.wifi.WifiScanner$HotlistSettings: int apLostThreshold> = 3;

        $r11 = r0.<com.android.server.wifi.WifiScanningServiceImpl: com.android.server.wifi.WifiScanningServiceImpl$WifiScanningStateMachine mStateMachine>;

        staticinvoke <com.android.server.wifi.WifiNative: boolean setHotlist(android.net.wifi.WifiScanner$HotlistSettings,com.android.server.wifi.WifiNative$HotlistEventHandler)>(r24, $r11);

     label12:
        return;
    }

    void setHotlist(com.android.server.wifi.WifiScanningServiceImpl$ClientInfo, int, android.net.wifi.WifiScanner$HotlistSettings)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        com.android.server.wifi.WifiScanningServiceImpl$ClientInfo r1;
        int i0;
        android.net.wifi.WifiScanner$HotlistSettings r2;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        r1 := @parameter0: com.android.server.wifi.WifiScanningServiceImpl$ClientInfo;

        i0 := @parameter1: int;

        r2 := @parameter2: android.net.wifi.WifiScanner$HotlistSettings;

        virtualinvoke r1.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: void addHostlistSettings(android.net.wifi.WifiScanner$HotlistSettings,int)>(r2, i0);

        virtualinvoke r0.<com.android.server.wifi.WifiScanningServiceImpl: void resetHotlist()>();

        return;
    }

    void resetHotlist(com.android.server.wifi.WifiScanningServiceImpl$ClientInfo, int)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        com.android.server.wifi.WifiScanningServiceImpl$ClientInfo r1;
        int i0;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        r1 := @parameter0: com.android.server.wifi.WifiScanningServiceImpl$ClientInfo;

        i0 := @parameter1: int;

        virtualinvoke r1.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: void removeHostlistSettings(int)>(i0);

        virtualinvoke r0.<com.android.server.wifi.WifiScanningServiceImpl: void resetHotlist()>();

        return;
    }

    void trackWifiChanges(com.android.server.wifi.WifiScanningServiceImpl$ClientInfo, int)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        com.android.server.wifi.WifiScanningServiceImpl$ClientInfo r1;
        int i0;
        com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine $r2;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        r1 := @parameter0: com.android.server.wifi.WifiScanningServiceImpl$ClientInfo;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.wifi.WifiScanningServiceImpl: com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine mWifiChangeStateMachine>;

        virtualinvoke $r2.<com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine: void enable()>();

        virtualinvoke r1.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: void addSignificantWifiChange(int)>(i0);

        return;
    }

    void untrackWifiChanges(com.android.server.wifi.WifiScanningServiceImpl$ClientInfo, int)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        com.android.server.wifi.WifiScanningServiceImpl$ClientInfo r1, r4;
        int i0, $i1;
        java.util.Collection r2, $r8;
        java.util.Iterator r3;
        java.util.HashMap $r5;
        boolean $z0;
        com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine $r6;
        java.lang.Object $r7;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        r1 := @parameter0: com.android.server.wifi.WifiScanningServiceImpl$ClientInfo;

        i0 := @parameter1: int;

        virtualinvoke r1.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: void removeSignificantWifiChange(int)>(i0);

        $r5 = r0.<com.android.server.wifi.WifiScanningServiceImpl: java.util.HashMap mClients>;

        r2 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.wifi.WifiScanningServiceImpl$ClientInfo) $r7;

        $r8 = virtualinvoke r4.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: java.util.Collection getWifiChangeHandlers()>();

        $i1 = interfaceinvoke $r8.<java.util.Collection: int size()>();

        if $i1 == 0 goto label2;

        return;

     label2:
        goto label1;

     label3:
        $r6 = r0.<com.android.server.wifi.WifiScanningServiceImpl: com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine mWifiChangeStateMachine>;

        virtualinvoke $r6.<com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine: void disable()>();

        return;
    }

    void configureWifiChange(android.net.wifi.WifiScanner$WifiChangeSettings)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        android.net.wifi.WifiScanner$WifiChangeSettings r1;
        com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine $r2;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        r1 := @parameter0: android.net.wifi.WifiScanner$WifiChangeSettings;

        $r2 = r0.<com.android.server.wifi.WifiScanningServiceImpl: com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine mWifiChangeStateMachine>;

        virtualinvoke $r2.<com.android.server.wifi.WifiScanningServiceImpl$WifiChangeStateMachine: void configure(android.net.wifi.WifiScanner$WifiChangeSettings)>(r1);

        return;
    }

    void reportWifiChanged(android.net.wifi.ScanResult[])
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        android.net.wifi.ScanResult[] r1;
        java.util.Collection r2;
        java.util.Iterator r3;
        com.android.server.wifi.WifiScanningServiceImpl$ClientInfo r4;
        java.util.HashMap $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        r1 := @parameter0: android.net.wifi.ScanResult[];

        $r5 = r0.<com.android.server.wifi.WifiScanningServiceImpl: java.util.HashMap mClients>;

        r2 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.wifi.WifiScanningServiceImpl$ClientInfo) $r6;

        virtualinvoke r4.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: void reportWifiChanged(android.net.wifi.ScanResult[])>(r1);

        goto label1;

     label2:
        return;
    }

    void reportWifiStabilized(android.net.wifi.ScanResult[])
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        android.net.wifi.ScanResult[] r1;
        java.util.Collection r2;
        java.util.Iterator r3;
        com.android.server.wifi.WifiScanningServiceImpl$ClientInfo r4;
        java.util.HashMap $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: com.android.server.wifi.WifiScanningServiceImpl;

        r1 := @parameter0: android.net.wifi.ScanResult[];

        $r5 = r0.<com.android.server.wifi.WifiScanningServiceImpl: java.util.HashMap mClients>;

        r2 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.wifi.WifiScanningServiceImpl$ClientInfo) $r6;

        virtualinvoke r4.<com.android.server.wifi.WifiScanningServiceImpl$ClientInfo: void reportWifiStabilized(android.net.wifi.ScanResult[])>(r1);

        goto label1;

     label2:
        return;
    }

    private static android.net.wifi.WifiScanner$ChannelSpec[] getChannelsForBand(int)
    {
        int i0, i1, $i2, $i3, $i4;
        int[] r0;
        android.net.wifi.WifiScanner$ChannelSpec[] r1, $r2;
        android.net.wifi.WifiScanner$ChannelSpec $r3;

        i0 := @parameter0: int;

        r0 = staticinvoke <com.android.server.wifi.WifiNative: int[] getChannelsForBand(int)>(i0);

        if r0 == null goto label3;

        $i2 = lengthof r0;

        r1 = newarray (android.net.wifi.WifiScanner$ChannelSpec)[$i2];

        i1 = 0;

     label1:
        $i3 = lengthof r0;

        if i1 >= $i3 goto label2;

        $r3 = new android.net.wifi.WifiScanner$ChannelSpec;

        $i4 = r0[i1];

        specialinvoke $r3.<android.net.wifi.WifiScanner$ChannelSpec: void <init>(int)>($i4);

        r1[i1] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;

     label3:
        $r2 = newarray (android.net.wifi.WifiScanner$ChannelSpec)[0];

        return $r2;
    }

    private static int getBandFromChannels(android.net.wifi.WifiScanner$ChannelSpec[])
    {
        android.net.wifi.WifiScanner$ChannelSpec[] r0, r1;
        byte b0;
        int i1, i2, $i3, $i4, $i5, $i6;
        android.net.wifi.WifiScanner$ChannelSpec r2;

        r0 := @parameter0: android.net.wifi.WifiScanner$ChannelSpec[];

        b0 = 0;

        r1 = r0;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        r2 = r1[i2];

        $i3 = r2.<android.net.wifi.WifiScanner$ChannelSpec: int frequency>;

        if 2400 > $i3 goto label2;

        $i6 = r2.<android.net.wifi.WifiScanner$ChannelSpec: int frequency>;

        if $i6 >= 2500 goto label2;

        b0 = b0 | 1;

        goto label3;

     label2:
        $i4 = r2.<android.net.wifi.WifiScanner$ChannelSpec: int frequency>;

        if 5100 > $i4 goto label3;

        $i5 = r2.<android.net.wifi.WifiScanner$ChannelSpec: int frequency>;

        if $i5 >= 6000 goto label3;

        b0 = b0 | 2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return b0;
    }

    private static int getBandFromChannels(com.android.server.wifi.WifiNative$ChannelSettings[])
    {
        com.android.server.wifi.WifiNative$ChannelSettings[] r0, r1;
        byte b0;
        int i1, i2, $i3, $i4, $i5, $i6;
        com.android.server.wifi.WifiNative$ChannelSettings r2;

        r0 := @parameter0: com.android.server.wifi.WifiNative$ChannelSettings[];

        b0 = 0;

        r1 = r0;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        r2 = r1[i2];

        $i3 = r2.<com.android.server.wifi.WifiNative$ChannelSettings: int frequency>;

        if 2400 > $i3 goto label2;

        $i6 = r2.<com.android.server.wifi.WifiNative$ChannelSettings: int frequency>;

        if $i6 >= 2500 goto label2;

        b0 = b0 | 1;

        goto label3;

     label2:
        $i4 = r2.<com.android.server.wifi.WifiNative$ChannelSettings: int frequency>;

        if 5100 > $i4 goto label3;

        $i5 = r2.<com.android.server.wifi.WifiNative$ChannelSettings: int frequency>;

        if $i5 >= 6000 goto label3;

        b0 = b0 | 2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return b0;
    }

    static android.content.Context access$000(com.android.server.wifi.WifiScanningServiceImpl)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.wifi.WifiScanningServiceImpl;

        $r1 = r0.<com.android.server.wifi.WifiScanningServiceImpl: android.content.Context mContext>;

        return $r1;
    }

    static void access$100(com.android.server.wifi.WifiScanningServiceImpl)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;

        r0 := @parameter0: com.android.server.wifi.WifiScanningServiceImpl;

        specialinvoke r0.<com.android.server.wifi.WifiScanningServiceImpl: void enforceConnectivityInternalPermission()>();

        return;
    }

    static com.android.server.wifi.WifiScanningServiceImpl$WifiScanningStateMachine access$200(com.android.server.wifi.WifiScanningServiceImpl)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        com.android.server.wifi.WifiScanningServiceImpl$WifiScanningStateMachine $r1;

        r0 := @parameter0: com.android.server.wifi.WifiScanningServiceImpl;

        $r1 = r0.<com.android.server.wifi.WifiScanningServiceImpl: com.android.server.wifi.WifiScanningServiceImpl$WifiScanningStateMachine mStateMachine>;

        return $r1;
    }

    static android.net.wifi.WifiScanner$ChannelSpec[] access$1300(int)
    {
        int i0;
        android.net.wifi.WifiScanner$ChannelSpec[] $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.android.server.wifi.WifiScanningServiceImpl: android.net.wifi.WifiScanner$ChannelSpec[] getChannelsForBand(int)>(i0);

        return $r0;
    }

    static int access$1400(com.android.server.wifi.WifiNative$ChannelSettings[])
    {
        com.android.server.wifi.WifiNative$ChannelSettings[] r0;
        int $i0;

        r0 := @parameter0: com.android.server.wifi.WifiNative$ChannelSettings[];

        $i0 = staticinvoke <com.android.server.wifi.WifiScanningServiceImpl: int getBandFromChannels(com.android.server.wifi.WifiNative$ChannelSettings[])>(r0);

        return $i0;
    }

    static int access$1500(android.net.wifi.WifiScanner$ChannelSpec[])
    {
        android.net.wifi.WifiScanner$ChannelSpec[] r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiScanner$ChannelSpec[];

        $i0 = staticinvoke <com.android.server.wifi.WifiScanningServiceImpl: int getBandFromChannels(android.net.wifi.WifiScanner$ChannelSpec[])>(r0);

        return $i0;
    }

    static com.android.server.wifi.WifiScanningServiceImpl$ClientHandler access$2400(com.android.server.wifi.WifiScanningServiceImpl)
    {
        com.android.server.wifi.WifiScanningServiceImpl r0;
        com.android.server.wifi.WifiScanningServiceImpl$ClientHandler $r1;

        r0 := @parameter0: com.android.server.wifi.WifiScanningServiceImpl;

        $r1 = r0.<com.android.server.wifi.WifiScanningServiceImpl: com.android.server.wifi.WifiScanningServiceImpl$ClientHandler mClientHandler>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.server.wifi.WifiScanningServiceImpl: int CMD_SCAN_RESTARTED> = 160009;

        <com.android.server.wifi.WifiScanningServiceImpl: int CMD_SCAN_PAUSED> = 160008;

        <com.android.server.wifi.WifiScanningServiceImpl: int CMD_DRIVER_UNLOADED> = 160007;

        <com.android.server.wifi.WifiScanningServiceImpl: int CMD_DRIVER_LOADED> = 160006;

        <com.android.server.wifi.WifiScanningServiceImpl: int CMD_WIFI_CHANGES_STABILIZED> = 160005;

        <com.android.server.wifi.WifiScanningServiceImpl: int CMD_WIFI_CHANGE_DETECTED> = 160004;

        <com.android.server.wifi.WifiScanningServiceImpl: int CMD_HOTLIST_AP_LOST> = 160003;

        <com.android.server.wifi.WifiScanningServiceImpl: int CMD_HOTLIST_AP_FOUND> = 160002;

        <com.android.server.wifi.WifiScanningServiceImpl: int CMD_FULL_SCAN_RESULTS> = 160001;

        <com.android.server.wifi.WifiScanningServiceImpl: int CMD_SCAN_RESULTS_AVAILABLE> = 160000;

        <com.android.server.wifi.WifiScanningServiceImpl: int BASE> = 160000;

        <com.android.server.wifi.WifiScanningServiceImpl: int MIN_PERIOD_PER_CHANNEL_MS> = 200;

        <com.android.server.wifi.WifiScanningServiceImpl: int INVALID_KEY> = 0;

        <com.android.server.wifi.WifiScanningServiceImpl: boolean DBG> = 1;

        <com.android.server.wifi.WifiScanningServiceImpl: java.lang.String TAG> = "WifiScanningService";

        return;
    }
}
