class com.android.server.wifi.RttService$RttServiceImpl extends android.net.wifi.IRttManager$Stub
{
    private android.content.Context mContext;
    private com.android.server.wifi.RttService$RttServiceImpl$RttStateMachine mStateMachine;
    private com.android.server.wifi.RttService$RttServiceImpl$ClientHandler mClientHandler;
    private java.util.Queue mRequestQueue;
    private java.util.HashMap mClients;
    private static final int BASE;
    private static final int CMD_DRIVER_LOADED;
    private static final int CMD_DRIVER_UNLOADED;
    private static final int CMD_ISSUE_NEXT_REQUEST;
    private static final int CMD_RTT_RESPONSE;
    private com.android.server.wifi.WifiNative$RttEventHandler mEventHandler;
    final com.android.server.wifi.RttService this$0;

    public android.os.Messenger getMessenger()
    {
        com.android.server.wifi.RttService$RttServiceImpl r0;
        android.os.Messenger $r1;
        com.android.server.wifi.RttService$RttServiceImpl$ClientHandler $r2;

        r0 := @this: com.android.server.wifi.RttService$RttServiceImpl;

        $r1 = new android.os.Messenger;

        $r2 = r0.<com.android.server.wifi.RttService$RttServiceImpl: com.android.server.wifi.RttService$RttServiceImpl$ClientHandler mClientHandler>;

        specialinvoke $r1.<android.os.Messenger: void <init>(android.os.Handler)>($r2);

        return $r1;
    }

    void <init>(com.android.server.wifi.RttService)
    {
        com.android.server.wifi.RttService$RttServiceImpl r0;
        com.android.server.wifi.RttService r1;
        java.util.LinkedList $r2;
        java.util.HashMap $r3;
        com.android.server.wifi.RttService$RttServiceImpl$2 $r4;

        r0 := @this: com.android.server.wifi.RttService$RttServiceImpl;

        r1 := @parameter0: com.android.server.wifi.RttService;

        r0.<com.android.server.wifi.RttService$RttServiceImpl: com.android.server.wifi.RttService this$0> = r1;

        specialinvoke r0.<android.net.wifi.IRttManager$Stub: void <init>()>();

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<com.android.server.wifi.RttService$RttServiceImpl: java.util.Queue mRequestQueue> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(4);

        r0.<com.android.server.wifi.RttService$RttServiceImpl: java.util.HashMap mClients> = $r3;

        $r4 = new com.android.server.wifi.RttService$RttServiceImpl$2;

        specialinvoke $r4.<com.android.server.wifi.RttService$RttServiceImpl$2: void <init>(com.android.server.wifi.RttService$RttServiceImpl)>(r0);

        r0.<com.android.server.wifi.RttService$RttServiceImpl: com.android.server.wifi.WifiNative$RttEventHandler mEventHandler> = $r4;

        return;
    }

    void <init>(com.android.server.wifi.RttService, android.content.Context)
    {
        com.android.server.wifi.RttService$RttServiceImpl r0;
        com.android.server.wifi.RttService r1;
        android.content.Context r2;
        java.util.LinkedList $r3;
        java.util.HashMap $r4;
        com.android.server.wifi.RttService$RttServiceImpl$2 $r5;

        r0 := @this: com.android.server.wifi.RttService$RttServiceImpl;

        r1 := @parameter0: com.android.server.wifi.RttService;

        r2 := @parameter1: android.content.Context;

        r0.<com.android.server.wifi.RttService$RttServiceImpl: com.android.server.wifi.RttService this$0> = r1;

        specialinvoke r0.<android.net.wifi.IRttManager$Stub: void <init>()>();

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<com.android.server.wifi.RttService$RttServiceImpl: java.util.Queue mRequestQueue> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(int)>(4);

        r0.<com.android.server.wifi.RttService$RttServiceImpl: java.util.HashMap mClients> = $r4;

        $r5 = new com.android.server.wifi.RttService$RttServiceImpl$2;

        specialinvoke $r5.<com.android.server.wifi.RttService$RttServiceImpl$2: void <init>(com.android.server.wifi.RttService$RttServiceImpl)>(r0);

        r0.<com.android.server.wifi.RttService$RttServiceImpl: com.android.server.wifi.WifiNative$RttEventHandler mEventHandler> = $r5;

        r0.<com.android.server.wifi.RttService$RttServiceImpl: android.content.Context mContext> = r2;

        return;
    }

    public void startService(android.content.Context)
    {
        com.android.server.wifi.RttService$RttServiceImpl r0;
        android.content.Context r1, $r9;
        android.os.HandlerThread r2, $r3;
        com.android.server.wifi.RttService$RttServiceImpl$ClientHandler $r4;
        android.os.Looper $r5, $r7;
        com.android.server.wifi.RttService$RttServiceImpl$RttStateMachine $r6, $r12;
        com.android.server.wifi.RttService$RttServiceImpl$1 $r8;
        android.content.IntentFilter $r10;

        r0 := @this: com.android.server.wifi.RttService$RttServiceImpl;

        r1 := @parameter0: android.content.Context;

        r0.<com.android.server.wifi.RttService$RttServiceImpl: android.content.Context mContext> = r1;

        $r3 = new android.os.HandlerThread;

        specialinvoke $r3.<android.os.HandlerThread: void <init>(java.lang.String)>("WifiRttService");

        r2 = $r3;

        virtualinvoke r2.<android.os.HandlerThread: void start()>();

        $r4 = new com.android.server.wifi.RttService$RttServiceImpl$ClientHandler;

        $r5 = virtualinvoke r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r4.<com.android.server.wifi.RttService$RttServiceImpl$ClientHandler: void <init>(com.android.server.wifi.RttService$RttServiceImpl,android.os.Looper)>(r0, $r5);

        r0.<com.android.server.wifi.RttService$RttServiceImpl: com.android.server.wifi.RttService$RttServiceImpl$ClientHandler mClientHandler> = $r4;

        $r6 = new com.android.server.wifi.RttService$RttServiceImpl$RttStateMachine;

        $r7 = virtualinvoke r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r6.<com.android.server.wifi.RttService$RttServiceImpl$RttStateMachine: void <init>(com.android.server.wifi.RttService$RttServiceImpl,android.os.Looper)>(r0, $r7);

        r0.<com.android.server.wifi.RttService$RttServiceImpl: com.android.server.wifi.RttService$RttServiceImpl$RttStateMachine mStateMachine> = $r6;

        $r9 = r0.<com.android.server.wifi.RttService$RttServiceImpl: android.content.Context mContext>;

        $r8 = new com.android.server.wifi.RttService$RttServiceImpl$1;

        specialinvoke $r8.<com.android.server.wifi.RttService$RttServiceImpl$1: void <init>(com.android.server.wifi.RttService$RttServiceImpl)>(r0);

        $r10 = new android.content.IntentFilter;

        specialinvoke $r10.<android.content.IntentFilter: void <init>(java.lang.String)>("wifi_scan_available");

        virtualinvoke $r9.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r8, $r10);

        $r12 = r0.<com.android.server.wifi.RttService$RttServiceImpl: com.android.server.wifi.RttService$RttServiceImpl$RttStateMachine mStateMachine>;

        virtualinvoke $r12.<com.android.server.wifi.RttService$RttServiceImpl$RttStateMachine: void start()>();

        return;
    }

    void replySucceeded(android.os.Message, java.lang.Object)
    {
        com.android.server.wifi.RttService$RttServiceImpl r0;
        android.os.Message r1, r3;
        java.lang.Object r2;
        android.os.Messenger $r5, $r6;
        int $i0;
        android.os.RemoteException $r7;

        r0 := @this: com.android.server.wifi.RttService$RttServiceImpl;

        r1 := @parameter0: android.os.Message;

        r2 := @parameter1: java.lang.Object;

        $r5 = r1.<android.os.Message: android.os.Messenger replyTo>;

        if $r5 == null goto label4;

        r3 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        r3.<android.os.Message: int what> = 160259;

        $i0 = r1.<android.os.Message: int arg2>;

        r3.<android.os.Message: int arg2> = $i0;

        r3.<android.os.Message: java.lang.Object obj> = r2;

     label1:
        $r6 = r1.<android.os.Message: android.os.Messenger replyTo>;

        virtualinvoke $r6.<android.os.Messenger: void send(android.os.Message)>(r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void replyFailed(android.os.Message, int, java.lang.String)
    {
        com.android.server.wifi.RttService$RttServiceImpl r0;
        android.os.Message r1, r3;
        int i0, $i1;
        java.lang.String r2;
        android.os.Bundle r4, $r6;
        android.os.Messenger $r7;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.wifi.RttService$RttServiceImpl;

        r1 := @parameter0: android.os.Message;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        r3.<android.os.Message: int what> = 160258;

        r3.<android.os.Message: int arg1> = i0;

        $i1 = r1.<android.os.Message: int arg2>;

        r3.<android.os.Message: int arg2> = $i1;

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        r4 = $r6;

        virtualinvoke r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.net.wifi.RttManager.Description", r2);

        r3.<android.os.Message: java.lang.Object obj> = r4;

     label1:
        $r7 = r1.<android.os.Message: android.os.Messenger replyTo>;

        virtualinvoke $r7.<android.os.Messenger: void send(android.os.Message)>(r3);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    com.android.server.wifi.RttService$RttServiceImpl$RttRequest issueNextRequest()
    {
        com.android.server.wifi.RttService$RttServiceImpl r0;
        java.util.Queue $r1, $r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        com.android.server.wifi.WifiNative$RttEventHandler $r4;
        android.net.wifi.RttManager$RttParams[] $r5;
        com.android.server.wifi.RttService$RttServiceImpl$ClientInfo $r6;
        com.android.server.wifi.RttService$RttServiceImpl$RttRequest r7;

        r0 := @this: com.android.server.wifi.RttService$RttServiceImpl;

     label1:
        $r1 = r0.<com.android.server.wifi.RttService$RttServiceImpl: java.util.Queue mRequestQueue>;

        $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r2 = r0.<com.android.server.wifi.RttService$RttServiceImpl: java.util.Queue mRequestQueue>;

        $r3 = interfaceinvoke $r2.<java.util.Queue: java.lang.Object remove()>();

        r7 = (com.android.server.wifi.RttService$RttServiceImpl$RttRequest) $r3;

        $r5 = r7.<com.android.server.wifi.RttService$RttServiceImpl$RttRequest: android.net.wifi.RttManager$RttParams[] params>;

        $r4 = r0.<com.android.server.wifi.RttService$RttServiceImpl: com.android.server.wifi.WifiNative$RttEventHandler mEventHandler>;

        $z1 = staticinvoke <com.android.server.wifi.WifiNative: boolean requestRtt(android.net.wifi.RttManager$RttParams[],com.android.server.wifi.WifiNative$RttEventHandler)>($r5, $r4);

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RttService", "Issued next RTT request");

        return r7;

     label2:
        $r6 = r7.<com.android.server.wifi.RttService$RttServiceImpl$RttRequest: com.android.server.wifi.RttService$RttServiceImpl$ClientInfo ci>;

        virtualinvoke $r6.<com.android.server.wifi.RttService$RttServiceImpl$ClientInfo: void reportFailed(com.android.server.wifi.RttService$RttServiceImpl$RttRequest,int,java.lang.String)>(r7, -1, "Failed to start");

        goto label1;

     label3:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RttService", "No more requests left");

        return null;
    }

    static java.util.HashMap access$000(com.android.server.wifi.RttService$RttServiceImpl)
    {
        com.android.server.wifi.RttService$RttServiceImpl r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.wifi.RttService$RttServiceImpl;

        $r1 = r0.<com.android.server.wifi.RttService$RttServiceImpl: java.util.HashMap mClients>;

        return $r1;
    }

    static android.content.Context access$100(com.android.server.wifi.RttService$RttServiceImpl)
    {
        com.android.server.wifi.RttService$RttServiceImpl r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.wifi.RttService$RttServiceImpl;

        $r1 = r0.<com.android.server.wifi.RttService$RttServiceImpl: android.content.Context mContext>;

        return $r1;
    }

    static com.android.server.wifi.RttService$RttServiceImpl$RttStateMachine access$200(com.android.server.wifi.RttService$RttServiceImpl)
    {
        com.android.server.wifi.RttService$RttServiceImpl r0;
        com.android.server.wifi.RttService$RttServiceImpl$RttStateMachine $r1;

        r0 := @parameter0: com.android.server.wifi.RttService$RttServiceImpl;

        $r1 = r0.<com.android.server.wifi.RttService$RttServiceImpl: com.android.server.wifi.RttService$RttServiceImpl$RttStateMachine mStateMachine>;

        return $r1;
    }

    static java.util.Queue access$400(com.android.server.wifi.RttService$RttServiceImpl)
    {
        com.android.server.wifi.RttService$RttServiceImpl r0;
        java.util.Queue $r1;

        r0 := @parameter0: com.android.server.wifi.RttService$RttServiceImpl;

        $r1 = r0.<com.android.server.wifi.RttService$RttServiceImpl: java.util.Queue mRequestQueue>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.server.wifi.RttService$RttServiceImpl: int CMD_RTT_RESPONSE> = 160515;

        <com.android.server.wifi.RttService$RttServiceImpl: int CMD_ISSUE_NEXT_REQUEST> = 160514;

        <com.android.server.wifi.RttService$RttServiceImpl: int CMD_DRIVER_UNLOADED> = 160513;

        <com.android.server.wifi.RttService$RttServiceImpl: int CMD_DRIVER_LOADED> = 160512;

        <com.android.server.wifi.RttService$RttServiceImpl: int BASE> = 160512;

        return;
    }
}
