public class com.android.server.wifi.WifiMonitor extends java.lang.Object
{
    private static boolean DBG;
    private static final boolean VDBG;
    private static final java.lang.String TAG;
    private static final int CONNECTED;
    private static final int DISCONNECTED;
    private static final int STATE_CHANGE;
    private static final int SCAN_RESULTS;
    private static final int LINK_SPEED;
    private static final int TERMINATING;
    private static final int DRIVER_STATE;
    private static final int EAP_FAILURE;
    private static final int ASSOC_REJECT;
    private static final int SSID_TEMP_DISABLE;
    private static final int SSID_REENABLE;
    private static final int BSS_ADDED;
    private static final int BSS_REMOVED;
    private static final int UNKNOWN;
    private static final java.lang.String EVENT_PREFIX_STR;
    private static final int EVENT_PREFIX_LEN_STR;
    private static final java.lang.String REQUEST_PREFIX_STR;
    private static final int REQUEST_PREFIX_LEN_STR;
    private static final java.lang.String WPA_EVENT_PREFIX_STR;
    private static final java.lang.String PASSWORD_MAY_BE_INCORRECT_STR;
    private static final java.lang.String WPS_SUCCESS_STR;
    private static final java.lang.String WPS_FAIL_STR;
    private static final java.lang.String WPS_FAIL_PATTERN;
    private static final int CONFIG_MULTIPLE_PBC_DETECTED;
    private static final int CONFIG_AUTH_FAILURE;
    private static final int REASON_TKIP_ONLY_PROHIBITED;
    private static final int REASON_WEP_PROHIBITED;
    private static final java.lang.String WPS_OVERLAP_STR;
    private static final java.lang.String WPS_TIMEOUT_STR;
    private static final java.lang.String GAS_QUERY_PREFIX_STR;
    private static final java.lang.String GAS_QUERY_START_STR;
    private static final java.lang.String GAS_QUERY_DONE_STR;
    private static final java.lang.String RX_HS20_ANQP_ICON_STR;
    private static final int RX_HS20_ANQP_ICON_STR_LEN;
    private static final java.lang.String HS20_PREFIX_STR;
    private static final java.lang.String HS20_SUB_REM_STR;
    private static final java.lang.String HS20_DEAUTH_STR;
    private static final java.lang.String IDENTITY_STR;
    private static final java.lang.String SIM_STR;
    private static int eventLogCounter;
    private static final java.lang.String CONNECTED_STR;
    private static final java.lang.String DISCONNECTED_STR;
    private static final java.lang.String STATE_CHANGE_STR;
    private static final java.lang.String SCAN_RESULTS_STR;
    private static final java.lang.String LINK_SPEED_STR;
    private static final java.lang.String TERMINATING_STR;
    private static final java.lang.String DRIVER_STATE_STR;
    private static final java.lang.String EAP_FAILURE_STR;
    private static final java.lang.String EAP_AUTH_FAILURE_STR;
    private static final java.lang.String ASSOC_REJECT_STR;
    private static final java.lang.String TEMP_DISABLED_STR;
    private static final java.lang.String REENABLED_STR;
    private static final java.lang.String BSS_ADDED_STR;
    private static final java.lang.String BSS_REMOVED_STR;
    private static java.util.regex.Pattern mConnectedEventPattern;
    private static java.util.regex.Pattern mDisconnectedEventPattern;
    private static java.util.regex.Pattern mAssocRejectEventPattern;
    private static final java.lang.String TARGET_BSSID_STR;
    private static java.util.regex.Pattern mTargetBSSIDPattern;
    private static final java.lang.String ASSOCIATED_WITH_STR;
    private static java.util.regex.Pattern mAssociatedPattern;
    private static java.util.regex.Pattern mRequestGsmAuthPattern;
    private static java.util.regex.Pattern mRequestIdentityPattern;
    private static final java.lang.String P2P_EVENT_PREFIX_STR;
    private static final java.lang.String P2P_DEVICE_FOUND_STR;
    private static final java.lang.String P2P_DEVICE_LOST_STR;
    private static final java.lang.String P2P_FIND_STOPPED_STR;
    private static final java.lang.String P2P_GO_NEG_REQUEST_STR;
    private static final java.lang.String P2P_GO_NEG_SUCCESS_STR;
    private static final java.lang.String P2P_GO_NEG_FAILURE_STR;
    private static final java.lang.String P2P_GROUP_FORMATION_SUCCESS_STR;
    private static final java.lang.String P2P_GROUP_FORMATION_FAILURE_STR;
    private static final java.lang.String P2P_GROUP_STARTED_STR;
    private static final java.lang.String P2P_GROUP_REMOVED_STR;
    private static final java.lang.String P2P_INVITATION_RECEIVED_STR;
    private static final java.lang.String P2P_INVITATION_RESULT_STR;
    private static final java.lang.String P2P_PROV_DISC_PBC_REQ_STR;
    private static final java.lang.String P2P_PROV_DISC_PBC_RSP_STR;
    private static final java.lang.String P2P_PROV_DISC_ENTER_PIN_STR;
    private static final java.lang.String P2P_PROV_DISC_SHOW_PIN_STR;
    private static final java.lang.String P2P_PROV_DISC_FAILURE_STR;
    private static final java.lang.String P2P_SERV_DISC_RESP_STR;
    private static final java.lang.String HOST_AP_EVENT_PREFIX_STR;
    private static final java.lang.String AP_STA_CONNECTED_STR;
    private static final java.lang.String AP_STA_DISCONNECTED_STR;
    private static final int BASE;
    public static final int SUP_CONNECTION_EVENT;
    public static final int SUP_DISCONNECTION_EVENT;
    public static final int NETWORK_CONNECTION_EVENT;
    public static final int NETWORK_DISCONNECTION_EVENT;
    public static final int SCAN_RESULTS_EVENT;
    public static final int SUPPLICANT_STATE_CHANGE_EVENT;
    public static final int AUTHENTICATION_FAILURE_EVENT;
    public static final int WPS_SUCCESS_EVENT;
    public static final int WPS_FAIL_EVENT;
    public static final int WPS_OVERLAP_EVENT;
    public static final int WPS_TIMEOUT_EVENT;
    public static final int DRIVER_HUNG_EVENT;
    public static final int SSID_TEMP_DISABLED;
    public static final int SSID_REENABLED;
    public static final int SUP_REQUEST_IDENTITY;
    public static final int SUP_REQUEST_SIM_AUTH;
    public static final int P2P_DEVICE_FOUND_EVENT;
    public static final int P2P_DEVICE_LOST_EVENT;
    public static final int P2P_GO_NEGOTIATION_REQUEST_EVENT;
    public static final int P2P_GO_NEGOTIATION_SUCCESS_EVENT;
    public static final int P2P_GO_NEGOTIATION_FAILURE_EVENT;
    public static final int P2P_GROUP_FORMATION_SUCCESS_EVENT;
    public static final int P2P_GROUP_FORMATION_FAILURE_EVENT;
    public static final int P2P_GROUP_STARTED_EVENT;
    public static final int P2P_GROUP_REMOVED_EVENT;
    public static final int P2P_INVITATION_RECEIVED_EVENT;
    public static final int P2P_INVITATION_RESULT_EVENT;
    public static final int P2P_PROV_DISC_PBC_REQ_EVENT;
    public static final int P2P_PROV_DISC_PBC_RSP_EVENT;
    public static final int P2P_PROV_DISC_ENTER_PIN_EVENT;
    public static final int P2P_PROV_DISC_SHOW_PIN_EVENT;
    public static final int P2P_FIND_STOPPED_EVENT;
    public static final int P2P_SERV_DISC_RESP_EVENT;
    public static final int P2P_PROV_DISC_FAILURE_EVENT;
    public static final int AP_STA_DISCONNECTED_EVENT;
    public static final int AP_STA_CONNECTED_EVENT;
    public static final int ASSOCIATION_REJECTION_EVENT;
    public static final int GAS_QUERY_START_EVENT;
    public static final int GAS_QUERY_DONE_EVENT;
    public static final int RX_HS20_ANQP_ICON_EVENT;
    public static final int HS20_REMEDIATION_EVENT;
    public static final int HS20_DEAUTH_EVENT;
    private static final java.lang.String WPA_RECV_ERROR_STR;
    private static final int MAX_RECV_ERRORS;
    private final java.lang.String mInterfaceName;
    private final com.android.server.wifi.WifiNative mWifiNative;
    private final com.android.internal.util.StateMachine mStateMachine;
    private com.android.internal.util.StateMachine mStateMachine2;
    private boolean mMonitoring;
    private static int sRecvErrors;

    public void <init>(com.android.internal.util.StateMachine, com.android.server.wifi.WifiNative)
    {
        com.android.server.wifi.WifiMonitor r0;
        com.android.internal.util.StateMachine r1;
        com.android.server.wifi.WifiNative r2;
        boolean $z0;
        java.lang.String $r3, $r5;
        com.android.server.wifi.WifiMonitor$WifiMonitorSingleton $r4;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: com.android.internal.util.StateMachine;

        r2 := @parameter1: com.android.server.wifi.WifiNative;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiMonitor", "Creating WifiMonitor");

     label1:
        r0.<com.android.server.wifi.WifiMonitor: com.android.server.wifi.WifiNative mWifiNative> = r2;

        $r3 = r2.<com.android.server.wifi.WifiNative: java.lang.String mInterfaceName>;

        r0.<com.android.server.wifi.WifiMonitor: java.lang.String mInterfaceName> = $r3;

        r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine> = r1;

        r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine2> = null;

        r0.<com.android.server.wifi.WifiMonitor: boolean mMonitoring> = 0;

        $r4 = staticinvoke <com.android.server.wifi.WifiMonitor$WifiMonitorSingleton: com.android.server.wifi.WifiMonitor$WifiMonitorSingleton access$000()>();

        $r5 = r0.<com.android.server.wifi.WifiMonitor: java.lang.String mInterfaceName>;

        virtualinvoke $r4.<com.android.server.wifi.WifiMonitor$WifiMonitorSingleton: void registerInterfaceMonitor(java.lang.String,com.android.server.wifi.WifiMonitor)>($r5, r0);

        return;
    }

    void enableVerboseLogging(int)
    {
        com.android.server.wifi.WifiMonitor r0;
        int i0;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        <com.android.server.wifi.WifiMonitor: boolean DBG> = 1;

        goto label2;

     label1:
        <com.android.server.wifi.WifiMonitor: boolean DBG> = 0;

     label2:
        return;
    }

    public void setStateMachine2(com.android.internal.util.StateMachine)
    {
        com.android.server.wifi.WifiMonitor r0;
        com.android.internal.util.StateMachine r1;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: com.android.internal.util.StateMachine;

        r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine2> = r1;

        return;
    }

    public void startMonitoring()
    {
        com.android.server.wifi.WifiMonitor r0;
        com.android.server.wifi.WifiMonitor$WifiMonitorSingleton $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        $r1 = staticinvoke <com.android.server.wifi.WifiMonitor$WifiMonitorSingleton: com.android.server.wifi.WifiMonitor$WifiMonitorSingleton access$000()>();

        $r2 = r0.<com.android.server.wifi.WifiMonitor: java.lang.String mInterfaceName>;

        virtualinvoke $r1.<com.android.server.wifi.WifiMonitor$WifiMonitorSingleton: void startMonitoring(java.lang.String)>($r2);

        return;
    }

    public void stopMonitoring()
    {
        com.android.server.wifi.WifiMonitor r0;
        com.android.server.wifi.WifiMonitor$WifiMonitorSingleton $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        $r1 = staticinvoke <com.android.server.wifi.WifiMonitor$WifiMonitorSingleton: com.android.server.wifi.WifiMonitor$WifiMonitorSingleton access$000()>();

        $r2 = r0.<com.android.server.wifi.WifiMonitor: java.lang.String mInterfaceName>;

        virtualinvoke $r1.<com.android.server.wifi.WifiMonitor$WifiMonitorSingleton: void stopMonitoring(java.lang.String)>($r2);

        return;
    }

    public void stopSupplicant()
    {
        com.android.server.wifi.WifiMonitor r0;
        com.android.server.wifi.WifiMonitor$WifiMonitorSingleton $r1;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        $r1 = staticinvoke <com.android.server.wifi.WifiMonitor$WifiMonitorSingleton: com.android.server.wifi.WifiMonitor$WifiMonitorSingleton access$000()>();

        virtualinvoke $r1.<com.android.server.wifi.WifiMonitor$WifiMonitorSingleton: void stopSupplicant()>();

        return;
    }

    public void killSupplicant(boolean)
    {
        com.android.server.wifi.WifiMonitor r0;
        boolean z0;
        com.android.server.wifi.WifiMonitor$WifiMonitorSingleton $r1;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <com.android.server.wifi.WifiMonitor$WifiMonitorSingleton: com.android.server.wifi.WifiMonitor$WifiMonitorSingleton access$000()>();

        virtualinvoke $r1.<com.android.server.wifi.WifiMonitor$WifiMonitorSingleton: void killSupplicant(boolean)>(z0);

        return;
    }

    private void logDbg(java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        java.lang.String r1;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiMonitor", r1);

        return;
    }

    private boolean dispatchEvent(java.lang.String, java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        java.lang.String r1, r2, r3, r4, r7, $r11, $r15, $r21, $r28, $r32, r36, r38;
        int i0, i2, i3, i4, i5, i6, i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i32, $i33, $i34, $i35, $i36, $i37, $i38, i39, i40, i41;
        byte b1;
        java.lang.String[] r5, r6, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36;
        char c8;
        com.android.internal.util.StateMachine $r8, $r12, $r13, $r14, $r19, $r20, $r22, $r23, $r26, $r27;
        java.util.regex.Pattern $r10;
        java.lang.StringBuilder $r16, $r17, $r18, $r24, $r25, $r29, $r30, $r31, $r33, $r34;
        java.lang.NumberFormatException $r35;
        java.util.regex.Matcher r37;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        if $z0 == 0 goto label01;

        if r1 == null goto label01;

        $z36 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("CTRL-EVENT-BSS-ADDED");

        if $z36 != 0 goto label01;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WifiMonitor:");

        $r34 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cnt=");

        $i38 = <com.android.server.wifi.WifiMonitor: int eventLogCounter>;

        $r32 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i38);

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dispatchEvent: ");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void logDbg(java.lang.String)>($r28);

     label01:
        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("CTRL-EVENT-");

        if $z1 != 0 goto label16;

        $z27 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("WPA:");

        if $z27 == 0 goto label02;

        $i37 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("pre-shared key may be incorrect");

        if 0 >= $i37 goto label02;

        $r26 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $i36 = <com.android.server.wifi.WifiMonitor: int eventLogCounter>;

        virtualinvoke $r26.<com.android.internal.util.StateMachine: void sendMessage(int,int)>(147463, $i36);

        goto label15;

     label02:
        $z26 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("WPS-SUCCESS");

        if $z26 == 0 goto label03;

        $r27 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        virtualinvoke $r27.<com.android.internal.util.StateMachine: void sendMessage(int)>(147464);

        goto label15;

     label03:
        $z23 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("WPS-FAIL");

        if $z23 == 0 goto label04;

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void handleWpsFailEvent(java.lang.String)>(r1);

        goto label15;

     label04:
        $z22 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("WPS-OVERLAP-DETECTED");

        if $z22 == 0 goto label05;

        $r20 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        virtualinvoke $r20.<com.android.internal.util.StateMachine: void sendMessage(int)>(147466);

        goto label15;

     label05:
        $z25 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("WPS-TIMEOUT");

        if $z25 == 0 goto label06;

        $r19 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        virtualinvoke $r19.<com.android.internal.util.StateMachine: void sendMessage(int)>(147467);

        goto label15;

     label06:
        $z24 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P");

        if $z24 == 0 goto label07;

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void handleP2pEvents(java.lang.String)>(r1);

        goto label15;

     label07:
        $z33 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("AP");

        if $z33 == 0 goto label08;

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void handleHostApEvents(java.lang.String)>(r1);

        goto label15;

     label08:
        $z32 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("GAS-QUERY-");

        if $z32 == 0 goto label09;

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void handleGasQueryEvents(java.lang.String)>(r1);

        goto label15;

     label09:
        $z35 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("RX-HS20-ANQP-ICON");

        if $z35 == 0 goto label10;

        $r23 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine2>;

        if $r23 == null goto label15;

        $r22 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine2>;

        $i35 = <com.android.server.wifi.WifiMonitor: int RX_HS20_ANQP_ICON_STR_LEN>;

        $i34 = $i35 + 1;

        $r21 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i34);

        virtualinvoke $r22.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147509, $r21);

        goto label15;

     label10:
        $z34 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("HS20-");

        if $z34 == 0 goto label11;

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void handleHs20Events(java.lang.String)>(r1);

        goto label15;

     label11:
        $z29 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("CTRL-REQ-");

        if $z29 == 0 goto label12;

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void handleRequests(java.lang.String)>(r1);

        goto label15;

     label12:
        $z28 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("Trying to associate with ");

        if $z28 == 0 goto label13;

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void handleTargetBSSIDEvent(java.lang.String)>(r1);

        goto label15;

     label13:
        $z31 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("Associated with ");

        if $z31 == 0 goto label14;

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void handleAssociatedBSSIDEvent(java.lang.String)>(r1);

        goto label15;

     label14:
        $z30 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        if $z30 == 0 goto label15;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t identify event type - ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WifiMonitor", $r15);

     label15:
        $i32 = <com.android.server.wifi.WifiMonitor: int eventLogCounter>;

        $i33 = $i32 + 1;

        <com.android.server.wifi.WifiMonitor: int eventLogCounter> = $i33;

        return 0;

     label16:
        $i9 = <com.android.server.wifi.WifiMonitor: int EVENT_PREFIX_LEN_STR>;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i9);

        i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(32);

        if i0 == -1 goto label17;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label17:
        $i10 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i10 != 0 goto label19;

        $z21 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        if $z21 == 0 goto label18;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WifiMonitor", "Received wpa_supplicant event with empty event name");

     label18:
        $i26 = <com.android.server.wifi.WifiMonitor: int eventLogCounter>;

        $i27 = $i26 + 1;

        <com.android.server.wifi.WifiMonitor: int eventLogCounter> = $i27;

        return 0;

     label19:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("CONNECTED");

        if $z2 == 0 goto label20;

        b1 = 1;

        goto label33;

     label20:
        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("DISCONNECTED");

        if $z4 == 0 goto label21;

        b1 = 2;

        goto label33;

     label21:
        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("STATE-CHANGE");

        if $z3 == 0 goto label22;

        b1 = 3;

        goto label33;

     label22:
        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("SCAN-RESULTS");

        if $z6 == 0 goto label23;

        b1 = 4;

        goto label33;

     label23:
        $z5 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("LINK-SPEED");

        if $z5 == 0 goto label24;

        b1 = 5;

        goto label33;

     label24:
        $z8 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("TERMINATING");

        if $z8 == 0 goto label25;

        b1 = 6;

        goto label33;

     label25:
        $z7 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("DRIVER-STATE");

        if $z7 == 0 goto label26;

        b1 = 7;

        goto label33;

     label26:
        $z10 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("EAP-FAILURE");

        if $z10 == 0 goto label27;

        b1 = 8;

        goto label33;

     label27:
        $z9 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("ASSOC-REJECT");

        if $z9 == 0 goto label28;

        b1 = 9;

        goto label33;

     label28:
        $z13 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("SSID-TEMP-DISABLED");

        if $z13 == 0 goto label29;

        b1 = 10;

        goto label33;

     label29:
        $z14 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("SSID-REENABLED");

        if $z14 == 0 goto label30;

        b1 = 11;

        goto label33;

     label30:
        $z11 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("BSS-ADDED");

        if $z11 == 0 goto label31;

        b1 = 12;

        goto label33;

     label31:
        $z12 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("BSS-REMOVED");

        if $z12 == 0 goto label32;

        b1 = 13;

        goto label33;

     label32:
        b1 = 14;

     label33:
        r4 = r1;

        if b1 == 7 goto label34;

        if b1 != 5 goto label35;

     label34:
        $r9 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        r4 = $r9[1];

        goto label39;

     label35:
        if b1 == 3 goto label36;

        if b1 != 8 goto label38;

     label36:
        i2 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(" ");

        if i2 == -1 goto label37;

        $i28 = i2 + 1;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i28);

     label37:
        goto label39;

     label38:
        i39 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(" - ");

        if i39 == -1 goto label39;

        $i29 = i39 + 3;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i29);

     label39:
        if b1 == 10 goto label40;

        if b1 != 11 goto label48;

     label40:
        r36 = null;

        i3 = -1;

        i4 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(" ");

        if i4 == -1 goto label41;

        $i15 = i4 + 1;

        r36 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i15);

     label41:
        if r36 == null goto label45;

        r5 = virtualinvoke r36.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        r6 = r5;

        i5 = lengthof r6;

        i6 = 0;

     label42:
        if i6 >= i5 goto label45;

        r7 = r6[i6];

        $z15 = virtualinvoke r7.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(0, "id=", 0, 3);

        if $z15 == 0 goto label44;

        i7 = 3;

        i3 = 0;

     label43:
        $i16 = virtualinvoke r7.<java.lang.String: int length()>();

        if i7 >= $i16 goto label44;

        c8 = virtualinvoke r7.<java.lang.String: char charAt(int)>(i7);

        if c8 < 48 goto label44;

        if c8 > 57 goto label44;

        i40 = i3 * 10;

        $i14 = c8 - 48;

        i3 = i40 + $i14;

        i7 = i7 + 1;

        goto label43;

     label44:
        i6 = i6 + 1;

        goto label42;

     label45:
        $r8 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        if b1 != 10 goto label46;

        $i13 = 147469;

        goto label47;

     label46:
        $i13 = 147470;

     label47:
        virtualinvoke $r8.<com.android.internal.util.StateMachine: void sendMessage(int,int,int,java.lang.Object)>($i13, i3, 0, r36);

        goto label63;

     label48:
        if b1 != 3 goto label49;

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void handleSupplicantStateChange(java.lang.String)>(r4);

        goto label63;

     label49:
        if b1 != 7 goto label50;

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void handleDriverEvent(java.lang.String)>(r4);

        goto label63;

     label50:
        if b1 != 6 goto label53;

        $z19 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("recv error");

        if $z19 == 0 goto label52;

        $i23 = <com.android.server.wifi.WifiMonitor: int sRecvErrors>;

        $i24 = $i23 + 1;

        <com.android.server.wifi.WifiMonitor: int sRecvErrors> = $i24;

        if $i24 <= 10 goto label51;

        $z20 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        if $z20 == 0 goto label52;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiMonitor", "too many recv errors, closing connection");

        goto label52;

     label51:
        $i25 = <com.android.server.wifi.WifiMonitor: int eventLogCounter>;

        $i21 = $i25 + 1;

        <com.android.server.wifi.WifiMonitor: int eventLogCounter> = $i21;

        return 0;

     label52:
        $r14 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $i19 = <com.android.server.wifi.WifiMonitor: int eventLogCounter>;

        virtualinvoke $r14.<com.android.internal.util.StateMachine: void sendMessage(int,int)>(147458, $i19);

        return 1;

     label53:
        if b1 != 8 goto label54;

        $z17 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("EAP authentication failed");

        if $z17 == 0 goto label63;

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void logDbg(java.lang.String)>("WifiMonitor send auth failure (EAP_AUTH_FAILURE) ");

        $r13 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $i20 = <com.android.server.wifi.WifiMonitor: int eventLogCounter>;

        virtualinvoke $r13.<com.android.internal.util.StateMachine: void sendMessage(int,int)>(147463, $i20);

        goto label63;

     label54:
        if b1 != 9 goto label60;

        $r10 = <com.android.server.wifi.WifiMonitor: java.util.regex.Pattern mAssocRejectEventPattern>;

        r37 = virtualinvoke $r10.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r4);

        r38 = "";

        i41 = -1;

        $z16 = virtualinvoke r37.<java.util.regex.Matcher: boolean find()>();

        if $z16 != 0 goto label55;

        $z18 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        if $z18 == 0 goto label59;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiMonitor", "Assoc Reject: Could not parse assoc reject string");

        goto label59;

     label55:
        r38 = virtualinvoke r37.<java.util.regex.Matcher: java.lang.String group(int)>(1);

     label56:
        $r11 = virtualinvoke r37.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        i41 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);

     label57:
        goto label59;

     label58:
        $r35 := @caughtexception;

        i41 = -1;

     label59:
        $r12 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $i17 = <com.android.server.wifi.WifiMonitor: int eventLogCounter>;

        virtualinvoke $r12.<com.android.internal.util.StateMachine: void sendMessage(int,int,int,java.lang.Object)>(147499, $i17, i41, r38);

        goto label63;

     label60:
        if b1 != 12 goto label61;

        goto label63;

     label61:
        if b1 != 13 goto label62;

        goto label63;

     label62:
        virtualinvoke r0.<com.android.server.wifi.WifiMonitor: void handleEvent(int,java.lang.String)>(b1, r4);

     label63:
        <com.android.server.wifi.WifiMonitor: int sRecvErrors> = 0;

        $i11 = <com.android.server.wifi.WifiMonitor: int eventLogCounter>;

        $i12 = $i11 + 1;

        <com.android.server.wifi.WifiMonitor: int eventLogCounter> = $i12;

        return 0;

        catch java.lang.NumberFormatException from label56 to label57 with label58;
    }

    private void handleDriverEvent(java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        java.lang.String r1;
        boolean $z0;
        com.android.internal.util.StateMachine $r2;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("HANGED");

        if $z0 == 0 goto label2;

        $r2 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        virtualinvoke $r2.<com.android.internal.util.StateMachine: void sendMessage(int)>(147468);

     label2:
        return;
    }

    void handleEvent(int, java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        int i0;
        java.lang.String r1, $r4, $r8, $r13, $r17;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7, $r12, $r14, $r15, $r16, $r18;
        com.android.internal.util.StateMachine $r9;
        android.net.NetworkInfo$DetailedState $r10, $r11;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        if $z0 == 0 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleEvent ");

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void logDbg(java.lang.String)>($r17);

     label1:
        lookupswitch(i0)
        {
            case 1: goto label3;
            case 2: goto label2;
            case 4: goto label4;
            case 14: goto label5;
            default: goto label6;
        };

     label2:
        $r10 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void handleNetworkStateChange(android.net.NetworkInfo$DetailedState,java.lang.String)>($r10, r1);

        goto label6;

     label3:
        $r11 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void handleNetworkStateChange(android.net.NetworkInfo$DetailedState,java.lang.String)>($r11, r1);

        goto label6;

     label4:
        $r9 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        virtualinvoke $r9.<com.android.internal.util.StateMachine: void sendMessage(int)>(147461);

        goto label6;

     label5:
        $z1 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        if $z1 == 0 goto label6;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleEvent unknown: ");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void logDbg(java.lang.String)>($r8);

        goto label6;

     label6:
        return;
    }

    private void handleTargetBSSIDEvent(java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        java.lang.String r1, r2, $r8;
        java.util.regex.Matcher r3;
        java.util.regex.Pattern $r4;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7;
        int $i1;
        com.android.internal.util.StateMachine $r9;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: java.lang.String;

        r2 = null;

        $r4 = <com.android.server.wifi.WifiMonitor: java.util.regex.Pattern mTargetBSSIDPattern>;

        r3 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        goto label2;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("didn\'t find BSSID ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiMonitor", $r8);

     label2:
        $r9 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $i1 = <com.android.server.wifi.WifiMonitor: int eventLogCounter>;

        virtualinvoke $r9.<com.android.internal.util.StateMachine: void sendMessage(int,int,int,java.lang.Object)>(131213, $i1, 0, r2);

        return;
    }

    private void handleAssociatedBSSIDEvent(java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        java.lang.String r1, r2, $r8;
        java.util.regex.Matcher r3;
        java.util.regex.Pattern $r4;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7;
        int $i1;
        com.android.internal.util.StateMachine $r9;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: java.lang.String;

        r2 = null;

        $r4 = <com.android.server.wifi.WifiMonitor: java.util.regex.Pattern mAssociatedPattern>;

        r3 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        goto label2;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleAssociatedBSSIDEvent: didn\'t find BSSID ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiMonitor", $r8);

     label2:
        $r9 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $i1 = <com.android.server.wifi.WifiMonitor: int eventLogCounter>;

        virtualinvoke $r9.<com.android.internal.util.StateMachine: void sendMessage(int,int,int,java.lang.Object)>(131219, $i1, 0, r2);

        return;
    }

    private void handleWpsFailEvent(java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        java.lang.String r1, r4, r5;
        java.util.regex.Pattern r2;
        java.util.regex.Matcher r3;
        int i0, i1, i2;
        boolean $z0;
        com.android.internal.util.StateMachine $r6, $r7, $r9, $r11, $r12, $r13, $r15, $r16, $r17, $r20;
        android.os.Message $r8, $r10, $r14, $r18, $r19;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("WPS-FAIL msg=\\d+(?: config_error=(\\d+))?(?: reason=(\\d+))?");

        r3 = virtualinvoke r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        i0 = 0;

        $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label8;

        r4 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        r5 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        if r5 == null goto label4;

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r5);

        lookupswitch(i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r20 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r17 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r19 = virtualinvoke $r17.<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,int,int)>(147465, 5, 0);

        virtualinvoke $r20.<com.android.internal.util.StateMachine: void sendMessage(android.os.Message)>($r19);

        return;

     label2:
        $r15 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r16 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r18 = virtualinvoke $r16.<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,int,int)>(147465, 4, 0);

        virtualinvoke $r15.<com.android.internal.util.StateMachine: void sendMessage(android.os.Message)>($r18);

        return;

     label3:
        i0 = i1;

     label4:
        if r4 == null goto label8;

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r4);

        lookupswitch(i2)
        {
            case 12: goto label6;
            case 18: goto label5;
            default: goto label7;
        };

     label5:
        $r11 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r9 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r10 = virtualinvoke $r9.<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,int,int)>(147465, 6, 0);

        virtualinvoke $r11.<com.android.internal.util.StateMachine: void sendMessage(android.os.Message)>($r10);

        return;

     label6:
        $r12 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r13 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r14 = virtualinvoke $r13.<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,int,int)>(147465, 3, 0);

        virtualinvoke $r12.<com.android.internal.util.StateMachine: void sendMessage(android.os.Message)>($r14);

        return;

     label7:
        if i0 != 0 goto label8;

        i0 = i2;

     label8:
        $r7 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r6 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r8 = virtualinvoke $r6.<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,int,int)>(147465, 0, i0);

        virtualinvoke $r7.<com.android.internal.util.StateMachine: void sendMessage(android.os.Message)>($r8);

        return;
    }

    private com.android.server.wifi.p2p.WifiP2pServiceImpl$P2pStatus p2pError(java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        java.lang.String r1, $r6, $r7, $r8;
        com.android.server.wifi.p2p.WifiP2pServiceImpl$P2pStatus r2, $r10;
        java.lang.String[] r3, r4;
        java.lang.NumberFormatException r5, $r9;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: java.lang.String;

        r2 = <com.android.server.wifi.p2p.WifiP2pServiceImpl$P2pStatus: com.android.server.wifi.p2p.WifiP2pServiceImpl$P2pStatus UNKNOWN>;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        $i0 = lengthof r3;

        if $i0 >= 2 goto label1;

        return r2;

     label1:
        $r6 = r3[1];

        r4 = virtualinvoke $r6.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        $i1 = lengthof r4;

        if $i1 == 2 goto label2;

        return r2;

     label2:
        $r7 = r4[1];

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("FREQ_CONFLICT");

        if $z0 == 0 goto label3;

        $r10 = <com.android.server.wifi.p2p.WifiP2pServiceImpl$P2pStatus: com.android.server.wifi.p2p.WifiP2pServiceImpl$P2pStatus NO_COMMON_CHANNEL>;

        return $r10;

     label3:
        $r8 = r4[1];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        r2 = staticinvoke <com.android.server.wifi.p2p.WifiP2pServiceImpl$P2pStatus: com.android.server.wifi.p2p.WifiP2pServiceImpl$P2pStatus valueOf(int)>($i2);

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        r5 = $r9;

        virtualinvoke r5.<java.lang.NumberFormatException: void printStackTrace()>();

     label6:
        return r2;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    private void handleP2pEvents(java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        java.lang.String r1, $r6;
        java.util.List r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        java.lang.StringBuilder $r3, $r4, $r5;
        com.android.internal.util.StateMachine $r7, $r8, $r9, $r11, $r15, $r16, $r17, $r18, $r22, $r24, $r25, $r26, $r27, $r29, $r31, $r34, $r35, $r37;
        android.net.wifi.p2p.WifiP2pProvDiscEvent $r10, $r12, $r13, $r14;
        com.android.server.wifi.p2p.WifiP2pServiceImpl$P2pStatus $r19, $r28, $r32;
        android.net.wifi.p2p.WifiP2pGroup $r20, $r21, $r23;
        android.net.wifi.p2p.WifiP2pConfig $r30;
        android.net.wifi.p2p.WifiP2pDevice $r33, $r36;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-DEVICE-FOUND");

        if $z0 == 0 goto label01;

        $r34 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r33 = new android.net.wifi.p2p.WifiP2pDevice;

        specialinvoke $r33.<android.net.wifi.p2p.WifiP2pDevice: void <init>(java.lang.String)>(r1);

        virtualinvoke $r34.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147477, $r33);

        goto label19;

     label01:
        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-DEVICE-LOST");

        if $z1 == 0 goto label02;

        $r37 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r36 = new android.net.wifi.p2p.WifiP2pDevice;

        specialinvoke $r36.<android.net.wifi.p2p.WifiP2pDevice: void <init>(java.lang.String)>(r1);

        virtualinvoke $r37.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147478, $r36);

        goto label19;

     label02:
        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-FIND-STOPPED");

        if $z2 == 0 goto label03;

        $r35 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        virtualinvoke $r35.<com.android.internal.util.StateMachine: void sendMessage(int)>(147493);

        goto label19;

     label03:
        $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-GO-NEG-REQUEST");

        if $z3 == 0 goto label04;

        $r29 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r30 = new android.net.wifi.p2p.WifiP2pConfig;

        specialinvoke $r30.<android.net.wifi.p2p.WifiP2pConfig: void <init>(java.lang.String)>(r1);

        virtualinvoke $r29.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147479, $r30);

        goto label19;

     label04:
        $z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-GO-NEG-SUCCESS");

        if $z4 == 0 goto label05;

        $r31 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        virtualinvoke $r31.<com.android.internal.util.StateMachine: void sendMessage(int)>(147481);

        goto label19;

     label05:
        $z5 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-GO-NEG-FAILURE");

        if $z5 == 0 goto label06;

        $r26 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r32 = specialinvoke r0.<com.android.server.wifi.WifiMonitor: com.android.server.wifi.p2p.WifiP2pServiceImpl$P2pStatus p2pError(java.lang.String)>(r1);

        virtualinvoke $r26.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147482, $r32);

        goto label19;

     label06:
        $z6 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-GROUP-FORMATION-SUCCESS");

        if $z6 == 0 goto label07;

        $r27 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        virtualinvoke $r27.<com.android.internal.util.StateMachine: void sendMessage(int)>(147483);

        goto label19;

     label07:
        $z7 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-GROUP-FORMATION-FAILURE");

        if $z7 == 0 goto label08;

        $r24 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r28 = specialinvoke r0.<com.android.server.wifi.WifiMonitor: com.android.server.wifi.p2p.WifiP2pServiceImpl$P2pStatus p2pError(java.lang.String)>(r1);

        virtualinvoke $r24.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147484, $r28);

        goto label19;

     label08:
        $z8 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-GROUP-STARTED");

        if $z8 == 0 goto label09;

        $r25 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r21 = new android.net.wifi.p2p.WifiP2pGroup;

        specialinvoke $r21.<android.net.wifi.p2p.WifiP2pGroup: void <init>(java.lang.String)>(r1);

        virtualinvoke $r25.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147485, $r21);

        goto label19;

     label09:
        $z9 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-GROUP-REMOVED");

        if $z9 == 0 goto label10;

        $r22 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r23 = new android.net.wifi.p2p.WifiP2pGroup;

        specialinvoke $r23.<android.net.wifi.p2p.WifiP2pGroup: void <init>(java.lang.String)>(r1);

        virtualinvoke $r22.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147486, $r23);

        goto label19;

     label10:
        $z10 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-INVITATION-RECEIVED");

        if $z10 == 0 goto label11;

        $r18 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r20 = new android.net.wifi.p2p.WifiP2pGroup;

        specialinvoke $r20.<android.net.wifi.p2p.WifiP2pGroup: void <init>(java.lang.String)>(r1);

        virtualinvoke $r18.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147487, $r20);

        goto label19;

     label11:
        $z11 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-INVITATION-RESULT");

        if $z11 == 0 goto label12;

        $r16 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r19 = specialinvoke r0.<com.android.server.wifi.WifiMonitor: com.android.server.wifi.p2p.WifiP2pServiceImpl$P2pStatus p2pError(java.lang.String)>(r1);

        virtualinvoke $r16.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147488, $r19);

        goto label19;

     label12:
        $z12 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-PROV-DISC-PBC-REQ");

        if $z12 == 0 goto label13;

        $r17 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r13 = new android.net.wifi.p2p.WifiP2pProvDiscEvent;

        specialinvoke $r13.<android.net.wifi.p2p.WifiP2pProvDiscEvent: void <init>(java.lang.String)>(r1);

        virtualinvoke $r17.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147489, $r13);

        goto label19;

     label13:
        $z14 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-PROV-DISC-PBC-RESP");

        if $z14 == 0 goto label14;

        $r15 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r14 = new android.net.wifi.p2p.WifiP2pProvDiscEvent;

        specialinvoke $r14.<android.net.wifi.p2p.WifiP2pProvDiscEvent: void <init>(java.lang.String)>(r1);

        virtualinvoke $r15.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147490, $r14);

        goto label19;

     label14:
        $z13 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-PROV-DISC-ENTER-PIN");

        if $z13 == 0 goto label15;

        $r11 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r12 = new android.net.wifi.p2p.WifiP2pProvDiscEvent;

        specialinvoke $r12.<android.net.wifi.p2p.WifiP2pProvDiscEvent: void <init>(java.lang.String)>(r1);

        virtualinvoke $r11.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147491, $r12);

        goto label19;

     label15:
        $z16 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-PROV-DISC-SHOW-PIN");

        if $z16 == 0 goto label16;

        $r9 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r10 = new android.net.wifi.p2p.WifiP2pProvDiscEvent;

        specialinvoke $r10.<android.net.wifi.p2p.WifiP2pProvDiscEvent: void <init>(java.lang.String)>(r1);

        virtualinvoke $r9.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147492, $r10);

        goto label19;

     label16:
        $z15 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-PROV-DISC-FAILURE");

        if $z15 == 0 goto label17;

        $r7 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        virtualinvoke $r7.<com.android.internal.util.StateMachine: void sendMessage(int)>(147495);

        goto label19;

     label17:
        $z17 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("P2P-SERV-DISC-RESP");

        if $z17 == 0 goto label19;

        r2 = staticinvoke <android.net.wifi.p2p.nsd.WifiP2pServiceResponse: java.util.List newInstance(java.lang.String)>(r1);

        if r2 == null goto label18;

        $r8 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        virtualinvoke $r8.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147494, r2);

        goto label19;

     label18:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Null service resp ");

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiMonitor", $r6);

     label19:
        return;
    }

    private void handleHostApEvents(java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        java.lang.String r1, $r3, $r4;
        java.lang.String[] r2;
        boolean $z0, $z1;
        android.net.wifi.p2p.WifiP2pDevice $r5, $r7;
        com.android.internal.util.StateMachine $r6, $r8;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        $r3 = r2[0];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("AP-STA-CONNECTED");

        if $z0 == 0 goto label1;

        $r8 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r7 = new android.net.wifi.p2p.WifiP2pDevice;

        specialinvoke $r7.<android.net.wifi.p2p.WifiP2pDevice: void <init>(java.lang.String)>(r1);

        virtualinvoke $r8.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147498, $r7);

        goto label2;

     label1:
        $r4 = r2[0];

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("AP-STA-DISCONNECTED");

        if $z1 == 0 goto label2;

        $r6 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r5 = new android.net.wifi.p2p.WifiP2pDevice;

        specialinvoke $r5.<android.net.wifi.p2p.WifiP2pDevice: void <init>(java.lang.String)>(r1);

        virtualinvoke $r6.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147497, $r5);

     label2:
        return;
    }

    private void handleGasQueryEvents(java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        java.lang.String r1, r3, r5, $r11, $r13, $r14, $r15;
        java.lang.String[] r2, r4, r6;
        byte b0, $b5;
        int i1, i2, $i4;
        com.android.internal.util.StateMachine $r7, $r12, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: java.lang.String;

        $r7 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine2>;

        if $r7 != null goto label01;

        return;

     label01:
        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("GAS-QUERY-START");

        if $z0 == 0 goto label02;

        $r16 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine2>;

        virtualinvoke $r16.<com.android.internal.util.StateMachine: void sendMessage(int)>(147507);

        goto label11;

     label02:
        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("GAS-QUERY-DONE");

        if $z1 == 0 goto label10;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        r3 = null;

        b0 = 0;

        r4 = r2;

        i1 = lengthof r4;

        i2 = 0;

     label03:
        if i2 >= i1 goto label09;

        r5 = r4[i2];

        r6 = virtualinvoke r5.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        $i4 = lengthof r6;

        if $i4 == 2 goto label04;

        goto label08;

     label04:
        $r13 = r6[0];

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("addr");

        if $z3 == 0 goto label05;

        r3 = r6[1];

        goto label08;

     label05:
        $r14 = r6[0];

        $z4 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("result");

        if $z4 == 0 goto label08;

        $r15 = r6[1];

        $z5 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("SUCCESS");

        if $z5 == 0 goto label06;

        $b5 = 1;

        goto label07;

     label06:
        $b5 = 0;

     label07:
        b0 = $b5;

        goto label08;

     label08:
        i2 = i2 + 1;

        goto label03;

     label09:
        $r12 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine2>;

        virtualinvoke $r12.<com.android.internal.util.StateMachine: void sendMessage(int,int,int,java.lang.Object)>(147508, b0, 0, r3);

        goto label11;

     label10:
        $z2 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        if $z2 == 0 goto label11;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown GAS query event: ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiMonitor", $r11);

     label11:
        return;
    }

    private void handleHs20Events(java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        java.lang.String r1, r3, $r9, $r10, $r12, $r14, r15;
        java.lang.String[] r2, r4;
        int i0, $i2, $i3, i4, i5;
        com.android.internal.util.StateMachine $r5, $r11, $r13;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine2>;

        if $r5 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("HS20-SUBSCRIPTION-REMEDIATION");

        if $z0 == 0 goto label3;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        i0 = -1;

        r3 = null;

        $i3 = lengthof r2;

        if $i3 < 3 goto label2;

        $r14 = r2[1];

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r14);

        r3 = r2[2];

     label2:
        $r13 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine2>;

        virtualinvoke $r13.<com.android.internal.util.StateMachine: void sendMessage(int,int,int,java.lang.Object)>(147517, i0, 0, r3);

        goto label6;

     label3:
        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("HS20-DEAUTH-IMMINENT-NOTICE");

        if $z1 == 0 goto label5;

        i4 = -1;

        i5 = -1;

        r15 = null;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        $i2 = lengthof r4;

        if $i2 < 4 goto label4;

        $r10 = r4[1];

        i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        $r12 = r4[2];

        i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12);

        r15 = r4[3];

     label4:
        $r11 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine2>;

        virtualinvoke $r11.<com.android.internal.util.StateMachine: void sendMessage(int,int,int,java.lang.Object)>(147518, i4, i5, r15);

        goto label6;

     label5:
        $z2 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        if $z2 == 0 goto label6;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown HS20 event: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiMonitor", $r9);

     label6:
        return;
    }

    private void handleRequests(java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        java.lang.String r1, r2, r3, $r8, $r14, $r15, $r17, $r20, $r23, $r26;
        int i0, $i1, $i4, $i6;
        java.util.regex.Matcher r4, r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r6, $r7, $r9, $r11, $r12, $r13, $r22, $r24, $r25;
        java.util.regex.Pattern $r10, $r19;
        com.android.server.wifi.WifiStateMachine$SimAuthRequestData $r16, r30;
        com.android.internal.util.StateMachine $r18, $r27;
        java.lang.String[] $r21;
        java.lang.NumberFormatException $r28;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: java.lang.String;

        r2 = null;

        i0 = -2;

        $i1 = <com.android.server.wifi.WifiMonitor: int REQUEST_PREFIX_LEN_STR>;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 == 0 goto label01;

        return;

     label01:
        $z1 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("IDENTITY");

        if $z1 == 0 goto label07;

        $r19 = <com.android.server.wifi.WifiMonitor: java.util.regex.Pattern mRequestIdentityPattern>;

        r4 = virtualinvoke $r19.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

        $z5 = virtualinvoke r4.<java.util.regex.Matcher: boolean find()>();

        if $z5 == 0 goto label05;

        r2 = virtualinvoke r4.<java.util.regex.Matcher: java.lang.String group(int)>(2);

     label02:
        $r26 = virtualinvoke r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r26);

     label03:
        goto label06;

     label04:
        $r28 := @caughtexception;

        i0 = -1;

        goto label06;

     label05:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("didn\'t find SSID ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiMonitor", $r23);

     label06:
        $r27 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $i6 = <com.android.server.wifi.WifiMonitor: int eventLogCounter>;

        virtualinvoke $r27.<com.android.internal.util.StateMachine: void sendMessage(int,int,int,java.lang.Object)>(147471, $i6, i0, r2);

     label07:
        $z2 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("SIM");

        if $z2 == 0 goto label10;

        $r10 = <com.android.server.wifi.WifiMonitor: java.util.regex.Pattern mRequestGsmAuthPattern>;

        r29 = virtualinvoke $r10.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

        $z4 = virtualinvoke r29.<java.util.regex.Matcher: boolean find()>();

        if $z4 == 0 goto label08;

        $r16 = new com.android.server.wifi.WifiStateMachine$SimAuthRequestData;

        specialinvoke $r16.<com.android.server.wifi.WifiStateMachine$SimAuthRequestData: void <init>()>();

        r30 = $r16;

        $r15 = virtualinvoke r29.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15);

        r30.<com.android.server.wifi.WifiStateMachine$SimAuthRequestData: int networkId> = $i4;

        r30.<com.android.server.wifi.WifiStateMachine$SimAuthRequestData: int protocol> = 4;

        $r17 = virtualinvoke r29.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        r30.<com.android.server.wifi.WifiStateMachine$SimAuthRequestData: java.lang.String ssid> = $r17;

        $r20 = virtualinvoke r29.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        r30.<com.android.server.wifi.WifiStateMachine$SimAuthRequestData: java.lang.String[] challenges> = $r21;

        $r18 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        virtualinvoke $r18.<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>(147472, r30);

        goto label09;

     label08:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t parse SIM auth request - ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiMonitor", $r14);

     label09:
        goto label11;

     label10:
        $z3 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        if $z3 == 0 goto label11;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t identify request type - ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WifiMonitor", $r8);

     label11:
        return;

        catch java.lang.NumberFormatException from label02 to label03 with label04;
    }

    private void handleSupplicantStateChange(java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        java.lang.String r1, r4, r6, $r12, $r14, $r15, $r16, $r17, $r19;
        android.net.wifi.WifiSsid r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i8, $i9, i10, i11;
        java.lang.String[] r3, r5, r7;
        java.lang.StringBuilder $r9, $r11, $r13;
        android.net.wifi.SupplicantState $r10, r20, r22;
        boolean $z0, $z1, $z2;
        java.lang.NumberFormatException $r18;
        android.net.wifi.SupplicantState[] r21;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: java.lang.String;

        r2 = null;

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("SSID=");

        if i0 == -1 goto label01;

        $i9 = i0 + 5;

        $r19 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i9);

        r2 = staticinvoke <android.net.wifi.WifiSsid: android.net.wifi.WifiSsid createFromAsciiEncoded(java.lang.String)>($r19);

     label01:
        r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        r4 = null;

        i1 = -1;

        i2 = -1;

        r5 = r3;

        i3 = lengthof r5;

        i4 = 0;

     label02:
        if i4 >= i3 goto label10;

        r6 = r5[i4];

        r7 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        $i8 = lengthof r7;

        if $i8 == 2 goto label03;

        goto label09;

     label03:
        $r14 = r7[0];

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("BSSID");

        if $z0 == 0 goto label04;

        r4 = r7[1];

        goto label09;

     label04:
        $r15 = r7[1];

        i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15);

     label05:
        goto label07;

     label06:
        $r18 := @caughtexception;

        goto label09;

     label07:
        $r17 = r7[0];

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("id");

        if $z2 == 0 goto label08;

        i1 = i5;

        goto label09;

     label08:
        $r16 = r7[0];

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("state");

        if $z1 == 0 goto label09;

        i2 = i5;

     label09:
        i4 = i4 + 1;

        goto label02;

     label10:
        if i2 != -1 goto label11;

        return;

     label11:
        r20 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState INVALID>;

        r21 = staticinvoke <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState[] values()>();

        i10 = lengthof r21;

        i11 = 0;

     label12:
        if i11 >= i10 goto label14;

        r22 = r21[i11];

        $i6 = virtualinvoke r22.<android.net.wifi.SupplicantState: int ordinal()>();

        if $i6 != i2 goto label13;

        r20 = r22;

        goto label14;

     label13:
        i11 = i11 + 1;

        goto label12;

     label14:
        $r10 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState INVALID>;

        if r20 != $r10 goto label15;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid supplicant state: ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WifiMonitor", $r12);

     label15:
        virtualinvoke r0.<com.android.server.wifi.WifiMonitor: void notifySupplicantStateChange(int,android.net.wifi.WifiSsid,java.lang.String,android.net.wifi.SupplicantState)>(i1, r2, r4, r20);

        return;

        catch java.lang.NumberFormatException from label04 to label05 with label06;
    }

    private void handleNetworkStateChange(android.net.NetworkInfo$DetailedState, java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        android.net.NetworkInfo$DetailedState r1, $r6, $r7;
        java.lang.String r2, r3, $r9, $r10, $r12;
        int i0, i1, i3;
        java.util.regex.Matcher r4, r16;
        java.util.regex.Pattern $r8, $r11;
        boolean $z0, $z1, $z2, $z3;
        java.lang.NumberFormatException $r13, $r14, $r15;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: android.net.NetworkInfo$DetailedState;

        r2 := @parameter1: java.lang.String;

        r3 = null;

        i0 = -1;

        i1 = 0;

        i3 = 0;

        $r6 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        if r1 != $r6 goto label06;

        $r11 = <com.android.server.wifi.WifiMonitor: java.util.regex.Pattern mConnectedEventPattern>;

        r4 = virtualinvoke $r11.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z2 = virtualinvoke r4.<java.util.regex.Matcher: boolean find()>();

        if $z2 != 0 goto label01;

        $z3 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        if $z3 == 0 goto label05;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiMonitor", "handleNetworkStateChange: Couldnt find BSSID in event string");

        goto label05;

     label01:
        r3 = virtualinvoke r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

     label02:
        $r12 = virtualinvoke r4.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12);

     label03:
        goto label05;

     label04:
        $r14 := @caughtexception;

        i0 = -1;

     label05:
        virtualinvoke r0.<com.android.server.wifi.WifiMonitor: void notifyNetworkStateChange(android.net.NetworkInfo$DetailedState,java.lang.String,int,int)>(r1, r3, i0, i1);

        goto label15;

     label06:
        $r7 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        if r1 != $r7 goto label15;

        $r8 = <com.android.server.wifi.WifiMonitor: java.util.regex.Pattern mDisconnectedEventPattern>;

        r16 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z0 = virtualinvoke r16.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label07;

        $z1 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        if $z1 == 0 goto label14;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiMonitor", "handleNetworkStateChange: Could not parse disconnect string");

        goto label14;

     label07:
        r3 = virtualinvoke r16.<java.util.regex.Matcher: java.lang.String group(int)>(1);

     label08:
        $r9 = virtualinvoke r16.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

     label09:
        goto label11;

     label10:
        $r13 := @caughtexception;

        i1 = -1;

     label11:
        $r10 = virtualinvoke r16.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

     label12:
        goto label14;

     label13:
        $r15 := @caughtexception;

        i3 = -1;

     label14:
        virtualinvoke r0.<com.android.server.wifi.WifiMonitor: void notifyNetworkStateChange(android.net.NetworkInfo$DetailedState,java.lang.String,int,int)>(r1, r3, i3, i1);

     label15:
        return;

        catch java.lang.NumberFormatException from label02 to label03 with label04;
        catch java.lang.NumberFormatException from label08 to label09 with label10;
        catch java.lang.NumberFormatException from label11 to label12 with label13;
    }

    void notifyNetworkStateChange(android.net.NetworkInfo$DetailedState, java.lang.String, int, int)
    {
        com.android.server.wifi.WifiMonitor r0;
        android.net.NetworkInfo$DetailedState r1, $r4;
        java.lang.String r2, $r11, $r12;
        int i0, i1;
        android.os.Message r3, r16;
        com.android.internal.util.StateMachine $r5, $r6, $r14, $r15;
        boolean $z0;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r13;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        r1 := @parameter0: android.net.NetworkInfo$DetailedState;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r4 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        if r1 != $r4 goto label1;

        $r14 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        r3 = virtualinvoke $r14.<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(147459, i0, i1, r2);

        $r15 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        virtualinvoke $r15.<com.android.internal.util.StateMachine: void sendMessage(android.os.Message)>(r3);

        goto label3;

     label1:
        $r5 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        r16 = virtualinvoke $r5.<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(147460, i0, i1, r2);

        $z0 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        if $z0 == 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WifiMonitor notify network disconnect: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reason=");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.wifi.WifiMonitor: void logDbg(java.lang.String)>($r12);

     label2:
        $r6 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        virtualinvoke $r6.<com.android.internal.util.StateMachine: void sendMessage(android.os.Message)>(r16);

     label3:
        return;
    }

    void notifySupplicantStateChange(int, android.net.wifi.WifiSsid, java.lang.String, android.net.wifi.SupplicantState)
    {
        com.android.server.wifi.WifiMonitor r0;
        int i0, $i1;
        android.net.wifi.WifiSsid r1;
        java.lang.String r2;
        android.net.wifi.SupplicantState r3;
        com.android.server.wifi.StateChangeResult $r4;
        com.android.internal.util.StateMachine $r5, $r6;
        android.os.Message $r7;

        r0 := @this: com.android.server.wifi.WifiMonitor;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.wifi.WifiSsid;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.net.wifi.SupplicantState;

        $r5 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $r6 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        $i1 = <com.android.server.wifi.WifiMonitor: int eventLogCounter>;

        $r4 = new com.android.server.wifi.StateChangeResult;

        specialinvoke $r4.<com.android.server.wifi.StateChangeResult: void <init>(int,android.net.wifi.WifiSsid,java.lang.String,android.net.wifi.SupplicantState)>(i0, r1, r2, r3);

        $r7 = virtualinvoke $r6.<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(147462, $i1, 0, $r4);

        virtualinvoke $r5.<com.android.internal.util.StateMachine: void sendMessage(android.os.Message)>($r7);

        return;
    }

    static boolean access$102(com.android.server.wifi.WifiMonitor, boolean)
    {
        com.android.server.wifi.WifiMonitor r0;
        boolean z0;

        r0 := @parameter0: com.android.server.wifi.WifiMonitor;

        z0 := @parameter1: boolean;

        r0.<com.android.server.wifi.WifiMonitor: boolean mMonitoring> = z0;

        return z0;
    }

    static com.android.internal.util.StateMachine access$200(com.android.server.wifi.WifiMonitor)
    {
        com.android.server.wifi.WifiMonitor r0;
        com.android.internal.util.StateMachine $r1;

        r0 := @parameter0: com.android.server.wifi.WifiMonitor;

        $r1 = r0.<com.android.server.wifi.WifiMonitor: com.android.internal.util.StateMachine mStateMachine>;

        return $r1;
    }

    static boolean access$300()
    {
        boolean $z0;

        $z0 = <com.android.server.wifi.WifiMonitor: boolean DBG>;

        return $z0;
    }

    static com.android.server.wifi.WifiNative access$400(com.android.server.wifi.WifiMonitor)
    {
        com.android.server.wifi.WifiMonitor r0;
        com.android.server.wifi.WifiNative $r1;

        r0 := @parameter0: com.android.server.wifi.WifiMonitor;

        $r1 = r0.<com.android.server.wifi.WifiMonitor: com.android.server.wifi.WifiNative mWifiNative>;

        return $r1;
    }

    static boolean access$100(com.android.server.wifi.WifiMonitor)
    {
        com.android.server.wifi.WifiMonitor r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wifi.WifiMonitor;

        $z0 = r0.<com.android.server.wifi.WifiMonitor: boolean mMonitoring>;

        return $z0;
    }

    static boolean access$500(com.android.server.wifi.WifiMonitor, java.lang.String, java.lang.String)
    {
        com.android.server.wifi.WifiMonitor r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.wifi.WifiMonitor;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.wifi.WifiMonitor: boolean dispatchEvent(java.lang.String,java.lang.String)>(r1, r2);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1, $r2;
        int $i0, $i1, $i2;
        java.util.regex.Pattern $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        <com.android.server.wifi.WifiMonitor: int MAX_RECV_ERRORS> = 10;

        <com.android.server.wifi.WifiMonitor: java.lang.String WPA_RECV_ERROR_STR> = "recv error";

        <com.android.server.wifi.WifiMonitor: int HS20_DEAUTH_EVENT> = 147518;

        <com.android.server.wifi.WifiMonitor: int HS20_REMEDIATION_EVENT> = 147517;

        <com.android.server.wifi.WifiMonitor: int RX_HS20_ANQP_ICON_EVENT> = 147509;

        <com.android.server.wifi.WifiMonitor: int GAS_QUERY_DONE_EVENT> = 147508;

        <com.android.server.wifi.WifiMonitor: int GAS_QUERY_START_EVENT> = 147507;

        <com.android.server.wifi.WifiMonitor: int ASSOCIATION_REJECTION_EVENT> = 147499;

        <com.android.server.wifi.WifiMonitor: int AP_STA_CONNECTED_EVENT> = 147498;

        <com.android.server.wifi.WifiMonitor: int AP_STA_DISCONNECTED_EVENT> = 147497;

        <com.android.server.wifi.WifiMonitor: int P2P_PROV_DISC_FAILURE_EVENT> = 147495;

        <com.android.server.wifi.WifiMonitor: int P2P_SERV_DISC_RESP_EVENT> = 147494;

        <com.android.server.wifi.WifiMonitor: int P2P_FIND_STOPPED_EVENT> = 147493;

        <com.android.server.wifi.WifiMonitor: int P2P_PROV_DISC_SHOW_PIN_EVENT> = 147492;

        <com.android.server.wifi.WifiMonitor: int P2P_PROV_DISC_ENTER_PIN_EVENT> = 147491;

        <com.android.server.wifi.WifiMonitor: int P2P_PROV_DISC_PBC_RSP_EVENT> = 147490;

        <com.android.server.wifi.WifiMonitor: int P2P_PROV_DISC_PBC_REQ_EVENT> = 147489;

        <com.android.server.wifi.WifiMonitor: int P2P_INVITATION_RESULT_EVENT> = 147488;

        <com.android.server.wifi.WifiMonitor: int P2P_INVITATION_RECEIVED_EVENT> = 147487;

        <com.android.server.wifi.WifiMonitor: int P2P_GROUP_REMOVED_EVENT> = 147486;

        <com.android.server.wifi.WifiMonitor: int P2P_GROUP_STARTED_EVENT> = 147485;

        <com.android.server.wifi.WifiMonitor: int P2P_GROUP_FORMATION_FAILURE_EVENT> = 147484;

        <com.android.server.wifi.WifiMonitor: int P2P_GROUP_FORMATION_SUCCESS_EVENT> = 147483;

        <com.android.server.wifi.WifiMonitor: int P2P_GO_NEGOTIATION_FAILURE_EVENT> = 147482;

        <com.android.server.wifi.WifiMonitor: int P2P_GO_NEGOTIATION_SUCCESS_EVENT> = 147481;

        <com.android.server.wifi.WifiMonitor: int P2P_GO_NEGOTIATION_REQUEST_EVENT> = 147479;

        <com.android.server.wifi.WifiMonitor: int P2P_DEVICE_LOST_EVENT> = 147478;

        <com.android.server.wifi.WifiMonitor: int P2P_DEVICE_FOUND_EVENT> = 147477;

        <com.android.server.wifi.WifiMonitor: int SUP_REQUEST_SIM_AUTH> = 147472;

        <com.android.server.wifi.WifiMonitor: int SUP_REQUEST_IDENTITY> = 147471;

        <com.android.server.wifi.WifiMonitor: int SSID_REENABLED> = 147470;

        <com.android.server.wifi.WifiMonitor: int SSID_TEMP_DISABLED> = 147469;

        <com.android.server.wifi.WifiMonitor: int DRIVER_HUNG_EVENT> = 147468;

        <com.android.server.wifi.WifiMonitor: int WPS_TIMEOUT_EVENT> = 147467;

        <com.android.server.wifi.WifiMonitor: int WPS_OVERLAP_EVENT> = 147466;

        <com.android.server.wifi.WifiMonitor: int WPS_FAIL_EVENT> = 147465;

        <com.android.server.wifi.WifiMonitor: int WPS_SUCCESS_EVENT> = 147464;

        <com.android.server.wifi.WifiMonitor: int AUTHENTICATION_FAILURE_EVENT> = 147463;

        <com.android.server.wifi.WifiMonitor: int SUPPLICANT_STATE_CHANGE_EVENT> = 147462;

        <com.android.server.wifi.WifiMonitor: int SCAN_RESULTS_EVENT> = 147461;

        <com.android.server.wifi.WifiMonitor: int NETWORK_DISCONNECTION_EVENT> = 147460;

        <com.android.server.wifi.WifiMonitor: int NETWORK_CONNECTION_EVENT> = 147459;

        <com.android.server.wifi.WifiMonitor: int SUP_DISCONNECTION_EVENT> = 147458;

        <com.android.server.wifi.WifiMonitor: int SUP_CONNECTION_EVENT> = 147457;

        <com.android.server.wifi.WifiMonitor: int BASE> = 147456;

        <com.android.server.wifi.WifiMonitor: java.lang.String AP_STA_DISCONNECTED_STR> = "AP-STA-DISCONNECTED";

        <com.android.server.wifi.WifiMonitor: java.lang.String AP_STA_CONNECTED_STR> = "AP-STA-CONNECTED";

        <com.android.server.wifi.WifiMonitor: java.lang.String HOST_AP_EVENT_PREFIX_STR> = "AP";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_SERV_DISC_RESP_STR> = "P2P-SERV-DISC-RESP";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_PROV_DISC_FAILURE_STR> = "P2P-PROV-DISC-FAILURE";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_PROV_DISC_SHOW_PIN_STR> = "P2P-PROV-DISC-SHOW-PIN";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_PROV_DISC_ENTER_PIN_STR> = "P2P-PROV-DISC-ENTER-PIN";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_PROV_DISC_PBC_RSP_STR> = "P2P-PROV-DISC-PBC-RESP";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_PROV_DISC_PBC_REQ_STR> = "P2P-PROV-DISC-PBC-REQ";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_INVITATION_RESULT_STR> = "P2P-INVITATION-RESULT";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_INVITATION_RECEIVED_STR> = "P2P-INVITATION-RECEIVED";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_GROUP_REMOVED_STR> = "P2P-GROUP-REMOVED";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_GROUP_STARTED_STR> = "P2P-GROUP-STARTED";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_GROUP_FORMATION_FAILURE_STR> = "P2P-GROUP-FORMATION-FAILURE";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_GROUP_FORMATION_SUCCESS_STR> = "P2P-GROUP-FORMATION-SUCCESS";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_GO_NEG_FAILURE_STR> = "P2P-GO-NEG-FAILURE";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_GO_NEG_SUCCESS_STR> = "P2P-GO-NEG-SUCCESS";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_GO_NEG_REQUEST_STR> = "P2P-GO-NEG-REQUEST";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_FIND_STOPPED_STR> = "P2P-FIND-STOPPED";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_DEVICE_LOST_STR> = "P2P-DEVICE-LOST";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_DEVICE_FOUND_STR> = "P2P-DEVICE-FOUND";

        <com.android.server.wifi.WifiMonitor: java.lang.String P2P_EVENT_PREFIX_STR> = "P2P";

        <com.android.server.wifi.WifiMonitor: java.lang.String ASSOCIATED_WITH_STR> = "Associated with ";

        <com.android.server.wifi.WifiMonitor: java.lang.String TARGET_BSSID_STR> = "Trying to associate with ";

        <com.android.server.wifi.WifiMonitor: java.lang.String BSS_REMOVED_STR> = "BSS-REMOVED";

        <com.android.server.wifi.WifiMonitor: java.lang.String BSS_ADDED_STR> = "BSS-ADDED";

        <com.android.server.wifi.WifiMonitor: java.lang.String REENABLED_STR> = "SSID-REENABLED";

        <com.android.server.wifi.WifiMonitor: java.lang.String TEMP_DISABLED_STR> = "SSID-TEMP-DISABLED";

        <com.android.server.wifi.WifiMonitor: java.lang.String ASSOC_REJECT_STR> = "ASSOC-REJECT";

        <com.android.server.wifi.WifiMonitor: java.lang.String EAP_AUTH_FAILURE_STR> = "EAP authentication failed";

        <com.android.server.wifi.WifiMonitor: java.lang.String EAP_FAILURE_STR> = "EAP-FAILURE";

        <com.android.server.wifi.WifiMonitor: java.lang.String DRIVER_STATE_STR> = "DRIVER-STATE";

        <com.android.server.wifi.WifiMonitor: java.lang.String TERMINATING_STR> = "TERMINATING";

        <com.android.server.wifi.WifiMonitor: java.lang.String LINK_SPEED_STR> = "LINK-SPEED";

        <com.android.server.wifi.WifiMonitor: java.lang.String SCAN_RESULTS_STR> = "SCAN-RESULTS";

        <com.android.server.wifi.WifiMonitor: java.lang.String STATE_CHANGE_STR> = "STATE-CHANGE";

        <com.android.server.wifi.WifiMonitor: java.lang.String DISCONNECTED_STR> = "DISCONNECTED";

        <com.android.server.wifi.WifiMonitor: java.lang.String CONNECTED_STR> = "CONNECTED";

        <com.android.server.wifi.WifiMonitor: java.lang.String SIM_STR> = "SIM";

        <com.android.server.wifi.WifiMonitor: java.lang.String IDENTITY_STR> = "IDENTITY";

        <com.android.server.wifi.WifiMonitor: java.lang.String HS20_DEAUTH_STR> = "HS20-DEAUTH-IMMINENT-NOTICE";

        <com.android.server.wifi.WifiMonitor: java.lang.String HS20_SUB_REM_STR> = "HS20-SUBSCRIPTION-REMEDIATION";

        <com.android.server.wifi.WifiMonitor: java.lang.String HS20_PREFIX_STR> = "HS20-";

        <com.android.server.wifi.WifiMonitor: java.lang.String RX_HS20_ANQP_ICON_STR> = "RX-HS20-ANQP-ICON";

        <com.android.server.wifi.WifiMonitor: java.lang.String GAS_QUERY_DONE_STR> = "GAS-QUERY-DONE";

        <com.android.server.wifi.WifiMonitor: java.lang.String GAS_QUERY_START_STR> = "GAS-QUERY-START";

        <com.android.server.wifi.WifiMonitor: java.lang.String GAS_QUERY_PREFIX_STR> = "GAS-QUERY-";

        <com.android.server.wifi.WifiMonitor: java.lang.String WPS_TIMEOUT_STR> = "WPS-TIMEOUT";

        <com.android.server.wifi.WifiMonitor: java.lang.String WPS_OVERLAP_STR> = "WPS-OVERLAP-DETECTED";

        <com.android.server.wifi.WifiMonitor: int REASON_WEP_PROHIBITED> = 2;

        <com.android.server.wifi.WifiMonitor: int REASON_TKIP_ONLY_PROHIBITED> = 1;

        <com.android.server.wifi.WifiMonitor: int CONFIG_AUTH_FAILURE> = 18;

        <com.android.server.wifi.WifiMonitor: int CONFIG_MULTIPLE_PBC_DETECTED> = 12;

        <com.android.server.wifi.WifiMonitor: java.lang.String WPS_FAIL_PATTERN> = "WPS-FAIL msg=\\d+(?: config_error=(\\d+))?(?: reason=(\\d+))?";

        <com.android.server.wifi.WifiMonitor: java.lang.String WPS_FAIL_STR> = "WPS-FAIL";

        <com.android.server.wifi.WifiMonitor: java.lang.String WPS_SUCCESS_STR> = "WPS-SUCCESS";

        <com.android.server.wifi.WifiMonitor: java.lang.String PASSWORD_MAY_BE_INCORRECT_STR> = "pre-shared key may be incorrect";

        <com.android.server.wifi.WifiMonitor: java.lang.String WPA_EVENT_PREFIX_STR> = "WPA:";

        <com.android.server.wifi.WifiMonitor: java.lang.String REQUEST_PREFIX_STR> = "CTRL-REQ-";

        <com.android.server.wifi.WifiMonitor: java.lang.String EVENT_PREFIX_STR> = "CTRL-EVENT-";

        <com.android.server.wifi.WifiMonitor: int UNKNOWN> = 14;

        <com.android.server.wifi.WifiMonitor: int BSS_REMOVED> = 13;

        <com.android.server.wifi.WifiMonitor: int BSS_ADDED> = 12;

        <com.android.server.wifi.WifiMonitor: int SSID_REENABLE> = 11;

        <com.android.server.wifi.WifiMonitor: int SSID_TEMP_DISABLE> = 10;

        <com.android.server.wifi.WifiMonitor: int ASSOC_REJECT> = 9;

        <com.android.server.wifi.WifiMonitor: int EAP_FAILURE> = 8;

        <com.android.server.wifi.WifiMonitor: int DRIVER_STATE> = 7;

        <com.android.server.wifi.WifiMonitor: int TERMINATING> = 6;

        <com.android.server.wifi.WifiMonitor: int LINK_SPEED> = 5;

        <com.android.server.wifi.WifiMonitor: int SCAN_RESULTS> = 4;

        <com.android.server.wifi.WifiMonitor: int STATE_CHANGE> = 3;

        <com.android.server.wifi.WifiMonitor: int DISCONNECTED> = 2;

        <com.android.server.wifi.WifiMonitor: int CONNECTED> = 1;

        <com.android.server.wifi.WifiMonitor: java.lang.String TAG> = "WifiMonitor";

        <com.android.server.wifi.WifiMonitor: boolean VDBG> = 0;

        <com.android.server.wifi.WifiMonitor: boolean DBG> = 0;

        $r0 = "CTRL-EVENT-";

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        <com.android.server.wifi.WifiMonitor: int EVENT_PREFIX_LEN_STR> = $i0;

        $r1 = "CTRL-REQ-";

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        <com.android.server.wifi.WifiMonitor: int REQUEST_PREFIX_LEN_STR> = $i1;

        $r2 = "RX-HS20-ANQP-ICON";

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        <com.android.server.wifi.WifiMonitor: int RX_HS20_ANQP_ICON_STR_LEN> = $i2;

        <com.android.server.wifi.WifiMonitor: int eventLogCounter> = 0;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("((?:[0-9a-f]{2}:){5}[0-9a-f]{2}) .* \\[id=([0-9]+) ");

        <com.android.server.wifi.WifiMonitor: java.util.regex.Pattern mConnectedEventPattern> = $r3;

        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("((?:[0-9a-f]{2}:){5}[0-9a-f]{2}) +reason=([0-9]+) +locally_generated=([0-1])");

        <com.android.server.wifi.WifiMonitor: java.util.regex.Pattern mDisconnectedEventPattern> = $r4;

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("((?:[0-9a-f]{2}:){5}[0-9a-f]{2}) +status_code=([0-9]+)");

        <com.android.server.wifi.WifiMonitor: java.util.regex.Pattern mAssocRejectEventPattern> = $r5;

        $r6 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("Trying to associate with ((?:[0-9a-f]{2}:){5}[0-9a-f]{2}).*");

        <com.android.server.wifi.WifiMonitor: java.util.regex.Pattern mTargetBSSIDPattern> = $r6;

        $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("Associated with ((?:[0-9a-f]{2}:){5}[0-9a-f]{2}).*");

        <com.android.server.wifi.WifiMonitor: java.util.regex.Pattern mAssociatedPattern> = $r7;

        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("SIM-([0-9]*):GSM-AUTH((:[0-9a-f]+)+) needed for SSID (.+)");

        <com.android.server.wifi.WifiMonitor: java.util.regex.Pattern mRequestGsmAuthPattern> = $r8;

        $r9 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("IDENTITY-([0-9]+):Identity needed for SSID (.+)");

        <com.android.server.wifi.WifiMonitor: java.util.regex.Pattern mRequestIdentityPattern> = $r9;

        return;
    }
}
