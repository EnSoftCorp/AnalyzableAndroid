public final class javax.obex.PrivateInputStream extends java.io.InputStream
{
    private javax.obex.BaseStream mParent;
    private byte[] mData;
    private int mIndex;
    private boolean mOpen;

    public void <init>(javax.obex.BaseStream)
    {
        javax.obex.PrivateInputStream r0;
        javax.obex.BaseStream r1;
        byte[] $r2;

        r0 := @this: javax.obex.PrivateInputStream;

        r1 := @parameter0: javax.obex.BaseStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<javax.obex.PrivateInputStream: javax.obex.BaseStream mParent> = r1;

        $r2 = newarray (byte)[0];

        r0.<javax.obex.PrivateInputStream: byte[] mData> = $r2;

        r0.<javax.obex.PrivateInputStream: int mIndex> = 0;

        r0.<javax.obex.PrivateInputStream: boolean mOpen> = 1;

        return;
    }

    public synchronized int available() throws java.io.IOException
    {
        javax.obex.PrivateInputStream r0;
        byte[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: javax.obex.PrivateInputStream;

        specialinvoke r0.<javax.obex.PrivateInputStream: void ensureOpen()>();

        $r1 = r0.<javax.obex.PrivateInputStream: byte[] mData>;

        $i1 = lengthof $r1;

        $i0 = r0.<javax.obex.PrivateInputStream: int mIndex>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public synchronized int read() throws java.io.IOException
    {
        javax.obex.PrivateInputStream r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        byte $b4;
        short $s5;
        javax.obex.BaseStream $r3;
        boolean $z0;

        r0 := @this: javax.obex.PrivateInputStream;

        specialinvoke r0.<javax.obex.PrivateInputStream: void ensureOpen()>();

     label1:
        $r1 = r0.<javax.obex.PrivateInputStream: byte[] mData>;

        $i1 = lengthof $r1;

        $i0 = r0.<javax.obex.PrivateInputStream: int mIndex>;

        if $i1 != $i0 goto label2;

        $r3 = r0.<javax.obex.PrivateInputStream: javax.obex.BaseStream mParent>;

        $z0 = interfaceinvoke $r3.<javax.obex.BaseStream: boolean continueOperation(boolean,boolean)>(1, 1);

        if $z0 != 0 goto label1;

        return -1;

     label2:
        $r2 = r0.<javax.obex.PrivateInputStream: byte[] mData>;

        $i2 = r0.<javax.obex.PrivateInputStream: int mIndex>;

        $i3 = $i2 + 1;

        r0.<javax.obex.PrivateInputStream: int mIndex> = $i3;

        $b4 = $r2[$i2];

        $s5 = $b4 & 255;

        return $s5;
    }

    public int read(byte[]) throws java.io.IOException
    {
        javax.obex.PrivateInputStream r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: javax.obex.PrivateInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<javax.obex.PrivateInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public synchronized int read(byte[], int, int) throws java.io.IOException
    {
        javax.obex.PrivateInputStream r0;
        byte[] r1, $r3, $r4, $r5, $r7;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        javax.obex.BaseStream $r6;
        boolean $z0;
        java.io.IOException $r8;

        r0 := @this: javax.obex.PrivateInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("buffer is null");

        throw $r8;

     label1:
        $i6 = i0 | i1;

        if $i6 < 0 goto label2;

        $i7 = lengthof r1;

        $i8 = $i7 - i0;

        if i1 <= $i8 goto label3;

     label2:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>("index outof bound");

        throw $r2;

     label3:
        specialinvoke r0.<javax.obex.PrivateInputStream: void ensureOpen()>();

        $r3 = r0.<javax.obex.PrivateInputStream: byte[] mData>;

        $i10 = lengthof $r3;

        $i9 = r0.<javax.obex.PrivateInputStream: int mIndex>;

        i2 = $i10 - $i9;

        i3 = i1;

        i4 = i0;

        i5 = 0;

     label4:
        if i2 > i3 goto label8;

        $r5 = r0.<javax.obex.PrivateInputStream: byte[] mData>;

        $i13 = r0.<javax.obex.PrivateInputStream: int mIndex>;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r5, $i13, r1, i4, i2);

        $i15 = r0.<javax.obex.PrivateInputStream: int mIndex>;

        $i16 = $i15 + i2;

        r0.<javax.obex.PrivateInputStream: int mIndex> = $i16;

        i4 = i4 + i2;

        i5 = i5 + i2;

        i3 = i3 - i2;

        $r6 = r0.<javax.obex.PrivateInputStream: javax.obex.BaseStream mParent>;

        $z0 = interfaceinvoke $r6.<javax.obex.BaseStream: boolean continueOperation(boolean,boolean)>(1, 1);

        if $z0 != 0 goto label7;

        if i5 != 0 goto label5;

        $i19 = -1;

        goto label6;

     label5:
        $i19 = i5;

     label6:
        return $i19;

     label7:
        $r7 = r0.<javax.obex.PrivateInputStream: byte[] mData>;

        $i17 = lengthof $r7;

        $i18 = r0.<javax.obex.PrivateInputStream: int mIndex>;

        i2 = $i17 - $i18;

        goto label4;

     label8:
        if i3 <= 0 goto label9;

        $r4 = r0.<javax.obex.PrivateInputStream: byte[] mData>;

        $i11 = r0.<javax.obex.PrivateInputStream: int mIndex>;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r4, $i11, r1, i4, i3);

        $i12 = r0.<javax.obex.PrivateInputStream: int mIndex>;

        $i14 = $i12 + i3;

        r0.<javax.obex.PrivateInputStream: int mIndex> = $i14;

        i5 = i5 + i3;

     label9:
        return i5;
    }

    public synchronized void writeBytes(byte[], int)
    {
        javax.obex.PrivateInputStream r0;
        byte[] r1, r2, $r3, $r4, $r5, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;

        r0 := @this: javax.obex.PrivateInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i2 = lengthof r1;

        $i6 = $i2 - i0;

        $r3 = r0.<javax.obex.PrivateInputStream: byte[] mData>;

        $i4 = lengthof $r3;

        $i3 = r0.<javax.obex.PrivateInputStream: int mIndex>;

        $i5 = $i4 - $i3;

        i1 = $i6 + $i5;

        r2 = newarray (byte)[i1];

        $r6 = r0.<javax.obex.PrivateInputStream: byte[] mData>;

        $i10 = r0.<javax.obex.PrivateInputStream: int mIndex>;

        $r4 = r0.<javax.obex.PrivateInputStream: byte[] mData>;

        $i8 = lengthof $r4;

        $i7 = r0.<javax.obex.PrivateInputStream: int mIndex>;

        $i9 = $i8 - $i7;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r6, $i10, r2, 0, $i9);

        $r5 = r0.<javax.obex.PrivateInputStream: byte[] mData>;

        $i11 = lengthof $r5;

        $i12 = r0.<javax.obex.PrivateInputStream: int mIndex>;

        $i15 = $i11 - $i12;

        $i14 = lengthof r1;

        $i13 = $i14 - i0;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r1, i0, r2, $i15, $i13);

        r0.<javax.obex.PrivateInputStream: byte[] mData> = r2;

        r0.<javax.obex.PrivateInputStream: int mIndex> = 0;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    private void ensureOpen() throws java.io.IOException
    {
        javax.obex.PrivateInputStream r0;
        javax.obex.BaseStream $r1;
        boolean $z0;
        java.io.IOException $r2;

        r0 := @this: javax.obex.PrivateInputStream;

        $r1 = r0.<javax.obex.PrivateInputStream: javax.obex.BaseStream mParent>;

        interfaceinvoke $r1.<javax.obex.BaseStream: void ensureOpen()>();

        $z0 = r0.<javax.obex.PrivateInputStream: boolean mOpen>;

        if $z0 != 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Input stream is closed");

        throw $r2;

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        javax.obex.PrivateInputStream r0;
        javax.obex.BaseStream $r1;

        r0 := @this: javax.obex.PrivateInputStream;

        r0.<javax.obex.PrivateInputStream: boolean mOpen> = 0;

        $r1 = r0.<javax.obex.PrivateInputStream: javax.obex.BaseStream mParent>;

        interfaceinvoke $r1.<javax.obex.BaseStream: void streamClosed(boolean)>(1);

        return;
    }
}
