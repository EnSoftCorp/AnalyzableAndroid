public final class javax.obex.PrivateOutputStream extends java.io.OutputStream
{
    private javax.obex.BaseStream mParent;
    private java.io.ByteArrayOutputStream mArray;
    private boolean mOpen;
    private int mMaxPacketSize;

    public void <init>(javax.obex.BaseStream, int)
    {
        javax.obex.PrivateOutputStream r0;
        javax.obex.BaseStream r1;
        int i0;
        java.io.ByteArrayOutputStream $r2;

        r0 := @this: javax.obex.PrivateOutputStream;

        r1 := @parameter0: javax.obex.BaseStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        r0.<javax.obex.PrivateOutputStream: javax.obex.BaseStream mParent> = r1;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray> = $r2;

        r0.<javax.obex.PrivateOutputStream: int mMaxPacketSize> = i0;

        r0.<javax.obex.PrivateOutputStream: boolean mOpen> = 1;

        return;
    }

    public int size()
    {
        javax.obex.PrivateOutputStream r0;
        java.io.ByteArrayOutputStream $r1;
        int $i0;

        r0 := @this: javax.obex.PrivateOutputStream;

        $r1 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        $i0 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: int size()>();

        return $i0;
    }

    public synchronized void write(int) throws java.io.IOException
    {
        javax.obex.PrivateOutputStream r0;
        int i0, $i1, $i2;
        javax.obex.BaseStream $r1, $r4;
        java.io.ByteArrayOutputStream $r2, $r3;

        r0 := @this: javax.obex.PrivateOutputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<javax.obex.PrivateOutputStream: void ensureOpen()>();

        $r1 = r0.<javax.obex.PrivateOutputStream: javax.obex.BaseStream mParent>;

        interfaceinvoke $r1.<javax.obex.BaseStream: void ensureNotDone()>();

        $r2 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(int)>(i0);

        $r3 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        $i1 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: int size()>();

        $i2 = r0.<javax.obex.PrivateOutputStream: int mMaxPacketSize>;

        if $i1 != $i2 goto label1;

        $r4 = r0.<javax.obex.PrivateOutputStream: javax.obex.BaseStream mParent>;

        interfaceinvoke $r4.<javax.obex.BaseStream: boolean continueOperation(boolean,boolean)>(1, 0);

     label1:
        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        javax.obex.PrivateOutputStream r0;
        byte[] r1;
        int $i0;

        r0 := @this: javax.obex.PrivateOutputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<javax.obex.PrivateOutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public synchronized void write(byte[], int, int) throws java.io.IOException
    {
        javax.obex.PrivateOutputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.IndexOutOfBoundsException $r2;
        javax.obex.BaseStream $r3, $r7;
        java.io.ByteArrayOutputStream $r4, $r5, $r6, $r8;
        java.io.IOException $r9;

        r0 := @this: javax.obex.PrivateOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0;

        i3 = i1;

        if r1 != null goto label1;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("buffer is null");

        throw $r9;

     label1:
        $i5 = i0 | i1;

        if $i5 < 0 goto label2;

        $i6 = lengthof r1;

        $i7 = $i6 - i0;

        if i1 <= $i7 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("index outof bound");

        throw $r2;

     label3:
        specialinvoke r0.<javax.obex.PrivateOutputStream: void ensureOpen()>();

        $r3 = r0.<javax.obex.PrivateOutputStream: javax.obex.BaseStream mParent>;

        interfaceinvoke $r3.<javax.obex.BaseStream: void ensureNotDone()>();

     label4:
        $r4 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        $i8 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: int size()>();

        $i10 = $i8 + i3;

        $i9 = r0.<javax.obex.PrivateOutputStream: int mMaxPacketSize>;

        if $i10 < $i9 goto label5;

        $i12 = r0.<javax.obex.PrivateOutputStream: int mMaxPacketSize>;

        $r5 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        $i11 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: int size()>();

        i4 = $i12 - $i11;

        $r8 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i2, i4);

        i2 = i2 + i4;

        i3 = i3 - i4;

        $r7 = r0.<javax.obex.PrivateOutputStream: javax.obex.BaseStream mParent>;

        interfaceinvoke $r7.<javax.obex.BaseStream: boolean continueOperation(boolean,boolean)>(1, 0);

        goto label4;

     label5:
        if i3 <= 0 goto label6;

        $r6 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i2, i3);

     label6:
        return;
    }

    public synchronized byte[] readBytes(int)
    {
        javax.obex.PrivateOutputStream r0;
        int i0, $i1, $i2, $i3, $i4;
        byte[] r1, r2;
        java.io.ByteArrayOutputStream $r3, $r4, $r5, $r6;

        r0 := @this: javax.obex.PrivateOutputStream;

        i0 := @parameter0: int;

        $r3 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        $i1 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: int size()>();

        if $i1 <= 0 goto label2;

        $r4 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        r1 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r5 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void reset()>();

        r2 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r1, 0, r2, 0, i0);

        $i2 = lengthof r1;

        if $i2 == i0 goto label1;

        $r6 = r0.<javax.obex.PrivateOutputStream: java.io.ByteArrayOutputStream mArray>;

        $i3 = lengthof r1;

        $i4 = $i3 - i0;

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, $i4);

     label1:
        return r2;

     label2:
        return null;
    }

    private void ensureOpen() throws java.io.IOException
    {
        javax.obex.PrivateOutputStream r0;
        javax.obex.BaseStream $r1;
        boolean $z0;
        java.io.IOException $r2;

        r0 := @this: javax.obex.PrivateOutputStream;

        $r1 = r0.<javax.obex.PrivateOutputStream: javax.obex.BaseStream mParent>;

        interfaceinvoke $r1.<javax.obex.BaseStream: void ensureOpen()>();

        $z0 = r0.<javax.obex.PrivateOutputStream: boolean mOpen>;

        if $z0 != 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Output stream is closed");

        throw $r2;

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        javax.obex.PrivateOutputStream r0;
        javax.obex.BaseStream $r1;

        r0 := @this: javax.obex.PrivateOutputStream;

        r0.<javax.obex.PrivateOutputStream: boolean mOpen> = 0;

        $r1 = r0.<javax.obex.PrivateOutputStream: javax.obex.BaseStream mParent>;

        interfaceinvoke $r1.<javax.obex.BaseStream: void streamClosed(boolean)>(0);

        return;
    }

    public boolean isClosed()
    {
        javax.obex.PrivateOutputStream r0;
        boolean $z0, $z1;

        r0 := @this: javax.obex.PrivateOutputStream;

        $z0 = r0.<javax.obex.PrivateOutputStream: boolean mOpen>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
