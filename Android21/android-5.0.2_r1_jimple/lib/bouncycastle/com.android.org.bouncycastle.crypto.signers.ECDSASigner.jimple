public class com.android.org.bouncycastle.crypto.signers.ECDSASigner extends java.lang.Object implements com.android.org.bouncycastle.math.ec.ECConstants, com.android.org.bouncycastle.crypto.DSA
{
    private final com.android.org.bouncycastle.crypto.signers.DSAKCalculator kCalculator;
    private com.android.org.bouncycastle.crypto.params.ECKeyParameters key;
    private java.security.SecureRandom random;

    public void <init>()
    {
        com.android.org.bouncycastle.crypto.signers.ECDSASigner r0;
        com.android.org.bouncycastle.crypto.signers.RandomDSAKCalculator $r1;

        r0 := @this: com.android.org.bouncycastle.crypto.signers.ECDSASigner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.android.org.bouncycastle.crypto.signers.RandomDSAKCalculator;

        specialinvoke $r1.<com.android.org.bouncycastle.crypto.signers.RandomDSAKCalculator: void <init>()>();

        r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.signers.DSAKCalculator kCalculator> = $r1;

        return;
    }

    public void <init>(com.android.org.bouncycastle.crypto.signers.DSAKCalculator)
    {
        com.android.org.bouncycastle.crypto.signers.ECDSASigner r0;
        com.android.org.bouncycastle.crypto.signers.DSAKCalculator r1;

        r0 := @this: com.android.org.bouncycastle.crypto.signers.ECDSASigner;

        r1 := @parameter0: com.android.org.bouncycastle.crypto.signers.DSAKCalculator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.signers.DSAKCalculator kCalculator> = r1;

        return;
    }

    public void init(boolean, com.android.org.bouncycastle.crypto.CipherParameters)
    {
        com.android.org.bouncycastle.crypto.signers.ECDSASigner r0;
        boolean z0, $z1;
        com.android.org.bouncycastle.crypto.CipherParameters r1, $r7;
        com.android.org.bouncycastle.crypto.params.ParametersWithRandom r2;
        com.android.org.bouncycastle.crypto.params.ECPublicKeyParameters $r3;
        java.security.SecureRandom $r4, $r6;
        com.android.org.bouncycastle.crypto.params.ECPrivateKeyParameters $r5, $r8;

        r0 := @this: com.android.org.bouncycastle.crypto.signers.ECDSASigner;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.org.bouncycastle.crypto.CipherParameters;

        if z0 == 0 goto label2;

        $z1 = r1 instanceof com.android.org.bouncycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label1;

        r2 = (com.android.org.bouncycastle.crypto.params.ParametersWithRandom) r1;

        $r6 = virtualinvoke r2.<com.android.org.bouncycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: java.security.SecureRandom random> = $r6;

        $r7 = virtualinvoke r2.<com.android.org.bouncycastle.crypto.params.ParametersWithRandom: com.android.org.bouncycastle.crypto.CipherParameters getParameters()>();

        $r8 = (com.android.org.bouncycastle.crypto.params.ECPrivateKeyParameters) $r7;

        r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.params.ECKeyParameters key> = $r8;

        goto label3;

     label1:
        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: java.security.SecureRandom random> = $r4;

        $r5 = (com.android.org.bouncycastle.crypto.params.ECPrivateKeyParameters) r1;

        r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.params.ECKeyParameters key> = $r5;

        goto label3;

     label2:
        $r3 = (com.android.org.bouncycastle.crypto.params.ECPublicKeyParameters) r1;

        r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.params.ECKeyParameters key> = $r3;

     label3:
        return;
    }

    public java.math.BigInteger[] generateSignature(byte[])
    {
        com.android.org.bouncycastle.crypto.signers.ECDSASigner r0;
        byte[] r1;
        java.math.BigInteger r2, r3, r5, $r17, $r20, $r21, $r22, $r23, $r25, $r26, r29, r30, r31, r32;
        com.android.org.bouncycastle.math.ec.ECPoint r4, $r13, $r15;
        com.android.org.bouncycastle.crypto.params.ECKeyParameters $r6, $r12, $r18, $r24;
        com.android.org.bouncycastle.crypto.params.ECDomainParameters $r7, $r14;
        com.android.org.bouncycastle.crypto.signers.DSAKCalculator $r8, $r10, $r11, $r28;
        boolean $z0, $z1, $z2;
        java.security.SecureRandom $r9;
        com.android.org.bouncycastle.math.ec.ECFieldElement $r16;
        com.android.org.bouncycastle.crypto.params.ECPrivateKeyParameters $r19, $r27;
        java.math.BigInteger[] r33;

        r0 := @this: com.android.org.bouncycastle.crypto.signers.ECDSASigner;

        r1 := @parameter0: byte[];

        $r6 = r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.params.ECKeyParameters key>;

        $r7 = virtualinvoke $r6.<com.android.org.bouncycastle.crypto.params.ECKeyParameters: com.android.org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        r2 = virtualinvoke $r7.<com.android.org.bouncycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        r3 = specialinvoke r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: java.math.BigInteger calculateE(java.math.BigInteger,byte[])>(r2, r1);

        $r8 = r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.signers.DSAKCalculator kCalculator>;

        $z0 = interfaceinvoke $r8.<com.android.org.bouncycastle.crypto.signers.DSAKCalculator: boolean isDeterministic()>();

        if $z0 == 0 goto label1;

        $r28 = r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.signers.DSAKCalculator kCalculator>;

        $r24 = r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.params.ECKeyParameters key>;

        $r27 = (com.android.org.bouncycastle.crypto.params.ECPrivateKeyParameters) $r24;

        $r26 = virtualinvoke $r27.<com.android.org.bouncycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        interfaceinvoke $r28.<com.android.org.bouncycastle.crypto.signers.DSAKCalculator: void init(java.math.BigInteger,java.math.BigInteger,byte[])>(r2, $r26, r1);

        goto label2;

     label1:
        $r11 = r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.signers.DSAKCalculator kCalculator>;

        $r9 = r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: java.security.SecureRandom random>;

        interfaceinvoke $r11.<com.android.org.bouncycastle.crypto.signers.DSAKCalculator: void init(java.math.BigInteger,java.security.SecureRandom)>(r2, $r9);

     label2:
        $r10 = r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.signers.DSAKCalculator kCalculator>;

        r29 = interfaceinvoke $r10.<com.android.org.bouncycastle.crypto.signers.DSAKCalculator: java.math.BigInteger nextK()>();

        $r12 = r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.params.ECKeyParameters key>;

        $r14 = virtualinvoke $r12.<com.android.org.bouncycastle.crypto.params.ECKeyParameters: com.android.org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        $r13 = virtualinvoke $r14.<com.android.org.bouncycastle.crypto.params.ECDomainParameters: com.android.org.bouncycastle.math.ec.ECPoint getG()>();

        $r15 = virtualinvoke $r13.<com.android.org.bouncycastle.math.ec.ECPoint: com.android.org.bouncycastle.math.ec.ECPoint multiply(java.math.BigInteger)>(r29);

        r4 = virtualinvoke $r15.<com.android.org.bouncycastle.math.ec.ECPoint: com.android.org.bouncycastle.math.ec.ECPoint normalize()>();

        $r16 = virtualinvoke r4.<com.android.org.bouncycastle.math.ec.ECPoint: com.android.org.bouncycastle.math.ec.ECFieldElement getAffineXCoord()>();

        r5 = virtualinvoke $r16.<com.android.org.bouncycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        r30 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);

        $r17 = <com.android.org.bouncycastle.crypto.signers.ECDSASigner: java.math.BigInteger ZERO>;

        $z1 = virtualinvoke r30.<java.math.BigInteger: boolean equals(java.lang.Object)>($r17);

        if $z1 != 0 goto label2;

        $r18 = r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.params.ECKeyParameters key>;

        $r19 = (com.android.org.bouncycastle.crypto.params.ECPrivateKeyParameters) $r18;

        r31 = virtualinvoke $r19.<com.android.org.bouncycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        $r22 = virtualinvoke r29.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>(r2);

        $r23 = virtualinvoke r31.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r30);

        $r20 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r23);

        $r21 = virtualinvoke $r22.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r20);

        r32 = virtualinvoke $r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r2);

        $r25 = <com.android.org.bouncycastle.crypto.signers.ECDSASigner: java.math.BigInteger ZERO>;

        $z2 = virtualinvoke r32.<java.math.BigInteger: boolean equals(java.lang.Object)>($r25);

        if $z2 != 0 goto label2;

        r33 = newarray (java.math.BigInteger)[2];

        r33[0] = r30;

        r33[1] = r32;

        return r33;
    }

    public boolean verifySignature(byte[], java.math.BigInteger, java.math.BigInteger)
    {
        com.android.org.bouncycastle.crypto.signers.ECDSASigner r0;
        byte[] r1;
        java.math.BigInteger r2, r3, r4, r5, r6, r7, r8, r12, $r15, $r16, $r17, $r18, $r24;
        com.android.org.bouncycastle.math.ec.ECPoint r9, r10, r11, $r22;
        com.android.org.bouncycastle.crypto.params.ECKeyParameters $r13, $r20, $r21;
        com.android.org.bouncycastle.crypto.params.ECDomainParameters $r14, $r19;
        int $i0, $i1, $i2, $i3;
        com.android.org.bouncycastle.crypto.params.ECPublicKeyParameters $r23;
        boolean $z0, $z1;
        com.android.org.bouncycastle.math.ec.ECFieldElement $r25;

        r0 := @this: com.android.org.bouncycastle.crypto.signers.ECDSASigner;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.math.BigInteger;

        r3 := @parameter2: java.math.BigInteger;

        $r13 = r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.params.ECKeyParameters key>;

        $r14 = virtualinvoke $r13.<com.android.org.bouncycastle.crypto.params.ECKeyParameters: com.android.org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        r4 = virtualinvoke $r14.<com.android.org.bouncycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        r5 = specialinvoke r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: java.math.BigInteger calculateE(java.math.BigInteger,byte[])>(r4, r1);

        $r15 = <com.android.org.bouncycastle.crypto.signers.ECDSASigner: java.math.BigInteger ONE>;

        $i1 = virtualinvoke r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r15);

        if $i1 < 0 goto label1;

        $i0 = virtualinvoke r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r4);

        if $i0 < 0 goto label2;

     label1:
        return 0;

     label2:
        $r16 = <com.android.org.bouncycastle.crypto.signers.ECDSASigner: java.math.BigInteger ONE>;

        $i2 = virtualinvoke r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r16);

        if $i2 < 0 goto label3;

        $i3 = virtualinvoke r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r4);

        if $i3 < 0 goto label4;

     label3:
        return 0;

     label4:
        r6 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>(r4);

        $r17 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r6);

        r7 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r4);

        $r18 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r6);

        r8 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r4);

        $r20 = r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.params.ECKeyParameters key>;

        $r19 = virtualinvoke $r20.<com.android.org.bouncycastle.crypto.params.ECKeyParameters: com.android.org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        r9 = virtualinvoke $r19.<com.android.org.bouncycastle.crypto.params.ECDomainParameters: com.android.org.bouncycastle.math.ec.ECPoint getG()>();

        $r21 = r0.<com.android.org.bouncycastle.crypto.signers.ECDSASigner: com.android.org.bouncycastle.crypto.params.ECKeyParameters key>;

        $r23 = (com.android.org.bouncycastle.crypto.params.ECPublicKeyParameters) $r21;

        r10 = virtualinvoke $r23.<com.android.org.bouncycastle.crypto.params.ECPublicKeyParameters: com.android.org.bouncycastle.math.ec.ECPoint getQ()>();

        $r22 = staticinvoke <com.android.org.bouncycastle.math.ec.ECAlgorithms: com.android.org.bouncycastle.math.ec.ECPoint sumOfTwoMultiplies(com.android.org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,com.android.org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)>(r9, r7, r10, r8);

        r11 = virtualinvoke $r22.<com.android.org.bouncycastle.math.ec.ECPoint: com.android.org.bouncycastle.math.ec.ECPoint normalize()>();

        $z0 = virtualinvoke r11.<com.android.org.bouncycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 == 0 goto label5;

        return 0;

     label5:
        $r25 = virtualinvoke r11.<com.android.org.bouncycastle.math.ec.ECPoint: com.android.org.bouncycastle.math.ec.ECFieldElement getAffineXCoord()>();

        $r24 = virtualinvoke $r25.<com.android.org.bouncycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        r12 = virtualinvoke $r24.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r4);

        $z1 = virtualinvoke r12.<java.math.BigInteger: boolean equals(java.lang.Object)>(r2);

        return $z1;
    }

    private java.math.BigInteger calculateE(java.math.BigInteger, byte[])
    {
        com.android.org.bouncycastle.crypto.signers.ECDSASigner r0;
        java.math.BigInteger r1, r3, $r4;
        byte[] r2;
        int i0, i1, $i2, $i3;

        r0 := @this: com.android.org.bouncycastle.crypto.signers.ECDSASigner;

        r1 := @parameter0: java.math.BigInteger;

        r2 := @parameter1: byte[];

        i0 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        $i2 = lengthof r2;

        i1 = $i2 * 8;

        $r4 = new java.math.BigInteger;

        specialinvoke $r4.<java.math.BigInteger: void <init>(int,byte[])>(1, r2);

        r3 = $r4;

        if i0 >= i1 goto label1;

        $i3 = i1 - i0;

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i3);

     label1:
        return r3;
    }
}
