class com.android.org.bouncycastle.crypto.engines.RSACoreEngine extends java.lang.Object
{
    private com.android.org.bouncycastle.crypto.params.RSAKeyParameters key;
    private boolean forEncryption;

    void <init>()
    {
        com.android.org.bouncycastle.crypto.engines.RSACoreEngine r0;

        r0 := @this: com.android.org.bouncycastle.crypto.engines.RSACoreEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init(boolean, com.android.org.bouncycastle.crypto.CipherParameters)
    {
        com.android.org.bouncycastle.crypto.engines.RSACoreEngine r0;
        boolean z0, $z1;
        com.android.org.bouncycastle.crypto.CipherParameters r1, $r4;
        com.android.org.bouncycastle.crypto.params.ParametersWithRandom r2;
        com.android.org.bouncycastle.crypto.params.RSAKeyParameters $r3, $r5;

        r0 := @this: com.android.org.bouncycastle.crypto.engines.RSACoreEngine;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.org.bouncycastle.crypto.CipherParameters;

        $z1 = r1 instanceof com.android.org.bouncycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label1;

        r2 = (com.android.org.bouncycastle.crypto.params.ParametersWithRandom) r1;

        $r4 = virtualinvoke r2.<com.android.org.bouncycastle.crypto.params.ParametersWithRandom: com.android.org.bouncycastle.crypto.CipherParameters getParameters()>();

        $r5 = (com.android.org.bouncycastle.crypto.params.RSAKeyParameters) $r4;

        r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: com.android.org.bouncycastle.crypto.params.RSAKeyParameters key> = $r5;

        goto label2;

     label1:
        $r3 = (com.android.org.bouncycastle.crypto.params.RSAKeyParameters) r1;

        r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: com.android.org.bouncycastle.crypto.params.RSAKeyParameters key> = $r3;

     label2:
        r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: boolean forEncryption> = z0;

        return;
    }

    public int getInputBlockSize()
    {
        com.android.org.bouncycastle.crypto.engines.RSACoreEngine r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        com.android.org.bouncycastle.crypto.params.RSAKeyParameters $r1;
        java.math.BigInteger $r2;
        boolean $z0;

        r0 := @this: com.android.org.bouncycastle.crypto.engines.RSACoreEngine;

        $r1 = r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: com.android.org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r2 = virtualinvoke $r1.<com.android.org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        $z0 = r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i3 = i0 + 7;

        $i4 = $i3 / 8;

        $i5 = $i4 - 1;

        return $i5;

     label1:
        $i1 = i0 + 7;

        $i2 = $i1 / 8;

        return $i2;
    }

    public int getOutputBlockSize()
    {
        com.android.org.bouncycastle.crypto.engines.RSACoreEngine r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        com.android.org.bouncycastle.crypto.params.RSAKeyParameters $r1;
        java.math.BigInteger $r2;
        boolean $z0;

        r0 := @this: com.android.org.bouncycastle.crypto.engines.RSACoreEngine;

        $r1 = r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: com.android.org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r2 = virtualinvoke $r1.<com.android.org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        $z0 = r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i4 = i0 + 7;

        $i5 = $i4 / 8;

        return $i5;

     label1:
        $i1 = i0 + 7;

        $i2 = $i1 / 8;

        $i3 = $i2 - 1;

        return $i3;
    }

    public java.math.BigInteger convertInput(byte[], int, int)
    {
        com.android.org.bouncycastle.crypto.engines.RSACoreEngine r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.math.BigInteger r3, $r4, $r6;
        com.android.org.bouncycastle.crypto.params.RSAKeyParameters $r5;
        com.android.org.bouncycastle.crypto.DataLengthException $r7, $r8, $r9;
        boolean $z0;

        r0 := @this: com.android.org.bouncycastle.crypto.engines.RSACoreEngine;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: int getInputBlockSize()>();

        $i3 = $i2 + 1;

        if i1 <= $i3 goto label1;

        $r9 = new com.android.org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r9.<com.android.org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for RSA cipher.");

        throw $r9;

     label1:
        $i4 = virtualinvoke r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: int getInputBlockSize()>();

        $i5 = $i4 + 1;

        if i1 != $i5 goto label2;

        $z0 = r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: boolean forEncryption>;

        if $z0 != 0 goto label2;

        $r8 = new com.android.org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r8.<com.android.org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for RSA cipher.");

        throw $r8;

     label2:
        if i0 != 0 goto label3;

        $i7 = lengthof r1;

        if i1 == $i7 goto label4;

     label3:
        r2 = newarray (byte)[i1];

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r1, i0, r2, 0, i1);

        goto label5;

     label4:
        r2 = r1;

     label5:
        $r4 = new java.math.BigInteger;

        specialinvoke $r4.<java.math.BigInteger: void <init>(int,byte[])>(1, r2);

        r3 = $r4;

        $r5 = r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: com.android.org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r6 = virtualinvoke $r5.<com.android.org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $i6 = virtualinvoke r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i6 < 0 goto label6;

        $r7 = new com.android.org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r7.<com.android.org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for RSA cipher.");

        throw $r7;

     label6:
        return r3;
    }

    public byte[] convertOutput(java.math.BigInteger)
    {
        com.android.org.bouncycastle.crypto.engines.RSACoreEngine r0;
        java.math.BigInteger r1;
        byte[] r2, r3, r4, r5;
        boolean $z0;
        byte $b0, $b4;
        int $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;

        r0 := @this: com.android.org.bouncycastle.crypto.engines.RSACoreEngine;

        r1 := @parameter0: java.math.BigInteger;

        r2 = virtualinvoke r1.<java.math.BigInteger: byte[] toByteArray()>();

        $z0 = r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: boolean forEncryption>;

        if $z0 == 0 goto label2;

        $b4 = r2[0];

        if $b4 != 0 goto label1;

        $i13 = lengthof r2;

        $i12 = virtualinvoke r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        if $i13 <= $i12 goto label1;

        $i15 = lengthof r2;

        $i14 = $i15 - 1;

        r3 = newarray (byte)[$i14];

        $i16 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r2, 1, r3, 0, $i16);

        return r3;

     label1:
        $i5 = lengthof r2;

        $i6 = virtualinvoke r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        if $i5 >= $i6 goto label3;

        $i7 = virtualinvoke r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        r4 = newarray (byte)[$i7];

        $i9 = lengthof r4;

        $i8 = lengthof r2;

        $i10 = $i9 - $i8;

        $i11 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r2, 0, r4, $i10, $i11);

        return r4;

     label2:
        $b0 = r2[0];

        if $b0 != 0 goto label3;

        $i1 = lengthof r2;

        $i2 = $i1 - 1;

        r5 = newarray (byte)[$i2];

        $i3 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r2, 1, r5, 0, $i3);

        return r5;

     label3:
        return r2;
    }

    public java.math.BigInteger processBlock(java.math.BigInteger)
    {
        com.android.org.bouncycastle.crypto.engines.RSACoreEngine r0;
        java.math.BigInteger r1, r3, r4, r5, r6, r7, r8, r9, r10, r11, $r14, $r15, $r18, $r19, $r20, r21, r22, r23;
        com.android.org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters r2;
        com.android.org.bouncycastle.crypto.params.RSAKeyParameters $r12, $r13, $r16, $r17;
        boolean $z0;

        r0 := @this: com.android.org.bouncycastle.crypto.engines.RSACoreEngine;

        r1 := @parameter0: java.math.BigInteger;

        $r12 = r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: com.android.org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $z0 = $r12 instanceof com.android.org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters;

        if $z0 == 0 goto label1;

        $r17 = r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: com.android.org.bouncycastle.crypto.params.RSAKeyParameters key>;

        r2 = (com.android.org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters) $r17;

        r3 = virtualinvoke r2.<com.android.org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getP()>();

        r4 = virtualinvoke r2.<com.android.org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getQ()>();

        r5 = virtualinvoke r2.<com.android.org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getDP()>();

        r6 = virtualinvoke r2.<com.android.org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getDQ()>();

        r7 = virtualinvoke r2.<com.android.org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getQInv()>();

        $r19 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>(r3);

        r8 = virtualinvoke $r19.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>(r5, r3);

        $r20 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>(r4);

        r9 = virtualinvoke $r20.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>(r6, r4);

        r10 = virtualinvoke r8.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r9);

        r21 = virtualinvoke r10.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r7);

        r22 = virtualinvoke r21.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>(r3);

        r11 = virtualinvoke r22.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r4);

        r23 = virtualinvoke r11.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r9);

        return r23;

     label1:
        $r13 = r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: com.android.org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r14 = virtualinvoke $r13.<com.android.org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getExponent()>();

        $r16 = r0.<com.android.org.bouncycastle.crypto.engines.RSACoreEngine: com.android.org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r15 = virtualinvoke $r16.<com.android.org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $r18 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r14, $r15);

        return $r18;
    }
}
