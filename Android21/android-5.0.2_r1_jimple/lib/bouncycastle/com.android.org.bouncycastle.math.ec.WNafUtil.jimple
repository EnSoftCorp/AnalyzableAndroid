public abstract class com.android.org.bouncycastle.math.ec.WNafUtil extends java.lang.Object
{
    private static int[] DEFAULT_WINDOW_SIZE_CUTOFFS;

    public void <init>()
    {
        com.android.org.bouncycastle.math.ec.WNafUtil r0;

        r0 := @this: com.android.org.bouncycastle.math.ec.WNafUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int[] generateCompactNaf(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        int[] r2;
        boolean z0, z1;
        byte b4, $b14;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.math.BigInteger;

        $i5 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i6 = $i5 >>> 16;

        if $i6 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'k\' must have bitlength < 2^16");

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        r1 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r0);

        $i7 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        i0 = $i7 - 1;

        $i8 = i0 + 1;

        $i10 = $i8 >> 1;

        r2 = newarray (int)[$i10];

        i1 = 0;

        i2 = 0;

        i3 = 1;

     label2:
        if i3 > i0 goto label7;

        z0 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(i3);

        z1 = virtualinvoke r0.<java.math.BigInteger: boolean testBit(int)>(i3);

        if z0 != z1 goto label3;

        i2 = i2 + 1;

        goto label6;

     label3:
        if z1 == 0 goto label4;

        $b14 = -1;

        goto label5;

     label4:
        $b14 = 1;

     label5:
        b4 = $b14;

        $i11 = i1;

        i1 = i1 + 1;

        $i13 = b4 << 16;

        $i12 = $i13 | i2;

        r2[$i11] = $i12;

        i2 = 0;

     label6:
        i3 = i3 + 1;

        goto label2;

     label7:
        $i9 = lengthof r2;

        if $i9 <= i1 goto label8;

        r2 = staticinvoke <com.android.org.bouncycastle.math.ec.WNafUtil: int[] trim(int[],int)>(r2, i1);

     label8:
        return r2;
    }

    public static int[] generateCompactWindowNaf(int, java.math.BigInteger)
    {
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.math.BigInteger r0;
        int[] r1, $r4;
        boolean z0, $z1, $z2;
        java.lang.IllegalArgumentException $r2, $r3;

        i0 := @parameter0: int;

        r0 := @parameter1: java.math.BigInteger;

        if i0 != 2 goto label01;

        $r4 = staticinvoke <com.android.org.bouncycastle.math.ec.WNafUtil: int[] generateCompactNaf(java.math.BigInteger)>(r0);

        return $r4;

     label01:
        if i0 < 2 goto label02;

        if i0 <= 16 goto label03;

     label02:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'width\' must be in the range [2, 16]");

        throw $r2;

     label03:
        $i8 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i9 = $i8 >>> 16;

        if $i9 == 0 goto label04;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'k\' must have bitlength < 2^16");

        throw $r3;

     label04:
        $i10 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i11 = $i10 / i0;

        $i13 = $i11 + 1;

        r1 = newarray (int)[$i13];

        i1 = 1 << i0;

        i2 = i1 - 1;

        i3 = i1 >>> 1;

        z0 = 0;

        i4 = 0;

        i5 = 0;

     label05:
        $i12 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        if i5 > $i12 goto label13;

        $z1 = virtualinvoke r0.<java.math.BigInteger: boolean testBit(int)>(i5);

        if $z1 != z0 goto label06;

        i5 = i5 + 1;

        goto label05;

     label06:
        r0 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i5);

        $i16 = virtualinvoke r0.<java.math.BigInteger: int intValue()>();

        i6 = $i16 & i2;

        if z0 == 0 goto label07;

        i6 = i6 + 1;

     label07:
        $i15 = i6 & i3;

        if $i15 == 0 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        z0 = $z2;

        if z0 == 0 goto label10;

        i6 = i6 - i1;

     label10:
        if i4 <= 0 goto label11;

        $i19 = i5 - 1;

        goto label12;

     label11:
        $i19 = i5;

     label12:
        i7 = $i19;

        $i18 = i4;

        i4 = i4 + 1;

        $i17 = i6 << 16;

        $i20 = $i17 | i7;

        r1[$i18] = $i20;

        i5 = i0;

        goto label05;

     label13:
        $i14 = lengthof r1;

        if $i14 <= i4 goto label14;

        r1 = staticinvoke <com.android.org.bouncycastle.math.ec.WNafUtil: int[] trim(int[],int)>(r1, i4);

     label14:
        return r1;
    }

    public static byte[] generateJSF(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, r3, r4;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        byte[] r2;
        byte $b23;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i8 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i9 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        $i10 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i9);

        i0 = $i10 + 1;

        r2 = newarray (byte)[i0];

        r3 = r0;

        r4 = r1;

        i1 = 0;

        i2 = 0;

        i3 = 0;

     label1:
        $i12 = virtualinvoke r3.<java.math.BigInteger: int signum()>();

        if $i12 > 0 goto label2;

        $i29 = virtualinvoke r4.<java.math.BigInteger: int signum()>();

        if $i29 > 0 goto label2;

        if i2 > 0 goto label2;

        if i3 <= 0 goto label7;

     label2:
        $i11 = virtualinvoke r3.<java.math.BigInteger: int intValue()>();

        $i14 = $i11 + i2;

        i4 = $i14 & 7;

        $i13 = virtualinvoke r4.<java.math.BigInteger: int intValue()>();

        $i16 = $i13 + i3;

        i5 = $i16 & 7;

        i6 = i4 & 1;

        if i6 == 0 goto label3;

        $i26 = i4 & 2;

        i6 = i6 - $i26;

        $i31 = i4 + i6;

        if $i31 != 4 goto label3;

        $i32 = i5 & 3;

        if $i32 != 2 goto label3;

        i6 = neg i6;

     label3:
        i7 = i5 & 1;

        if i7 == 0 goto label4;

        $i27 = i5 & 2;

        i7 = i7 - $i27;

        $i28 = i5 + i7;

        if $i28 != 4 goto label4;

        $i25 = i4 & 3;

        if $i25 != 2 goto label4;

        i7 = neg i7;

     label4:
        $i18 = i2 << 1;

        $i15 = 1 + i6;

        if $i18 != $i15 goto label5;

        i2 = 1 - i2;

     label5:
        $i19 = i3 << 1;

        $i17 = 1 + i7;

        if $i19 != $i17 goto label6;

        i3 = 1 - i3;

     label6:
        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        $i20 = i1;

        i1 = i1 + 1;

        $i21 = i6 << 4;

        $i22 = i7 & 15;

        $i24 = $i21 | $i22;

        $b23 = (byte) $i24;

        r2[$i20] = $b23;

        goto label1;

     label7:
        $i30 = lengthof r2;

        if $i30 <= i1 goto label8;

        r2 = staticinvoke <com.android.org.bouncycastle.math.ec.WNafUtil: byte[] trim(byte[],int)>(r2, i1);

     label8:
        return r2;
    }

    public static byte[] generateNaf(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3;
        int i0, i1, $i2, $i4;
        byte[] r2;
        boolean z0, z1;
        byte $b3, $b5;

        r0 := @parameter0: java.math.BigInteger;

        $r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        r1 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r0);

        $i2 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        i0 = $i2 - 1;

        r2 = newarray (byte)[i0];

        i1 = 1;

     label1:
        if i1 > i0 goto label5;

        z0 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(i1);

        z1 = virtualinvoke r0.<java.math.BigInteger: boolean testBit(int)>(i1);

        $i4 = i1 - 1;

        if z0 != z1 goto label2;

        $b5 = 0;

        goto label4;

     label2:
        if z1 == 0 goto label3;

        $b5 = -1;

        goto label4;

     label3:
        $b5 = 1;

     label4:
        $b3 = (byte) $b5;

        r2[$i4] = $b3;

        i1 = i1 + 1;

        goto label1;

     label5:
        return r2;
    }

    public static byte[] generateWindowNaf(int, java.math.BigInteger)
    {
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, i15;
        java.math.BigInteger r0;
        byte[] r1, $r3;
        boolean z0, $z1, $z2;
        java.lang.IllegalArgumentException $r2;
        byte $b13;

        i0 := @parameter0: int;

        r0 := @parameter1: java.math.BigInteger;

        if i0 != 2 goto label01;

        $r3 = staticinvoke <com.android.org.bouncycastle.math.ec.WNafUtil: byte[] generateNaf(java.math.BigInteger)>(r0);

        return $r3;

     label01:
        if i0 < 2 goto label02;

        if i0 <= 8 goto label03;

     label02:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'width\' must be in the range [2, 8]");

        throw $r2;

     label03:
        $i7 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i8 = $i7 + 1;

        r1 = newarray (byte)[$i8];

        i1 = 1 << i0;

        i2 = i1 - 1;

        i3 = i1 >>> 1;

        z0 = 0;

        i4 = 0;

        i5 = 0;

     label04:
        $i9 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        if i5 > $i9 goto label12;

        $z1 = virtualinvoke r0.<java.math.BigInteger: boolean testBit(int)>(i5);

        if $z1 != z0 goto label05;

        i5 = i5 + 1;

        goto label04;

     label05:
        r0 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i5);

        $i12 = virtualinvoke r0.<java.math.BigInteger: int intValue()>();

        i6 = $i12 & i2;

        if z0 == 0 goto label06;

        i6 = i6 + 1;

     label06:
        $i11 = i6 & i3;

        if $i11 == 0 goto label07;

        $z2 = 1;

        goto label08;

     label07:
        $z2 = 0;

     label08:
        z0 = $z2;

        if z0 == 0 goto label09;

        i6 = i6 - i1;

     label09:
        if i4 <= 0 goto label10;

        $i14 = i5 - 1;

        goto label11;

     label10:
        $i14 = i5;

     label11:
        i15 = i4 + $i14;

        i4 = i15 + 1;

        $b13 = (byte) i6;

        r1[i15] = $b13;

        i5 = i0;

        goto label04;

     label12:
        $i10 = lengthof r1;

        if $i10 <= i4 goto label13;

        r1 = staticinvoke <com.android.org.bouncycastle.math.ec.WNafUtil: byte[] trim(byte[],int)>(r1, i4);

     label13:
        return r1;
    }

    public static com.android.org.bouncycastle.math.ec.WNafPreCompInfo getWNafPreCompInfo(com.android.org.bouncycastle.math.ec.PreCompInfo)
    {
        com.android.org.bouncycastle.math.ec.PreCompInfo r0;
        com.android.org.bouncycastle.math.ec.WNafPreCompInfo $r1, $r2;
        boolean $z0;

        r0 := @parameter0: com.android.org.bouncycastle.math.ec.PreCompInfo;

        if r0 == null goto label1;

        $z0 = r0 instanceof com.android.org.bouncycastle.math.ec.WNafPreCompInfo;

        if $z0 == 0 goto label1;

        $r2 = (com.android.org.bouncycastle.math.ec.WNafPreCompInfo) r0;

        return $r2;

     label1:
        $r1 = new com.android.org.bouncycastle.math.ec.WNafPreCompInfo;

        specialinvoke $r1.<com.android.org.bouncycastle.math.ec.WNafPreCompInfo: void <init>()>();

        return $r1;
    }

    public static int getWindowSize(int)
    {
        int i0, $i1;
        int[] $r0;

        i0 := @parameter0: int;

        $r0 = <com.android.org.bouncycastle.math.ec.WNafUtil: int[] DEFAULT_WINDOW_SIZE_CUTOFFS>;

        $i1 = staticinvoke <com.android.org.bouncycastle.math.ec.WNafUtil: int getWindowSize(int,int[])>(i0, $r0);

        return $i1;
    }

    public static int getWindowSize(int, int[])
    {
        int i0, i1, $i2, $i3, $i4;
        int[] r0;

        i0 := @parameter0: int;

        r0 := @parameter1: int[];

        i1 = 0;

     label1:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label3;

        $i4 = r0[i1];

        if i0 >= $i4 goto label2;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i3 = i1 + 2;

        return $i3;
    }

    public static com.android.org.bouncycastle.math.ec.WNafPreCompInfo precompute(com.android.org.bouncycastle.math.ec.ECPoint, int, boolean)
    {
        com.android.org.bouncycastle.math.ec.ECPoint r0, r4, $r6, $r7, $r8, $r9, $r10, $r11;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7;
        boolean z0;
        com.android.org.bouncycastle.math.ec.ECCurve r1;
        com.android.org.bouncycastle.math.ec.WNafPreCompInfo r2;
        com.android.org.bouncycastle.math.ec.ECPoint[] r3, $r12, r13;
        com.android.org.bouncycastle.math.ec.PreCompInfo $r5;

        r0 := @parameter0: com.android.org.bouncycastle.math.ec.ECPoint;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 = virtualinvoke r0.<com.android.org.bouncycastle.math.ec.ECPoint: com.android.org.bouncycastle.math.ec.ECCurve getCurve()>();

        $r5 = virtualinvoke r1.<com.android.org.bouncycastle.math.ec.ECCurve: com.android.org.bouncycastle.math.ec.PreCompInfo getPreCompInfo(com.android.org.bouncycastle.math.ec.ECPoint)>(r0);

        r2 = staticinvoke <com.android.org.bouncycastle.math.ec.WNafUtil: com.android.org.bouncycastle.math.ec.WNafPreCompInfo getWNafPreCompInfo(com.android.org.bouncycastle.math.ec.PreCompInfo)>($r5);

        r3 = virtualinvoke r2.<com.android.org.bouncycastle.math.ec.WNafPreCompInfo: com.android.org.bouncycastle.math.ec.ECPoint[] getPreComp()>();

        if r3 != null goto label1;

        $r12 = newarray (com.android.org.bouncycastle.math.ec.ECPoint)[1];

        $r12[0] = r0;

        r3 = $r12;

     label1:
        i1 = lengthof r3;

        $i4 = i0 - 2;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i4);

        i2 = 1 << $i5;

        if i1 >= i2 goto label5;

        r4 = virtualinvoke r2.<com.android.org.bouncycastle.math.ec.WNafPreCompInfo: com.android.org.bouncycastle.math.ec.ECPoint getTwiceP()>();

        if r4 != null goto label2;

        $r11 = r3[0];

        $r10 = virtualinvoke $r11.<com.android.org.bouncycastle.math.ec.ECPoint: com.android.org.bouncycastle.math.ec.ECPoint twice()>();

        r4 = virtualinvoke $r10.<com.android.org.bouncycastle.math.ec.ECPoint: com.android.org.bouncycastle.math.ec.ECPoint normalize()>();

        virtualinvoke r2.<com.android.org.bouncycastle.math.ec.WNafPreCompInfo: void setTwiceP(com.android.org.bouncycastle.math.ec.ECPoint)>(r4);

     label2:
        r3 = staticinvoke <com.android.org.bouncycastle.math.ec.WNafUtil: com.android.org.bouncycastle.math.ec.ECPoint[] resizeTable(com.android.org.bouncycastle.math.ec.ECPoint[],int)>(r3, i2);

        i3 = i1;

     label3:
        if i3 >= i2 goto label4;

        $i6 = i3 - 1;

        $r9 = r3[$i6];

        $r8 = virtualinvoke r4.<com.android.org.bouncycastle.math.ec.ECPoint: com.android.org.bouncycastle.math.ec.ECPoint add(com.android.org.bouncycastle.math.ec.ECPoint)>($r9);

        r3[i3] = $r8;

        i3 = i3 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<com.android.org.bouncycastle.math.ec.ECCurve: void normalizeAll(com.android.org.bouncycastle.math.ec.ECPoint[])>(r3);

     label5:
        virtualinvoke r2.<com.android.org.bouncycastle.math.ec.WNafPreCompInfo: void setPreComp(com.android.org.bouncycastle.math.ec.ECPoint[])>(r3);

        if z0 == 0 goto label9;

        r13 = virtualinvoke r2.<com.android.org.bouncycastle.math.ec.WNafPreCompInfo: com.android.org.bouncycastle.math.ec.ECPoint[] getPreCompNeg()>();

        if r13 != null goto label6;

        i7 = 0;

        r13 = newarray (com.android.org.bouncycastle.math.ec.ECPoint)[i2];

        goto label7;

     label6:
        i7 = lengthof r13;

        if i7 >= i2 goto label7;

        r13 = staticinvoke <com.android.org.bouncycastle.math.ec.WNafUtil: com.android.org.bouncycastle.math.ec.ECPoint[] resizeTable(com.android.org.bouncycastle.math.ec.ECPoint[],int)>(r13, i2);

     label7:
        if i7 >= i2 goto label8;

        $r7 = r3[i7];

        $r6 = virtualinvoke $r7.<com.android.org.bouncycastle.math.ec.ECPoint: com.android.org.bouncycastle.math.ec.ECPoint negate()>();

        r13[i7] = $r6;

        i7 = i7 + 1;

        goto label7;

     label8:
        virtualinvoke r2.<com.android.org.bouncycastle.math.ec.WNafPreCompInfo: void setPreCompNeg(com.android.org.bouncycastle.math.ec.ECPoint[])>(r13);

     label9:
        virtualinvoke r1.<com.android.org.bouncycastle.math.ec.ECCurve: void setPreCompInfo(com.android.org.bouncycastle.math.ec.ECPoint,com.android.org.bouncycastle.math.ec.PreCompInfo)>(r0, r2);

        return r2;
    }

    private static byte[] trim(byte[], int)
    {
        byte[] r0, r1;
        int i0, $i1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 = newarray (byte)[i0];

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r0, 0, r1, 0, $i1);

        return r1;
    }

    private static int[] trim(int[], int)
    {
        int[] r0, r1;
        int i0, $i1;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        r1 = newarray (int)[i0];

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r0, 0, r1, 0, $i1);

        return r1;
    }

    private static com.android.org.bouncycastle.math.ec.ECPoint[] resizeTable(com.android.org.bouncycastle.math.ec.ECPoint[], int)
    {
        com.android.org.bouncycastle.math.ec.ECPoint[] r0, r1;
        int i0, $i1;

        r0 := @parameter0: com.android.org.bouncycastle.math.ec.ECPoint[];

        i0 := @parameter1: int;

        r1 = newarray (com.android.org.bouncycastle.math.ec.ECPoint)[i0];

        $i1 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i1);

        return r1;
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[6];

        $r0[0] = 13;

        $r0[1] = 41;

        $r0[2] = 121;

        $r0[3] = 337;

        $r0[4] = 897;

        $r0[5] = 2305;

        <com.android.org.bouncycastle.math.ec.WNafUtil: int[] DEFAULT_WINDOW_SIZE_CUTOFFS> = $r0;

        return;
    }
}
