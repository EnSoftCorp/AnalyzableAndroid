public class com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator extends java.lang.Object implements com.android.org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator
{
    private static final java.math.BigInteger ONE;
    private com.android.org.bouncycastle.crypto.params.DSAKeyGenerationParameters param;

    public void <init>()
    {
        com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator r0;

        r0 := @this: com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init(com.android.org.bouncycastle.crypto.KeyGenerationParameters)
    {
        com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator r0;
        com.android.org.bouncycastle.crypto.KeyGenerationParameters r1;
        com.android.org.bouncycastle.crypto.params.DSAKeyGenerationParameters $r2;

        r0 := @this: com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator;

        r1 := @parameter0: com.android.org.bouncycastle.crypto.KeyGenerationParameters;

        $r2 = (com.android.org.bouncycastle.crypto.params.DSAKeyGenerationParameters) r1;

        r0.<com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator: com.android.org.bouncycastle.crypto.params.DSAKeyGenerationParameters param> = $r2;

        return;
    }

    public com.android.org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator r0;
        com.android.org.bouncycastle.crypto.params.DSAParameters r1;
        java.math.BigInteger r2, r3, $r5, $r8, $r9;
        com.android.org.bouncycastle.crypto.params.DSAKeyGenerationParameters $r4, $r6;
        java.security.SecureRandom $r7;
        com.android.org.bouncycastle.crypto.AsymmetricCipherKeyPair $r10;
        com.android.org.bouncycastle.crypto.params.DSAPublicKeyParameters $r11;
        com.android.org.bouncycastle.crypto.params.DSAPrivateKeyParameters $r12;

        r0 := @this: com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator;

        $r4 = r0.<com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator: com.android.org.bouncycastle.crypto.params.DSAKeyGenerationParameters param>;

        r1 = virtualinvoke $r4.<com.android.org.bouncycastle.crypto.params.DSAKeyGenerationParameters: com.android.org.bouncycastle.crypto.params.DSAParameters getParameters()>();

        $r5 = virtualinvoke r1.<com.android.org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r6 = r0.<com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator: com.android.org.bouncycastle.crypto.params.DSAKeyGenerationParameters param>;

        $r7 = virtualinvoke $r6.<com.android.org.bouncycastle.crypto.params.DSAKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        r2 = staticinvoke <com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger generatePrivateKey(java.math.BigInteger,java.security.SecureRandom)>($r5, $r7);

        $r8 = virtualinvoke r1.<com.android.org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getP()>();

        $r9 = virtualinvoke r1.<com.android.org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getG()>();

        r3 = staticinvoke <com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger calculatePublicKey(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r8, $r9, r2);

        $r10 = new com.android.org.bouncycastle.crypto.AsymmetricCipherKeyPair;

        $r11 = new com.android.org.bouncycastle.crypto.params.DSAPublicKeyParameters;

        specialinvoke $r11.<com.android.org.bouncycastle.crypto.params.DSAPublicKeyParameters: void <init>(java.math.BigInteger,com.android.org.bouncycastle.crypto.params.DSAParameters)>(r3, r1);

        $r12 = new com.android.org.bouncycastle.crypto.params.DSAPrivateKeyParameters;

        specialinvoke $r12.<com.android.org.bouncycastle.crypto.params.DSAPrivateKeyParameters: void <init>(java.math.BigInteger,com.android.org.bouncycastle.crypto.params.DSAParameters)>(r2, r1);

        specialinvoke $r10.<com.android.org.bouncycastle.crypto.AsymmetricCipherKeyPair: void <init>(com.android.org.bouncycastle.crypto.params.AsymmetricKeyParameter,com.android.org.bouncycastle.crypto.params.AsymmetricKeyParameter)>($r11, $r12);

        return $r10;
    }

    private static java.math.BigInteger generatePrivateKey(java.math.BigInteger, java.security.SecureRandom)
    {
        java.math.BigInteger r0, $r2, $r3, $r4, $r5;
        java.security.SecureRandom r1;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.security.SecureRandom;

        $r3 = <com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger ONE>;

        $r2 = <com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger ONE>;

        $r4 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

        $r5 = staticinvoke <com.android.org.bouncycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r3, $r4, r1);

        return $r5;
    }

    private static java.math.BigInteger calculatePublicKey(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, r2, $r3;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        r2 := @parameter2: java.math.BigInteger;

        $r3 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>(r2, r0);

        return $r3;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <com.android.org.bouncycastle.crypto.generators.DSAKeyPairGenerator: java.math.BigInteger ONE> = $r0;

        return;
    }
}
