public abstract class com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi extends javax.crypto.CipherSpi
{
    private java.lang.Class[] availableSpecs;
    protected java.security.AlgorithmParameters engineParams;
    protected com.android.org.bouncycastle.crypto.Wrapper wrapEngine;
    private int ivSize;
    private byte[] iv;

    protected void <init>()
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.lang.Class[] $r1;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        specialinvoke r0.<javax.crypto.CipherSpi: void <init>()>();

        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "javax/crypto/spec/IvParameterSpec";

        $r1[1] = class "javax/crypto/spec/PBEParameterSpec";

        r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: java.lang.Class[] availableSpecs> = $r1;

        r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: java.security.AlgorithmParameters engineParams> = null;

        r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: com.android.org.bouncycastle.crypto.Wrapper wrapEngine> = null;

        return;
    }

    protected int engineGetBlockSize()
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        return 0;
    }

    protected byte[] engineGetIV()
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        return null;
    }

    protected int engineGetKeySize(java.security.Key)
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.security.Key r1;
        byte[] $r2;
        int $i0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        r1 := @parameter0: java.security.Key;

        $r2 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $i0 = lengthof $r2;

        return $i0;
    }

    protected int engineGetOutputSize(int)
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        int i0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        i0 := @parameter0: int;

        return -1;
    }

    protected java.security.AlgorithmParameters engineGetParameters()
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        return null;
    }

    protected void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.lang.String r1, $r6;
        java.security.NoSuchAlgorithmException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.security.NoSuchAlgorithmException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.lang.String r1, $r7;
        javax.crypto.NoSuchPaddingException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        r1 := @parameter0: java.lang.String;

        $r2 = new javax.crypto.NoSuchPaddingException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Padding ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    protected byte[] engineWrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        java.security.Key r1;
        byte[] r2, $r6, $r7;
        javax.crypto.BadPaddingException r3, $r9;
        com.android.org.bouncycastle.crypto.Wrapper $r4, $r5;
        int $i0, $i1;
        java.security.InvalidKeyException $r8;
        javax.crypto.IllegalBlockSizeException $r10;
        java.lang.String $r11;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        r1 := @parameter0: java.security.Key;

        r2 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        if r2 != null goto label1;

        $r8 = new java.security.InvalidKeyException;

        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Cannot wrap key, null encoding.");

        throw $r8;

     label1:
        $r4 = r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        if $r4 != null goto label3;

        $i1 = lengthof r2;

        $r7 = virtualinvoke r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: byte[] engineDoFinal(byte[],int,int)>(r2, 0, $i1);

     label2:
        return $r7;

     label3:
        $r5 = r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        $i0 = lengthof r2;

        $r6 = interfaceinvoke $r5.<com.android.org.bouncycastle.crypto.Wrapper: byte[] wrap(byte[],int,int)>(r2, 0, $i0);

     label4:
        return $r6;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

        $r10 = new javax.crypto.IllegalBlockSizeException;

        $r11 = virtualinvoke r3.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke $r10.<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>($r11);

        throw $r10;

        catch javax.crypto.BadPaddingException from label1 to label2 with label5;
        catch javax.crypto.BadPaddingException from label3 to label4 with label5;
    }

    protected java.security.Key engineUnwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException
    {
        com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi r0;
        byte[] r1, r3;
        java.lang.String r2, $r11, $r23, $r28, $r34, $r35, $r39, $r42, $r50, $r51, $r53, $r57;
        int i0, $i1, $i2;
        com.android.org.bouncycastle.crypto.InvalidCipherTextException r4, $r44;
        java.security.PrivateKey r5, $r13;
        com.android.org.bouncycastle.crypto.Wrapper $r6, $r7;
        boolean $z0;
        java.security.InvalidKeyException $r8, $r18, $r29, $r32, $r40, $r43, $r45, $r48, $r56;
        java.lang.StringBuilder $r9, $r10, $r12, $r17, $r20, $r21, $r24, $r27, $r30, $r33, $r36, $r37, $r38, $r47, $r52, $r54;
        java.security.spec.PKCS8EncodedKeySpec $r14;
        java.security.PublicKey $r15;
        java.security.spec.X509EncodedKeySpec $r16;
        com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier $r19;
        com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier $r22;
        java.security.spec.InvalidKeySpecException $r25, r65;
        javax.crypto.spec.SecretKeySpec $r26;
        java.security.NoSuchAlgorithmException $r31, r64;
        javax.crypto.IllegalBlockSizeException $r41, r59;
        java.lang.Exception $r46;
        java.security.NoSuchProviderException $r49, r63;
        javax.crypto.BadPaddingException $r55, r58;
        com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo r60;
        java.security.KeyFactory r62;

        r0 := @this: com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label01:
        $r6 = r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        if $r6 != null goto label02;

        $i2 = lengthof r1;

        r3 = virtualinvoke r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: byte[] engineDoFinal(byte[],int,int)>(r1, 0, $i2);

        goto label03;

     label02:
        $r7 = r0.<com.android.org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi: com.android.org.bouncycastle.crypto.Wrapper wrapEngine>;

        $i1 = lengthof r1;

        r3 = interfaceinvoke $r7.<com.android.org.bouncycastle.crypto.Wrapper: byte[] unwrap(byte[],int,int)>(r1, 0, $i1);

     label03:
        goto label07;

     label04:
        $r44 := @caughtexception;

        r4 = $r44;

        $r43 = new java.security.InvalidKeyException;

        $r50 = virtualinvoke r4.<com.android.org.bouncycastle.crypto.InvalidCipherTextException: java.lang.String getMessage()>();

        specialinvoke $r43.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r50);

        throw $r43;

     label05:
        $r55 := @caughtexception;

        r58 = $r55;

        $r56 = new java.security.InvalidKeyException;

        $r57 = virtualinvoke r58.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke $r56.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r57);

        throw $r56;

     label06:
        $r41 := @caughtexception;

        r59 = $r41;

        $r40 = new java.security.InvalidKeyException;

        $r39 = virtualinvoke r59.<javax.crypto.IllegalBlockSizeException: java.lang.String getMessage()>();

        specialinvoke $r40.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r39);

        throw $r40;

     label07:
        if i0 != 3 goto label08;

        $r26 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r26.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r3, r2);

        return $r26;

     label08:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label13;

        if i0 != 2 goto label13;

     label09:
        r60 = staticinvoke <com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo: com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object)>(r3);

        r5 = staticinvoke <com.android.org.bouncycastle.jce.provider.BouncyCastleProvider: java.security.PrivateKey getPrivateKey(com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>(r60);

        if r5 == null goto label11;

     label10:
        return r5;

     label11:
        $r18 = new java.security.InvalidKeyException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("algorithm ");

        $r19 = virtualinvoke r60.<com.android.org.bouncycastle.asn1.pkcs.PrivateKeyInfo: com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier getPrivateKeyAlgorithm()>();

        $r22 = virtualinvoke $r19.<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier getAlgorithm()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label12:
        $r46 := @caughtexception;

        $r45 = new java.security.InvalidKeyException;

        specialinvoke $r45.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Invalid key encoding.");

        throw $r45;

     label13:
        r62 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>(r2, "BC");

        if i0 != 1 goto label15;

        $r16 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r16.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r3);

        $r15 = virtualinvoke r62.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r16);

     label14:
        return $r15;

     label15:
        if i0 != 2 goto label17;

        $r14 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r14.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r3);

        $r13 = virtualinvoke r62.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r14);

     label16:
        return $r13;

     label17:
        goto label21;

     label18:
        $r49 := @caughtexception;

        r63 = $r49;

        $r48 = new java.security.InvalidKeyException;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r53 = virtualinvoke r63.<java.security.NoSuchProviderException: java.lang.String getMessage()>();

        $r52 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r51 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r51);

        throw $r48;

     label19:
        $r31 := @caughtexception;

        r64 = $r31;

        $r32 = new java.security.InvalidKeyException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r35 = virtualinvoke r64.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        $r36 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r42 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r42);

        throw $r32;

     label20:
        $r25 := @caughtexception;

        r65 = $r25;

        $r29 = new java.security.InvalidKeyException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r28 = virtualinvoke r65.<java.security.spec.InvalidKeySpecException: java.lang.String getMessage()>();

        $r33 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r34);

        throw $r29;

     label21:
        $r8 = new java.security.InvalidKeyException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r11);

        throw $r8;

        catch com.android.org.bouncycastle.crypto.InvalidCipherTextException from label01 to label03 with label04;
        catch javax.crypto.BadPaddingException from label01 to label03 with label05;
        catch javax.crypto.IllegalBlockSizeException from label01 to label03 with label06;
        catch java.lang.Exception from label09 to label10 with label12;
        catch java.lang.Exception from label11 to label12 with label12;
        catch java.security.NoSuchProviderException from label13 to label14 with label18;
        catch java.security.NoSuchProviderException from label15 to label16 with label18;
        catch java.security.NoSuchAlgorithmException from label13 to label14 with label19;
        catch java.security.NoSuchAlgorithmException from label15 to label16 with label19;
        catch java.security.spec.InvalidKeySpecException from label13 to label14 with label20;
        catch java.security.spec.InvalidKeySpecException from label15 to label16 with label20;
    }
}
