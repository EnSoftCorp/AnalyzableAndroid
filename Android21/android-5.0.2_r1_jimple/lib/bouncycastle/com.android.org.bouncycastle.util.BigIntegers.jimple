public final class com.android.org.bouncycastle.util.BigIntegers extends java.lang.Object
{
    private static final int MAX_ITERATIONS;
    private static final java.math.BigInteger ZERO;

    public void <init>()
    {
        com.android.org.bouncycastle.util.BigIntegers r0;

        r0 := @this: com.android.org.bouncycastle.util.BigIntegers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] asUnsignedByteArray(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        byte[] r1, r2;
        byte $b0;
        int $i1, $i2, $i3;

        r0 := @parameter0: java.math.BigInteger;

        r1 = virtualinvoke r0.<java.math.BigInteger: byte[] toByteArray()>();

        $b0 = r1[0];

        if $b0 != 0 goto label1;

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        r2 = newarray (byte)[$i2];

        $i3 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r1, 1, r2, 0, $i3);

        return r2;

     label1:
        return r1;
    }

    public static byte[] asUnsignedByteArray(int, java.math.BigInteger)
    {
        int i0, i2, $i3, $i5, $i6, $i7;
        java.math.BigInteger r0;
        byte[] r1, r2;
        byte b1, $b4, $b8;
        java.lang.IllegalArgumentException $r3;

        i0 := @parameter0: int;

        r0 := @parameter1: java.math.BigInteger;

        r1 = virtualinvoke r0.<java.math.BigInteger: byte[] toByteArray()>();

        $i3 = lengthof r1;

        if $i3 != i0 goto label1;

        return r1;

     label1:
        $b4 = r1[0];

        if $b4 != 0 goto label2;

        $b8 = 1;

        goto label3;

     label2:
        $b8 = 0;

     label3:
        b1 = $b8;

        $i5 = lengthof r1;

        i2 = $i5 - b1;

        if i2 <= i0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("standard length exceeded for value");

        throw $r3;

     label4:
        r2 = newarray (byte)[i0];

        $i6 = lengthof r2;

        $i7 = $i6 - i2;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r1, b1, r2, $i7, i2);

        return r2;
    }

    public static java.math.BigInteger createRandomInRange(java.math.BigInteger, java.math.BigInteger, java.security.SecureRandom)
    {
        java.math.BigInteger r0, r1, r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12;
        java.security.SecureRandom r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.IllegalArgumentException $r11;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        r2 := @parameter2: java.security.SecureRandom;

        i0 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r1);

        if i0 < 0 goto label2;

        if i0 <= 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'min\' may not be greater than \'max\'");

        throw $r11;

     label1:
        return r0;

     label2:
        $i2 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i3 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        $i4 = $i3 / 2;

        if $i2 <= $i4 goto label3;

        $r8 = <com.android.org.bouncycastle.util.BigIntegers: java.math.BigInteger ZERO>;

        $r10 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r0);

        $r9 = staticinvoke <com.android.org.bouncycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r8, $r10, r2);

        $r12 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r0);

        return $r12;

     label3:
        i1 = 0;

     label4:
        if i1 >= 1000 goto label6;

        $r7 = new java.math.BigInteger;

        $i8 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        specialinvoke $r7.<java.math.BigInteger: void <init>(int,java.util.Random)>($i8, r2);

        r3 = $r7;

        $i7 = virtualinvoke r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r0);

        if $i7 < 0 goto label5;

        $i9 = virtualinvoke r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r1);

        if $i9 > 0 goto label5;

        return r3;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        $r4 = new java.math.BigInteger;

        $r5 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>(r0);

        $i5 = virtualinvoke $r5.<java.math.BigInteger: int bitLength()>();

        $i6 = $i5 - 1;

        specialinvoke $r4.<java.math.BigInteger: void <init>(int,java.util.Random)>($i6, r2);

        $r6 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r0);

        return $r6;
    }

    public static java.math.BigInteger fromUnsignedByteArray(byte[])
    {
        byte[] r0;
        java.math.BigInteger $r1;

        r0 := @parameter0: byte[];

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, r0);

        return $r1;
    }

    public static java.math.BigInteger fromUnsignedByteArray(byte[], int, int)
    {
        byte[] r0, r1;
        int i0, i1, $i2;
        java.math.BigInteger $r2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 = r0;

        if i0 != 0 goto label1;

        $i2 = lengthof r0;

        if i1 == $i2 goto label2;

     label1:
        r1 = newarray (byte)[i1];

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r0, i0, r1, 0, i1);

     label2:
        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,byte[])>(1, r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0;

        <com.android.org.bouncycastle.util.BigIntegers: int MAX_ITERATIONS> = 1000;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <com.android.org.bouncycastle.util.BigIntegers: java.math.BigInteger ZERO> = $r0;

        return;
    }
}
