class com.android.org.bouncycastle.crypto.generators.DHParametersHelper extends java.lang.Object
{
    private static final java.util.logging.Logger logger;
    private static final java.math.BigInteger ONE;
    private static final java.math.BigInteger TWO;

    void <init>()
    {
        com.android.org.bouncycastle.crypto.generators.DHParametersHelper r0;

        r0 := @this: com.android.org.bouncycastle.crypto.generators.DHParametersHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.math.BigInteger[] generateSafePrimes(int, int, java.security.SecureRandom)
    {
        int i0, i1, i3, i4;
        java.security.SecureRandom r0;
        long l2, l5, l6;
        java.math.BigInteger r1, r2, $r4, $r5, $r6;
        java.util.logging.Logger $r3, $r9;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r12, $r13;
        java.math.BigInteger[] $r14;
        java.lang.String $r15;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.security.SecureRandom;

        $r3 = <com.android.org.bouncycastle.crypto.generators.DHParametersHelper: java.util.logging.Logger logger>;

        virtualinvoke $r3.<java.util.logging.Logger: void info(java.lang.String)>("Generating safe primes. This may take a long time.");

        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i3 = 0;

        i4 = i0 - 1;

     label1:
        i3 = i3 + 1;

        $r4 = new java.math.BigInteger;

        specialinvoke $r4.<java.math.BigInteger: void <init>(int,int,java.util.Random)>(i4, 2, r0);

        r1 = $r4;

        $r6 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r5 = <com.android.org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger ONE>;

        r2 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r5);

        $z0 = virtualinvoke r2.<java.math.BigInteger: boolean isProbablePrime(int)>(i1);

        if $z0 == 0 goto label1;

        if i1 <= 2 goto label2;

        $z1 = virtualinvoke r1.<java.math.BigInteger: boolean isProbablePrime(int)>(i1);

        if $z1 == 0 goto label1;

        goto label2;

     label2:
        l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l6 = l5 - l2;

        $r9 = <com.android.org.bouncycastle.crypto.generators.DHParametersHelper: java.util.logging.Logger logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Generated safe primes: ");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tries took ");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l6);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.logging.Logger: void info(java.lang.String)>($r15);

        $r14 = newarray (java.math.BigInteger)[2];

        $r14[0] = r2;

        $r14[1] = r1;

        return $r14;
    }

    static java.math.BigInteger selectGenerator(java.math.BigInteger, java.math.BigInteger, java.security.SecureRandom)
    {
        java.math.BigInteger r0, r1, r3, r4, r5, $r6, $r7, $r8, $r9;
        java.security.SecureRandom r2;
        boolean $z0;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        r2 := @parameter2: java.security.SecureRandom;

        $r6 = <com.android.org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger TWO>;

        r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r6);

     label1:
        $r7 = <com.android.org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger TWO>;

        r4 = staticinvoke <com.android.org.bouncycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r7, r3, r2);

        $r8 = <com.android.org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger TWO>;

        r5 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r8, r0);

        $r9 = <com.android.org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger ONE>;

        $z0 = virtualinvoke r5.<java.math.BigInteger: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label1;

        return r5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;
        java.math.BigInteger $r3, $r4;

        $r0 = class "com/android/org/bouncycastle/crypto/generators/DHParametersHelper";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.android.org.bouncycastle.crypto.generators.DHParametersHelper: java.util.logging.Logger logger> = $r2;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <com.android.org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger ONE> = $r3;

        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <com.android.org.bouncycastle.crypto.generators.DHParametersHelper: java.math.BigInteger TWO> = $r4;

        return;
    }
}
