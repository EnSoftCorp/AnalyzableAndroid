public class com.android.deskclock.AnalogClock extends android.view.View
{
    private android.text.format.Time mCalendar;
    private final android.graphics.drawable.Drawable mHourHand;
    private final android.graphics.drawable.Drawable mMinuteHand;
    private final android.graphics.drawable.Drawable mSecondHand;
    private final android.graphics.drawable.Drawable mDial;
    private final int mDialWidth;
    private final int mDialHeight;
    private boolean mAttached;
    private final android.os.Handler mHandler;
    private float mSeconds;
    private float mMinutes;
    private float mHour;
    private boolean mChanged;
    private final android.content.Context mContext;
    private java.lang.String mTimeZoneId;
    private boolean mNoSeconds;
    private final float mDotRadius;
    private final float mDotOffset;
    private android.graphics.Paint mDotPaint;
    private final android.content.BroadcastReceiver mIntentReceiver;
    private final java.lang.Runnable mClockTick;

    public void <init>(android.content.Context)
    {
        com.android.deskclock.AnalogClock r0;
        android.content.Context r1;

        r0 := @this: com.android.deskclock.AnalogClock;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.deskclock.AnalogClock: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        com.android.deskclock.AnalogClock r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: com.android.deskclock.AnalogClock;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<com.android.deskclock.AnalogClock: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        com.android.deskclock.AnalogClock r0;
        android.content.Context r1, $r8;
        android.util.AttributeSet r2;
        int i0, i1, $i2, $i3;
        android.content.res.Resources r3;
        android.content.res.TypedArray r4;
        android.os.Handler $r5;
        com.android.deskclock.AnalogClock$1 $r6;
        com.android.deskclock.AnalogClock$2 $r7;
        android.graphics.drawable.Drawable $r9, $r10, $r11, $r12, $r15, $r16;
        int[] $r13;
        float $f0, $f1;
        android.text.format.Time $r14;
        android.graphics.Paint $r17, $r18;

        r0 := @this: com.android.deskclock.AnalogClock;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, i0);

        $r5 = new android.os.Handler;

        specialinvoke $r5.<android.os.Handler: void <init>()>();

        r0.<com.android.deskclock.AnalogClock: android.os.Handler mHandler> = $r5;

        r0.<com.android.deskclock.AnalogClock: boolean mNoSeconds> = 0;

        $r6 = new com.android.deskclock.AnalogClock$1;

        specialinvoke $r6.<com.android.deskclock.AnalogClock$1: void <init>(com.android.deskclock.AnalogClock)>(r0);

        r0.<com.android.deskclock.AnalogClock: android.content.BroadcastReceiver mIntentReceiver> = $r6;

        $r7 = new com.android.deskclock.AnalogClock$2;

        specialinvoke $r7.<com.android.deskclock.AnalogClock$2: void <init>(com.android.deskclock.AnalogClock)>(r0);

        r0.<com.android.deskclock.AnalogClock: java.lang.Runnable mClockTick> = $r7;

        r0.<com.android.deskclock.AnalogClock: android.content.Context mContext> = r1;

        $r8 = r0.<com.android.deskclock.AnalogClock: android.content.Context mContext>;

        r3 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        $r9 = virtualinvoke r3.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(2130837518);

        r0.<com.android.deskclock.AnalogClock: android.graphics.drawable.Drawable mDial> = $r9;

        $r10 = virtualinvoke r3.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(2130837520);

        r0.<com.android.deskclock.AnalogClock: android.graphics.drawable.Drawable mHourHand> = $r10;

        $r11 = virtualinvoke r3.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(2130837522);

        r0.<com.android.deskclock.AnalogClock: android.graphics.drawable.Drawable mMinuteHand> = $r11;

        $r12 = virtualinvoke r3.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(2130837524);

        r0.<com.android.deskclock.AnalogClock: android.graphics.drawable.Drawable mSecondHand> = $r12;

        $r13 = <com.android.deskclock.R$styleable: int[] AnalogClock>;

        r4 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>(r2, $r13);

        $f1 = virtualinvoke r4.<android.content.res.TypedArray: float getDimension(int,float)>(0, 0.0F);

        r0.<com.android.deskclock.AnalogClock: float mDotRadius> = $f1;

        $f0 = virtualinvoke r4.<android.content.res.TypedArray: float getDimension(int,float)>(1, 0.0F);

        r0.<com.android.deskclock.AnalogClock: float mDotOffset> = $f0;

        i1 = virtualinvoke r4.<android.content.res.TypedArray: int getColor(int,int)>(2, -1);

        if i1 == 0 goto label1;

        $r18 = new android.graphics.Paint;

        specialinvoke $r18.<android.graphics.Paint: void <init>(int)>(1);

        r0.<com.android.deskclock.AnalogClock: android.graphics.Paint mDotPaint> = $r18;

        $r17 = r0.<com.android.deskclock.AnalogClock: android.graphics.Paint mDotPaint>;

        virtualinvoke $r17.<android.graphics.Paint: void setColor(int)>(i1);

     label1:
        $r14 = new android.text.format.Time;

        specialinvoke $r14.<android.text.format.Time: void <init>()>();

        r0.<com.android.deskclock.AnalogClock: android.text.format.Time mCalendar> = $r14;

        $r15 = r0.<com.android.deskclock.AnalogClock: android.graphics.drawable.Drawable mDial>;

        $i2 = virtualinvoke $r15.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        r0.<com.android.deskclock.AnalogClock: int mDialWidth> = $i2;

        $r16 = r0.<com.android.deskclock.AnalogClock: android.graphics.drawable.Drawable mDial>;

        $i3 = virtualinvoke $r16.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        r0.<com.android.deskclock.AnalogClock: int mDialHeight> = $i3;

        return;
    }

    protected void onAttachedToWindow()
    {
        com.android.deskclock.AnalogClock r0;
        android.content.IntentFilter r1, $r4;
        boolean $z0;
        android.text.format.Time $r2;
        java.lang.Runnable $r3;
        android.content.Context $r5;
        android.os.Handler $r6;
        android.content.BroadcastReceiver $r7;

        r0 := @this: com.android.deskclock.AnalogClock;

        specialinvoke r0.<android.view.View: void onAttachedToWindow()>();

        $z0 = r0.<com.android.deskclock.AnalogClock: boolean mAttached>;

        if $z0 != 0 goto label1;

        r0.<com.android.deskclock.AnalogClock: boolean mAttached> = 1;

        $r4 = new android.content.IntentFilter;

        specialinvoke $r4.<android.content.IntentFilter: void <init>()>();

        r1 = $r4;

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.TIME_TICK");

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.TIME_SET");

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.TIMEZONE_CHANGED");

        $r5 = virtualinvoke r0.<com.android.deskclock.AnalogClock: android.content.Context getContext()>();

        $r7 = r0.<com.android.deskclock.AnalogClock: android.content.BroadcastReceiver mIntentReceiver>;

        $r6 = r0.<com.android.deskclock.AnalogClock: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r7, r1, null, $r6);

     label1:
        $r2 = new android.text.format.Time;

        specialinvoke $r2.<android.text.format.Time: void <init>()>();

        r0.<com.android.deskclock.AnalogClock: android.text.format.Time mCalendar> = $r2;

        specialinvoke r0.<com.android.deskclock.AnalogClock: void onTimeChanged()>();

        $r3 = r0.<com.android.deskclock.AnalogClock: java.lang.Runnable mClockTick>;

        virtualinvoke r0.<com.android.deskclock.AnalogClock: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    protected void onDetachedFromWindow()
    {
        com.android.deskclock.AnalogClock r0;
        boolean $z0;
        android.content.Context $r1;
        android.content.BroadcastReceiver $r2;
        java.lang.Runnable $r3;

        r0 := @this: com.android.deskclock.AnalogClock;

        specialinvoke r0.<android.view.View: void onDetachedFromWindow()>();

        $z0 = r0.<com.android.deskclock.AnalogClock: boolean mAttached>;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.android.deskclock.AnalogClock: android.content.Context getContext()>();

        $r2 = r0.<com.android.deskclock.AnalogClock: android.content.BroadcastReceiver mIntentReceiver>;

        virtualinvoke $r1.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r2);

        $r3 = r0.<com.android.deskclock.AnalogClock: java.lang.Runnable mClockTick>;

        virtualinvoke r0.<com.android.deskclock.AnalogClock: boolean removeCallbacks(java.lang.Runnable)>($r3);

        r0.<com.android.deskclock.AnalogClock: boolean mAttached> = 0;

     label1:
        return;
    }

    protected void onMeasure(int, int)
    {
        com.android.deskclock.AnalogClock r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;

        r0 := @this: com.android.deskclock.AnalogClock;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i0);

        i3 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i0);

        i4 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i1);

        i5 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i1);

        f0 = 1.0F;

        f1 = 1.0F;

        if i2 == 0 goto label1;

        $i14 = r0.<com.android.deskclock.AnalogClock: int mDialWidth>;

        if i3 >= $i14 goto label1;

        $f10 = (float) i3;

        $i15 = r0.<com.android.deskclock.AnalogClock: int mDialWidth>;

        $f9 = (float) $i15;

        f0 = $f10 / $f9;

     label1:
        if i4 == 0 goto label2;

        $i11 = r0.<com.android.deskclock.AnalogClock: int mDialHeight>;

        if i5 >= $i11 goto label2;

        $f8 = (float) i5;

        $i13 = r0.<com.android.deskclock.AnalogClock: int mDialHeight>;

        $f7 = (float) $i13;

        f1 = $f8 / $f7;

     label2:
        f2 = staticinvoke <java.lang.Math: float min(float,float)>(f0, f1);

        $i6 = r0.<com.android.deskclock.AnalogClock: int mDialWidth>;

        $f4 = (float) $i6;

        $f3 = $f4 * f2;

        $i8 = (int) $f3;

        $i7 = staticinvoke <com.android.deskclock.AnalogClock: int resolveSizeAndState(int,int,int)>($i8, i0, 0);

        $i9 = r0.<com.android.deskclock.AnalogClock: int mDialHeight>;

        $f5 = (float) $i9;

        $f6 = $f5 * f2;

        $i10 = (int) $f6;

        $i12 = staticinvoke <com.android.deskclock.AnalogClock: int resolveSizeAndState(int,int,int)>($i10, i1, 0);

        virtualinvoke r0.<com.android.deskclock.AnalogClock: void setMeasuredDimension(int,int)>($i7, $i12);

        return;
    }

    protected void onSizeChanged(int, int, int, int)
    {
        com.android.deskclock.AnalogClock r0;
        int i0, i1, i2, i3;

        r0 := @this: com.android.deskclock.AnalogClock;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<android.view.View: void onSizeChanged(int,int,int,int)>(i0, i1, i2, i3);

        r0.<com.android.deskclock.AnalogClock: boolean mChanged> = 1;

        return;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        com.android.deskclock.AnalogClock r0;
        android.graphics.Canvas r1;
        boolean z0, z1, $z2;
        int i0, i1, i2, i3, i4, i5, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        android.graphics.drawable.Drawable r2, $r3, $r4, $r5;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23;
        byte $b7;
        android.graphics.Paint $r6, $r7;

        r0 := @this: com.android.deskclock.AnalogClock;

        r1 := @parameter0: android.graphics.Canvas;

        specialinvoke r0.<android.view.View: void onDraw(android.graphics.Canvas)>(r1);

        z0 = r0.<com.android.deskclock.AnalogClock: boolean mChanged>;

        if z0 == 0 goto label1;

        r0.<com.android.deskclock.AnalogClock: boolean mChanged> = 0;

     label1:
        i0 = virtualinvoke r0.<com.android.deskclock.AnalogClock: int getWidth()>();

        i1 = virtualinvoke r0.<com.android.deskclock.AnalogClock: int getHeight()>();

        i2 = i0 / 2;

        i3 = i1 / 2;

        r2 = r0.<com.android.deskclock.AnalogClock: android.graphics.drawable.Drawable mDial>;

        i4 = virtualinvoke r2.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        i5 = virtualinvoke r2.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        z1 = 0;

        if i0 < i4 goto label2;

        if i1 >= i5 goto label3;

     label2:
        z1 = 1;

        $f1 = (float) i0;

        $f2 = (float) i4;

        $f5 = $f1 / $f2;

        $f3 = (float) i1;

        $f4 = (float) i5;

        $f6 = $f3 / $f4;

        f0 = staticinvoke <java.lang.Math: float min(float,float)>($f5, $f6);

        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $f7 = (float) i2;

        $f8 = (float) i3;

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float,float,float)>(f0, f0, $f7, $f8);

     label3:
        if z0 == 0 goto label4;

        $i11 = i4 / 2;

        $i16 = i2 - $i11;

        $i10 = i5 / 2;

        $i17 = i3 - $i10;

        $i15 = i4 / 2;

        $i12 = i2 + $i15;

        $i14 = i5 / 2;

        $i13 = i3 + $i14;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i16, $i17, $i12, $i13);

     label4:
        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        $f9 = r0.<com.android.deskclock.AnalogClock: float mDotRadius>;

        $b7 = $f9 cmpl 0.0F;

        if $b7 <= 0 goto label5;

        $r6 = r0.<com.android.deskclock.AnalogClock: android.graphics.Paint mDotPaint>;

        if $r6 == null goto label5;

        $f22 = (float) i2;

        $i8 = i5 / 2;

        $i9 = i3 - $i8;

        $f21 = (float) $i9;

        $f20 = r0.<com.android.deskclock.AnalogClock: float mDotOffset>;

        $f23 = $f21 + $f20;

        $f19 = r0.<com.android.deskclock.AnalogClock: float mDotRadius>;

        $r7 = r0.<com.android.deskclock.AnalogClock: android.graphics.Paint mDotPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f22, $f23, $f19, $r7);

     label5:
        $r3 = r0.<com.android.deskclock.AnalogClock: android.graphics.drawable.Drawable mHourHand>;

        $f11 = r0.<com.android.deskclock.AnalogClock: float mHour>;

        $f10 = $f11 / 12.0F;

        $f12 = $f10 * 360.0F;

        specialinvoke r0.<com.android.deskclock.AnalogClock: void drawHand(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,float,boolean)>(r1, $r3, i2, i3, $f12, z0);

        $r4 = r0.<com.android.deskclock.AnalogClock: android.graphics.drawable.Drawable mMinuteHand>;

        $f14 = r0.<com.android.deskclock.AnalogClock: float mMinutes>;

        $f15 = $f14 / 60.0F;

        $f13 = $f15 * 360.0F;

        specialinvoke r0.<com.android.deskclock.AnalogClock: void drawHand(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,float,boolean)>(r1, $r4, i2, i3, $f13, z0);

        $z2 = r0.<com.android.deskclock.AnalogClock: boolean mNoSeconds>;

        if $z2 != 0 goto label6;

        $r5 = r0.<com.android.deskclock.AnalogClock: android.graphics.drawable.Drawable mSecondHand>;

        $f18 = r0.<com.android.deskclock.AnalogClock: float mSeconds>;

        $f16 = $f18 / 60.0F;

        $f17 = $f16 * 360.0F;

        specialinvoke r0.<com.android.deskclock.AnalogClock: void drawHand(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,float,boolean)>(r1, $r5, i2, i3, $f17, z0);

     label6:
        if z1 == 0 goto label7;

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

     label7:
        return;
    }

    private void drawHand(android.graphics.Canvas, android.graphics.drawable.Drawable, int, int, float, boolean)
    {
        com.android.deskclock.AnalogClock r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        float f0, $f1, $f2;
        boolean z0;

        r0 := @this: com.android.deskclock.AnalogClock;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.drawable.Drawable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        f0 := @parameter4: float;

        z0 := @parameter5: boolean;

        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $f2 = (float) i0;

        $f1 = (float) i1;

        virtualinvoke r1.<android.graphics.Canvas: void rotate(float,float,float)>(f0, $f2, $f1);

        if z0 == 0 goto label1;

        i2 = virtualinvoke r2.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        i3 = virtualinvoke r2.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        $i5 = i2 / 2;

        $i11 = i0 - $i5;

        $i6 = i3 / 2;

        $i12 = i1 - $i6;

        $i8 = i2 / 2;

        $i9 = i0 + $i8;

        $i7 = i3 / 2;

        $i10 = i1 + $i7;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i11, $i12, $i9, $i10);

     label1:
        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

        return;
    }

    private void onTimeChanged()
    {
        com.android.deskclock.AnalogClock r0;
        int i0, i1, i2;
        android.text.format.Time $r1, $r3, $r4, $r5, $r7, $r8;
        java.lang.String $r2, $r6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;

        r0 := @this: com.android.deskclock.AnalogClock;

        $r1 = r0.<com.android.deskclock.AnalogClock: android.text.format.Time mCalendar>;

        virtualinvoke $r1.<android.text.format.Time: void setToNow()>();

        $r2 = r0.<com.android.deskclock.AnalogClock: java.lang.String mTimeZoneId>;

        if $r2 == null goto label1;

        $r8 = r0.<com.android.deskclock.AnalogClock: android.text.format.Time mCalendar>;

        $r6 = r0.<com.android.deskclock.AnalogClock: java.lang.String mTimeZoneId>;

        virtualinvoke $r8.<android.text.format.Time: void switchTimezone(java.lang.String)>($r6);

     label1:
        $r3 = r0.<com.android.deskclock.AnalogClock: android.text.format.Time mCalendar>;

        i0 = $r3.<android.text.format.Time: int hour>;

        $r4 = r0.<com.android.deskclock.AnalogClock: android.text.format.Time mCalendar>;

        i1 = $r4.<android.text.format.Time: int minute>;

        $r5 = r0.<com.android.deskclock.AnalogClock: android.text.format.Time mCalendar>;

        i2 = $r5.<android.text.format.Time: int second>;

        $f0 = (float) i2;

        r0.<com.android.deskclock.AnalogClock: float mSeconds> = $f0;

        $f3 = (float) i1;

        $f1 = (float) i2;

        $f2 = $f1 / 60.0F;

        $f4 = $f3 + $f2;

        r0.<com.android.deskclock.AnalogClock: float mMinutes> = $f4;

        $f8 = (float) i0;

        $f5 = r0.<com.android.deskclock.AnalogClock: float mMinutes>;

        $f6 = $f5 / 60.0F;

        $f7 = $f8 + $f6;

        r0.<com.android.deskclock.AnalogClock: float mHour> = $f7;

        r0.<com.android.deskclock.AnalogClock: boolean mChanged> = 1;

        $r7 = r0.<com.android.deskclock.AnalogClock: android.text.format.Time mCalendar>;

        specialinvoke r0.<com.android.deskclock.AnalogClock: void updateContentDescription(android.text.format.Time)>($r7);

        return;
    }

    private void updateContentDescription(android.text.format.Time)
    {
        com.android.deskclock.AnalogClock r0;
        android.text.format.Time r1;
        java.lang.String r2;
        android.content.Context $r3;
        long $l1;

        r0 := @this: com.android.deskclock.AnalogClock;

        r1 := @parameter0: android.text.format.Time;

        $r3 = r0.<com.android.deskclock.AnalogClock: android.content.Context mContext>;

        $l1 = virtualinvoke r1.<android.text.format.Time: long toMillis(boolean)>(0);

        r2 = staticinvoke <android.text.format.DateUtils: java.lang.String formatDateTime(android.content.Context,long,int)>($r3, $l1, 129);

        virtualinvoke r0.<com.android.deskclock.AnalogClock: void setContentDescription(java.lang.CharSequence)>(r2);

        return;
    }

    public void setTimeZone(java.lang.String)
    {
        com.android.deskclock.AnalogClock r0;
        java.lang.String r1;

        r0 := @this: com.android.deskclock.AnalogClock;

        r1 := @parameter0: java.lang.String;

        r0.<com.android.deskclock.AnalogClock: java.lang.String mTimeZoneId> = r1;

        specialinvoke r0.<com.android.deskclock.AnalogClock: void onTimeChanged()>();

        return;
    }

    public void enableSeconds(boolean)
    {
        com.android.deskclock.AnalogClock r0;
        boolean z0, $z1;

        r0 := @this: com.android.deskclock.AnalogClock;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<com.android.deskclock.AnalogClock: boolean mNoSeconds> = $z1;

        return;
    }

    static android.text.format.Time access$002(com.android.deskclock.AnalogClock, android.text.format.Time)
    {
        com.android.deskclock.AnalogClock r0;
        android.text.format.Time r1;

        r0 := @parameter0: com.android.deskclock.AnalogClock;

        r1 := @parameter1: android.text.format.Time;

        r0.<com.android.deskclock.AnalogClock: android.text.format.Time mCalendar> = r1;

        return r1;
    }

    static void access$100(com.android.deskclock.AnalogClock)
    {
        com.android.deskclock.AnalogClock r0;

        r0 := @parameter0: com.android.deskclock.AnalogClock;

        specialinvoke r0.<com.android.deskclock.AnalogClock: void onTimeChanged()>();

        return;
    }

    static java.lang.Runnable access$200(com.android.deskclock.AnalogClock)
    {
        com.android.deskclock.AnalogClock r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: com.android.deskclock.AnalogClock;

        $r1 = r0.<com.android.deskclock.AnalogClock: java.lang.Runnable mClockTick>;

        return $r1;
    }
}
