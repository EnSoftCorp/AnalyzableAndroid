public class com.android.deskclock.widget.TextTime extends android.widget.TextView
{
    public static final java.lang.CharSequence DEFAULT_FORMAT_12_HOUR;
    public static final java.lang.CharSequence DEFAULT_FORMAT_24_HOUR;
    private java.lang.CharSequence mFormat12;
    private java.lang.CharSequence mFormat24;
    private java.lang.CharSequence mFormat;
    private java.lang.String mContentDescriptionFormat;
    private boolean mAttached;
    private int mHour;
    private int mMinute;
    private final android.database.ContentObserver mFormatChangeObserver;

    public void <init>(android.content.Context)
    {
        com.android.deskclock.widget.TextTime r0;
        android.content.Context r1;

        r0 := @this: com.android.deskclock.widget.TextTime;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.deskclock.widget.TextTime: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        com.android.deskclock.widget.TextTime r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: com.android.deskclock.widget.TextTime;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<com.android.deskclock.widget.TextTime: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        com.android.deskclock.widget.TextTime r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;
        android.content.res.TypedArray r3;
        java.lang.Throwable r4, $r10;
        com.android.deskclock.widget.TextTime$1 $r5;
        android.os.Handler $r6;
        int[] $r7;
        java.lang.CharSequence $r8, $r9;

        r0 := @this: com.android.deskclock.widget.TextTime;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, i0);

        $r5 = new com.android.deskclock.widget.TextTime$1;

        $r6 = new android.os.Handler;

        specialinvoke $r6.<android.os.Handler: void <init>()>();

        specialinvoke $r5.<com.android.deskclock.widget.TextTime$1: void <init>(com.android.deskclock.widget.TextTime,android.os.Handler)>(r0, $r6);

        r0.<com.android.deskclock.widget.TextTime: android.database.ContentObserver mFormatChangeObserver> = $r5;

        $r7 = <com.android.deskclock.R$styleable: int[] TextTime>;

        r3 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r2, $r7, i0, 0);

     label1:
        $r8 = virtualinvoke r3.<android.content.res.TypedArray: java.lang.CharSequence getText(int)>(0);

        r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat12> = $r8;

        $r9 = virtualinvoke r3.<android.content.res.TypedArray: java.lang.CharSequence getText(int)>(1);

        r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat24> = $r9;

     label2:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        goto label5;

     label3:
        $r10 := @caughtexception;

        r4 = $r10;

     label4:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        throw r4;

     label5:
        specialinvoke r0.<com.android.deskclock.widget.TextTime: void chooseFormat()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.CharSequence getFormat12Hour()
    {
        com.android.deskclock.widget.TextTime r0;
        java.lang.CharSequence $r1;

        r0 := @this: com.android.deskclock.widget.TextTime;

        $r1 = r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat12>;

        return $r1;
    }

    public void setFormat12Hour(java.lang.CharSequence)
    {
        com.android.deskclock.widget.TextTime r0;
        java.lang.CharSequence r1;

        r0 := @this: com.android.deskclock.widget.TextTime;

        r1 := @parameter0: java.lang.CharSequence;

        r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat12> = r1;

        specialinvoke r0.<com.android.deskclock.widget.TextTime: void chooseFormat()>();

        specialinvoke r0.<com.android.deskclock.widget.TextTime: void updateTime()>();

        return;
    }

    public java.lang.CharSequence getFormat24Hour()
    {
        com.android.deskclock.widget.TextTime r0;
        java.lang.CharSequence $r1;

        r0 := @this: com.android.deskclock.widget.TextTime;

        $r1 = r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat24>;

        return $r1;
    }

    public void setFormat24Hour(java.lang.CharSequence)
    {
        com.android.deskclock.widget.TextTime r0;
        java.lang.CharSequence r1;

        r0 := @this: com.android.deskclock.widget.TextTime;

        r1 := @parameter0: java.lang.CharSequence;

        r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat24> = r1;

        specialinvoke r0.<com.android.deskclock.widget.TextTime: void chooseFormat()>();

        specialinvoke r0.<com.android.deskclock.widget.TextTime: void updateTime()>();

        return;
    }

    private void chooseFormat()
    {
        com.android.deskclock.widget.TextTime r0;
        boolean z0;
        android.content.Context $r1;
        java.lang.CharSequence $r2, $r3, $r4, $r6, $r7;
        java.lang.String $r5;

        r0 := @this: com.android.deskclock.widget.TextTime;

        $r1 = virtualinvoke r0.<com.android.deskclock.widget.TextTime: android.content.Context getContext()>();

        z0 = staticinvoke <android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)>($r1);

        if z0 == 0 goto label3;

        $r6 = r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat24>;

        if $r6 != null goto label1;

        $r7 = <com.android.deskclock.widget.TextTime: java.lang.CharSequence DEFAULT_FORMAT_24_HOUR>;

        goto label2;

     label1:
        $r7 = r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat24>;

     label2:
        r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat> = $r7;

        goto label6;

     label3:
        $r2 = r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat12>;

        if $r2 != null goto label4;

        $r3 = <com.android.deskclock.widget.TextTime: java.lang.CharSequence DEFAULT_FORMAT_12_HOUR>;

        goto label5;

     label4:
        $r3 = r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat12>;

     label5:
        r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat> = $r3;

     label6:
        $r4 = r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat>;

        $r5 = interfaceinvoke $r4.<java.lang.CharSequence: java.lang.String toString()>();

        r0.<com.android.deskclock.widget.TextTime: java.lang.String mContentDescriptionFormat> = $r5;

        return;
    }

    protected void onAttachedToWindow()
    {
        com.android.deskclock.widget.TextTime r0;
        boolean $z0;

        r0 := @this: com.android.deskclock.widget.TextTime;

        specialinvoke r0.<android.widget.TextView: void onAttachedToWindow()>();

        $z0 = r0.<com.android.deskclock.widget.TextTime: boolean mAttached>;

        if $z0 != 0 goto label1;

        r0.<com.android.deskclock.widget.TextTime: boolean mAttached> = 1;

        specialinvoke r0.<com.android.deskclock.widget.TextTime: void registerObserver()>();

        specialinvoke r0.<com.android.deskclock.widget.TextTime: void updateTime()>();

     label1:
        return;
    }

    protected void onDetachedFromWindow()
    {
        com.android.deskclock.widget.TextTime r0;
        boolean $z0;

        r0 := @this: com.android.deskclock.widget.TextTime;

        specialinvoke r0.<android.widget.TextView: void onDetachedFromWindow()>();

        $z0 = r0.<com.android.deskclock.widget.TextTime: boolean mAttached>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.deskclock.widget.TextTime: void unregisterObserver()>();

        r0.<com.android.deskclock.widget.TextTime: boolean mAttached> = 0;

     label1:
        return;
    }

    private void registerObserver()
    {
        com.android.deskclock.widget.TextTime r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        android.database.ContentObserver $r3;
        android.net.Uri $r4;

        r0 := @this: com.android.deskclock.widget.TextTime;

        $r2 = virtualinvoke r0.<com.android.deskclock.widget.TextTime: android.content.Context getContext()>();

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = <android.provider.Settings$System: android.net.Uri CONTENT_URI>;

        $r3 = r0.<com.android.deskclock.widget.TextTime: android.database.ContentObserver mFormatChangeObserver>;

        virtualinvoke r1.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r4, 1, $r3);

        return;
    }

    private void unregisterObserver()
    {
        com.android.deskclock.widget.TextTime r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        android.database.ContentObserver $r3;

        r0 := @this: com.android.deskclock.widget.TextTime;

        $r2 = virtualinvoke r0.<com.android.deskclock.widget.TextTime: android.content.Context getContext()>();

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = r0.<com.android.deskclock.widget.TextTime: android.database.ContentObserver mFormatChangeObserver>;

        virtualinvoke r1.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r3);

        return;
    }

    public void setFormat(int)
    {
        com.android.deskclock.widget.TextTime r0;
        int i0;
        java.lang.CharSequence $r1, $r2;

        r0 := @this: com.android.deskclock.widget.TextTime;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.deskclock.Utils: java.lang.CharSequence get12ModeFormat(int)>(i0);

        virtualinvoke r0.<com.android.deskclock.widget.TextTime: void setFormat12Hour(java.lang.CharSequence)>($r1);

        $r2 = staticinvoke <com.android.deskclock.Utils: java.lang.CharSequence get24ModeFormat()>();

        virtualinvoke r0.<com.android.deskclock.widget.TextTime: void setFormat24Hour(java.lang.CharSequence)>($r2);

        return;
    }

    public void setTime(int, int)
    {
        com.android.deskclock.widget.TextTime r0;
        int i0, i1;

        r0 := @this: com.android.deskclock.widget.TextTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<com.android.deskclock.widget.TextTime: int mHour> = i0;

        r0.<com.android.deskclock.widget.TextTime: int mMinute> = i1;

        specialinvoke r0.<com.android.deskclock.widget.TextTime: void updateTime()>();

        return;
    }

    private void updateTime()
    {
        com.android.deskclock.widget.TextTime r0;
        java.util.Calendar r1;
        int $i0, $i1;
        java.lang.CharSequence $r2, $r3, $r5, $r6, $r8;
        java.lang.String $r4, $r7;

        r0 := @this: com.android.deskclock.widget.TextTime;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i0 = r0.<com.android.deskclock.widget.TextTime: int mHour>;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, $i0);

        $i1 = r0.<com.android.deskclock.widget.TextTime: int mMinute>;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, $i1);

        $r2 = r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat>;

        $r3 = staticinvoke <android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Calendar)>($r2, r1);

        virtualinvoke r0.<com.android.deskclock.widget.TextTime: void setText(java.lang.CharSequence)>($r3);

        $r4 = r0.<com.android.deskclock.widget.TextTime: java.lang.String mContentDescriptionFormat>;

        if $r4 == null goto label1;

        $r7 = r0.<com.android.deskclock.widget.TextTime: java.lang.String mContentDescriptionFormat>;

        $r8 = staticinvoke <android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Calendar)>($r7, r1);

        virtualinvoke r0.<com.android.deskclock.widget.TextTime: void setContentDescription(java.lang.CharSequence)>($r8);

        goto label2;

     label1:
        $r5 = r0.<com.android.deskclock.widget.TextTime: java.lang.CharSequence mFormat>;

        $r6 = staticinvoke <android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Calendar)>($r5, r1);

        virtualinvoke r0.<com.android.deskclock.widget.TextTime: void setContentDescription(java.lang.CharSequence)>($r6);

     label2:
        return;
    }

    static void access$000(com.android.deskclock.widget.TextTime)
    {
        com.android.deskclock.widget.TextTime r0;

        r0 := @parameter0: com.android.deskclock.widget.TextTime;

        specialinvoke r0.<com.android.deskclock.widget.TextTime: void chooseFormat()>();

        return;
    }

    static void access$100(com.android.deskclock.widget.TextTime)
    {
        com.android.deskclock.widget.TextTime r0;

        r0 := @parameter0: com.android.deskclock.widget.TextTime;

        specialinvoke r0.<com.android.deskclock.widget.TextTime: void updateTime()>();

        return;
    }

    static void <clinit>()
    {
        <com.android.deskclock.widget.TextTime: java.lang.CharSequence DEFAULT_FORMAT_12_HOUR> = "h:mm a";

        <com.android.deskclock.widget.TextTime: java.lang.CharSequence DEFAULT_FORMAT_12_HOUR> = "h:mm a";

        <com.android.deskclock.widget.TextTime: java.lang.CharSequence DEFAULT_FORMAT_24_HOUR> = "H:mm";

        return;
    }
}
