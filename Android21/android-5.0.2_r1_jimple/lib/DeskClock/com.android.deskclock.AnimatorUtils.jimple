public class com.android.deskclock.AnimatorUtils extends java.lang.Object
{
    public static final long ANIM_DURATION_SHORT;
    public static final android.view.animation.Interpolator DECELERATE_ACCELERATE_INTERPOLATOR;
    public static final android.util.Property BACKGROUND_ALPHA;
    public static final android.util.Property DRAWABLE_ALPHA;
    public static final android.util.Property DRAWABLE_TINT;
    public static final android.animation.TypeEvaluator ARGB_EVALUATOR;
    private static java.lang.reflect.Method sAnimateValue;
    private static boolean sTryAnimateValue;

    public void <init>()
    {
        com.android.deskclock.AnimatorUtils r0;

        r0 := @this: com.android.deskclock.AnimatorUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setAnimatedFraction(android.animation.ValueAnimator, float)
    {
        android.animation.ValueAnimator r0;
        float f0, $f1, $f2;
        java.lang.ReflectiveOperationException r1, $r12;
        boolean $z0;
        long $l0, $l2;
        int $i1;
        java.lang.reflect.Method $r2, $r4, $r10, $r11;
        java.lang.Object[] $r3;
        java.lang.Float $r5;
        java.lang.Class[] $r7;
        java.lang.Class $r8, $r9;

        r0 := @parameter0: android.animation.ValueAnimator;

        f0 := @parameter1: float;

        $z0 = <com.android.deskclock.AnimatorUtils: boolean sTryAnimateValue>;

        if $z0 == 0 goto label5;

     label1:
        $r2 = <com.android.deskclock.AnimatorUtils: java.lang.reflect.Method sAnimateValue>;

        if $r2 != null goto label2;

        $r8 = class "android/animation/ValueAnimator";

        $r7 = newarray (java.lang.Class)[1];

        $r9 = <java.lang.Float: java.lang.Class TYPE>;

        $r7[0] = $r9;

        $r11 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("animateValue", $r7);

        <com.android.deskclock.AnimatorUtils: java.lang.reflect.Method sAnimateValue> = $r11;

        $r10 = <com.android.deskclock.AnimatorUtils: java.lang.reflect.Method sAnimateValue>;

        virtualinvoke $r10.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label2:
        $r4 = <com.android.deskclock.AnimatorUtils: java.lang.reflect.Method sAnimateValue>;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r3[0] = $r5;

        virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r3);

     label3:
        return;

     label4:
        $r12 := @caughtexception;

        r1 = $r12;

        staticinvoke <com.android.deskclock.LogUtils: void e(java.lang.String,java.lang.Exception)>("Unable to use animateValue directly", r1);

        <com.android.deskclock.AnimatorUtils: boolean sTryAnimateValue> = 0;

     label5:
        $l0 = virtualinvoke r0.<android.animation.ValueAnimator: long getDuration()>();

        $f1 = (float) $l0;

        $f2 = f0 * $f1;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f2);

        $l2 = (long) $i1;

        virtualinvoke r0.<android.animation.ValueAnimator: void setCurrentPlayTime(long)>($l2);

        return;

        catch java.lang.NoSuchMethodException from label1 to label3 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label3 with label4;
        catch java.lang.IllegalAccessException from label1 to label3 with label4;
    }

    public static transient void start(android.animation.ValueAnimator[])
    {
        android.animation.ValueAnimator[] r0, r1;
        int i0, i1;
        android.animation.ValueAnimator r2;
        float f0;
        byte $b2;

        r0 := @parameter0: android.animation.ValueAnimator[];

        r1 = r0;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        f0 = virtualinvoke r2.<android.animation.ValueAnimator: float getAnimatedFraction()>();

        $b2 = f0 cmpg 1.0F;

        if $b2 >= 0 goto label2;

        virtualinvoke r2.<android.animation.ValueAnimator: void start()>();

        staticinvoke <com.android.deskclock.AnimatorUtils: void setAnimatedFraction(android.animation.ValueAnimator,float)>(r2, f0);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static transient void reverse(android.animation.ValueAnimator[])
    {
        android.animation.ValueAnimator[] r0, r1;
        int i0, i1;
        android.animation.ValueAnimator r2;
        float f0, $f1;
        byte $b2;

        r0 := @parameter0: android.animation.ValueAnimator[];

        r1 = r0;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        f0 = virtualinvoke r2.<android.animation.ValueAnimator: float getAnimatedFraction()>();

        $b2 = f0 cmpl 0.0F;

        if $b2 <= 0 goto label2;

        virtualinvoke r2.<android.animation.ValueAnimator: void reverse()>();

        $f1 = 1.0F - f0;

        staticinvoke <com.android.deskclock.AnimatorUtils: void setAnimatedFraction(android.animation.ValueAnimator,float)>(r2, $f1);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static transient void cancel(android.animation.ValueAnimator[])
    {
        android.animation.ValueAnimator[] r0, r1;
        int i0, i1;
        android.animation.ValueAnimator r2;

        r0 := @parameter0: android.animation.ValueAnimator[];

        r1 = r0;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        virtualinvoke r2.<android.animation.ValueAnimator: void cancel()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static transient android.animation.ValueAnimator getScaleAnimator(android.view.View, float[])
    {
        android.view.View r0;
        float[] r1;
        android.animation.PropertyValuesHolder[] $r2;
        android.util.Property $r3, $r5;
        android.animation.PropertyValuesHolder $r4, $r6;
        android.animation.ObjectAnimator $r7;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: float[];

        $r2 = newarray (android.animation.PropertyValuesHolder)[2];

        $r3 = <android.view.View: android.util.Property SCALE_X>;

        $r4 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(android.util.Property,float[])>($r3, r1);

        $r2[0] = $r4;

        $r5 = <android.view.View: android.util.Property SCALE_Y>;

        $r6 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(android.util.Property,float[])>($r5, r1);

        $r2[1] = $r6;

        $r7 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object,android.animation.PropertyValuesHolder[])>(r0, $r2);

        return $r7;
    }

    static void <clinit>()
    {
        com.android.deskclock.AnimatorUtils$1 $r0;
        com.android.deskclock.AnimatorUtils$2 $r1;
        com.android.deskclock.AnimatorUtils$3 $r2;
        com.android.deskclock.AnimatorUtils$4 $r3;
        android.animation.ArgbEvaluator $r4;

        <com.android.deskclock.AnimatorUtils: long ANIM_DURATION_SHORT> = 266L;

        $r0 = new com.android.deskclock.AnimatorUtils$1;

        specialinvoke $r0.<com.android.deskclock.AnimatorUtils$1: void <init>()>();

        <com.android.deskclock.AnimatorUtils: android.view.animation.Interpolator DECELERATE_ACCELERATE_INTERPOLATOR> = $r0;

        $r1 = new com.android.deskclock.AnimatorUtils$2;

        specialinvoke $r1.<com.android.deskclock.AnimatorUtils$2: void <init>(java.lang.Class,java.lang.String)>(class "java/lang/Integer", "background.alpha");

        <com.android.deskclock.AnimatorUtils: android.util.Property BACKGROUND_ALPHA> = $r1;

        $r2 = new com.android.deskclock.AnimatorUtils$3;

        specialinvoke $r2.<com.android.deskclock.AnimatorUtils$3: void <init>(java.lang.Class,java.lang.String)>(class "java/lang/Integer", "drawable.alpha");

        <com.android.deskclock.AnimatorUtils: android.util.Property DRAWABLE_ALPHA> = $r2;

        $r3 = new com.android.deskclock.AnimatorUtils$4;

        specialinvoke $r3.<com.android.deskclock.AnimatorUtils$4: void <init>(java.lang.Class,java.lang.String)>(class "java/lang/Integer", "drawable.tint");

        <com.android.deskclock.AnimatorUtils: android.util.Property DRAWABLE_TINT> = $r3;

        $r4 = new android.animation.ArgbEvaluator;

        specialinvoke $r4.<android.animation.ArgbEvaluator: void <init>()>();

        <com.android.deskclock.AnimatorUtils: android.animation.TypeEvaluator ARGB_EVALUATOR> = $r4;

        <com.android.deskclock.AnimatorUtils: boolean sTryAnimateValue> = 1;

        return;
    }
}
