class com.android.deskclock.worldclock.CitiesActivity$CityAdapter extends android.widget.BaseAdapter implements android.widget.Filterable, android.widget.SectionIndexer
{
    private static final int VIEW_TYPE_CITY;
    private static final int VIEW_TYPE_HEADER;
    private static final java.lang.String DELETED_ENTRY;
    private java.util.List mDisplayedCitiesList;
    private com.android.deskclock.worldclock.CityObj[] mCities;
    private com.android.deskclock.worldclock.CityObj[] mSelectedCities;
    private final int mLayoutDirection;
    private java.util.HashMap mCityNameMap;
    private java.lang.String[] mSectionHeaders;
    private java.lang.Integer[] mSectionPositions;
    private com.android.deskclock.worldclock.CityNameComparator mSortByNameComparator;
    private com.android.deskclock.worldclock.CityGmtOffsetComparator mSortByTimeComparator;
    private final android.view.LayoutInflater mInflater;
    private boolean mIs24HoursMode;
    private final java.lang.String mPattern12;
    private final java.lang.String mPattern24;
    private int mSelectedEndPosition;
    private android.widget.Filter mFilter;
    final com.android.deskclock.worldclock.CitiesActivity this$0;

    public void <init>(com.android.deskclock.worldclock.CitiesActivity, android.content.Context, android.view.LayoutInflater)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        com.android.deskclock.worldclock.CitiesActivity r1;
        android.content.Context r2;
        android.view.LayoutInflater r3;
        com.android.deskclock.worldclock.CityObj[] r4, $r17, $r19, $r20, r33;
        int i0, i1, $i3, $i4, $i5, $i6, i7, i8;
        com.android.deskclock.worldclock.CityObj r5, r6;
        java.lang.String r7, $r22, $r25, $r26, $r27, r34;
        java.util.HashMap $r8, $r16, $r18, $r28, $r30;
        com.android.deskclock.worldclock.CityNameComparator $r9;
        com.android.deskclock.worldclock.CityGmtOffsetComparator $r10;
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter$1 $r11;
        java.util.Calendar $r12, $r14;
        long $l2;
        java.util.Locale $r15, $r23, $r24;
        java.lang.Object[] $r21;
        java.lang.Object $r29;
        java.util.Collection r32;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        r1 := @parameter0: com.android.deskclock.worldclock.CitiesActivity;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: android.view.LayoutInflater;

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CitiesActivity this$0> = r1;

        specialinvoke r0.<android.widget.BaseAdapter: void <init>()>();

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.HashMap mCityNameMap> = $r8;

        $r9 = new com.android.deskclock.worldclock.CityNameComparator;

        specialinvoke $r9.<com.android.deskclock.worldclock.CityNameComparator: void <init>()>();

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityNameComparator mSortByNameComparator> = $r9;

        $r10 = new com.android.deskclock.worldclock.CityGmtOffsetComparator;

        specialinvoke $r10.<com.android.deskclock.worldclock.CityGmtOffsetComparator: void <init>()>();

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityGmtOffsetComparator mSortByTimeComparator> = $r10;

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int mSelectedEndPosition> = 0;

        $r11 = new com.android.deskclock.worldclock.CitiesActivity$CityAdapter$1;

        specialinvoke $r11.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$1: void <init>(com.android.deskclock.worldclock.CitiesActivity$CityAdapter)>(r0);

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: android.widget.Filter mFilter> = $r11;

        $r12 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        staticinvoke <com.android.deskclock.worldclock.CitiesActivity: java.util.Calendar access$1102(com.android.deskclock.worldclock.CitiesActivity,java.util.Calendar)>(r1, $r12);

        $r14 = staticinvoke <com.android.deskclock.worldclock.CitiesActivity: java.util.Calendar access$1100(com.android.deskclock.worldclock.CitiesActivity)>(r1);

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r14.<java.util.Calendar: void setTimeInMillis(long)>($l2);

        $r15 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $i3 = staticinvoke <android.text.TextUtils: int getLayoutDirectionFromLocale(java.util.Locale)>($r15);

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int mLayoutDirection> = $i3;

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: android.view.LayoutInflater mInflater> = r3;

        $r17 = staticinvoke <com.android.deskclock.Utils: com.android.deskclock.worldclock.CityObj[] loadCitiesFromXml(android.content.Context)>(r2);

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityObj[] mCities> = $r17;

        $r16 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.HashMap mCityNameMap>;

        virtualinvoke $r16.<java.util.HashMap: void clear()>();

        r4 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityObj[] mCities>;

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r5 = r4[i1];

        $r30 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.HashMap mCityNameMap>;

        $r27 = r5.<com.android.deskclock.worldclock.CityObj: java.lang.String mCityId>;

        $r26 = r5.<com.android.deskclock.worldclock.CityObj: java.lang.String mCityName>;

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r26);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r18 = staticinvoke <com.android.deskclock.worldclock.CitiesActivity: java.util.HashMap access$000(com.android.deskclock.worldclock.CitiesActivity)>(r1);

        r32 = virtualinvoke $r18.<java.util.HashMap: java.util.Collection values()>();

        $i4 = interfaceinvoke r32.<java.util.Collection: int size()>();

        $r19 = newarray (com.android.deskclock.worldclock.CityObj)[$i4];

        $r21 = interfaceinvoke r32.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r19);

        $r20 = (com.android.deskclock.worldclock.CityObj[]) $r21;

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityObj[] mSelectedCities> = $r20;

        r33 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityObj[] mSelectedCities>;

        i7 = lengthof r33;

        i8 = 0;

     label3:
        if i8 >= i7 goto label5;

        r6 = r33[i8];

        $r28 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.HashMap mCityNameMap>;

        $r25 = r6.<com.android.deskclock.worldclock.CityObj: java.lang.String mCityId>;

        $r29 = virtualinvoke $r28.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r25);

        r7 = (java.lang.String) $r29;

        if r7 == null goto label4;

        r6.<com.android.deskclock.worldclock.CityObj: java.lang.String mCityName> = r7;

     label4:
        i8 = i8 + 1;

        goto label3;

     label5:
        $r23 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r22 = staticinvoke <android.text.format.DateFormat: java.lang.String getBestDateTimePattern(java.util.Locale,java.lang.String)>($r23, "Hm");

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.String mPattern24> = $r22;

        $r24 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r34 = staticinvoke <android.text.format.DateFormat: java.lang.String getBestDateTimePattern(java.util.Locale,java.lang.String)>($r24, "hma");

        $i5 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int mLayoutDirection>;

        if $i5 != 1 goto label6;

        r34 = virtualinvoke r34.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("h", "hh");

     label6:
        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.String mPattern12> = r34;

        $i6 = staticinvoke <com.android.deskclock.worldclock.CitiesActivity: int access$500(com.android.deskclock.worldclock.CitiesActivity)>(r1);

        specialinvoke r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: void sortCities(int)>($i6);

        virtualinvoke r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: void set24HoursMode(android.content.Context)>(r2);

        return;
    }

    public void toggleSort()
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        com.android.deskclock.worldclock.CitiesActivity $r1;
        int $i0;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        $r1 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CitiesActivity this$0>;

        $i0 = staticinvoke <com.android.deskclock.worldclock.CitiesActivity: int access$500(com.android.deskclock.worldclock.CitiesActivity)>($r1);

        if $i0 != 0 goto label1;

        specialinvoke r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: void sortCities(int)>(1);

        goto label2;

     label1:
        specialinvoke r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: void sortCities(int)>(0);

     label2:
        return;
    }

    private void sortCities(int)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        int i0;
        com.android.deskclock.worldclock.CitiesActivity $r1, $r5, $r9;
        java.util.Comparator $r2, $r14;
        com.android.deskclock.worldclock.CityObj[] $r3, $r4, $r13;
        android.content.SharedPreferences $r6;
        android.content.SharedPreferences$Editor $r7, $r8;
        android.widget.Filter $r10;
        java.lang.StringBuffer $r11;
        java.lang.String $r12;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CitiesActivity this$0>;

        staticinvoke <com.android.deskclock.worldclock.CitiesActivity: int access$502(com.android.deskclock.worldclock.CitiesActivity,int)>($r1, i0);

        $r3 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityObj[] mCities>;

        if i0 != 0 goto label1;

        $r2 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityNameComparator mSortByNameComparator>;

        goto label2;

     label1:
        $r2 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityGmtOffsetComparator mSortByTimeComparator>;

     label2:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r3, $r2);

        $r4 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityObj[] mSelectedCities>;

        if $r4 == null goto label5;

        $r13 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityObj[] mSelectedCities>;

        if i0 != 0 goto label3;

        $r14 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityNameComparator mSortByNameComparator>;

        goto label4;

     label3:
        $r14 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityGmtOffsetComparator mSortByTimeComparator>;

     label4:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r13, $r14);

     label5:
        $r5 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CitiesActivity this$0>;

        $r6 = staticinvoke <com.android.deskclock.worldclock.CitiesActivity: android.content.SharedPreferences access$1200(com.android.deskclock.worldclock.CitiesActivity)>($r5);

        $r7 = interfaceinvoke $r6.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r8 = interfaceinvoke $r7.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>("sort_preference", i0);

        interfaceinvoke $r8.<android.content.SharedPreferences$Editor: boolean commit()>();

        $r10 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: android.widget.Filter mFilter>;

        $r9 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CitiesActivity this$0>;

        $r11 = staticinvoke <com.android.deskclock.worldclock.CitiesActivity: java.lang.StringBuffer access$1300(com.android.deskclock.worldclock.CitiesActivity)>($r9);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<android.widget.Filter: void filter(java.lang.CharSequence)>($r12);

        return;
    }

    public int getCount()
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        java.util.List $r1, $r2;
        int $i0;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        $r1 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.List mDisplayedCitiesList>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.List mDisplayedCitiesList>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public java.lang.Object getItem(int)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        int i0, $i1;
        java.util.List $r1, $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.List mDisplayedCitiesList>;

        if $r1 == null goto label1;

        if i0 < 0 goto label1;

        $r2 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.List mDisplayedCitiesList>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i0 >= $i1 goto label1;

        $r3 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.List mDisplayedCitiesList>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        return $r4;

     label1:
        return null;
    }

    public long getItemId(int)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        int i0;
        long $l1;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        return $l1;
    }

    public boolean isEnabled(int)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        int i0;
        java.util.List $r1, $r2;
        java.lang.Object $r3;
        com.android.deskclock.worldclock.CityObj $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.List mDisplayedCitiesList>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.List mDisplayedCitiesList>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (com.android.deskclock.worldclock.CityObj) $r3;

        $r5 = $r4.<com.android.deskclock.worldclock.CityObj: java.lang.String mCityId>;

        if $r5 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public synchronized android.view.View getView(int, android.view.View, android.view.ViewGroup)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        int i0, $i1, $i2;
        android.view.View r1, $r39, $r41, $r42, $r44;
        android.view.ViewGroup r2;
        com.android.deskclock.worldclock.CityObj r3;
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder r4, $r40, r48;
        java.util.List $r5, $r6, $r7;
        java.lang.Object $r8, $r11;
        java.lang.String $r9, $r16, $r19, $r21, $r28, $r31, $r34, $r36;
        com.android.deskclock.worldclock.CitiesActivity $r10, $r13, $r18, $r26;
        android.widget.CheckBox $r12, $r15, $r17, $r47;
        java.util.HashMap $r14;
        boolean $z0, $z1;
        android.widget.TextView$BufferType $r20;
        android.widget.TextView $r22, $r24, $r25, $r27, $r29, $r30, $r32, $r37, $r38, $r43, $r45;
        java.lang.CharSequence $r23;
        java.util.TimeZone $r33;
        android.view.LayoutInflater $r35, $r46;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.View;

        r2 := @parameter2: android.view.ViewGroup;

        $r5 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.List mDisplayedCitiesList>;

        if $r5 == null goto label1;

        if i0 < 0 goto label1;

        $r6 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.List mDisplayedCitiesList>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r7 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.List mDisplayedCitiesList>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (com.android.deskclock.worldclock.CityObj) $r8;

        $r9 = r3.<com.android.deskclock.worldclock.CityObj: java.lang.String mCityId>;

        if $r9 != null goto label3;

        if r1 != null goto label8;

        $r46 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: android.view.LayoutInflater mInflater>;

        r1 = virtualinvoke $r46.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>(2130968583, r2, 0);

        goto label8;

     label3:
        if r1 != null goto label4;

        $r35 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: android.view.LayoutInflater mInflater>;

        r1 = virtualinvoke $r35.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>(2130968584, r2, 0);

        $r40 = new com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder;

        specialinvoke $r40.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: void <init>(com.android.deskclock.worldclock.CitiesActivity$CityAdapter,com.android.deskclock.worldclock.CitiesActivity$1)>(r0, null);

        r4 = $r40;

        $r41 = virtualinvoke r1.<android.view.View: android.view.View findViewById(int)>(2131623981);

        $r38 = (android.widget.TextView) $r41;

        r4.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.TextView index> = $r38;

        $r39 = virtualinvoke r1.<android.view.View: android.view.View findViewById(int)>(2131623983);

        $r45 = (android.widget.TextView) $r39;

        r4.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.TextView name> = $r45;

        $r44 = virtualinvoke r1.<android.view.View: android.view.View findViewById(int)>(2131623984);

        $r43 = (android.widget.TextView) $r44;

        r4.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.TextView time> = $r43;

        $r42 = virtualinvoke r1.<android.view.View: android.view.View findViewById(int)>(2131623982);

        $r47 = (android.widget.CheckBox) $r42;

        r4.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.CheckBox selected> = $r47;

        virtualinvoke r1.<android.view.View: void setTag(java.lang.Object)>(r4);

     label4:
        $r10 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CitiesActivity this$0>;

        virtualinvoke r1.<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>($r10);

        $r11 = virtualinvoke r1.<android.view.View: java.lang.Object getTag()>();

        r48 = (com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder) $r11;

        $r12 = r48.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.CheckBox selected>;

        virtualinvoke $r12.<android.widget.CheckBox: void setTag(java.lang.Object)>(r3);

        $r15 = r48.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.CheckBox selected>;

        $r13 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CitiesActivity this$0>;

        $r14 = staticinvoke <com.android.deskclock.worldclock.CitiesActivity: java.util.HashMap access$000(com.android.deskclock.worldclock.CitiesActivity)>($r13);

        $r16 = r3.<com.android.deskclock.worldclock.CityObj: java.lang.String mCityId>;

        $z0 = virtualinvoke $r14.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r16);

        virtualinvoke $r15.<android.widget.CheckBox: void setChecked(boolean)>($z0);

        $r17 = r48.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.CheckBox selected>;

        $r18 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CitiesActivity this$0>;

        virtualinvoke $r17.<android.widget.CheckBox: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>($r18);

        $r22 = r48.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.TextView name>;

        $r19 = r3.<com.android.deskclock.worldclock.CityObj: java.lang.String mCityName>;

        $r20 = <android.widget.TextView$BufferType: android.widget.TextView$BufferType SPANNABLE>;

        virtualinvoke $r22.<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)>($r19, $r20);

        $r24 = r48.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.TextView time>;

        $r21 = r3.<com.android.deskclock.worldclock.CityObj: java.lang.String mTimeZone>;

        $r23 = specialinvoke r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.CharSequence getTimeCharSequence(java.lang.String)>($r21);

        virtualinvoke $r24.<android.widget.TextView: void setText(java.lang.CharSequence)>($r23);

        $z1 = r3.<com.android.deskclock.worldclock.CityObj: boolean isHeader>;

        if $z1 == 0 goto label6;

        $r27 = r48.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.TextView index>;

        virtualinvoke $r27.<android.widget.TextView: void setVisibility(int)>(0);

        $r26 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CitiesActivity this$0>;

        $i2 = staticinvoke <com.android.deskclock.worldclock.CitiesActivity: int access$500(com.android.deskclock.worldclock.CitiesActivity)>($r26);

        if $i2 != 0 goto label5;

        $r32 = r48.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.TextView index>;

        $r31 = r3.<com.android.deskclock.worldclock.CityObj: java.lang.String mCityName>;

        $r36 = virtualinvoke $r31.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        virtualinvoke $r32.<android.widget.TextView: void setText(java.lang.CharSequence)>($r36);

        $r37 = r48.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.TextView index>;

        virtualinvoke $r37.<android.widget.TextView: void setTextSize(int,float)>(2, 24.0F);

        goto label7;

     label5:
        $r30 = r48.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.TextView index>;

        virtualinvoke $r30.<android.widget.TextView: void setTextSize(int,float)>(2, 14.0F);

        $r29 = r48.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.TextView index>;

        $r28 = r3.<com.android.deskclock.worldclock.CityObj: java.lang.String mTimeZone>;

        $r33 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r28);

        $r34 = staticinvoke <com.android.deskclock.Utils: java.lang.String getGMTHourOffset(java.util.TimeZone,boolean)>($r33, 1);

        virtualinvoke $r29.<android.widget.TextView: void setText(java.lang.CharSequence)>($r34);

        goto label7;

     label6:
        $r25 = r48.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter$CityViewHolder: android.widget.TextView index>;

        virtualinvoke $r25.<android.widget.TextView: void setVisibility(int)>(4);

     label7:
        virtualinvoke r1.<android.view.View: void jumpDrawablesToCurrentState()>();

     label8:
        return r1;
    }

    private java.lang.CharSequence getTimeCharSequence(java.lang.String)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        java.lang.String r1, $r6;
        com.android.deskclock.worldclock.CitiesActivity $r2, $r5;
        java.util.Calendar $r3, $r7;
        java.util.TimeZone $r4;
        boolean $z0;
        java.lang.CharSequence $r8;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CitiesActivity this$0>;

        $r3 = staticinvoke <com.android.deskclock.worldclock.CitiesActivity: java.util.Calendar access$1100(com.android.deskclock.worldclock.CitiesActivity)>($r2);

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>(r1);

        virtualinvoke $r3.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r4);

        $z0 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: boolean mIs24HoursMode>;

        if $z0 == 0 goto label1;

        $r6 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.String mPattern24>;

        goto label2;

     label1:
        $r6 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.String mPattern12>;

     label2:
        $r5 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CitiesActivity this$0>;

        $r7 = staticinvoke <com.android.deskclock.worldclock.CitiesActivity: java.util.Calendar access$1100(com.android.deskclock.worldclock.CitiesActivity)>($r5);

        $r8 = staticinvoke <android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Calendar)>($r6, $r7);

        return $r8;
    }

    public int getViewTypeCount()
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        return 2;
    }

    public int getItemViewType(int)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        com.android.deskclock.worldclock.CityObj $r3;
        java.lang.String $r4;
        byte $b1;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.List mDisplayedCitiesList>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (com.android.deskclock.worldclock.CityObj) $r2;

        $r4 = $r3.<com.android.deskclock.worldclock.CityObj: java.lang.String mCityId>;

        if $r4 == null goto label1;

        $b1 = 0;

        goto label2;

     label1:
        $b1 = 1;

     label2:
        return $b1;
    }

    public void set24HoursMode(android.content.Context)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        android.content.Context r1;
        boolean $z0;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        r1 := @parameter0: android.content.Context;

        $z0 = staticinvoke <android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)>(r1);

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: boolean mIs24HoursMode> = $z0;

        virtualinvoke r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: void notifyDataSetChanged()>();

        return;
    }

    public int getPositionForSection(int)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        int i0, $i1;
        java.lang.Integer[] $r1, $r2;
        boolean $z0;
        java.lang.Integer $r3;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.Integer[] mSectionPositions>;

        $z0 = specialinvoke r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: boolean isEmpty(java.lang.Object[])>($r1);

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.Integer[] mSectionPositions>;

        $r3 = $r2[i0];

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $i1 = 0;

     label2:
        return $i1;
    }

    public int getSectionForPosition(int)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Integer[] r1;
        boolean $z0;
        java.lang.Integer $r2, $r3, $r4;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        i0 := @parameter0: int;

        r1 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.Integer[] mSectionPositions>;

        $z0 = specialinvoke r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: boolean isEmpty(java.lang.Object[])>(r1);

        if $z0 != 0 goto label4;

        i1 = 0;

     label1:
        $i2 = lengthof r1;

        $i3 = $i2 - 1;

        if i1 >= $i3 goto label3;

        $r3 = r1[i1];

        $i9 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if i0 < $i9 goto label2;

        $i10 = i1 + 1;

        $r4 = r1[$i10];

        $i11 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if i0 >= $i11 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i4 = lengthof r1;

        $i5 = $i4 - 1;

        $r2 = r1[$i5];

        $i6 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        if i0 < $i6 goto label4;

        $i7 = lengthof r1;

        $i8 = $i7 - 1;

        return $i8;

     label4:
        return 0;
    }

    public java.lang.Object[] getSections()
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        $r1 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.String[] mSectionHeaders>;

        return $r1;
    }

    public android.widget.Filter getFilter()
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        android.widget.Filter $r1;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        $r1 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: android.widget.Filter mFilter>;

        return $r1;
    }

    private boolean isEmpty(java.lang.Object[])
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        java.lang.Object[] r1;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        r1 := @parameter0: java.lang.Object[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static com.android.deskclock.worldclock.CityObj[] access$102(com.android.deskclock.worldclock.CitiesActivity$CityAdapter, com.android.deskclock.worldclock.CityObj[])
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        com.android.deskclock.worldclock.CityObj[] r1;

        r0 := @parameter0: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        r1 := @parameter1: com.android.deskclock.worldclock.CityObj[];

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityObj[] mSelectedCities> = r1;

        return r1;
    }

    static com.android.deskclock.worldclock.CityObj[] access$100(com.android.deskclock.worldclock.CitiesActivity$CityAdapter)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        com.android.deskclock.worldclock.CityObj[] $r1;

        r0 := @parameter0: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        $r1 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityObj[] mSelectedCities>;

        return $r1;
    }

    static int access$302(com.android.deskclock.worldclock.CitiesActivity$CityAdapter, int)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        int i0;

        r0 := @parameter0: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        i0 := @parameter1: int;

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int mSelectedEndPosition> = i0;

        return i0;
    }

    static com.android.deskclock.worldclock.CityObj[] access$400(com.android.deskclock.worldclock.CitiesActivity$CityAdapter)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        com.android.deskclock.worldclock.CityObj[] $r1;

        r0 := @parameter0: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        $r1 = r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: com.android.deskclock.worldclock.CityObj[] mCities>;

        return $r1;
    }

    static java.lang.String[] access$602(com.android.deskclock.worldclock.CitiesActivity$CityAdapter, java.lang.String[])
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        java.lang.String[] r1;

        r0 := @parameter0: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        r1 := @parameter1: java.lang.String[];

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.String[] mSectionHeaders> = r1;

        return r1;
    }

    static java.lang.Integer[] access$702(com.android.deskclock.worldclock.CitiesActivity$CityAdapter, java.lang.Integer[])
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        java.lang.Integer[] r1;

        r0 := @parameter0: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        r1 := @parameter1: java.lang.Integer[];

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.Integer[] mSectionPositions> = r1;

        return r1;
    }

    static java.util.List access$802(com.android.deskclock.worldclock.CitiesActivity$CityAdapter, java.util.List)
    {
        com.android.deskclock.worldclock.CitiesActivity$CityAdapter r0;
        java.util.List r1;

        r0 := @parameter0: com.android.deskclock.worldclock.CitiesActivity$CityAdapter;

        r1 := @parameter1: java.util.List;

        r0.<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.util.List mDisplayedCitiesList> = r1;

        return r1;
    }

    public static void <clinit>()
    {
        <com.android.deskclock.worldclock.CitiesActivity$CityAdapter: java.lang.String DELETED_ENTRY> = "C0";

        <com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int VIEW_TYPE_HEADER> = 1;

        <com.android.deskclock.worldclock.CitiesActivity$CityAdapter: int VIEW_TYPE_CITY> = 0;

        return;
    }
}
