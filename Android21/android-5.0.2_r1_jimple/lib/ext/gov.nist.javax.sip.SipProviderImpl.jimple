public class gov.nist.javax.sip.SipProviderImpl extends java.lang.Object implements javax.sip.SipProvider, gov.nist.javax.sip.SipProviderExt, gov.nist.javax.sip.stack.SIPTransactionEventListener, gov.nist.javax.sip.stack.SIPDialogEventListener
{
    private javax.sip.SipListener sipListener;
    protected gov.nist.javax.sip.SipStackImpl sipStack;
    private java.util.concurrent.ConcurrentHashMap listeningPoints;
    private gov.nist.javax.sip.EventScanner eventScanner;
    private java.lang.String address;
    private int port;
    private boolean automaticDialogSupportEnabled;
    private java.lang.String IN_ADDR_ANY;
    private java.lang.String IN6_ADDR_ANY;
    private boolean dialogErrorsAutomaticallyHandled;

    private void <init>()
    {
        gov.nist.javax.sip.SipProviderImpl r0;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String IN_ADDR_ANY> = "0.0.0.0";

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String IN6_ADDR_ANY> = "::0";

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = 1;

        return;
    }

    protected void stop()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.util.Iterator r1;
        gov.nist.javax.sip.ListeningPointImpl r2;
        gov.nist.javax.sip.SipStackImpl $r3, $r8;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.util.Collection $r5;
        gov.nist.javax.sip.EventScanner $r6;
        java.lang.Object $r7;
        gov.nist.core.StackLogger $r9;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r9.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Exiting provider");

     label1:
        $r4 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (gov.nist.javax.sip.ListeningPointImpl) $r7;

        virtualinvoke r2.<gov.nist.javax.sip.ListeningPointImpl: void removeSipProvider()>();

        goto label2;

     label3:
        $r6 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        virtualinvoke $r6.<gov.nist.javax.sip.EventScanner: void stop()>();

        return;
    }

    public javax.sip.ListeningPoint getListeningPoint(java.lang.String)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.lang.String r1, $r3;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r4;
        javax.sip.ListeningPoint $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null transport param");

        throw $r6;

     label1:
        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r4 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (javax.sip.ListeningPoint) $r4;

        return $r5;
    }

    public void handleEvent(java.util.EventObject, gov.nist.javax.sip.stack.SIPTransaction)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.util.EventObject r1;
        gov.nist.javax.sip.stack.SIPTransaction r2;
        javax.sip.Dialog r3, r41;
        gov.nist.javax.sip.SipStackImpl $r4, $r6, $r9, $r23, $r26, $r29, $r34, $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        gov.nist.javax.sip.EventWrapper $r5, r42;
        gov.nist.javax.sip.EventScanner $r7, $r8;
        gov.nist.core.StackLogger $r10, $r25, $r27, $r38;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r28, $r32, $r33, $r36, $r37, $r39;
        javax.sip.SipListener $r16;
        java.lang.Object $r21;
        java.lang.String $r22, $r30, $r40;
        javax.sip.ResponseEvent $r24;
        javax.sip.RequestEvent $r31;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: java.util.EventObject;

        r2 := @parameter1: gov.nist.javax.sip.stack.SIPTransaction;

        $r4 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r4.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label4;

        $r9 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r10 = virtualinvoke $r9.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleEvent ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("currentTransaction = ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this.sipListener = ");

        $r16 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sipEvent.source = ");

        $r21 = virtualinvoke r1.<java.util.EventObject: java.lang.Object getSource()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r22);

        $z2 = r1 instanceof javax.sip.RequestEvent;

        if $z2 == 0 goto label2;

        $r31 = (javax.sip.RequestEvent) r1;

        r3 = virtualinvoke $r31.<javax.sip.RequestEvent: javax.sip.Dialog getDialog()>();

        $r35 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z5 = virtualinvoke $r35.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label1;

        $r34 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r38 = virtualinvoke $r34.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog = ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r38.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r40);

     label1:
        goto label3;

     label2:
        $z3 = r1 instanceof javax.sip.ResponseEvent;

        if $z3 == 0 goto label3;

        $r24 = (javax.sip.ResponseEvent) r1;

        r41 = virtualinvoke $r24.<javax.sip.ResponseEvent: javax.sip.Dialog getDialog()>();

        $r26 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z4 = virtualinvoke $r26.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label3;

        $r29 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r27 = virtualinvoke $r29.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog = ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41);

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r30);

     label3:
        $r23 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r25 = virtualinvoke $r23.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r25.<gov.nist.core.StackLogger: void logStackTrace()>();

     label4:
        $r5 = new gov.nist.javax.sip.EventWrapper;

        specialinvoke $r5.<gov.nist.javax.sip.EventWrapper: void <init>(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r1, r2);

        r42 = $r5;

        $r6 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z1 = $r6.<gov.nist.javax.sip.SipStackImpl: boolean reEntrantListener>;

        if $z1 != 0 goto label5;

        $r8 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        virtualinvoke $r8.<gov.nist.javax.sip.EventScanner: void addEvent(gov.nist.javax.sip.EventWrapper)>(r42);

        goto label6;

     label5:
        $r7 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        virtualinvoke $r7.<gov.nist.javax.sip.EventScanner: void deliverEvent(gov.nist.javax.sip.EventWrapper)>(r42);

     label6:
        return;
    }

    protected void <init>(gov.nist.javax.sip.SipStackImpl)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.SipStackImpl r1, $r5, $r6;
        gov.nist.javax.sip.EventScanner $r2, $r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        boolean $z0, $z1;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: gov.nist.javax.sip.SipStackImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String IN_ADDR_ANY> = "0.0.0.0";

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String IN6_ADDR_ANY> = "::0";

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = 1;

        $r2 = virtualinvoke r1.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.EventScanner getEventScanner()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.EventScanner eventScanner> = $r2;

        r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack> = r1;

        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        virtualinvoke $r3.<gov.nist.javax.sip.EventScanner: void incrementRefcount()>();

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints> = $r4;

        $r5 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r5.<gov.nist.javax.sip.SipStackImpl: boolean isAutomaticDialogSupportEnabled()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean automaticDialogSupportEnabled> = $z0;

        $r6 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z1 = virtualinvoke $r6.<gov.nist.javax.sip.SipStackImpl: boolean isAutomaticDialogErrorHandlingEnabled()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = $z1;

        return;
    }

    protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.lang.CloneNotSupportedException $r1;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r1 = new java.lang.CloneNotSupportedException;

        specialinvoke $r1.<java.lang.CloneNotSupportedException: void <init>()>();

        throw $r1;
    }

    public void addSipListener(javax.sip.SipListener) throws java.util.TooManyListenersException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.SipListener r1, $r3, $r5;
        gov.nist.javax.sip.SipStackImpl $r2, $r4, $r6, $r7, $r14;
        boolean $z0;
        gov.nist.core.StackLogger $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;
        java.util.TooManyListenersException $r13;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.SipListener;

        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r3 = $r2.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener sipListener>;

        if $r3 != null goto label1;

        $r14 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r14.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener sipListener> = r1;

        goto label2;

     label1:
        $r4 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r5 = $r4.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener sipListener>;

        if $r5 == r1 goto label2;

        $r13 = new java.util.TooManyListenersException;

        specialinvoke $r13.<java.util.TooManyListenersException: void <init>(java.lang.String)>("Stack already has a listener. Only one listener per stack allowed");

        throw $r13;

     label2:
        $r6 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r6.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label3;

        $r7 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r8 = virtualinvoke $r7.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("add SipListener ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r12);

     label3:
        r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener sipListener> = r1;

        return;
    }

    public javax.sip.ListeningPoint getListeningPoint()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.util.concurrent.ConcurrentHashMap $r1, $r2;
        int $i0;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        javax.sip.ListeningPoint $r6;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r1 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        if $i0 <= 0 goto label1;

        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (javax.sip.ListeningPoint) $r5;

        return $r6;

     label1:
        return null;
    }

    public javax.sip.header.CallIdHeader getNewCallId()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.lang.String r1, $r6;
        gov.nist.javax.sip.header.CallID r2, $r7;
        gov.nist.javax.sip.Utils $r4;
        javax.sip.ListeningPoint $r5;
        java.text.ParseException $r8;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r4 = staticinvoke <gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils getInstance()>();

        $r5 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint()>();

        $r6 = interfaceinvoke $r5.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        r1 = virtualinvoke $r4.<gov.nist.javax.sip.Utils: java.lang.String generateCallIdentifier(java.lang.String)>($r6);

        $r7 = new gov.nist.javax.sip.header.CallID;

        specialinvoke $r7.<gov.nist.javax.sip.header.CallID: void <init>()>();

        r2 = $r7;

     label1:
        virtualinvoke r2.<gov.nist.javax.sip.header.CallID: void setCallId(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return r2;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public javax.sip.ClientTransaction getNewClientTransaction(javax.sip.message.Request) throws javax.sip.TransactionUnavailableException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.message.Request r1;
        gov.nist.javax.sip.message.SIPRequest r2, $r20, $r45, $r54, $r58, $r68;
        gov.nist.javax.sip.ListeningPointImpl r3, r5;
        gov.nist.javax.sip.header.Via r4, r8, $r14, $r16, $r24, $r27, $r30, $r40, $r71;
        java.lang.String r6, $r13, $r15, $r17, $r25, $r26, $r31, $r34, $r36, $r37, $r39, $r46, $r57, $r72, $r73, $r81, r95, r96, r97;
        gov.nist.javax.sip.stack.SIPDialog r7, r10, $r62;
        gov.nist.javax.sip.stack.SIPClientTransaction r9, $r60, $r66, r91, r92;
        gov.nist.javax.sip.SipStackImpl $r11, $r18, $r19, $r22, $r28, $r33, $r38, $r41, $r49, $r53, $r59, $r65, $r67;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object $r12;
        javax.sip.ListeningPoint $r21, $r80;
        gov.nist.javax.sip.Utils $r23;
        int $i0, $i1;
        gov.nist.javax.sip.stack.MessageProcessor $r29;
        gov.nist.javax.sip.stack.MessageChannel $r32, $r55;
        javax.sip.TransactionUnavailableException $r35, $r48, $r69, $r75, $r76, $r78, $r79, $r84, $r86, $r88, $r89;
        javax.sip.DialogState $r42, $r43;
        java.lang.StringBuilder $r44, $r47, $r51, $r56;
        gov.nist.core.StackLogger $r50;
        gov.nist.javax.sip.stack.SIPTransaction $r52, $r64, $r70;
        javax.sip.Dialog $r61, $r63;
        javax.sip.InvalidArgumentException $r74, r100;
        java.lang.NullPointerException $r77;
        javax.sip.SipException $r82, r94;
        java.text.ParseException $r83, $r85, r90, r99;
        java.io.IOException $r87, r98;
        javax.sip.address.Hop r93;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.message.Request;

        if r1 != null goto label01;

        $r77 = new java.lang.NullPointerException;

        specialinvoke $r77.<java.lang.NullPointerException: void <init>(java.lang.String)>("null request");

        throw $r77;

     label01:
        $r11 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r11.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z0 != 0 goto label02;

        $r76 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r76.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Stack is stopped");

        throw $r76;

     label02:
        r2 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r12 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getTransaction()>();

        if $r12 == null goto label03;

        $r79 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r79.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction already assigned to request");

        throw $r79;

     label03:
        $r13 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z1 == 0 goto label04;

        $r78 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r78.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cannot create client transaction for  ACK");

        throw $r78;

     label04:
        $r14 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        if $r14 != null goto label05;

        $r80 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>("udp");

        r3 = (gov.nist.javax.sip.ListeningPointImpl) $r80;

        r4 = virtualinvoke r3.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.header.Via getViaHeader()>();

        interfaceinvoke r1.<javax.sip.message.Request: void setHeader(javax.sip.header.Header)>(r4);

     label05:
        virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: void checkHeaders()>();

     label06:
        goto label08;

     label07:
        $r83 := @caughtexception;

        r90 = $r83;

        $r84 = new javax.sip.TransactionUnavailableException;

        $r81 = virtualinvoke r90.<java.text.ParseException: java.lang.String getMessage()>();

        specialinvoke $r84.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>($r81, r90);

        throw $r84;

     label08:
        $r16 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r15 = virtualinvoke $r16.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if $r15 == null goto label09;

        $r71 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r73 = virtualinvoke $r71.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $z8 = virtualinvoke $r73.<java.lang.String: boolean startsWith(java.lang.String)>("z9hG4bK");

        if $z8 == 0 goto label09;

        $r67 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r68 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r70 = virtualinvoke $r67.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r68, 0);

        if $r70 == null goto label09;

        $r69 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r69.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction already exists!");

        throw $r69;

     label09:
        $r17 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("CANCEL");

        if $z2 == 0 goto label11;

        $r59 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r58 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r52 = virtualinvoke $r59.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findCancelTransaction(gov.nist.javax.sip.message.SIPRequest,boolean)>($r58, 0);

        r91 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r52;

        if r91 == null goto label11;

        $r53 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r54 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r55 = virtualinvoke r91.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        r92 = virtualinvoke $r53.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPClientTransaction createClientTransaction(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>($r54, $r55);

        $r64 = (gov.nist.javax.sip.stack.SIPTransaction) r92;

        virtualinvoke $r64.<gov.nist.javax.sip.stack.SIPTransaction: void addEventListener(gov.nist.javax.sip.stack.SIPTransactionEventListener)>(r0);

        $r65 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r66 = (gov.nist.javax.sip.stack.SIPClientTransaction) r92;

        virtualinvoke $r65.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPClientTransaction)>($r66);

        $r61 = virtualinvoke r91.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()>();

        if $r61 == null goto label10;

        $r60 = (gov.nist.javax.sip.stack.SIPClientTransaction) r92;

        $r63 = virtualinvoke r91.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.Dialog getDialog()>();

        $r62 = (gov.nist.javax.sip.stack.SIPDialog) $r63;

        $r72 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        virtualinvoke $r60.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>($r62, $r72);

     label10:
        return r92;

     label11:
        $r18 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z3 = virtualinvoke $r18.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label12;

        $r49 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r50 = virtualinvoke $r49.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("could not find existing transaction for ");

        $r45 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r46 = virtualinvoke $r45.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r47 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r56 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" creating a new one ");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r50.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r57);

     label12:
        $r19 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r20 = (gov.nist.javax.sip.message.SIPRequest) r1;

        r93 = virtualinvoke $r19.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Hop getNextHop(gov.nist.javax.sip.message.SIPRequest)>($r20);

        if r93 != null goto label13;

        $r48 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r48.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cannot resolve next hop -- transaction unavailable");

        throw $r48;

     label13:
        goto label15;

     label14:
        $r82 := @caughtexception;

        r94 = $r82;

        $r89 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r89.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot resolve next hop -- transaction unavailable", r94);

        throw $r89;

     label15:
        r95 = interfaceinvoke r93.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r21 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>(r95);

        r5 = (gov.nist.javax.sip.ListeningPointImpl) $r21;

        r6 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        $r22 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r7 = virtualinvoke $r22.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r6);

        if r7 == null goto label16;

        $r43 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r42 = <javax.sip.DialogState: javax.sip.DialogState TERMINATED>;

        if $r43 != $r42 goto label16;

        $r41 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r41.<gov.nist.javax.sip.SipStackImpl: void removeDialog(gov.nist.javax.sip.stack.SIPDialog)>(r7);

     label16:
        $r24 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r25 = virtualinvoke $r24.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if $r25 == null goto label17;

        $r40 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r39 = virtualinvoke $r40.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $z6 = virtualinvoke $r39.<java.lang.String: boolean startsWith(java.lang.String)>("z9hG4bK");

        if $z6 == 0 goto label17;

        $r38 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z7 = virtualinvoke $r38.<gov.nist.javax.sip.SipStackImpl: boolean checkBranchId()>();

        if $z7 == 0 goto label18;

     label17:
        $r23 = staticinvoke <gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils getInstance()>();

        r96 = virtualinvoke $r23.<gov.nist.javax.sip.Utils: java.lang.String generateBranchId()>();

        $r27 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        virtualinvoke $r27.<gov.nist.javax.sip.header.Via: void setBranch(java.lang.String)>(r96);

     label18:
        r8 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r26 = virtualinvoke r8.<gov.nist.javax.sip.header.Via: java.lang.String getTransport()>();

        if $r26 != null goto label19;

        virtualinvoke r8.<gov.nist.javax.sip.header.Via: void setTransport(java.lang.String)>(r95);

     label19:
        $i0 = virtualinvoke r8.<gov.nist.javax.sip.header.Via: int getPort()>();

        if $i0 != -1 goto label20;

        $i1 = virtualinvoke r5.<gov.nist.javax.sip.ListeningPointImpl: int getPort()>();

        virtualinvoke r8.<gov.nist.javax.sip.header.Via: void setPort(int)>($i1);

     label20:
        $r30 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        r97 = virtualinvoke $r30.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $r28 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r29 = virtualinvoke r5.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.stack.MessageProcessor getMessageProcessor()>();

        $r32 = virtualinvoke $r28.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageProcessor,javax.sip.address.Hop)>(r2, $r29, r93);

        r9 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r32;

        if r9 != null goto label21;

        $r35 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r35.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cound not create tx");

        throw $r35;

     label21:
        virtualinvoke r9.<gov.nist.javax.sip.stack.SIPClientTransaction: void setNextHop(javax.sip.address.Hop)>(r93);

        virtualinvoke r9.<gov.nist.javax.sip.stack.SIPClientTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r2);

        virtualinvoke r9.<gov.nist.javax.sip.stack.SIPClientTransaction: void setBranch(java.lang.String)>(r97);

        $r31 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z4 = staticinvoke <gov.nist.javax.sip.SipStackImpl: boolean isDialogCreated(java.lang.String)>($r31);

        if $z4 == 0 goto label23;

        if r7 == null goto label22;

        $r36 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        virtualinvoke r9.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r7, $r36);

        goto label24;

     label22:
        $z5 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z5 == 0 goto label24;

        $r33 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r10 = virtualinvoke $r33.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>(r9);

        $r37 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        virtualinvoke r9.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r10, $r37);

        goto label24;

     label23:
        if r7 == null goto label24;

        $r34 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        virtualinvoke r9.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r7, $r34);

     label24:
        virtualinvoke r9.<gov.nist.javax.sip.stack.SIPClientTransaction: void addEventListener(gov.nist.javax.sip.stack.SIPTransactionEventListener)>(r0);

     label25:
        return r9;

     label26:
        $r87 := @caughtexception;

        r98 = $r87;

        $r88 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r88.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Could not resolve next hop or listening point unavailable! ", r98);

        throw $r88;

     label27:
        $r85 := @caughtexception;

        r99 = $r85;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r99);

        $r86 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r86.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected Exception FIXME! ", r99);

        throw $r86;

     label28:
        $r74 := @caughtexception;

        r100 = $r74;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r100);

        $r75 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r75.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected Exception FIXME! ", r100);

        throw $r75;

        catch java.text.ParseException from label05 to label06 with label07;
        catch javax.sip.SipException from label12 to label13 with label14;
        catch java.io.IOException from label16 to label25 with label26;
        catch java.text.ParseException from label16 to label25 with label27;
        catch javax.sip.InvalidArgumentException from label16 to label25 with label28;
    }

    public javax.sip.ServerTransaction getNewServerTransaction(javax.sip.message.Request) throws javax.sip.TransactionAlreadyExistsException, javax.sip.TransactionUnavailableException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.message.Request r1;
        gov.nist.javax.sip.message.SIPRequest r2, $r13, $r17, $r26, $r32, $r33, $r36, $r42, $r45, $r47;
        java.text.ParseException r3, $r77;
        gov.nist.javax.sip.stack.SIPDialog r4, r87, r91, r95;
        gov.nist.javax.sip.stack.SIPServerTransaction r5, r6, r83, r85, r88, r89, r93, r96;
        java.lang.Throwable r7, $r79;
        gov.nist.javax.sip.SipStackImpl $r8, $r11, $r15, $r18, $r20, $r21, $r24, $r25, $r27, $r30, $r34, $r35, $r39, $r40, $r41, $r51, $r52, $r53, $r54, $r58, $r60, $r68, $r69, $r70, $r76;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.String $r9, $r10, $r12, $r22, $r28, $r38, $r49, $r50, $r56, $r57, $r64, $r65, $r75, r84, r86, r90, r94;
        gov.nist.javax.sip.stack.SIPTransaction $r14, $r31, $r48;
        java.lang.Object $r16, $r19, $r37, $r46;
        javax.sip.TransactionUnavailableException $r23, $r44, $r55, $r62, $r66, $r71, $r73, $r74, $r78, $r81;
        javax.sip.TransactionAlreadyExistsException $r29, $r43, $r63;
        javax.sip.ListeningPoint $r59;
        gov.nist.javax.sip.ListeningPointImpl $r61;
        gov.nist.core.StackLogger $r67;
        java.io.IOException $r72, $r80;
        gov.nist.javax.sip.stack.SIPClientTransaction r82;
        gov.nist.javax.sip.stack.MessageChannel r92;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.message.Request;

        $r8 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r8.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z0 != 0 goto label01;

        $r78 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r78.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Stack is stopped");

        throw $r78;

     label01:
        r2 = (gov.nist.javax.sip.message.SIPRequest) r1;

     label02:
        virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: void checkHeaders()>();

     label03:
        goto label05;

     label04:
        $r77 := @caughtexception;

        r3 = $r77;

        $r74 = new javax.sip.TransactionUnavailableException;

        $r75 = virtualinvoke r3.<java.text.ParseException: java.lang.String getMessage()>();

        specialinvoke $r74.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>($r75, r3);

        throw $r74;

     label05:
        $r9 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z1 == 0 goto label07;

        $r70 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z9 = virtualinvoke $r70.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label06;

        $r68 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r67 = virtualinvoke $r68.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r67.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Creating server transaction for ACK -- makes no sense!");

     label06:
        $r66 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r66.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cannot create Server transaction for ACK ");

        throw $r66;

     label07:
        $r10 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("NOTIFY");

        if $z2 == 0 goto label08;

        $r65 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFromTag()>();

        if $r65 == null goto label08;

        $r64 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getToTag()>();

        if $r64 != null goto label08;

        $r60 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r59 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint()>();

        $r61 = (gov.nist.javax.sip.ListeningPointImpl) $r59;

        r82 = virtualinvoke $r60.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPClientTransaction findSubscribeTransaction(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.ListeningPointImpl)>(r2, $r61);

        if r82 != null goto label08;

        $r69 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z10 = $r69.<gov.nist.javax.sip.SipStackImpl: boolean deliverUnsolicitedNotify>;

        if $z10 != 0 goto label08;

        $r71 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r71.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Cannot find matching Subscription (and gov.nist.javax.sip.DELIVER_UNSOLICITED_NOTIFY not set)");

        throw $r71;

     label08:
        $r11 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z3 = virtualinvoke $r11.<gov.nist.javax.sip.SipStackImpl: boolean acquireSem()>();

        if $z3 != 0 goto label09;

        $r62 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r62.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction not available -- could not acquire stack lock");

        throw $r62;

     label09:
        $r12 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z4 = staticinvoke <gov.nist.javax.sip.SipStackImpl: boolean isDialogCreated(java.lang.String)>($r12);

        if $z4 == 0 goto label19;

        $r41 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r42 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r48 = virtualinvoke $r41.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r42, 1);

        if $r48 == null goto label10;

        $r63 = new javax.sip.TransactionAlreadyExistsException;

        specialinvoke $r63.<javax.sip.TransactionAlreadyExistsException: void <init>(java.lang.String)>("server transaction already exists!");

        throw $r63;

     label10:
        $r47 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r46 = virtualinvoke $r47.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getTransaction()>();

        r83 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r46;

        if r83 != null goto label11;

        $r55 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r55.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction not available");

        throw $r55;

     label11:
        $r45 = virtualinvoke r83.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if $r45 != null goto label12;

        virtualinvoke r83.<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r2);

     label12:
        $r51 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r51.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r83);

     label13:
        goto label15;

     label14:
        $r72 := @caughtexception;

        $r73 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r73.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Error sending provisional response");

        throw $r73;

     label15:
        virtualinvoke r83.<gov.nist.javax.sip.stack.SIPServerTransaction: void addEventListener(gov.nist.javax.sip.stack.SIPTransactionEventListener)>(r0);

        $z7 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z7 == 0 goto label36;

        r84 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r52 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r4 = virtualinvoke $r52.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r84);

        if r4 != null goto label16;

        $r54 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r4 = virtualinvoke $r54.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>(r83);

     label16:
        $r49 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r83.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r4, $r49);

        $r50 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z6 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z6 == 0 goto label17;

        $z8 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z8 == 0 goto label17;

        $r53 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r53.<gov.nist.javax.sip.SipStackImpl: void putInMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction,gov.nist.javax.sip.message.SIPRequest)>(r83, r2);

     label17:
        virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r2);

        $r56 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getRemoteTag()>();

        if $r56 == null goto label18;

        $r57 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getLocalTag()>();

        if $r57 == null goto label18;

        $r58 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r58.<gov.nist.javax.sip.SipStackImpl: void putDialog(gov.nist.javax.sip.stack.SIPDialog)>(r4);

     label18:
        goto label36;

     label19:
        $z5 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z5 == 0 goto label27;

        $r34 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r33 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r31 = virtualinvoke $r34.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r33, 1);

        r85 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r31;

        if r85 == null goto label20;

        $r43 = new javax.sip.TransactionAlreadyExistsException;

        specialinvoke $r43.<javax.sip.TransactionAlreadyExistsException: void <init>(java.lang.String)>("Transaction exists! ");

        throw $r43;

     label20:
        $r32 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r37 = virtualinvoke $r32.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getTransaction()>();

        r83 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r37;

        if r83 != null goto label21;

        $r44 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r44.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction not available!");

        throw $r44;

     label21:
        $r36 = virtualinvoke r83.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if $r36 != null goto label22;

        virtualinvoke r83.<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r2);

     label22:
        $r35 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r35.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r83);

     label23:
        goto label25;

     label24:
        $r80 := @caughtexception;

        $r81 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r81.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Could not send back provisional response!");

        throw $r81;

     label25:
        r86 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r40 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r87 = virtualinvoke $r40.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r86);

        if r87 == null goto label26;

        virtualinvoke r87.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r83);

        virtualinvoke r87.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r2);

        $r38 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r83.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r87, $r38);

     label26:
        goto label36;

     label27:
        $r15 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r13 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r14 = virtualinvoke $r15.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r13, 1);

        r88 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r14;

        if r88 == null goto label28;

        $r29 = new javax.sip.TransactionAlreadyExistsException;

        specialinvoke $r29.<javax.sip.TransactionAlreadyExistsException: void <init>(java.lang.String)>("Transaction exists! ");

        throw $r29;

     label28:
        $r17 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r16 = virtualinvoke $r17.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getTransaction()>();

        r89 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r16;

        if r89 == null goto label32;

        $r26 = virtualinvoke r89.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if $r26 != null goto label29;

        virtualinvoke r89.<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r2);

     label29:
        $r27 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r27.<gov.nist.javax.sip.SipStackImpl: void mapTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r89);

        r90 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r25 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r91 = virtualinvoke $r25.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r90);

        if r91 == null goto label30;

        virtualinvoke r91.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r89);

        virtualinvoke r91.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r2);

        $r28 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r89.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r91, $r28);

     label30:
        r5 = r89;

     label31:
        $r30 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r30.<gov.nist.javax.sip.SipStackImpl: void releaseSem()>();

        return r5;

     label32:
        $r19 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.Object getMessageChannel()>();

        r92 = (gov.nist.javax.sip.stack.MessageChannel) $r19;

        $r18 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r93 = virtualinvoke $r18.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPServerTransaction createServerTransaction(gov.nist.javax.sip.stack.MessageChannel)>(r92);

        if r93 != null goto label33;

        $r23 = new javax.sip.TransactionUnavailableException;

        specialinvoke $r23.<javax.sip.TransactionUnavailableException: void <init>(java.lang.String)>("Transaction unavailable -- too many servrer transactions");

        throw $r23;

     label33:
        virtualinvoke r93.<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r2);

        $r20 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r20.<gov.nist.javax.sip.SipStackImpl: void mapTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r93);

        r94 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r21 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r95 = virtualinvoke $r21.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r94);

        if r95 == null goto label34;

        virtualinvoke r95.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r93);

        virtualinvoke r95.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r2);

        $r22 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r93.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r95, $r22);

     label34:
        r6 = r93;

     label35:
        $r24 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r24.<gov.nist.javax.sip.SipStackImpl: void releaseSem()>();

        return r6;

     label36:
        r96 = r83;

     label37:
        $r39 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r39.<gov.nist.javax.sip.SipStackImpl: void releaseSem()>();

        return r96;

     label38:
        $r79 := @caughtexception;

        r7 = $r79;

     label39:
        $r76 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r76.<gov.nist.javax.sip.SipStackImpl: void releaseSem()>();

        throw r7;

        catch java.text.ParseException from label02 to label03 with label04;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label22 to label23 with label24;
        catch java.lang.Throwable from label09 to label31 with label38;
        catch java.lang.Throwable from label32 to label35 with label38;
        catch java.lang.Throwable from label36 to label37 with label38;
        catch java.lang.Throwable from label38 to label39 with label38;
    }

    public javax.sip.SipStack getSipStack()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.SipStackImpl $r1;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r1 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        return $r1;
    }

    public void removeSipListener(javax.sip.SipListener)
    {
        gov.nist.javax.sip.SipProviderImpl r0, r3;
        javax.sip.SipListener r1, $r4, $r8;
        boolean z0, $z1;
        java.util.Iterator r2;
        gov.nist.javax.sip.SipStackImpl $r5, $r6;
        java.lang.Object $r7;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.SipListener;

        $r4 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

        if r1 != $r4 goto label1;

        r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener sipListener> = null;

     label1:
        z0 = 0;

        $r5 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r2 = virtualinvoke $r5.<gov.nist.javax.sip.SipStackImpl: java.util.Iterator getSipProviders()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (gov.nist.javax.sip.SipProviderImpl) $r7;

        $r8 = virtualinvoke r3.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

        if $r8 == null goto label3;

        z0 = 1;

     label3:
        goto label2;

     label4:
        if z0 != 0 goto label5;

        $r6 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r6.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener sipListener> = null;

     label5:
        return;
    }

    public void sendRequest(javax.sip.message.Request) throws javax.sip.SipException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.message.Request r1;
        gov.nist.javax.sip.stack.SIPDialog r2;
        gov.nist.javax.sip.message.SIPRequest r3, $r8, $r10, $r41;
        gov.nist.javax.sip.header.Via r4, $r39;
        java.lang.String r5, $r14, $r15, $r20, $r22, $r29, $r31, $r33, $r34, $r37, $r40, $r42, $r45, $r50, $r59, $r68, $r72, $r76;
        java.lang.Throwable r6, $r52;
        gov.nist.javax.sip.SipStackImpl $r7, $r11, $r21, $r23, $r30, $r46, $r48, $r49, $r53, $r62, $r65, $r70, $r74, $r80;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        gov.nist.javax.sip.header.RequestLine $r9;
        javax.sip.address.Router $r12;
        java.util.concurrent.ConcurrentHashMap $r13;
        javax.sip.SipException $r16, $r38, $r43, $r51, $r82;
        java.lang.StringBuilder $r17, $r18, $r19, $r24, $r26, $r27, $r28, $r32, $r54, $r55, $r57, $r58, $r60, $r61, $r64, $r66, $r69, $r73, $r77, $r78, $r79;
        gov.nist.core.StackLogger $r25, $r47, $r63, $r67, $r81;
        javax.sip.ListeningPoint $r35, $r36;
        int $i0, $i1;
        javax.sip.DialogState $r44, $r56;
        java.text.ParseException $r71, r86;
        java.io.IOException $r75, r85;
        javax.sip.address.Hop r83;
        gov.nist.javax.sip.stack.MessageChannel r84;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.message.Request;

        $r7 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r7.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z0 != 0 goto label01;

        $r51 = new javax.sip.SipException;

        specialinvoke $r51.<javax.sip.SipException: void <init>(java.lang.String)>("Stack is stopped.");

        throw $r51;

     label01:
        $r8 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.RequestLine getRequestLine()>();

        if $r9 == null goto label02;

        $r42 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z5 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z5 == 0 goto label02;

        $r46 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r41 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r45 = virtualinvoke $r41.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        r2 = virtualinvoke $r46.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>($r45);

        if r2 == null goto label02;

        $r44 = interfaceinvoke r2.<javax.sip.Dialog: javax.sip.DialogState getState()>();

        if $r44 == null goto label02;

        $r49 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z6 = virtualinvoke $r49.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label02;

        $r48 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r47 = virtualinvoke $r48.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog exists -- you may want to use Dialog.sendAck() ");

        $r56 = interfaceinvoke r2.<javax.sip.Dialog: javax.sip.DialogState getState()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r56);

        $r50 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r47.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>($r50);

     label02:
        $r11 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r10 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $r12 = virtualinvoke $r11.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter(gov.nist.javax.sip.message.SIPRequest)>($r10);

        r83 = interfaceinvoke $r12.<javax.sip.address.Router: javax.sip.address.Hop getNextHop(javax.sip.message.Request)>(r1);

        if r83 != null goto label03;

        $r43 = new javax.sip.SipException;

        specialinvoke $r43.<javax.sip.SipException: void <init>(java.lang.String)>("could not determine next hop!");

        throw $r43;

     label03:
        r3 = (gov.nist.javax.sip.message.SIPRequest) r1;

        $z1 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: boolean isNullRequest()>();

        if $z1 != 0 goto label04;

        $r39 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        if $r39 != null goto label04;

        $r38 = new javax.sip.SipException;

        specialinvoke $r38.<javax.sip.SipException: void <init>(java.lang.String)>("Invalid SipRequest -- no via header!");

        throw $r38;

     label04:
        $z2 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: boolean isNullRequest()>();

        if $z2 != 0 goto label06;

        r4 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        r5 = virtualinvoke r4.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if r5 == null goto label05;

        $i1 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i1 != 0 goto label06;

     label05:
        $r40 = virtualinvoke r3.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        virtualinvoke r4.<gov.nist.javax.sip.header.Via: void setBranch(java.lang.String)>($r40);

     label06:
        r84 = null;

        $r13 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r15 = interfaceinvoke r83.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r14 = virtualinvoke $r15.<java.lang.String: java.lang.String toUpperCase()>();

        $z3 = virtualinvoke $r13.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>($r14);

        if $z3 == 0 goto label07;

        $r30 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r31 = interfaceinvoke r83.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r36 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>($r31);

        $r37 = interfaceinvoke $r36.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        $r34 = interfaceinvoke r83.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r35 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>($r34);

        $i0 = interfaceinvoke $r35.<javax.sip.ListeningPoint: int getPort()>();

        r84 = virtualinvoke $r30.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.MessageChannel createRawMessageChannel(java.lang.String,int,javax.sip.address.Hop)>($r37, $i0, r83);

     label07:
        if r84 == null goto label08;

        virtualinvoke r84.<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage,javax.sip.address.Hop)>(r3, r83);

        goto label09;

     label08:
        $r16 = new javax.sip.SipException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create a message channel for ");

        $r20 = interfaceinvoke r83.<javax.sip.address.Hop: java.lang.String toString()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<javax.sip.SipException: void <init>(java.lang.String)>($r22);

        throw $r16;

     label09:
        $r21 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z4 = virtualinvoke $r21.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label17;

        $r23 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r25 = virtualinvoke $r23.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("done sending ");

        $r29 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to hop ");

        $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r83);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r33);

        goto label17;

     label10:
        $r75 := @caughtexception;

        r85 = $r75;

        $r74 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z9 = virtualinvoke $r74.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label11;

        $r80 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r81 = virtualinvoke $r80.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r81.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r85);

     label11:
        $r82 = new javax.sip.SipException;

        specialinvoke $r82.<javax.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("IO Exception occured while Sending Request", r85);

        throw $r82;

     label12:
        $r71 := @caughtexception;

        r86 = $r71;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r86);

     label13:
        $r70 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z8 = virtualinvoke $r70.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z8 == 0 goto label17;

        $r65 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r67 = virtualinvoke $r65.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("done sending ");

        $r76 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $r79 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        $r78 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to hop ");

        $r73 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r83);

        $r72 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r67.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r72);

        goto label17;

     label14:
        $r52 := @caughtexception;

        r6 = $r52;

     label15:
        $r53 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z7 = virtualinvoke $r53.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z7 == 0 goto label16;

        $r62 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r63 = virtualinvoke $r62.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("done sending ");

        $r59 = interfaceinvoke r1.<javax.sip.message.Request: java.lang.String getMethod()>();

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to hop ");

        $r69 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r83);

        $r68 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r63.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r68);

     label16:
        throw r6;

     label17:
        return;

        catch java.io.IOException from label04 to label09 with label10;
        catch java.text.ParseException from label04 to label09 with label12;
        catch java.lang.Throwable from label04 to label09 with label14;
        catch java.lang.Throwable from label10 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public void sendResponse(javax.sip.message.Response) throws javax.sip.SipException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.message.Response r1;
        gov.nist.javax.sip.message.SIPResponse r2;
        gov.nist.javax.sip.header.Via r3;
        gov.nist.javax.sip.stack.SIPServerTransaction r4;
        java.lang.String r5, r6, $r18, $r20, $r28, $r36;
        int i0, $i1, $i2, $i3;
        javax.sip.address.Hop r7;
        gov.nist.javax.sip.ListeningPointImpl r8;
        gov.nist.javax.sip.stack.MessageChannel r9;
        gov.nist.javax.sip.SipStackImpl $r10, $r12, $r14, $r19;
        boolean $z0, $z1, $z2;
        gov.nist.javax.sip.message.SIPMessage $r11;
        gov.nist.javax.sip.stack.SIPTransaction $r13;
        gov.nist.javax.sip.stack.HopImpl $r15;
        gov.nist.core.net.AddressResolver $r16;
        javax.sip.ListeningPoint $r17, $r21;
        java.lang.StringBuilder $r22, $r23, $r25, $r26, $r27, $r29, $r30;
        javax.sip.SipException $r24, $r33, $r34, $r35, $r37;
        javax.sip.TransactionState $r31, $r32;
        java.io.IOException $r38, r39;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.message.Response;

        $r10 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r10.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z0 != 0 goto label01;

        $r33 = new javax.sip.SipException;

        specialinvoke $r33.<javax.sip.SipException: void <init>(java.lang.String)>("Stack is stopped");

        throw $r33;

     label01:
        r2 = (gov.nist.javax.sip.message.SIPResponse) r1;

        r3 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.Via getTopmostVia()>();

        if r3 != null goto label02;

        $r34 = new javax.sip.SipException;

        specialinvoke $r34.<javax.sip.SipException: void <init>(java.lang.String)>("No via header in response!");

        throw $r34;

     label02:
        $r12 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r11 = (gov.nist.javax.sip.message.SIPMessage) r1;

        $r13 = virtualinvoke $r12.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage,boolean)>($r11, 1);

        r4 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r13;

        if r4 == null goto label03;

        $r31 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()>();

        $r32 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        if $r31 == $r32 goto label03;

        $z2 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z2 == 0 goto label03;

        $r35 = new javax.sip.SipException;

        specialinvoke $r35.<javax.sip.SipException: void <init>(java.lang.String)>("Transaction exists -- cannot send response statelessly");

        throw $r35;

     label03:
        r5 = virtualinvoke r3.<gov.nist.javax.sip.header.Via: java.lang.String getTransport()>();

        r6 = virtualinvoke r3.<gov.nist.javax.sip.header.Via: java.lang.String getReceived()>();

        if r6 != null goto label04;

        r6 = virtualinvoke r3.<gov.nist.javax.sip.header.Via: java.lang.String getHost()>();

     label04:
        i0 = virtualinvoke r3.<gov.nist.javax.sip.header.Via: int getRPort()>();

        if i0 != -1 goto label06;

        i0 = virtualinvoke r3.<gov.nist.javax.sip.header.Via: int getPort()>();

        if i0 != -1 goto label06;

        $z1 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TLS");

        if $z1 == 0 goto label05;

        i0 = 5061;

        goto label06;

     label05:
        i0 = 5060;

     label06:
        $i1 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i1 <= 0 goto label07;

        $i3 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String)>("[");

        if $i3 >= 0 goto label07;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r6 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        $r14 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r16 = virtualinvoke $r14.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.AddressResolver getAddressResolver()>();

        $r15 = new gov.nist.javax.sip.stack.HopImpl;

        specialinvoke $r15.<gov.nist.javax.sip.stack.HopImpl: void <init>(java.lang.String,int,java.lang.String)>(r6, i0, r5);

        r7 = interfaceinvoke $r16.<gov.nist.core.net.AddressResolver: javax.sip.address.Hop resolveAddress(javax.sip.address.Hop)>($r15);

     label08:
        $r17 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>(r5);

        r8 = (gov.nist.javax.sip.ListeningPointImpl) $r17;

        if r8 != null goto label09;

        $r24 = new javax.sip.SipException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("whoopsa daisy! no listening point found for transport ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<javax.sip.SipException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label09:
        $r19 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r18 = interfaceinvoke r7.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r21 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.ListeningPoint getListeningPoint(java.lang.String)>($r18);

        $r20 = interfaceinvoke $r21.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        $i2 = r8.<gov.nist.javax.sip.ListeningPointImpl: int port>;

        r9 = virtualinvoke $r19.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.MessageChannel createRawMessageChannel(java.lang.String,int,javax.sip.address.Hop)>($r20, $i2, r7);

        virtualinvoke r9.<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>(r2);

     label10:
        goto label12;

     label11:
        $r38 := @caughtexception;

        r39 = $r38;

        $r37 = new javax.sip.SipException;

        $r36 = virtualinvoke r39.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r37.<javax.sip.SipException: void <init>(java.lang.String)>($r36);

        throw $r37;

     label12:
        return;

        catch java.io.IOException from label08 to label10 with label11;
    }

    public synchronized void setListeningPoint(javax.sip.ListeningPoint)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.ListeningPoint r1;
        gov.nist.javax.sip.ListeningPointImpl r2;
        java.lang.String r3, $r4, $r5;
        int $i0;
        java.util.concurrent.ConcurrentHashMap $r6, $r7;
        java.lang.NullPointerException $r9;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.ListeningPoint;

        if r1 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null listening point");

        throw $r9;

     label1:
        r2 = (gov.nist.javax.sip.ListeningPointImpl) r1;

        r2.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl sipProvider> = r0;

        $r4 = virtualinvoke r2.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getTransport()>();

        r3 = virtualinvoke $r4.<java.lang.String: java.lang.String toUpperCase()>();

        $r5 = interfaceinvoke r1.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String address> = $r5;

        $i0 = interfaceinvoke r1.<javax.sip.ListeningPoint: int getPort()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: int port> = $i0;

        $r6 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r7 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r1);

        return;
    }

    public javax.sip.Dialog getNewDialog(javax.sip.Transaction) throws javax.sip.SipException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.Transaction r1;
        gov.nist.javax.sip.stack.SIPTransaction r2, $r20;
        gov.nist.javax.sip.stack.SIPServerTransaction r3;
        gov.nist.javax.sip.message.SIPResponse r4, r35;
        gov.nist.javax.sip.message.SIPRequest r5, r36;
        java.lang.String r6, $r9, $r17, $r18, $r27, $r29, r37;
        gov.nist.javax.sip.SipStackImpl $r7, $r12, $r13, $r16, $r19, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        javax.sip.message.Request $r8, $r11, $r15, $r24;
        javax.sip.SipException $r10, $r14, $r21, $r25, $r28, $r32;
        int $i0;
        java.lang.StringBuilder $r23, $r26, $r30;
        java.lang.NullPointerException $r31;
        gov.nist.javax.sip.stack.SIPDialog r33, r38;
        gov.nist.javax.sip.stack.SIPClientTransaction r34;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.Transaction;

        if r1 != null goto label01;

        $r31 = new java.lang.NullPointerException;

        specialinvoke $r31.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null transaction!");

        throw $r31;

     label01:
        $r7 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r7.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z0 != 0 goto label02;

        $r32 = new javax.sip.SipException;

        specialinvoke $r32.<javax.sip.SipException: void <init>(java.lang.String)>("Stack is stopped.");

        throw $r32;

     label02:
        $z1 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z1 == 0 goto label03;

        $r28 = new javax.sip.SipException;

        specialinvoke $r28.<javax.sip.SipException: void <init>(java.lang.String)>(" Error - AUTOMATIC_DIALOG_SUPPORT is on");

        throw $r28;

     label03:
        $r8 = interfaceinvoke r1.<javax.sip.Transaction: javax.sip.message.Request getRequest()>();

        $r9 = interfaceinvoke $r8.<javax.sip.message.Request: java.lang.String getMethod()>();

        $z2 = staticinvoke <gov.nist.javax.sip.SipStackImpl: boolean isDialogCreated(java.lang.String)>($r9);

        if $z2 != 0 goto label04;

        $r25 = new javax.sip.SipException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog cannot be created for this method ");

        $r24 = interfaceinvoke r1.<javax.sip.Transaction: javax.sip.message.Request getRequest()>();

        $r29 = interfaceinvoke $r24.<javax.sip.message.Request: java.lang.String getMethod()>();

        $r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<javax.sip.SipException: void <init>(java.lang.String)>($r27);

        throw $r25;

     label04:
        r2 = (gov.nist.javax.sip.stack.SIPTransaction) r1;

        $z3 = r1 instanceof javax.sip.ServerTransaction;

        if $z3 == 0 goto label09;

        r3 = (gov.nist.javax.sip.stack.SIPServerTransaction) r1;

        r4 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()>();

        if r4 == null goto label05;

        $i0 = interfaceinvoke r4.<javax.sip.message.Response: int getStatusCode()>();

        if $i0 == 100 goto label05;

        $r21 = new javax.sip.SipException;

        specialinvoke $r21.<javax.sip.SipException: void <init>(java.lang.String)>("Cannot set dialog after response has been sent");

        throw $r21;

     label05:
        $r15 = interfaceinvoke r1.<javax.sip.Transaction: javax.sip.message.Request getRequest()>();

        r5 = (gov.nist.javax.sip.message.SIPRequest) $r15;

        r6 = virtualinvoke r5.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        $r16 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r33 = virtualinvoke $r16.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r6);

        if r33 != null goto label06;

        $r22 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r20 = (gov.nist.javax.sip.stack.SIPTransaction) r1;

        r33 = virtualinvoke $r22.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>($r20);

        virtualinvoke r33.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

        virtualinvoke r33.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r5);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r33, null);

        goto label07;

     label06:
        $r18 = virtualinvoke r5.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r33, $r18);

     label07:
        $r17 = virtualinvoke r5.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z4 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z4 == 0 goto label08;

        $z5 = virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z5 == 0 goto label08;

        $r19 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r19.<gov.nist.javax.sip.SipStackImpl: void putInMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction,gov.nist.javax.sip.message.SIPRequest)>(r3, r5);

     label08:
        goto label12;

     label09:
        r34 = (gov.nist.javax.sip.stack.SIPClientTransaction) r1;

        r35 = virtualinvoke r34.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()>();

        if r35 != null goto label11;

        $r11 = virtualinvoke r34.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.message.Request getRequest()>();

        r36 = (gov.nist.javax.sip.message.SIPRequest) $r11;

        r37 = virtualinvoke r36.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        $r12 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r38 = virtualinvoke $r12.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r37);

        if r38 == null goto label10;

        $r14 = new javax.sip.SipException;

        specialinvoke $r14.<javax.sip.SipException: void <init>(java.lang.String)>("Dialog already exists!");

        throw $r14;

     label10:
        $r13 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        r33 = virtualinvoke $r13.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

        virtualinvoke r34.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r33, null);

        goto label12;

     label11:
        $r10 = new javax.sip.SipException;

        specialinvoke $r10.<javax.sip.SipException: void <init>(java.lang.String)>("Cannot call this method after response is received!");

        throw $r10;

     label12:
        virtualinvoke r33.<gov.nist.javax.sip.stack.SIPDialog: void addEventListener(gov.nist.javax.sip.stack.SIPDialogEventListener)>(r0);

        return r33;
    }

    public void transactionErrorEvent(gov.nist.javax.sip.stack.SIPTransactionErrorEvent)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.stack.SIPTransactionErrorEvent r1;
        gov.nist.javax.sip.stack.SIPTransaction r2, $r10, $r19, $r30;
        java.lang.Object r3, $r7, r44, r49;
        javax.sip.Timeout r4, r45, r51;
        gov.nist.javax.sip.stack.SIPClientTransaction r5, r47;
        javax.sip.address.Hop r6, r48;
        int $i0, $i1, $i2;
        javax.sip.Dialog $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        javax.sip.TimeoutEvent $r9, $r13, $r18, $r22, $r31, $r32, r43, r46, r52;
        javax.sip.ClientTransaction $r11, $r20, $r29;
        javax.sip.ServerTransaction $r12, $r25, $r39;
        gov.nist.javax.sip.SipStackImpl $r14, $r17, $r23, $r26, $r27, $r35, $r38;
        gov.nist.core.StackLogger $r15, $r37;
        javax.sip.address.Router $r16, $r24, $r28, $r34;
        gov.nist.javax.sip.address.RouterExt $r21, $r33;
        java.lang.StringBuilder $r36, $r41, $r42;
        java.lang.String $r40;
        javax.sip.Transaction r50;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionErrorEvent;

        $r7 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: java.lang.Object getSource()>();

        r2 = (gov.nist.javax.sip.stack.SIPTransaction) $r7;

        $i0 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: int getErrorID()>();

        if $i0 != 2 goto label05;

        $r26 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z3 = virtualinvoke $r26.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label01;

        $r38 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r37 = virtualinvoke $r38.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TransportError occured on ");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r37.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r40);

     label01:
        r3 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: java.lang.Object getSource()>();

        r4 = <javax.sip.Timeout: javax.sip.Timeout TRANSACTION>;

        $z4 = r3 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z4 == 0 goto label02;

        $r32 = new javax.sip.TimeoutEvent;

        $r39 = (javax.sip.ServerTransaction) r3;

        specialinvoke $r32.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Timeout)>(r0, $r39, r4);

        r43 = $r32;

        goto label04;

     label02:
        r5 = (gov.nist.javax.sip.stack.SIPClientTransaction) r3;

        r6 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.address.Hop getNextHop()>();

        $r27 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r28 = virtualinvoke $r27.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter()>();

        $z5 = $r28 instanceof gov.nist.javax.sip.address.RouterExt;

        if $z5 == 0 goto label03;

        $r35 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r34 = virtualinvoke $r35.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter()>();

        $r33 = (gov.nist.javax.sip.address.RouterExt) $r34;

        interfaceinvoke $r33.<gov.nist.javax.sip.address.RouterExt: void transactionTimeout(javax.sip.address.Hop)>(r6);

     label03:
        $r31 = new javax.sip.TimeoutEvent;

        $r29 = (javax.sip.ClientTransaction) r3;

        specialinvoke $r31.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ClientTransaction,javax.sip.Timeout)>(r0, $r29, r4);

        r43 = $r31;

     label04:
        $r30 = (gov.nist.javax.sip.stack.SIPTransaction) r3;

        virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r43, $r30);

        goto label13;

     label05:
        $i1 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: int getErrorID()>();

        if $i1 != 1 goto label09;

        r44 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: java.lang.Object getSource()>();

        r45 = <javax.sip.Timeout: javax.sip.Timeout TRANSACTION>;

        $z1 = r44 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z1 == 0 goto label06;

        $r22 = new javax.sip.TimeoutEvent;

        $r25 = (javax.sip.ServerTransaction) r44;

        specialinvoke $r22.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Timeout)>(r0, $r25, r45);

        r46 = $r22;

        goto label08;

     label06:
        r47 = (gov.nist.javax.sip.stack.SIPClientTransaction) r44;

        r48 = virtualinvoke r47.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.address.Hop getNextHop()>();

        $r17 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r16 = virtualinvoke $r17.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter()>();

        $z2 = $r16 instanceof gov.nist.javax.sip.address.RouterExt;

        if $z2 == 0 goto label07;

        $r23 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r24 = virtualinvoke $r23.<gov.nist.javax.sip.SipStackImpl: javax.sip.address.Router getRouter()>();

        $r21 = (gov.nist.javax.sip.address.RouterExt) $r24;

        interfaceinvoke $r21.<gov.nist.javax.sip.address.RouterExt: void transactionTimeout(javax.sip.address.Hop)>(r48);

     label07:
        $r18 = new javax.sip.TimeoutEvent;

        $r20 = (javax.sip.ClientTransaction) r44;

        specialinvoke $r18.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ClientTransaction,javax.sip.Timeout)>(r0, $r20, r45);

        r46 = $r18;

     label08:
        $r19 = (gov.nist.javax.sip.stack.SIPTransaction) r44;

        virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r46, $r19);

        goto label13;

     label09:
        $i2 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: int getErrorID()>();

        if $i2 != 3 goto label13;

        r49 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: java.lang.Object getSource()>();

        r50 = (javax.sip.Transaction) r49;

        $r8 = interfaceinvoke r50.<javax.sip.Transaction: javax.sip.Dialog getDialog()>();

        if $r8 == null goto label10;

        $r14 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r15 = virtualinvoke $r14.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.String,gov.nist.core.StackLogger)>("Unexpected event !", $r15);

     label10:
        r51 = <javax.sip.Timeout: javax.sip.Timeout RETRANSMIT>;

        $z0 = r49 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z0 == 0 goto label11;

        $r13 = new javax.sip.TimeoutEvent;

        $r12 = (javax.sip.ServerTransaction) r49;

        specialinvoke $r13.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Timeout)>(r0, $r12, r51);

        r52 = $r13;

        goto label12;

     label11:
        $r9 = new javax.sip.TimeoutEvent;

        $r11 = (javax.sip.ClientTransaction) r49;

        specialinvoke $r9.<javax.sip.TimeoutEvent: void <init>(java.lang.Object,javax.sip.ClientTransaction,javax.sip.Timeout)>(r0, $r11, r51);

        r52 = $r9;

     label12:
        $r10 = (gov.nist.javax.sip.stack.SIPTransaction) r49;

        virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r52, $r10);

     label13:
        return;
    }

    public synchronized void dialogErrorEvent(gov.nist.javax.sip.stack.SIPDialogErrorEvent)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.stack.SIPDialogErrorEvent r1;
        gov.nist.javax.sip.stack.SIPDialog r2;
        gov.nist.javax.sip.DialogTimeoutEvent$Reason r3;
        gov.nist.javax.sip.DialogTimeoutEvent r4, $r7;
        java.lang.Object $r5;
        int $i0, $i1;
        gov.nist.javax.sip.SipStackImpl $r6, $r8;
        boolean $z0;
        gov.nist.core.StackLogger $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPDialogErrorEvent;

        $r5 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialogErrorEvent: java.lang.Object getSource()>();

        r2 = (gov.nist.javax.sip.stack.SIPDialog) $r5;

        r3 = <gov.nist.javax.sip.DialogTimeoutEvent$Reason: gov.nist.javax.sip.DialogTimeoutEvent$Reason AckNotReceived>;

        $i0 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialogErrorEvent: int getErrorID()>();

        if $i0 != 2 goto label1;

        r3 = <gov.nist.javax.sip.DialogTimeoutEvent$Reason: gov.nist.javax.sip.DialogTimeoutEvent$Reason AckNotSent>;

        goto label2;

     label1:
        $i1 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialogErrorEvent: int getErrorID()>();

        if $i1 != 3 goto label2;

        r3 = <gov.nist.javax.sip.DialogTimeoutEvent$Reason: gov.nist.javax.sip.DialogTimeoutEvent$Reason ReInviteTimeout>;

     label2:
        $r6 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r6.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label3;

        $r8 = r0.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog TimeoutError occured on ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r13);

     label3:
        $r7 = new gov.nist.javax.sip.DialogTimeoutEvent;

        specialinvoke $r7.<gov.nist.javax.sip.DialogTimeoutEvent: void <init>(java.lang.Object,javax.sip.Dialog,gov.nist.javax.sip.DialogTimeoutEvent$Reason)>(r0, r2, r3);

        r4 = $r7;

        virtualinvoke r0.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r4, null);

        return;
    }

    public synchronized javax.sip.ListeningPoint[] getListeningPoints()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        gov.nist.javax.sip.ListeningPointImpl[] r1;
        java.util.concurrent.ConcurrentHashMap $r2, $r3;
        int $i0;
        java.util.Collection $r4;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r2 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: int size()>();

        r1 = newarray (gov.nist.javax.sip.ListeningPointImpl)[$i0];

        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        interfaceinvoke $r4.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return r1;
    }

    public synchronized void addListeningPoint(javax.sip.ListeningPoint) throws javax.sip.ObjectInUseException
    {
        gov.nist.javax.sip.SipProviderImpl r0, $r4, $r18;
        javax.sip.ListeningPoint r1;
        gov.nist.javax.sip.ListeningPointImpl r2;
        java.lang.String r3, $r5, $r7, $r8, $r16;
        java.util.concurrent.ConcurrentHashMap $r6, $r10, $r11, $r12;
        boolean $z0, $z1, $z2;
        javax.sip.ObjectInUseException $r9, $r14, $r17;
        int $i0, $i1, $i2;
        java.lang.Object $r15;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.ListeningPoint;

        r2 = (gov.nist.javax.sip.ListeningPointImpl) r1;

        $r4 = r2.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl sipProvider>;

        if $r4 == null goto label1;

        $r18 = r2.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl sipProvider>;

        if $r18 == r0 goto label1;

        $r17 = new javax.sip.ObjectInUseException;

        specialinvoke $r17.<javax.sip.ObjectInUseException: void <init>(java.lang.String)>("Listening point assigned to another provider");

        throw $r17;

     label1:
        $r5 = virtualinvoke r2.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getTransport()>();

        r3 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase()>();

        $r6 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $z0 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r16 = interfaceinvoke r1.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String address> = $r16;

        $i2 = interfaceinvoke r1.<javax.sip.ListeningPoint: int getPort()>();

        r0.<gov.nist.javax.sip.SipProviderImpl: int port> = $i2;

        goto label4;

     label2:
        $r7 = r0.<gov.nist.javax.sip.SipProviderImpl: java.lang.String address>;

        $r8 = interfaceinvoke r1.<javax.sip.ListeningPoint: java.lang.String getIPAddress()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label3;

        $i0 = r0.<gov.nist.javax.sip.SipProviderImpl: int port>;

        $i1 = interfaceinvoke r1.<javax.sip.ListeningPoint: int getPort()>();

        if $i0 == $i1 goto label4;

     label3:
        $r9 = new javax.sip.ObjectInUseException;

        specialinvoke $r9.<javax.sip.ObjectInUseException: void <init>(java.lang.String)>("Provider already has different IP Address associated");

        throw $r9;

     label4:
        $r10 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $z2 = virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r3);

        if $z2 == 0 goto label5;

        $r12 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r15 = virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r3);

        if $r15 == r1 goto label5;

        $r14 = new javax.sip.ObjectInUseException;

        specialinvoke $r14.<javax.sip.ObjectInUseException: void <init>(java.lang.String)>("Listening point already assigned for transport!");

        throw $r14;

     label5:
        r2.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl sipProvider> = r0;

        $r11 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2);

        return;
    }

    public synchronized void removeListeningPoint(javax.sip.ListeningPoint) throws javax.sip.ObjectInUseException
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.ListeningPoint r1;
        gov.nist.javax.sip.ListeningPointImpl r2;
        gov.nist.javax.sip.stack.MessageProcessor $r3;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.lang.String $r5, $r6;
        javax.sip.ObjectInUseException $r8;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r1 := @parameter0: javax.sip.ListeningPoint;

        r2 = (gov.nist.javax.sip.ListeningPointImpl) r1;

        $r3 = r2.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        $z0 = virtualinvoke $r3.<gov.nist.javax.sip.stack.MessageProcessor: boolean inUse()>();

        if $z0 == 0 goto label1;

        $r8 = new javax.sip.ObjectInUseException;

        specialinvoke $r8.<javax.sip.ObjectInUseException: void <init>(java.lang.String)>("Object is in use");

        throw $r8;

     label1:
        $r4 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r5 = virtualinvoke r2.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getTransport()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r6);

        return;
    }

    public synchronized void removeListeningPoints()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        java.util.Iterator r1;
        gov.nist.javax.sip.ListeningPointImpl r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.util.Collection $r4;
        boolean $z0;
        java.lang.Object $r5;
        gov.nist.javax.sip.stack.MessageProcessor $r6;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r3 = r0.<gov.nist.javax.sip.SipProviderImpl: java.util.concurrent.ConcurrentHashMap listeningPoints>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (gov.nist.javax.sip.ListeningPointImpl) $r5;

        $r6 = r2.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        virtualinvoke $r6.<gov.nist.javax.sip.stack.MessageProcessor: void stop()>();

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return;
    }

    public void setAutomaticDialogSupportEnabled(boolean)
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        boolean z0, $z1;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        z0 := @parameter0: boolean;

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean automaticDialogSupportEnabled> = z0;

        $z1 = r0.<gov.nist.javax.sip.SipProviderImpl: boolean automaticDialogSupportEnabled>;

        if $z1 == 0 goto label1;

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = 1;

     label1:
        return;
    }

    public boolean isAutomaticDialogSupportEnabled()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $z0 = r0.<gov.nist.javax.sip.SipProviderImpl: boolean automaticDialogSupportEnabled>;

        return $z0;
    }

    public void setDialogErrorsAutomaticallyHandled()
    {
        gov.nist.javax.sip.SipProviderImpl r0;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled> = 1;

        return;
    }

    public boolean isDialogErrorsAutomaticallyHandled()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $z0 = r0.<gov.nist.javax.sip.SipProviderImpl: boolean dialogErrorsAutomaticallyHandled>;

        return $z0;
    }

    public javax.sip.SipListener getSipListener()
    {
        gov.nist.javax.sip.SipProviderImpl r0;
        javax.sip.SipListener $r1;

        r0 := @this: gov.nist.javax.sip.SipProviderImpl;

        $r1 = r0.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener sipListener>;

        return $r1;
    }
}
