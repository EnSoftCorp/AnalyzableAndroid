public class org.apache.http.impl.SocketHttpServerConnection extends org.apache.http.impl.AbstractHttpServerConnection implements org.apache.http.HttpInetConnection
{
    private volatile boolean open;
    private java.net.Socket socket;

    public void <init>()
    {
        org.apache.http.impl.SocketHttpServerConnection r0;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        specialinvoke r0.<org.apache.http.impl.AbstractHttpServerConnection: void <init>()>();

        r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket> = null;

        return;
    }

    protected void assertNotOpen()
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $z0 = r0.<org.apache.http.impl.SocketHttpServerConnection: boolean open>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is already open");

        throw $r1;

     label1:
        return;
    }

    protected void assertOpen()
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $z0 = r0.<org.apache.http.impl.SocketHttpServerConnection: boolean open>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is not open");

        throw $r1;

     label1:
        return;
    }

    protected org.apache.http.io.SessionInputBuffer createHttpDataReceiver(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        java.net.Socket r1;
        int i0;
        org.apache.http.params.HttpParams r2;
        org.apache.http.impl.io.SocketInputBuffer $r3;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        r1 := @parameter0: java.net.Socket;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.http.params.HttpParams;

        $r3 = new org.apache.http.impl.io.SocketInputBuffer;

        specialinvoke $r3.<org.apache.http.impl.io.SocketInputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>(r1, i0, r2);

        return $r3;
    }

    protected org.apache.http.io.SessionOutputBuffer createHttpDataTransmitter(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        java.net.Socket r1;
        int i0;
        org.apache.http.params.HttpParams r2;
        org.apache.http.impl.io.SocketOutputBuffer $r3;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        r1 := @parameter0: java.net.Socket;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.http.params.HttpParams;

        $r3 = new org.apache.http.impl.io.SocketOutputBuffer;

        specialinvoke $r3.<org.apache.http.impl.io.SocketOutputBuffer: void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)>(r1, i0, r2);

        return $r3;
    }

    protected void bind(java.net.Socket, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        java.net.Socket r1;
        org.apache.http.params.HttpParams r2;
        int i0;
        org.apache.http.io.SessionInputBuffer $r3;
        org.apache.http.io.SessionOutputBuffer $r4;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: org.apache.http.params.HttpParams;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r5;

     label2:
        r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket> = r1;

        i0 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getSocketBufferSize(org.apache.http.params.HttpParams)>(r2);

        $r3 = virtualinvoke r0.<org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionInputBuffer createHttpDataReceiver(java.net.Socket,int,org.apache.http.params.HttpParams)>(r1, i0, r2);

        $r4 = virtualinvoke r0.<org.apache.http.impl.SocketHttpServerConnection: org.apache.http.io.SessionOutputBuffer createHttpDataTransmitter(java.net.Socket,int,org.apache.http.params.HttpParams)>(r1, i0, r2);

        virtualinvoke r0.<org.apache.http.impl.SocketHttpServerConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)>($r3, $r4, r2);

        r0.<org.apache.http.impl.SocketHttpServerConnection: boolean open> = 1;

        return;
    }

    protected java.net.Socket getSocket()
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        java.net.Socket $r1;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        return $r1;
    }

    public boolean isOpen()
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $z0 = r0.<org.apache.http.impl.SocketHttpServerConnection: boolean open>;

        return $z0;
    }

    public java.net.InetAddress getLocalAddress()
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        java.net.Socket $r1, $r2;
        java.net.InetAddress $r3;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        $r3 = virtualinvoke $r2.<java.net.Socket: java.net.InetAddress getLocalAddress()>();

        return $r3;

     label1:
        return null;
    }

    public int getLocalPort()
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        java.net.Socket $r1, $r2;
        int $i0;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        $i0 = virtualinvoke $r2.<java.net.Socket: int getLocalPort()>();

        return $i0;

     label1:
        return -1;
    }

    public java.net.InetAddress getRemoteAddress()
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        java.net.Socket $r1, $r2;
        java.net.InetAddress $r3;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        $r3 = virtualinvoke $r2.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        return $r3;

     label1:
        return null;
    }

    public int getRemotePort()
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        java.net.Socket $r1, $r2;
        int $i0;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        $i0 = virtualinvoke $r2.<java.net.Socket: int getPort()>();

        return $i0;

     label1:
        return -1;
    }

    public void setSocketTimeout(int)
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        int i0;
        java.net.Socket $r2, $r3;
        java.net.SocketException $r4;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.http.impl.SocketHttpServerConnection: void assertOpen()>();

        $r2 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        virtualinvoke $r3.<java.net.Socket: void setSoTimeout(int)>(i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.net.SocketException from label1 to label2 with label3;
    }

    public int getSocketTimeout()
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        java.net.Socket $r2, $r3;
        int $i0;
        java.net.SocketException $r4;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $r2 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        $i0 = virtualinvoke $r3.<java.net.Socket: int getSoTimeout()>();

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        return -1;

     label4:
        return -1;

        catch java.net.SocketException from label1 to label2 with label3;
    }

    public void shutdown() throws java.io.IOException
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        java.net.Socket r1;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        r0.<org.apache.http.impl.SocketHttpServerConnection: boolean open> = 0;

        r1 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        if r1 == null goto label1;

        virtualinvoke r1.<java.net.Socket: void close()>();

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.http.impl.SocketHttpServerConnection r0;
        boolean $z0;
        java.net.Socket $r2, $r3, $r4;
        java.io.IOException $r5, $r6;

        r0 := @this: org.apache.http.impl.SocketHttpServerConnection;

        $z0 = r0.<org.apache.http.impl.SocketHttpServerConnection: boolean open>;

        if $z0 != 0 goto label1;

        return;

     label1:
        r0.<org.apache.http.impl.SocketHttpServerConnection: boolean open> = 0;

        virtualinvoke r0.<org.apache.http.impl.SocketHttpServerConnection: void doFlush()>();

     label2:
        $r2 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        virtualinvoke $r2.<java.net.Socket: void shutdownOutput()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        $r3 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        virtualinvoke $r3.<java.net.Socket: void shutdownInput()>();

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

     label8:
        $r4 = r0.<org.apache.http.impl.SocketHttpServerConnection: java.net.Socket socket>;

        virtualinvoke $r4.<java.net.Socket: void close()>();

        return;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.io.IOException from label5 to label6 with label7;
    }
}
