public class org.apache.commons.codec.binary.Base64 extends java.lang.Object implements org.apache.commons.codec.BinaryEncoder, org.apache.commons.codec.BinaryDecoder
{
    static final int CHUNK_SIZE;
    static final byte[] CHUNK_SEPARATOR;
    static final int BASELENGTH;
    static final int LOOKUPLENGTH;
    static final int EIGHTBIT;
    static final int SIXTEENBIT;
    static final int TWENTYFOURBITGROUP;
    static final int FOURBYTE;
    static final int SIGN;
    static final byte PAD;
    private static byte[] base64Alphabet;
    private static byte[] lookUpBase64Alphabet;

    public void <init>()
    {
        org.apache.commons.codec.binary.Base64 r0;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean isBase64(byte)
    {
        byte b0, $b1;
        byte[] $r0;

        b0 := @parameter0: byte;

        if b0 != 61 goto label1;

        return 1;

     label1:
        $r0 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $b1 = $r0[b0];

        if $b1 != -1 goto label2;

        return 0;

     label2:
        return 1;
    }

    public static boolean isArrayByteBase64(byte[])
    {
        byte[] r0, r1;
        int i0, i1;
        byte $b2;
        boolean $z0;

        r0 := @parameter0: byte[];

        r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] discardWhitespace(byte[])>(r0);

        i0 = lengthof r1;

        if i0 != 0 goto label1;

        return 1;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $b2 = r1[i1];

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte)>($b2);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static byte[] encodeBase64(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 0);

        return $r1;
    }

    public static byte[] encodeBase64Chunked(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r0, 1);

        return $r1;
    }

    public java.lang.Object decode(java.lang.Object) throws org.apache.commons.codec.DecoderException
    {
        org.apache.commons.codec.binary.Base64 r0;
        java.lang.Object r1;
        boolean $z0;
        byte[] $r2, $r3, $r4;
        org.apache.commons.codec.DecoderException $r5;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof byte[];

        if $z0 != 0 goto label1;

        $r5 = new org.apache.commons.codec.DecoderException;

        specialinvoke $r5.<org.apache.commons.codec.DecoderException: void <init>(java.lang.String)>("Parameter supplied to Base64 decode is not a byte[]");

        throw $r5;

     label1:
        $r2 = (byte[]) r1;

        $r3 = (byte[]) $r2;

        $r4 = virtualinvoke r0.<org.apache.commons.codec.binary.Base64: byte[] decode(byte[])>($r3);

        return $r4;
    }

    public byte[] decode(byte[])
    {
        org.apache.commons.codec.binary.Base64 r0;
        byte[] r1, $r2;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        r1 := @parameter0: byte[];

        $r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>(r1);

        return $r2;
    }

    public static byte[] encodeBase64(byte[], boolean)
    {
        byte[] r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, r19;
        boolean z0;
        int i0, i1, i2, i3, i4, i5, i6, $i9, $i11, $i12, $i13, $i15, $i23, $i26, $i27, $i29, $i30, $i34, $i39, $i42, $i43, $i45, $i49, $i52, $i62, $i63, $i65, $i66, $i68, $i70, $i71, $i73, $i74, $i75, $i76, $i77, $i84, $i85, $i86, $i87, $i88, $i89, i90, i91, i92, i98;
        byte b7, b8, b10, $b14, $b16, $b17, $b18, $b19, $b20, $b22, $b25, $b28, $b31, $b32, $b33, $b35, $b36, $b37, $b38, $b40, $b44, $b46, $b47, $b48, $b50, $b51, $b54, $b55, $b57, $b59, $b60, $b61, $b64, $b67, $b69, $b72, $b78, $b79, $b80, $b81, $b82, $b83, b93, b94, b95, b96, b97, b99, b100, b101, b102, b103, b104, b105, b106, b107;
        short $s21, $s24, $s41, $s53, $s56, $s58;
        double $d0, $d1;
        float $f0, $f1;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        $i9 = lengthof r0;

        i0 = $i9 * 8;

        i1 = i0 % 24;

        i2 = i0 / 24;

        i3 = 0;

        if i1 == 0 goto label01;

        $i87 = i2 + 1;

        i90 = $i87 * 4;

        goto label02;

     label01:
        i90 = i2 * 4;

     label02:
        if z0 == 0 goto label05;

        $r18 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i86 = lengthof $r18;

        if $i86 != 0 goto label03;

        $i88 = 0;

        goto label04;

     label03:
        $f1 = (float) i90;

        $f0 = $f1 / 76.0F;

        $d1 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d1);

        $i88 = (int) $d0;

     label04:
        i3 = $i88;

        $r17 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i85 = lengthof $r17;

        $i89 = i3 * $i85;

        i90 = i90 + $i89;

     label05:
        r19 = newarray (byte)[i90];

        i4 = 0;

        i6 = 76;

        i5 = 0;

        i91 = 0;

     label06:
        if i91 >= i2 goto label14;

        i92 = i91 * 3;

        b93 = r0[i92];

        $i52 = i92 + 1;

        b94 = r0[$i52];

        $i45 = i92 + 2;

        b95 = r0[$i45];

        $b46 = b94 & 15;

        b96 = (byte) $b46;

        $b47 = b93 & 3;

        b97 = (byte) $b47;

        $b48 = b93 & -128;

        if $b48 != 0 goto label07;

        $b78 = b93 >> 2;

        $b79 = (byte) $b78;

        goto label08;

     label07:
        $b57 = b93 >> 2;

        $s58 = $b57 ^ 192;

        $b79 = (byte) $s58;

     label08:
        b8 = $b79;

        $b59 = b94 & -128;

        if $b59 != 0 goto label09;

        $b80 = b94 >> 4;

        $b81 = (byte) $b80;

        goto label10;

     label09:
        $b60 = b94 >> 4;

        $s53 = $b60 ^ 240;

        $b81 = (byte) $s53;

     label10:
        b7 = $b81;

        $b54 = b95 & -128;

        if $b54 != 0 goto label11;

        $b82 = b95 >> 6;

        $b83 = (byte) $b82;

        goto label12;

     label11:
        $b55 = b95 >> 6;

        $s56 = $b55 ^ 252;

        $b83 = (byte) $s56;

     label12:
        b10 = $b83;

        $r10 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $b64 = $r10[b8];

        r19[i4] = $b64;

        $i63 = i4 + 1;

        $r9 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i66 = b97 << 4;

        $i65 = b7 | $i66;

        $b61 = $r9[$i65];

        r19[$i63] = $b61;

        $i71 = i4 + 2;

        $r12 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i62 = b96 << 2;

        $i70 = $i62 | b10;

        $b72 = $r12[$i70];

        r19[$i71] = $b72;

        $i68 = i4 + 3;

        $r11 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $b67 = b95 & 63;

        $b69 = $r11[$b67];

        r19[$i68] = $b69;

        i4 = i4 + 4;

        if z0 == 0 goto label13;

        if i4 != i6 goto label13;

        $r14 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $r15 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i77 = lengthof $r15;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r14, 0, r19, i4, $i77);

        i5 = i5 + 1;

        $i76 = i5 + 1;

        $i74 = 76 * $i76;

        $r13 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i75 = lengthof $r13;

        $i73 = i5 * $i75;

        i6 = $i74 + $i73;

        $r16 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i84 = lengthof $r16;

        i4 = i4 + $i84;

     label13:
        i91 = i91 + 1;

        goto label06;

     label14:
        i98 = i91 * 3;

        if i1 != 8 goto label17;

        b99 = r0[i98];

        $b37 = b99 & 3;

        b100 = (byte) $b37;

        $b36 = b99 & -128;

        if $b36 != 0 goto label15;

        $b50 = b99 >> 2;

        $b51 = (byte) $b50;

        goto label16;

     label15:
        $b35 = b99 >> 2;

        $s41 = $b35 ^ 192;

        $b51 = (byte) $s41;

     label16:
        b101 = $b51;

        $r7 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $b40 = $r7[b101];

        r19[i4] = $b40;

        $i43 = i4 + 1;

        $r8 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i39 = b100 << 4;

        $b44 = $r8[$i39];

        r19[$i43] = $b44;

        $i42 = i4 + 2;

        r19[$i42] = 61;

        $i49 = i4 + 3;

        r19[$i49] = 61;

        goto label22;

     label17:
        if i1 != 16 goto label22;

        b102 = r0[i98];

        $i15 = i98 + 1;

        b103 = r0[$i15];

        $b14 = b103 & 15;

        b104 = (byte) $b14;

        $b17 = b102 & 3;

        b105 = (byte) $b17;

        $b16 = b102 & -128;

        if $b16 != 0 goto label18;

        $b31 = b102 >> 2;

        $b38 = (byte) $b31;

        goto label19;

     label18:
        $b20 = b102 >> 2;

        $s21 = $b20 ^ 192;

        $b38 = (byte) $s21;

     label19:
        b106 = $b38;

        $b18 = b103 & -128;

        if $b18 != 0 goto label20;

        $b33 = b103 >> 4;

        $b32 = (byte) $b33;

        goto label21;

     label20:
        $b19 = b103 >> 4;

        $s24 = $b19 ^ 240;

        $b32 = (byte) $s24;

     label21:
        b107 = $b32;

        $r4 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $b22 = $r4[b106];

        r19[i4] = $b22;

        $i26 = i4 + 1;

        $r5 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i23 = b105 << 4;

        $i27 = b107 | $i23;

        $b25 = $r5[$i27];

        r19[$i26] = $b25;

        $i29 = i4 + 2;

        $r6 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i30 = b104 << 2;

        $b28 = $r6[$i30];

        r19[$i29] = $b28;

        $i34 = i4 + 3;

        r19[$i34] = 61;

     label22:
        if z0 == 0 goto label23;

        if i5 >= i3 goto label23;

        $r3 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $r1 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i11 = lengthof $r1;

        $i13 = i90 - $i11;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR>;

        $i12 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r3, 0, r19, $i13, $i12);

     label23:
        return r19;
    }

    public static byte[] decodeBase64(byte[])
    {
        byte[] r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, r8, r9;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8, $i9, $i12, $i13, $i16, $i19, $i22, $i23, $i24, $i25, $i31, $i32, $i33, $i34, $i37, $i38, $i39, $i41, i43, i44;
        byte $b7, $b10, $b11, $b14, $b15, $b17, $b18, $b20, $b21, $b26, $b27, $b28, $b29, $b30, $b35, $b36, $b40, $b42, b45, b46, b47, b48, b49, b50, b51;

        r0 := @parameter0: byte[];

        r8 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] discardNonBase64(byte[])>(r0);

        $i3 = lengthof r8;

        if $i3 != 0 goto label1;

        $r6 = newarray (byte)[0];

        return $r6;

     label1:
        $i4 = lengthof r8;

        i0 = $i4 / 4;

        i1 = 0;

        i2 = lengthof r8;

     label2:
        $i5 = i2 - 1;

        $b7 = r8[$i5];

        if $b7 != 61 goto label3;

        i2 = i2 + -1;

        if i2 != 0 goto label2;

        $r7 = newarray (byte)[0];

        return $r7;

     label3:
        $i6 = i2 - i0;

        r9 = newarray (byte)[$i6];

        i43 = 0;

     label4:
        if i43 >= i0 goto label8;

        i44 = i43 * 4;

        $i9 = i44 + 2;

        b45 = r8[$i9];

        $i8 = i44 + 3;

        b46 = r8[$i8];

        $r1 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $b10 = r8[i44];

        b47 = $r1[$b10];

        $r3 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i12 = i44 + 1;

        $b11 = r8[$i12];

        b48 = $r3[$b11];

        if b45 == 61 goto label5;

        if b46 == 61 goto label5;

        $r5 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        b49 = $r5[b45];

        $r4 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        b50 = $r4[b46];

        $i31 = b47 << 2;

        $b27 = b48 >> 4;

        $i32 = $i31 | $b27;

        $b29 = (byte) $i32;

        r9[i1] = $b29;

        $i39 = i1 + 1;

        $b30 = b48 & 15;

        $i34 = $b30 << 4;

        $b36 = b49 >> 2;

        $b35 = $b36 & 15;

        $i33 = $i34 | $b35;

        $b40 = (byte) $i33;

        r9[$i39] = $b40;

        $i41 = i1 + 2;

        $i38 = b49 << 6;

        $i37 = $i38 | b50;

        $b42 = (byte) $i37;

        r9[$i41] = $b42;

        goto label7;

     label5:
        if b45 != 61 goto label6;

        $i23 = b47 << 2;

        $b26 = b48 >> 4;

        $i24 = $i23 | $b26;

        $b28 = (byte) $i24;

        r9[i1] = $b28;

        goto label7;

     label6:
        if b46 != 61 goto label7;

        $r2 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        b51 = $r2[b45];

        $i13 = b47 << 2;

        $b14 = b48 >> 4;

        $i16 = $i13 | $b14;

        $b15 = (byte) $i16;

        r9[i1] = $b15;

        $i25 = i1 + 1;

        $b18 = b48 & 15;

        $i22 = $b18 << 4;

        $b17 = b51 >> 2;

        $b21 = $b17 & 15;

        $i19 = $i22 | $b21;

        $b20 = (byte) $i19;

        r9[$i25] = $b20;

     label7:
        i1 = i1 + 3;

        i43 = i43 + 1;

        goto label4;

     label8:
        return r9;
    }

    static byte[] discardWhitespace(byte[])
    {
        byte[] r0, r1, r2;
        int i0, i1, $i2, $i3, $i5;
        byte $b4, $b6;

        r0 := @parameter0: byte[];

        $i2 = lengthof r0;

        r1 = newarray (byte)[$i2];

        i0 = 0;

        i1 = 0;

     label1:
        $i3 = lengthof r0;

        if i1 >= $i3 goto label5;

        $b4 = r0[i1];

        lookupswitch($b4)
        {
            case 9: goto label2;
            case 10: goto label2;
            case 13: goto label2;
            case 32: goto label2;
            default: goto label3;
        };

     label2:
        goto label4;

     label3:
        $i5 = i0;

        i0 = i0 + 1;

        $b6 = r0[i1];

        r1[$i5] = $b6;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        r2 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r1, 0, r2, 0, i0);

        return r2;
    }

    static byte[] discardNonBase64(byte[])
    {
        byte[] r0, r1, r2;
        int i0, i1, $i2, $i3, $i5;
        byte $b4, $b6;
        boolean $z0;

        r0 := @parameter0: byte[];

        $i2 = lengthof r0;

        r1 = newarray (byte)[$i2];

        i0 = 0;

        i1 = 0;

     label1:
        $i3 = lengthof r0;

        if i1 >= $i3 goto label3;

        $b4 = r0[i1];

        $z0 = staticinvoke <org.apache.commons.codec.binary.Base64: boolean isBase64(byte)>($b4);

        if $z0 == 0 goto label2;

        $i5 = i0;

        i0 = i0 + 1;

        $b6 = r0[i1];

        r1[$i5] = $b6;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r2 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r1, 0, r2, 0, i0);

        return r2;
    }

    public java.lang.Object encode(java.lang.Object) throws org.apache.commons.codec.EncoderException
    {
        org.apache.commons.codec.binary.Base64 r0;
        java.lang.Object r1;
        boolean $z0;
        byte[] $r2, $r3, $r4;
        org.apache.commons.codec.EncoderException $r5;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof byte[];

        if $z0 != 0 goto label1;

        $r5 = new org.apache.commons.codec.EncoderException;

        specialinvoke $r5.<org.apache.commons.codec.EncoderException: void <init>(java.lang.String)>("Parameter supplied to Base64 encode is not a byte[]");

        throw $r5;

     label1:
        $r2 = (byte[]) r1;

        $r3 = (byte[]) $r2;

        $r4 = virtualinvoke r0.<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])>($r3);

        return $r4;
    }

    public byte[] encode(byte[])
    {
        org.apache.commons.codec.binary.Base64 r0;
        byte[] r1, $r2;

        r0 := @this: org.apache.commons.codec.binary.Base64;

        r1 := @parameter0: byte[];

        $r2 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)>(r1, 0);

        return $r2;
    }

    static void <clinit>()
    {
        int i0, i1, $i2, $i4, $i7, $i8, $i10, $i11, $i13, $i14, i16, i17, i18, i19, i20, i21, i22;
        java.lang.String $r0;
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        byte $b3, $b5, $b6, $b9, $b12, $b15;

        <org.apache.commons.codec.binary.Base64: byte PAD> = 61;

        <org.apache.commons.codec.binary.Base64: int SIGN> = -128;

        <org.apache.commons.codec.binary.Base64: int FOURBYTE> = 4;

        <org.apache.commons.codec.binary.Base64: int TWENTYFOURBITGROUP> = 24;

        <org.apache.commons.codec.binary.Base64: int SIXTEENBIT> = 16;

        <org.apache.commons.codec.binary.Base64: int EIGHTBIT> = 8;

        <org.apache.commons.codec.binary.Base64: int LOOKUPLENGTH> = 64;

        <org.apache.commons.codec.binary.Base64: int BASELENGTH> = 255;

        <org.apache.commons.codec.binary.Base64: int CHUNK_SIZE> = 76;

        $r0 = "\r\n";

        $r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        <org.apache.commons.codec.binary.Base64: byte[] CHUNK_SEPARATOR> = $r1;

        $r2 = newarray (byte)[255];

        <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet> = $r2;

        $r3 = newarray (byte)[64];

        <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet> = $r3;

        i0 = 0;

     label01:
        if i0 >= 255 goto label02;

        $r14 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $r14[i0] = -1;

        i0 = i0 + 1;

        goto label01;

     label02:
        i16 = 90;

     label03:
        if i16 < 65 goto label04;

        $r13 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i14 = i16 - 65;

        $b15 = (byte) $i14;

        $r13[i16] = $b15;

        i16 = i16 + -1;

        goto label03;

     label04:
        i17 = 122;

     label05:
        if i17 < 97 goto label06;

        $r12 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i11 = i17 - 97;

        $i13 = $i11 + 26;

        $b12 = (byte) $i13;

        $r12[i17] = $b12;

        i17 = i17 + -1;

        goto label05;

     label06:
        i18 = 57;

     label07:
        if i18 < 48 goto label08;

        $r11 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $i8 = i18 - 48;

        $i10 = $i8 + 52;

        $b9 = (byte) $i10;

        $r11[i18] = $b9;

        i18 = i18 + -1;

        goto label07;

     label08:
        $r4 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $r4[43] = 62;

        $r5 = <org.apache.commons.codec.binary.Base64: byte[] base64Alphabet>;

        $r5[47] = 63;

        i19 = 0;

     label09:
        if i19 > 25 goto label10;

        $r10 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i7 = 65 + i19;

        $b6 = (byte) $i7;

        $r10[i19] = $b6;

        i19 = i19 + 1;

        goto label09;

     label10:
        i20 = 26;

        i1 = 0;

     label11:
        if i20 > 51 goto label12;

        $r9 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i4 = 97 + i1;

        $b5 = (byte) $i4;

        $r9[i20] = $b5;

        i20 = i20 + 1;

        i1 = i1 + 1;

        goto label11;

     label12:
        i21 = 52;

        i22 = 0;

     label13:
        if i21 > 61 goto label14;

        $r8 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $i2 = 48 + i22;

        $b3 = (byte) $i2;

        $r8[i21] = $b3;

        i21 = i21 + 1;

        i22 = i22 + 1;

        goto label13;

     label14:
        $r6 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $r6[62] = 43;

        $r7 = <org.apache.commons.codec.binary.Base64: byte[] lookUpBase64Alphabet>;

        $r7[63] = 47;

        return;
    }
}
