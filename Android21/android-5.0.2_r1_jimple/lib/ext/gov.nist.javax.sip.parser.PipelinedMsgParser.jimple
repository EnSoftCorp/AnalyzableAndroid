public final class gov.nist.javax.sip.parser.PipelinedMsgParser extends java.lang.Object implements java.lang.Runnable
{
    protected gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener;
    private java.lang.Thread mythread;
    private gov.nist.javax.sip.parser.Pipeline rawInputStream;
    private int maxMessageSize;
    private int sizeCounter;
    private static int uid;

    protected void <init>()
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static synchronized int getNewUid()
    {
        int $i0, $i1;

        $i0 = <gov.nist.javax.sip.parser.PipelinedMsgParser: int uid>;

        $i1 = $i0 + 1;

        <gov.nist.javax.sip.parser.PipelinedMsgParser: int uid> = $i1;

        return $i0;
    }

    public void <init>(gov.nist.javax.sip.parser.SIPMessageListener, gov.nist.javax.sip.parser.Pipeline, boolean, int)
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        gov.nist.javax.sip.parser.SIPMessageListener r1;
        gov.nist.javax.sip.parser.Pipeline r2;
        boolean z0;
        int i0, $i1;
        java.lang.Thread $r3, $r5;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.SIPMessageListener;

        r2 := @parameter1: gov.nist.javax.sip.parser.Pipeline;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        specialinvoke r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: void <init>()>();

        r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener> = r1;

        r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream> = r2;

        r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int maxMessageSize> = i0;

        $r3 = new java.lang.Thread;

        specialinvoke $r3.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: java.lang.Thread mythread> = $r3;

        $r5 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: java.lang.Thread mythread>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PipelineThread-");

        $i1 = staticinvoke <gov.nist.javax.sip.parser.PipelinedMsgParser: int getNewUid()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.lang.Thread: void setName(java.lang.String)>($r8);

        return;
    }

    public void <init>(gov.nist.javax.sip.parser.SIPMessageListener, gov.nist.javax.sip.parser.Pipeline, int)
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        gov.nist.javax.sip.parser.SIPMessageListener r1;
        gov.nist.javax.sip.parser.Pipeline r2;
        int i0;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.SIPMessageListener;

        r2 := @parameter1: gov.nist.javax.sip.parser.Pipeline;

        i0 := @parameter2: int;

        specialinvoke r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: void <init>(gov.nist.javax.sip.parser.SIPMessageListener,gov.nist.javax.sip.parser.Pipeline,boolean,int)>(r1, r2, 0, i0);

        return;
    }

    public void <init>(gov.nist.javax.sip.parser.Pipeline)
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        gov.nist.javax.sip.parser.Pipeline r1;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Pipeline;

        specialinvoke r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: void <init>(gov.nist.javax.sip.parser.SIPMessageListener,gov.nist.javax.sip.parser.Pipeline,boolean,int)>(null, r1, 0, 0);

        return;
    }

    public void processInput()
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        java.lang.Thread $r1;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        $r1 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: java.lang.Thread mythread>;

        virtualinvoke $r1.<java.lang.Thread: void start()>();

        return;
    }

    protected java.lang.Object clone()
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0, r1, $r3;
        java.lang.Thread r2, $r6;
        gov.nist.javax.sip.parser.Pipeline $r4;
        gov.nist.javax.sip.parser.SIPMessageListener $r5;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        $r3 = new gov.nist.javax.sip.parser.PipelinedMsgParser;

        specialinvoke $r3.<gov.nist.javax.sip.parser.PipelinedMsgParser: void <init>()>();

        r1 = $r3;

        $r4 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        r1.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream> = $r4;

        $r5 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener>;

        r1.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener> = $r5;

        $r6 = new java.lang.Thread;

        specialinvoke $r6.<java.lang.Thread: void <init>(java.lang.Runnable)>(r1);

        r2 = $r6;

        virtualinvoke r2.<java.lang.Thread: void setName(java.lang.String)>("PipelineThread");

        return r1;
    }

    public void setMessageListener(gov.nist.javax.sip.parser.SIPMessageListener)
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        gov.nist.javax.sip.parser.SIPMessageListener r1;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.SIPMessageListener;

        r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener> = r1;

        return;
    }

    private java.lang.String readLine(java.io.InputStream) throws java.io.IOException
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        java.io.InputStream r1;
        java.lang.StringBuffer r2, $r3;
        char c0;
        int i1, $i2, $i3, $i4, $i5;
        java.lang.String $r4;
        java.io.IOException $r6, $r7;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        r1 := @parameter0: java.io.InputStream;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>("");

        r2 = $r3;

     label1:
        i1 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if i1 != -1 goto label2;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("End of stream");

        throw $r7;

     label2:
        c0 = (char) i1;

        $i2 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int maxMessageSize>;

        if $i2 <= 0 goto label3;

        $i3 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int sizeCounter>;

        $i4 = $i3 - 1;

        r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int sizeCounter> = $i4;

        $i5 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int sizeCounter>;

        if $i5 > 0 goto label3;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Max size exceeded!");

        throw $r6;

     label3:
        if c0 == 13 goto label4;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

     label4:
        if c0 != 10 goto label5;

        goto label6;

     label5:
        goto label1;

     label6:
        $r4 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public void run()
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        gov.nist.javax.sip.parser.Pipeline r1, $r12, $r14, $r20, $r22, $r23, $r28, $r37, $r40, $r42, $r44;
        java.lang.StringBuffer r2, $r11;
        java.lang.String r3, $r13, $r17, $r29, $r30, $r32, r49;
        java.io.IOException r4, r5, r10, $r34, $r35, $r41, $r43, $r45, $r46, $r48, r50, r51, r55, r56;
        java.text.ParseException r6, $r47;
        byte[] r7;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        java.lang.Throwable r8, r9, $r38, $r39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        gov.nist.javax.sip.parser.SIPMessageListener $r15, $r19, $r21;
        gov.nist.javax.sip.parser.StringMsgParser $r16, r52;
        javax.sip.header.ContentLengthHeader $r18;
        java.lang.StringBuilder $r24, $r25, $r26, $r27, $r31, $r33;
        java.lang.Exception $r36;
        gov.nist.javax.sip.message.SIPMessage r53;
        gov.nist.javax.sip.header.ContentLength r54;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

        r1 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

     label01:
        $i2 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int maxMessageSize>;

        r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int sizeCounter> = $i2;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        r2 = $r11;

        $z0 = <gov.nist.core.Debug: boolean parserDebug>;

        if $z0 == 0 goto label02;

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>("Starting parse!");

     label02:
        r3 = specialinvoke r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: java.lang.String readLine(java.io.InputStream)>(r1);

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("\n");

        if $z1 == 0 goto label04;

        $z6 = <gov.nist.core.Debug: boolean parserDebug>;

        if $z6 == 0 goto label03;

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>("Discarding blank line. ");

     label03:
        goto label02;

     label04:
        goto label10;

     label05:
        $r41 := @caughtexception;

        r4 = $r41;

        staticinvoke <gov.nist.core.Debug: void printStackTrace(java.lang.Exception)>(r4);

        $r42 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r42.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

     label06:
        virtualinvoke r1.<gov.nist.javax.sip.parser.Pipeline: void close()>();

     label07:
        goto label09;

     label08:
        $r46 := @caughtexception;

        r5 = $r46;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r5);

     label09:
        return;

     label10:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r12 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r12.<gov.nist.javax.sip.parser.Pipeline: void startTimer()>();

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>("Reading Input Stream");

     label11:
        r49 = specialinvoke r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: java.lang.String readLine(java.io.InputStream)>(r1);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r49);

        $r13 = virtualinvoke r49.<java.lang.String: java.lang.String trim()>();

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 == 0 goto label13;

     label12:
        goto label19;

     label13:
        goto label11;

     label14:
        $r34 := @caughtexception;

        r50 = $r34;

        $r40 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r40.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

        staticinvoke <gov.nist.core.Debug: void printStackTrace(java.lang.Exception)>(r50);

     label15:
        virtualinvoke r1.<gov.nist.javax.sip.parser.Pipeline: void close()>();

     label16:
        goto label18;

     label17:
        $r35 := @caughtexception;

        r51 = $r35;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r51);

     label18:
        return;

     label19:
        $r14 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r14.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r49);

        $r16 = new gov.nist.javax.sip.parser.StringMsgParser;

        $r15 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener>;

        specialinvoke $r16.<gov.nist.javax.sip.parser.StringMsgParser: void <init>(gov.nist.javax.sip.parser.ParseExceptionListener)>($r15);

        r52 = $r16;

        r52.<gov.nist.javax.sip.parser.StringMsgParser: boolean readBody> = 0;

     label20:
        $z3 = <gov.nist.core.Debug: boolean debug>;

        if $z3 == 0 goto label21;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("About to parse : ");

        $r32 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>($r30);

     label21:
        $r17 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        r53 = virtualinvoke r52.<gov.nist.javax.sip.parser.StringMsgParser: gov.nist.javax.sip.message.SIPMessage parseSIPMessage(java.lang.String)>($r17);

        if r53 != null goto label23;

        $r28 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r28.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

     label22:
        goto label01;

     label23:
        goto label25;

     label24:
        $r47 := @caughtexception;

        r6 = $r47;

        staticinvoke <gov.nist.core.Debug: void logError(java.lang.String,java.lang.Exception)>("Detected a parse error", r6);

        goto label01;

     label25:
        $z5 = <gov.nist.core.Debug: boolean debug>;

        if $z5 == 0 goto label26;

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>("Completed parsing message");

     label26:
        $r18 = virtualinvoke r53.<gov.nist.javax.sip.message.SIPMessage: javax.sip.header.ContentLengthHeader getContentLength()>();

        r54 = (gov.nist.javax.sip.header.ContentLength) $r18;

        if r54 == null goto label27;

        i6 = virtualinvoke r54.<gov.nist.javax.sip.header.ContentLength: int getContentLength()>();

        goto label28;

     label27:
        i6 = 0;

     label28:
        $z4 = <gov.nist.core.Debug: boolean debug>;

        if $z4 == 0 goto label29;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("contentLength ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>($r29);

     label29:
        if i6 != 0 goto label30;

        virtualinvoke r53.<gov.nist.javax.sip.message.SIPMessage: void removeContent()>();

        goto label42;

     label30:
        $i3 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int maxMessageSize>;

        if $i3 == 0 goto label31;

        $i5 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: int sizeCounter>;

        if i6 >= $i5 goto label42;

     label31:
        r7 = newarray (byte)[i6];

        i0 = 0;

     label32:
        if i0 >= i6 goto label41;

        $r20 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r20.<gov.nist.javax.sip.parser.Pipeline: void startTimer()>();

     label33:
        $i4 = i6 - i0;

        i1 = virtualinvoke r1.<gov.nist.javax.sip.parser.Pipeline: int read(byte[],int,int)>(r7, i0, $i4);

        if i1 <= 0 goto label34;

        i0 = i0 + i1;

        goto label35;

     label34:
        $r22 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r22.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

        goto label41;

     label35:
        $r23 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r23.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

        goto label40;

     label36:
        $r43 := @caughtexception;

        r55 = $r43;

        staticinvoke <gov.nist.core.Debug: void logError(java.lang.String,java.lang.Exception)>("Exception Reading Content", r55);

     label37:
        $r44 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r44.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

        goto label41;

     label38:
        $r38 := @caughtexception;

        r8 = $r38;

     label39:
        $r37 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r37.<gov.nist.javax.sip.parser.Pipeline: void stopTimer()>();

        throw r8;

     label40:
        goto label32;

     label41:
        virtualinvoke r53.<gov.nist.javax.sip.message.SIPMessage: void setMessageContent(byte[])>(r7);

     label42:
        $r21 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener>;

        if $r21 == null goto label46;

     label43:
        $r19 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.SIPMessageListener sipMessageListener>;

        interfaceinvoke $r19.<gov.nist.javax.sip.parser.SIPMessageListener: void processMessage(gov.nist.javax.sip.message.SIPMessage)>(r53);

     label44:
        goto label46;

     label45:
        $r36 := @caughtexception;

        goto label47;

     label46:
        goto label01;

     label47:
        virtualinvoke r1.<gov.nist.javax.sip.parser.Pipeline: void close()>();

     label48:
        goto label55;

     label49:
        $r48 := @caughtexception;

        r56 = $r48;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r56);

        goto label55;

     label50:
        $r39 := @caughtexception;

        r9 = $r39;

     label51:
        virtualinvoke r1.<gov.nist.javax.sip.parser.Pipeline: void close()>();

     label52:
        goto label54;

     label53:
        $r45 := @caughtexception;

        r10 = $r45;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r10);

     label54:
        throw r9;

     label55:
        return;

        catch java.io.IOException from label02 to label03 with label05;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label11 to label12 with label14;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.text.ParseException from label20 to label22 with label24;
        catch java.io.IOException from label33 to label34 with label36;
        catch java.lang.Throwable from label33 to label34 with label38;
        catch java.lang.Throwable from label36 to label37 with label38;
        catch java.lang.Throwable from label38 to label39 with label38;
        catch java.lang.Exception from label43 to label44 with label45;
        catch java.io.IOException from label47 to label48 with label49;
        catch java.lang.Throwable from label01 to label06 with label50;
        catch java.lang.Throwable from label10 to label15 with label50;
        catch java.lang.Throwable from label19 to label47 with label50;
        catch java.io.IOException from label51 to label52 with label53;
        catch java.lang.Throwable from label50 to label51 with label50;
    }

    public void close()
    {
        gov.nist.javax.sip.parser.PipelinedMsgParser r0;
        gov.nist.javax.sip.parser.Pipeline $r2;
        java.io.IOException $r3;

        r0 := @this: gov.nist.javax.sip.parser.PipelinedMsgParser;

     label1:
        $r2 = r0.<gov.nist.javax.sip.parser.PipelinedMsgParser: gov.nist.javax.sip.parser.Pipeline rawInputStream>;

        virtualinvoke $r2.<gov.nist.javax.sip.parser.Pipeline: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        <gov.nist.javax.sip.parser.PipelinedMsgParser: int uid> = 0;

        return;
    }
}
