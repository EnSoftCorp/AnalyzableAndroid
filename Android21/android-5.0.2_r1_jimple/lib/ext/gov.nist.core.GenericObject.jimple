public abstract class gov.nist.core.GenericObject extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
{
    protected static final java.lang.String SEMICOLON;
    protected static final java.lang.String COLON;
    protected static final java.lang.String COMMA;
    protected static final java.lang.String SLASH;
    protected static final java.lang.String SP;
    protected static final java.lang.String EQUALS;
    protected static final java.lang.String STAR;
    protected static final java.lang.String NEWLINE;
    protected static final java.lang.String RETURN;
    protected static final java.lang.String LESS_THAN;
    protected static final java.lang.String GREATER_THAN;
    protected static final java.lang.String AT;
    protected static final java.lang.String DOT;
    protected static final java.lang.String QUESTION;
    protected static final java.lang.String POUND;
    protected static final java.lang.String AND;
    protected static final java.lang.String LPAREN;
    protected static final java.lang.String RPAREN;
    protected static final java.lang.String DOUBLE_QUOTE;
    protected static final java.lang.String QUOTE;
    protected static final java.lang.String HT;
    protected static final java.lang.String PERCENT;
    protected static final java.util.Set immutableClasses;
    static final java.lang.String[] immutableClassNames;
    protected int indentation;
    protected java.lang.String stringRepresentation;
    protected gov.nist.core.Match matchExpression;

    public void setMatcher(gov.nist.core.Match)
    {
        gov.nist.core.GenericObject r0;
        gov.nist.core.Match r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: gov.nist.core.Match;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null arg!");

        throw $r2;

     label1:
        r0.<gov.nist.core.GenericObject: gov.nist.core.Match matchExpression> = r1;

        return;
    }

    public gov.nist.core.Match getMatcher()
    {
        gov.nist.core.GenericObject r0;
        gov.nist.core.Match $r1;

        r0 := @this: gov.nist.core.GenericObject;

        $r1 = r0.<gov.nist.core.GenericObject: gov.nist.core.Match matchExpression>;

        return $r1;
    }

    public static java.lang.Class getClassFromName(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Exception r1, $r3;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r1);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static boolean isMySubclass(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "gov/nist/core/GenericObject";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        return $z0;
    }

    public static java.lang.Object makeClone(java.lang.Object)
    {
        java.lang.Object r0, r2;
        java.lang.Class r1, r3, $r5, $r6, $r7, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        java.util.Set $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Class[] $r8;
        java.lang.Object[] $r9, $r37, $r38;
        gov.nist.core.GenericObjectList $r10;
        gov.nist.core.GenericObject $r11;
        float[] $r20, $r25;
        double[] $r21, $r22;
        long[] $r23, $r24;
        int[] $r26, $r27;
        byte[] $r28, $r33;
        short[] $r29, $r30;
        boolean[] $r31, $r32;
        char[] $r34, $r35;
        java.lang.NullPointerException $r36;
        java.lang.SecurityException $r39;
        java.lang.NoSuchMethodException $r40;
        java.lang.IllegalArgumentException $r41, r46;
        java.lang.reflect.InvocationTargetException $r42;
        java.lang.IllegalAccessException $r43;
        java.lang.reflect.Method r44;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        $r36 = new java.lang.NullPointerException;

        specialinvoke $r36.<java.lang.NullPointerException: void <init>(java.lang.String)>("null obj!");

        throw $r36;

     label01:
        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = r0;

        $r4 = <gov.nist.core.GenericObject: java.util.Set immutableClasses>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label02;

        return r0;

     label02:
        $z1 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label12;

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $z5 = virtualinvoke r3.<java.lang.Class: boolean isPrimitive()>();

        if $z5 != 0 goto label03;

        $r38 = (java.lang.Object[]) r0;

        $r37 = (java.lang.Object[]) $r38;

        r2 = virtualinvoke $r37.<java.lang.Object: java.lang.Object clone()>();

        goto label11;

     label03:
        $r13 = <java.lang.Character: java.lang.Class TYPE>;

        if r3 != $r13 goto label04;

        $r35 = (char[]) r0;

        $r34 = (char[]) $r35;

        r2 = virtualinvoke $r34.<java.lang.Object: java.lang.Object clone()>();

        goto label05;

     label04:
        $r12 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r3 != $r12 goto label05;

        $r32 = (boolean[]) r0;

        $r31 = (boolean[]) $r32;

        r2 = virtualinvoke $r31.<java.lang.Object: java.lang.Object clone()>();

     label05:
        $r15 = <java.lang.Byte: java.lang.Class TYPE>;

        if r3 != $r15 goto label06;

        $r28 = (byte[]) r0;

        $r33 = (byte[]) $r28;

        r2 = virtualinvoke $r33.<java.lang.Object: java.lang.Object clone()>();

        goto label11;

     label06:
        $r14 = <java.lang.Short: java.lang.Class TYPE>;

        if r3 != $r14 goto label07;

        $r29 = (short[]) r0;

        $r30 = (short[]) $r29;

        r2 = virtualinvoke $r30.<java.lang.Object: java.lang.Object clone()>();

        goto label11;

     label07:
        $r17 = <java.lang.Integer: java.lang.Class TYPE>;

        if r3 != $r17 goto label08;

        $r27 = (int[]) r0;

        $r26 = (int[]) $r27;

        r2 = virtualinvoke $r26.<java.lang.Object: java.lang.Object clone()>();

        goto label11;

     label08:
        $r16 = <java.lang.Long: java.lang.Class TYPE>;

        if r3 != $r16 goto label09;

        $r23 = (long[]) r0;

        $r24 = (long[]) $r23;

        r2 = virtualinvoke $r24.<java.lang.Object: java.lang.Object clone()>();

        goto label11;

     label09:
        $r19 = <java.lang.Float: java.lang.Class TYPE>;

        if r3 != $r19 goto label10;

        $r20 = (float[]) r0;

        $r25 = (float[]) $r20;

        r2 = virtualinvoke $r25.<java.lang.Object: java.lang.Object clone()>();

        goto label11;

     label10:
        $r18 = <java.lang.Double: java.lang.Class TYPE>;

        if r3 != $r18 goto label11;

        $r21 = (double[]) r0;

        $r22 = (double[]) $r21;

        r2 = virtualinvoke $r22.<java.lang.Object: java.lang.Object clone()>();

     label11:
        goto label22;

     label12:
        $r5 = class "gov/nist/core/GenericObject";

        $z2 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z2 == 0 goto label13;

        $r11 = (gov.nist.core.GenericObject) r0;

        r2 = virtualinvoke $r11.<gov.nist.core.GenericObject: java.lang.Object clone()>();

        goto label22;

     label13:
        $r6 = class "gov/nist/core/GenericObjectList";

        $z3 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z3 == 0 goto label14;

        $r10 = (gov.nist.core.GenericObjectList) r0;

        r2 = virtualinvoke $r10.<gov.nist.core.GenericObjectList: java.lang.Object clone()>();

        goto label22;

     label14:
        $r7 = class "java/lang/Cloneable";

        $z4 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z4 == 0 goto label22;

     label15:
        $r8 = (java.lang.Class[]) null;

        r44 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("clone", $r8);

        $r9 = (java.lang.Object[]) null;

        r2 = virtualinvoke r44.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r9);

     label16:
        goto label22;

     label17:
        $r39 := @caughtexception;

        goto label22;

     label18:
        $r41 := @caughtexception;

        r46 = $r41;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r46);

        goto label22;

     label19:
        $r43 := @caughtexception;

        goto label22;

     label20:
        $r42 := @caughtexception;

        goto label22;

     label21:
        $r40 := @caughtexception;

     label22:
        return r2;

        catch java.lang.SecurityException from label15 to label16 with label17;
        catch java.lang.IllegalArgumentException from label15 to label16 with label18;
        catch java.lang.IllegalAccessException from label15 to label16 with label19;
        catch java.lang.reflect.InvocationTargetException from label15 to label16 with label20;
        catch java.lang.NoSuchMethodException from label15 to label16 with label21;
    }

    public java.lang.Object clone()
    {
        gov.nist.core.GenericObject r0;
        java.lang.Object $r2;
        java.lang.CloneNotSupportedException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: gov.nist.core.GenericObject;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal error");

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public void merge(java.lang.Object)
    {
        gov.nist.core.GenericObject r0, r8;
        java.lang.Object r1, r7, r13;
        java.lang.Class r2, r5, $r9, $r10;
        java.lang.reflect.Field[] r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.reflect.Field r4;
        java.lang.String r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        java.lang.IllegalArgumentException $r11;
        java.lang.IllegalAccessException $r12, r14;
        short s11;
        char c12;
        long l13;
        double d0;
        float f0;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        return;

     label01:
        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label02;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad override object");

        throw $r11;

     label02:
        r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label03:
        r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = 0;

     label04:
        $i3 = lengthof r3;

        if i0 >= $i3 goto label24;

        r4 = r3[i0];

        i1 = virtualinvoke r4.<java.lang.reflect.Field: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(i1);

        if $z2 == 0 goto label05;

        goto label23;

     label05:
        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i1);

        if $z4 == 0 goto label06;

        goto label23;

     label06:
        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isInterface(int)>(i1);

        if $z3 == 0 goto label07;

        goto label23;

     label07:
        r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        r6 = virtualinvoke r5.<java.lang.Class: java.lang.String toString()>();

     label08:
        $z5 = virtualinvoke r5.<java.lang.Class: boolean isPrimitive()>();

        if $z5 == 0 goto label15;

        $i5 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("int");

        if $i5 != 0 goto label09;

        i2 = virtualinvoke r4.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.reflect.Field: void setInt(java.lang.Object,int)>(r0, i2);

        goto label21;

     label09:
        $i4 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("short");

        if $i4 != 0 goto label10;

        s11 = virtualinvoke r4.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.reflect.Field: void setShort(java.lang.Object,short)>(r0, s11);

        goto label21;

     label10:
        $i8 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("char");

        if $i8 != 0 goto label11;

        c12 = virtualinvoke r4.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.reflect.Field: void setChar(java.lang.Object,char)>(r0, c12);

        goto label21;

     label11:
        $i9 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("long");

        if $i9 != 0 goto label12;

        l13 = virtualinvoke r4.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.reflect.Field: void setLong(java.lang.Object,long)>(r0, l13);

        goto label21;

     label12:
        $i6 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("boolean");

        if $i6 != 0 goto label13;

        z7 = virtualinvoke r4.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>(r0, z7);

        goto label21;

     label13:
        $i7 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("double");

        if $i7 != 0 goto label14;

        d0 = virtualinvoke r4.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>(r0, d0);

        goto label21;

     label14:
        $i10 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("float");

        if $i10 != 0 goto label21;

        f0 = virtualinvoke r4.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r1);

        virtualinvoke r4.<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>(r0, f0);

        goto label21;

     label15:
        r13 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        r7 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        if r7 != null goto label17;

     label16:
        goto label23;

     label17:
        if r13 != null goto label19;

        virtualinvoke r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, r7);

     label18:
        goto label23;

     label19:
        $z6 = r13 instanceof gov.nist.core.GenericObject;

        if $z6 == 0 goto label20;

        r8 = (gov.nist.core.GenericObject) r13;

        virtualinvoke r8.<gov.nist.core.GenericObject: void merge(java.lang.Object)>(r7);

        goto label21;

     label20:
        virtualinvoke r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, r7);

     label21:
        goto label23;

     label22:
        $r12 := @caughtexception;

        r14 = $r12;

        virtualinvoke r14.<java.lang.IllegalAccessException: void printStackTrace()>();

        goto label23;

     label23:
        i0 = i0 + 1;

        goto label04;

     label24:
        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        $z1 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "gov/nist/core/GenericObject");

        if $z1 == 0 goto label25;

        goto label26;

     label25:
        goto label03;

     label26:
        return;

        catch java.lang.IllegalAccessException from label08 to label16 with label22;
        catch java.lang.IllegalAccessException from label17 to label18 with label22;
        catch java.lang.IllegalAccessException from label19 to label21 with label22;
    }

    protected void <init>()
    {
        gov.nist.core.GenericObject r0;

        r0 := @this: gov.nist.core.GenericObject;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.core.GenericObject: int indentation> = 0;

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = "";

        return;
    }

    protected java.lang.String getIndentation()
    {
        gov.nist.core.GenericObject r0;
        char[] r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: gov.nist.core.GenericObject;

        $i0 = r0.<gov.nist.core.GenericObject: int indentation>;

        r1 = newarray (char)[$i0];

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r1, 32);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    protected void sprint(java.lang.String)
    {
        gov.nist.core.GenericObject r0;
        java.lang.String r1, $r3, $r5, $r7, $r9, $r12, $r13, $r17, $r18, $r20, $r22, $r27, $r28;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.StringBuilder $r2, $r4, $r6, $r8, $r10, $r11, $r14, $r15, $r16, $r19, $r21, $r23, $r24, $r25, $r26;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String getIndentation()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r22;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<null>\n");

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r28;

        return;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>("}");

        if $i0 == 0 goto label2;

        $i6 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>("]");

        if $i6 != 0 goto label3;

     label2:
        $i1 = r0.<gov.nist.core.GenericObject: int indentation>;

        $i2 = $i1 - 1;

        r0.<gov.nist.core.GenericObject: int indentation> = $i2;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String getIndentation()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r12;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = $r17;

        $i3 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>("{");

        if $i3 == 0 goto label4;

        $i7 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>("[");

        if $i7 != 0 goto label5;

     label4:
        $i5 = r0.<gov.nist.core.GenericObject: int indentation>;

        $i4 = $i5 + 1;

        r0.<gov.nist.core.GenericObject: int indentation> = $i4;

     label5:
        return;
    }

    protected void sprint(java.lang.Object)
    {
        gov.nist.core.GenericObject r0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r2);

        return;
    }

    protected void sprint(int)
    {
        gov.nist.core.GenericObject r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(short)
    {
        gov.nist.core.GenericObject r0;
        short s0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        s0 := @parameter0: short;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(s0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(char)
    {
        gov.nist.core.GenericObject r0;
        char c0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(long)
    {
        gov.nist.core.GenericObject r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(boolean)
    {
        gov.nist.core.GenericObject r0;
        boolean z0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(double)
    {
        gov.nist.core.GenericObject r0;
        double d0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void sprint(float)
    {
        gov.nist.core.GenericObject r0;
        float f0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        f0 := @parameter0: float;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(f0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r1);

        return;
    }

    protected void dbgPrint()
    {
        gov.nist.core.GenericObject r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.core.GenericObject;

        $r1 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String debugDump()>();

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>($r1);

        return;
    }

    protected void dbgPrint(java.lang.String)
    {
        gov.nist.core.GenericObject r0;
        java.lang.String r1;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.String;

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>(r1);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        gov.nist.core.GenericObject r0;
        java.lang.Object r1, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        java.lang.Class r2, r3, r8, $r11, $r12;
        java.lang.reflect.Field[] r4, r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i19, $i23;
        java.lang.reflect.Field r6, r7;
        java.lang.String r9, r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        double $d0, $d1;
        byte $b13, $b14, $b16;
        float $f0, $f1;
        char $c15, $c22;
        long $l17, $l18;
        short $s20, $s21;
        java.lang.IllegalAccessException $r21, r22;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        return 0;

     label01:
        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>($r12);

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

     label03:
        r4 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        r5 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = 0;

     label04:
        $i2 = lengthof r4;

        if i0 >= $i2 goto label35;

        r6 = r4[i0];

        r7 = r5[i0];

        i1 = virtualinvoke r6.<java.lang.reflect.Field: int getModifiers()>();

        $i3 = i1 & 2;

        if $i3 != 2 goto label05;

        goto label34;

     label05:
        r8 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Class getType()>();

        r9 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $i5 = virtualinvoke r9.<java.lang.String: int compareTo(java.lang.String)>("stringRepresentation");

        if $i5 != 0 goto label06;

        goto label34;

     label06:
        $i4 = virtualinvoke r9.<java.lang.String: int compareTo(java.lang.String)>("indentation");

        if $i4 != 0 goto label07;

        goto label34;

     label07:
        $z2 = virtualinvoke r8.<java.lang.Class: boolean isPrimitive()>();

        if $z2 == 0 goto label22;

        r10 = virtualinvoke r8.<java.lang.Class: java.lang.String toString()>();

        $i8 = virtualinvoke r10.<java.lang.String: int compareTo(java.lang.String)>("int");

        if $i8 != 0 goto label09;

        $i19 = virtualinvoke r6.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r0);

        $i23 = virtualinvoke r7.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r1);

        if $i19 == $i23 goto label21;

     label08:
        return 0;

     label09:
        $i6 = virtualinvoke r10.<java.lang.String: int compareTo(java.lang.String)>("short");

        if $i6 != 0 goto label11;

        $s21 = virtualinvoke r6.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r0);

        $s20 = virtualinvoke r7.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r1);

        if $s21 == $s20 goto label21;

     label10:
        return 0;

     label11:
        $i7 = virtualinvoke r10.<java.lang.String: int compareTo(java.lang.String)>("char");

        if $i7 != 0 goto label13;

        $c15 = virtualinvoke r6.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r0);

        $c22 = virtualinvoke r7.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r1);

        if $c15 == $c22 goto label21;

     label12:
        return 0;

     label13:
        $i11 = virtualinvoke r10.<java.lang.String: int compareTo(java.lang.String)>("long");

        if $i11 != 0 goto label15;

        $l18 = virtualinvoke r6.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r0);

        $l17 = virtualinvoke r7.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r1);

        $b16 = $l18 cmp $l17;

        if $b16 == 0 goto label21;

     label14:
        return 0;

     label15:
        $i12 = virtualinvoke r10.<java.lang.String: int compareTo(java.lang.String)>("boolean");

        if $i12 != 0 goto label17;

        $z5 = virtualinvoke r6.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r0);

        $z4 = virtualinvoke r7.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r1);

        if $z5 == $z4 goto label21;

     label16:
        return 0;

     label17:
        $i9 = virtualinvoke r10.<java.lang.String: int compareTo(java.lang.String)>("double");

        if $i9 != 0 goto label19;

        $d0 = virtualinvoke r6.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r0);

        $d1 = virtualinvoke r7.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r1);

        $b14 = $d0 cmpl $d1;

        if $b14 == 0 goto label21;

     label18:
        return 0;

     label19:
        $i10 = virtualinvoke r10.<java.lang.String: int compareTo(java.lang.String)>("float");

        if $i10 != 0 goto label21;

        $f1 = virtualinvoke r6.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r0);

        $f0 = virtualinvoke r7.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r1);

        $b13 = $f1 cmpl $f0;

        if $b13 == 0 goto label21;

     label20:
        return 0;

     label21:
        goto label32;

     label22:
        $r13 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        $r16 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r13 != $r16 goto label24;

     label23:
        return 1;

     label24:
        $r17 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r17 != null goto label26;

     label25:
        return 0;

     label26:
        $r14 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        if $r14 != null goto label28;

     label27:
        return 0;

     label28:
        $r15 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        if $r15 != null goto label30;

        $r18 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r18 == null goto label30;

     label29:
        return 0;

     label30:
        $r19 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r20 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        $z3 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>($r20);

        if $z3 != 0 goto label32;

     label31:
        return 0;

     label32:
        goto label34;

     label33:
        $r21 := @caughtexception;

        r22 = $r21;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r22);

     label34:
        i0 = i0 + 1;

        goto label04;

     label35:
        $z1 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "gov/nist/core/GenericObject");

        if $z1 == 0 goto label36;

        goto label37;

     label36:
        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label03;

     label37:
        return 1;

        catch java.lang.IllegalAccessException from label07 to label08 with label33;
        catch java.lang.IllegalAccessException from label09 to label10 with label33;
        catch java.lang.IllegalAccessException from label11 to label12 with label33;
        catch java.lang.IllegalAccessException from label13 to label14 with label33;
        catch java.lang.IllegalAccessException from label15 to label16 with label33;
        catch java.lang.IllegalAccessException from label17 to label18 with label33;
        catch java.lang.IllegalAccessException from label19 to label20 with label33;
        catch java.lang.IllegalAccessException from label21 to label23 with label33;
        catch java.lang.IllegalAccessException from label24 to label25 with label33;
        catch java.lang.IllegalAccessException from label26 to label27 with label33;
        catch java.lang.IllegalAccessException from label28 to label29 with label33;
        catch java.lang.IllegalAccessException from label30 to label31 with label33;
    }

    public boolean match(java.lang.Object)
    {
        gov.nist.core.GenericObject r0, r2, $r17;
        java.lang.Object r1, r12, r24;
        java.lang.Class r3, r5, r9, $r13, $r14, $r15, $r16;
        java.lang.reflect.Field[] r4, r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i19, $i24;
        java.lang.reflect.Field r7, r8;
        java.lang.String r10, r11, $r19, $r20, $r21, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        gov.nist.core.GenericObjectList $r18;
        double $d0, $d1;
        byte $b14, $b15, $b22;
        float $f0, $f1;
        char $c16, $c23;
        short $s17, $s18;
        long $l20, $l21;
        java.lang.IllegalAccessException $r23, r25;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        return 1;

     label01:
        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>($r14);

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = (gov.nist.core.GenericObject) r1;

        r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r6 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = 0;

     label03:
        $i2 = lengthof r4;

        if i0 >= $i2 goto label38;

        r7 = r4[i0];

        r8 = r6[i0];

        i1 = virtualinvoke r7.<java.lang.reflect.Field: int getModifiers()>();

        $i3 = i1 & 2;

        if $i3 != 2 goto label04;

        goto label37;

     label04:
        r9 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.Class getType()>();

        r10 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.String getName()>();

        $i4 = virtualinvoke r10.<java.lang.String: int compareTo(java.lang.String)>("stringRepresentation");

        if $i4 != 0 goto label05;

        goto label37;

     label05:
        $i5 = virtualinvoke r10.<java.lang.String: int compareTo(java.lang.String)>("indentation");

        if $i5 != 0 goto label06;

        goto label37;

     label06:
        $z1 = virtualinvoke r9.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label21;

        r11 = virtualinvoke r9.<java.lang.Class: java.lang.String toString()>();

        $i9 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("int");

        if $i9 != 0 goto label08;

        $i19 = virtualinvoke r7.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r0);

        $i24 = virtualinvoke r8.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r2);

        if $i19 == $i24 goto label20;

     label07:
        return 0;

     label08:
        $i8 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("short");

        if $i8 != 0 goto label10;

        $s17 = virtualinvoke r7.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r0);

        $s18 = virtualinvoke r8.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r2);

        if $s17 == $s18 goto label20;

     label09:
        return 0;

     label10:
        $i7 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("char");

        if $i7 != 0 goto label12;

        $c23 = virtualinvoke r7.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r0);

        $c16 = virtualinvoke r8.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r2);

        if $c23 == $c16 goto label20;

     label11:
        return 0;

     label12:
        $i13 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("long");

        if $i13 != 0 goto label14;

        $l20 = virtualinvoke r7.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r0);

        $l21 = virtualinvoke r8.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r2);

        $b22 = $l20 cmp $l21;

        if $b22 == 0 goto label20;

     label13:
        return 0;

     label14:
        $i12 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("boolean");

        if $i12 != 0 goto label16;

        $z10 = virtualinvoke r7.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r0);

        $z9 = virtualinvoke r8.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r2);

        if $z10 == $z9 goto label20;

     label15:
        return 0;

     label16:
        $i11 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("double");

        if $i11 != 0 goto label18;

        $d0 = virtualinvoke r7.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r0);

        $d1 = virtualinvoke r8.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r2);

        $b15 = $d0 cmpl $d1;

        if $b15 == 0 goto label20;

     label17:
        return 0;

     label18:
        $i10 = virtualinvoke r11.<java.lang.String: int compareTo(java.lang.String)>("float");

        if $i10 != 0 goto label20;

        $f1 = virtualinvoke r7.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r0);

        $f0 = virtualinvoke r8.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r2);

        $b14 = $f1 cmpl $f0;

        if $b14 == 0 goto label20;

     label19:
        return 0;

     label20:
        goto label35;

     label21:
        r24 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        r12 = virtualinvoke r8.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r2);

        if r12 == null goto label23;

        if r24 != null goto label23;

     label22:
        return 0;

     label23:
        if r12 != null goto label25;

        if r24 == null goto label25;

     label24:
        goto label37;

     label25:
        if r12 != null goto label27;

        if r24 != null goto label27;

     label26:
        goto label37;

     label27:
        $z3 = r12 instanceof java.lang.String;

        if $z3 == 0 goto label31;

        $z7 = r24 instanceof java.lang.String;

        if $z7 == 0 goto label31;

        $r19 = (java.lang.String) r12;

        $r20 = virtualinvoke $r19.<java.lang.String: java.lang.String trim()>();

        $z8 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z8 == 0 goto label29;

     label28:
        goto label37;

     label29:
        $r21 = (java.lang.String) r24;

        $r22 = (java.lang.String) r12;

        $i6 = virtualinvoke $r21.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r22);

        if $i6 == 0 goto label35;

     label30:
        return 0;

     label31:
        $r16 = virtualinvoke r24.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = staticinvoke <gov.nist.core.GenericObject: boolean isMySubclass(java.lang.Class)>($r16);

        if $z2 == 0 goto label33;

        $r17 = (gov.nist.core.GenericObject) r24;

        $z6 = virtualinvoke $r17.<gov.nist.core.GenericObject: boolean match(java.lang.Object)>(r12);

        if $z6 != 0 goto label33;

     label32:
        return 0;

     label33:
        $r15 = virtualinvoke r24.<java.lang.Object: java.lang.Class getClass()>();

        $z5 = staticinvoke <gov.nist.core.GenericObjectList: boolean isMySubclass(java.lang.Class)>($r15);

        if $z5 == 0 goto label35;

        $r18 = (gov.nist.core.GenericObjectList) r24;

        $z4 = virtualinvoke $r18.<gov.nist.core.GenericObjectList: boolean match(java.lang.Object)>(r12);

        if $z4 != 0 goto label35;

     label34:
        return 0;

     label35:
        goto label37;

     label36:
        $r23 := @caughtexception;

        r25 = $r23;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r25);

     label37:
        i0 = i0 + 1;

        goto label03;

     label38:
        return 1;

        catch java.lang.IllegalAccessException from label06 to label07 with label36;
        catch java.lang.IllegalAccessException from label08 to label09 with label36;
        catch java.lang.IllegalAccessException from label10 to label11 with label36;
        catch java.lang.IllegalAccessException from label12 to label13 with label36;
        catch java.lang.IllegalAccessException from label14 to label15 with label36;
        catch java.lang.IllegalAccessException from label16 to label17 with label36;
        catch java.lang.IllegalAccessException from label18 to label19 with label36;
        catch java.lang.IllegalAccessException from label20 to label22 with label36;
        catch java.lang.IllegalAccessException from label23 to label24 with label36;
        catch java.lang.IllegalAccessException from label25 to label26 with label36;
        catch java.lang.IllegalAccessException from label27 to label28 with label36;
        catch java.lang.IllegalAccessException from label29 to label30 with label36;
        catch java.lang.IllegalAccessException from label31 to label32 with label36;
        catch java.lang.IllegalAccessException from label33 to label34 with label36;
    }

    public java.lang.String debugDump()
    {
        gov.nist.core.GenericObject r0, $r38;
        java.lang.Class r1, r4, $r13, $r14, $r24;
        java.lang.reflect.Field[] r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.reflect.Field r3;
        java.lang.String r5, r6, $r7, $r8, $r11, $r19, $r21, $r22, $r25, $r28, $r36, $r37, $r39;
        java.lang.StringBuilder $r9, $r10, $r12, $r16, $r17, $r18, $r26, $r30, $r31, $r40, $r41, $r42;
        boolean $z0, $z1, $z2, z3;
        java.lang.Object $r15, $r20, $r23, $r27, $r29, $r33, $r34, $r35;
        gov.nist.core.GenericObjectList $r32;
        java.lang.IllegalAccessException $r43;
        java.lang.Exception $r44, r46;
        short s18;
        char c19;
        long l20;
        double d0;
        float f0;

        r0 := @this: gov.nist.core.GenericObject;

        r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation> = "";

        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r7);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("{");

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = 0;

     label01:
        $i3 = lengthof r2;

        if i0 >= $i3 goto label26;

        r3 = r2[i0];

        i1 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();

        $i4 = i1 & 2;

        if $i4 != 2 goto label02;

        goto label25;

     label02:
        r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        r5 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $i6 = virtualinvoke r5.<java.lang.String: int compareTo(java.lang.String)>("stringRepresentation");

        if $i6 != 0 goto label03;

        goto label25;

     label03:
        $i5 = virtualinvoke r5.<java.lang.String: int compareTo(java.lang.String)>("indentation");

        if $i5 != 0 goto label04;

        goto label25;

     label04:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r11);

     label05:
        $z0 = virtualinvoke r4.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label13;

        r6 = virtualinvoke r4.<java.lang.Class: java.lang.String toString()>();

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r39);

        $i14 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("int");

        if $i14 != 0 goto label06;

        i2 = virtualinvoke r3.<java.lang.reflect.Field: int getInt(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(int)>(i2);

        goto label12;

     label06:
        $i15 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("short");

        if $i15 != 0 goto label07;

        s18 = virtualinvoke r3.<java.lang.reflect.Field: short getShort(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(short)>(s18);

        goto label12;

     label07:
        $i16 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("char");

        if $i16 != 0 goto label08;

        c19 = virtualinvoke r3.<java.lang.reflect.Field: char getChar(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(char)>(c19);

        goto label12;

     label08:
        $i17 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("long");

        if $i17 != 0 goto label09;

        l20 = virtualinvoke r3.<java.lang.reflect.Field: long getLong(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(long)>(l20);

        goto label12;

     label09:
        $i11 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("boolean");

        if $i11 != 0 goto label10;

        z3 = virtualinvoke r3.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(boolean)>(z3);

        goto label12;

     label10:
        $i12 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("double");

        if $i12 != 0 goto label11;

        d0 = virtualinvoke r3.<java.lang.reflect.Field: double getDouble(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(double)>(d0);

        goto label12;

     label11:
        $i13 = virtualinvoke r6.<java.lang.String: int compareTo(java.lang.String)>("float");

        if $i13 != 0 goto label12;

        f0 = virtualinvoke r3.<java.lang.reflect.Field: float getFloat(java.lang.Object)>(r0);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(float)>(f0);

     label12:
        goto label22;

     label13:
        $r13 = class "gov/nist/core/GenericObject";

        $z1 = virtualinvoke $r13.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z1 == 0 goto label15;

        $r35 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r35 == null goto label14;

        $r34 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r38 = (gov.nist.core.GenericObject) $r34;

        $i9 = r0.<gov.nist.core.GenericObject: int indentation>;

        $i10 = $i9 + 1;

        $r37 = virtualinvoke $r38.<gov.nist.core.GenericObject: java.lang.String debugDump(int)>($i10);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r37);

        goto label22;

     label14:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("<null>");

        goto label22;

     label15:
        $r14 = class "gov/nist/core/GenericObjectList";

        $z2 = virtualinvoke $r14.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z2 == 0 goto label17;

        $r29 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r29 == null goto label16;

        $r33 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r32 = (gov.nist.core.GenericObjectList) $r33;

        $i8 = r0.<gov.nist.core.GenericObject: int indentation>;

        $i7 = $i8 + 1;

        $r36 = virtualinvoke $r32.<gov.nist.core.GenericObjectList: java.lang.String debugDump(int)>($i7);

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r36);

        goto label22;

     label16:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("<null>");

        goto label22;

     label17:
        $r15 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r15 == null goto label18;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r27.<java.lang.Object: java.lang.Class getClass()>();

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r28);

        goto label19;

     label18:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r22);

     label19:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("{");

        $r23 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r23 == null goto label20;

        $r20 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r21 = virtualinvoke $r20.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>($r21);

        goto label21;

     label20:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("<null>");

     label21:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("}");

     label22:
        goto label25;

     label23:
        $r43 := @caughtexception;

        goto label25;

     label24:
        $r44 := @caughtexception;

        r46 = $r44;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r46);

     label25:
        i0 = i0 + 1;

        goto label01;

     label26:
        virtualinvoke r0.<gov.nist.core.GenericObject: void sprint(java.lang.String)>("}");

        $r8 = r0.<gov.nist.core.GenericObject: java.lang.String stringRepresentation>;

        return $r8;

        catch java.lang.IllegalAccessException from label05 to label22 with label23;
        catch java.lang.Exception from label05 to label22 with label24;
    }

    public java.lang.String debugDump(int)
    {
        gov.nist.core.GenericObject r0;
        int i0;
        java.lang.String r1;

        r0 := @this: gov.nist.core.GenericObject;

        i0 := @parameter0: int;

        r0.<gov.nist.core.GenericObject: int indentation> = i0;

        r1 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String debugDump()>();

        r0.<gov.nist.core.GenericObject: int indentation> = 0;

        return r1;
    }

    public abstract java.lang.String encode();

    public java.lang.StringBuffer encode(java.lang.StringBuffer)
    {
        gov.nist.core.GenericObject r0;
        java.lang.StringBuffer r1, $r3;
        java.lang.String $r2;

        r0 := @this: gov.nist.core.GenericObject;

        r1 := @parameter0: java.lang.StringBuffer;

        $r2 = virtualinvoke r0.<gov.nist.core.GenericObject: java.lang.String encode()>();

        $r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        int i0, $i1;
        java.util.HashSet $r0;
        java.lang.String[] $r1, $r2, $r6;
        java.lang.StringBuilder $r3, $r5, $r8;
        java.util.Set $r4;
        java.lang.String $r7, $r9;
        java.lang.Class $r10;
        java.lang.ClassNotFoundException $r11, r13;
        java.lang.RuntimeException $r12;

        <gov.nist.core.GenericObject: java.lang.String PERCENT> = "%";

        <gov.nist.core.GenericObject: java.lang.String HT> = "\t";

        <gov.nist.core.GenericObject: java.lang.String QUOTE> = "\'";

        <gov.nist.core.GenericObject: java.lang.String DOUBLE_QUOTE> = "\"";

        <gov.nist.core.GenericObject: java.lang.String RPAREN> = ")";

        <gov.nist.core.GenericObject: java.lang.String LPAREN> = "(";

        <gov.nist.core.GenericObject: java.lang.String AND> = "&";

        <gov.nist.core.GenericObject: java.lang.String POUND> = "#";

        <gov.nist.core.GenericObject: java.lang.String QUESTION> = "?";

        <gov.nist.core.GenericObject: java.lang.String DOT> = ".";

        <gov.nist.core.GenericObject: java.lang.String AT> = "@";

        <gov.nist.core.GenericObject: java.lang.String GREATER_THAN> = ">";

        <gov.nist.core.GenericObject: java.lang.String LESS_THAN> = "<";

        <gov.nist.core.GenericObject: java.lang.String RETURN> = "\n";

        <gov.nist.core.GenericObject: java.lang.String NEWLINE> = "\r\n";

        <gov.nist.core.GenericObject: java.lang.String STAR> = "*";

        <gov.nist.core.GenericObject: java.lang.String EQUALS> = "=";

        <gov.nist.core.GenericObject: java.lang.String SP> = " ";

        <gov.nist.core.GenericObject: java.lang.String SLASH> = "/";

        <gov.nist.core.GenericObject: java.lang.String COMMA> = ",";

        <gov.nist.core.GenericObject: java.lang.String COLON> = ":";

        <gov.nist.core.GenericObject: java.lang.String SEMICOLON> = ";";

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>(int)>(10);

        <gov.nist.core.GenericObject: java.util.Set immutableClasses> = $r0;

        $r1 = newarray (java.lang.String)[9];

        $r1[0] = "String";

        $r1[1] = "Character";

        $r1[2] = "Boolean";

        $r1[3] = "Byte";

        $r1[4] = "Short";

        $r1[5] = "Integer";

        $r1[6] = "Long";

        $r1[7] = "Float";

        $r1[8] = "Double";

        <gov.nist.core.GenericObject: java.lang.String[] immutableClassNames> = $r1;

     label1:
        i0 = 0;

     label2:
        $r2 = <gov.nist.core.GenericObject: java.lang.String[] immutableClassNames>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label3;

        $r4 = <gov.nist.core.GenericObject: java.util.Set immutableClasses>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("java.lang.");

        $r6 = <gov.nist.core.GenericObject: java.lang.String[] immutableClassNames>;

        $r7 = $r6[i0];

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r9);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r10);

        i0 = i0 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        r13 = $r11;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error", r13);

        throw $r12;

     label5:
        return;

        catch java.lang.ClassNotFoundException from label1 to label3 with label4;
    }
}
