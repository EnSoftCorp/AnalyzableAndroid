public class org.apache.http.message.BasicLineParser extends java.lang.Object implements org.apache.http.message.LineParser
{
    public static final org.apache.http.message.BasicLineParser DEFAULT;
    protected final org.apache.http.ProtocolVersion protocol;

    public void <init>(org.apache.http.ProtocolVersion)
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.ProtocolVersion r1;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.ProtocolVersion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        r1 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

     label1:
        r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol> = r1;

        return;
    }

    public void <init>()
    {
        org.apache.http.message.BasicLineParser r0;

        r0 := @this: org.apache.http.message.BasicLineParser;

        specialinvoke r0.<org.apache.http.message.BasicLineParser: void <init>(org.apache.http.ProtocolVersion)>(null);

        return;
    }

    public static final org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        org.apache.http.message.LineParser r1;
        org.apache.http.util.CharArrayBuffer r2, $r4;
        org.apache.http.message.ParserCursor r3, $r5;
        int $i0, $i1;
        org.apache.http.ProtocolVersion $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.http.message.LineParser;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r7;

     label1:
        if r1 != null goto label2;

        r1 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r4 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r4.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        r2 = $r4;

        virtualinvoke r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r5 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r5.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        r3 = $r5;

        $r6 = interfaceinvoke r1.<org.apache.http.message.LineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r2, r3);

        return $r6;
    }

    public org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        java.lang.String r3, $r7, $r8, $r13, $r15, $r17, $r21, $r26, $r28, $r33, $r35, $r37, $r39;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i14, i15, i16, i17, i18;
        boolean z0, $z1, $z2;
        org.apache.http.ProtocolVersion $r6, $r9;
        java.lang.StringBuilder $r10, $r12, $r14, $r16, $r19, $r20, $r22, $r23, $r27, $r29, $r34, $r36, $r38, $r42, $r43;
        org.apache.http.ParseException $r11, $r18, $r24, $r30, $r41;
        char $c11, $c12, $c13;
        java.lang.IllegalArgumentException $r25, $r32;
        java.lang.NumberFormatException $r31, $r40;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 != null goto label01;

        $r32 = new java.lang.IllegalArgumentException;

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r32;

     label01:
        if r2 != null goto label02;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r25;

     label02:
        $r6 = r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        r3 = virtualinvoke $r6.<org.apache.http.ProtocolVersion: java.lang.String getProtocol()>();

        i0 = virtualinvoke r3.<java.lang.String: int length()>();

        i1 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i2 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        i3 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i8 = i3 + i0;

        $i7 = $i8 + 4;

        if $i7 <= i2 goto label03;

        $r24 = new org.apache.http.ParseException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid protocol version: ");

        $r28 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<org.apache.http.ParseException: void <init>(java.lang.String)>($r26);

        throw $r24;

     label03:
        z0 = 1;

        i4 = 0;

     label04:
        if z0 == 0 goto label07;

        if i4 >= i0 goto label07;

        $i14 = i3 + i4;

        $c12 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i14);

        $c13 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i4);

        if $c12 != $c13 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        z0 = $z2;

        i4 = i4 + 1;

        goto label04;

     label07:
        if z0 == 0 goto label10;

        $i10 = i3 + i0;

        $c11 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i10);

        if $c11 != 47 goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        z0 = $z1;

     label10:
        if z0 != 0 goto label11;

        $r18 = new org.apache.http.ParseException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid protocol version: ");

        $r17 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.apache.http.ParseException: void <init>(java.lang.String)>($r21);

        throw $r18;

     label11:
        $i9 = i0 + 1;

        i15 = i3 + $i9;

        i16 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(46, i15, i2);

        if i16 != -1 goto label12;

        $r11 = new org.apache.http.ParseException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol version number: ");

        $r15 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        $r12 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.http.ParseException: void <init>(java.lang.String)>($r13);

        throw $r11;

     label12:
        $r7 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i15, i16);

        i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

     label13:
        goto label15;

     label14:
        $r31 := @caughtexception;

        $r30 = new org.apache.http.ParseException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol major version number: ");

        $r35 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        $r34 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<org.apache.http.ParseException: void <init>(java.lang.String)>($r33);

        throw $r30;

     label15:
        i17 = i16 + 1;

        i18 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, i17, i2);

        if i18 != -1 goto label16;

        i18 = i2;

     label16:
        $r8 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i17, i18);

        i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

     label17:
        goto label19;

     label18:
        $r40 := @caughtexception;

        $r41 = new org.apache.http.ParseException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol minor version number: ");

        $r37 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i1, i2);

        $r38 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<org.apache.http.ParseException: void <init>(java.lang.String)>($r39);

        throw $r41;

     label19:
        virtualinvoke r2.<org.apache.http.message.ParserCursor: void updatePos(int)>(i18);

        $r9 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion createProtocolVersion(int,int)>(i5, i6);

        return $r9;

        catch java.lang.NumberFormatException from label12 to label13 with label14;
        catch java.lang.NumberFormatException from label16 to label17 with label18;
    }

    protected org.apache.http.ProtocolVersion createProtocolVersion(int, int)
    {
        org.apache.http.message.BasicLineParser r0;
        int i0, i1;
        org.apache.http.ProtocolVersion $r1, $r2;

        r0 := @this: org.apache.http.message.BasicLineParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        $r2 = virtualinvoke $r1.<org.apache.http.ProtocolVersion: org.apache.http.ProtocolVersion forVersion(int,int)>(i0, i1);

        return $r2;
    }

    public boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i14, $i15, $i16;
        java.lang.String r3;
        boolean z0, $z1, $z2, $z3;
        org.apache.http.ProtocolVersion $r4;
        char $c9, $c10, $c12, $c13;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 != null goto label01;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r6;

     label01:
        if r2 != null goto label02;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r5;

     label02:
        i0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $r4 = r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        r3 = virtualinvoke $r4.<org.apache.http.ProtocolVersion: java.lang.String getProtocol()>();

        i1 = virtualinvoke r3.<java.lang.String: int length()>();

        $i3 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i4 = i1 + 4;

        if $i3 >= $i4 goto label03;

        return 0;

     label03:
        if i0 >= 0 goto label04;

        $i15 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i16 = $i15 - 4;

        i0 = $i16 - i1;

        goto label06;

     label04:
        if i0 != 0 goto label06;

     label05:
        $i14 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        if i0 >= $i14 goto label06;

        $c13 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i0);

        $z3 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c13);

        if $z3 == 0 goto label06;

        i0 = i0 + 1;

        goto label05;

     label06:
        $i5 = i0 + i1;

        $i6 = $i5 + 4;

        $i8 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        if $i6 <= $i8 goto label07;

        return 0;

     label07:
        z0 = 1;

        i2 = 0;

     label08:
        if z0 == 0 goto label11;

        if i2 >= i1 goto label11;

        $i11 = i0 + i2;

        $c10 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i11);

        $c12 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i2);

        if $c10 != $c12 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        z0 = $z2;

        i2 = i2 + 1;

        goto label08;

     label11:
        if z0 == 0 goto label14;

        $i7 = i0 + i1;

        $c9 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i7);

        if $c9 != 47 goto label12;

        $z1 = 1;

        goto label13;

     label12:
        $z1 = 0;

     label13:
        z0 = $z1;

     label14:
        return z0;
    }

    public static final org.apache.http.RequestLine parseRequestLine(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        org.apache.http.message.LineParser r1;
        org.apache.http.util.CharArrayBuffer r2, $r4;
        org.apache.http.message.ParserCursor r3, $r5;
        int $i0, $i1;
        org.apache.http.RequestLine $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.http.message.LineParser;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r7;

     label1:
        if r1 != null goto label2;

        r1 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r4 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r4.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        r2 = $r4;

        virtualinvoke r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r5 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r5.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        r3 = $r5;

        $r6 = interfaceinvoke r1.<org.apache.http.message.LineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r2, r3);

        return $r6;
    }

    public org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        int i0, i1, i2, i3, i4, i5;
        java.lang.String r3, r4, $r11, $r13, $r17, $r20, $r22, $r24, $r31, $r33;
        org.apache.http.ProtocolVersion r5;
        boolean $z0;
        org.apache.http.ParseException $r6, $r12, $r21, $r26;
        org.apache.http.RequestLine $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r14, $r15, $r16, $r18, $r19, $r25, $r27, $r30, $r32;
        java.lang.IllegalArgumentException $r23, $r28;
        java.lang.IndexOutOfBoundsException $r29;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 != null goto label1;

        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r28;

     label1:
        if r2 != null goto label2;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r23;

     label2:
        i0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i1 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label3:
        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        i2 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i3 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, i2, i1);

        if i3 >= 0 goto label4;

        $r21 = new org.apache.http.ParseException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r24 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        $r25 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r22 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.http.ParseException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label4:
        r3 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i2, i3);

        virtualinvoke r2.<org.apache.http.message.ParserCursor: void updatePos(int)>(i3);

        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        i4 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i5 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, i4, i1);

        if i5 >= 0 goto label5;

        $r12 = new org.apache.http.ParseException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r17 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.http.ParseException: void <init>(java.lang.String)>($r20);

        throw $r12;

     label5:
        r4 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i4, i5);

        virtualinvoke r2.<org.apache.http.message.ParserCursor: void updatePos(int)>(i5);

        r5 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        $z0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label6;

        $r6 = new org.apache.http.ParseException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r11 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.http.ParseException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label6:
        $r7 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine createRequestLine(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>(r3, r4, r5);

     label7:
        return $r7;

     label8:
        $r29 := @caughtexception;

        $r26 = new org.apache.http.ParseException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r33 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<org.apache.http.ParseException: void <init>(java.lang.String)>($r31);

        throw $r26;

        catch java.lang.IndexOutOfBoundsException from label3 to label7 with label8;
    }

    protected org.apache.http.RequestLine createRequestLine(java.lang.String, java.lang.String, org.apache.http.ProtocolVersion)
    {
        org.apache.http.message.BasicLineParser r0;
        java.lang.String r1, r2;
        org.apache.http.ProtocolVersion r3;
        org.apache.http.message.BasicRequestLine $r4;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.http.ProtocolVersion;

        $r4 = new org.apache.http.message.BasicRequestLine;

        specialinvoke $r4.<org.apache.http.message.BasicRequestLine: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>(r1, r2, r3);

        return $r4;
    }

    public static final org.apache.http.StatusLine parseStatusLine(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        org.apache.http.message.LineParser r1;
        org.apache.http.util.CharArrayBuffer r2, $r4;
        org.apache.http.message.ParserCursor r3, $r5;
        int $i0, $i1;
        org.apache.http.StatusLine $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.http.message.LineParser;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r7;

     label1:
        if r1 != null goto label2;

        r1 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r4 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r4.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        r2 = $r4;

        virtualinvoke r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r5 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r5.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        r3 = $r5;

        $r6 = interfaceinvoke r1.<org.apache.http.message.LineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r2, r3);

        return $r6;
    }

    public org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        int i0, i1, i2, i3, i4, i5;
        org.apache.http.ProtocolVersion r3;
        java.lang.String $r4, $r11, $r13, $r19, $r20, r22;
        org.apache.http.StatusLine $r5;
        java.lang.IllegalArgumentException $r6, $r8;
        java.lang.IndexOutOfBoundsException $r7;
        java.lang.StringBuilder $r9, $r12, $r14, $r17, $r18, $r21;
        org.apache.http.ParseException $r10, $r15;
        java.lang.NumberFormatException $r16;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        if r1 != null goto label01;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r8;

     label01:
        if r2 != null goto label02;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r6;

     label02:
        i0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i1 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label03:
        r3 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        virtualinvoke r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r1, r2);

        i2 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i3 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, i2, i1);

        if i3 >= 0 goto label04;

        i3 = i1;

     label04:
        $r4 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i2, i3);

        i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label05:
        goto label07;

     label06:
        $r16 := @caughtexception;

        $r15 = new org.apache.http.ParseException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse status code from status line: ");

        $r20 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.http.ParseException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label07:
        i5 = i3;

        if i5 >= i1 goto label08;

        r22 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i5, i1);

        goto label09;

     label08:
        r22 = "";

     label09:
        $r5 = virtualinvoke r0.<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)>(r3, i4, r22);

     label10:
        return $r5;

     label11:
        $r7 := @caughtexception;

        $r10 = new org.apache.http.ParseException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid status line: ");

        $r11 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>(i0, i1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.http.ParseException: void <init>(java.lang.String)>($r13);

        throw $r10;

        catch java.lang.NumberFormatException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label03 to label10 with label11;
    }

    protected org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion, int, java.lang.String)
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.ProtocolVersion r1;
        int i0;
        java.lang.String r2;
        org.apache.http.message.BasicStatusLine $r3;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.ProtocolVersion;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = new org.apache.http.message.BasicStatusLine;

        specialinvoke $r3.<org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>(r1, i0, r2);

        return $r3;
    }

    public static final org.apache.http.Header parseHeader(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String r0;
        org.apache.http.message.LineParser r1;
        org.apache.http.util.CharArrayBuffer r2, $r3;
        int $i0;
        org.apache.http.Header $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.http.message.LineParser;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r5;

     label1:
        if r1 != null goto label2;

        r1 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r3 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r3.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        r2 = $r3;

        virtualinvoke r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r4 = interfaceinvoke r1.<org.apache.http.message.LineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)>(r2);

        return $r4;
    }

    public org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.BufferedHeader $r2;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r2 = new org.apache.http.message.BufferedHeader;

        specialinvoke $r2.<org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)>(r1);

        return $r2;
    }

    protected void skipWhitespace(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.ParserCursor r2;
        int i0, i1;
        char $c2;
        boolean $z0;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.message.ParserCursor;

        i0 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getPos()>();

        i1 = virtualinvoke r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label1:
        if i0 >= i1 goto label2;

        $c2 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i0);

        $z0 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c2);

        if $z0 == 0 goto label2;

        i0 = i0 + 1;

        goto label1;

     label2:
        virtualinvoke r2.<org.apache.http.message.ParserCursor: void updatePos(int)>(i0);

        return;
    }

    static void <clinit>()
    {
        org.apache.http.message.BasicLineParser $r0;

        $r0 = new org.apache.http.message.BasicLineParser;

        specialinvoke $r0.<org.apache.http.message.BasicLineParser: void <init>()>();

        <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT> = $r0;

        return;
    }
}
