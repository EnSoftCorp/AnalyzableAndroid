public abstract class org.apache.http.impl.conn.AbstractPoolEntry extends java.lang.Object
{
    protected final org.apache.http.conn.ClientConnectionOperator connOperator;
    protected final org.apache.http.conn.OperatedClientConnection connection;
    protected volatile org.apache.http.conn.routing.HttpRoute route;
    protected volatile java.lang.Object state;
    protected volatile org.apache.http.conn.routing.RouteTracker tracker;

    protected void <init>(org.apache.http.conn.ClientConnectionOperator, org.apache.http.conn.routing.HttpRoute)
    {
        org.apache.http.impl.conn.AbstractPoolEntry r0;
        org.apache.http.conn.ClientConnectionOperator r1;
        org.apache.http.conn.routing.HttpRoute r2;
        org.apache.http.conn.OperatedClientConnection $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.http.impl.conn.AbstractPoolEntry;

        r1 := @parameter0: org.apache.http.conn.ClientConnectionOperator;

        r2 := @parameter1: org.apache.http.conn.routing.HttpRoute;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection operator may not be null");

        throw $r4;

     label1:
        r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.ClientConnectionOperator connOperator> = r1;

        $r3 = interfaceinvoke r1.<org.apache.http.conn.ClientConnectionOperator: org.apache.http.conn.OperatedClientConnection createConnection()>();

        r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.OperatedClientConnection connection> = $r3;

        r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.HttpRoute route> = r2;

        r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker> = null;

        return;
    }

    public java.lang.Object getState()
    {
        org.apache.http.impl.conn.AbstractPoolEntry r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.http.impl.conn.AbstractPoolEntry;

        $r1 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: java.lang.Object state>;

        return $r1;
    }

    public void setState(java.lang.Object)
    {
        org.apache.http.impl.conn.AbstractPoolEntry r0;
        java.lang.Object r1;

        r0 := @this: org.apache.http.impl.conn.AbstractPoolEntry;

        r1 := @parameter0: java.lang.Object;

        r0.<org.apache.http.impl.conn.AbstractPoolEntry: java.lang.Object state> = r1;

        return;
    }

    public void open(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.conn.AbstractPoolEntry r0;
        org.apache.http.conn.routing.HttpRoute r1;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.params.HttpParams r3;
        org.apache.http.HttpHost r4, $r10;
        org.apache.http.conn.routing.RouteTracker r5, $r6, $r7, $r15;
        org.apache.http.conn.ClientConnectionOperator $r8;
        org.apache.http.conn.OperatedClientConnection $r9, $r12, $r13;
        java.net.InetAddress $r11;
        boolean $z0, $z1, $z2;
        java.io.IOException $r14;
        java.lang.IllegalArgumentException $r16, $r18;
        java.lang.IllegalStateException $r17;

        r0 := @this: org.apache.http.impl.conn.AbstractPoolEntry;

        r1 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        r2 := @parameter1: org.apache.http.protocol.HttpContext;

        r3 := @parameter2: org.apache.http.params.HttpParams;

        if r1 != null goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Route must not be null.");

        throw $r18;

     label1:
        if r3 != null goto label2;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters must not be null.");

        throw $r16;

     label2:
        $r6 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        if $r6 == null goto label3;

        $r15 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        $z2 = virtualinvoke $r15.<org.apache.http.conn.routing.RouteTracker: boolean isConnected()>();

        if $z2 == 0 goto label3;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection already open.");

        throw $r17;

     label3:
        $r7 = new org.apache.http.conn.routing.RouteTracker;

        specialinvoke $r7.<org.apache.http.conn.routing.RouteTracker: void <init>(org.apache.http.conn.routing.HttpRoute)>(r1);

        r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker> = $r7;

        r4 = virtualinvoke r1.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getProxyHost()>();

        $r8 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.ClientConnectionOperator connOperator>;

        $r9 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.OperatedClientConnection connection>;

        if r4 == null goto label4;

        $r10 = r4;

        goto label5;

     label4:
        $r10 = virtualinvoke r1.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getTargetHost()>();

     label5:
        $r11 = virtualinvoke r1.<org.apache.http.conn.routing.HttpRoute: java.net.InetAddress getLocalAddress()>();

        interfaceinvoke $r8.<org.apache.http.conn.ClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>($r9, $r10, $r11, r2, r3);

        r5 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        if r5 != null goto label6;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Request aborted");

        throw $r14;

     label6:
        if r4 != null goto label7;

        $r13 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.OperatedClientConnection connection>;

        $z1 = interfaceinvoke $r13.<org.apache.http.conn.OperatedClientConnection: boolean isSecure()>();

        virtualinvoke r5.<org.apache.http.conn.routing.RouteTracker: void connectTarget(boolean)>($z1);

        goto label8;

     label7:
        $r12 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.OperatedClientConnection connection>;

        $z0 = interfaceinvoke $r12.<org.apache.http.conn.OperatedClientConnection: boolean isSecure()>();

        virtualinvoke r5.<org.apache.http.conn.routing.RouteTracker: void connectProxy(org.apache.http.HttpHost,boolean)>(r4, $z0);

     label8:
        return;
    }

    public void tunnelTarget(boolean, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.conn.AbstractPoolEntry r0;
        boolean z0, $z1, $z2;
        org.apache.http.params.HttpParams r1;
        org.apache.http.conn.routing.RouteTracker $r2, $r4, $r5, $r6, $r9;
        java.lang.IllegalStateException $r3, $r10;
        org.apache.http.conn.OperatedClientConnection $r7;
        org.apache.http.HttpHost $r8;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: org.apache.http.impl.conn.AbstractPoolEntry;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.http.params.HttpParams;

        if r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters must not be null.");

        throw $r11;

     label1:
        $r2 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        if $r2 == null goto label2;

        $r4 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        $z1 = virtualinvoke $r4.<org.apache.http.conn.routing.RouteTracker: boolean isConnected()>();

        if $z1 != 0 goto label3;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection not open.");

        throw $r3;

     label3:
        $r5 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        $z2 = virtualinvoke $r5.<org.apache.http.conn.routing.RouteTracker: boolean isTunnelled()>();

        if $z2 == 0 goto label4;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is already tunnelled.");

        throw $r10;

     label4:
        $r7 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.OperatedClientConnection connection>;

        $r6 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        $r8 = virtualinvoke $r6.<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getTargetHost()>();

        interfaceinvoke $r7.<org.apache.http.conn.OperatedClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>(null, $r8, z0, r1);

        $r9 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        virtualinvoke $r9.<org.apache.http.conn.routing.RouteTracker: void tunnelTarget(boolean)>(z0);

        return;
    }

    public void tunnelProxy(org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.conn.AbstractPoolEntry r0;
        org.apache.http.HttpHost r1;
        boolean z0, $z1;
        org.apache.http.params.HttpParams r2;
        org.apache.http.conn.routing.RouteTracker $r3, $r5, $r7;
        java.lang.IllegalStateException $r4;
        org.apache.http.conn.OperatedClientConnection $r6;
        java.lang.IllegalArgumentException $r8, $r9;

        r0 := @this: org.apache.http.impl.conn.AbstractPoolEntry;

        r1 := @parameter0: org.apache.http.HttpHost;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.http.params.HttpParams;

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Next proxy must not be null.");

        throw $r9;

     label1:
        if r2 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters must not be null.");

        throw $r8;

     label2:
        $r3 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        if $r3 == null goto label3;

        $r5 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        $z1 = virtualinvoke $r5.<org.apache.http.conn.routing.RouteTracker: boolean isConnected()>();

        if $z1 != 0 goto label4;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection not open.");

        throw $r4;

     label4:
        $r6 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.OperatedClientConnection connection>;

        interfaceinvoke $r6.<org.apache.http.conn.OperatedClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>(null, r1, z0, r2);

        $r7 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        virtualinvoke $r7.<org.apache.http.conn.routing.RouteTracker: void tunnelProxy(org.apache.http.HttpHost,boolean)>(r1, z0);

        return;
    }

    public void layerProtocol(org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.conn.AbstractPoolEntry r0;
        org.apache.http.protocol.HttpContext r1;
        org.apache.http.params.HttpParams r2;
        org.apache.http.HttpHost r3;
        org.apache.http.conn.routing.RouteTracker $r4, $r6, $r7, $r8, $r9, $r12;
        java.lang.IllegalStateException $r5, $r14, $r16;
        boolean $z0, $z1, $z2, $z3;
        org.apache.http.conn.OperatedClientConnection $r10, $r13;
        org.apache.http.conn.ClientConnectionOperator $r11;
        java.lang.IllegalArgumentException $r15;

        r0 := @this: org.apache.http.impl.conn.AbstractPoolEntry;

        r1 := @parameter0: org.apache.http.protocol.HttpContext;

        r2 := @parameter1: org.apache.http.params.HttpParams;

        if r2 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters must not be null.");

        throw $r15;

     label1:
        $r4 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        if $r4 == null goto label2;

        $r6 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        $z0 = virtualinvoke $r6.<org.apache.http.conn.routing.RouteTracker: boolean isConnected()>();

        if $z0 != 0 goto label3;

     label2:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection not open.");

        throw $r5;

     label3:
        $r7 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        $z1 = virtualinvoke $r7.<org.apache.http.conn.routing.RouteTracker: boolean isTunnelled()>();

        if $z1 != 0 goto label4;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Protocol layering without a tunnel not supported.");

        throw $r16;

     label4:
        $r8 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        $z2 = virtualinvoke $r8.<org.apache.http.conn.routing.RouteTracker: boolean isLayered()>();

        if $z2 == 0 goto label5;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Multiple protocol layering not supported.");

        throw $r14;

     label5:
        $r9 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        r3 = virtualinvoke $r9.<org.apache.http.conn.routing.RouteTracker: org.apache.http.HttpHost getTargetHost()>();

        $r11 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.ClientConnectionOperator connOperator>;

        $r10 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.OperatedClientConnection connection>;

        interfaceinvoke $r11.<org.apache.http.conn.ClientConnectionOperator: void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>($r10, r3, r1, r2);

        $r12 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker>;

        $r13 = r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.OperatedClientConnection connection>;

        $z3 = interfaceinvoke $r13.<org.apache.http.conn.OperatedClientConnection: boolean isSecure()>();

        virtualinvoke $r12.<org.apache.http.conn.routing.RouteTracker: void layerProtocol(boolean)>($z3);

        return;
    }

    protected void shutdownEntry()
    {
        org.apache.http.impl.conn.AbstractPoolEntry r0;

        r0 := @this: org.apache.http.impl.conn.AbstractPoolEntry;

        r0.<org.apache.http.impl.conn.AbstractPoolEntry: org.apache.http.conn.routing.RouteTracker tracker> = null;

        return;
    }
}
