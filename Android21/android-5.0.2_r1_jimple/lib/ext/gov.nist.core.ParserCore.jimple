public abstract class gov.nist.core.ParserCore extends java.lang.Object
{
    public static final boolean debug;
    static int nesting_level;
    protected gov.nist.core.LexerCore lexer;

    public void <init>()
    {
        gov.nist.core.ParserCore r0;

        r0 := @this: gov.nist.core.ParserCore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected gov.nist.core.NameValue nameValue(char) throws java.text.ParseException
    {
        gov.nist.core.ParserCore r0;
        char c0, c1, $c2;
        gov.nist.core.Token r1, r2;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        gov.nist.core.NameValue r3, $r10, $r16, $r19, r24, r25, r26;
        java.lang.Throwable r4, $r21;
        gov.nist.core.LexerCore $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r20;
        java.lang.String $r9, $r17, $r22, r23;
        java.text.ParseException $r18;

        r0 := @this: gov.nist.core.ParserCore;

        c0 := @parameter0: char;

        $z2 = <gov.nist.core.ParserCore: boolean debug>;

        if $z2 == 0 goto label01;

        virtualinvoke r0.<gov.nist.core.ParserCore: void dbg_enter(java.lang.String)>("nameValue");

     label01:
        $r5 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r5.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r6 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        r1 = virtualinvoke $r6.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r7 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: void SPorHT()>();

     label02:
        z0 = 0;

        $r8 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        c1 = virtualinvoke $r8.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if c1 != c0 goto label08;

        $r11 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r11.<gov.nist.core.LexerCore: void consume(int)>(1);

        $r13 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r13.<gov.nist.core.LexerCore: void SPorHT()>();

        z1 = 0;

        $r12 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r12.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c2 != 34 goto label03;

        $r20 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        r23 = virtualinvoke $r20.<gov.nist.core.LexerCore: java.lang.String quotedString()>();

        z0 = 1;

        goto label04;

     label03:
        $r14 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r14.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r15 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        r2 = virtualinvoke $r15.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        r23 = r2.<gov.nist.core.Token: java.lang.String tokenValue>;

        if r23 != null goto label04;

        r23 = "";

        z1 = 1;

     label04:
        $r16 = new gov.nist.core.NameValue;

        $r17 = r1.<gov.nist.core.Token: java.lang.String tokenValue>;

        specialinvoke $r16.<gov.nist.core.NameValue: void <init>(java.lang.String,java.lang.Object,boolean)>($r17, r23, z1);

        r24 = $r16;

        if z0 == 0 goto label05;

        virtualinvoke r24.<gov.nist.core.NameValue: void setQuotedValue()>();

     label05:
        r3 = r24;

     label06:
        $z4 = <gov.nist.core.ParserCore: boolean debug>;

        if $z4 == 0 goto label07;

        virtualinvoke r0.<gov.nist.core.ParserCore: void dbg_leave(java.lang.String)>("nameValue");

     label07:
        return r3;

     label08:
        $r10 = new gov.nist.core.NameValue;

        $r9 = r1.<gov.nist.core.Token: java.lang.String tokenValue>;

        specialinvoke $r10.<gov.nist.core.NameValue: void <init>(java.lang.String,java.lang.Object,boolean)>($r9, "", 1);

        r25 = $r10;

     label09:
        $z3 = <gov.nist.core.ParserCore: boolean debug>;

        if $z3 == 0 goto label10;

        virtualinvoke r0.<gov.nist.core.ParserCore: void dbg_leave(java.lang.String)>("nameValue");

     label10:
        return r25;

     label11:
        $r18 := @caughtexception;

        $r19 = new gov.nist.core.NameValue;

        $r22 = r1.<gov.nist.core.Token: java.lang.String tokenValue>;

        specialinvoke $r19.<gov.nist.core.NameValue: void <init>(java.lang.String,java.lang.Object,boolean)>($r22, null, 0);

        r26 = $r19;

     label12:
        $z6 = <gov.nist.core.ParserCore: boolean debug>;

        if $z6 == 0 goto label13;

        virtualinvoke r0.<gov.nist.core.ParserCore: void dbg_leave(java.lang.String)>("nameValue");

     label13:
        return r26;

     label14:
        $r21 := @caughtexception;

        r4 = $r21;

     label15:
        $z5 = <gov.nist.core.ParserCore: boolean debug>;

        if $z5 == 0 goto label16;

        virtualinvoke r0.<gov.nist.core.ParserCore: void dbg_leave(java.lang.String)>("nameValue");

     label16:
        throw r4;

        catch java.text.ParseException from label02 to label06 with label11;
        catch java.text.ParseException from label08 to label09 with label11;
        catch java.lang.Throwable from label01 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    protected void dbg_enter(java.lang.String)
    {
        gov.nist.core.ParserCore r0;
        java.lang.String r1, $r10, $r11;
        java.lang.StringBuffer r2, $r3;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r12;
        java.io.PrintStream $r5;
        gov.nist.core.LexerCore $r9;

        r0 := @this: gov.nist.core.ParserCore;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        r2 = $r3;

        i0 = 0;

     label1:
        $i1 = <gov.nist.core.ParserCore: int nesting_level>;

        if i0 >= $i1 goto label2;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        i0 = i0 + 1;

        goto label1;

     label2:
        $z0 = <gov.nist.core.ParserCore: boolean debug>;

        if $z0 == 0 goto label3;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nlexer buffer = \n");

        $r9 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        $r10 = virtualinvoke $r9.<gov.nist.core.LexerCore: java.lang.String getRest()>();

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label3:
        $i2 = <gov.nist.core.ParserCore: int nesting_level>;

        $i3 = $i2 + 1;

        <gov.nist.core.ParserCore: int nesting_level> = $i3;

        return;
    }

    protected void dbg_leave(java.lang.String)
    {
        gov.nist.core.ParserCore r0;
        java.lang.String r1, $r10, $r11;
        java.lang.StringBuffer r2, $r3;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r12;
        java.io.PrintStream $r5;
        gov.nist.core.LexerCore $r9;

        r0 := @this: gov.nist.core.ParserCore;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        r2 = $r3;

        i0 = 0;

     label1:
        $i1 = <gov.nist.core.ParserCore: int nesting_level>;

        if i0 >= $i1 goto label2;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<");

        i0 = i0 + 1;

        goto label1;

     label2:
        $z0 = <gov.nist.core.ParserCore: boolean debug>;

        if $z0 == 0 goto label3;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nlexer buffer = \n");

        $r9 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        $r10 = virtualinvoke $r9.<gov.nist.core.LexerCore: java.lang.String getRest()>();

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label3:
        $i2 = <gov.nist.core.ParserCore: int nesting_level>;

        $i3 = $i2 - 1;

        <gov.nist.core.ParserCore: int nesting_level> = $i3;

        return;
    }

    protected gov.nist.core.NameValue nameValue() throws java.text.ParseException
    {
        gov.nist.core.ParserCore r0;
        gov.nist.core.NameValue $r1;

        r0 := @this: gov.nist.core.ParserCore;

        $r1 = virtualinvoke r0.<gov.nist.core.ParserCore: gov.nist.core.NameValue nameValue(char)>(61);

        return $r1;
    }

    protected void peekLine(java.lang.String)
    {
        gov.nist.core.ParserCore r0;
        java.lang.String r1, $r6, $r8;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3, $r4, $r7;
        gov.nist.core.LexerCore $r5;

        r0 := @this: gov.nist.core.ParserCore;

        r1 := @parameter0: java.lang.String;

        $z0 = <gov.nist.core.ParserCore: boolean debug>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = r0.<gov.nist.core.ParserCore: gov.nist.core.LexerCore lexer>;

        $r6 = virtualinvoke $r5.<gov.nist.core.LexerCore: java.lang.String peekLine()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <gov.nist.core.Debug: void println(java.lang.String)>($r8);

     label1:
        return;
    }

    static void <clinit>()
    {
        boolean $z0;

        $z0 = <gov.nist.core.Debug: boolean parserDebug>;

        <gov.nist.core.ParserCore: boolean debug> = $z0;

        return;
    }
}
