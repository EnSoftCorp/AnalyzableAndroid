public class org.apache.commons.logging.LogSource extends java.lang.Object
{
    protected static java.util.Hashtable logs;
    protected static boolean log4jIsAvailable;
    protected static boolean jdk14IsAvailable;
    protected static java.lang.reflect.Constructor logImplctor;

    private void <init>()
    {
        org.apache.commons.logging.LogSource r0;

        r0 := @this: org.apache.commons.logging.LogSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setLogImplementation(java.lang.String) throws java.lang.LinkageError, java.lang.ExceptionInInitializerError, java.lang.NoSuchMethodException, java.lang.SecurityException, java.lang.ClassNotFoundException
    {
        java.lang.String r0, $r3;
        java.lang.Class r1, $r4;
        java.lang.Class[] r2;
        java.lang.reflect.Constructor $r5;
        java.lang.Throwable $r6;

        r0 := @parameter0: java.lang.String;

     label1:
        r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        r2 = newarray (java.lang.Class)[1];

        $r3 = "";

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        r2[0] = $r4;

        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r2);

        <org.apache.commons.logging.LogSource: java.lang.reflect.Constructor logImplctor> = $r5;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        <org.apache.commons.logging.LogSource: java.lang.reflect.Constructor logImplctor> = null;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void setLogImplementation(java.lang.Class) throws java.lang.LinkageError, java.lang.ExceptionInInitializerError, java.lang.NoSuchMethodException, java.lang.SecurityException
    {
        java.lang.Class r0, $r3;
        java.lang.Class[] r1;
        java.lang.String $r2;
        java.lang.reflect.Constructor $r4;

        r0 := @parameter0: java.lang.Class;

        r1 = newarray (java.lang.Class)[1];

        $r2 = "";

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        r1[0] = $r3;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r1);

        <org.apache.commons.logging.LogSource: java.lang.reflect.Constructor logImplctor> = $r4;

        return;
    }

    public static org.apache.commons.logging.Log getInstance(java.lang.String)
    {
        java.lang.String r0;
        org.apache.commons.logging.Log r1, $r4;
        java.util.Hashtable $r2, $r5;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.logging.LogSource: java.util.Hashtable logs>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (org.apache.commons.logging.Log) $r3;

        r1 = (org.apache.commons.logging.Log) $r4;

        if null != r1 goto label1;

        r1 = staticinvoke <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log makeNewLogInstance(java.lang.String)>(r0);

        $r5 = <org.apache.commons.logging.LogSource: java.util.Hashtable logs>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

     label1:
        return r1;
    }

    public static org.apache.commons.logging.Log getInstance(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogSource: org.apache.commons.logging.Log getInstance(java.lang.String)>($r1);

        return $r2;
    }

    public static org.apache.commons.logging.Log makeNewLogInstance(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Object[] r1;
        java.lang.reflect.Constructor $r2;
        java.lang.Object $r3;
        org.apache.commons.logging.Log $r4, r7;
        org.apache.commons.logging.impl.NoOpLog $r5;
        java.lang.Throwable $r6;

        r0 := @parameter0: java.lang.String;

     label1:
        r1 = newarray (java.lang.Object)[1];

        r1[0] = r0;

        $r2 = <org.apache.commons.logging.LogSource: java.lang.reflect.Constructor logImplctor>;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r1);

        $r4 = (org.apache.commons.logging.Log) $r3;

        r7 = (org.apache.commons.logging.Log) $r4;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r7 = null;

     label4:
        if null != r7 goto label5;

        $r5 = new org.apache.commons.logging.impl.NoOpLog;

        specialinvoke $r5.<org.apache.commons.logging.impl.NoOpLog: void <init>(java.lang.String)>(r0);

        r7 = $r5;

     label5:
        return r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.String[] getLogNames()
    {
        java.util.Hashtable $r0, $r2;
        java.util.Set $r1;
        int $i0;
        java.lang.String[] $r3, $r5, $r6;
        java.lang.Object[] $r4;

        $r0 = <org.apache.commons.logging.LogSource: java.util.Hashtable logs>;

        $r1 = virtualinvoke $r0.<java.util.Hashtable: java.util.Set keySet()>();

        $r2 = <org.apache.commons.logging.LogSource: java.util.Hashtable logs>;

        $i0 = virtualinvoke $r2.<java.util.Hashtable: int size()>();

        $r3 = newarray (java.lang.String)[$i0];

        $r4 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        $r6 = (java.lang.String[]) $r5;

        return $r6;
    }

    static void <clinit>()
    {
        java.util.Hashtable $r3;
        java.lang.Class $r4, $r5, $r6;
        boolean $z0, $z1;
        java.lang.Throwable $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.String r15;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        <org.apache.commons.logging.LogSource: java.util.Hashtable logs> = $r3;

        <org.apache.commons.logging.LogSource: boolean log4jIsAvailable> = 0;

        <org.apache.commons.logging.LogSource: boolean jdk14IsAvailable> = 0;

        <org.apache.commons.logging.LogSource: java.lang.reflect.Constructor logImplctor> = null;

     label01:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.log4j.Logger");

        if null == $r4 goto label02;

        <org.apache.commons.logging.LogSource: boolean log4jIsAvailable> = 1;

        goto label03;

     label02:
        <org.apache.commons.logging.LogSource: boolean log4jIsAvailable> = 0;

     label03:
        goto label05;

     label04:
        $r12 := @caughtexception;

        <org.apache.commons.logging.LogSource: boolean log4jIsAvailable> = 0;

     label05:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.util.logging.Logger");

        if null == $r5 goto label06;

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.commons.logging.impl.Jdk14Logger");

        if null == $r6 goto label06;

        <org.apache.commons.logging.LogSource: boolean jdk14IsAvailable> = 1;

        goto label07;

     label06:
        <org.apache.commons.logging.LogSource: boolean jdk14IsAvailable> = 0;

     label07:
        goto label09;

     label08:
        $r11 := @caughtexception;

        <org.apache.commons.logging.LogSource: boolean jdk14IsAvailable> = 0;

     label09:
        r15 = null;

     label10:
        r15 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.log");

        if r15 != null goto label11;

        r15 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.Log");

     label11:
        goto label13;

     label12:
        $r10 := @caughtexception;

     label13:
        if r15 == null goto label21;

     label14:
        staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>(r15);

     label15:
        goto label29;

     label16:
        $r8 := @caughtexception;

     label17:
        staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.NoOpLog");

     label18:
        goto label20;

     label19:
        $r7 := @caughtexception;

     label20:
        goto label29;

     label21:
        $z0 = <org.apache.commons.logging.LogSource: boolean log4jIsAvailable>;

        if $z0 == 0 goto label22;

        staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.Log4JLogger");

        goto label24;

     label22:
        $z1 = <org.apache.commons.logging.LogSource: boolean jdk14IsAvailable>;

        if $z1 == 0 goto label23;

        staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.Jdk14Logger");

        goto label24;

     label23:
        staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.NoOpLog");

     label24:
        goto label29;

     label25:
        $r9 := @caughtexception;

     label26:
        staticinvoke <org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)>("org.apache.commons.logging.impl.NoOpLog");

     label27:
        goto label29;

     label28:
        $r13 := @caughtexception;

     label29:
        return;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label21 to label24 with label25;
        catch java.lang.Throwable from label26 to label27 with label28;
    }
}
