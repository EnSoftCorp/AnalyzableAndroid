public class gov.nist.core.net.SslNetworkLayer extends java.lang.Object implements gov.nist.core.net.NetworkLayer
{
    private javax.net.ssl.SSLSocketFactory sslSocketFactory;
    private javax.net.ssl.SSLServerSocketFactory sslServerSocketFactory;

    public void <init>(java.lang.String, java.lang.String, char[], java.lang.String) throws java.security.GeneralSecurityException, java.io.FileNotFoundException, java.io.IOException
    {
        gov.nist.core.net.SslNetworkLayer r0;
        java.lang.String r1, r2, r4, r6;
        char[] r3;
        javax.net.ssl.SSLContext r5;
        javax.net.ssl.TrustManagerFactory r7;
        javax.net.ssl.KeyManagerFactory r8;
        java.security.SecureRandom r9, $r12;
        java.security.KeyStore r10, r11;
        java.io.FileInputStream $r13, $r14;
        javax.net.ssl.TrustManager[] $r15;
        javax.net.ssl.KeyManager[] $r16;
        javax.net.ssl.SSLSocketFactory $r17;
        javax.net.ssl.SSLServerSocketFactory $r18;

        r0 := @this: gov.nist.core.net.SslNetworkLayer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: char[];

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r5 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");

        r6 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        r7 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(r6);

        r8 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(r6);

        $r12 = new java.security.SecureRandom;

        specialinvoke $r12.<java.security.SecureRandom: void <init>()>();

        r9 = $r12;

        virtualinvoke r9.<java.security.SecureRandom: int nextInt()>();

        r10 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r4);

        r11 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r4);

        $r14 = new java.io.FileInputStream;

        specialinvoke $r14.<java.io.FileInputStream: void <init>(java.lang.String)>(r2);

        virtualinvoke r10.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r14, r3);

        $r13 = new java.io.FileInputStream;

        specialinvoke $r13.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

        virtualinvoke r11.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r13, r3);

        virtualinvoke r7.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(r11);

        virtualinvoke r8.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r10, r3);

        $r16 = virtualinvoke r8.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        $r15 = virtualinvoke r7.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        virtualinvoke r5.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r16, $r15, r9);

        $r18 = virtualinvoke r5.<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()>();

        r0.<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLServerSocketFactory sslServerSocketFactory> = $r18;

        $r17 = virtualinvoke r5.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        r0.<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocketFactory sslSocketFactory> = $r17;

        return;
    }

    public java.net.ServerSocket createServerSocket(int, int, java.net.InetAddress) throws java.io.IOException
    {
        gov.nist.core.net.SslNetworkLayer r0;
        int i0, i1;
        java.net.InetAddress r1;
        java.net.ServerSocket $r2;

        r0 := @this: gov.nist.core.net.SslNetworkLayer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.net.InetAddress;

        $r2 = new java.net.ServerSocket;

        specialinvoke $r2.<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>(i0, i1, r1);

        return $r2;
    }

    public java.net.Socket createSocket(java.net.InetAddress, int) throws java.io.IOException
    {
        gov.nist.core.net.SslNetworkLayer r0;
        java.net.InetAddress r1;
        int i0;
        java.net.Socket $r2;

        r0 := @this: gov.nist.core.net.SslNetworkLayer;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        $r2 = new java.net.Socket;

        specialinvoke $r2.<java.net.Socket: void <init>(java.net.InetAddress,int)>(r1, i0);

        return $r2;
    }

    public java.net.DatagramSocket createDatagramSocket() throws java.net.SocketException
    {
        gov.nist.core.net.SslNetworkLayer r0;
        java.net.DatagramSocket $r1;

        r0 := @this: gov.nist.core.net.SslNetworkLayer;

        $r1 = new java.net.DatagramSocket;

        specialinvoke $r1.<java.net.DatagramSocket: void <init>()>();

        return $r1;
    }

    public java.net.DatagramSocket createDatagramSocket(int, java.net.InetAddress) throws java.net.SocketException
    {
        gov.nist.core.net.SslNetworkLayer r0;
        int i0;
        java.net.InetAddress r1;
        java.net.DatagramSocket $r2;

        r0 := @this: gov.nist.core.net.SslNetworkLayer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.net.InetAddress;

        $r2 = new java.net.DatagramSocket;

        specialinvoke $r2.<java.net.DatagramSocket: void <init>(int,java.net.InetAddress)>(i0, r1);

        return $r2;
    }

    public javax.net.ssl.SSLServerSocket createSSLServerSocket(int, int, java.net.InetAddress) throws java.io.IOException
    {
        gov.nist.core.net.SslNetworkLayer r0;
        int i0, i1;
        java.net.InetAddress r1;
        javax.net.ssl.SSLServerSocketFactory $r2;
        java.net.ServerSocket $r3;
        javax.net.ssl.SSLServerSocket $r4;

        r0 := @this: gov.nist.core.net.SslNetworkLayer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.net.InetAddress;

        $r2 = r0.<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLServerSocketFactory sslServerSocketFactory>;

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLServerSocketFactory: java.net.ServerSocket createServerSocket(int,int,java.net.InetAddress)>(i0, i1, r1);

        $r4 = (javax.net.ssl.SSLServerSocket) $r3;

        return $r4;
    }

    public javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress, int) throws java.io.IOException
    {
        gov.nist.core.net.SslNetworkLayer r0;
        java.net.InetAddress r1;
        int i0;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3;
        javax.net.ssl.SSLSocket $r4;

        r0 := @this: gov.nist.core.net.SslNetworkLayer;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        $r2 = r0.<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>(r1, i0);

        $r4 = (javax.net.ssl.SSLSocket) $r3;

        return $r4;
    }

    public javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress, int, java.net.InetAddress) throws java.io.IOException
    {
        gov.nist.core.net.SslNetworkLayer r0;
        java.net.InetAddress r1, r2;
        int i0;
        javax.net.ssl.SSLSocketFactory $r3;
        java.net.Socket $r4;
        javax.net.ssl.SSLSocket $r5;

        r0 := @this: gov.nist.core.net.SslNetworkLayer;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        $r3 = r0.<gov.nist.core.net.SslNetworkLayer: javax.net.ssl.SSLSocketFactory sslSocketFactory>;

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>(r1, i0, r2, 0);

        $r5 = (javax.net.ssl.SSLSocket) $r4;

        return $r5;
    }

    public java.net.Socket createSocket(java.net.InetAddress, int, java.net.InetAddress) throws java.io.IOException
    {
        gov.nist.core.net.SslNetworkLayer r0;
        java.net.InetAddress r1, r2;
        int i0;
        java.net.Socket $r3, $r4;

        r0 := @this: gov.nist.core.net.SslNetworkLayer;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        if r2 == null goto label1;

        $r4 = new java.net.Socket;

        specialinvoke $r4.<java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>(r1, i0, r2, 0);

        return $r4;

     label1:
        $r3 = new java.net.Socket;

        specialinvoke $r3.<java.net.Socket: void <init>(java.net.InetAddress,int)>(r1, i0);

        return $r3;
    }

    public java.net.Socket createSocket(java.net.InetAddress, int, java.net.InetAddress, int) throws java.io.IOException
    {
        gov.nist.core.net.SslNetworkLayer r0;
        java.net.InetAddress r1, r2;
        int i0, i1;
        java.net.Socket r3, $r4, $r5, $r8;
        java.net.InetSocketAddress $r6, $r7;

        r0 := @this: gov.nist.core.net.SslNetworkLayer;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        if r2 == null goto label1;

        $r8 = new java.net.Socket;

        specialinvoke $r8.<java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        return $r8;

     label1:
        if i0 == 0 goto label2;

        $r5 = new java.net.Socket;

        specialinvoke $r5.<java.net.Socket: void <init>()>();

        r3 = $r5;

        $r6 = new java.net.InetSocketAddress;

        specialinvoke $r6.<java.net.InetSocketAddress: void <init>(int)>(i0);

        virtualinvoke r3.<java.net.Socket: void bind(java.net.SocketAddress)>($r6);

        $r7 = new java.net.InetSocketAddress;

        specialinvoke $r7.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r1, i0);

        virtualinvoke r3.<java.net.Socket: void connect(java.net.SocketAddress)>($r7);

        return r3;

     label2:
        $r4 = new java.net.Socket;

        specialinvoke $r4.<java.net.Socket: void <init>(java.net.InetAddress,int)>(r1, i0);

        return $r4;
    }
}
