public class gov.nist.javax.sip.parser.CallIDParser extends gov.nist.javax.sip.parser.HeaderParser
{

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.CallIDParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.CallIDParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.CallIDParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.CallIDParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.CallIDParser r0;
        gov.nist.javax.sip.header.CallID r1, r3, $r11;
        java.lang.String r2, $r14;
        java.lang.Throwable r4, $r15;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r5, $r7, $r8, $r10, $r12, $r13;

        r0 := @this: gov.nist.javax.sip.parser.CallIDParser;

        $z0 = <gov.nist.javax.sip.parser.CallIDParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.parser.CallIDParser: void dbg_enter(java.lang.String)>("parse");

     label1:
        $r5 = r0.<gov.nist.javax.sip.parser.CallIDParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r5.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(2088);

        $r7 = r0.<gov.nist.javax.sip.parser.CallIDParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: void SPorHT()>();

        $r8 = r0.<gov.nist.javax.sip.parser.CallIDParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r10 = r0.<gov.nist.javax.sip.parser.CallIDParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r10.<gov.nist.core.LexerCore: void SPorHT()>();

        $r11 = new gov.nist.javax.sip.header.CallID;

        specialinvoke $r11.<gov.nist.javax.sip.header.CallID: void <init>()>();

        r1 = $r11;

        $r12 = r0.<gov.nist.javax.sip.parser.CallIDParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r12.<gov.nist.core.LexerCore: void SPorHT()>();

        $r13 = r0.<gov.nist.javax.sip.parser.CallIDParser: gov.nist.core.LexerCore lexer>;

        r2 = virtualinvoke $r13.<gov.nist.core.LexerCore: java.lang.String getRest()>();

        $r14 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.CallID: void setCallId(java.lang.String)>($r14);

        r3 = r1;

     label2:
        $z1 = <gov.nist.javax.sip.parser.CallIDParser: boolean debug>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<gov.nist.javax.sip.parser.CallIDParser: void dbg_leave(java.lang.String)>("parse");

     label3:
        return r3;

     label4:
        $r15 := @caughtexception;

        r4 = $r15;

     label5:
        $z2 = <gov.nist.javax.sip.parser.CallIDParser: boolean debug>;

        if $z2 == 0 goto label6;

        virtualinvoke r0.<gov.nist.javax.sip.parser.CallIDParser: void dbg_leave(java.lang.String)>("parse");

     label6:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
