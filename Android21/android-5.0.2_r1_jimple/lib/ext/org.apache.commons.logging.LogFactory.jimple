public abstract class org.apache.commons.logging.LogFactory extends java.lang.Object
{
    public static final java.lang.String PRIORITY_KEY;
    public static final java.lang.String TCCL_KEY;
    public static final java.lang.String FACTORY_PROPERTY;
    public static final java.lang.String FACTORY_DEFAULT;
    public static final java.lang.String FACTORY_PROPERTIES;
    protected static final java.lang.String SERVICE_ID;
    public static final java.lang.String DIAGNOSTICS_DEST_PROPERTY;
    private static java.io.PrintStream diagnosticsStream;
    private static java.lang.String diagnosticPrefix;
    public static final java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY;
    private static final java.lang.String WEAK_HASHTABLE_CLASSNAME;
    private static java.lang.ClassLoader thisClassLoader;
    protected static java.util.Hashtable factories;
    protected static org.apache.commons.logging.LogFactory nullClassLoaderFactory;

    protected void <init>()
    {
        org.apache.commons.logging.LogFactory r0;

        r0 := @this: org.apache.commons.logging.LogFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.lang.Object getAttribute(java.lang.String);

    public abstract java.lang.String[] getAttributeNames();

    public abstract org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException;

    public abstract org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException;

    public abstract void release();

    public abstract void removeAttribute(java.lang.String);

    public abstract void setAttribute(java.lang.String, java.lang.Object);

    private static final java.util.Hashtable createFactoryStore()
    {
        java.util.Hashtable r0, $r4;
        java.lang.String r1, $r6;
        java.lang.Class r2;
        java.lang.Object $r3;
        java.lang.Throwable $r5;
        boolean $z0, $z1;
        java.io.PrintStream $r7;

        r0 = null;

        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.LogFactory.HashtableImpl");

        if r1 != null goto label1;

        r1 = "org.apache.commons.logging.impl.WeakHashtable";

     label1:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        r0 = (java.util.Hashtable) $r3;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        $r6 = "org.apache.commons.logging.impl.WeakHashtable";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label5;

        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label4;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[ERROR] LogFactory: Load of custom hashtable failed");

        goto label5;

     label4:
        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("[ERROR] LogFactory: Load of custom hashtable failed");

     label5:
        if r0 != null goto label6;

        $r4 = new java.util.Hashtable;

        specialinvoke $r4.<java.util.Hashtable: void <init>()>();

        r0 = $r4;

     label6:
        return r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static org.apache.commons.logging.LogFactory getFactory() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.ClassLoader r0, r3, $r8;
        org.apache.commons.logging.LogFactory r1;
        java.util.Properties r2;
        java.lang.String r4, $r12, $r15, $r23, $r30, $r32, $r37, $r39, $r44, $r47, $r49, $r51, $r52, $r55, $r59, $r62, r64, r68, r70, r72, r73;
        java.io.BufferedReader r5, $r14, $r57;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.lang.Object $r7;
        java.lang.StringBuilder $r9, $r10, $r11, $r13, $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r26, $r27, $r28, $r31, $r33, $r34, $r35, $r36, $r38, $r42, $r43, $r45, $r46, $r50, $r53, $r54, $r56, $r60, $r61;
        java.io.InputStreamReader $r16, $r63;
        java.lang.Boolean $r29;
        java.lang.Exception $r40, r69;
        java.lang.RuntimeException $r41, r66;
        java.lang.SecurityException $r48, r65;
        java.io.UnsupportedEncodingException $r58;
        java.io.InputStream r67;
        java.util.Enumeration r71;

        r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()>();

        if r0 != null goto label01;

        $z16 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z16 == 0 goto label01;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Context classloader is null.");

     label01:
        r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)>(r0);

        if r1 == null goto label02;

        return r1;

     label02:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label03;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] LogFactory implementation requested for the first time for context classloader ");

        $r32 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r0);

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r39);

        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[LOOKUP] ", r0);

     label03:
        r2 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>(r0, "commons-logging.properties");

        r3 = r0;

        if r2 == null goto label04;

        r4 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("use_tccl");

        if r4 == null goto label04;

        $r29 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r4);

        $z14 = virtualinvoke $r29.<java.lang.Boolean: boolean booleanValue()>();

        if $z14 != 0 goto label04;

        r3 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

     label04:
        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label05;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking for system property [org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use...");

     label05:
        r64 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.LogFactory");

        if r64 == null goto label07;

        $z13 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z13 == 0 goto label06;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Creating an instance of LogFactory class \'");

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as specified by system property ");

        $r31 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.apache.commons.logging.LogFactory");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r30);

     label06:
        r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r64, r3, r0);

        goto label08;

     label07:
        $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label08;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No system property [org.apache.commons.logging.LogFactory] defined.");

     label08:
        goto label13;

     label09:
        $r48 := @caughtexception;

        r65 = $r48;

        $z18 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z18 == 0 goto label10;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] A security exception occurred while trying to create an instance of the custom factory class: [");

        $r59 = virtualinvoke r65.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r62 = virtualinvoke $r59.<java.lang.String: java.lang.String trim()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r56 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Trying alternative implementations...");

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r55);

     label10:
        goto label13;

     label11:
        $r41 := @caughtexception;

        r66 = $r41;

        $z17 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z17 == 0 goto label12;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] An exception occurred while trying to create an instance of the custom factory class: [");

        $r52 = virtualinvoke r66.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r51 = virtualinvoke $r52.<java.lang.String: java.lang.String trim()>();

        $r54 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] as specified by a system property.");

        $r49 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r49);

     label12:
        throw r66;

     label13:
        if r1 != null goto label24;

        $z10 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z10 == 0 goto label14;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking for a resource file of name [META-INF/services/org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use...");

     label14:
        r67 = staticinvoke <org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)>(r0, "META-INF/services/org.apache.commons.logging.LogFactory");

        if r67 == null goto label21;

     label15:
        $r14 = new java.io.BufferedReader;

        $r16 = new java.io.InputStreamReader;

        specialinvoke $r16.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r67, "UTF-8");

        specialinvoke $r14.<java.io.BufferedReader: void <init>(java.io.Reader)>($r16);

        r5 = $r14;

     label16:
        goto label18;

     label17:
        $r58 := @caughtexception;

        $r57 = new java.io.BufferedReader;

        $r63 = new java.io.InputStreamReader;

        specialinvoke $r63.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r67);

        specialinvoke $r57.<java.io.BufferedReader: void <init>(java.io.Reader)>($r63);

        r5 = $r57;

     label18:
        r68 = virtualinvoke r5.<java.io.BufferedReader: java.lang.String readLine()>();

        virtualinvoke r5.<java.io.BufferedReader: void close()>();

        if r68 == null goto label20;

        $r15 = "";

        $z11 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r68);

        if $z11 != 0 goto label20;

        $z12 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z12 == 0 goto label19;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP]  Creating an instance of LogFactory class ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r68);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as specified by file \'");

        $r19 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("META-INF/services/org.apache.commons.logging.LogFactory");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' which was present in the path of the context");

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" classloader.");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r23);

     label19:
        r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r68, r3, r0);

     label20:
        goto label22;

     label21:
        $z9 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z9 == 0 goto label22;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No resource file with name \'META-INF/services/org.apache.commons.logging.LogFactory\' found.");

     label22:
        goto label24;

     label23:
        $r40 := @caughtexception;

        r69 = $r40;

        $z15 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z15 == 0 goto label24;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] A security exception occurred while trying to create an instance of the custom factory class: [");

        $r37 = virtualinvoke r69.<java.lang.Exception: java.lang.String getMessage()>();

        $r44 = virtualinvoke $r37.<java.lang.String: java.lang.String trim()>();

        $r45 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Trying alternative implementations...");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r47);

     label24:
        if r1 != null goto label30;

        if r2 == null goto label29;

        $z6 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z6 == 0 goto label25;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking in properties file for entry with key \'org.apache.commons.logging.LogFactory\' to define the LogFactory subclass to use...");

     label25:
        r70 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.LogFactory");

        if r70 == null goto label27;

        $z7 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z7 == 0 goto label26;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file specifies LogFactory subclass \'");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r70);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r12);

     label26:
        r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r70, r3, r0);

        goto label28;

     label27:
        $z8 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z8 == 0 goto label28;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Properties file has no entry specifying LogFactory subclass.");

     label28:
        goto label30;

     label29:
        $z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label30;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No properties file available to determine LogFactory subclass from..");

     label30:
        if r1 != null goto label32;

        $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label31;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Loading the default LogFactory implementation \'org.apache.commons.logging.impl.LogFactoryImpl\' via the same classloader that loaded this LogFactory class (ie not looking in the context classloader).");

     label31:
        $r8 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>("org.apache.commons.logging.impl.LogFactoryImpl", $r8, r0);

     label32:
        if r1 == null goto label34;

        staticinvoke <org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)>(r0, r1);

        if r2 == null goto label34;

        r71 = virtualinvoke r2.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label33:
        $z3 = interfaceinvoke r71.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z3 == 0 goto label34;

        $r7 = interfaceinvoke r71.<java.util.Enumeration: java.lang.Object nextElement()>();

        r72 = (java.lang.String) $r7;

        r73 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r72);

        virtualinvoke r1.<org.apache.commons.logging.LogFactory: void setAttribute(java.lang.String,java.lang.Object)>(r72, r73);

        goto label33;

     label34:
        return r1;

        catch java.lang.SecurityException from label05 to label08 with label09;
        catch java.lang.RuntimeException from label05 to label08 with label11;
        catch java.io.UnsupportedEncodingException from label15 to label16 with label17;
        catch java.lang.Exception from label14 to label22 with label23;
    }

    public static org.apache.commons.logging.Log getLog(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.Class r0;
        java.lang.String $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>($r1);

        return $r2;
    }

    public static org.apache.commons.logging.Log getLog(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.String r0;
        org.apache.commons.logging.impl.Jdk14Logger $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.apache.commons.logging.impl.Jdk14Logger;

        specialinvoke $r1.<org.apache.commons.logging.impl.Jdk14Logger: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public static void release(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        java.util.Hashtable r1, $r4, $r5, $r7;
        org.apache.commons.logging.LogFactory r2, $r9, $r10;
        java.lang.Throwable r3, $r16;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.StringBuilder $r11, $r12, $r15;
        java.lang.String $r13, $r14;

        r0 := @parameter0: java.lang.ClassLoader;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Releasing factory for classloader ");

        $r13 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r14);

     label1:
        $r4 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        r1 = $r4;

        entermonitor $r4;

     label2:
        if r0 != null goto label3;

        $r9 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        if $r9 == null goto label4;

        $r10 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        virtualinvoke $r10.<org.apache.commons.logging.LogFactory: void release()>();

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

        goto label4;

     label3:
        $r5 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (org.apache.commons.logging.LogFactory) $r6;

        if r2 == null goto label4;

        virtualinvoke r2.<org.apache.commons.logging.LogFactory: void release()>();

        $r7 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r0);

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r16 := @caughtexception;

        r3 = $r16;

        exitmonitor r1;

     label7:
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public static void releaseAll()
    {
        java.util.Hashtable r0, $r4, $r5, $r6;
        java.util.Enumeration r1;
        org.apache.commons.logging.LogFactory r2, $r7, $r8;
        java.lang.Throwable r3, $r10;
        boolean $z0, $z1;
        java.lang.Object $r9;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Releasing factory for all classloaders.");

     label1:
        $r4 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        r0 = $r4;

        entermonitor $r4;

     label2:
        $r5 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        r1 = virtualinvoke $r5.<java.util.Hashtable: java.util.Enumeration elements()>();

     label3:
        $z1 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r2 = (org.apache.commons.logging.LogFactory) $r9;

        virtualinvoke r2.<org.apache.commons.logging.LogFactory: void release()>();

        goto label3;

     label4:
        $r6 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        virtualinvoke $r6.<java.util.Hashtable: void clear()>();

        $r7 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        if $r7 == null goto label5;

        $r8 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        virtualinvoke $r8.<org.apache.commons.logging.LogFactory: void release()>();

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

     label5:
        exitmonitor r0;

     label6:
        goto label9;

     label7:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r0;

     label8:
        throw r3;

     label9:
        return;

        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected static java.lang.ClassLoader getClassLoader(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.SecurityException r1, $r3;
        java.lang.ClassLoader $r2;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9;
        java.lang.String $r8, $r10;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get classloader for class \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' due to security restrictions - ");

        $r8 = virtualinvoke r1.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r10);

     label4:
        throw r1;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    protected static java.lang.ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.LogFactory$1 $r0;
        java.lang.Object $r1;
        java.lang.ClassLoader $r2;

        $r0 = new org.apache.commons.logging.LogFactory$1;

        specialinvoke $r0.<org.apache.commons.logging.LogFactory$1: void <init>()>();

        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r2 = (java.lang.ClassLoader) $r1;

        return $r2;
    }

    protected static java.lang.ClassLoader directGetContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.ClassLoader r0;
        java.lang.reflect.Method r1;
        java.lang.IllegalAccessException r2, $r8;
        java.lang.Class[] $r3;
        java.lang.Class $r4;
        java.lang.Thread $r5;
        java.lang.Object[] $r6;
        java.lang.Object $r7;
        org.apache.commons.logging.LogConfigurationException $r9, $r13;
        java.lang.NoSuchMethodException $r10;
        java.lang.reflect.InvocationTargetException $r11, r15;
        java.lang.Throwable $r12, $r14;
        boolean $z0;

        r0 = null;

     label1:
        $r4 = class "java/lang/Thread";

        $r3 = (java.lang.Class[]) null;

        r1 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getContextClassLoader", $r3);

     label2:
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r6 = (java.lang.Object[]) null;

        $r7 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r6);

        r0 = (java.lang.ClassLoader) $r7;

     label3:
        goto label7;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r9.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected IllegalAccessException", r2);

        throw $r9;

     label5:
        $r11 := @caughtexception;

        r15 = $r11;

        $r12 = virtualinvoke r15.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r12 instanceof java.lang.SecurityException;

        if $z0 == 0 goto label6;

        goto label7;

     label6:
        $r13 = new org.apache.commons.logging.LogConfigurationException;

        $r14 = virtualinvoke r15.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r13.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected InvocationTargetException", $r14);

        throw $r13;

     label7:
        goto label9;

     label8:
        $r10 := @caughtexception;

        r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "org/apache/commons/logging/LogFactory");

     label9:
        return r0;

        catch java.lang.IllegalAccessException from label2 to label3 with label4;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label5;
        catch java.lang.NoSuchMethodException from label1 to label7 with label8;
    }

    private static org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        java.util.Hashtable $r1;
        java.lang.Object $r2;
        org.apache.commons.logging.LogFactory r3;

        r0 := @parameter0: java.lang.ClassLoader;

        if r0 != null goto label1;

        r3 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        goto label2;

     label1:
        $r1 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (org.apache.commons.logging.LogFactory) $r2;

     label2:
        return r3;
    }

    private static void cacheFactory(java.lang.ClassLoader, org.apache.commons.logging.LogFactory)
    {
        java.lang.ClassLoader r0;
        org.apache.commons.logging.LogFactory r1;
        java.util.Hashtable $r2;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: org.apache.commons.logging.LogFactory;

        if r1 == null goto label2;

        if r0 != null goto label1;

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = r1;

        goto label2;

     label1:
        $r2 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

     label2:
        return;
    }

    protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader, java.lang.ClassLoader) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.String r0, $r9, $r12, $r13, $r16, $r18;
        java.lang.ClassLoader r1, r2;
        java.lang.Object r3;
        org.apache.commons.logging.LogConfigurationException r4;
        org.apache.commons.logging.LogFactory$2 $r5;
        boolean $z0, $z1, $z2;
        org.apache.commons.logging.LogFactory $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r14, $r15, $r17, $r19;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 := @parameter2: java.lang.ClassLoader;

        $r5 = new org.apache.commons.logging.LogFactory$2;

        specialinvoke $r5.<org.apache.commons.logging.LogFactory$2: void <init>(java.lang.String,java.lang.ClassLoader)>(r0, r1);

        r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r5);

        $z0 = r3 instanceof org.apache.commons.logging.LogConfigurationException;

        if $z0 == 0 goto label2;

        r4 = (org.apache.commons.logging.LogConfigurationException) r3;

        $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An error occurred while loading the factory class:");

        $r16 = virtualinvoke r4.<org.apache.commons.logging.LogConfigurationException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r18);

     label1:
        throw r4;

     label2:
        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Created object ");

        $r9 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r3);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to manage classloader ");

        $r12 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r13);

     label3:
        $r6 = (org.apache.commons.logging.LogFactory) r3;

        return $r6;
    }

    protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String r0;
        java.lang.ClassLoader r1;
        org.apache.commons.logging.LogFactory $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>(r0, r1, null);

        return $r2;
    }

    protected static java.lang.Object createFactory(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String r0, r4, $r10, $r13, $r18, $r22, $r29, $r32, $r34, $r35, $r40, $r45, $r49, $r61, $r81, $r88, r91, r92;
        java.lang.ClassLoader r1, $r23, $r38, $r54, $r86;
        java.lang.Class r2, $r14, $r28, $r60, $r75;
        java.lang.ClassNotFoundException r3, $r85;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.ClassCastException r5, $r48, $r72;
        java.lang.Object $r6, $r15;
        org.apache.commons.logging.LogFactory $r7, $r17;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r16, $r19, $r20, $r21, $r24, $r25, $r26, $r27, $r30, $r31, $r33, $r36, $r39, $r41, $r42, $r43, $r44, $r46, $r47, $r50, $r51, $r52, $r53, $r55, $r56, $r57, $r58, $r59, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r73, $r74, $r78, $r80, $r82, $r83, $r84, $r87;
        java.lang.NoClassDefFoundError $r37, r89;
        org.apache.commons.logging.LogConfigurationException $r76, $r77;
        java.lang.Exception $r79, r93;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 = null;

     label01:
        if r1 == null goto label16;

     label02:
        r2 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

        $r14 = class "org/apache/commons/logging/LogFactory";

        $z2 = virtualinvoke $r14.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z2 == 0 goto label03;

        $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label04;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loaded class ");

        $r35 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r33 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from classloader ");

        $r34 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r39 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r40);

        goto label04;

     label03:
        $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label04;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Factory class ");

        $r18 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" loaded from classloader ");

        $r23 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r22 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend \'");

        $r28 = class "org/apache/commons/logging/LogFactory";

        $r29 = virtualinvoke $r28.<java.lang.Class: java.lang.String getName()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as loaded by this classloader.");

        $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r32);

        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[BAD CL TREE] ", r1);

     label04:
        $r15 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r17 = (org.apache.commons.logging.LogFactory) $r15;

     label05:
        return $r17;

     label06:
        $r85 := @caughtexception;

        r3 = $r85;

        $r86 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if r1 != $r86 goto label08;

        $z9 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z9 == 0 goto label07;

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        $r82 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to locate any class called \'");

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r80 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' via classloader ");

        $r81 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r87 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r88);

     label07:
        throw r3;

     label08:
        goto label16;

     label09:
        $r37 := @caughtexception;

        r89 = $r37;

        $r38 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if r1 != $r38 goto label11;

        $z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label10;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r47 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be loaded");

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" via classloader ");

        $r45 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r44 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r51 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - it depends on some other class that cannot");

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" be found.");

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r49);

     label10:
        throw r89;

     label11:
        goto label16;

     label12:
        $r48 := @caughtexception;

        $r54 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if r1 != $r54 goto label16;

        z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>(r2);

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The application has specified that a custom LogFactory implementation should be used but Class \'");

        $r58 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be converted to \'");

        $r60 = class "org/apache/commons/logging/LogFactory";

        $r61 = virtualinvoke $r60.<java.lang.Class: java.lang.String getName()>();

        $r55 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. ");

        r4 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        if z0 == 0 goto label13;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r73 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The conflict is caused by the presence of multiple LogFactory classes in incompatible classloaders. ");

        $r68 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Background can be found in http://jakarta.apache.org/commons/logging/tech.html. ");

        $r67 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("If you have not explicitly specified a custom LogFactory then it is likely that ");

        $r70 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the container has set one without your knowledge. ");

        $r69 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("In this case, consider using the commons-logging-adapters.jar file or ");

        $r78 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("specifying the standard LogFactory from the command line. ");

        r91 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label14;

     label13:
        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Please check the custom implementation. ");

        r91 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r91);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Help can be found @http://jakarta.apache.org/commons/logging/troubleshooting.html.");

        r92 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        $z6 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z6 == 0 goto label15;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>(r92);

     label15:
        $r72 = new java.lang.ClassCastException;

        specialinvoke $r72.<java.lang.ClassCastException: void <init>(java.lang.String)>(r92);

        r5 = $r72;

        throw r5;

     label16:
        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label17;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load factory class via classloader ");

        $r10 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - trying the classloader associated with this LogFactory.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r13);

     label17:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r6 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r7 = (org.apache.commons.logging.LogFactory) $r6;

     label18:
        return $r7;

     label19:
        $r79 := @caughtexception;

        r93 = $r79;

        $z8 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z8 == 0 goto label20;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Unable to create LogFactory instance.");

     label20:
        if r2 == null goto label21;

        $r75 = class "org/apache/commons/logging/LogFactory";

        $z7 = virtualinvoke $r75.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z7 != 0 goto label21;

        $r77 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r77.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("The chosen LogFactory implementation does not extend LogFactory. Please check your configuration.", r93);

        return $r77;

     label21:
        $r76 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r76.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>(r93);

        return $r76;

        catch java.lang.ClassNotFoundException from label02 to label05 with label06;
        catch java.lang.NoClassDefFoundError from label02 to label05 with label09;
        catch java.lang.ClassCastException from label02 to label05 with label12;
        catch java.lang.Exception from label01 to label05 with label19;
        catch java.lang.Exception from label06 to label18 with label19;
    }

    private static boolean implementsLogFactory(java.lang.Class)
    {
        java.lang.Class r0, r2;
        boolean z0;
        java.lang.ClassLoader r1;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r16, $r17, $r18, $r22, $r23, $r24;
        java.lang.String $r5, $r8, $r11, $r15, $r19, $r21, $r25, $r27;
        java.lang.LinkageError $r14, r29;
        java.lang.SecurityException $r20, r28;
        java.lang.ClassNotFoundException $r26;

        r0 := @parameter0: java.lang.Class;

        z0 = 0;

        if r0 == null goto label8;

     label1:
        r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r1 != null goto label2;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[CUSTOM LOG FACTORY] was loaded by the boot classloader");

        goto label4;

     label2:
        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[CUSTOM LOG FACTORY] ", r1);

        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.commons.logging.LogFactory", 0, r1);

        z0 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if z0 == 0 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] ");

        $r11 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" implements LogFactory but was loaded by an incompatible classloader.");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r15);

        goto label4;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] ");

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not implement LogFactory.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r8);

     label4:
        goto label8;

     label5:
        $r20 := @caughtexception;

        r28 = $r20;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] SecurityException thrown whilst trying to determine whether the compatibility was caused by a classloader conflict: ");

        $r25 = virtualinvoke r28.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r27);

        goto label8;

     label6:
        $r14 := @caughtexception;

        r29 = $r14;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] LinkageError thrown whilst trying to determine whether the compatibility was caused by a classloader conflict: ");

        $r19 = virtualinvoke r29.<java.lang.LinkageError: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r21);

        goto label8;

     label7:
        $r26 := @caughtexception;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[CUSTOM LOG FACTORY] LogFactory class cannot be loaded by classloader which loaded the custom LogFactory implementation. Is the custom factory in the right classloader?");

     label8:
        return z0;

        catch java.lang.SecurityException from label1 to label4 with label5;
        catch java.lang.LinkageError from label1 to label4 with label6;
        catch java.lang.ClassNotFoundException from label1 to label4 with label7;
    }

    private static java.io.InputStream getResourceAsStream(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        org.apache.commons.logging.LogFactory$3 $r2;
        java.lang.Object $r3;
        java.io.InputStream $r4;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        $r2 = new org.apache.commons.logging.LogFactory$3;

        specialinvoke $r2.<org.apache.commons.logging.LogFactory$3: void <init>(java.lang.ClassLoader,java.lang.String)>(r0, r1);

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);

        $r4 = (java.io.InputStream) $r3;

        return $r4;
    }

    private static java.util.Enumeration getResources(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        org.apache.commons.logging.LogFactory$4 r2, $r4;
        java.lang.Object r3;
        java.util.Enumeration $r5;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        $r4 = new org.apache.commons.logging.LogFactory$4;

        specialinvoke $r4.<org.apache.commons.logging.LogFactory$4: void <init>(java.lang.ClassLoader,java.lang.String)>(r0, r1);

        r2 = $r4;

        r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(r2);

        $r5 = (java.util.Enumeration) r3;

        return $r5;
    }

    private static java.util.Properties getProperties(java.net.URL)
    {
        java.net.URL r0;
        org.apache.commons.logging.LogFactory$5 r1, $r2;
        java.lang.Object $r3;
        java.util.Properties $r4;

        r0 := @parameter0: java.net.URL;

        $r2 = new org.apache.commons.logging.LogFactory$5;

        specialinvoke $r2.<org.apache.commons.logging.LogFactory$5: void <init>(java.net.URL)>(r0);

        r1 = $r2;

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(r1);

        $r4 = (java.util.Properties) $r3;

        return $r4;
    }

    private static final java.util.Properties getConfigurationFile(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1, r7, $r13, $r20, $r30, $r44, $r52, r53;
        java.util.Properties r2, r6;
        double d0, d1;
        java.net.URL r3, r5;
        java.util.Enumeration r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r45, $r46, $r47, $r48, $r50, $r51;
        java.lang.Object $r19;
        byte $b0;
        java.lang.SecurityException $r49;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.String;

        r2 = null;

        d0 = 0.0;

        r3 = null;

     label01:
        r4 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)>(r0, r1);

        if r4 != null goto label03;

     label02:
        return null;

     label03:
        $z0 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label11;

        $r19 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.net.URL) $r19;

        r6 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)>(r5);

        if r6 == null goto label10;

        if r2 != null goto label06;

        r3 = r5;

        r2 = r6;

        r7 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("priority");

        d0 = 0.0;

        if r7 == null goto label04;

        d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r7);

     label04:
        $z4 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label05;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file found at \'");

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r50 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r52);

     label05:
        goto label10;

     label06:
        r53 = virtualinvoke r6.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("priority");

        d1 = 0.0;

        if r53 == null goto label07;

        d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r53);

     label07:
        $b0 = d1 cmpl d0;

        if $b0 <= 0 goto label09;

        $z3 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label08;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file at \'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" overrides file at \'");

        $r43 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r44 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r44);

     label08:
        r3 = r5;

        r2 = r6;

        d0 = d1;

        goto label10;

     label09:
        $z2 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label10;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file at \'");

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not override file at \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r30);

     label10:
        goto label03;

     label11:
        goto label13;

     label12:
        $r49 := @caughtexception;

        $z5 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label13;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("SecurityException thrown while trying to find/read config files.");

     label13:
        $z1 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label15;

        if r2 != null goto label14;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] No properties file of name \'");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found.");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r20);

        goto label15;

     label14:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file of name \'");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found at \'");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r13);

     label15:
        return r2;

        catch java.lang.SecurityException from label01 to label02 with label12;
        catch java.lang.SecurityException from label03 to label11 with label12;
    }

    private static void initDiagnostics()
    {
        java.lang.String r0, $r10, r18;
        java.lang.ClassLoader r2, $r5;
        boolean $z0, $z1;
        java.io.FileOutputStream $r3, r16;
        java.io.PrintStream $r4, $r11, $r13;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.io.IOException $r12;
        java.lang.SecurityException $r14, $r15;

     label01:
        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.diagnostics.dest");

        if r0 != null goto label03;

     label02:
        return;

     label03:
        goto label05;

     label04:
        $r14 := @caughtexception;

        return;

     label05:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("STDOUT");

        if $z0 == 0 goto label06;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = $r13;

        goto label10;

     label06:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("STDERR");

        if $z1 == 0 goto label07;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = $r11;

        goto label10;

     label07:
        $r3 = new java.io.FileOutputStream;

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>(r0, 1);

        r16 = $r3;

        $r4 = new java.io.PrintStream;

        specialinvoke $r4.<java.io.PrintStream: void <init>(java.io.OutputStream)>(r16);

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = $r4;

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        return;

     label10:
        r2 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        $r5 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if $r5 != null goto label11;

        r18 = "BOOTLOADER";

        goto label12;

     label11:
        r18 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r2);

     label12:
        goto label14;

     label13:
        $r15 := @caughtexception;

        r18 = "UNKNOWN";

     label14:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LogFactory from ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.commons.logging.LogFactory: java.lang.String diagnosticPrefix> = $r10;

        return;

        catch java.lang.SecurityException from label01 to label02 with label04;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.SecurityException from label10 to label12 with label13;
    }

    protected static boolean isDiagnosticsEnabled()
    {
        java.io.PrintStream $r0;
        boolean $z0;

        $r0 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if $r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static final void logDiagnostic(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.io.PrintStream $r1, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if $r1 == null goto label1;

        $r3 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        $r2 = <org.apache.commons.logging.LogFactory: java.lang.String diagnosticPrefix>;

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r2);

        $r4 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r5 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r5.<java.io.PrintStream: void flush()>();

     label1:
        return;
    }

    protected static final void logRawDiagnostic(java.lang.String)
    {
        java.lang.String r0;
        java.io.PrintStream $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if $r1 == null goto label1;

        $r2 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r3 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r3.<java.io.PrintStream: void flush()>();

     label1:
        return;
    }

    private static void logClassLoaderEnvironment(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader r2;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r7, $r9, $r10, $r12, $r14, $r15, $r16, $r18, $r20, $r21, $r22, $r23, $r24, $r27, $r30, $r31;
        java.lang.String $r6, $r8, $r11, $r13, $r17, $r19, $r26, $r29, r32;
        java.lang.SecurityException $r25, $r28;

        r0 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Extension directories (java.ext.dir): ");

        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.ext.dir");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Application classpath (java.class.path): ");

        $r11 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r13);

     label2:
        goto label4;

     label3:
        $r25 := @caughtexception;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[ENV] Security setting prevent interrogation of system classpaths.");

     label4:
        r32 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

     label5:
        r2 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r0);

     label6:
        goto label8;

     label7:
        $r28 := @caughtexception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Security forbids determining the classloader for ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r29);

        return;

     label8:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Class ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was loaded via classloader ");

        $r17 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r2);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r19);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Ancestry of classloader which loaded ");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>($r26, r2);

        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.lang.SecurityException from label5 to label6 with label7;
    }

    private static void logHierarchy(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String r0, r3, $r9, $r10, $r13, $r19, $r22, $r28;
        java.lang.ClassLoader r1, r2;
        boolean $z0;
        java.lang.StringBuffer $r5, r32;
        java.lang.StringBuilder $r6, $r7, $r8, $r16, $r17, $r18, $r20, $r21, $r23, $r26, $r29, $r30;
        java.lang.SecurityException $r25, $r27;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        if r1 == null goto label02;

        r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r19 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == \'");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r22);

     label02:
        r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label03:
        goto label05;

     label04:
        $r27 := @caughtexception;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Security forbids determining the system classloader.");

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r28);

        return;

     label05:
        if r1 == null goto label12;

        $r5 = new java.lang.StringBuffer;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClassLoader tree:");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.StringBuffer: void <init>(java.lang.String)>($r9);

        r32 = $r5;

     label06:
        $r10 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>(r1);

        virtualinvoke r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        if r1 != r2 goto label07;

        virtualinvoke r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (SYSTEM) ");

     label07:
        r1 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label08:
        goto label10;

     label09:
        $r25 := @caughtexception;

        virtualinvoke r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" --> SECRET");

        goto label11;

     label10:
        virtualinvoke r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" --> ");

        if r1 != null goto label06;

        virtualinvoke r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("BOOT");

        goto label11;

     label11:
        $r13 = virtualinvoke r32.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r13);

     label12:
        return;

        catch java.lang.SecurityException from label02 to label03 with label04;
        catch java.lang.SecurityException from label07 to label08 with label09;
    }

    public static java.lang.String objectId(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r6;
        java.lang.Class $r2;
        java.lang.String $r3, $r7;
        int $i0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return "null";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static void access$000(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>(r0);

        return;
    }

    static void <clinit>()
    {
        java.lang.ClassLoader $r0;
        java.util.Hashtable $r1;
        boolean $z0;

        <org.apache.commons.logging.LogFactory: java.lang.String WEAK_HASHTABLE_CLASSNAME> = "org.apache.commons.logging.impl.WeakHashtable";

        <org.apache.commons.logging.LogFactory: java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY> = "org.apache.commons.logging.LogFactory.HashtableImpl";

        <org.apache.commons.logging.LogFactory: java.lang.String DIAGNOSTICS_DEST_PROPERTY> = "org.apache.commons.logging.diagnostics.dest";

        <org.apache.commons.logging.LogFactory: java.lang.String SERVICE_ID> = "META-INF/services/org.apache.commons.logging.LogFactory";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_PROPERTIES> = "commons-logging.properties";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_DEFAULT> = "org.apache.commons.logging.impl.LogFactoryImpl";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_PROPERTY> = "org.apache.commons.logging.LogFactory";

        <org.apache.commons.logging.LogFactory: java.lang.String TCCL_KEY> = "use_tccl";

        <org.apache.commons.logging.LogFactory: java.lang.String PRIORITY_KEY> = "priority";

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = null;

        <org.apache.commons.logging.LogFactory: java.util.Hashtable factories> = null;

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "org/apache/commons/logging/LogFactory");

        <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader> = $r0;

        staticinvoke <org.apache.commons.logging.LogFactory: void initDiagnostics()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>(class "org/apache/commons/logging/LogFactory");

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>();

        <org.apache.commons.logging.LogFactory: java.util.Hashtable factories> = $r1;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("BOOTSTRAP COMPLETED");

     label1:
        return;
    }
}
