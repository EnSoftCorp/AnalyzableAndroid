public class gov.nist.javax.sip.stack.UDPMessageProcessor extends gov.nist.javax.sip.stack.MessageProcessor
{
    private int port;
    protected java.util.LinkedList messageQueue;
    protected java.util.LinkedList messageChannels;
    protected int threadPoolSize;
    protected java.net.DatagramSocket sock;
    protected boolean isRunning;
    private static final int HIGHWAT;
    private static final int LOWAT;

    protected void <init>(java.net.InetAddress, gov.nist.javax.sip.stack.SIPTransactionStack, int) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.UDPMessageProcessor r0;
        java.net.InetAddress r1, $r11;
        gov.nist.javax.sip.stack.SIPTransactionStack r2;
        int i0, $i1, $i2, $i3;
        java.net.SocketException r3, $r17;
        java.util.LinkedList $r4;
        gov.nist.core.net.NetworkLayer $r5;
        java.net.DatagramSocket $r6, $r7, $r8, $r12, $r15;
        gov.nist.core.ThreadAuditor $r9, $r14;
        boolean $z0, $z1, $z2;
        java.lang.String $r10, $r13, $r18;
        long $l4;
        java.io.IOException $r16;

        r0 := @this: gov.nist.javax.sip.stack.UDPMessageProcessor;

        r1 := @parameter0: java.net.InetAddress;

        r2 := @parameter1: gov.nist.javax.sip.stack.SIPTransactionStack;

        i0 := @parameter2: int;

        specialinvoke r0.<gov.nist.javax.sip.stack.MessageProcessor: void <init>(java.net.InetAddress,int,java.lang.String,gov.nist.javax.sip.stack.SIPTransactionStack)>(r1, i0, "udp", r2);

        r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack> = r2;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageQueue> = $r4;

        r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: int port> = i0;

     label1:
        $r5 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.NetworkLayer getNetworkLayer()>();

        $r6 = interfaceinvoke $r5.<gov.nist.core.net.NetworkLayer: java.net.DatagramSocket createDatagramSocket(int,java.net.InetAddress)>(i0, r1);

        r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.net.DatagramSocket sock> = $r6;

        $r7 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.net.DatagramSocket sock>;

        $i1 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: int getReceiveUdpBufferSize()>();

        virtualinvoke $r7.<java.net.DatagramSocket: void setReceiveBufferSize(int)>($i1);

        $r8 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.net.DatagramSocket sock>;

        $i2 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: int getSendUdpBufferSize()>();

        virtualinvoke $r8.<java.net.DatagramSocket: void setSendBufferSize(int)>($i2);

        $r9 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ThreadAuditor getThreadAuditor()>();

        $z0 = virtualinvoke $r9.<gov.nist.core.ThreadAuditor: boolean isEnabled()>();

        if $z0 == 0 goto label2;

        $r15 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.net.DatagramSocket sock>;

        $r14 = virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ThreadAuditor getThreadAuditor()>();

        $l4 = virtualinvoke $r14.<gov.nist.core.ThreadAuditor: long getPingIntervalInMillisecs()>();

        $i3 = (int) $l4;

        virtualinvoke $r15.<java.net.DatagramSocket: void setSoTimeout(int)>($i3);

     label2:
        $r10 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("0.0.0.0");

        if $z1 != 0 goto label3;

        $r13 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("::0");

        if $z2 == 0 goto label4;

     label3:
        $r12 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.net.DatagramSocket sock>;

        $r11 = virtualinvoke $r12.<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.MessageProcessor: void setIpAddress(java.net.InetAddress)>($r11);

     label4:
        goto label6;

     label5:
        $r17 := @caughtexception;

        r3 = $r17;

        $r16 = new java.io.IOException;

        $r18 = virtualinvoke r3.<java.net.SocketException: java.lang.String getMessage()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r16;

     label6:
        return;

        catch java.net.SocketException from label1 to label4 with label5;
    }

    public int getPort()
    {
        gov.nist.javax.sip.stack.UDPMessageProcessor r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.UDPMessageProcessor;

        $i0 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: int port>;

        return $i0;
    }

    public void start() throws java.io.IOException
    {
        gov.nist.javax.sip.stack.UDPMessageProcessor r0;
        java.lang.Thread r1, $r2;

        r0 := @this: gov.nist.javax.sip.stack.UDPMessageProcessor;

        r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: boolean isRunning> = 1;

        $r2 = new java.lang.Thread;

        specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable)>(r0);

        r1 = $r2;

        virtualinvoke r1.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke r1.<java.lang.Thread: void setName(java.lang.String)>("UDPMessageProcessorThread");

        virtualinvoke r1.<java.lang.Thread: void setPriority(int)>(10);

        virtualinvoke r1.<java.lang.Thread: void start()>();

        return;
    }

    public void run()
    {
        gov.nist.javax.sip.stack.UDPMessageProcessor r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, i10;
        gov.nist.javax.sip.stack.UDPMessageChannel r1, $r16, $r35;
        byte[] r2;
        java.net.DatagramPacket r3, $r12;
        float f0, $f1;
        boolean z0, $z1, $z2, $z4, $z5, $z6, $z7, $z9, $z10;
        java.lang.Throwable r4, r5, $r50, $r52;
        java.util.LinkedList $r6, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r38, $r39, $r40, r56, r59;
        gov.nist.javax.sip.stack.SIPTransactionStack $r7, $r8, $r13, $r14, $r15, $r24, $r25, $r32, $r33, $r34, $r36, $r37, $r43, $r44, $r46, $r49, $r53;
        gov.nist.core.ThreadAuditor $r9;
        java.net.DatagramSocket $r10, $r11;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b8;
        java.lang.StringBuilder $r26, $r27, $r30;
        gov.nist.core.StackLogger $r28, $r31, $r45, $r47, $r51;
        java.lang.String $r29;
        java.net.SocketTimeoutException $r41;
        java.net.SocketException $r42;
        java.lang.Exception $r48, r61;
        java.io.IOException $r54, r60;
        gov.nist.core.ThreadAuditor$ThreadHandle r55;

        r0 := @this: gov.nist.javax.sip.stack.UDPMessageProcessor;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageChannels> = $r6;

        $r7 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i1 = $r7.<gov.nist.javax.sip.stack.SIPTransactionStack: int threadPoolSize>;

        if $i1 == -1 goto label02;

        i0 = 0;

     label01:
        $r36 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i9 = $r36.<gov.nist.javax.sip.stack.SIPTransactionStack: int threadPoolSize>;

        if i0 >= $i9 goto label02;

        $r35 = new gov.nist.javax.sip.stack.UDPMessageChannel;

        $r34 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        specialinvoke $r35.<gov.nist.javax.sip.stack.UDPMessageChannel: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.UDPMessageProcessor)>($r34, r0);

        r1 = $r35;

        $r40 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageChannels>;

        virtualinvoke $r40.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);

        i0 = i0 + 1;

        goto label01;

     label02:
        $r8 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ThreadAuditor getThreadAuditor()>();

        r55 = virtualinvoke $r9.<gov.nist.core.ThreadAuditor: gov.nist.core.ThreadAuditor$ThreadHandle addCurrentThread()>();

     label03:
        $z1 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: boolean isRunning>;

        if $z1 == 0 goto label30;

     label04:
        virtualinvoke r55.<gov.nist.core.ThreadAuditor$ThreadHandle: void ping()>();

        $r10 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.net.DatagramSocket sock>;

        i10 = virtualinvoke $r10.<java.net.DatagramSocket: int getReceiveBufferSize()>();

        r2 = newarray (byte)[i10];

        $r12 = new java.net.DatagramPacket;

        specialinvoke $r12.<java.net.DatagramPacket: void <init>(byte[],int)>(r2, i10);

        r3 = $r12;

        $r11 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.net.DatagramSocket sock>;

        virtualinvoke $r11.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>(r3);

        $r13 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z2 = $r13.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean stackDoesCongestionControl>;

        if $z2 == 0 goto label10;

        $r20 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageQueue>;

        $i4 = virtualinvoke $r20.<java.util.LinkedList: int size()>();

        if $i4 < 5000 goto label06;

        $r33 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z6 = virtualinvoke $r33.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label05;

        $r32 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r31 = virtualinvoke $r32.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r31.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dropping message -- queue length exceeded");

     label05:
        goto label03;

     label06:
        $r22 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageQueue>;

        $i3 = virtualinvoke $r22.<java.util.LinkedList: int size()>();

        if $i3 <= 2500 goto label10;

        $r21 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageQueue>;

        $i7 = virtualinvoke $r21.<java.util.LinkedList: int size()>();

        if $i7 >= 5000 goto label10;

        $r23 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageQueue>;

        $i5 = virtualinvoke $r23.<java.util.LinkedList: int size()>();

        $i6 = $i5 - 2500;

        $f1 = (float) $i6;

        f0 = $f1 / 2500.0F;

        $d2 = staticinvoke <java.lang.Math: double random()>();

        $d0 = (double) f0;

        $d1 = 1.0 - $d0;

        $b8 = $d2 cmpl $d1;

        if $b8 <= 0 goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        z0 = $z5;

        if z0 == 0 goto label10;

        $r25 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z4 = virtualinvoke $r25.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label09;

        $r24 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $r28 = virtualinvoke $r24.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping message with probability  ");

        $d3 = (double) f0;

        $d4 = 1.0 - $d3;

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r28.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r29);

     label09:
        goto label03;

     label10:
        $r14 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $i2 = $r14.<gov.nist.javax.sip.stack.SIPTransactionStack: int threadPoolSize>;

        if $i2 == -1 goto label16;

        $r18 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageQueue>;

        r56 = $r18;

        entermonitor $r18;

     label11:
        $r17 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageQueue>;

        virtualinvoke $r17.<java.util.LinkedList: boolean add(java.lang.Object)>(r3);

        $r19 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageQueue>;

        virtualinvoke $r19.<java.lang.Object: void notify()>();

        exitmonitor r56;

     label12:
        goto label15;

     label13:
        $r52 := @caughtexception;

        r4 = $r52;

        exitmonitor r56;

     label14:
        throw r4;

     label15:
        goto label17;

     label16:
        $r16 = new gov.nist.javax.sip.stack.UDPMessageChannel;

        $r15 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        specialinvoke $r16.<gov.nist.javax.sip.stack.UDPMessageChannel: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.UDPMessageProcessor,java.net.DatagramPacket)>($r15, r0, r3);

     label17:
        goto label03;

     label18:
        $r41 := @caughtexception;

        goto label03;

     label19:
        $r42 := @caughtexception;

        $r37 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z7 = virtualinvoke $r37.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z7 == 0 goto label20;

        $r46 = virtualinvoke r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r47 = virtualinvoke $r46.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r47.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("UDPMessageProcessor: Stopping");

     label20:
        r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: boolean isRunning> = 0;

        $r38 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageQueue>;

        r59 = $r38;

        entermonitor $r38;

     label21:
        $r39 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageQueue>;

        virtualinvoke $r39.<java.lang.Object: void notifyAll()>();

        exitmonitor r59;

     label22:
        goto label25;

     label23:
        $r50 := @caughtexception;

        r5 = $r50;

        exitmonitor r59;

     label24:
        throw r5;

     label25:
        goto label03;

     label26:
        $r54 := @caughtexception;

        r60 = $r54;

        r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: boolean isRunning> = 0;

        virtualinvoke r60.<java.io.IOException: void printStackTrace()>();

        $r53 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z10 = virtualinvoke $r53.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z10 == 0 goto label27;

        $r49 = virtualinvoke r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r51 = virtualinvoke $r49.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r51.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("UDPMessageProcessor: Got an IO Exception");

     label27:
        goto label03;

     label28:
        $r48 := @caughtexception;

        r61 = $r48;

        $r43 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        $z9 = virtualinvoke $r43.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label29;

        $r44 = virtualinvoke r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        $r45 = virtualinvoke $r44.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r45.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("UDPMessageProcessor: Unexpected Exception - quitting");

     label29:
        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r61);

        return;

     label30:
        return;

        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.net.SocketTimeoutException from label04 to label05 with label18;
        catch java.net.SocketTimeoutException from label06 to label09 with label18;
        catch java.net.SocketTimeoutException from label10 to label17 with label18;
        catch java.net.SocketException from label04 to label05 with label19;
        catch java.net.SocketException from label06 to label09 with label19;
        catch java.net.SocketException from label10 to label17 with label19;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
        catch java.io.IOException from label04 to label05 with label26;
        catch java.io.IOException from label06 to label09 with label26;
        catch java.io.IOException from label10 to label17 with label26;
        catch java.lang.Exception from label04 to label05 with label28;
        catch java.lang.Exception from label06 to label09 with label28;
        catch java.lang.Exception from label10 to label17 with label28;
    }

    public void stop()
    {
        gov.nist.javax.sip.stack.UDPMessageProcessor r0;
        java.util.LinkedList r1, $r3, $r4;
        java.lang.Throwable r2, $r6;
        java.net.DatagramSocket $r5;

        r0 := @this: gov.nist.javax.sip.stack.UDPMessageProcessor;

        $r3 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageQueue>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: boolean isRunning> = 0;

        $r4 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageQueue>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

        $r5 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.net.DatagramSocket sock>;

        virtualinvoke $r5.<java.net.DatagramSocket: void close()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.String getTransport()
    {
        gov.nist.javax.sip.stack.UDPMessageProcessor r0;

        r0 := @this: gov.nist.javax.sip.stack.UDPMessageProcessor;

        return "udp";
    }

    public gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()
    {
        gov.nist.javax.sip.stack.UDPMessageProcessor r0;
        gov.nist.javax.sip.stack.SIPTransactionStack $r1;

        r0 := @this: gov.nist.javax.sip.stack.UDPMessageProcessor;

        $r1 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        return $r1;
    }

    public gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.core.HostPort) throws java.net.UnknownHostException
    {
        gov.nist.javax.sip.stack.UDPMessageProcessor r0;
        gov.nist.core.HostPort r1;
        gov.nist.javax.sip.stack.UDPMessageChannel $r2;
        java.net.InetAddress $r3;
        int $i0;
        gov.nist.javax.sip.stack.SIPTransactionStack $r4;

        r0 := @this: gov.nist.javax.sip.stack.UDPMessageProcessor;

        r1 := @parameter0: gov.nist.core.HostPort;

        $r2 = new gov.nist.javax.sip.stack.UDPMessageChannel;

        $r3 = virtualinvoke r1.<gov.nist.core.HostPort: java.net.InetAddress getInetAddress()>();

        $i0 = virtualinvoke r1.<gov.nist.core.HostPort: int getPort()>();

        $r4 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        specialinvoke $r2.<gov.nist.javax.sip.stack.UDPMessageChannel: void <init>(java.net.InetAddress,int,gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.UDPMessageProcessor)>($r3, $i0, $r4, r0);

        return $r2;
    }

    public gov.nist.javax.sip.stack.MessageChannel createMessageChannel(java.net.InetAddress, int) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.UDPMessageProcessor r0;
        java.net.InetAddress r1;
        int i0;
        gov.nist.javax.sip.stack.UDPMessageChannel $r2;
        gov.nist.javax.sip.stack.SIPTransactionStack $r3;

        r0 := @this: gov.nist.javax.sip.stack.UDPMessageProcessor;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        $r2 = new gov.nist.javax.sip.stack.UDPMessageChannel;

        $r3 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: gov.nist.javax.sip.stack.SIPTransactionStack sipStack>;

        specialinvoke $r2.<gov.nist.javax.sip.stack.UDPMessageChannel: void <init>(java.net.InetAddress,int,gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.UDPMessageProcessor)>(r1, i0, $r3, r0);

        return $r2;
    }

    public int getDefaultTargetPort()
    {
        gov.nist.javax.sip.stack.UDPMessageProcessor r0;

        r0 := @this: gov.nist.javax.sip.stack.UDPMessageProcessor;

        return 5060;
    }

    public boolean isSecure()
    {
        gov.nist.javax.sip.stack.UDPMessageProcessor r0;

        r0 := @this: gov.nist.javax.sip.stack.UDPMessageProcessor;

        return 0;
    }

    public int getMaximumMessageSize()
    {
        gov.nist.javax.sip.stack.UDPMessageProcessor r0;

        r0 := @this: gov.nist.javax.sip.stack.UDPMessageProcessor;

        return 8192;
    }

    public boolean inUse()
    {
        gov.nist.javax.sip.stack.UDPMessageProcessor r0;
        java.util.LinkedList r1, $r3, $r4;
        java.lang.Throwable r2, $r5;
        int $i0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.UDPMessageProcessor;

        $r3 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageQueue>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<gov.nist.javax.sip.stack.UDPMessageProcessor: java.util.LinkedList messageQueue>;

        $i0 = virtualinvoke $r4.<java.util.LinkedList: int size()>();

        if $i0 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor r1;

     label4:
        return $z0;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void <clinit>()
    {
        <gov.nist.javax.sip.stack.UDPMessageProcessor: int LOWAT> = 2500;

        <gov.nist.javax.sip.stack.UDPMessageProcessor: int HIGHWAT> = 5000;

        return;
    }
}
