public class com.android.i18n.phonenumbers.PhoneNumberUtil extends java.lang.Object
{
    static final com.android.i18n.phonenumbers.MetadataLoader DEFAULT_METADATA_LOADER;
    private static final java.util.logging.Logger logger;
    static final int REGEX_FLAGS;
    private static final int MIN_LENGTH_FOR_NSN;
    static final int MAX_LENGTH_FOR_NSN;
    static final int MAX_LENGTH_COUNTRY_CODE;
    private static final int MAX_INPUT_STRING_LENGTH;
    private static final java.lang.String META_DATA_FILE_PREFIX;
    private static final java.lang.String UNKNOWN_REGION;
    private static final int NANPA_COUNTRY_CODE;
    private static final java.lang.String COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX;
    private static final java.util.Map MOBILE_TOKEN_MAPPINGS;
    static final char PLUS_SIGN;
    private static final char STAR_SIGN;
    private static final java.lang.String RFC3966_EXTN_PREFIX;
    private static final java.lang.String RFC3966_PREFIX;
    private static final java.lang.String RFC3966_PHONE_CONTEXT;
    private static final java.lang.String RFC3966_ISDN_SUBADDRESS;
    private static final java.util.Map DIALLABLE_CHAR_MAPPINGS;
    private static final java.util.Map ALPHA_MAPPINGS;
    private static final java.util.Map ALPHA_PHONE_MAPPINGS;
    private static final java.util.Map ALL_PLUS_NUMBER_GROUPING_SYMBOLS;
    private static final java.util.regex.Pattern UNIQUE_INTERNATIONAL_PREFIX;
    static final java.lang.String VALID_PUNCTUATION;
    private static final java.lang.String DIGITS;
    private static final java.lang.String VALID_ALPHA;
    static final java.lang.String PLUS_CHARS;
    static final java.util.regex.Pattern PLUS_CHARS_PATTERN;
    private static final java.util.regex.Pattern SEPARATOR_PATTERN;
    private static final java.util.regex.Pattern CAPTURING_DIGIT_PATTERN;
    private static final java.lang.String VALID_START_CHAR;
    private static final java.util.regex.Pattern VALID_START_CHAR_PATTERN;
    private static final java.lang.String SECOND_NUMBER_START;
    static final java.util.regex.Pattern SECOND_NUMBER_START_PATTERN;
    private static final java.lang.String UNWANTED_END_CHARS;
    static final java.util.regex.Pattern UNWANTED_END_CHAR_PATTERN;
    private static final java.util.regex.Pattern VALID_ALPHA_PHONE_PATTERN;
    private static final java.lang.String VALID_PHONE_NUMBER;
    private static final java.lang.String DEFAULT_EXTN_PREFIX;
    private static final java.lang.String CAPTURING_EXTN_DIGITS;
    private static final java.lang.String EXTN_PATTERNS_FOR_PARSING;
    static final java.lang.String EXTN_PATTERNS_FOR_MATCHING;
    private static final java.util.regex.Pattern EXTN_PATTERN;
    private static final java.util.regex.Pattern VALID_PHONE_NUMBER_PATTERN;
    static final java.util.regex.Pattern NON_DIGITS_PATTERN;
    private static final java.util.regex.Pattern FIRST_GROUP_PATTERN;
    private static final java.util.regex.Pattern NP_PATTERN;
    private static final java.util.regex.Pattern FG_PATTERN;
    private static final java.util.regex.Pattern CC_PATTERN;
    private static final java.util.regex.Pattern FIRST_GROUP_ONLY_PREFIX_PATTERN;
    private static com.android.i18n.phonenumbers.PhoneNumberUtil instance;
    public static final java.lang.String REGION_CODE_FOR_NON_GEO_ENTITY;
    private final java.util.Map countryCallingCodeToRegionCodeMap;
    private final java.util.Set nanpaRegions;
    private final java.util.Map regionToMetadataMap;
    private final java.util.Map countryCodeToNonGeographicalMetadataMap;
    private final com.android.i18n.phonenumbers.RegexCache regexCache;
    private final java.util.Set supportedRegions;
    private final java.util.Set countryCodesForNonGeographicalRegion;
    private final java.lang.String currentFilePrefix;
    private final com.android.i18n.phonenumbers.MetadataLoader metadataLoader;

    private static java.lang.String createExtnPattern(java.lang.String)
    {
        java.lang.String r0, $r11;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";ext=(\\p{Nd}{1,7})|[ \u00a0\\t,]*(?:e?xt(?:ensi(?:o\u0301?|\u00f3))?n?|\uff45?\uff58\uff54\uff4e?|[");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]|int|anexo|\uff49\uff4e\uff54)");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[:\\.\uff0e]?[ \u00a0\\t,-]*");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(\\p{Nd}{1,7})");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#?|");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[- ]+(");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\p{Nd}");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{1,5})#");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    void <init>(java.lang.String, com.android.i18n.phonenumbers.MetadataLoader, java.util.Map)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r27;
        com.android.i18n.phonenumbers.MetadataLoader r2;
        java.util.Map r3, $r9, $r11;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        java.util.List r6;
        java.util.HashSet $r7, $r13, $r14;
        java.util.HashMap $r8, $r10;
        com.android.i18n.phonenumbers.RegexCache $r12;
        java.util.Set $r15, $r16, $r18, $r25, $r26;
        boolean $z0, $z1, $z4;
        java.lang.Integer $r17;
        java.util.Collection $r19;
        java.lang.Object $r20, $r22, $r24, $r28, $r29;
        java.util.logging.Level $r21;
        java.util.logging.Logger $r23;
        int $i0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.i18n.phonenumbers.MetadataLoader;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>(int)>(35);

        r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set nanpaRegions> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r9 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r8);

        r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map regionToMetadataMap> = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        $r11 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r10);

        r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map countryCodeToNonGeographicalMetadataMap> = $r11;

        $r12 = new com.android.i18n.phonenumbers.RegexCache;

        specialinvoke $r12.<com.android.i18n.phonenumbers.RegexCache: void <init>(int)>(100);

        r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.RegexCache regexCache> = $r12;

        $r13 = new java.util.HashSet;

        specialinvoke $r13.<java.util.HashSet: void <init>(int)>(320);

        r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set supportedRegions> = $r13;

        $r14 = new java.util.HashSet;

        specialinvoke $r14.<java.util.HashSet: void <init>()>();

        r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set countryCodesForNonGeographicalRegion> = $r14;

        r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String currentFilePrefix> = r1;

        r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.MetadataLoader metadataLoader> = r2;

        r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap> = r3;

        $r15 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r22 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r22;

        $r24 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6 = (java.util.List) $r24;

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i0 != 1 goto label2;

        $r27 = "001";

        $r28 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        $z4 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r28);

        if $z4 == 0 goto label2;

        $r26 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set countryCodesForNonGeographicalRegion>;

        $r29 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r26.<java.util.Set: boolean add(java.lang.Object)>($r29);

        goto label3;

     label2:
        $r25 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set supportedRegions>;

        interfaceinvoke $r25.<java.util.Set: boolean addAll(java.util.Collection)>(r6);

     label3:
        goto label1;

     label4:
        $r16 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set supportedRegions>;

        $z1 = interfaceinvoke $r16.<java.util.Set: boolean remove(java.lang.Object)>("001");

        if $z1 == 0 goto label5;

        $r23 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r21 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r23.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r21, "invalid metadata (country calling code was mapped to the non-geo entity as well as specific region(s))");

     label5:
        $r18 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set nanpaRegions>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r20 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        $r19 = (java.util.Collection) $r20;

        interfaceinvoke $r18.<java.util.Set: boolean addAll(java.util.Collection)>($r19);

        return;
    }

    void loadMetadataFromFile(java.lang.String, java.lang.String, int, com.android.i18n.phonenumbers.MetadataLoader)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r2, r4, $r9, $r26, $r28, $r33, $r42, $r44, $r45, $r55, $r58;
        int i0, $i1;
        com.android.i18n.phonenumbers.MetadataLoader r3;
        boolean z0, $z1;
        java.io.InputStream r5;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection r6;
        java.util.List r7;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r8;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r19, $r20, $r21, $r27, $r30, $r31, $r32, $r34, $r35, $r36, $r39, $r40, $r43, $r46, $r47, $r50, $r52, $r53, $r54, $r56, $r57;
        java.io.ObjectInputStream $r14, r60;
        java.lang.Object $r15;
        java.util.Map $r16, $r18;
        java.lang.Integer $r17;
        java.util.logging.Logger $r22, $r24, $r38, $r49;
        java.util.logging.Level $r23, $r25, $r37, $r48;
        java.lang.IllegalStateException $r29, $r41;
        java.io.IOException $r51, r61;
        java.lang.RuntimeException $r59;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: com.android.i18n.phonenumbers.MetadataLoader;

        $r9 = "001";

        z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        if z0 == 0 goto label1;

        $r44 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        goto label2;

     label1:
        $r44 = r2;

     label2:
        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        r4 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = interfaceinvoke r3.<com.android.i18n.phonenumbers.MetadataLoader: java.io.InputStream loadMetadata(java.lang.String)>(r4);

        if r5 != null goto label3;

        $r38 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r37 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("missing metadata: ");

        $r43 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r38.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r37, $r42);

        $r41 = new java.lang.IllegalStateException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("missing metadata: ");

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r45);

        throw $r41;

     label3:
        $r14 = new java.io.ObjectInputStream;

        specialinvoke $r14.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r5);

        r60 = $r14;

        r6 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection loadMetadataAndCloseInput(java.io.ObjectInputStream)>(r60);

        r7 = virtualinvoke r6.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: java.util.List getMetadataList()>();

        $z1 = interfaceinvoke r7.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        $r24 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r25 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("empty metadata: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r24.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r25, $r28);

        $r29 = new java.lang.IllegalStateException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("empty metadata: ");

        $r32 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r33);

        throw $r29;

     label4:
        $i1 = interfaceinvoke r7.<java.util.List: int size()>();

        if $i1 <= 1 goto label5;

        $r22 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r23 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid metadata (too many entries): ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r23, $r26);

     label5:
        $r15 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(0);

        r8 = (com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata) $r15;

        if z0 == 0 goto label6;

        $r18 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map countryCodeToNonGeographicalMetadataMap>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r8);

        goto label7;

     label6:
        $r16 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map regionToMetadataMap>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r8);

     label7:
        goto label9;

     label8:
        $r51 := @caughtexception;

        r61 = $r51;

        $r49 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r48 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot load/parse metadata: ");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r49.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r48, $r58, r61);

        $r59 = new java.lang.RuntimeException;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot load/parse metadata: ");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r59.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r55, r61);

        throw $r59;

     label9:
        return;

        catch java.io.IOException from label3 to label7 with label8;
    }

    private static com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection loadMetadataAndCloseInput(java.io.ObjectInputStream)
    {
        java.io.ObjectInputStream r0;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection r1, $r8;
        java.io.IOException r2, r6, $r9, $r13, $r18, $r23, r25, r26;
        java.util.logging.Level $r10, $r14, $r21, $r22;
        java.util.logging.Logger $r11, $r15, $r20, $r24;
        java.lang.Throwable $r12, $r16, $r17, $r19;

        r0 := @parameter0: java.io.ObjectInputStream;

        $r8 = new com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection;

        specialinvoke $r8.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: void <init>()>();

        r1 = $r8;

     label01:
        virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: void readExternal(java.io.ObjectInput)>(r0);

     label02:
        virtualinvoke r0.<java.io.ObjectInputStream: void close()>();

     label03:
        return r1;

     label04:
        $r23 := @caughtexception;

        r2 = $r23;

        $r24 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r22 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r24.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r22, "error closing input stream (ignored)", r2);

     label05:
        return r1;

     label06:
        $r16 := @caughtexception;

     label07:
        return r1;

     label08:
        $r18 := @caughtexception;

        r25 = $r18;

        $r20 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r21 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r20.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r21, "error reading input (ignored)", r25);

     label09:
        virtualinvoke r0.<java.io.ObjectInputStream: void close()>();

     label10:
        return r1;

     label11:
        $r9 := @caughtexception;

        r26 = $r9;

        $r11 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r10 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r11.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r10, "error closing input stream (ignored)", r26);

     label12:
        return r1;

     label13:
        $r12 := @caughtexception;

     label14:
        return r1;

     label15:
        $r19 := @caughtexception;

     label16:
        virtualinvoke r0.<java.io.ObjectInputStream: void close()>();

     label17:
        return r1;

     label18:
        $r13 := @caughtexception;

        r6 = $r13;

        $r15 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r14 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r15.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r14, "error closing input stream (ignored)", r6);

     label19:
        return r1;

     label20:
        $r17 := @caughtexception;

     label21:
        return r1;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.io.IOException from label01 to label02 with label08;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    static java.lang.String extractPossibleNumber(java.lang.String)
    {
        java.lang.String r0, $r12, r13;
        java.util.regex.Matcher r1, r2, r3;
        java.util.regex.Pattern $r4, $r5, $r6;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r7, $r10, $r11;
        java.util.logging.Level $r8;
        java.util.logging.Logger $r9;

        r0 := @parameter0: java.lang.String;

        $r4 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern VALID_START_CHAR_PATTERN>;

        r1 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke r1.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke r1.<java.util.regex.Matcher: int start()>();

        r13 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $r5 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern UNWANTED_END_CHAR_PATTERN>;

        r2 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r13);

        $z1 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label1;

        $i2 = virtualinvoke r2.<java.util.regex.Matcher: int start()>();

        r13 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r9 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stripped trailing characters: ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r8, $r12);

     label1:
        $r6 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern SECOND_NUMBER_START_PATTERN>;

        r3 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r13);

        $z2 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>();

        if $z2 == 0 goto label2;

        $i1 = virtualinvoke r3.<java.util.regex.Matcher: int start()>();

        r13 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label2:
        return r13;

     label3:
        return "";
    }

    static boolean isViablePhoneNumber(java.lang.String)
    {
        java.lang.String r0;
        java.util.regex.Matcher r1;
        int $i0;
        java.util.regex.Pattern $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 >= 2 goto label1;

        return 0;

     label1:
        $r2 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern VALID_PHONE_NUMBER_PATTERN>;

        r1 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke r1.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    static java.lang.String normalize(java.lang.String)
    {
        java.lang.String r0, $r3, $r5;
        java.util.regex.Matcher r1;
        java.util.regex.Pattern $r2;
        boolean $z0;
        java.util.Map $r4;

        r0 := @parameter0: java.lang.String;

        $r2 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern VALID_ALPHA_PHONE_PATTERN>;

        r1 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke r1.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $r4 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_PHONE_MAPPINGS>;

        $r5 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalizeHelper(java.lang.String,java.util.Map,boolean)>(r0, $r4, 1);

        return $r5;

     label1:
        $r3 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDigitsOnly(java.lang.String)>(r0);

        return $r3;
    }

    static void normalize(java.lang.StringBuilder)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1, $r2;
        int $i0;

        r0 := @parameter0: java.lang.StringBuilder;

        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalize(java.lang.String)>($r2);

        $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(0, $i0, r1);

        return;
    }

    public static java.lang.String normalizeDigitsOnly(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.lang.StringBuilder $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.StringBuilder normalizeDigits(java.lang.String,boolean)>(r0, 0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    static java.lang.StringBuilder normalizeDigits(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0;
        java.lang.StringBuilder r1, $r3;
        char[] r2;
        int i0, i1, i3, $i4;
        char c2;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r3 = new java.lang.StringBuilder;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i4);

        r1 = $r3;

        r2 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        c2 = r2[i1];

        i3 = staticinvoke <java.lang.Character: int digit(char,int)>(c2, 10);

        if i3 == -1 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        goto label3;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return r1;
    }

    static java.lang.String normalizeDiallableCharsOnly(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.util.Map $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map DIALLABLE_CHAR_MAPPINGS>;

        $r2 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalizeHelper(java.lang.String,java.util.Map,boolean)>(r0, $r1, 1);

        return $r2;
    }

    public static java.lang.String convertAlphaCharactersInNumber(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.util.Map $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_PHONE_MAPPINGS>;

        $r2 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalizeHelper(java.lang.String,java.util.Map,boolean)>(r0, $r1, 0);

        return $r2;
    }

    public int getLengthOfGeographicalAreaCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r2;
        java.lang.String $r3;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        $r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        r2 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>($r3);

        if r2 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean hasNationalPrefix()>();

        if $z0 != 0 goto label2;

        $z2 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean isItalianLeadingZero()>();

        if $z2 != 0 goto label2;

        return 0;

     label2:
        $z1 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberGeographical(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $i0 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: int getLengthOfNationalDestinationCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        return $i0;
    }

    public int getLengthOfNationalDestinationCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1, r2, $r14;
        java.lang.String r3, r5, $r10, $r11, $r12;
        java.lang.String[] r4;
        boolean $z0, $z1;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat $r6;
        java.util.regex.Pattern $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType $r8, $r9;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        $z0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasExtension()>();

        if $z0 == 0 goto label1;

        $r14 = new com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r14.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        r2 = $r14;

        virtualinvoke r2.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber mergeFrom(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        virtualinvoke r2.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearExtension()>();

        goto label2;

     label1:
        r2 = r1;

     label2:
        $r6 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r2, $r6);

        $r7 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern NON_DIGITS_PATTERN>;

        r4 = virtualinvoke $r7.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(r3);

        $i0 = lengthof r4;

        if $i0 > 3 goto label3;

        return 0;

     label3:
        $r8 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r9 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType MOBILE>;

        if $r8 != $r9 goto label4;

        $i2 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r5 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getCountryMobileToken(int)>($i2);

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label4;

        $r11 = r4[2];

        $i3 = virtualinvoke $r11.<java.lang.String: int length()>();

        $r12 = r4[3];

        $i5 = virtualinvoke $r12.<java.lang.String: int length()>();

        $i4 = $i3 + $i5;

        return $i4;

     label4:
        $r10 = r4[2];

        $i1 = virtualinvoke $r10.<java.lang.String: int length()>();

        return $i1;
    }

    public static java.lang.String getCountryMobileToken(int)
    {
        int i0;
        java.util.Map $r0, $r2;
        java.lang.Integer $r1, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        $r0 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map MOBILE_TOKEN_MAPPINGS>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map MOBILE_TOKEN_MAPPINGS>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (java.lang.String) $r4;

        return $r5;

     label1:
        return "";
    }

    private static java.lang.String normalizeHelper(java.lang.String, java.util.Map, boolean)
    {
        java.lang.String r0, $r5;
        java.util.Map r1;
        boolean z0;
        java.lang.StringBuilder r2, $r4;
        int i0, $i2, $i3;
        char c1, $c4;
        java.lang.Character r3, $r6;
        java.lang.Object $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Map;

        z0 := @parameter2: boolean;

        $r4 = new java.lang.StringBuilder;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i2);

        r2 = $r4;

        i0 = 0;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i3 goto label4;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $c4 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c1);

        $r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4);

        $r7 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r3 = (java.lang.Character) $r7;

        if r3 == null goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        goto label3;

     label2:
        if z0 != 0 goto label3;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static synchronized void setInstance(com.android.i18n.phonenumbers.PhoneNumberUtil)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;

        r0 := @parameter0: com.android.i18n.phonenumbers.PhoneNumberUtil;

        <com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil instance> = r0;

        return;
    }

    public java.util.Set getSupportedRegions()
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.util.Set $r1, $r2;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        $r1 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set supportedRegions>;

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r2;
    }

    public java.util.Set getSupportedGlobalNetworkCallingCodes()
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.util.Set $r1, $r2;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        $r1 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set countryCodesForNonGeographicalRegion>;

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r2;
    }

    public static synchronized com.android.i18n.phonenumbers.PhoneNumberUtil getInstance()
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil $r0, $r1, $r3;
        com.android.i18n.phonenumbers.MetadataLoader $r2;

        $r0 = <com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil instance>;

        if $r0 != null goto label1;

        $r2 = <com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.MetadataLoader DEFAULT_METADATA_LOADER>;

        $r3 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil createInstance(com.android.i18n.phonenumbers.MetadataLoader)>($r2);

        staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: void setInstance(com.android.i18n.phonenumbers.PhoneNumberUtil)>($r3);

     label1:
        $r1 = <com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil instance>;

        return $r1;
    }

    public static com.android.i18n.phonenumbers.PhoneNumberUtil createInstance(com.android.i18n.phonenumbers.MetadataLoader)
    {
        com.android.i18n.phonenumbers.MetadataLoader r0;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r1;
        java.util.Map $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: com.android.i18n.phonenumbers.MetadataLoader;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("metadataLoader could not be null.");

        throw $r3;

     label1:
        $r1 = new com.android.i18n.phonenumbers.PhoneNumberUtil;

        $r2 = staticinvoke <com.android.i18n.phonenumbers.CountryCodeToRegionCodeMap: java.util.Map getCountryCodeToRegionCodeMap()>();

        specialinvoke $r1.<com.android.i18n.phonenumbers.PhoneNumberUtil: void <init>(java.lang.String,com.android.i18n.phonenumbers.MetadataLoader,java.util.Map)>("/com/android/i18n/phonenumbers/data/PhoneNumberMetadataProto", r0, $r2);

        return $r1;
    }

    static boolean formattingRuleHasFirstGroupOnly(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r1 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern FIRST_GROUP_ONLY_PREFIX_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    boolean isNumberGeographical(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r3 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE>;

        if r2 == $r3 goto label1;

        $r4 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE_OR_MOBILE>;

        if r2 != $r4 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean isValidRegionCode(java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1;
        java.util.Set $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r2 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set supportedRegions>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean hasValidCountryCallingCode(int)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        int i0;
        java.util.Map $r1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r2;
        java.lang.String r3, $r5;
        long $l0;
        byte $b1;
        java.lang.StringBuilder $r4, r6;
        boolean $z0;
        int $i2;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        $l0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $z0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasRawInput()>();

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>();

        $i2 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i2 <= 0 goto label1;

        return r3;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(20);

        r6 = $r4;

        virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(r1, r2, r6);

        $r5 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public void format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat, java.lang.StringBuilder)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r2, $r7, $r12;
        java.lang.StringBuilder r3;
        int i0;
        java.lang.String r4, r5, $r8;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r6;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        r3 := @parameter2: java.lang.StringBuilder;

        virtualinvoke r3.<java.lang.StringBuilder: void setLength(int)>(0);

        i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r7 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat E164>;

        if r2 != $r7 goto label1;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat E164>;

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void prefixNumberWithCountryCallingCode(int,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(i0, $r12, r3);

        return;

     label1:
        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean hasValidCountryCallingCode(int)>(i0);

        if $z0 != 0 goto label2;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        return;

     label2:
        r5 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r6 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, r5);

        $r8 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatNsn(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r4, r6, r2);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void maybeAppendFormattedExtension(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(r1, r6, r2, r3);

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void prefixNumberWithCountryCallingCode(int,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(i0, r2, r3);

        return;
    }

    public java.lang.String formatByPattern(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat, java.util.List)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r2;
        java.util.List r3;
        int i0, $i1, $i2;
        java.lang.String r4, r5, r10, r11, $r16, $r17, r25, r26;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r6;
        java.lang.StringBuilder r7, $r12;
        com.android.i18n.phonenumbers.Phonemetadata$NumberFormat r8, r9, $r14;
        boolean $z0;
        java.util.regex.Matcher $r19, $r21;
        java.util.regex.Pattern $r20, $r22;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        r3 := @parameter2: java.util.List;

        i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean hasValidCountryCallingCode(int)>(i0);

        if $z0 != 0 goto label1;

        return r4;

     label1:
        r5 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r6 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, r5);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(int)>(20);

        r7 = $r12;

        r8 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat chooseFormattingPatternForNumber(java.util.List,java.lang.String)>(r3, r4);

        if r8 != null goto label2;

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        goto label5;

     label2:
        $r14 = new com.android.i18n.phonenumbers.Phonemetadata$NumberFormat;

        specialinvoke $r14.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: void <init>()>();

        r9 = $r14;

        virtualinvoke r9.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat mergeFrom(com.android.i18n.phonenumbers.Phonemetadata$NumberFormat)>(r8);

        r10 = virtualinvoke r8.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getNationalPrefixFormattingRule()>();

        $i1 = virtualinvoke r10.<java.lang.String: int length()>();

        if $i1 <= 0 goto label4;

        r11 = virtualinvoke r6.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefix()>();

        $i2 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i2 <= 0 goto label3;

        $r20 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern NP_PATTERN>;

        $r19 = virtualinvoke $r20.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r10);

        r25 = virtualinvoke $r19.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(r11);

        $r22 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern FG_PATTERN>;

        $r21 = virtualinvoke $r22.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r25);

        r26 = virtualinvoke $r21.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>("\\$1");

        virtualinvoke r9.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setNationalPrefixFormattingRule(java.lang.String)>(r26);

        goto label4;

     label3:
        virtualinvoke r9.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat clearNationalPrefixFormattingRule()>();

     label4:
        $r16 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatNsnUsingPattern(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$NumberFormat,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r4, r9, r2);

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

     label5:
        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void maybeAppendFormattedExtension(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(r1, r6, r2, r7);

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void prefixNumberWithCountryCallingCode(int,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(i0, r2, r7);

        $r17 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;
    }

    public java.lang.String formatNationalNumberWithCarrierCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.String r2, r3, r4, $r9, $r12;
        int i0;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r5;
        java.lang.StringBuilder r6, $r7;
        boolean $z0;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat $r8, $r10, $r13;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.lang.String;

        i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean hasValidCountryCallingCode(int)>(i0);

        if $z0 != 0 goto label1;

        return r3;

     label1:
        r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r5 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, r4);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>(20);

        r6 = $r7;

        $r8 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        $r9 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatNsn(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.String)>(r3, r5, $r8, r2);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void maybeAppendFormattedExtension(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(r1, r5, $r10, r6);

        $r13 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void prefixNumberWithCountryCallingCode(int,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(i0, $r13, r6);

        $r12 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    private com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        int i0;
        java.lang.String r1, $r2;
        boolean $z0;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata $r3;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = "001";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(int)>(i0);

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r1);

     label2:
        return $r3;
    }

    public java.lang.String formatNationalNumberWithPreferredCarrierCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.String r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasPreferredDomesticCarrierCode()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getPreferredDomesticCarrierCode()>();

        goto label2;

     label1:
        $r4 = r2;

     label2:
        $r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatNationalNumberWithCarrierCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>(r1, $r4);

        return $r3;
    }

    public java.lang.String formatNumberForMobileDialing(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String, boolean)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1, r4, $r8, $r9;
        java.lang.String r2, r3, r5, $r11, $r14, $r18, $r25, $r27, $r30, $r32;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        int i0;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType r6, $r10, $r15, $r28, $r29, $r31;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r7;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat $r12, $r13, $r16, $r17, $r19, $r21, $r22;
        java.lang.StringBuilder $r20, $r23, $r24, $r26;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        $z3 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean hasValidCountryCallingCode(int)>(i0);

        if $z3 != 0 goto label03;

        $z16 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasRawInput()>();

        if $z16 == 0 goto label01;

        $r32 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>();

        goto label02;

     label01:
        $r32 = "";

     label02:
        return $r32;

     label03:
        r3 = "";

        $r8 = new com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r8.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        $r9 = virtualinvoke $r8.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber mergeFrom(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        r4 = virtualinvoke $r9.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearExtension()>();

        r5 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r6 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r4);

        $r10 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        if r6 == $r10 goto label04;

        $z17 = 1;

        goto label05;

     label04:
        $z17 = 0;

     label05:
        z1 = $z17;

        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z4 == 0 goto label21;

        $r15 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE>;

        if r6 == $r15 goto label06;

        $r28 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType MOBILE>;

        if r6 == $r28 goto label06;

        $r31 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE_OR_MOBILE>;

        if r6 != $r31 goto label07;

     label06:
        $z18 = 1;

        goto label08;

     label07:
        $z18 = 0;

     label08:
        z2 = $z18;

        $z7 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("CO");

        if $z7 == 0 goto label09;

        $r29 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE>;

        if r6 != $r29 goto label09;

        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatNationalNumberWithCarrierCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>(r4, "3");

        goto label20;

     label09:
        $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("BR");

        if $z6 == 0 goto label12;

        if z2 == 0 goto label12;

        $z15 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasPreferredDomesticCarrierCode()>();

        if $z15 == 0 goto label10;

        $r30 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatNationalNumberWithPreferredCarrierCode(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>(r4, "");

        goto label11;

     label10:
        $r30 = "";

     label11:
        r3 = $r30;

        goto label20;

     label12:
        if z1 == 0 goto label13;

        $z14 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("HU");

        if $z14 == 0 goto label13;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNddPrefixForRegion(java.lang.String,boolean)>(r5, 1);

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r22 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        $r27 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r4, $r22);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        r3 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label20;

     label13:
        if i0 != 1 goto label16;

        r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r2);

        $z10 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean canBeInternationallyDialled(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r4);

        if $z10 == 0 goto label14;

        $r18 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r4);

        $z13 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isShorterThanPossibleNormalNumber(com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.String)>(r7, $r18);

        if $z13 != 0 goto label14;

        $r21 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r4, $r21);

        goto label15;

     label14:
        $r19 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r4, $r19);

     label15:
        goto label20;

     label16:
        $z9 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("001");

        if $z9 != 0 goto label18;

        $z11 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("MX");

        if $z11 != 0 goto label17;

        $z12 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("CL");

        if $z12 == 0 goto label19;

     label17:
        if z2 == 0 goto label19;

     label18:
        $z8 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean canBeInternationallyDialled(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r4);

        if $z8 == 0 goto label19;

        $r16 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r4, $r16);

        goto label20;

     label19:
        $r17 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r4, $r17);

     label20:
        goto label24;

     label21:
        if z1 == 0 goto label24;

        $z5 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean canBeInternationallyDialled(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r4);

        if $z5 == 0 goto label24;

        if z0 == 0 goto label22;

        $r13 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        $r14 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r4, $r13);

        goto label23;

     label22:
        $r12 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat E164>;

        $r14 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r4, $r12);

     label23:
        return $r14;

     label24:
        if z0 == 0 goto label25;

        $r11 = r3;

        goto label26;

     label25:
        $r11 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDiallableCharsOnly(java.lang.String)>(r3);

     label26:
        return $r11;
    }

    public java.lang.String formatOutOfCountryCallingNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.String r2, r3, r5, r6, r7, r9, $r16, $r22, $r28, $r30, $r36, $r38;
        int i0, $i1, $i2;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r4, r8;
        java.lang.StringBuilder r10, $r14, $r18, $r20, $r21, $r24, $r26, $r27, $r29, $r31, $r32, $r33, $r39;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.regex.Pattern $r11;
        java.util.regex.Matcher $r12;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat $r13, $r15, $r17, $r23, $r25, $r37;
        java.util.logging.Level $r34;
        java.util.logging.Logger $r35;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isValidRegionCode(java.lang.String)>(r2);

        if $z0 != 0 goto label1;

        $r35 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r34 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to format number from invalid region ");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r39 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". International formatting applied.");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r35.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r34, $r38);

        $r37 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        $r36 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r1, $r37);

        return $r36;

     label1:
        i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $z1 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean hasValidCountryCallingCode(int)>(i0);

        if $z1 != 0 goto label2;

        return r3;

     label2:
        if i0 != 1 goto label3;

        $z4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNANPACountry(java.lang.String)>(r2);

        if $z4 == 0 goto label4;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r25 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        $r30 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r1, $r25);

        $r31 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r28;

     label3:
        $i1 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: int getCountryCodeForValidRegion(java.lang.String)>(r2);

        if i0 != $i1 goto label4;

        $r23 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        $r22 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r1, $r23);

        return $r22;

     label4:
        r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r2);

        r5 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getInternationalPrefix()>();

        r6 = "";

        $r11 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern UNIQUE_INTERNATIONAL_PREFIX>;

        $r12 = virtualinvoke $r11.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r5);

        $z2 = virtualinvoke $r12.<java.util.regex.Matcher: boolean matches()>();

        if $z2 == 0 goto label5;

        r6 = r5;

        goto label6;

     label5:
        $z3 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean hasPreferredInternationalPrefix()>();

        if $z3 == 0 goto label6;

        r6 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getPreferredInternationalPrefix()>();

     label6:
        r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r8 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, r7);

        $r13 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        r9 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatNsn(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r3, r8, $r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>(r9);

        r10 = $r14;

        $r15 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void maybeAppendFormattedExtension(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(r1, r8, $r15, r10);

        $i2 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i2 <= 0 goto label7;

        $r20 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, " ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>(0, i0);

        $r18 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, " ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, r6);

        goto label8;

     label7:
        $r17 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void prefixNumberWithCountryCallingCode(int,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(i0, $r17, r10);

     label8:
        $r16 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    public java.lang.String formatInOriginalFormat(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.String r2, r3, r4, r5, r6, r8, r10, $r17, $r19, $r27, $r28, r29, r30, r31, r32, r33;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r7;
        com.android.i18n.phonenumbers.Phonemetadata$NumberFormat r9, r11, $r24;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.ArrayList r12, $r21;
        boolean $z0, $z1, $z2, $z3, $z5, $z6;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource $r13;
        int[] $r14;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat $r15, $r16, $r18, $r25, $r26;
        java.util.List $r20;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasRawInput()>();

        if $z0 == 0 goto label02;

        $z6 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean hasUnexpectedItalianLeadingZero(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        if $z6 != 0 goto label01;

        $z5 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean hasFormattingPatternForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        if $z5 != 0 goto label02;

     label01:
        $r27 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>();

        return $r27;

     label02:
        $z1 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasCountryCodeSource()>();

        if $z1 != 0 goto label03;

        $r25 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        $r28 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r1, $r25);

        return $r28;

     label03:
        $r14 = <com.android.i18n.phonenumbers.PhoneNumberUtil$3: int[] $SwitchMap$com$android$i18n$phonenumbers$Phonenumber$PhoneNumber$CountryCodeSource>;

        $r13 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource getCountryCodeSource()>();

        $i2 = virtualinvoke $r13.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: int ordinal()>();

        $i1 = $r14[$i2];

        tableswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label07;
            default: goto label07;
        };

     label04:
        $r15 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r1, $r15);

        goto label14;

     label05:
        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatOutOfCountryCallingNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>(r1, r2);

        goto label14;

     label06:
        $r16 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        $r17 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r1, $r16);

        r3 = virtualinvoke $r17.<java.lang.String: java.lang.String substring(int)>(1);

        goto label14;

     label07:
        $i4 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>($i4);

        r5 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNddPrefixForRegion(java.lang.String,boolean)>(r4, 1);

        $r18 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        r6 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r1, $r18);

        if r5 == null goto label08;

        $i5 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i5 != 0 goto label09;

     label08:
        r3 = r6;

        goto label14;

     label09:
        $r19 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>();

        $z3 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean rawInputContainsNationalPrefix(java.lang.String,java.lang.String,java.lang.String)>($r19, r5, r4);

        if $z3 == 0 goto label10;

        r3 = r6;

        goto label14;

     label10:
        r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r4);

        r8 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r20 = virtualinvoke r7.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()>();

        r9 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat chooseFormattingPatternForNumber(java.util.List,java.lang.String)>($r20, r8);

        if r9 != null goto label11;

        r3 = r6;

        goto label14;

     label11:
        r10 = virtualinvoke r9.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getNationalPrefixFormattingRule()>();

        i0 = virtualinvoke r10.<java.lang.String: int indexOf(java.lang.String)>("$1");

        if i0 > 0 goto label12;

        r3 = r6;

        goto label14;

     label12:
        r29 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        r30 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDigitsOnly(java.lang.String)>(r29);

        $i6 = virtualinvoke r30.<java.lang.String: int length()>();

        if $i6 != 0 goto label13;

        r3 = r6;

        goto label14;

     label13:
        $r24 = new com.android.i18n.phonenumbers.Phonemetadata$NumberFormat;

        specialinvoke $r24.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: void <init>()>();

        r11 = $r24;

        virtualinvoke r11.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat mergeFrom(com.android.i18n.phonenumbers.Phonemetadata$NumberFormat)>(r9);

        virtualinvoke r11.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat clearNationalPrefixFormattingRule()>();

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>(int)>(1);

        r12 = $r21;

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r11);

        $r26 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatByPattern(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.util.List)>(r1, $r26, r12);

     label14:
        r31 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>();

        if r3 == null goto label15;

        $i3 = virtualinvoke r31.<java.lang.String: int length()>();

        if $i3 <= 0 goto label15;

        r32 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDiallableCharsOnly(java.lang.String)>(r3);

        r33 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDiallableCharsOnly(java.lang.String)>(r31);

        $z2 = virtualinvoke r32.<java.lang.String: boolean equals(java.lang.Object)>(r33);

        if $z2 != 0 goto label15;

        r3 = r31;

     label15:
        return r3;
    }

    private boolean rawInputContainsNationalPrefix(java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r2, r3, r4, $r6;
        boolean $z0, $z1;
        int $i0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber $r7;
        com.android.i18n.phonenumbers.NumberParseException $r8;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDigitsOnly(java.lang.String)>(r1);

        $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>(r2);

        if $z0 == 0 goto label4;

     label1:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $r6 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i0);

        $r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.String,java.lang.String)>($r6, r3);

        $z1 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>($r7);

     label2:
        return $z1;

     label3:
        $r8 := @caughtexception;

        return 0;

     label4:
        return 0;

        catch com.android.i18n.phonenumbers.NumberParseException from label1 to label2 with label3;
    }

    private boolean hasUnexpectedItalianLeadingZero(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        $z0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean isItalianLeadingZero()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        $z1 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isLeadingZeroPossible(int)>($i0);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private boolean hasFormattingPatternForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        int i0;
        java.lang.String r2, r4;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r3;
        com.android.i18n.phonenumbers.Phonemetadata$NumberFormat r5;
        java.util.List $r6;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r2 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r3 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, r2);

        if r3 != null goto label1;

        return 0;

     label1:
        r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r6 = virtualinvoke r3.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()>();

        r5 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat chooseFormattingPatternForNumber(java.util.List,java.lang.String)>($r6, r4);

        if r5 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.lang.String formatOutOfCountryKeepingAlphaChars(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.String r2, r3, r4, r7, $r17, $r22, $r26, $r31, $r38, $r39, $r41, r42, r44, r45;
        int i0, i1, $i2, $i3, $i4, $i5;
        com.android.i18n.phonenumbers.Phonemetadata$NumberFormat r5, r6, $r28;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r8, r43;
        boolean $z0, $z1, $z2;
        java.util.Map $r9;
        java.lang.StringBuilder $r10, $r12, $r15, $r16, $r18, $r19, $r20, $r24, $r35, $r36, $r37, $r40, r46;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat $r11, $r21, $r32;
        java.util.logging.Level $r13;
        java.util.logging.Logger $r14;
        java.util.regex.Pattern $r23;
        java.util.regex.Matcher $r27;
        java.util.List $r30;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>();

        $i2 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i2 != 0 goto label01;

        $r41 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatOutOfCountryCallingNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>(r1, r2);

        return $r41;

     label01:
        i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean hasValidCountryCallingCode(int)>(i0);

        if $z0 != 0 goto label02;

        return r3;

     label02:
        $r9 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map ALL_PLUS_NUMBER_GROUPING_SYMBOLS>;

        r42 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalizeHelper(java.lang.String,java.util.Map,boolean)>(r3, $r9, 1);

        r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $i3 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i3 <= 3 goto label03;

        $r38 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, 3);

        i1 = virtualinvoke r42.<java.lang.String: int indexOf(java.lang.String)>($r38);

        if i1 == -1 goto label03;

        r42 = virtualinvoke r42.<java.lang.String: java.lang.String substring(int)>(i1);

     label03:
        r43 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r2);

        if i0 != 1 goto label04;

        $z2 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNANPACountry(java.lang.String)>(r2);

        if $z2 == 0 goto label06;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r39;

     label04:
        if r43 == null goto label06;

        $i5 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: int getCountryCodeForValidRegion(java.lang.String)>(r2);

        if i0 != $i5 goto label06;

        $r30 = virtualinvoke r43.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()>();

        r5 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat chooseFormattingPatternForNumber(java.util.List,java.lang.String)>($r30, r4);

        if r5 != null goto label05;

        return r42;

     label05:
        $r28 = new com.android.i18n.phonenumbers.Phonemetadata$NumberFormat;

        specialinvoke $r28.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: void <init>()>();

        r6 = $r28;

        virtualinvoke r6.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat mergeFrom(com.android.i18n.phonenumbers.Phonemetadata$NumberFormat)>(r5);

        virtualinvoke r6.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setPattern(java.lang.String)>("(\\d+)(.*)");

        virtualinvoke r6.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setFormat(java.lang.String)>("$1$2");

        $r32 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        $r31 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatNsnUsingPattern(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$NumberFormat,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r42, r6, $r32);

        return $r31;

     label06:
        r44 = "";

        if r43 == null goto label09;

        r45 = virtualinvoke r43.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getInternationalPrefix()>();

        $r23 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern UNIQUE_INTERNATIONAL_PREFIX>;

        $r27 = virtualinvoke $r23.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45);

        $z1 = virtualinvoke $r27.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label07;

        $r26 = r45;

        goto label08;

     label07:
        $r26 = virtualinvoke r43.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getPreferredInternationalPrefix()>();

     label08:
        r44 = $r26;

     label09:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(r42);

        r46 = $r10;

        r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r8 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, r7);

        $r11 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void maybeAppendFormattedExtension(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(r1, r8, $r11, r46);

        $i4 = virtualinvoke r44.<java.lang.String: int length()>();

        if $i4 <= 0 goto label10;

        $r19 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, " ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>(0, i0);

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, " ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, r44);

        goto label11;

     label10:
        $r14 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r13 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to format number from invalid region ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". International formatting applied.");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r13, $r17);

        $r21 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void prefixNumberWithCountryCallingCode(int,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(i0, $r21, r46);

     label11:
        $r22 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r22;
    }

    public java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.StringBuilder r2, $r4;
        char[] r3;
        boolean $z0;
        long $l0;
        java.lang.String $r6, $r7;
        int $i1;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r2 = $r4;

        $z0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean isItalianLeadingZero()>();

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getNumberOfLeadingZeros()>();

        r3 = newarray (char)[$i1];

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r3, 48);

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(char[])>(r3);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label1:
        $l0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private void prefixNumberWithCountryCallingCode(int, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat, java.lang.StringBuilder)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        int i0, $i1, $i2;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r1;
        java.lang.StringBuilder r2, $r4, $r6, $r7, $r8, $r10, $r11;
        int[] $r3;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        r2 := @parameter2: java.lang.StringBuilder;

        $r3 = <com.android.i18n.phonenumbers.PhoneNumberUtil$3: int[] $SwitchMap$com$android$i18n$phonenumbers$PhoneNumberUtil$PhoneNumberFormat>;

        $i1 = virtualinvoke r1.<com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: int ordinal()>();

        $i2 = $r3[$i1];

        tableswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label4;
        };

     label1:
        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>(0, i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 43);

        return;

     label2:
        $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, " ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>(0, i0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 43);

        return;

     label3:
        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, "-");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>(0, i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 43);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, "tel:");

        return;

     label4:
        return;
    }

    private java.lang.String formatNsn(java.lang.String, com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r4;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r2;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r3;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata;

        r3 := @parameter2: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        $r4 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatNsn(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.String)>(r1, r2, r3, null);

        return $r4;
    }

    private java.lang.String formatNsn(java.lang.String, com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r4, $r9;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r2;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r3, $r10;
        java.util.List r5, r6, $r8;
        com.android.i18n.phonenumbers.Phonemetadata$NumberFormat r7;
        int $i0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata;

        r3 := @parameter2: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        r4 := @parameter3: java.lang.String;

        r5 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List intlNumberFormats()>();

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i0 == 0 goto label1;

        $r10 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        if r3 != $r10 goto label2;

     label1:
        $r8 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()>();

        goto label3;

     label2:
        $r8 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List intlNumberFormats()>();

     label3:
        r6 = $r8;

        r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat chooseFormattingPatternForNumber(java.util.List,java.lang.String)>(r6, r1);

        if r7 != null goto label4;

        $r9 = r1;

        goto label5;

     label4:
        $r9 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatNsnUsingPattern(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$NumberFormat,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.String)>(r1, r7, r3, r4);

     label5:
        return $r9;
    }

    com.android.i18n.phonenumbers.Phonemetadata$NumberFormat chooseFormattingPatternForNumber(java.util.List, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.util.List r1;
        java.lang.String r2, $r8, $r12;
        java.util.Iterator r3;
        com.android.i18n.phonenumbers.Phonemetadata$NumberFormat r4;
        int i0, $i1;
        java.util.regex.Matcher r5, $r13;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6;
        com.android.i18n.phonenumbers.RegexCache $r7, $r10;
        java.util.regex.Pattern $r9, $r11;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.i18n.phonenumbers.Phonemetadata$NumberFormat) $r6;

        i0 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: int leadingDigitsPatternSize()>();

        if i0 == 0 goto label2;

        $r10 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.RegexCache regexCache>;

        $i1 = i0 - 1;

        $r12 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getLeadingDigitsPattern(int)>($i1);

        $r11 = virtualinvoke $r10.<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r12);

        $r13 = virtualinvoke $r11.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z2 = virtualinvoke $r13.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z2 == 0 goto label3;

     label2:
        $r7 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.RegexCache regexCache>;

        $r8 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getPattern()>();

        $r9 = virtualinvoke $r7.<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r8);

        r5 = virtualinvoke $r9.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z1 = virtualinvoke r5.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label3;

        return r4;

     label3:
        goto label1;

     label4:
        return null;
    }

    java.lang.String formatNsnUsingPattern(java.lang.String, com.android.i18n.phonenumbers.Phonemetadata$NumberFormat, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r4;
        com.android.i18n.phonenumbers.Phonemetadata$NumberFormat r2;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r3;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat;

        r3 := @parameter2: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        $r4 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String formatNsnUsingPattern(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$NumberFormat,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.String)>(r1, r2, r3, null);

        return $r4;
    }

    private java.lang.String formatNsnUsingPattern(java.lang.String, com.android.i18n.phonenumbers.Phonemetadata$NumberFormat, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r4, r5, r8, $r11, $r19, $r21, r25, r26, r27, r28;
        com.android.i18n.phonenumbers.Phonemetadata$NumberFormat r2;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r3, $r13, $r14, $r15;
        java.util.regex.Matcher r6, r9, $r17, $r23, $r24, r29;
        com.android.i18n.phonenumbers.RegexCache $r10;
        java.util.regex.Pattern $r12, $r16, $r18, $r20, $r22;
        boolean $z0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat;

        r3 := @parameter2: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        r4 := @parameter3: java.lang.String;

        r5 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getFormat()>();

        $r10 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.RegexCache regexCache>;

        $r11 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getPattern()>();

        $r12 = virtualinvoke $r10.<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r11);

        r6 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $r13 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        if r3 != $r13 goto label1;

        if r4 == null goto label1;

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i1 <= 0 goto label1;

        $r21 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getDomesticCarrierCodeFormattingRule()>();

        $i2 = virtualinvoke $r21.<java.lang.String: int length()>();

        if $i2 <= 0 goto label1;

        r8 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getDomesticCarrierCodeFormattingRule()>();

        $r20 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern CC_PATTERN>;

        $r24 = virtualinvoke $r20.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r8);

        r25 = virtualinvoke $r24.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(r4);

        $r22 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern FIRST_GROUP_PATTERN>;

        $r23 = virtualinvoke $r22.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r5);

        r26 = virtualinvoke $r23.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(r25);

        r27 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(r26);

        goto label3;

     label1:
        r28 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getNationalPrefixFormattingRule()>();

        $r14 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        if r3 != $r14 goto label2;

        if r28 == null goto label2;

        $i0 = virtualinvoke r28.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r18 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern FIRST_GROUP_PATTERN>;

        r9 = virtualinvoke $r18.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r5);

        $r19 = virtualinvoke r9.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(r28);

        r27 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r19);

        goto label3;

     label2:
        r27 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(r5);

     label3:
        $r15 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat RFC3966>;

        if r3 != $r15 goto label5;

        $r16 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern SEPARATOR_PATTERN>;

        r29 = virtualinvoke $r16.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r27);

        $z0 = virtualinvoke r29.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z0 == 0 goto label4;

        r27 = virtualinvoke r29.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>("");

     label4:
        $r17 = virtualinvoke r29.<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>(r27);

        r27 = virtualinvoke $r17.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("-");

     label5:
        return r27;
    }

    public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumber(java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType $r2;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber $r3;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        $r2 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE>;

        $r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForType(java.lang.String,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r1, $r2);

        return $r3;
    }

    public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForType(java.lang.String, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r6, $r14, $r17;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType r2;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc r3;
        com.android.i18n.phonenumbers.NumberParseException r4, $r13;
        boolean $z0, $z1;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata $r5;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber $r7;
        java.lang.StringBuilder $r8, $r11, $r12;
        java.util.logging.Logger $r9, $r16;
        java.util.logging.Level $r10, $r15;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType;

        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isValidRegionCode(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r9 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r10 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid or unknown region code provided: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r10, $r14);

        return null;

     label1:
        $r5 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r1);

        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)>($r5, r2);

     label2:
        $z1 = virtualinvoke r3.<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: boolean hasExampleNumber()>();

        if $z1 == 0 goto label4;

        $r6 = virtualinvoke r3.<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getExampleNumber()>();

        $r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.String,java.lang.String)>($r6, r1);

     label3:
        return $r7;

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        r4 = $r13;

        $r16 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r15 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r17 = virtualinvoke r4.<com.android.i18n.phonenumbers.NumberParseException: java.lang.String toString()>();

        virtualinvoke $r16.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r15, $r17);

     label6:
        return null;

        catch com.android.i18n.phonenumbers.NumberParseException from label2 to label3 with label5;
    }

    public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForNonGeoEntity(int)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        int i0;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r1;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc r2;
        com.android.i18n.phonenumbers.NumberParseException r3, $r16;
        java.lang.StringBuilder $r4, $r7, $r8, $r10, $r11, $r13, $r15;
        java.util.logging.Logger $r5, $r19;
        java.util.logging.Level $r6, $r18;
        java.lang.String $r9, $r12, $r14, $r20;
        boolean $z0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber $r17;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(int)>(i0);

        if r1 == null goto label6;

        r2 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>();

     label1:
        $z0 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: boolean hasExampleNumber()>();

        if $z0 == 0 goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getExampleNumber()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.String,java.lang.String)>($r14, "ZZ");

     label2:
        return $r17;

     label3:
        goto label5;

     label4:
        $r16 := @caughtexception;

        r3 = $r16;

        $r19 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r18 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r20 = virtualinvoke r3.<com.android.i18n.phonenumbers.NumberParseException: java.lang.String toString()>();

        virtualinvoke $r19.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r18, $r20);

     label5:
        goto label7;

     label6:
        $r5 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r6 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid or unknown country calling code provided: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r6, $r9);

     label7:
        return null;

        catch com.android.i18n.phonenumbers.NumberParseException from label1 to label2 with label4;
    }

    private void maybeAppendFormattedExtension(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat, java.lang.StringBuilder)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r2;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r3, $r6;
        java.lang.StringBuilder r4, $r7, $r11, $r13;
        boolean $z0, $z1;
        java.lang.String $r5, $r8, $r10, $r12, $r16;
        int $i0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata;

        r3 := @parameter2: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        r4 := @parameter3: java.lang.StringBuilder;

        $z0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasExtension()>();

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $r6 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberFormat RFC3966>;

        if r3 != $r6 goto label1;

        $r13 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";ext=");

        $r16 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        goto label3;

     label1:
        $z1 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean hasPreferredExtnPrefix()>();

        if $z1 == 0 goto label2;

        $r10 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getPreferredExtnPrefix()>();

        $r11 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        goto label3;

     label2:
        $r7 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ext. ");

        $r8 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label3:
        return;
    }

    com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata, com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r1;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType r2;
        int[] $r3;
        int $i0, $i1;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata;

        r2 := @parameter1: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType;

        $r3 = <com.android.i18n.phonenumbers.PhoneNumberUtil$3: int[] $SwitchMap$com$android$i18n$phonenumbers$PhoneNumberUtil$PhoneNumberType>;

        $i0 = virtualinvoke r2.<com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label04;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label07;
            case 9: goto label08;
            case 10: goto label09;
            case 11: goto label10;
            default: goto label11;
        };

     label01:
        $r4 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPremiumRate()>();

        return $r4;

     label02:
        $r13 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getTollFree()>();

        return $r13;

     label03:
        $r12 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getMobile()>();

        return $r12;

     label04:
        $r11 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getFixedLine()>();

        return $r11;

     label05:
        $r10 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getSharedCost()>();

        return $r10;

     label06:
        $r9 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoip()>();

        return $r9;

     label07:
        $r8 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPersonalNumber()>();

        return $r8;

     label08:
        $r7 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPager()>();

        return $r7;

     label09:
        $r6 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getUan()>();

        return $r6;

     label10:
        $r5 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoicemail()>();

        return $r5;

     label11:
        $r14 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>();

        return $r14;
    }

    public com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.String r2, r4;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r3;
        int $i0;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType $r5, $r6;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r3 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>($i0, r2);

        if r3 != null goto label1;

        $r6 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        return $r6;

     label1:
        r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r5 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberTypeHelper(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata)>(r4, r3);

        return $r5;
    }

    private com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberTypeHelper(java.lang.String, com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r2;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r18;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType $r4, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata;

        r3 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>();

        $z1 = virtualinvoke r3.<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: boolean hasNationalNumberPattern()>();

        if $z1 == 0 goto label01;

        $z2 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, r3);

        if $z2 != 0 goto label02;

     label01:
        $r4 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        return $r4;

     label02:
        $r5 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPremiumRate()>();

        $z3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r5);

        if $z3 == 0 goto label03;

        $r28 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType PREMIUM_RATE>;

        return $r28;

     label03:
        $r6 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getTollFree()>();

        $z4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r6);

        if $z4 == 0 goto label04;

        $r27 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType TOLL_FREE>;

        return $r27;

     label04:
        $r7 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getSharedCost()>();

        $z5 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r7);

        if $z5 == 0 goto label05;

        $r24 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType SHARED_COST>;

        return $r24;

     label05:
        $r8 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoip()>();

        $z6 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r8);

        if $z6 == 0 goto label06;

        $r23 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType VOIP>;

        return $r23;

     label06:
        $r9 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPersonalNumber()>();

        $z7 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r9);

        if $z7 == 0 goto label07;

        $r26 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType PERSONAL_NUMBER>;

        return $r26;

     label07:
        $r10 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getPager()>();

        $z8 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r10);

        if $z8 == 0 goto label08;

        $r25 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType PAGER>;

        return $r25;

     label08:
        $r11 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getUan()>();

        $z9 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r11);

        if $z9 == 0 goto label09;

        $r20 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType UAN>;

        return $r20;

     label09:
        $r12 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getVoicemail()>();

        $z10 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r12);

        if $z10 == 0 goto label10;

        $r19 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType VOICEMAIL>;

        return $r19;

     label10:
        $r13 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getFixedLine()>();

        z0 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r13);

        if z0 == 0 goto label13;

        $z14 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean isSameMobileAndFixedLinePattern()>();

        if $z14 == 0 goto label11;

        $r22 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE_OR_MOBILE>;

        return $r22;

     label11:
        $r18 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getMobile()>();

        $z13 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r18);

        if $z13 == 0 goto label12;

        $r21 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE_OR_MOBILE>;

        return $r21;

     label12:
        $r17 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE>;

        return $r17;

     label13:
        $z11 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean isSameMobileAndFixedLinePattern()>();

        if $z11 != 0 goto label14;

        $r14 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getMobile()>();

        $z12 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r14);

        if $z12 == 0 goto label14;

        $r16 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType MOBILE>;

        return $r16;

     label14:
        $r15 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        return $r15;
    }

    com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r10;
        java.util.Map r2, $r4, $r5, $r6;
        java.lang.Throwable r3, $r11;
        boolean $z0, $z1;
        java.lang.Object $r7;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata $r8;
        com.android.i18n.phonenumbers.MetadataLoader $r9;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isValidRegionCode(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map regionToMetadataMap>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map regionToMetadataMap>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label3;

        $r10 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String currentFilePrefix>;

        $r9 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.MetadataLoader metadataLoader>;

        virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void loadMetadataFromFile(java.lang.String,java.lang.String,int,com.android.i18n.phonenumbers.MetadataLoader)>($r10, r1, 0, $r9);

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        $r6 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map regionToMetadataMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata) $r7;

        return $r8;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(int)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        int i0;
        java.util.Map r1, $r3, $r4, $r6, $r8;
        java.lang.Throwable r2, $r14;
        java.lang.Integer $r5, $r7, $r9;
        boolean $z0, $z1;
        java.lang.Object $r10;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata $r11;
        java.lang.String $r12;
        com.android.i18n.phonenumbers.MetadataLoader $r13;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map countryCodeToNonGeographicalMetadataMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z0 != 0 goto label3;

        exitmonitor r1;

     label2:
        return null;

     label3:
        $r6 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map countryCodeToNonGeographicalMetadataMap>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z1 != 0 goto label4;

        $r12 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String currentFilePrefix>;

        $r13 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.MetadataLoader metadataLoader>;

        virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void loadMetadataFromFile(java.lang.String,java.lang.String,int,com.android.i18n.phonenumbers.MetadataLoader)>($r12, "001", i0, $r13);

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r14 := @caughtexception;

        r2 = $r14;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        $r8 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map countryCodeToNonGeographicalMetadataMap>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r11 = (com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata) $r10;

        return $r11;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    boolean isNumberPossibleForDesc(java.lang.String, com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r5;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc r2;
        java.util.regex.Matcher r3;
        com.android.i18n.phonenumbers.RegexCache $r4;
        java.util.regex.Pattern $r6;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc;

        $r4 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.RegexCache regexCache>;

        $r5 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getPossibleNumberPattern()>();

        $r6 = virtualinvoke $r4.<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r5);

        r3 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    boolean isNumberMatchingDesc(java.lang.String, com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r5;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc r2;
        java.util.regex.Matcher r3;
        com.android.i18n.phonenumbers.RegexCache $r4;
        java.util.regex.Pattern $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc;

        $r4 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.RegexCache regexCache>;

        $r5 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getNationalNumberPattern()>();

        $r6 = virtualinvoke $r4.<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r5);

        r3 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberPossibleForDesc(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, r2);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r3.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $z0 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isValidNumberForRegion(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>(r1, r2);

        return $z0;
    }

    public boolean isValidNumberForRegion(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.String r2, r5, $r6;
        int i0, i1, $i2;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r3;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc r4;
        boolean $z0, $z1, $z2, $z3;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType $r7, $r8;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.lang.String;

        i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r3 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, r2);

        if r3 == null goto label1;

        $r6 = "001";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label2;

        $i2 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: int getCountryCodeForValidRegion(java.lang.String)>(r2);

        if i0 == $i2 goto label2;

     label1:
        return 0;

     label2:
        r4 = virtualinvoke r3.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>();

        r5 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $z1 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: boolean hasNationalNumberPattern()>();

        if $z1 != 0 goto label5;

        i1 = virtualinvoke r5.<java.lang.String: int length()>();

        if i1 <= 2 goto label3;

        if i1 > 17 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;

     label5:
        $r7 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberTypeHelper(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata)>(r5, r3);

        $r8 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        if $r7 == $r8 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        return $z2;
    }

    public java.lang.String getRegionCodeForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        int i0, $i1;
        java.util.List r2;
        java.lang.String r3, $r7, $r9, $r16;
        java.util.Map $r4;
        java.lang.Integer $r5;
        java.lang.Object $r6, $r8;
        java.lang.StringBuilder $r10, $r12, $r14, $r15, $r17;
        java.util.logging.Logger $r11;
        java.util.logging.Level $r13;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        $r4 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r2 = (java.util.List) $r6;

        if r2 != null goto label1;

        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r11 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r13 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing/invalid country_code (");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") for number ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r13, $r16);

        return null;

     label1:
        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i1 != 1 goto label2;

        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (java.lang.String) $r8;

        return $r9;

     label2:
        $r7 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumberFromRegionList(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.List)>(r1, r2);

        return $r7;
    }

    private java.lang.String getRegionCodeForNumberFromRegionList(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.List)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.util.List r2;
        java.lang.String r3, r5, $r12;
        java.util.Iterator r4;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType $r8, $r9;
        com.android.i18n.phonenumbers.RegexCache $r10;
        java.util.regex.Pattern $r11;
        java.util.regex.Matcher $r13;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.List;

        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r7;

        r6 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r5);

        $z1 = virtualinvoke r6.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean hasLeadingDigits()>();

        if $z1 == 0 goto label2;

        $r10 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.RegexCache regexCache>;

        $r12 = virtualinvoke r6.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getLeadingDigits()>();

        $r11 = virtualinvoke $r10.<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r12);

        $r13 = virtualinvoke $r11.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

        $z2 = virtualinvoke $r13.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z2 == 0 goto label3;

        return r5;

     label2:
        $r8 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberTypeHelper(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata)>(r3, r6);

        $r9 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        if $r8 == $r9 goto label3;

        return r5;

     label3:
        goto label1;

     label4:
        return null;
    }

    public java.lang.String getRegionCodeForCountryCode(int)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        int i0;
        java.util.List r1;
        java.util.Map $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4, $r5;
        java.lang.String $r6;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (java.util.List) $r4;

        if r1 != null goto label1;

        $r6 = "ZZ";

        goto label2;

     label1:
        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.lang.String) $r5;

     label2:
        return $r6;
    }

    public java.util.List getRegionCodesForCountryCode(int)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        int i0;
        java.util.List r1, $r5, $r6;
        java.util.Map $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        java.util.ArrayList r7;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (java.util.List) $r4;

        if r1 != null goto label1;

        r7 = new java.util.ArrayList;

        $r6 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>(0);

        goto label2;

     label1:
        $r6 = r1;

     label2:
        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r6);

        return $r5;
    }

    public int getCountryCodeForRegion(java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r8, $r9;
        boolean $z0;
        int $i0;
        java.lang.StringBuilder $r2, $r5, $r6, $r7;
        java.util.logging.Logger $r3;
        java.util.logging.Level $r4;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isValidRegionCode(java.lang.String)>(r1);

        if $z0 != 0 goto label3;

        $r3 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid or missing region code (");

        if r1 != null goto label1;

        $r9 = "null";

        goto label2;

     label1:
        $r9 = r1;

     label2:
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") provided.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r4, $r8);

        return 0;

     label3:
        $i0 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: int getCountryCodeForValidRegion(java.lang.String)>(r1);

        return $i0;
    }

    private int getCountryCodeForValidRegion(java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r7;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r1);

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid region code: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $i0 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: int getCountryCode()>();

        return $i0;
    }

    public java.lang.String getNddPrefixForRegion(java.lang.String, boolean)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r3, $r10, $r11;
        boolean z0;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r2;
        int $i0;
        java.lang.StringBuilder $r4, $r7, $r8, $r9;
        java.util.logging.Logger $r5;
        java.util.logging.Level $r6;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r1);

        if r2 != null goto label3;

        $r5 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r6 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid or missing region code (");

        if r1 != null goto label1;

        $r11 = "null";

        goto label2;

     label1:
        $r11 = r1;

     label2:
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") provided.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r6, $r10);

        return null;

     label3:
        r3 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefix()>();

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label4;

        return null;

     label4:
        if z0 == 0 goto label5;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("~", "");

     label5:
        return r3;
    }

    public boolean isNANPACountry(java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Set nanpaRegions>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    boolean isLeadingZeroPossible(int)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        int i0;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        $r2 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r1 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, $r2);

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean isLeadingZeroPossible()>();

        return $z0;
    }

    public boolean isAlphaNumber(java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1;
        java.lang.StringBuilder r2, $r3;
        boolean $z0, $z1;
        java.util.regex.Pattern $r5;
        java.util.regex.Matcher $r6;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isViablePhoneNumber(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

        r2 = $r3;

        virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String maybeStripExtension(java.lang.StringBuilder)>(r2);

        $r5 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern VALID_ALPHA_PHONE_PATTERN>;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z1 = virtualinvoke $r6.<java.util.regex.Matcher: boolean matches()>();

        return $z1;
    }

    public boolean isPossibleNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        $r2 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult isPossibleNumberWithReason(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r3 = <com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult IS_POSSIBLE>;

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult testNumberLengthAgainstPattern(java.util.regex.Pattern, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.util.regex.Pattern r1;
        java.lang.String r2;
        java.util.regex.Matcher r3;
        boolean $z0, $z1;
        com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult $r4, $r5, $r6;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.util.regex.Pattern;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $r6 = <com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult IS_POSSIBLE>;

        return $r6;

     label1:
        $z1 = virtualinvoke r3.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z1 == 0 goto label2;

        $r5 = <com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult TOO_LONG>;

        return $r5;

     label2:
        $r4 = <com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult TOO_SHORT>;

        return $r4;
    }

    private boolean isShorterThanPossibleNormalNumber(com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r1;
        java.lang.String r2, $r6;
        java.util.regex.Pattern r3;
        com.android.i18n.phonenumbers.RegexCache $r4;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc $r5;
        com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult $r7, $r8;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.RegexCache regexCache>;

        $r5 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>();

        $r6 = virtualinvoke $r5.<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getPossibleNumberPattern()>();

        r3 = virtualinvoke $r4.<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r6);

        $r7 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult testNumberLengthAgainstPattern(java.util.regex.Pattern,java.lang.String)>(r3, r2);

        $r8 = <com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult TOO_SHORT>;

        if $r7 != $r8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult isPossibleNumberWithReason(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.String r2, r3, $r7;
        int i0, i1;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r4;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc r5;
        boolean $z0, $z1;
        com.android.i18n.phonenumbers.RegexCache $r6;
        java.util.logging.Level $r8;
        com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult $r9, $r11, $r12, $r13, $r14;
        java.util.logging.Logger $r10;
        java.util.regex.Pattern r15;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean hasValidCountryCallingCode(int)>(i0);

        if $z0 != 0 goto label1;

        $r13 = <com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult INVALID_COUNTRY_CODE>;

        return $r13;

     label1:
        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r4 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, r3);

        r5 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>();

        $z1 = virtualinvoke r5.<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: boolean hasNationalNumberPattern()>();

        if $z1 != 0 goto label4;

        $r10 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke $r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r8, "Checking if number is possible with incomplete metadata.");

        i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if i1 >= 2 goto label2;

        $r14 = <com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult TOO_SHORT>;

        return $r14;

     label2:
        if i1 <= 17 goto label3;

        $r11 = <com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult TOO_LONG>;

        return $r11;

     label3:
        $r12 = <com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult IS_POSSIBLE>;

        return $r12;

     label4:
        $r6 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.RegexCache regexCache>;

        $r7 = virtualinvoke r5.<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getPossibleNumberPattern()>();

        r15 = virtualinvoke $r6.<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r7);

        $r9 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult testNumberLengthAgainstPattern(java.util.regex.Pattern,java.lang.String)>(r15, r2);

        return $r9;
    }

    public boolean isPossibleNumber(java.lang.String, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r2;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber $r4;
        boolean $z0;
        com.android.i18n.phonenumbers.NumberParseException $r5;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.String,java.lang.String)>(r1, r2);

        $z0 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isPossibleNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>($r4);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        return 0;

        catch com.android.i18n.phonenumbers.NumberParseException from label1 to label2 with label3;
    }

    public boolean truncateTooLongNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1, r2, $r3;
        long l0;
        boolean $z0, $z1;
        com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult $r6, $r7;
        byte $b1;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        $z0 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = new com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        r2 = $r3;

        virtualinvoke r2.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber mergeFrom(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        l0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>();

     label2:
        l0 = l0 / 10L;

        virtualinvoke r2.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setNationalNumber(long)>(l0);

        $r6 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult isPossibleNumberWithReason(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r2);

        $r7 = <com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult TOO_SHORT>;

        if $r6 == $r7 goto label3;

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label4;

     label3:
        return 0;

     label4:
        $z1 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r2);

        if $z1 == 0 goto label2;

        virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setNationalNumber(long)>(l0);

        return 1;
    }

    public com.android.i18n.phonenumbers.AsYouTypeFormatter getAsYouTypeFormatter(java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1;
        com.android.i18n.phonenumbers.AsYouTypeFormatter $r2;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        $r2 = new com.android.i18n.phonenumbers.AsYouTypeFormatter;

        specialinvoke $r2.<com.android.i18n.phonenumbers.AsYouTypeFormatter: void <init>(java.lang.String)>(r1);

        return $r2;
    }

    int extractCountryCode(java.lang.StringBuilder, java.lang.StringBuilder)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.StringBuilder r1, r2;
        int i0, i1, i2, $i3;
        char $c4;
        java.lang.String $r3, $r6;
        java.util.Map $r4;
        java.lang.Integer $r5;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.StringBuilder;

        $i3 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i3 == 0 goto label1;

        $c4 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>(0);

        if $c4 != 48 goto label2;

     label1:
        return 0;

     label2:
        i1 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        i2 = 1;

     label3:
        if i2 > 3 goto label5;

        if i2 > i1 goto label5;

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String substring(int,int)>(0, i2);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z0 == 0 goto label4;

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String substring(int)>(i2);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        return i0;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return 0;
    }

    int maybeExtractCountryCode(java.lang.String, com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata, java.lang.StringBuilder, boolean, com.android.i18n.phonenumbers.Phonenumber$PhoneNumber) throws com.android.i18n.phonenumbers.NumberParseException
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r6, r8, r9, $r18, $r20, $r21, $r23;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r2;
        java.lang.StringBuilder r3, r5, r10, $r14, $r17;
        boolean z0, $z1, $z3, $z4;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r4;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource r7, $r15, $r27;
        int i0, $i1, $i2, $i3, i4;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc r11;
        java.util.regex.Pattern r12, r13;
        com.android.i18n.phonenumbers.RegexCache $r19, $r22;
        com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult $r24, $r28;
        java.util.regex.Matcher $r25, $r31;
        com.android.i18n.phonenumbers.NumberParseException$ErrorType $r33, $r36;
        com.android.i18n.phonenumbers.NumberParseException $r34, $r37;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata;

        r3 := @parameter2: java.lang.StringBuilder;

        z0 := @parameter3: boolean;

        r4 := @parameter4: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label01;

        return 0;

     label01:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

        r5 = $r14;

        r6 = "NonMatch";

        if r2 == null goto label02;

        r6 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getInternationalPrefix()>();

     label02:
        r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource maybeStripInternationalPrefixAndNormalize(java.lang.StringBuilder,java.lang.String)>(r5, r6);

        if z0 == 0 goto label03;

        virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setCountryCodeSource(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource)>(r7);

     label03:
        $r15 = <com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource FROM_DEFAULT_COUNTRY>;

        if r7 == $r15 goto label06;

        $i3 = virtualinvoke r5.<java.lang.StringBuilder: int length()>();

        if $i3 > 2 goto label04;

        $r37 = new com.android.i18n.phonenumbers.NumberParseException;

        $r36 = <com.android.i18n.phonenumbers.NumberParseException$ErrorType: com.android.i18n.phonenumbers.NumberParseException$ErrorType TOO_SHORT_AFTER_IDD>;

        specialinvoke $r37.<com.android.i18n.phonenumbers.NumberParseException: void <init>(com.android.i18n.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r36, "Phone number had an IDD, but after this was not long enough to be a viable phone number.");

        throw $r37;

     label04:
        i0 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: int extractCountryCode(java.lang.StringBuilder,java.lang.StringBuilder)>(r5, r3);

        if i0 == 0 goto label05;

        virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setCountryCode(int)>(i0);

        return i0;

     label05:
        $r34 = new com.android.i18n.phonenumbers.NumberParseException;

        $r33 = <com.android.i18n.phonenumbers.NumberParseException$ErrorType: com.android.i18n.phonenumbers.NumberParseException$ErrorType INVALID_COUNTRY_CODE>;

        specialinvoke $r34.<com.android.i18n.phonenumbers.NumberParseException: void <init>(com.android.i18n.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r33, "Country calling code supplied was not recognised.");

        throw $r34;

     label06:
        if r2 == null goto label10;

        i4 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: int getCountryCode()>();

        r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i4);

        r9 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>(r8);

        if $z1 == 0 goto label10;

        $r17 = new java.lang.StringBuilder;

        $i2 = virtualinvoke r8.<java.lang.String: int length()>();

        $r18 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int)>($i2);

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>($r18);

        r10 = $r17;

        r11 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>();

        $r19 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.RegexCache regexCache>;

        $r20 = virtualinvoke r11.<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getNationalNumberPattern()>();

        r12 = virtualinvoke $r19.<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r20);

        virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean maybeStripNationalPrefixAndCarrierCode(java.lang.StringBuilder,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.StringBuilder)>(r10, r2, null);

        $r22 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.RegexCache regexCache>;

        $r21 = virtualinvoke r11.<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getPossibleNumberPattern()>();

        r13 = virtualinvoke $r22.<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r21);

        $r25 = virtualinvoke r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r5);

        $z3 = virtualinvoke $r25.<java.util.regex.Matcher: boolean matches()>();

        if $z3 != 0 goto label07;

        $r31 = virtualinvoke r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r10);

        $z4 = virtualinvoke $r31.<java.util.regex.Matcher: boolean matches()>();

        if $z4 != 0 goto label08;

     label07:
        $r23 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult testNumberLengthAgainstPattern(java.util.regex.Pattern,java.lang.String)>(r13, $r23);

        $r28 = <com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.i18n.phonenumbers.PhoneNumberUtil$ValidationResult TOO_LONG>;

        if $r24 != $r28 goto label10;

     label08:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r10);

        if z0 == 0 goto label09;

        $r27 = <com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource FROM_NUMBER_WITHOUT_PLUS_SIGN>;

        virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setCountryCodeSource(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource)>($r27);

     label09:
        virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setCountryCode(int)>(i4);

        return i4;

     label10:
        virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setCountryCode(int)>(0);

        return 0;
    }

    private boolean parsePrefixAsIdd(java.util.regex.Pattern, java.lang.StringBuilder)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.util.regex.Pattern r1, $r6;
        java.lang.StringBuilder r2;
        java.util.regex.Matcher r3, r4;
        int i0;
        java.lang.String r5, $r7, $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.util.regex.Pattern;

        r2 := @parameter1: java.lang.StringBuilder;

        r3 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z0 == 0 goto label2;

        i0 = virtualinvoke r3.<java.util.regex.Matcher: int end()>();

        $r6 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern CAPTURING_DIGIT_PATTERN>;

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String substring(int)>(i0);

        r4 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r7);

        $z1 = virtualinvoke r4.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label1;

        $r9 = virtualinvoke r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        r5 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDigitsOnly(java.lang.String)>($r9);

        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("0");

        if $z2 == 0 goto label1;

        return 0;

     label1:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, i0);

        return 1;

     label2:
        return 0;
    }

    com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource maybeStripInternationalPrefixAndNormalize(java.lang.StringBuilder, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.StringBuilder r1;
        java.lang.String r2;
        java.util.regex.Matcher r3;
        java.util.regex.Pattern r4, $r5;
        int $i0, $i1;
        boolean $z0, $z1;
        com.android.i18n.phonenumbers.RegexCache $r6;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource $r7, $r9, $r10;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label1;

        $r9 = <com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource FROM_DEFAULT_COUNTRY>;

        return $r9;

     label1:
        $r5 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern PLUS_CHARS_PATTERN>;

        r3 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r3.<java.util.regex.Matcher: int end()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, $i1);

        staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: void normalize(java.lang.StringBuilder)>(r1);

        $r10 = <com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource FROM_NUMBER_WITH_PLUS_SIGN>;

        return $r10;

     label2:
        $r6 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.RegexCache regexCache>;

        r4 = virtualinvoke $r6.<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>(r2);

        staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: void normalize(java.lang.StringBuilder)>(r1);

        $z1 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean parsePrefixAsIdd(java.util.regex.Pattern,java.lang.StringBuilder)>(r4, r1);

        if $z1 == 0 goto label3;

        $r7 = <com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource FROM_NUMBER_WITH_IDD>;

        goto label4;

     label3:
        $r7 = <com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource FROM_DEFAULT_COUNTRY>;

     label4:
        return $r7;
    }

    boolean maybeStripNationalPrefixAndCarrierCode(java.lang.StringBuilder, com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata, java.lang.StringBuilder)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.StringBuilder r1, r3, r8, $r22;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r4, r7, $r12, $r16, $r17, $r18, $r21, $r24, $r26, $r27, $r29;
        java.util.regex.Matcher r5, $r14, $r19, $r28;
        java.util.regex.Pattern r6, $r10;
        boolean z0, $z1, $z2, $z3;
        com.android.i18n.phonenumbers.RegexCache $r9, $r11;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc $r13;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata;

        r3 := @parameter2: java.lang.StringBuilder;

        i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        r4 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefixForParsing()>();

        if i0 == 0 goto label1;

        $i2 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i2 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r9 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.RegexCache regexCache>;

        $r10 = virtualinvoke $r9.<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>(r4);

        r5 = virtualinvoke $r10.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z1 = virtualinvoke r5.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z1 == 0 goto label9;

        $r11 = r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.RegexCache regexCache>;

        $r13 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>();

        $r12 = virtualinvoke $r13.<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getNationalNumberPattern()>();

        r6 = virtualinvoke $r11.<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r12);

        $r14 = virtualinvoke r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        z0 = virtualinvoke $r14.<java.util.regex.Matcher: boolean matches()>();

        i1 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>();

        r7 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefixTransformRule()>();

        if r7 == null goto label3;

        $i5 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i5 == 0 goto label3;

        $r21 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(i1);

        if $r21 != null goto label6;

     label3:
        if z0 == 0 goto label4;

        $i4 = virtualinvoke r5.<java.util.regex.Matcher: int end()>();

        $r18 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String substring(int)>($i4);

        $r19 = virtualinvoke r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r18);

        $z2 = virtualinvoke $r19.<java.util.regex.Matcher: boolean matches()>();

        if $z2 != 0 goto label4;

        return 0;

     label4:
        if r3 == null goto label5;

        if i1 <= 0 goto label5;

        $r17 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(i1);

        if $r17 == null goto label5;

        $r16 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

     label5:
        $i3 = virtualinvoke r5.<java.util.regex.Matcher: int end()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, $i3);

        return 1;

     label6:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>(r1);

        r8 = $r22;

        $r24 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(r7);

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(0, i0, $r24);

        if z0 == 0 goto label7;

        $r29 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = virtualinvoke r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r29);

        $z3 = virtualinvoke $r28.<java.util.regex.Matcher: boolean matches()>();

        if $z3 != 0 goto label7;

        return 0;

     label7:
        if r3 == null goto label8;

        if i1 <= 1 goto label8;

        $r26 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

     label8:
        $i6 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $r27 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(0, $i6, $r27);

        return 1;

     label9:
        return 0;
    }

    java.lang.String maybeStripExtension(java.lang.StringBuilder)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.StringBuilder r1;
        java.util.regex.Matcher r2;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String r3, $r5, $r6;
        java.util.regex.Pattern $r4;
        boolean $z0, $z1;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.StringBuilder;

        $r4 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern EXTN_PATTERN>;

        r2 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke r2.<java.util.regex.Matcher: int start()>();

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String substring(int,int)>(0, $i2);

        $z1 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isViablePhoneNumber(java.lang.String)>($r5);

        if $z1 == 0 goto label3;

        i0 = 1;

        i1 = virtualinvoke r2.<java.util.regex.Matcher: int groupCount()>();

     label1:
        if i0 > i1 goto label3;

        $r6 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(i0);

        if $r6 == null goto label2;

        r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(i0);

        $i4 = virtualinvoke r2.<java.util.regex.Matcher: int start()>();

        $i3 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i4, $i3);

        return r3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return "";
    }

    private boolean checkRegionForParsing(java.lang.String, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r2;
        boolean $z0, $z1;
        int $i0;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isValidRegionCode(java.lang.String)>(r2);

        if $z0 != 0 goto label2;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r3 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern PLUS_CHARS_PATTERN>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z1 = virtualinvoke $r4.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.String, java.lang.String) throws com.android.i18n.phonenumbers.NumberParseException
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r2;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r3, $r4;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = new com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        r3 = $r4;

        virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void parse(java.lang.String,java.lang.String,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1, r2, r3);

        return r3;
    }

    public void parse(java.lang.String, java.lang.String, com.android.i18n.phonenumbers.Phonenumber$PhoneNumber) throws com.android.i18n.phonenumbers.NumberParseException
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r2;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r3;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void parseHelper(java.lang.String,java.lang.String,boolean,boolean,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1, r2, 0, 1, r3);

        return;
    }

    public com.android.i18n.phonenumbers.Phonenumber$PhoneNumber parseAndKeepRawInput(java.lang.String, java.lang.String) throws com.android.i18n.phonenumbers.NumberParseException
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r2;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r3, $r4;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = new com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        r3 = $r4;

        virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void parseAndKeepRawInput(java.lang.String,java.lang.String,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1, r2, r3);

        return r3;
    }

    public void parseAndKeepRawInput(java.lang.String, java.lang.String, com.android.i18n.phonenumbers.Phonenumber$PhoneNumber) throws com.android.i18n.phonenumbers.NumberParseException
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r2;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r3;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void parseHelper(java.lang.String,java.lang.String,boolean,boolean,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1, r2, 1, 1, r3);

        return;
    }

    public java.lang.Iterable findNumbers(java.lang.CharSequence, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.CharSequence r1;
        java.lang.String r2;
        com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency $r3;
        java.lang.Iterable $r4;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.String;

        $r3 = <com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency: com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency VALID>;

        $r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.Iterable findNumbers(java.lang.CharSequence,java.lang.String,com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency,long)>(r1, r2, $r3, 9223372036854775807L);

        return $r4;
    }

    public java.lang.Iterable findNumbers(java.lang.CharSequence, java.lang.String, com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency, long)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.CharSequence r1;
        java.lang.String r2;
        com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency r3;
        long l0;
        com.android.i18n.phonenumbers.PhoneNumberUtil$2 $r4;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency;

        l0 := @parameter3: long;

        $r4 = new com.android.i18n.phonenumbers.PhoneNumberUtil$2;

        specialinvoke $r4.<com.android.i18n.phonenumbers.PhoneNumberUtil$2: void <init>(com.android.i18n.phonenumbers.PhoneNumberUtil,java.lang.CharSequence,java.lang.String,com.android.i18n.phonenumbers.PhoneNumberUtil$Leniency,long)>(r0, r1, r2, r3, l0);

        return $r4;
    }

    static void setItalianLeadingZerosForPhoneNumber(java.lang.String, com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        java.lang.String r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        int i0, $i1, $i3, $i4;
        char $c2, $c5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 <= 1 goto label3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if $c2 != 48 goto label3;

        virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setItalianLeadingZero(boolean)>(1);

        i0 = 1;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        if i0 >= $i4 goto label2;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        if $c5 != 48 goto label2;

        i0 = i0 + 1;

        goto label1;

     label2:
        if i0 == 1 goto label3;

        virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setNumberOfLeadingZeros(int)>(i0);

     label3:
        return;
    }

    private void parseHelper(java.lang.String, java.lang.String, boolean, boolean, com.android.i18n.phonenumbers.Phonenumber$PhoneNumber) throws com.android.i18n.phonenumbers.NumberParseException
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r2, r5, $r11, $r12, $r15, $r16, $r24, $r25, $r31, $r41, $r46, $r50, r53;
        boolean z0, z1, $z3, $z4, $z6, $z7, $z8;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r3;
        java.lang.StringBuilder r4, r7, $r10, $r13, $r20, $r21, r54, r55;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r6;
        com.android.i18n.phonenumbers.NumberParseException r8, $r19, $r22, $r29, $r34, $r36, $r37, $r39, $r43, $r49, $r51;
        java.util.regex.Matcher r9;
        int $i0, $i1, $i2, $i4, i5, i6, i7;
        long $l3;
        com.android.i18n.phonenumbers.NumberParseException$ErrorType $r18, $r23, $r26, $r35, $r38, $r40, $r44, $r45, $r47, $r48, $r52;
        java.util.regex.Pattern $r42;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        if r1 != null goto label01;

        $r37 = new com.android.i18n.phonenumbers.NumberParseException;

        $r44 = <com.android.i18n.phonenumbers.NumberParseException$ErrorType: com.android.i18n.phonenumbers.NumberParseException$ErrorType NOT_A_NUMBER>;

        specialinvoke $r37.<com.android.i18n.phonenumbers.NumberParseException: void <init>(com.android.i18n.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r44, "The phone number supplied was null.");

        throw $r37;

     label01:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 250 goto label02;

        $r39 = new com.android.i18n.phonenumbers.NumberParseException;

        $r38 = <com.android.i18n.phonenumbers.NumberParseException$ErrorType: com.android.i18n.phonenumbers.NumberParseException$ErrorType TOO_LONG>;

        specialinvoke $r39.<com.android.i18n.phonenumbers.NumberParseException: void <init>(com.android.i18n.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r38, "The string supplied was too long to parse.");

        throw $r39;

     label02:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        r4 = $r10;

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void buildNationalNumberForParsing(java.lang.String,java.lang.StringBuilder)>(r1, r4);

        $r11 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $z3 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isViablePhoneNumber(java.lang.String)>($r11);

        if $z3 != 0 goto label03;

        $r34 = new com.android.i18n.phonenumbers.NumberParseException;

        $r40 = <com.android.i18n.phonenumbers.NumberParseException$ErrorType: com.android.i18n.phonenumbers.NumberParseException$ErrorType NOT_A_NUMBER>;

        specialinvoke $r34.<com.android.i18n.phonenumbers.NumberParseException: void <init>(com.android.i18n.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r40, "The string supplied did not seem to be a phone number.");

        throw $r34;

     label03:
        if z1 == 0 goto label04;

        $r31 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $z7 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean checkRegionForParsing(java.lang.String,java.lang.String)>($r31, r2);

        if $z7 != 0 goto label04;

        $r36 = new com.android.i18n.phonenumbers.NumberParseException;

        $r35 = <com.android.i18n.phonenumbers.NumberParseException$ErrorType: com.android.i18n.phonenumbers.NumberParseException$ErrorType INVALID_COUNTRY_CODE>;

        specialinvoke $r36.<com.android.i18n.phonenumbers.NumberParseException: void <init>(com.android.i18n.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r35, "Missing or invalid default region.");

        throw $r36;

     label04:
        if z0 == 0 goto label05;

        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setRawInput(java.lang.String)>(r1);

     label05:
        r5 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String maybeStripExtension(java.lang.StringBuilder)>(r4);

        $i1 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i1 <= 0 goto label06;

        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setExtension(java.lang.String)>(r5);

     label06:
        r6 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r2);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        r7 = $r13;

     label07:
        $r12 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        i5 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: int maybeExtractCountryCode(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.StringBuilder,boolean,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>($r12, r6, r7, z0, r3);

     label08:
        goto label11;

     label09:
        $r43 := @caughtexception;

        r8 = $r43;

        $r42 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern PLUS_CHARS_PATTERN>;

        $r41 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = virtualinvoke $r42.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r41);

        $r47 = virtualinvoke r8.<com.android.i18n.phonenumbers.NumberParseException: com.android.i18n.phonenumbers.NumberParseException$ErrorType getErrorType()>();

        $r48 = <com.android.i18n.phonenumbers.NumberParseException$ErrorType: com.android.i18n.phonenumbers.NumberParseException$ErrorType INVALID_COUNTRY_CODE>;

        if $r47 != $r48 goto label10;

        $z8 = virtualinvoke r9.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z8 == 0 goto label10;

        $i4 = virtualinvoke r9.<java.util.regex.Matcher: int end()>();

        $r50 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String substring(int)>($i4);

        i5 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: int maybeExtractCountryCode(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.StringBuilder,boolean,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>($r50, r6, r7, z0, r3);

        if i5 != 0 goto label11;

        $r51 = new com.android.i18n.phonenumbers.NumberParseException;

        $r52 = <com.android.i18n.phonenumbers.NumberParseException$ErrorType: com.android.i18n.phonenumbers.NumberParseException$ErrorType INVALID_COUNTRY_CODE>;

        specialinvoke $r51.<com.android.i18n.phonenumbers.NumberParseException: void <init>(com.android.i18n.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r52, "Could not interpret numbers after plus-sign.");

        throw $r51;

     label10:
        $r49 = new com.android.i18n.phonenumbers.NumberParseException;

        $r45 = virtualinvoke r8.<com.android.i18n.phonenumbers.NumberParseException: com.android.i18n.phonenumbers.NumberParseException$ErrorType getErrorType()>();

        $r46 = virtualinvoke r8.<com.android.i18n.phonenumbers.NumberParseException: java.lang.String getMessage()>();

        specialinvoke $r49.<com.android.i18n.phonenumbers.NumberParseException: void <init>(com.android.i18n.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r45, $r46);

        throw $r49;

     label11:
        if i5 == 0 goto label13;

        r53 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i5);

        $z6 = virtualinvoke r53.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z6 != 0 goto label12;

        r6 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i5, r53);

     label12:
        goto label15;

     label13:
        staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: void normalize(java.lang.StringBuilder)>(r4);

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r4);

        if r2 == null goto label14;

        i6 = virtualinvoke r6.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: int getCountryCode()>();

        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setCountryCode(int)>(i6);

        goto label15;

     label14:
        if z0 == 0 goto label15;

        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearCountryCodeSource()>();

     label15:
        $i2 = virtualinvoke r7.<java.lang.StringBuilder: int length()>();

        if $i2 >= 2 goto label16;

        $r29 = new com.android.i18n.phonenumbers.NumberParseException;

        $r26 = <com.android.i18n.phonenumbers.NumberParseException$ErrorType: com.android.i18n.phonenumbers.NumberParseException$ErrorType TOO_SHORT_NSN>;

        specialinvoke $r29.<com.android.i18n.phonenumbers.NumberParseException: void <init>(com.android.i18n.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r26, "The string supplied is too short to be a phone number.");

        throw $r29;

     label16:
        if r6 == null goto label17;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        r54 = $r20;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>(r7);

        r55 = $r21;

        virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean maybeStripNationalPrefixAndCarrierCode(java.lang.StringBuilder,com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.StringBuilder)>(r55, r6, r54);

        $r25 = virtualinvoke r55.<java.lang.StringBuilder: java.lang.String toString()>();

        $z4 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isShorterThanPossibleNormalNumber(com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.String)>(r6, $r25);

        if $z4 != 0 goto label17;

        r7 = r55;

        if z0 == 0 goto label17;

        $r24 = virtualinvoke r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setPreferredDomesticCarrierCode(java.lang.String)>($r24);

     label17:
        i7 = virtualinvoke r7.<java.lang.StringBuilder: int length()>();

        if i7 >= 2 goto label18;

        $r22 = new com.android.i18n.phonenumbers.NumberParseException;

        $r23 = <com.android.i18n.phonenumbers.NumberParseException$ErrorType: com.android.i18n.phonenumbers.NumberParseException$ErrorType TOO_SHORT_NSN>;

        specialinvoke $r22.<com.android.i18n.phonenumbers.NumberParseException: void <init>(com.android.i18n.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r23, "The string supplied is too short to be a phone number.");

        throw $r22;

     label18:
        if i7 <= 17 goto label19;

        $r19 = new com.android.i18n.phonenumbers.NumberParseException;

        $r18 = <com.android.i18n.phonenumbers.NumberParseException$ErrorType: com.android.i18n.phonenumbers.NumberParseException$ErrorType TOO_LONG>;

        specialinvoke $r19.<com.android.i18n.phonenumbers.NumberParseException: void <init>(com.android.i18n.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r18, "The string supplied is too long to be a phone number.");

        throw $r19;

     label19:
        $r16 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: void setItalianLeadingZerosForPhoneNumber(java.lang.String,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>($r16, r3);

        $r15 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r15);

        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setNationalNumber(long)>($l3);

        return;

        catch com.android.i18n.phonenumbers.NumberParseException from label07 to label08 with label09;
    }

    private void buildNationalNumberForParsing(java.lang.String, java.lang.StringBuilder)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r3, $r6, $r7, $r8, $r11, $r13;
        java.lang.StringBuilder r2;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i8, i9;
        char $c5;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.StringBuilder;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(";phone-context=");

        if i0 <= 0 goto label3;

        $r6 = ";phone-context=";

        $i4 = virtualinvoke $r6.<java.lang.String: int length()>();

        i1 = i0 + $i4;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);

        if $c5 != 43 goto label2;

        i2 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(59, i1);

        if i2 <= 0 goto label1;

        $r13 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i1, i2);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        goto label2;

     label1:
        $r11 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label2:
        $i6 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("tel:");

        $r7 = "tel:";

        $i7 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i8 = $i6 + $i7;

        $r8 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i8, i0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        goto label4;

     label3:
        $r3 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String extractPossibleNumber(java.lang.String)>(r1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label4:
        i9 = virtualinvoke r2.<java.lang.StringBuilder: int indexOf(java.lang.String)>(";isub=");

        if i9 <= 0 goto label5;

        $i3 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(i9, $i3);

     label5:
        return;
    }

    public com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1, r2, r3, r4, $r5, $r7;
        int i0, i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType $r16, $r17, $r18, $r19, $r20, $r23, $r25;
        java.lang.String $r21, $r22, $r24, $r28;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        $r5 = new com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r5.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        r3 = $r5;

        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber mergeFrom(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r7 = new com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r7.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        r4 = $r7;

        virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber mergeFrom(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r2);

        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearRawInput()>();

        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearCountryCodeSource()>();

        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearPreferredDomesticCarrierCode()>();

        virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearRawInput()>();

        virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearCountryCodeSource()>();

        virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearPreferredDomesticCarrierCode()>();

        $z0 = virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasExtension()>();

        if $z0 == 0 goto label1;

        $r28 = virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        $i3 = virtualinvoke $r28.<java.lang.String: int length()>();

        if $i3 != 0 goto label1;

        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearExtension()>();

     label1:
        $z2 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasExtension()>();

        if $z2 == 0 goto label2;

        $r24 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        $i2 = virtualinvoke $r24.<java.lang.String: int length()>();

        if $i2 != 0 goto label2;

        virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber clearExtension()>();

     label2:
        $z1 = virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasExtension()>();

        if $z1 == 0 goto label3;

        $z7 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasExtension()>();

        if $z7 == 0 goto label3;

        $r21 = virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        $r22 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        $z8 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z8 != 0 goto label3;

        $r25 = <com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType NO_MATCH>;

        return $r25;

     label3:
        i0 = virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        i1 = virtualinvoke r4.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        if i0 == 0 goto label6;

        if i1 == 0 goto label6;

        $z5 = virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean exactlySameAs(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r4);

        if $z5 == 0 goto label4;

        $r23 = <com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType EXACT_MATCH>;

        return $r23;

     label4:
        if i0 != i1 goto label5;

        $z6 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNationalNumberSuffixOfTheOther(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r3, r4);

        if $z6 == 0 goto label5;

        $r20 = <com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType SHORT_NSN_MATCH>;

        return $r20;

     label5:
        $r19 = <com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType NO_MATCH>;

        return $r19;

     label6:
        virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber setCountryCode(int)>(i1);

        $z3 = virtualinvoke r3.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean exactlySameAs(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r4);

        if $z3 == 0 goto label7;

        $r17 = <com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType NSN_MATCH>;

        return $r17;

     label7:
        $z4 = specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNationalNumberSuffixOfTheOther(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r3, r4);

        if $z4 == 0 goto label8;

        $r18 = <com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType SHORT_NSN_MATCH>;

        return $r18;

     label8:
        $r16 = <com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType NO_MATCH>;

        return $r16;
    }

    private boolean isNationalNumberSuffixOfTheOther(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1, r2;
        java.lang.String r3, r4;
        long $l0, $l1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        $l0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>();

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $l1 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>();

        r4 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l1);

        $z0 = virtualinvoke r3.<java.lang.String: boolean endsWith(java.lang.String)>(r4);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>(r3);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(java.lang.String, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r2;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r3, r4, r5, r6, $r12, $r13;
        com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType $r7, $r11, $r14, $r19;
        com.android.i18n.phonenumbers.NumberParseException $r8, $r15, $r16, r20, r21;
        com.android.i18n.phonenumbers.NumberParseException$ErrorType $r9, $r10, $r17, $r18;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label01:
        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.String,java.lang.String)>(r1, "ZZ");

        $r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>(r3, r2);

     label02:
        return $r7;

     label03:
        $r15 := @caughtexception;

        r20 = $r15;

        $r18 = virtualinvoke r20.<com.android.i18n.phonenumbers.NumberParseException: com.android.i18n.phonenumbers.NumberParseException$ErrorType getErrorType()>();

        $r17 = <com.android.i18n.phonenumbers.NumberParseException$ErrorType: com.android.i18n.phonenumbers.NumberParseException$ErrorType INVALID_COUNTRY_CODE>;

        if $r18 != $r17 goto label10;

     label04:
        r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.String,java.lang.String)>(r2, "ZZ");

        $r19 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>(r4, r1);

     label05:
        return $r19;

     label06:
        $r8 := @caughtexception;

        r21 = $r8;

        $r9 = virtualinvoke r21.<com.android.i18n.phonenumbers.NumberParseException: com.android.i18n.phonenumbers.NumberParseException$ErrorType getErrorType()>();

        $r10 = <com.android.i18n.phonenumbers.NumberParseException$ErrorType: com.android.i18n.phonenumbers.NumberParseException$ErrorType INVALID_COUNTRY_CODE>;

        if $r9 != $r10 goto label10;

     label07:
        $r12 = new com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r12.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        r5 = $r12;

        $r13 = new com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r13.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        r6 = $r13;

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void parseHelper(java.lang.String,java.lang.String,boolean,boolean,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1, null, 0, 0, r5);

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void parseHelper(java.lang.String,java.lang.String,boolean,boolean,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r2, null, 0, 0, r6);

        $r14 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r5, r6);

     label08:
        return $r14;

     label09:
        $r16 := @caughtexception;

     label10:
        $r11 = <com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType NOT_A_NUMBER>;

        return $r11;

        catch com.android.i18n.phonenumbers.NumberParseException from label01 to label02 with label03;
        catch com.android.i18n.phonenumbers.NumberParseException from label04 to label05 with label06;
        catch com.android.i18n.phonenumbers.NumberParseException from label07 to label08 with label09;
    }

    public com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1, r3, r5, $r13, r18;
        java.lang.String r2, r4;
        com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType r6, $r7, $r11, $r12, $r14, $r15;
        com.android.i18n.phonenumbers.NumberParseException $r8, $r16, r17;
        com.android.i18n.phonenumbers.NumberParseException$ErrorType $r9, $r10;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.lang.String;

     label01:
        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.String,java.lang.String)>(r2, "ZZ");

        $r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1, r3);

     label02:
        return $r7;

     label03:
        $r8 := @caughtexception;

        r17 = $r8;

        $r9 = virtualinvoke r17.<com.android.i18n.phonenumbers.NumberParseException: com.android.i18n.phonenumbers.NumberParseException$ErrorType getErrorType()>();

        $r10 = <com.android.i18n.phonenumbers.NumberParseException$ErrorType: com.android.i18n.phonenumbers.NumberParseException$ErrorType INVALID_COUNTRY_CODE>;

        if $r9 != $r10 goto label10;

        $i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>($i0);

     label04:
        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("ZZ");

        if $z0 != 0 goto label07;

        r5 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.String,java.lang.String)>(r2, r4);

        r6 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1, r5);

        $r15 = <com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType EXACT_MATCH>;

        if r6 != $r15 goto label06;

        $r14 = <com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType NSN_MATCH>;

     label05:
        return $r14;

     label06:
        return r6;

     label07:
        $r13 = new com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r13.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        r18 = $r13;

        specialinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: void parseHelper(java.lang.String,java.lang.String,boolean,boolean,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r2, null, 0, 0, r18);

        $r12 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1, r18);

     label08:
        return $r12;

     label09:
        $r16 := @caughtexception;

     label10:
        $r11 = <com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType: com.android.i18n.phonenumbers.PhoneNumberUtil$MatchType NOT_A_NUMBER>;

        return $r11;

        catch com.android.i18n.phonenumbers.NumberParseException from label01 to label02 with label03;
        catch com.android.i18n.phonenumbers.NumberParseException from label04 to label05 with label09;
        catch com.android.i18n.phonenumbers.NumberParseException from label07 to label08 with label09;
    }

    boolean canBeInternationallyDialled(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r2;
        java.lang.String r3, $r4;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        $r4 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        r2 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>($r4);

        if r2 != null goto label1;

        return 1;

     label1:
        r3 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r5 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc getNoInternationalDialling()>();

        $z0 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r3, $r5);

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean isMobileNumberPortableRegion(java.lang.String)
    {
        com.android.i18n.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r8;
        com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r6, $r7;
        java.util.logging.Logger $r4;
        java.util.logging.Level $r5;

        r0 := @this: com.android.i18n.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r1);

        if r2 != null goto label1;

        $r4 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r5 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid or unknown region code provided: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r5, $r8);

        return 0;

     label1:
        $z0 = virtualinvoke r2.<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean isMobileNumberPortableRegion()>();

        return $z0;
    }

    static void <clinit>()
    {
        java.util.HashMap r0, r1, r2, r3, r4, r5, $r11, $r18, $r49, $r132, $r134, $r139;
        java.util.Iterator r6;
        char c0, $c1;
        com.android.i18n.phonenumbers.PhoneNumberUtil$1 $r7;
        java.lang.Class $r8;
        java.lang.String $r9, $r189, $r191, $r192, $r194, $r199, $r208, $r212, $r218, $r222, $r225, $r228, $r231, $r232, $r244, $r249, r256, r257;
        java.util.logging.Logger $r10;
        java.lang.Integer $r12, $r14;
        java.util.Map $r15, $r129, $r131, $r135, $r136, $r137, $r196, $r198, $r201;
        java.lang.Character $r17, $r20, $r21, $r22, $r23, $r26, $r27, $r28, $r29, $r31, $r32, $r33, $r35, $r38, $r40, $r41, $r42, $r43, $r44, $r45, $r47, $r48, $r52, $r53, $r55, $r57, $r58, $r59, $r60, $r62, $r63, $r64, $r66, $r68, $r69, $r72, $r73, $r75, $r77, $r78, $r80, $r81, $r82, $r83, $r84, $r85, $r87, $r88, $r89, $r91, $r94, $r95, $r98, $r99, $r100, $r101, $r103, $r104, $r105, $r108, $r109, $r110, $r111, $r113, $r114, $r116, $r117, $r120, $r121, $r123, $r124, $r126, $r127, $r128, $r138, $r141, $r142, $r144, $r145, $r147, $r148, $r150, $r151, $r153, $r154, $r156, $r158, $r159, $r161, $r163, $r164, $r165, $r167, $r168, $r169, $r170, $r172, $r174, $r175, $r176, $r177, $r178, $r179, $r181, $r182, $r183, $r185, $r188, $r237, $r251, $r252, $r253, $r254;
        java.util.Set $r133, $r195, $r197;
        boolean $z0;
        java.lang.Object[] $r190, $r200;
        java.lang.StringBuilder $r193, $r203, $r205, $r206, $r207, $r210, $r211, $r217, $r221, $r223, $r226, $r227, $r229, $r230, $r233, $r234, $r235, $r246, $r247, $r248;
        java.util.regex.Pattern $r204, $r209, $r213, $r214, $r215, $r216, $r219, $r220, $r224, $r238, $r239, $r240, $r241, $r242, $r243, $r245;
        java.lang.Object $r236;

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String REGION_CODE_FOR_NON_GEO_ENTITY> = "001";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String CAPTURING_EXTN_DIGITS> = "(\\p{Nd}{1,7})";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String DEFAULT_EXTN_PREFIX> = " ext. ";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String UNWANTED_END_CHARS> = "[[\\P{N}&&\\P{L}]&&[^#]]+$";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String SECOND_NUMBER_START> = "[\\\\/] *x";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String VALID_START_CHAR> = "[+\uff0b\\p{Nd}]";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String PLUS_CHARS> = "+\uff0b";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String DIGITS> = "\\p{Nd}";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String VALID_PUNCTUATION> = "-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\\[\\]/~\u2053\u223c\uff5e";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String RFC3966_ISDN_SUBADDRESS> = ";isub=";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String RFC3966_PHONE_CONTEXT> = ";phone-context=";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String RFC3966_PREFIX> = "tel:";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String RFC3966_EXTN_PREFIX> = ";ext=";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: char STAR_SIGN> = 42;

        <com.android.i18n.phonenumbers.PhoneNumberUtil: char PLUS_SIGN> = 43;

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX> = "3";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: int NANPA_COUNTRY_CODE> = 1;

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String UNKNOWN_REGION> = "ZZ";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String META_DATA_FILE_PREFIX> = "/com/android/i18n/phonenumbers/data/PhoneNumberMetadataProto";

        <com.android.i18n.phonenumbers.PhoneNumberUtil: int MAX_INPUT_STRING_LENGTH> = 250;

        <com.android.i18n.phonenumbers.PhoneNumberUtil: int MAX_LENGTH_COUNTRY_CODE> = 3;

        <com.android.i18n.phonenumbers.PhoneNumberUtil: int MAX_LENGTH_FOR_NSN> = 17;

        <com.android.i18n.phonenumbers.PhoneNumberUtil: int MIN_LENGTH_FOR_NSN> = 2;

        <com.android.i18n.phonenumbers.PhoneNumberUtil: int REGEX_FLAGS> = 66;

        $r7 = new com.android.i18n.phonenumbers.PhoneNumberUtil$1;

        specialinvoke $r7.<com.android.i18n.phonenumbers.PhoneNumberUtil$1: void <init>()>();

        <com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.MetadataLoader DEFAULT_METADATA_LOADER> = $r7;

        $r8 = class "com/android/i18n/phonenumbers/PhoneNumberUtil";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r9);

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger> = $r10;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0 = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(52);

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, "1");

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(54);

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, "9");

        $r15 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r0);

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map MOBILE_TOKEN_MAPPINGS> = $r15;

        $r18 = new java.util.HashMap;

        specialinvoke $r18.<java.util.HashMap: void <init>()>();

        r1 = $r18;

        $r17 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(48);

        $r20 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(48);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r20);

        $r22 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(49);

        $r21 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(49);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r21);

        $r23 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(50);

        $r26 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(50);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r26);

        $r28 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(51);

        $r27 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(51);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r27);

        $r29 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(52);

        $r33 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(52);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r33);

        $r31 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(53);

        $r32 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(53);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, $r32);

        $r38 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(54);

        $r35 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(54);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r35);

        $r41 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(55);

        $r42 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(55);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r41, $r42);

        $r40 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(56);

        $r45 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(56);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r40, $r45);

        $r43 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(57);

        $r44 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(57);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, $r44);

        $r49 = new java.util.HashMap;

        specialinvoke $r49.<java.util.HashMap: void <init>(int)>(40);

        r2 = $r49;

        $r48 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        $r47 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(50);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, $r47);

        $r53 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(66);

        $r52 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(50);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r53, $r52);

        $r58 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(67);

        $r57 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(50);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r58, $r57);

        $r55 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(68);

        $r62 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(51);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r55, $r62);

        $r60 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(69);

        $r59 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(51);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r60, $r59);

        $r68 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(70);

        $r69 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(51);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r68, $r69);

        $r63 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(71);

        $r64 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(52);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r63, $r64);

        $r66 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(72);

        $r75 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(52);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r66, $r75);

        $r77 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(73);

        $r78 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(52);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r77, $r78);

        $r72 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(74);

        $r73 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(53);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r72, $r73);

        $r84 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(75);

        $r83 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(53);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r84, $r83);

        $r85 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(76);

        $r80 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(53);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r85, $r80);

        $r82 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(77);

        $r81 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(54);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r82, $r81);

        $r91 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(78);

        $r94 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(54);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r91, $r94);

        $r88 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(79);

        $r87 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(54);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r88, $r87);

        $r89 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(80);

        $r101 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(55);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r89, $r101);

        $r99 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(81);

        $r100 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(55);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r99, $r100);

        $r98 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(82);

        $r95 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(55);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r98, $r95);

        $r109 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(83);

        $r110 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(55);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r109, $r110);

        $r108 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(84);

        $r105 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(56);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r108, $r105);

        $r103 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(85);

        $r104 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(56);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r103, $r104);

        $r117 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(86);

        $r116 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(56);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r117, $r116);

        $r114 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(87);

        $r113 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(57);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r114, $r113);

        $r111 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(88);

        $r126 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(57);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r111, $r126);

        $r124 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(89);

        $r123 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(57);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r124, $r123);

        $r121 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(90);

        $r120 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(57);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r121, $r120);

        $r135 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r2);

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_MAPPINGS> = $r135;

        $r134 = new java.util.HashMap;

        specialinvoke $r134.<java.util.HashMap: void <init>(int)>(100);

        r3 = $r134;

        $r137 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_MAPPINGS>;

        virtualinvoke r3.<java.util.HashMap: void putAll(java.util.Map)>($r137);

        virtualinvoke r3.<java.util.HashMap: void putAll(java.util.Map)>(r1);

        $r136 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r3);

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_PHONE_MAPPINGS> = $r136;

        $r139 = new java.util.HashMap;

        specialinvoke $r139.<java.util.HashMap: void <init>()>();

        r4 = $r139;

        virtualinvoke r4.<java.util.HashMap: void putAll(java.util.Map)>(r1);

        $r138 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(43);

        $r141 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(43);

        virtualinvoke r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r138, $r141);

        $r128 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(42);

        $r127 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(42);

        virtualinvoke r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r128, $r127);

        $r129 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r4);

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map DIALLABLE_CHAR_MAPPINGS> = $r129;

        $r132 = new java.util.HashMap;

        specialinvoke $r132.<java.util.HashMap: void <init>()>();

        r5 = $r132;

        $r131 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_MAPPINGS>;

        $r133 = interfaceinvoke $r131.<java.util.Map: java.util.Set keySet()>();

        r6 = interfaceinvoke $r133.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r236 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r237 = (java.lang.Character) $r236;

        c0 = virtualinvoke $r237.<java.lang.Character: char charValue()>();

        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c0);

        $r252 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r253 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r252, $r253);

        $r251 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $r254 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r251, $r254);

        goto label1;

     label2:
        virtualinvoke r5.<java.util.HashMap: void putAll(java.util.Map)>(r1);

        $r150 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        $r151 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r150, $r151);

        $r153 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65293);

        $r154 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r153, $r154);

        $r156 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8208);

        $r142 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r156, $r142);

        $r144 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8209);

        $r145 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r144, $r145);

        $r147 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8210);

        $r148 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r147, $r148);

        $r168 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8211);

        $r167 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r168, $r167);

        $r165 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8212);

        $r172 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r165, $r172);

        $r170 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8213);

        $r169 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r170, $r169);

        $r159 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8722);

        $r158 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r159, $r158);

        $r164 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(47);

        $r163 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(47);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r164, $r163);

        $r161 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65295);

        $r183 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(47);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r161, $r183);

        $r181 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        $r182 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r181, $r182);

        $r188 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(12288);

        $r185 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r188, $r185);

        $r175 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8288);

        $r176 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r175, $r176);

        $r174 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(46);

        $r179 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(46);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r174, $r179);

        $r177 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65294);

        $r178 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(46);

        virtualinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r177, $r178);

        $r201 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r5);

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map ALL_PLUS_NUMBER_GROUPING_SYMBOLS> = $r201;

        $r204 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\\d]+(?:[~\u2053\u223c\uff5e][\\d]+)?");

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern UNIQUE_INTERNATIONAL_PREFIX> = $r204;

        $r203 = new java.lang.StringBuilder;

        specialinvoke $r203.<java.lang.StringBuilder: void <init>()>();

        $r198 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_MAPPINGS>;

        $r197 = interfaceinvoke $r198.<java.util.Map: java.util.Set keySet()>();

        $r200 = interfaceinvoke $r197.<java.util.Set: java.lang.Object[] toArray()>();

        $r199 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r200);

        $r194 = virtualinvoke $r199.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[, \\[\\]]", "");

        $r193 = virtualinvoke $r203.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r194);

        $r196 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_MAPPINGS>;

        $r195 = interfaceinvoke $r196.<java.util.Map: java.util.Set keySet()>();

        $r190 = interfaceinvoke $r195.<java.util.Set: java.lang.Object[] toArray()>();

        $r189 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r190);

        $r192 = virtualinvoke $r189.<java.lang.String: java.lang.String toLowerCase()>();

        $r191 = virtualinvoke $r192.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[, \\[\\]]", "");

        $r217 = virtualinvoke $r193.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r191);

        $r218 = virtualinvoke $r217.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String VALID_ALPHA> = $r218;

        $r219 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[+\uff0b]+");

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern PLUS_CHARS_PATTERN> = $r219;

        $r220 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\\[\\]/~\u2053\u223c\uff5e]+");

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern SEPARATOR_PATTERN> = $r220;

        $r213 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\p{Nd})");

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern CAPTURING_DIGIT_PATTERN> = $r213;

        $r214 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[+\uff0b\\p{Nd}]");

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern VALID_START_CHAR_PATTERN> = $r214;

        $r215 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\\\\/] *x");

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern SECOND_NUMBER_START_PATTERN> = $r215;

        $r216 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[[\\P{N}&&\\P{L}]&&[^#]]+$");

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern UNWANTED_END_CHAR_PATTERN> = $r216;

        $r209 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?:.*?[A-Za-z]){3}.*");

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern VALID_ALPHA_PHONE_PATTERN> = $r209;

        $r210 = new java.lang.StringBuilder;

        specialinvoke $r210.<java.lang.StringBuilder: void <init>()>();

        $r211 = virtualinvoke $r210.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\p{Nd}{2}|[+\uff0b]*+(?:[-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\\[\\]/~\u2053\u223c\uff5e*]*\\p{Nd}){3,}[-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\\[\\]/~\u2053\u223c\uff5e*");

        $r212 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String VALID_ALPHA>;

        $r205 = virtualinvoke $r211.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r212);

        $r206 = virtualinvoke $r205.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\p{Nd}");

        $r207 = virtualinvoke $r206.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]*");

        $r208 = virtualinvoke $r207.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String VALID_PHONE_NUMBER> = $r208;

        r256 = "x\uff58#\uff03~\uff5e";

        $r235 = new java.lang.StringBuilder;

        specialinvoke $r235.<java.lang.StringBuilder: void <init>()>();

        $r234 = virtualinvoke $r235.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r233 = virtualinvoke $r234.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r256);

        r257 = virtualinvoke $r233.<java.lang.StringBuilder: java.lang.String toString()>();

        $r232 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String createExtnPattern(java.lang.String)>(r257);

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String EXTN_PATTERNS_FOR_PARSING> = $r232;

        $r231 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String createExtnPattern(java.lang.String)>(r256);

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String EXTN_PATTERNS_FOR_MATCHING> = $r231;

        $r230 = new java.lang.StringBuilder;

        specialinvoke $r230.<java.lang.StringBuilder: void <init>()>();

        $r229 = virtualinvoke $r230.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:");

        $r228 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String EXTN_PATTERNS_FOR_PARSING>;

        $r227 = virtualinvoke $r229.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r228);

        $r226 = virtualinvoke $r227.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")$");

        $r225 = virtualinvoke $r226.<java.lang.StringBuilder: java.lang.String toString()>();

        $r224 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r225, 66);

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern EXTN_PATTERN> = $r224;

        $r223 = new java.lang.StringBuilder;

        specialinvoke $r223.<java.lang.StringBuilder: void <init>()>();

        $r222 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String VALID_PHONE_NUMBER>;

        $r221 = virtualinvoke $r223.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r222);

        $r248 = virtualinvoke $r221.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:");

        $r249 = <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String EXTN_PATTERNS_FOR_PARSING>;

        $r246 = virtualinvoke $r248.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r249);

        $r247 = virtualinvoke $r246.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r244 = virtualinvoke $r247.<java.lang.StringBuilder: java.lang.String toString()>();

        $r245 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r244, 66);

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern VALID_PHONE_NUMBER_PATTERN> = $r245;

        $r242 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\D+)");

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern NON_DIGITS_PATTERN> = $r242;

        $r243 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\$\\d)");

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern FIRST_GROUP_PATTERN> = $r243;

        $r240 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\$NP");

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern NP_PATTERN> = $r240;

        $r241 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\$FG");

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern FG_PATTERN> = $r241;

        $r238 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\$CC");

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern CC_PATTERN> = $r238;

        $r239 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\(?\\$1\\)?");

        <com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern FIRST_GROUP_ONLY_PREFIX_PATTERN> = $r239;

        <com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil instance> = null;

        return;
    }
}
