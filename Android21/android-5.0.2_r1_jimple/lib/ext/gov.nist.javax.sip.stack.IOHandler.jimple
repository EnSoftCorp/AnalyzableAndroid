class gov.nist.javax.sip.stack.IOHandler extends java.lang.Object
{
    private java.util.concurrent.Semaphore ioSemaphore;
    private gov.nist.javax.sip.SipStackImpl sipStack;
    private static java.lang.String TCP;
    private static java.lang.String TLS;
    private java.util.concurrent.ConcurrentHashMap socketTable;

    protected static java.lang.String makeKey(java.net.InetAddress, int)
    {
        java.net.InetAddress r0;
        int i0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        java.lang.String $r2, $r6;

        r0 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    protected void <init>(gov.nist.javax.sip.stack.SIPTransactionStack)
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        gov.nist.javax.sip.stack.SIPTransactionStack r1;
        java.util.concurrent.Semaphore $r2;
        gov.nist.javax.sip.SipStackImpl $r3;
        java.util.concurrent.ConcurrentHashMap $r4;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.Semaphore;

        specialinvoke $r2.<java.util.concurrent.Semaphore: void <init>(int)>(1);

        r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore> = $r2;

        $r3 = (gov.nist.javax.sip.SipStackImpl) r1;

        r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable> = $r4;

        return;
    }

    protected void putSocket(java.lang.String, java.net.Socket)
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.lang.String r1;
        java.net.Socket r2;
        java.util.concurrent.ConcurrentHashMap $r3;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.net.Socket;

        $r3 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    protected java.net.Socket getSocket(java.lang.String)
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        java.net.Socket $r4;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.net.Socket) $r3;

        return $r4;
    }

    protected void removeSocket(java.lang.String)
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    private void writeChunks(java.io.OutputStream, byte[], int) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.io.OutputStream r1, r3;
        byte[] r2;
        int i0, i2, i3, $i4, $i5;
        short s1;
        java.lang.Throwable r4, $r6;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        r3 = r1;

        entermonitor r1;

     label1:
        s1 = 8192;

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        $i4 = i2 + s1;

        if $i4 >= i0 goto label3;

        $i5 = s1;

        goto label4;

     label3:
        $i5 = i0 - i2;

     label4:
        i3 = $i5;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, i2, i3);

        i2 = i2 + s1;

        goto label2;

     label5:
        exitmonitor r3;

     label6:
        goto label9;

     label7:
        $r6 := @caughtexception;

        r4 = $r6;

        exitmonitor r3;

     label8:
        throw r4;

     label9:
        virtualinvoke r1.<java.io.OutputStream: void flush()>();

        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.net.SocketAddress obtainLocalAddress(java.net.InetAddress, int, java.net.InetAddress, int) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.net.InetAddress r1, r2;
        int i0, i1;
        java.lang.String r3;
        java.net.Socket r4;
        java.net.SocketAddress $r5;
        gov.nist.javax.sip.SipStackImpl $r6;
        gov.nist.core.net.NetworkLayer $r7;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        r3 = staticinvoke <gov.nist.javax.sip.stack.IOHandler: java.lang.String makeKey(java.net.InetAddress,int)>(r1, i0);

        r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket getSocket(java.lang.String)>(r3);

        if r4 != null goto label1;

        $r6 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r7 = virtualinvoke $r6.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.NetworkLayer getNetworkLayer()>();

        r4 = interfaceinvoke $r7.<gov.nist.core.net.NetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void putSocket(java.lang.String,java.net.Socket)>(r3, r4);

     label1:
        $r5 = virtualinvoke r4.<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>();

        return $r5;
    }

    public java.net.Socket sendBytes(java.net.InetAddress, java.net.InetAddress, int, java.lang.String, byte[], boolean, gov.nist.javax.sip.stack.MessageChannel) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.net.InetAddress r1, r2;
        int i0, i1, i3, $i4, $i5;
        java.lang.String r3, r6, $r13, $r14, $r28, $r38, $r49, $r58, $r62, $r66, $r82, $r92, $r96, $r110, $r116, r130;
        byte[] r4;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10;
        gov.nist.javax.sip.stack.MessageChannel r5;
        byte b2, $b6;
        java.io.OutputStream r7, r128, r135, r136;
        java.lang.Throwable r9, r11, $r102, $r117;
        gov.nist.javax.sip.SipStackImpl $r10, $r12, $r15, $r26, $r30, $r31, $r36, $r45, $r56, $r61, $r65, $r68, $r75, $r77, $r83, $r87, $r89, $r90, $r105, $r107, $r121, $r122;
        gov.nist.core.net.NetworkLayer $r16, $r29, $r76;
        java.net.DatagramPacket $r17, r140;
        java.util.concurrent.Semaphore $r18, $r20, $r47, $r55, $r101, $r118;
        java.util.concurrent.TimeUnit $r19, $r46;
        java.io.IOException $r21, $r50, $r57, $r91, $r106, $r111, $r113, $r120, r137;
        java.lang.StringBuilder $r22, $r23, $r24, $r25, $r27, $r39, $r40, $r41, $r42, $r43, $r48, $r51, $r52, $r53, $r54, $r63, $r67, $r69, $r70, $r71, $r72, $r74, $r78, $r79, $r81, $r84, $r85, $r93, $r94, $r95, $r97, $r98, $r99, $r100, $r108, $r109, $r115, $r124, $r125;
        gov.nist.javax.sip.stack.TLSMessageChannel $r32, $r33;
        gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl $r34, r134;
        gov.nist.core.StackLogger $r35, $r44, $r60, $r64, $r73, $r80, $r86, $r88, $r119, $r123;
        java.lang.String[] $r37;
        java.util.concurrent.ConcurrentHashMap $r59;
        java.lang.Exception $r103, $r104;
        java.lang.InterruptedException $r112, $r114;
        java.net.Socket r127, r132;
        javax.net.ssl.SSLSocket r133;
        java.net.DatagramSocket r139;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        r1 := @parameter0: java.net.InetAddress;

        r2 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: byte[];

        z0 := @parameter5: boolean;

        r5 := @parameter6: gov.nist.javax.sip.stack.MessageChannel;

        i1 = 0;

        if z0 == 0 goto label01;

        $b6 = 2;

        goto label02;

     label01:
        $b6 = 1;

     label02:
        b2 = $b6;

        i3 = lengthof r4;

        $r10 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z2 = virtualinvoke $r10.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label03;

        $r87 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r86 = virtualinvoke $r87.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        $r99 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendBytes ");

        $r98 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r97 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inAddr ");

        $r96 = virtualinvoke r2.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r95 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r96);

        $r94 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" port = ");

        $r93 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r109 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length = ");

        $r108 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r110 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r86.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r110);

     label03:
        $r12 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z3 = virtualinvoke $r12.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label04;

        $r90 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z7 = virtualinvoke $r90.<gov.nist.javax.sip.SipStackImpl: boolean isLogStackTraceOnMessageSend()>();

        if $z7 == 0 goto label04;

        $r89 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r88 = virtualinvoke $r89.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r88.<gov.nist.core.StackLogger: void logStackTrace(int)>(16);

     label04:
        $r13 = <gov.nist.javax.sip.stack.IOHandler: java.lang.String TCP>;

        $i4 = virtualinvoke r3.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r13);

        if $i4 != 0 goto label25;

        r6 = staticinvoke <gov.nist.javax.sip.stack.IOHandler: java.lang.String makeKey(java.net.InetAddress,int)>(r2, i0);

     label05:
        $r47 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        $r46 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        z1 = virtualinvoke $r47.<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>(10000L, $r46);

        if z1 != 0 goto label06;

        $r91 = new java.io.IOException;

        specialinvoke $r91.<java.io.IOException: void <init>(java.lang.String)>("Could not acquire IO Semaphore after 10 seconds -- giving up ");

        throw $r91;

     label06:
        goto label08;

     label07:
        $r114 := @caughtexception;

        $r113 = new java.io.IOException;

        specialinvoke $r113.<java.io.IOException: void <init>(java.lang.String)>("exception in acquiring sem");

        throw $r113;

     label08:
        r127 = virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket getSocket(java.lang.String)>(r6);

     label09:
        if i1 >= b2 goto label19;

        if r127 != null goto label11;

        $r68 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z6 = virtualinvoke $r68.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label10;

        $r75 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r73 = virtualinvoke $r75.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inaddr = ");

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r82 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r73.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r82);

        $r83 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r80 = virtualinvoke $r83.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("port = ");

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r92 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r80.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r92);

     label10:
        $r77 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r76 = virtualinvoke $r77.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.NetworkLayer getNetworkLayer()>();

        r127 = interfaceinvoke $r76.<gov.nist.core.net.NetworkLayer: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress)>(r2, i0, r1);

        r7 = virtualinvoke r127.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void writeChunks(java.io.OutputStream,byte[],int)>(r7, r4, i3);

        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void putSocket(java.lang.String,java.net.Socket)>(r6, r127);

        goto label19;

     label11:
        r128 = virtualinvoke r127.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void writeChunks(java.io.OutputStream,byte[],int)>(r128, r4, i3);

     label12:
        goto label19;

     label13:
        $r120 := @caughtexception;

        $r121 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z9 = virtualinvoke $r121.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label14;

        $r122 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r123 = virtualinvoke $r122.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r124 = new java.lang.StringBuilder;

        specialinvoke $r124.<java.lang.StringBuilder: void <init>()>();

        $r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException occured retryCount ");

        $r115 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r123.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r116);

     label14:
        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void removeSocket(java.lang.String)>(r6);

     label15:
        virtualinvoke r127.<java.net.Socket: void close()>();

     label16:
        goto label18;

     label17:
        $r103 := @caughtexception;

     label18:
        r127 = null;

        i1 = i1 + 1;

        goto label09;

     label19:
        $r55 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        virtualinvoke $r55.<java.util.concurrent.Semaphore: void release()>();

        goto label22;

     label20:
        $r117 := @caughtexception;

        r9 = $r117;

     label21:
        $r118 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        virtualinvoke $r118.<java.util.concurrent.Semaphore: void release()>();

        throw r9;

     label22:
        if r127 != null goto label24;

        $r56 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z5 = virtualinvoke $r56.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label23;

        $r65 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r64 = virtualinvoke $r65.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r59 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        $r58 = virtualinvoke $r59.<java.util.concurrent.ConcurrentHashMap: java.lang.String toString()>();

        interfaceinvoke $r64.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r58);

        $r61 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r60 = virtualinvoke $r61.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not connect to ");

        $r72 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r71 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r67 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r66 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r60.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r66);

     label23:
        $r57 = new java.io.IOException;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not connect to ");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r63 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r62 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r57.<java.io.IOException: void <init>(java.lang.String)>($r62);

        throw $r57;

     label24:
        return r127;

     label25:
        $r14 = <gov.nist.javax.sip.stack.IOHandler: java.lang.String TLS>;

        $i5 = virtualinvoke r3.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r14);

        if $i5 != 0 goto label45;

        r130 = staticinvoke <gov.nist.javax.sip.stack.IOHandler: java.lang.String makeKey(java.net.InetAddress,int)>(r2, i0);

     label26:
        $r18 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        $r19 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        z10 = virtualinvoke $r18.<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>(10000L, $r19);

        if z10 != 0 goto label27;

        $r50 = new java.io.IOException;

        specialinvoke $r50.<java.io.IOException: void <init>(java.lang.String)>("Timeout acquiring IO SEM");

        throw $r50;

     label27:
        goto label29;

     label28:
        $r112 := @caughtexception;

        $r111 = new java.io.IOException;

        specialinvoke $r111.<java.io.IOException: void <init>(java.lang.String)>("exception in acquiring sem");

        throw $r111;

     label29:
        r132 = virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: java.net.Socket getSocket(java.lang.String)>(r130);

     label30:
        if i1 >= b2 goto label40;

        if r132 != null goto label32;

        $r26 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z4 = virtualinvoke $r26.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label31;

        $r36 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r35 = virtualinvoke $r36.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inaddr = ");

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r35.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r38);

        $r45 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r44 = virtualinvoke $r45.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("port = ");

        $r48 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r44.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r49);

     label31:
        $r30 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r29 = virtualinvoke $r30.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.NetworkLayer getNetworkLayer()>();

        r132 = interfaceinvoke $r29.<gov.nist.core.net.NetworkLayer: javax.net.ssl.SSLSocket createSSLSocket(java.net.InetAddress,int,java.net.InetAddress)>(r2, i0, r1);

        r133 = (javax.net.ssl.SSLSocket) r132;

        $r34 = new gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl;

        $r33 = (gov.nist.javax.sip.stack.TLSMessageChannel) r5;

        specialinvoke $r34.<gov.nist.javax.sip.stack.HandshakeCompletedListenerImpl: void <init>(gov.nist.javax.sip.stack.TLSMessageChannel)>($r33);

        r134 = $r34;

        $r32 = (gov.nist.javax.sip.stack.TLSMessageChannel) r5;

        virtualinvoke $r32.<gov.nist.javax.sip.stack.TLSMessageChannel: void setHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)>(r134);

        virtualinvoke r133.<javax.net.ssl.SSLSocket: void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)>(r134);

        $r31 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r37 = virtualinvoke $r31.<gov.nist.javax.sip.SipStackImpl: java.lang.String[] getEnabledProtocols()>();

        virtualinvoke r133.<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>($r37);

        virtualinvoke r133.<javax.net.ssl.SSLSocket: void startHandshake()>();

        r135 = virtualinvoke r132.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void writeChunks(java.io.OutputStream,byte[],int)>(r135, r4, i3);

        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void putSocket(java.lang.String,java.net.Socket)>(r130, r132);

        goto label40;

     label32:
        r136 = virtualinvoke r132.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void writeChunks(java.io.OutputStream,byte[],int)>(r136, r4, i3);

     label33:
        goto label40;

     label34:
        $r106 := @caughtexception;

        r137 = $r106;

        $r105 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z8 = virtualinvoke $r105.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z8 == 0 goto label35;

        $r107 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r119 = virtualinvoke $r107.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r119.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r137);

     label35:
        virtualinvoke r0.<gov.nist.javax.sip.stack.IOHandler: void removeSocket(java.lang.String)>(r130);

     label36:
        virtualinvoke r132.<java.net.Socket: void close()>();

     label37:
        goto label39;

     label38:
        $r104 := @caughtexception;

     label39:
        r132 = null;

        i1 = i1 + 1;

        goto label30;

     label40:
        $r20 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        virtualinvoke $r20.<java.util.concurrent.Semaphore: void release()>();

        goto label43;

     label41:
        $r102 := @caughtexception;

        r11 = $r102;

     label42:
        $r101 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.Semaphore ioSemaphore>;

        virtualinvoke $r101.<java.util.concurrent.Semaphore: void release()>();

        throw r11;

     label43:
        if r132 != null goto label44;

        $r21 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not connect to ");

        $r22 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>($r28);

        throw $r21;

     label44:
        return r132;

     label45:
        $r15 = r0.<gov.nist.javax.sip.stack.IOHandler: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r16 = virtualinvoke $r15.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.NetworkLayer getNetworkLayer()>();

        r139 = interfaceinvoke $r16.<gov.nist.core.net.NetworkLayer: java.net.DatagramSocket createDatagramSocket()>();

        virtualinvoke r139.<java.net.DatagramSocket: void connect(java.net.InetAddress,int)>(r2, i0);

        $r17 = new java.net.DatagramPacket;

        specialinvoke $r17.<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.InetAddress,int)>(r4, 0, i3, r2, i0);

        r140 = $r17;

        virtualinvoke r139.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>(r140);

        virtualinvoke r139.<java.net.DatagramSocket: void close()>();

        return null;

        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Exception from label15 to label16 with label17;
        catch java.lang.Throwable from label09 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.InterruptedException from label26 to label27 with label28;
        catch java.io.IOException from label32 to label33 with label34;
        catch java.lang.Exception from label36 to label37 with label38;
        catch java.lang.Throwable from label30 to label40 with label41;
        catch java.lang.Throwable from label41 to label42 with label41;
    }

    public void closeAll()
    {
        gov.nist.javax.sip.stack.IOHandler r0;
        java.util.Enumeration r1;
        java.net.Socket r2;
        java.util.concurrent.ConcurrentHashMap $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.io.IOException $r6;

        r0 := @this: gov.nist.javax.sip.stack.IOHandler;

        $r4 = r0.<gov.nist.javax.sip.stack.IOHandler: java.util.concurrent.ConcurrentHashMap socketTable>;

        r1 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r2 = (java.net.Socket) $r5;

     label2:
        virtualinvoke r2.<java.net.Socket: void close()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        goto label1;

     label6:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    static void <clinit>()
    {
        <gov.nist.javax.sip.stack.IOHandler: java.lang.String TCP> = "tcp";

        <gov.nist.javax.sip.stack.IOHandler: java.lang.String TLS> = "tls";

        return;
    }
}
