public class gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser extends gov.nist.javax.sip.parser.HeaderParser implements gov.nist.javax.sip.parser.TokenTypes
{

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser r0;
        gov.nist.javax.sip.header.ims.PAccessNetworkInfo r1, $r5, r21;
        gov.nist.core.Token r2;
        gov.nist.core.NameValue r3;
        java.lang.Throwable r4, $r19;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r6, $r7, $r9, $r11, $r12, $r13, $r14, $r17, $r18, $r20;
        java.lang.String $r10;
        char $c0;

        r0 := @this: gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser;

        $z0 = <gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: void dbg_enter(java.lang.String)>("AccessNetworkInfoParser.parse");

     label1:
        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: void headerName(int)>(2127);

        $r5 = new gov.nist.javax.sip.header.ims.PAccessNetworkInfo;

        specialinvoke $r5.<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void <init>()>();

        r1 = $r5;

        virtualinvoke r1.<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setHeaderName(java.lang.String)>("P-Access-Network-Info");

        $r6 = r0.<gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: void SPorHT()>();

        $r7 = r0.<gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(4095);

        $r9 = r0.<gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: gov.nist.core.LexerCore lexer>;

        r2 = virtualinvoke $r9.<gov.nist.core.LexerCore: gov.nist.core.Token getNextToken()>();

        $r10 = virtualinvoke r2.<gov.nist.core.Token: java.lang.String getTokenValue()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setAccessType(java.lang.String)>($r10);

        $r11 = r0.<gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r11.<gov.nist.core.LexerCore: void SPorHT()>();

     label2:
        $r12 = r0.<gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: gov.nist.core.LexerCore lexer>;

        $c0 = virtualinvoke $r12.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c0 != 59 goto label3;

        $r17 = r0.<gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r17.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(59);

        $r18 = r0.<gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r18.<gov.nist.core.LexerCore: void SPorHT()>();

        r3 = specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.NameValue nameValue(char)>(61);

        virtualinvoke r1.<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setParameter(gov.nist.core.NameValue)>(r3);

        $r20 = r0.<gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r20.<gov.nist.core.LexerCore: void SPorHT()>();

        goto label2;

     label3:
        $r14 = r0.<gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r14.<gov.nist.core.LexerCore: void SPorHT()>();

        $r13 = r0.<gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r13.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(10);

        r21 = r1;

     label4:
        $z1 = <gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: boolean debug>;

        if $z1 == 0 goto label5;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: void dbg_leave(java.lang.String)>("AccessNetworkInfoParser.parse");

     label5:
        return r21;

     label6:
        $r19 := @caughtexception;

        r4 = $r19;

     label7:
        $z2 = <gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: boolean debug>;

        if $z2 == 0 goto label8;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PAccessNetworkInfoParser: void dbg_leave(java.lang.String)>("AccessNetworkInfoParser.parse");

     label8:
        throw r4;

        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }
}
