public class gov.nist.javax.sip.parser.Pipeline extends java.io.InputStream
{
    private java.util.LinkedList buffList;
    private gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer;
    private boolean isClosed;
    private java.util.Timer timer;
    private java.io.InputStream pipe;
    private int readTimeout;
    private java.util.TimerTask myTimerTask;

    public void startTimer()
    {
        gov.nist.javax.sip.parser.Pipeline r0;
        int $i0, $i1;
        gov.nist.javax.sip.parser.Pipeline$MyTimer $r1;
        long $l2;
        java.util.TimerTask $r2;
        java.util.Timer $r3;

        r0 := @this: gov.nist.javax.sip.parser.Pipeline;

        $i0 = r0.<gov.nist.javax.sip.parser.Pipeline: int readTimeout>;

        if $i0 != -1 goto label1;

        return;

     label1:
        $r1 = new gov.nist.javax.sip.parser.Pipeline$MyTimer;

        specialinvoke $r1.<gov.nist.javax.sip.parser.Pipeline$MyTimer: void <init>(gov.nist.javax.sip.parser.Pipeline,gov.nist.javax.sip.parser.Pipeline)>(r0, r0);

        r0.<gov.nist.javax.sip.parser.Pipeline: java.util.TimerTask myTimerTask> = $r1;

        $r3 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.Timer timer>;

        $r2 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.TimerTask myTimerTask>;

        $i1 = r0.<gov.nist.javax.sip.parser.Pipeline: int readTimeout>;

        $l2 = (long) $i1;

        virtualinvoke $r3.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r2, $l2);

        return;
    }

    public void stopTimer()
    {
        gov.nist.javax.sip.parser.Pipeline r0;
        int $i0;
        java.util.TimerTask $r1, $r2;

        r0 := @this: gov.nist.javax.sip.parser.Pipeline;

        $i0 = r0.<gov.nist.javax.sip.parser.Pipeline: int readTimeout>;

        if $i0 != -1 goto label1;

        return;

     label1:
        $r1 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.TimerTask myTimerTask>;

        if $r1 == null goto label2;

        $r2 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.TimerTask myTimerTask>;

        virtualinvoke $r2.<java.util.TimerTask: boolean cancel()>();

     label2:
        return;
    }

    public void <init>(java.io.InputStream, int, java.util.Timer)
    {
        gov.nist.javax.sip.parser.Pipeline r0;
        java.io.InputStream r1;
        int i0;
        java.util.Timer r2;
        java.util.LinkedList $r3;

        r0 := @this: gov.nist.javax.sip.parser.Pipeline;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Timer;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<gov.nist.javax.sip.parser.Pipeline: java.util.Timer timer> = r2;

        r0.<gov.nist.javax.sip.parser.Pipeline: java.io.InputStream pipe> = r1;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList> = $r3;

        r0.<gov.nist.javax.sip.parser.Pipeline: int readTimeout> = i0;

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        gov.nist.javax.sip.parser.Pipeline r0;
        byte[] r1;
        int i0, i1;
        gov.nist.javax.sip.parser.Pipeline$Buffer r2, $r5;
        java.util.LinkedList r3, $r6, $r7, $r8;
        java.lang.Throwable r4, $r10;
        boolean $z0;
        java.io.IOException $r9;

        r0 := @this: gov.nist.javax.sip.parser.Pipeline;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<gov.nist.javax.sip.parser.Pipeline: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Closed!!");

        throw $r9;

     label1:
        $r5 = new gov.nist.javax.sip.parser.Pipeline$Buffer;

        specialinvoke $r5.<gov.nist.javax.sip.parser.Pipeline$Buffer: void <init>(gov.nist.javax.sip.parser.Pipeline,byte[],int)>(r0, r1, i1);

        r2 = $r5;

        r2.<gov.nist.javax.sip.parser.Pipeline$Buffer: int ptr> = i0;

        $r6 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        r3 = $r6;

        entermonitor $r6;

     label2:
        $r7 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>(r2);

        $r8 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        virtualinvoke $r8.<java.lang.Object: void notifyAll()>();

        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r3;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void write(byte[]) throws java.io.IOException
    {
        gov.nist.javax.sip.parser.Pipeline r0;
        byte[] r1;
        gov.nist.javax.sip.parser.Pipeline$Buffer r2, $r5;
        java.util.LinkedList r3, $r6, $r7, $r8;
        java.lang.Throwable r4, $r10;
        boolean $z0;
        int $i0;
        java.io.IOException $r9;

        r0 := @this: gov.nist.javax.sip.parser.Pipeline;

        r1 := @parameter0: byte[];

        $z0 = r0.<gov.nist.javax.sip.parser.Pipeline: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Closed!!");

        throw $r9;

     label1:
        $r5 = new gov.nist.javax.sip.parser.Pipeline$Buffer;

        $i0 = lengthof r1;

        specialinvoke $r5.<gov.nist.javax.sip.parser.Pipeline$Buffer: void <init>(gov.nist.javax.sip.parser.Pipeline,byte[],int)>(r0, r1, $i0);

        r2 = $r5;

        $r6 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        r3 = $r6;

        entermonitor $r6;

     label2:
        $r7 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>(r2);

        $r8 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        virtualinvoke $r8.<java.lang.Object: void notifyAll()>();

        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r3;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void close() throws java.io.IOException
    {
        gov.nist.javax.sip.parser.Pipeline r0;
        java.util.LinkedList r1, $r3, $r4;
        java.lang.Throwable r2, $r6;
        java.io.InputStream $r5;

        r0 := @this: gov.nist.javax.sip.parser.Pipeline;

        r0.<gov.nist.javax.sip.parser.Pipeline: boolean isClosed> = 1;

        $r3 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r5 = r0.<gov.nist.javax.sip.parser.Pipeline: java.io.InputStream pipe>;

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int read() throws java.io.IOException
    {
        gov.nist.javax.sip.parser.Pipeline r0;
        java.util.LinkedList r1, $r3, $r5, $r6, $r12, $r13;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.Throwable r2, $r21;
        gov.nist.javax.sip.parser.Pipeline$Buffer $r4, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r18;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r7;
        java.util.NoSuchElementException $r19, r27;
        java.io.IOException $r20, $r22;
        java.lang.String $r23, $r24;
        java.lang.InterruptedException $r25, r26;

        r0 := @this: gov.nist.javax.sip.parser.Pipeline;

        $r3 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        $r4 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        if $r4 == null goto label04;

        $r14 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        $i4 = $r14.<gov.nist.javax.sip.parser.Pipeline$Buffer: int ptr>;

        $r15 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        $i3 = $r15.<gov.nist.javax.sip.parser.Pipeline$Buffer: int length>;

        if $i4 >= $i3 goto label04;

        $r16 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        i0 = virtualinvoke $r16.<gov.nist.javax.sip.parser.Pipeline$Buffer: int getNextByte()>();

        $r17 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        $i5 = $r17.<gov.nist.javax.sip.parser.Pipeline$Buffer: int ptr>;

        $r18 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        $i6 = $r18.<gov.nist.javax.sip.parser.Pipeline$Buffer: int length>;

        if $i5 != $i6 goto label02;

        r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer> = null;

     label02:
        exitmonitor r1;

     label03:
        return i0;

     label04:
        $z0 = r0.<gov.nist.javax.sip.parser.Pipeline: boolean isClosed>;

        if $z0 == 0 goto label06;

        $r13 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        $z3 = virtualinvoke $r13.<java.util.LinkedList: boolean isEmpty()>();

        if $z3 == 0 goto label06;

        exitmonitor r1;

     label05:
        return -1;

     label06:
        $r5 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        $z1 = virtualinvoke $r5.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 == 0 goto label09;

        $r12 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        virtualinvoke $r12.<java.lang.Object: void wait()>();

        $z2 = r0.<gov.nist.javax.sip.parser.Pipeline: boolean isClosed>;

        if $z2 == 0 goto label06;

     label07:
        exitmonitor r1;

     label08:
        return -1;

     label09:
        $r6 = r0.<gov.nist.javax.sip.parser.Pipeline: java.util.LinkedList buffList>;

        $r7 = virtualinvoke $r6.<java.util.LinkedList: java.lang.Object removeFirst()>();

        $r8 = (gov.nist.javax.sip.parser.Pipeline$Buffer) $r7;

        r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer> = $r8;

        $r9 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        i7 = virtualinvoke $r9.<gov.nist.javax.sip.parser.Pipeline$Buffer: int getNextByte()>();

        $r10 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        $i1 = $r10.<gov.nist.javax.sip.parser.Pipeline$Buffer: int ptr>;

        $r11 = r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer>;

        $i2 = $r11.<gov.nist.javax.sip.parser.Pipeline$Buffer: int length>;

        if $i1 != $i2 goto label10;

        r0.<gov.nist.javax.sip.parser.Pipeline: gov.nist.javax.sip.parser.Pipeline$Buffer currentBuffer> = null;

     label10:
        exitmonitor r1;

     label11:
        return i7;

     label12:
        $r25 := @caughtexception;

        r26 = $r25;

        $r22 = new java.io.IOException;

        $r23 = virtualinvoke r26.<java.lang.InterruptedException: java.lang.String getMessage()>();

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label13:
        $r19 := @caughtexception;

        r27 = $r19;

        virtualinvoke r27.<java.util.NoSuchElementException: void printStackTrace()>();

        $r20 = new java.io.IOException;

        $r24 = virtualinvoke r27.<java.util.NoSuchElementException: java.lang.String getMessage()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label14:
        $r21 := @caughtexception;

        r2 = $r21;

        exitmonitor r1;

     label15:
        throw r2;

        catch java.lang.InterruptedException from label06 to label07 with label12;
        catch java.lang.InterruptedException from label09 to label10 with label12;
        catch java.util.NoSuchElementException from label06 to label07 with label13;
        catch java.util.NoSuchElementException from label09 to label10 with label13;
        catch java.lang.Throwable from label01 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label08 with label14;
        catch java.lang.Throwable from label09 to label11 with label14;
        catch java.lang.Throwable from label12 to label15 with label14;
    }
}
