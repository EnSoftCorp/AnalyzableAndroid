public class org.apache.http.message.BasicTokenIterator extends java.lang.Object implements org.apache.http.TokenIterator
{
    public static final java.lang.String HTTP_SEPARATORS;
    protected final org.apache.http.HeaderIterator headerIt;
    protected java.lang.String currentHeader;
    protected java.lang.String currentToken;
    protected int searchPos;

    public void <init>(org.apache.http.HeaderIterator)
    {
        org.apache.http.message.BasicTokenIterator r0;
        org.apache.http.HeaderIterator r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        r1 := @parameter0: org.apache.http.HeaderIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Header iterator must not be null.");

        throw $r2;

     label1:
        r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt> = r1;

        $i0 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: int findNext(int)>(-1);

        r0.<org.apache.http.message.BasicTokenIterator: int searchPos> = $i0;

        return;
    }

    public boolean hasNext()
    {
        org.apache.http.message.BasicTokenIterator r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        $r1 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String nextToken() throws java.util.NoSuchElementException, org.apache.http.ParseException
    {
        org.apache.http.message.BasicTokenIterator r0;
        java.lang.String r1, $r2;
        int $i0, $i1;
        java.util.NoSuchElementException $r3;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        $r2 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken>;

        if $r2 != null goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Iteration already finished.");

        throw $r3;

     label1:
        r1 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken>;

        $i0 = r0.<org.apache.http.message.BasicTokenIterator: int searchPos>;

        $i1 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: int findNext(int)>($i0);

        r0.<org.apache.http.message.BasicTokenIterator: int searchPos> = $i1;

        return r1;
    }

    public final java.lang.Object next() throws java.util.NoSuchElementException, org.apache.http.ParseException
    {
        org.apache.http.message.BasicTokenIterator r0;
        java.lang.String $r1;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        $r1 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: java.lang.String nextToken()>();

        return $r1;
    }

    public final void remove() throws java.lang.UnsupportedOperationException
    {
        org.apache.http.message.BasicTokenIterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Removing tokens is not supported.");

        throw $r1;
    }

    protected int findNext(int) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicTokenIterator r0;
        int i0, i1, i2, i3;
        java.lang.String $r1, $r2, $r6;
        org.apache.http.HeaderIterator $r3, $r4;
        boolean $z0;
        org.apache.http.Header $r5;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        i0 := @parameter0: int;

        if i0 >= 0 goto label2;

        $r3 = r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt>;

        $z0 = interfaceinvoke $r3.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $r4 = r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt>;

        $r5 = interfaceinvoke $r4.<org.apache.http.HeaderIterator: org.apache.http.Header nextHeader()>();

        $r6 = interfaceinvoke $r5.<org.apache.http.Header: java.lang.String getValue()>();

        r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader> = $r6;

        i3 = 0;

        goto label3;

     label2:
        i3 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: int findTokenSeparator(int)>(i0);

     label3:
        i1 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: int findTokenStart(int)>(i3);

        if i1 >= 0 goto label4;

        r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken> = null;

        return -1;

     label4:
        i2 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: int findTokenEnd(int)>(i1);

        $r1 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $r2 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: java.lang.String createToken(java.lang.String,int,int)>($r1, i1, i2);

        r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken> = $r2;

        return i2;
    }

    protected java.lang.String createToken(java.lang.String, int, int)
    {
        org.apache.http.message.BasicTokenIterator r0;
        java.lang.String r1, $r2;
        int i0, i1;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        return $r2;
    }

    protected int findTokenStart(int)
    {
        org.apache.http.message.BasicTokenIterator r0;
        int i0, i1, $i3;
        boolean z0, $z1, $z2, $z3, $z4;
        char c2, $c4;
        java.lang.String $r1, $r2, $r6, $r7, $r8, $r15, $r17, $r21;
        org.apache.http.HeaderIterator $r3, $r4;
        org.apache.http.Header $r5;
        org.apache.http.ParseException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r18, $r19, $r20;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        i0 := @parameter0: int;

        if i0 >= 0 goto label01;

        $r16 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Search position must not be negative: ");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label01:
        z0 = 0;

     label02:
        if z0 != 0 goto label11;

        $r1 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        if $r1 == null goto label11;

        $r2 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        i1 = virtualinvoke $r2.<java.lang.String: int length()>();

     label03:
        if z0 != 0 goto label08;

        if i0 >= i1 goto label08;

        $r7 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        c2 = virtualinvoke $r7.<java.lang.String: char charAt(int)>(i0);

        $z3 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenSeparator(char)>(c2);

        if $z3 != 0 goto label04;

        $z2 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isWhitespace(char)>(c2);

        if $z2 == 0 goto label05;

     label04:
        i0 = i0 + 1;

        goto label07;

     label05:
        $r8 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $c4 = virtualinvoke $r8.<java.lang.String: char charAt(int)>(i0);

        $z4 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)>($c4);

        if $z4 == 0 goto label06;

        z0 = 1;

        goto label07;

     label06:
        $r9 = new org.apache.http.ParseException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid character before token (pos ");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r15 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.http.ParseException: void <init>(java.lang.String)>($r17);

        throw $r9;

     label07:
        goto label03;

     label08:
        if z0 != 0 goto label10;

        $r3 = r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt>;

        $z1 = interfaceinvoke $r3.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r4 = r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt>;

        $r5 = interfaceinvoke $r4.<org.apache.http.HeaderIterator: org.apache.http.Header nextHeader()>();

        $r6 = interfaceinvoke $r5.<org.apache.http.Header: java.lang.String getValue()>();

        r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader> = $r6;

        i0 = 0;

        goto label10;

     label09:
        r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader> = null;

     label10:
        goto label02;

     label11:
        if z0 == 0 goto label12;

        $i3 = i0;

        goto label13;

     label12:
        $i3 = -1;

     label13:
        return $i3;
    }

    protected int findTokenSeparator(int)
    {
        org.apache.http.message.BasicTokenIterator r0;
        int i0, i1;
        boolean z0, $z1, $z2, $z3;
        char c2;
        java.lang.String $r1, $r2, $r7, $r9, $r15, $r17, $r23;
        org.apache.http.ParseException $r3, $r12;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r10, $r11, $r13, $r14, $r16, $r18, $r19, $r21, $r22;
        java.lang.IllegalArgumentException $r20;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r20 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Search position must not be negative: ");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r20;

     label1:
        z0 = 0;

        $r1 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        i1 = virtualinvoke $r1.<java.lang.String: int length()>();

     label2:
        if z0 != 0 goto label7;

        if i0 >= i1 goto label7;

        $r2 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i0);

        $z1 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenSeparator(char)>(c2);

        if $z1 == 0 goto label3;

        z0 = 1;

        goto label6;

     label3:
        $z2 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isWhitespace(char)>(c2);

        if $z2 == 0 goto label4;

        i0 = i0 + 1;

        goto label6;

     label4:
        $z3 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)>(c2);

        if $z3 == 0 goto label5;

        $r12 = new org.apache.http.ParseException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tokens without separator (pos ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r15 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.http.ParseException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label5:
        $r3 = new org.apache.http.ParseException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid character after token (pos ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r7 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.http.ParseException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label6:
        goto label2;

     label7:
        return i0;
    }

    protected int findTokenEnd(int)
    {
        org.apache.http.message.BasicTokenIterator r0;
        int i0, i1, i2;
        java.lang.String $r1, $r2, $r7;
        char $c3;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Token start position must not be negative: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r1 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        i2 = i0 + 1;

     label2:
        if i2 >= i1 goto label3;

        $r2 = r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i2);

        $z0 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)>($c3);

        if $z0 == 0 goto label3;

        i2 = i2 + 1;

        goto label2;

     label3:
        return i2;
    }

    protected boolean isTokenSeparator(char)
    {
        org.apache.http.message.BasicTokenIterator r0;
        char c0;
        boolean $z0;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        c0 := @parameter0: char;

        if c0 != 44 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean isWhitespace(char)
    {
        org.apache.http.message.BasicTokenIterator r0;
        char c0;
        boolean $z0, $z1;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        c0 := @parameter0: char;

        if c0 == 9 goto label1;

        $z0 = staticinvoke <java.lang.Character: boolean isSpaceChar(char)>(c0);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected boolean isTokenChar(char)
    {
        org.apache.http.message.BasicTokenIterator r0;
        char c0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c0);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $z2 = virtualinvoke r0.<org.apache.http.message.BasicTokenIterator: boolean isHttpSeparator(char)>(c0);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    protected boolean isHttpSeparator(char)
    {
        org.apache.http.message.BasicTokenIterator r0;
        char c0;
        java.lang.String $r1;
        int $i1;
        boolean $z0;

        r0 := @this: org.apache.http.message.BasicTokenIterator;

        c0 := @parameter0: char;

        $r1 = " ,;=()<>@:\\\"/[]?{}\t";

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(c0);

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.http.message.BasicTokenIterator: java.lang.String HTTP_SEPARATORS> = " ,;=()<>@:\\\"/[]?{}\t";

        return;
    }
}
