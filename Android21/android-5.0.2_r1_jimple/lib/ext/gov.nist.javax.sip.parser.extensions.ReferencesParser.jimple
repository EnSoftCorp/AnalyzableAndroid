public class gov.nist.javax.sip.parser.extensions.ReferencesParser extends gov.nist.javax.sip.parser.ParametersParser
{

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.extensions.ReferencesParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.extensions.ReferencesParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.extensions.ReferencesParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.extensions.ReferencesParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.extensions.ReferencesParser r0;
        gov.nist.javax.sip.header.extensions.References r1, r3, $r5;
        java.lang.String r2;
        java.lang.Throwable r4, $r8;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r6, $r7;

        r0 := @this: gov.nist.javax.sip.parser.extensions.ReferencesParser;

        $z0 = <gov.nist.javax.sip.parser.extensions.ReferencesParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.ReferencesParser: void dbg_enter(java.lang.String)>("ReasonParser.parse");

     label1:
        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.ReferencesParser: void headerName(int)>(2146);

        $r5 = new gov.nist.javax.sip.header.extensions.References;

        specialinvoke $r5.<gov.nist.javax.sip.header.extensions.References: void <init>()>();

        r1 = $r5;

        $r6 = r0.<gov.nist.javax.sip.parser.extensions.ReferencesParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: void SPorHT()>();

        $r7 = r0.<gov.nist.javax.sip.parser.extensions.ReferencesParser: gov.nist.core.LexerCore lexer>;

        r2 = virtualinvoke $r7.<gov.nist.core.LexerCore: java.lang.String byteStringNoSemicolon()>();

        virtualinvoke r1.<gov.nist.javax.sip.header.extensions.References: void setCallId(java.lang.String)>(r2);

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r1);

        r3 = r1;

     label2:
        $z1 = <gov.nist.javax.sip.parser.extensions.ReferencesParser: boolean debug>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.ReferencesParser: void dbg_leave(java.lang.String)>("ReferencesParser.parse");

     label3:
        return r3;

     label4:
        $r8 := @caughtexception;

        r4 = $r8;

     label5:
        $z2 = <gov.nist.javax.sip.parser.extensions.ReferencesParser: boolean debug>;

        if $z2 == 0 goto label6;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.ReferencesParser: void dbg_leave(java.lang.String)>("ReferencesParser.parse");

     label6:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
