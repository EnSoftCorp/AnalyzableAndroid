public class org.apache.http.message.BasicHeaderValueFormatter extends java.lang.Object implements org.apache.http.message.HeaderValueFormatter
{
    public static final org.apache.http.message.BasicHeaderValueFormatter DEFAULT;
    public static final java.lang.String SEPARATORS;
    public static final java.lang.String UNSAFE_CHARS;

    public void <init>()
    {
        org.apache.http.message.BasicHeaderValueFormatter r0;

        r0 := @this: org.apache.http.message.BasicHeaderValueFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final java.lang.String formatElements(org.apache.http.HeaderElement[], boolean, org.apache.http.message.HeaderValueFormatter)
    {
        org.apache.http.HeaderElement[] r0;
        boolean z0;
        org.apache.http.message.HeaderValueFormatter r1;
        org.apache.http.util.CharArrayBuffer $r2;
        java.lang.String $r3;

        r0 := @parameter0: org.apache.http.HeaderElement[];

        z0 := @parameter1: boolean;

        r1 := @parameter2: org.apache.http.message.HeaderValueFormatter;

        if r1 != null goto label1;

        r1 = <org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.message.BasicHeaderValueFormatter DEFAULT>;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.http.message.HeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement[],boolean)>(null, r0, z0);

        $r3 = virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: java.lang.String toString()>();

        return $r3;
    }

    public org.apache.http.util.CharArrayBuffer formatElements(org.apache.http.util.CharArrayBuffer, org.apache.http.HeaderElement[], boolean)
    {
        org.apache.http.message.BasicHeaderValueFormatter r0;
        org.apache.http.util.CharArrayBuffer r1, $r5;
        org.apache.http.HeaderElement[] r2;
        boolean z0;
        int i0, i1, $i2;
        org.apache.http.HeaderElement $r3;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.http.message.BasicHeaderValueFormatter;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.HeaderElement[];

        z0 := @parameter2: boolean;

        if r2 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Header element array must not be null.");

        throw $r6;

     label1:
        i0 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueFormatter: int estimateElementsLen(org.apache.http.HeaderElement[])>(r2);

        if r1 != null goto label2;

        $r5 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r5.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(i0);

        r1 = $r5;

        goto label3;

     label2:
        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>(i0);

     label3:
        i1 = 0;

     label4:
        $i2 = lengthof r2;

        if i1 >= $i2 goto label6;

        if i1 <= 0 goto label5;

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(", ");

     label5:
        $r3 = r2[i1];

        virtualinvoke r0.<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)>(r1, $r3, z0);

        i1 = i1 + 1;

        goto label4;

     label6:
        return r1;
    }

    protected int estimateElementsLen(org.apache.http.HeaderElement[])
    {
        org.apache.http.message.BasicHeaderValueFormatter r0;
        org.apache.http.HeaderElement[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.http.HeaderElement $r2;

        r0 := @this: org.apache.http.message.BasicHeaderValueFormatter;

        r1 := @parameter0: org.apache.http.HeaderElement[];

        if r1 == null goto label1;

        $i2 = lengthof r1;

        if $i2 >= 1 goto label2;

     label1:
        return 0;

     label2:
        $i3 = lengthof r1;

        $i4 = $i3 - 1;

        i0 = $i4 * 2;

        i1 = 0;

     label3:
        $i5 = lengthof r1;

        if i1 >= $i5 goto label4;

        $r2 = r1[i1];

        $i6 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueFormatter: int estimateHeaderElementLen(org.apache.http.HeaderElement)>($r2);

        i0 = i0 + $i6;

        i1 = i1 + 1;

        goto label3;

     label4:
        return i0;
    }

    public static final java.lang.String formatHeaderElement(org.apache.http.HeaderElement, boolean, org.apache.http.message.HeaderValueFormatter)
    {
        org.apache.http.HeaderElement r0;
        boolean z0;
        org.apache.http.message.HeaderValueFormatter r1;
        org.apache.http.util.CharArrayBuffer $r2;
        java.lang.String $r3;

        r0 := @parameter0: org.apache.http.HeaderElement;

        z0 := @parameter1: boolean;

        r1 := @parameter2: org.apache.http.message.HeaderValueFormatter;

        if r1 != null goto label1;

        r1 = <org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.message.BasicHeaderValueFormatter DEFAULT>;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.http.message.HeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.HeaderElement,boolean)>(null, r0, z0);

        $r3 = virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: java.lang.String toString()>();

        return $r3;
    }

    public org.apache.http.util.CharArrayBuffer formatHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.HeaderElement, boolean)
    {
        org.apache.http.message.BasicHeaderValueFormatter r0;
        org.apache.http.util.CharArrayBuffer r1, $r7;
        org.apache.http.HeaderElement r2;
        boolean z0;
        int i0, i1, i2;
        java.lang.String r3, $r4;
        org.apache.http.NameValuePair $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: org.apache.http.message.BasicHeaderValueFormatter;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.HeaderElement;

        z0 := @parameter2: boolean;

        if r2 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Header element must not be null.");

        throw $r8;

     label1:
        i0 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueFormatter: int estimateHeaderElementLen(org.apache.http.HeaderElement)>(r2);

        if r1 != null goto label2;

        $r7 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r7.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(i0);

        r1 = $r7;

        goto label3;

     label2:
        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>(i0);

     label3:
        $r4 = interfaceinvoke r2.<org.apache.http.HeaderElement: java.lang.String getName()>();

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r4);

        r3 = interfaceinvoke r2.<org.apache.http.HeaderElement: java.lang.String getValue()>();

        if r3 == null goto label4;

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(char)>(61);

        virtualinvoke r0.<org.apache.http.message.BasicHeaderValueFormatter: void doFormatValue(org.apache.http.util.CharArrayBuffer,java.lang.String,boolean)>(r1, r3, z0);

     label4:
        i1 = interfaceinvoke r2.<org.apache.http.HeaderElement: int getParameterCount()>();

        if i1 <= 0 goto label6;

        i2 = 0;

     label5:
        if i2 >= i1 goto label6;

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>("; ");

        $r5 = interfaceinvoke r2.<org.apache.http.HeaderElement: org.apache.http.NameValuePair getParameter(int)>(i2);

        virtualinvoke r0.<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)>(r1, $r5, z0);

        i2 = i2 + 1;

        goto label5;

     label6:
        return r1;
    }

    protected int estimateHeaderElementLen(org.apache.http.HeaderElement)
    {
        org.apache.http.message.BasicHeaderValueFormatter r0;
        org.apache.http.HeaderElement r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.String r2, $r3;
        org.apache.http.NameValuePair $r4;

        r0 := @this: org.apache.http.message.BasicHeaderValueFormatter;

        r1 := @parameter0: org.apache.http.HeaderElement;

        if r1 != null goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r1.<org.apache.http.HeaderElement: java.lang.String getName()>();

        i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        r2 = interfaceinvoke r1.<org.apache.http.HeaderElement: java.lang.String getValue()>();

        if r2 == null goto label2;

        $i5 = virtualinvoke r2.<java.lang.String: int length()>();

        $i6 = 3 + $i5;

        i0 = i0 + $i6;

     label2:
        i1 = interfaceinvoke r1.<org.apache.http.HeaderElement: int getParameterCount()>();

        if i1 <= 0 goto label4;

        i2 = 0;

     label3:
        if i2 >= i1 goto label4;

        $r4 = interfaceinvoke r1.<org.apache.http.HeaderElement: org.apache.http.NameValuePair getParameter(int)>(i2);

        $i3 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueFormatter: int estimateNameValuePairLen(org.apache.http.NameValuePair)>($r4);

        $i4 = 2 + $i3;

        i0 = i0 + $i4;

        i2 = i2 + 1;

        goto label3;

     label4:
        return i0;
    }

    public static final java.lang.String formatParameters(org.apache.http.NameValuePair[], boolean, org.apache.http.message.HeaderValueFormatter)
    {
        org.apache.http.NameValuePair[] r0;
        boolean z0;
        org.apache.http.message.HeaderValueFormatter r1;
        org.apache.http.util.CharArrayBuffer $r2;
        java.lang.String $r3;

        r0 := @parameter0: org.apache.http.NameValuePair[];

        z0 := @parameter1: boolean;

        r1 := @parameter2: org.apache.http.message.HeaderValueFormatter;

        if r1 != null goto label1;

        r1 = <org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.message.BasicHeaderValueFormatter DEFAULT>;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.http.message.HeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair[],boolean)>(null, r0, z0);

        $r3 = virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: java.lang.String toString()>();

        return $r3;
    }

    public org.apache.http.util.CharArrayBuffer formatParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.NameValuePair[], boolean)
    {
        org.apache.http.message.BasicHeaderValueFormatter r0;
        org.apache.http.util.CharArrayBuffer r1, $r5;
        org.apache.http.NameValuePair[] r2;
        boolean z0;
        int i0, i1, $i2;
        org.apache.http.NameValuePair $r3;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.http.message.BasicHeaderValueFormatter;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.NameValuePair[];

        z0 := @parameter2: boolean;

        if r2 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters must not be null.");

        throw $r6;

     label1:
        i0 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueFormatter: int estimateParametersLen(org.apache.http.NameValuePair[])>(r2);

        if r1 != null goto label2;

        $r5 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r5.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(i0);

        r1 = $r5;

        goto label3;

     label2:
        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>(i0);

     label3:
        i1 = 0;

     label4:
        $i2 = lengthof r2;

        if i1 >= $i2 goto label6;

        if i1 <= 0 goto label5;

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>("; ");

     label5:
        $r3 = r2[i1];

        virtualinvoke r0.<org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)>(r1, $r3, z0);

        i1 = i1 + 1;

        goto label4;

     label6:
        return r1;
    }

    protected int estimateParametersLen(org.apache.http.NameValuePair[])
    {
        org.apache.http.message.BasicHeaderValueFormatter r0;
        org.apache.http.NameValuePair[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.http.NameValuePair $r2;

        r0 := @this: org.apache.http.message.BasicHeaderValueFormatter;

        r1 := @parameter0: org.apache.http.NameValuePair[];

        if r1 == null goto label1;

        $i2 = lengthof r1;

        if $i2 >= 1 goto label2;

     label1:
        return 0;

     label2:
        $i3 = lengthof r1;

        $i4 = $i3 - 1;

        i0 = $i4 * 2;

        i1 = 0;

     label3:
        $i5 = lengthof r1;

        if i1 >= $i5 goto label4;

        $r2 = r1[i1];

        $i6 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueFormatter: int estimateNameValuePairLen(org.apache.http.NameValuePair)>($r2);

        i0 = i0 + $i6;

        i1 = i1 + 1;

        goto label3;

     label4:
        return i0;
    }

    public static final java.lang.String formatNameValuePair(org.apache.http.NameValuePair, boolean, org.apache.http.message.HeaderValueFormatter)
    {
        org.apache.http.NameValuePair r0;
        boolean z0;
        org.apache.http.message.HeaderValueFormatter r1;
        org.apache.http.util.CharArrayBuffer $r2;
        java.lang.String $r3;

        r0 := @parameter0: org.apache.http.NameValuePair;

        z0 := @parameter1: boolean;

        r1 := @parameter2: org.apache.http.message.HeaderValueFormatter;

        if r1 != null goto label1;

        r1 = <org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.message.BasicHeaderValueFormatter DEFAULT>;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.http.message.HeaderValueFormatter: org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.NameValuePair,boolean)>(null, r0, z0);

        $r3 = virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: java.lang.String toString()>();

        return $r3;
    }

    public org.apache.http.util.CharArrayBuffer formatNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.NameValuePair, boolean)
    {
        org.apache.http.message.BasicHeaderValueFormatter r0;
        org.apache.http.util.CharArrayBuffer r1, $r5;
        org.apache.http.NameValuePair r2;
        boolean z0;
        int i0;
        java.lang.String r3, $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.http.message.BasicHeaderValueFormatter;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: org.apache.http.NameValuePair;

        z0 := @parameter2: boolean;

        if r2 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("NameValuePair must not be null.");

        throw $r6;

     label1:
        i0 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueFormatter: int estimateNameValuePairLen(org.apache.http.NameValuePair)>(r2);

        if r1 != null goto label2;

        $r5 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r5.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(i0);

        r1 = $r5;

        goto label3;

     label2:
        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>(i0);

     label3:
        $r4 = interfaceinvoke r2.<org.apache.http.NameValuePair: java.lang.String getName()>();

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r4);

        r3 = interfaceinvoke r2.<org.apache.http.NameValuePair: java.lang.String getValue()>();

        if r3 == null goto label4;

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(char)>(61);

        virtualinvoke r0.<org.apache.http.message.BasicHeaderValueFormatter: void doFormatValue(org.apache.http.util.CharArrayBuffer,java.lang.String,boolean)>(r1, r3, z0);

     label4:
        return r1;
    }

    protected int estimateNameValuePairLen(org.apache.http.NameValuePair)
    {
        org.apache.http.message.BasicHeaderValueFormatter r0;
        org.apache.http.NameValuePair r1;
        int i0, $i1, $i2;
        java.lang.String r2, $r3;

        r0 := @this: org.apache.http.message.BasicHeaderValueFormatter;

        r1 := @parameter0: org.apache.http.NameValuePair;

        if r1 != null goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r1.<org.apache.http.NameValuePair: java.lang.String getName()>();

        i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        r2 = interfaceinvoke r1.<org.apache.http.NameValuePair: java.lang.String getValue()>();

        if r2 == null goto label2;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $i2 = 3 + $i1;

        i0 = i0 + $i2;

     label2:
        return i0;
    }

    protected void doFormatValue(org.apache.http.util.CharArrayBuffer, java.lang.String, boolean)
    {
        org.apache.http.message.BasicHeaderValueFormatter r0;
        org.apache.http.util.CharArrayBuffer r1;
        java.lang.String r2;
        boolean z0, $z1;
        int i0, $i2, $i3, i5;
        char c1, $c4;

        r0 := @this: org.apache.http.message.BasicHeaderValueFormatter;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if z0 != 0 goto label2;

        i0 = 0;

     label1:
        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if i0 >= $i3 goto label2;

        if z0 != 0 goto label2;

        $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0);

        z0 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueFormatter: boolean isSeparator(char)>($c4);

        i0 = i0 + 1;

        goto label1;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(char)>(34);

     label3:
        i5 = 0;

     label4:
        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        if i5 >= $i2 goto label6;

        c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        $z1 = virtualinvoke r0.<org.apache.http.message.BasicHeaderValueFormatter: boolean isUnsafe(char)>(c1);

        if $z1 == 0 goto label5;

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(char)>(92);

     label5:
        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(char)>(c1);

        i5 = i5 + 1;

        goto label4;

     label6:
        if z0 == 0 goto label7;

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(char)>(34);

     label7:
        return;
    }

    protected boolean isSeparator(char)
    {
        org.apache.http.message.BasicHeaderValueFormatter r0;
        char c0;
        java.lang.String $r1;
        int $i1;
        boolean $z0;

        r0 := @this: org.apache.http.message.BasicHeaderValueFormatter;

        c0 := @parameter0: char;

        $r1 = " ;,:@()<>\\\"/[]?={}\t";

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(c0);

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean isUnsafe(char)
    {
        org.apache.http.message.BasicHeaderValueFormatter r0;
        char c0;
        java.lang.String $r1;
        int $i1;
        boolean $z0;

        r0 := @this: org.apache.http.message.BasicHeaderValueFormatter;

        c0 := @parameter0: char;

        $r1 = "\"\\";

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(c0);

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        org.apache.http.message.BasicHeaderValueFormatter $r0;

        <org.apache.http.message.BasicHeaderValueFormatter: java.lang.String UNSAFE_CHARS> = "\"\\";

        <org.apache.http.message.BasicHeaderValueFormatter: java.lang.String SEPARATORS> = " ;,:@()<>\\\"/[]?={}\t";

        $r0 = new org.apache.http.message.BasicHeaderValueFormatter;

        specialinvoke $r0.<org.apache.http.message.BasicHeaderValueFormatter: void <init>()>();

        <org.apache.http.message.BasicHeaderValueFormatter: org.apache.http.message.BasicHeaderValueFormatter DEFAULT> = $r0;

        return;
    }
}
