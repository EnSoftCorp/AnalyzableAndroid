public class com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder extends java.lang.Object
{
    private static com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance;
    private static final java.lang.String MAPPING_DATA_DIRECTORY;
    private com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader prefixFileReader;
    private final com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil;

    void <init>(java.lang.String)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        java.lang.String r1;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r2;
        com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader $r3;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader prefixFileReader> = null;

        $r2 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil getInstance()>();

        r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil> = $r2;

        $r3 = new com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader;

        specialinvoke $r3.<com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader: void <init>(java.lang.String)>(r1);

        r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader prefixFileReader> = $r3;

        return;
    }

    public static synchronized com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder getInstance()
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder $r0, $r1, $r2;

        $r0 = <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance>;

        if $r0 != null goto label1;

        $r2 = new com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        specialinvoke $r2.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: void <init>(java.lang.String)>("/com/android/i18n/phonenumbers/geocoding/data/");

        <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance> = $r2;

     label1:
        $r1 = <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance>;

        return $r1;
    }

    private java.lang.String getCountryNameForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.util.Locale r2;
        java.lang.String r3, $r5;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r4;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.Locale;

        $r4 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        r3 = virtualinvoke $r4.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r5 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getRegionDisplayName(java.lang.String,java.util.Locale)>(r3, r2);

        return $r5;
    }

    private java.lang.String getRegionDisplayName(java.lang.String, java.util.Locale)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        java.lang.String r1, $r4;
        java.util.Locale r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Locale;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("ZZ");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("001");

        if $z1 == 0 goto label2;

     label1:
        $r4 = "";

        goto label3;

     label2:
        $r3 = new java.util.Locale;

        specialinvoke $r3.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("", r1);

        $r4 = virtualinvoke $r3.<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>(r2);

     label3:
        return $r4;
    }

    public java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1, r10;
        java.util.Locale r2;
        java.lang.String r3, r4, r5, r6, r7, r8, r9, $r14, r19;
        int $i0, $i1, $i2, $i3;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r12, $r15, $r16;
        com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader $r13, $r17;
        boolean $z0, $z1;
        com.android.i18n.phonenumbers.NumberParseException $r18;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.Locale;

        r3 = virtualinvoke r2.<java.util.Locale: java.lang.String getLanguage()>();

        r4 = "";

        r5 = virtualinvoke r2.<java.util.Locale: java.lang.String getCountry()>();

        $i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r7 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getCountryMobileToken(int)>($i0);

        $r12 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        r8 = virtualinvoke $r12.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>(r7);

        if $z1 == 0 goto label5;

        $i2 = virtualinvoke r7.<java.lang.String: int length()>();

        r19 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>($i2);

        $r15 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        $i3 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r9 = virtualinvoke $r15.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>($i3);

     label1:
        $r16 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        r10 = virtualinvoke $r16.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.String,java.lang.String)>(r19, r9);

     label2:
        goto label4;

     label3:
        $r18 := @caughtexception;

        r10 = r1;

     label4:
        $r17 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader prefixFileReader>;

        r6 = virtualinvoke $r17.<com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader: java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String,java.lang.String,java.lang.String)>(r10, r3, r4, r5);

        goto label6;

     label5:
        $r13 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader prefixFileReader>;

        r6 = virtualinvoke $r13.<com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader: java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String,java.lang.String,java.lang.String)>(r1, r3, r4, r5);

     label6:
        $i1 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i1 <= 0 goto label7;

        $r14 = r6;

        goto label8;

     label7:
        $r14 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getCountryNameForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r1, r2);

     label8:
        return $r14;

        catch com.android.i18n.phonenumbers.NumberParseException from label1 to label2 with label3;
    }

    public java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale, java.lang.String)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.util.Locale r2;
        java.lang.String r3, r4, $r6, $r7;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r5;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.Locale;

        r3 := @parameter2: java.lang.String;

        $r5 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        r4 = virtualinvoke $r5.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r1, r2);

        return $r7;

     label1:
        $r6 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getRegionDisplayName(java.lang.String,java.util.Locale)>(r4, r2);

        return $r6;
    }

    public java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.util.Locale r2;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType r3, $r5;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r4;
        boolean $z0;
        java.lang.String $r6, $r7;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.Locale;

        $r4 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        r3 = virtualinvoke $r4.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r5 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        if r3 != $r5 goto label1;

        return "";

     label1:
        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: boolean canBeGeocoded(com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r3);

        if $z0 != 0 goto label2;

        $r7 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getCountryNameForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r1, r2);

        return $r7;

     label2:
        $r6 = virtualinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r1, r2);

        return $r6;
    }

    public java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale, java.lang.String)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.util.Locale r2;
        java.lang.String r3, $r7, $r8;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType r4, $r6;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r5;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.Locale;

        r3 := @parameter2: java.lang.String;

        $r5 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        r4 = virtualinvoke $r5.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r6 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        if r4 != $r6 goto label1;

        return "";

     label1:
        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: boolean canBeGeocoded(com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r4);

        if $z0 != 0 goto label2;

        $r8 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getCountryNameForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r1, r2);

        return $r8;

     label2:
        $r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale,java.lang.String)>(r1, r2, r3);

        return $r7;
    }

    private boolean canBeGeocoded(com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType;

        $r2 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE>;

        if r1 == $r2 goto label1;

        $r3 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType MOBILE>;

        if r1 == $r3 goto label1;

        $r4 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE_OR_MOBILE>;

        if r1 != $r4 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static void <clinit>()
    {
        <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String MAPPING_DATA_DIRECTORY> = "/com/android/i18n/phonenumbers/geocoding/data/";

        <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance> = null;

        return;
    }
}
