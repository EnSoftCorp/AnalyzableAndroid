public final class org.apache.http.util.CharArrayBuffer extends java.lang.Object
{
    private char[] buffer;
    private int len;

    public void <init>(int)
    {
        org.apache.http.util.CharArrayBuffer r0;
        int i0;
        char[] $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer capacity may not be negative");

        throw $r2;

     label1:
        $r1 = newarray (char)[i0];

        r0.<org.apache.http.util.CharArrayBuffer: char[] buffer> = $r1;

        return;
    }

    private void expand(int)
    {
        org.apache.http.util.CharArrayBuffer r0;
        int i0, $i1, $i2, $i3, $i4;
        char[] r1, $r2, $r3;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i1 = lengthof $r2;

        $i2 = $i1 << 1;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, i0);

        r1 = newarray (char)[$i3];

        $r3 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i4 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r3, 0, r1, 0, $i4);

        r0.<org.apache.http.util.CharArrayBuffer: char[] buffer> = r1;

        return;
    }

    public void append(char[], int, int)
    {
        org.apache.http.util.CharArrayBuffer r0;
        char[] r1, $r3, $r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.IndexOutOfBoundsException $r2;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return;

     label1:
        if i0 < 0 goto label2;

        $i3 = lengthof r1;

        if i0 > $i3 goto label2;

        if i1 < 0 goto label2;

        $i4 = i0 + i1;

        if $i4 < 0 goto label2;

        $i6 = i0 + i1;

        $i5 = lengthof r1;

        if $i6 <= $i5 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        if i1 != 0 goto label4;

        return;

     label4:
        $i7 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        i2 = $i7 + i1;

        $r3 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i8 = lengthof $r3;

        if i2 <= $i8 goto label5;

        specialinvoke r0.<org.apache.http.util.CharArrayBuffer: void expand(int)>(i2);

     label5:
        $r4 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i9 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>(r1, i0, $r4, $i9, i1);

        r0.<org.apache.http.util.CharArrayBuffer: int len> = i2;

        return;
    }

    public void append(java.lang.String)
    {
        org.apache.http.util.CharArrayBuffer r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4;
        char[] $r2, $r3;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        r1 = "null";

     label1:
        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        i1 = $i2 + i0;

        $r2 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i3 = lengthof $r2;

        if i1 <= $i3 goto label2;

        specialinvoke r0.<org.apache.http.util.CharArrayBuffer: void expand(int)>(i1);

     label2:
        $r3 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i4 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r3, $i4);

        r0.<org.apache.http.util.CharArrayBuffer: int len> = i1;

        return;
    }

    public void append(org.apache.http.util.CharArrayBuffer, int, int)
    {
        org.apache.http.util.CharArrayBuffer r0, r1;
        int i0, i1;
        char[] $r2;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: void append(char[],int,int)>($r2, i0, i1);

        return;
    }

    public void append(org.apache.http.util.CharArrayBuffer)
    {
        org.apache.http.util.CharArrayBuffer r0, r1;
        int $i0;
        char[] $r2;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i0 = r1.<org.apache.http.util.CharArrayBuffer: int len>;

        virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: void append(char[],int,int)>($r2, 0, $i0);

        return;
    }

    public void append(char)
    {
        org.apache.http.util.CharArrayBuffer r0;
        char c0;
        int i1, $i2, $i3, $i4;
        char[] $r1, $r2;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        c0 := @parameter0: char;

        $i2 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        i1 = $i2 + 1;

        $r1 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i3 = lengthof $r1;

        if i1 <= $i3 goto label1;

        specialinvoke r0.<org.apache.http.util.CharArrayBuffer: void expand(int)>(i1);

     label1:
        $r2 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i4 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        $r2[$i4] = c0;

        r0.<org.apache.http.util.CharArrayBuffer: int len> = i1;

        return;
    }

    public void append(byte[], int, int)
    {
        org.apache.http.util.CharArrayBuffer r0;
        byte[] r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.IndexOutOfBoundsException $r2;
        char[] $r3, $r4;
        char $c12;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return;

     label1:
        if i0 < 0 goto label2;

        $i7 = lengthof r1;

        if i0 > $i7 goto label2;

        if i1 < 0 goto label2;

        $i8 = i0 + i1;

        if $i8 < 0 goto label2;

        $i10 = i0 + i1;

        $i9 = lengthof r1;

        if $i10 <= $i9 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        if i1 != 0 goto label4;

        return;

     label4:
        i2 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        i3 = i2 + i1;

        $r3 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i11 = lengthof $r3;

        if i3 <= $i11 goto label5;

        specialinvoke r0.<org.apache.http.util.CharArrayBuffer: void expand(int)>(i3);

     label5:
        i4 = i0;

        i5 = i2;

     label6:
        if i5 >= i3 goto label8;

        i6 = r1[i4];

        if i6 >= 0 goto label7;

        i6 = 256 + i6;

     label7:
        $r4 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $c12 = (char) i6;

        $r4[i5] = $c12;

        i4 = i4 + 1;

        i5 = i5 + 1;

        goto label6;

     label8:
        r0.<org.apache.http.util.CharArrayBuffer: int len> = i3;

        return;
    }

    public void append(org.apache.http.util.ByteArrayBuffer, int, int)
    {
        org.apache.http.util.CharArrayBuffer r0;
        org.apache.http.util.ByteArrayBuffer r1;
        int i0, i1;
        byte[] $r2;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter0: org.apache.http.util.ByteArrayBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<org.apache.http.util.ByteArrayBuffer: byte[] buffer()>();

        virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: void append(byte[],int,int)>($r2, i0, i1);

        return;
    }

    public void append(java.lang.Object)
    {
        org.apache.http.util.CharArrayBuffer r0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r2);

        return;
    }

    public void clear()
    {
        org.apache.http.util.CharArrayBuffer r0;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        r0.<org.apache.http.util.CharArrayBuffer: int len> = 0;

        return;
    }

    public char[] toCharArray()
    {
        org.apache.http.util.CharArrayBuffer r0;
        char[] r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i0 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        r1 = newarray (char)[$i0];

        $i1 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        if $i1 <= 0 goto label1;

        $r2 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i2 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r2, 0, r1, 0, $i2);

     label1:
        return r1;
    }

    public char charAt(int)
    {
        org.apache.http.util.CharArrayBuffer r0;
        int i0;
        char[] $r1;
        char $c1;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $c1 = $r1[i0];

        return $c1;
    }

    public char[] buffer()
    {
        org.apache.http.util.CharArrayBuffer r0;
        char[] $r1;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        $r1 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        return $r1;
    }

    public int capacity()
    {
        org.apache.http.util.CharArrayBuffer r0;
        char[] $r1;
        int $i0;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        $r1 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int length()
    {
        org.apache.http.util.CharArrayBuffer r0;
        int $i0;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i0 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        return $i0;
    }

    public void ensureCapacity(int)
    {
        org.apache.http.util.CharArrayBuffer r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        char[] $r1;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i3 = lengthof $r1;

        $i2 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        i1 = $i3 - $i2;

        if i0 <= i1 goto label1;

        $i4 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        $i5 = $i4 + i0;

        specialinvoke r0.<org.apache.http.util.CharArrayBuffer: void expand(int)>($i5);

     label1:
        return;
    }

    public void setLength(int)
    {
        org.apache.http.util.CharArrayBuffer r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        char[] $r2;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r2 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i1 = lengthof $r2;

        if i0 <= $i1 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label2:
        r0.<org.apache.http.util.CharArrayBuffer: int len> = i0;

        return;
    }

    public boolean isEmpty()
    {
        org.apache.http.util.CharArrayBuffer r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i0 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isFull()
    {
        org.apache.http.util.CharArrayBuffer r0;
        char[] $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i1 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        $r1 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int indexOf(int, int, int)
    {
        org.apache.http.util.CharArrayBuffer r0;
        int i0, i1, i2, i3, $i4;
        char[] $r1;
        char $c5;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 >= 0 goto label1;

        i1 = 0;

     label1:
        $i4 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        if i2 <= $i4 goto label2;

        i2 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

     label2:
        if i1 <= i2 goto label3;

        return -1;

     label3:
        i3 = i1;

     label4:
        if i3 >= i2 goto label6;

        $r1 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $c5 = $r1[i3];

        if $c5 != i0 goto label5;

        return i3;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        return -1;
    }

    public int indexOf(int)
    {
        org.apache.http.util.CharArrayBuffer r0;
        int i0, $i1, $i2;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        $i2 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(i0, 0, $i1);

        return $i2;
    }

    public java.lang.String substring(int, int)
    {
        org.apache.http.util.CharArrayBuffer r0;
        int i0, i1, $i2, $i3;
        java.lang.String $r1;
        char[] $r2;
        java.lang.IndexOutOfBoundsException $r3, $r4, $r5;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r5;

     label1:
        $i2 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        if i1 <= $i2 goto label2;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label2:
        if i0 <= i1 goto label3;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label3:
        $r1 = new java.lang.String;

        $r2 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i3 = i1 - i0;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, i0, $i3);

        return $r1;
    }

    public java.lang.String substringTrimmed(int, int)
    {
        org.apache.http.util.CharArrayBuffer r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String $r1;
        char[] $r2, $r3, $r4;
        char $c5, $c6;
        boolean $z0, $z1;
        java.lang.IndexOutOfBoundsException $r5, $r6, $r7;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r7 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r7;

     label1:
        $i2 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        if i1 <= $i2 goto label2;

        $r6 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r6;

     label2:
        if i0 <= i1 goto label3;

        $r5 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r5;

     label3:
        if i0 >= i1 goto label4;

        $r4 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $c6 = $r4[i0];

        $z1 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c6);

        if $z1 == 0 goto label4;

        i0 = i0 + 1;

        goto label3;

     label4:
        if i1 <= i0 goto label5;

        $r3 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i4 = i1 - 1;

        $c5 = $r3[$i4];

        $z0 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c5);

        if $z0 == 0 goto label5;

        i1 = i1 + -1;

        goto label4;

     label5:
        $r1 = new java.lang.String;

        $r2 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i3 = i1 - i0;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, i0, $i3);

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.http.util.CharArrayBuffer r0;
        java.lang.String $r1;
        int $i0;
        char[] $r2;

        r0 := @this: org.apache.http.util.CharArrayBuffer;

        $r1 = new java.lang.String;

        $r2 = r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i0 = r0.<org.apache.http.util.CharArrayBuffer: int len>;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, 0, $i0);

        return $r1;
    }
}
