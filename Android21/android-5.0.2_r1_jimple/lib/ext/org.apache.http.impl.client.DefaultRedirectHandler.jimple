public class org.apache.http.impl.client.DefaultRedirectHandler extends java.lang.Object implements org.apache.http.client.RedirectHandler
{
    private final org.apache.commons.logging.Log log;
    private static final java.lang.String REDIRECT_LOCATIONS;

    public void <init>()
    {
        org.apache.http.impl.client.DefaultRedirectHandler r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: org.apache.http.impl.client.DefaultRedirectHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.http.impl.client.DefaultRedirectHandler: org.apache.commons.logging.Log log> = $r2;

        return;
    }

    public boolean isRedirectRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.impl.client.DefaultRedirectHandler r0;
        org.apache.http.HttpResponse r1;
        org.apache.http.protocol.HttpContext r2;
        int i0;
        org.apache.http.StatusLine $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.http.impl.client.DefaultRedirectHandler;

        r1 := @parameter0: org.apache.http.HttpResponse;

        r2 := @parameter1: org.apache.http.protocol.HttpContext;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r4;

     label1:
        $r3 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        i0 = interfaceinvoke $r3.<org.apache.http.StatusLine: int getStatusCode()>();

        tableswitch(i0)
        {
            case 301: goto label2;
            case 302: goto label2;
            case 303: goto label2;
            case 304: goto label3;
            case 305: goto label3;
            case 306: goto label3;
            case 307: goto label2;
            default: goto label3;
        };

     label2:
        return 1;

     label3:
        return 0;
    }

    public java.net.URI getLocationURI(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.ProtocolException
    {
        org.apache.http.impl.client.DefaultRedirectHandler r0;
        org.apache.http.HttpResponse r1;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.Header r3;
        java.lang.String r4, $r14, $r19, $r21, $r23, $r27, $r39, $r41, $r50, $r52, $r55, $r62;
        java.net.URI r5, r9, r10, $r12, $r29, r67;
        java.net.URISyntaxException r6, $r48, $r53, $r60, r64, r68;
        org.apache.http.HttpHost r7, $r22, r66;
        org.apache.http.HttpRequest r8;
        org.apache.commons.logging.Log $r11, $r37;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r13, $r24, $r28;
        java.lang.StringBuilder $r15, $r17, $r18, $r20, $r32, $r33, $r34, $r35, $r36, $r38, $r42, $r43, $r44, $r46, $r47, $r51, $r57, $r58, $r59;
        org.apache.http.client.CircularRedirectException $r16;
        int $i0;
        org.apache.http.impl.client.RedirectLocations $r25, r65;
        org.apache.http.RequestLine $r26;
        java.lang.IllegalStateException $r30;
        org.apache.http.ProtocolException $r31, $r40, $r54, $r56, $r61;
        org.apache.http.StatusLine $r45;
        java.lang.IllegalArgumentException $r49;
        org.apache.http.params.HttpParams r63;

        r0 := @this: org.apache.http.impl.client.DefaultRedirectHandler;

        r1 := @parameter0: org.apache.http.HttpResponse;

        r2 := @parameter1: org.apache.http.protocol.HttpContext;

        if r1 != null goto label01;

        $r49 = new java.lang.IllegalArgumentException;

        specialinvoke $r49.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r49;

     label01:
        r3 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.Header getFirstHeader(java.lang.String)>("location");

        if r3 != null goto label02;

        $r40 = new org.apache.http.ProtocolException;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received redirect response ");

        $r45 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $r44 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r45);

        $r51 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but no location header");

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r50);

        throw $r40;

     label02:
        r4 = interfaceinvoke r3.<org.apache.http.Header: java.lang.String getValue()>();

        $r11 = r0.<org.apache.http.impl.client.DefaultRedirectHandler: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r11.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label03;

        $r37 = r0.<org.apache.http.impl.client.DefaultRedirectHandler: org.apache.commons.logging.Log log>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Redirect requested to location \'");

        $r43 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r37.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r41);

     label03:
        $r12 = new java.net.URI;

        specialinvoke $r12.<java.net.URI: void <init>(java.lang.String)>(r4);

        r5 = $r12;

     label04:
        goto label06;

     label05:
        $r48 := @caughtexception;

        r6 = $r48;

        $r56 = new org.apache.http.ProtocolException;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid redirect URI: ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r52 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r56.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r52, r6);

        throw $r56;

     label06:
        r63 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $z1 = virtualinvoke r5.<java.net.URI: boolean isAbsolute()>();

        if $z1 != 0 goto label12;

        $z4 = interfaceinvoke r63.<org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>("http.protocol.reject-relative-redirect");

        if $z4 == 0 goto label07;

        $r31 = new org.apache.http.ProtocolException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Relative redirect location \'");

        $r32 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not allowed");

        $r39 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r39);

        throw $r31;

     label07:
        $r24 = interfaceinvoke r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.target_host");

        r7 = (org.apache.http.HttpHost) $r24;

        if r7 != null goto label08;

        $r30 = new java.lang.IllegalStateException;

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Target host not available in the HTTP context");

        throw $r30;

     label08:
        $r28 = interfaceinvoke r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.request");

        r8 = (org.apache.http.HttpRequest) $r28;

     label09:
        $r29 = new java.net.URI;

        $r26 = interfaceinvoke r8.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r27 = interfaceinvoke $r26.<org.apache.http.RequestLine: java.lang.String getUri()>();

        specialinvoke $r29.<java.net.URI: void <init>(java.lang.String)>($r27);

        r9 = $r29;

        r10 = staticinvoke <org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean)>(r9, r7, 1);

        r5 = staticinvoke <org.apache.http.client.utils.URIUtils: java.net.URI resolve(java.net.URI,java.net.URI)>(r10, r5);

     label10:
        goto label12;

     label11:
        $r60 := @caughtexception;

        r64 = $r60;

        $r61 = new org.apache.http.ProtocolException;

        $r62 = virtualinvoke r64.<java.net.URISyntaxException: java.lang.String getMessage()>();

        specialinvoke $r61.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r62, r64);

        throw $r61;

     label12:
        $z2 = interfaceinvoke r63.<org.apache.http.params.HttpParams: boolean isParameterFalse(java.lang.String)>("http.protocol.allow-circular-redirects");

        if $z2 == 0 goto label20;

        $r13 = interfaceinvoke r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.protocol.redirect-locations");

        r65 = (org.apache.http.impl.client.RedirectLocations) $r13;

        if r65 != null goto label13;

        $r25 = new org.apache.http.impl.client.RedirectLocations;

        specialinvoke $r25.<org.apache.http.impl.client.RedirectLocations: void <init>()>();

        r65 = $r25;

        interfaceinvoke r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.protocol.redirect-locations", r65);

     label13:
        $r14 = virtualinvoke r5.<java.net.URI: java.lang.String getFragment()>();

        if $r14 == null goto label17;

     label14:
        $r22 = new org.apache.http.HttpHost;

        $r21 = virtualinvoke r5.<java.net.URI: java.lang.String getHost()>();

        $i0 = virtualinvoke r5.<java.net.URI: int getPort()>();

        $r23 = virtualinvoke r5.<java.net.URI: java.lang.String getScheme()>();

        specialinvoke $r22.<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>($r21, $i0, $r23);

        r66 = $r22;

        r67 = staticinvoke <org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean)>(r5, r66, 1);

     label15:
        goto label18;

     label16:
        $r53 := @caughtexception;

        r68 = $r53;

        $r54 = new org.apache.http.ProtocolException;

        $r55 = virtualinvoke r68.<java.net.URISyntaxException: java.lang.String getMessage()>();

        specialinvoke $r54.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r55, r68);

        throw $r54;

     label17:
        r67 = r5;

     label18:
        $z3 = virtualinvoke r65.<org.apache.http.impl.client.RedirectLocations: boolean contains(java.net.URI)>(r67);

        if $z3 == 0 goto label19;

        $r16 = new org.apache.http.client.CircularRedirectException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Circular redirect to \'");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r67);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.http.client.CircularRedirectException: void <init>(java.lang.String)>($r19);

        throw $r16;

     label19:
        virtualinvoke r65.<org.apache.http.impl.client.RedirectLocations: void add(java.net.URI)>(r67);

     label20:
        return r5;

        catch java.net.URISyntaxException from label03 to label04 with label05;
        catch java.net.URISyntaxException from label09 to label10 with label11;
        catch java.net.URISyntaxException from label14 to label15 with label16;
    }

    public static void <clinit>()
    {
        <org.apache.http.impl.client.DefaultRedirectHandler: java.lang.String REDIRECT_LOCATIONS> = "http.protocol.redirect-locations";

        return;
    }
}
