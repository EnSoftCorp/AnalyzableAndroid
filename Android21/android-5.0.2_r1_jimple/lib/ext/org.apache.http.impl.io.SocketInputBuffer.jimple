public class org.apache.http.impl.io.SocketInputBuffer extends org.apache.http.impl.io.AbstractSessionInputBuffer
{
    private final java.net.Socket socket;

    public void <init>(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.io.SocketInputBuffer r0;
        java.net.Socket r1;
        int i0;
        org.apache.http.params.HttpParams r2;
        java.io.InputStream $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.http.impl.io.SocketInputBuffer;

        r1 := @parameter0: java.net.Socket;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.http.params.HttpParams;

        specialinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null");

        throw $r4;

     label1:
        r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket> = r1;

        $r3 = virtualinvoke r1.<java.net.Socket: java.io.InputStream getInputStream()>();

        virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: void init(java.io.InputStream,int,org.apache.http.params.HttpParams)>($r3, 8192, r2);

        return;
    }

    public boolean isDataAvailable(int) throws java.io.IOException
    {
        org.apache.http.impl.io.SocketInputBuffer r0;
        int i0, i1;
        boolean z0, $z1;
        java.io.InterruptedIOException r1, $r6;
        java.lang.Throwable r2, $r9;
        java.net.Socket $r3, $r4, $r5, $r7, $r8;

        r0 := @this: org.apache.http.impl.io.SocketInputBuffer;

        i0 := @parameter0: int;

        z0 = virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: boolean hasBufferedData()>();

        if z0 != 0 goto label7;

        $r3 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        i1 = virtualinvoke $r3.<java.net.Socket: int getSoTimeout()>();

     label1:
        $r4 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r4.<java.net.Socket: void setSoTimeout(int)>(i0);

        virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: int fillBuffer()>();

        z0 = virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: boolean hasBufferedData()>();

     label2:
        $r5 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r5.<java.net.Socket: void setSoTimeout(int)>(i1);

        goto label7;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        $z1 = r1 instanceof java.net.SocketTimeoutException;

        if $z1 != 0 goto label4;

        throw r1;

     label4:
        $r7 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>(i1);

        goto label7;

     label5:
        $r9 := @caughtexception;

        r2 = $r9;

     label6:
        $r8 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r8.<java.net.Socket: void setSoTimeout(int)>(i1);

        throw r2;

     label7:
        return z0;

        catch java.io.InterruptedIOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean isStale() throws java.io.IOException
    {
        org.apache.http.impl.io.SocketInputBuffer r0;
        int i0, $i1;
        boolean z0, z1, $z2, $z3, z4;
        java.lang.Throwable r1, $r5;
        java.net.Socket $r2, $r3, $r4, $r6, $r8, $r9;
        java.io.IOException $r7;
        java.net.SocketTimeoutException $r10;

        r0 := @this: org.apache.http.impl.io.SocketInputBuffer;

        $z2 = virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: boolean hasBufferedData()>();

        if $z2 == 0 goto label01;

        return 0;

     label01:
        $r2 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        i0 = virtualinvoke $r2.<java.net.Socket: int getSoTimeout()>();

     label02:
        $r3 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r3.<java.net.Socket: void setSoTimeout(int)>(1);

        $i1 = virtualinvoke r0.<org.apache.http.impl.io.SocketInputBuffer: int fillBuffer()>();

        if $i1 != -1 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        z0 = $z3;

     label05:
        $r4 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r4.<java.net.Socket: void setSoTimeout(int)>(i0);

        return z0;

     label06:
        $r10 := @caughtexception;

        z1 = 0;

     label07:
        $r9 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r9.<java.net.Socket: void setSoTimeout(int)>(i0);

        return z1;

     label08:
        $r7 := @caughtexception;

        z4 = 1;

     label09:
        $r8 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r8.<java.net.Socket: void setSoTimeout(int)>(i0);

        return z4;

     label10:
        $r5 := @caughtexception;

        r1 = $r5;

     label11:
        $r6 = r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r6.<java.net.Socket: void setSoTimeout(int)>(i0);

        throw r1;

        catch java.net.SocketTimeoutException from label02 to label05 with label06;
        catch java.io.IOException from label02 to label05 with label08;
        catch java.lang.Throwable from label02 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }
}
