public class gov.nist.javax.sip.SipStackImpl extends gov.nist.javax.sip.stack.SIPTransactionStack implements javax.sip.SipStack, gov.nist.javax.sip.SipStackExt
{
    private gov.nist.javax.sip.EventScanner eventScanner;
    private java.util.Hashtable listeningPoints;
    private java.util.LinkedList sipProviders;
    public static final java.lang.Integer MAX_DATAGRAM_SIZE;
    boolean reEntrantListener;
    javax.sip.SipListener sipListener;
    boolean deliverTerminatedEventForAck;
    boolean deliverUnsolicitedNotify;
    private java.util.concurrent.Semaphore stackSemaphore;
    private java.lang.String[] cipherSuites;
    private java.lang.String[] enabledProtocols;

    protected void <init>()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        gov.nist.javax.sip.NistSipMessageFactoryImpl r1, $r5;
        java.util.concurrent.Semaphore $r2;
        java.lang.String[] $r3, $r4;
        gov.nist.javax.sip.EventScanner $r6;
        java.util.Hashtable $r7;
        java.util.LinkedList $r8;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void <init>()>();

        r0.<gov.nist.javax.sip.SipStackImpl: boolean deliverTerminatedEventForAck> = 0;

        r0.<gov.nist.javax.sip.SipStackImpl: boolean deliverUnsolicitedNotify> = 0;

        $r2 = new java.util.concurrent.Semaphore;

        specialinvoke $r2.<java.util.concurrent.Semaphore: void <init>(int)>(1);

        r0.<gov.nist.javax.sip.SipStackImpl: java.util.concurrent.Semaphore stackSemaphore> = $r2;

        $r3 = newarray (java.lang.String)[4];

        $r3[0] = "TLS_RSA_WITH_AES_128_CBC_SHA";

        $r3[1] = "SSL_RSA_WITH_3DES_EDE_CBC_SHA";

        $r3[2] = "TLS_DH_anon_WITH_AES_128_CBC_SHA";

        $r3[3] = "SSL_DH_anon_WITH_3DES_EDE_CBC_SHA";

        r0.<gov.nist.javax.sip.SipStackImpl: java.lang.String[] cipherSuites> = $r3;

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "SSLv3";

        $r4[1] = "SSLv2Hello";

        $r4[2] = "TLSv1";

        r0.<gov.nist.javax.sip.SipStackImpl: java.lang.String[] enabledProtocols> = $r4;

        $r5 = new gov.nist.javax.sip.NistSipMessageFactoryImpl;

        specialinvoke $r5.<gov.nist.javax.sip.NistSipMessageFactoryImpl: void <init>(gov.nist.javax.sip.SipStackImpl)>(r0);

        r1 = $r5;

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void setMessageFactory(gov.nist.javax.sip.stack.StackMessageFactory)>(r1);

        $r6 = new gov.nist.javax.sip.EventScanner;

        specialinvoke $r6.<gov.nist.javax.sip.EventScanner: void <init>(gov.nist.javax.sip.SipStackImpl)>(r0);

        r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.EventScanner eventScanner> = $r6;

        $r7 = new java.util.Hashtable;

        specialinvoke $r7.<java.util.Hashtable: void <init>()>();

        r0.<gov.nist.javax.sip.SipStackImpl: java.util.Hashtable listeningPoints> = $r7;

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        r0.<gov.nist.javax.sip.SipStackImpl: java.util.LinkedList sipProviders> = $r8;

        return;
    }

    private void reInitialize()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        gov.nist.javax.sip.EventScanner $r1;
        java.util.Hashtable $r2;
        java.util.LinkedList $r3;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void reInit()>();

        $r1 = new gov.nist.javax.sip.EventScanner;

        specialinvoke $r1.<gov.nist.javax.sip.EventScanner: void <init>(gov.nist.javax.sip.SipStackImpl)>(r0);

        r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.EventScanner eventScanner> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<gov.nist.javax.sip.SipStackImpl: java.util.Hashtable listeningPoints> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<gov.nist.javax.sip.SipStackImpl: java.util.LinkedList sipProviders> = $r3;

        r0.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener sipListener> = null;

        return;
    }

    boolean isAutomaticDialogSupportEnabled()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isAutomaticDialogSupportEnabled>;

        return $z0;
    }

    public void <init>(java.util.Properties) throws javax.sip.PeerUnavailableException
    {
        gov.nist.javax.sip.SipStackImpl r0;
        java.util.Properties r1;
        java.lang.String r2, r4, r13, r18, r20, r22, r24, $r34, $r36, $r37, $r39, $r40, $r41, $r43, $r44, $r45, $r48, $r49, $r50, $r51, $r55, $r56, $r57, $r60, $r61, $r62, $r65, $r67, $r68, $r76, $r78, $r79, $r80, $r88, $r90, $r94, $r95, $r96, $r98, $r103, $r104, $r115, $r120, $r125, $r126, $r132, $r141, $r143, $r148, $r153, $r158, $r167, $r169, $r177, $r183, $r194, $r196, $r202, $r207, $r212, $r214, $r220, $r226, $r228, $r235, r243, r246, r253, r259, r260, r262, r263, r264, r265, r266, r269, r272, r275, r277, r279, r280, r281, r283, r284, r285, r287, r290, r292, r293;
        java.lang.Class r5, r14, r26, $r54, r247, r254, r273;
        java.lang.Class[] r6, $r81, $r110, $r111, r248, r255;
        java.lang.reflect.Constructor r7, r15, r17, r25, r249, r256;
        java.lang.Object[] r8, r10, $r82, $r106, $r113, r250;
        gov.nist.core.StackLogger r9, $r72, $r73, $r99, $r131, $r144, $r146, $r151, $r166, $r191, $r198, $r210, $r225, $r232, $r233, $r242;
        javax.sip.address.Router r11;
        java.lang.Exception r12, $r133, $r163, $r168, $r180, $r186, $r213, $r222, $r224, $r236, r245, r252, r258;
        java.lang.NumberFormatException r16, r19, r21, r23, $r123, $r152, $r157, $r161, $r197, $r211, $r234, r276, r278;
        int i0, i1, $i2, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22;
        java.lang.String[] r27;
        java.util.StringTokenizer r28, $r89, $r116, $r121, r261, r267;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, z40;
        java.lang.Object $r29, $r32, $r38, $r83, $r108, $r112;
        gov.nist.core.ServerLogger $r30, $r31, $r35;
        gov.nist.javax.sip.stack.DefaultRouter $r33;
        java.lang.Boolean $r42, $r46, $r47, $r63, $r66, $r69, $r77;
        gov.nist.javax.sip.stack.DefaultMessageLogFactory $r52, $r237;
        java.lang.Integer $r53, $r58, $r59, $r64, $r100, $r101, $r102, $r105, $r114;
        java.io.BufferedReader $r70, r289;
        java.io.InputStreamReader $r71;
        java.lang.StringBuilder $r74, $r75, $r87, $r91, $r93, $r97, $r127, $r128, $r129, $r134, $r135, $r136, $r137, $r140, $r142, $r145, $r149, $r150, $r154, $r155, $r156, $r159, $r164, $r165, $r170, $r171, $r172, $r174, $r175, $r176, $r178, $r181, $r182, $r184, $r187, $r188, $r189, $r190, $r192, $r193, $r195, $r199, $r200, $r201, $r205, $r206, $r208, $r209, $r215, $r216, $r217, $r229, $r230, $r231, $r239, $r240, $r241;
        gov.nist.javax.sip.LogRecordFactory $r84;
        gov.nist.core.ThreadAuditor $r85;
        java.lang.Long $r86;
        long $l3, $l6;
        java.io.PrintStream $r92;
        gov.nist.core.net.NetworkLayer $r107;
        gov.nist.core.net.AddressResolver $r109;
        javax.sip.PeerUnavailableException $r117, $r124, $r130, $r160, $r179, $r218, $r221, $r238;
        gov.nist.core.net.SslNetworkLayer $r118;
        char[] $r119;
        java.util.HashSet $r122;
        java.lang.reflect.InvocationTargetException $r138, $r203, $r227, r244, r251, r257;
        java.lang.IllegalArgumentException $r139, $r173, $r185, $r204;
        java.io.IOException $r147;
        java.lang.Throwable $r162, $r223;
        java.net.UnknownHostException $r219;
        java.io.InputStream r288;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        r1 := @parameter0: java.util.Properties;

        specialinvoke r0.<gov.nist.javax.sip.SipStackImpl: void <init>()>();

        r2 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.IP_ADDRESS");

     label01:
        if r2 == null goto label02;

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void setHostAddress(java.lang.String)>(r2);

     label02:
        goto label04;

     label03:
        $r219 := @caughtexception;

        $r218 = new javax.sip.PeerUnavailableException;

        $r217 = new java.lang.StringBuilder;

        specialinvoke $r217.<java.lang.StringBuilder: void <init>()>();

        $r216 = virtualinvoke $r217.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad address ");

        $r215 = virtualinvoke $r216.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r214 = virtualinvoke $r215.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r218.<javax.sip.PeerUnavailableException: void <init>(java.lang.String)>($r214);

        throw $r218;

     label04:
        r243 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.STACK_NAME");

        if r243 != null goto label05;

        $r124 = new javax.sip.PeerUnavailableException;

        specialinvoke $r124.<javax.sip.PeerUnavailableException: void <init>(java.lang.String)>("stack name is missing");

        throw $r124;

     label05:
        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void setStackName(java.lang.String)>(r243);

        r4 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.STACK_LOGGER");

        if r4 != null goto label06;

        r4 = "gov.nist.core.LogWriter";

     label06:
        r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r4);

        r6 = newarray (java.lang.Class)[0];

        r7 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r6);

        r8 = newarray (java.lang.Object)[0];

        $r29 = virtualinvoke r7.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r8);

        r9 = (gov.nist.core.StackLogger) $r29;

        interfaceinvoke r9.<gov.nist.core.StackLogger: void setStackProperties(java.util.Properties)>(r1);

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void setStackLogger(gov.nist.core.StackLogger)>(r9);

     label07:
        goto label10;

     label08:
        $r203 := @caughtexception;

        r244 = $r203;

        $r204 = new java.lang.IllegalArgumentException;

        $r205 = new java.lang.StringBuilder;

        specialinvoke $r205.<java.lang.StringBuilder: void <init>()>();

        $r176 = virtualinvoke $r205.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cound not instantiate stack logger ");

        $r175 = virtualinvoke $r176.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r178 = virtualinvoke $r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("- check that it is present on the classpath and that there is a no-args constructor defined");

        $r177 = virtualinvoke $r178.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r204.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r177, r244);

        throw $r204;

     label09:
        $r186 := @caughtexception;

        r245 = $r186;

        $r185 = new java.lang.IllegalArgumentException;

        $r188 = new java.lang.StringBuilder;

        specialinvoke $r188.<java.lang.StringBuilder: void <init>()>();

        $r187 = virtualinvoke $r188.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cound not instantiate stack logger ");

        $r190 = virtualinvoke $r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r189 = virtualinvoke $r190.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("- check that it is present on the classpath and that there is a no-args constructor defined");

        $r226 = virtualinvoke $r189.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r185.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r226, r245);

        throw $r185;

     label10:
        r246 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.SERVER_LOGGER");

        if r246 != null goto label11;

        r246 = "gov.nist.javax.sip.stack.ServerLog";

     label11:
        r247 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r246);

        r248 = newarray (java.lang.Class)[0];

        r249 = virtualinvoke r247.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r248);

        r250 = newarray (java.lang.Object)[0];

        $r32 = virtualinvoke r249.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r250);

        $r30 = (gov.nist.core.ServerLogger) $r32;

        r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.ServerLogger serverLogger> = $r30;

        $r31 = r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.ServerLogger serverLogger>;

        interfaceinvoke $r31.<gov.nist.core.ServerLogger: void setSipStack(javax.sip.SipStack)>(r0);

        $r35 = r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.ServerLogger serverLogger>;

        interfaceinvoke $r35.<gov.nist.core.ServerLogger: void setStackProperties(java.util.Properties)>(r1);

     label12:
        goto label15;

     label13:
        $r138 := @caughtexception;

        r251 = $r138;

        $r139 = new java.lang.IllegalArgumentException;

        $r136 = new java.lang.StringBuilder;

        specialinvoke $r136.<java.lang.StringBuilder: void <init>()>();

        $r137 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cound not instantiate server logger ");

        $r134 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r135 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("- check that it is present on the classpath and that there is a no-args constructor defined");

        $r132 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r139.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r132, r251);

        throw $r139;

     label14:
        $r168 := @caughtexception;

        r252 = $r168;

        $r173 = new java.lang.IllegalArgumentException;

        $r174 = new java.lang.StringBuilder;

        specialinvoke $r174.<java.lang.StringBuilder: void <init>()>();

        $r171 = virtualinvoke $r174.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cound not instantiate server logger ");

        $r172 = virtualinvoke $r171.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r149 = virtualinvoke $r172.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("- check that it is present on the classpath and that there is a no-args constructor defined");

        $r148 = virtualinvoke $r149.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r173.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r148, r252);

        throw $r173;

     label15:
        $r36 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.OUTBOUND_PROXY");

        r0.<gov.nist.javax.sip.SipStackImpl: java.lang.String outboundProxy> = $r36;

        $r33 = new gov.nist.javax.sip.stack.DefaultRouter;

        $r34 = r0.<gov.nist.javax.sip.SipStackImpl: java.lang.String outboundProxy>;

        specialinvoke $r33.<gov.nist.javax.sip.stack.DefaultRouter: void <init>(javax.sip.SipStack,java.lang.String)>(r0, $r34);

        r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.DefaultRouter defaultRouter> = $r33;

        r253 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.ROUTER_PATH");

        if r253 != null goto label16;

        r253 = "gov.nist.javax.sip.stack.DefaultRouter";

     label16:
        r254 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r253);

        r255 = newarray (java.lang.Class)[2];

        r255[0] = class "javax/sip/SipStack";

        r255[1] = class "java/lang/String";

        r256 = virtualinvoke r254.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r255);

        r10 = newarray (java.lang.Object)[2];

        r10[0] = r0;

        $r37 = r0.<gov.nist.javax.sip.SipStackImpl: java.lang.String outboundProxy>;

        r10[1] = $r37;

        $r38 = virtualinvoke r256.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r10);

        r11 = (javax.sip.address.Router) $r38;

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void setRouter(javax.sip.address.Router)>(r11);

     label17:
        goto label20;

     label18:
        $r227 := @caughtexception;

        r257 = $r227;

        $r225 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r223 = virtualinvoke r257.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r224 = (java.lang.Exception) $r223;

        interfaceinvoke $r225.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("could not instantiate router -- invocation target problem", $r224);

        $r221 = new javax.sip.PeerUnavailableException;

        specialinvoke $r221.<javax.sip.PeerUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Cound not instantiate router - check constructor", r257);

        throw $r221;

     label19:
        $r133 := @caughtexception;

        r258 = $r133;

        $r131 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r162 = virtualinvoke r258.<java.lang.Exception: java.lang.Throwable getCause()>();

        $r163 = (java.lang.Exception) $r162;

        interfaceinvoke $r131.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("could not instantiate router", $r163);

        $r160 = new javax.sip.PeerUnavailableException;

        specialinvoke $r160.<javax.sip.PeerUnavailableException: void <init>(java.lang.String,java.lang.Throwable)>("Could not instantiate router", r258);

        throw $r160;

     label20:
        r259 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.USE_ROUTER_FOR_ALL_URIS");

        r0.<gov.nist.javax.sip.SipStackImpl: boolean useRouterForAll> = 1;

        if r259 == null goto label21;

        $r125 = "true";

        $z26 = virtualinvoke $r125.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r259);

        r0.<gov.nist.javax.sip.SipStackImpl: boolean useRouterForAll> = $z26;

     label21:
        r260 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.EXTENSION_METHODS");

        if r260 == null goto label25;

        $r116 = new java.util.StringTokenizer;

        specialinvoke $r116.<java.util.StringTokenizer: void <init>(java.lang.String)>(r260);

        r261 = $r116;

     label22:
        $z22 = virtualinvoke r261.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z22 == 0 goto label25;

        r262 = virtualinvoke r261.<java.util.StringTokenizer: java.lang.String nextToken(java.lang.String)>(":");

        $z32 = virtualinvoke r262.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("BYE");

        if $z32 != 0 goto label23;

        $z31 = virtualinvoke r262.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("INVITE");

        if $z31 != 0 goto label23;

        $z30 = virtualinvoke r262.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("SUBSCRIBE");

        if $z30 != 0 goto label23;

        $z29 = virtualinvoke r262.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NOTIFY");

        if $z29 != 0 goto label23;

        $z28 = virtualinvoke r262.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ACK");

        if $z28 != 0 goto label23;

        $z27 = virtualinvoke r262.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("OPTIONS");

        if $z27 == 0 goto label24;

     label23:
        $r130 = new javax.sip.PeerUnavailableException;

        $r129 = new java.lang.StringBuilder;

        specialinvoke $r129.<java.lang.StringBuilder: void <init>()>();

        $r128 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad extension method ");

        $r127 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r262);

        $r126 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r130.<javax.sip.PeerUnavailableException: void <init>(java.lang.String)>($r126);

        throw $r130;

     label24:
        virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: void addExtensionMethod(java.lang.String)>(r262);

        goto label22;

     label25:
        r263 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStore");

        r264 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStore");

        if r263 == null goto label30;

        if r264 != null goto label26;

        r264 = r263;

     label26:
        r265 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStorePassword");

     label27:
        $r118 = new gov.nist.core.net.SslNetworkLayer;

        $r119 = virtualinvoke r265.<java.lang.String: char[] toCharArray()>();

        $r115 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStoreType");

        specialinvoke $r118.<gov.nist.core.net.SslNetworkLayer: void <init>(java.lang.String,java.lang.String,char[],java.lang.String)>(r264, r263, $r119, $r115);

        r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.NetworkLayer networkLayer> = $r118;

     label28:
        goto label30;

     label29:
        $r222 := @caughtexception;

        r12 = $r222;

        $r233 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r233.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("could not instantiate SSL networking", r12);

     label30:
        $r40 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("javax.sip.AUTOMATIC_DIALOG_SUPPORT", "on");

        $z1 = virtualinvoke $r40.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("on");

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isAutomaticDialogSupportEnabled> = $z1;

        $r39 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.AUTOMATIC_DIALOG_ERROR_HANDLING", "true");

        $r42 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r41 = virtualinvoke $r42.<java.lang.Boolean: java.lang.String toString()>();

        $z3 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>($r41);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isAutomaticDialogErrorHandlingEnabled> = $z3;

        $z2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isAutomaticDialogSupportEnabled>;

        if $z2 == 0 goto label31;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isAutomaticDialogErrorHandlingEnabled> = 1;

     label31:
        $r43 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.MAX_LISTENER_RESPONSE_TIME");

        if $r43 == null goto label32;

        $r120 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.MAX_LISTENER_RESPONSE_TIME");

        $i19 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r120);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxListenerResponseTime> = $i19;

        $i20 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxListenerResponseTime>;

        if $i20 > 0 goto label33;

        $r117 = new javax.sip.PeerUnavailableException;

        specialinvoke $r117.<javax.sip.PeerUnavailableException: void <init>(java.lang.String)>("Bad configuration parameter gov.nist.javax.sip.MAX_LISTENER_RESPONSE_TIME : should be positive");

        throw $r117;

     label32:
        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxListenerResponseTime> = -1;

     label33:
        $r44 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.DELIVER_TERMINATED_EVENT_FOR_ACK", "false");

        $z7 = virtualinvoke $r44.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        r0.<gov.nist.javax.sip.SipStackImpl: boolean deliverTerminatedEventForAck> = $z7;

        $r45 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.DELIVER_UNSOLICITED_NOTIFY", "false");

        $z4 = virtualinvoke $r45.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        r0.<gov.nist.javax.sip.SipStackImpl: boolean deliverUnsolicitedNotify> = $z4;

        r266 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("javax.sip.FORKABLE_EVENTS");

        if r266 == null goto label35;

        $r121 = new java.util.StringTokenizer;

        specialinvoke $r121.<java.util.StringTokenizer: void <init>(java.lang.String)>(r266);

        r267 = $r121;

     label34:
        $z24 = virtualinvoke r267.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z24 == 0 goto label35;

        r13 = virtualinvoke r267.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r122 = r0.<gov.nist.javax.sip.SipStackImpl: java.util.HashSet forkedEvents>;

        virtualinvoke $r122.<java.util.HashSet: boolean add(java.lang.Object)>(r13);

        goto label34;

     label35:
        $z5 = virtualinvoke r1.<java.util.Properties: boolean containsKey(java.lang.Object)>("gov.nist.javax.sip.NETWORK_LAYER");

        if $z5 == 0 goto label39;

        r269 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.NETWORK_LAYER");

     label36:
        r14 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r269);

        $r110 = newarray (java.lang.Class)[0];

        r15 = virtualinvoke r14.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r110);

        $r106 = newarray (java.lang.Object)[0];

        $r108 = virtualinvoke r15.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r106);

        $r107 = (gov.nist.core.net.NetworkLayer) $r108;

        r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.NetworkLayer networkLayer> = $r107;

     label37:
        goto label39;

     label38:
        $r180 := @caughtexception;

        $r179 = new javax.sip.PeerUnavailableException;

        $r182 = new java.lang.StringBuilder;

        specialinvoke $r182.<java.lang.StringBuilder: void <init>()>();

        $r181 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t find or instantiate NetworkLayer implementation: ");

        $r184 = virtualinvoke $r181.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r269);

        $r183 = virtualinvoke $r184.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r179.<javax.sip.PeerUnavailableException: void <init>(java.lang.String)>($r183);

        throw $r179;

     label39:
        $z6 = virtualinvoke r1.<java.util.Properties: boolean containsKey(java.lang.Object)>("gov.nist.javax.sip.ADDRESS_RESOLVER");

        if $z6 == 0 goto label43;

        r272 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.ADDRESS_RESOLVER");

     label40:
        r273 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r272);

        $r111 = newarray (java.lang.Class)[0];

        r17 = virtualinvoke r273.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r111);

        $r113 = newarray (java.lang.Object)[0];

        $r112 = virtualinvoke r17.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r113);

        $r109 = (gov.nist.core.net.AddressResolver) $r112;

        r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.net.AddressResolver addressResolver> = $r109;

     label41:
        goto label43;

     label42:
        $r213 := @caughtexception;

        $r238 = new javax.sip.PeerUnavailableException;

        $r239 = new java.lang.StringBuilder;

        specialinvoke $r239.<java.lang.StringBuilder: void <init>()>();

        $r240 = virtualinvoke $r239.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t find or instantiate AddressResolver implementation: ");

        $r241 = virtualinvoke $r240.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r272);

        $r235 = virtualinvoke $r241.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r238.<javax.sip.PeerUnavailableException: void <init>(java.lang.String)>($r235);

        throw $r238;

     label43:
        r275 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.MAX_CONNECTIONS");

        if r275 == null goto label47;

     label44:
        $r114 = new java.lang.Integer;

        specialinvoke $r114.<java.lang.Integer: void <init>(java.lang.String)>(r275);

        $i18 = virtualinvoke $r114.<java.lang.Integer: int intValue()>();

        r0.<gov.nist.javax.sip.SipStackImpl: int maxConnections> = $i18;

     label45:
        goto label47;

     label46:
        $r123 := @caughtexception;

        r276 = $r123;

        $z25 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z25 == 0 goto label47;

        $r144 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r145 = new java.lang.StringBuilder;

        specialinvoke $r145.<java.lang.StringBuilder: void <init>()>();

        $r142 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("max connections - bad value ");

        $r143 = virtualinvoke r276.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r140 = virtualinvoke $r142.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r143);

        $r141 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r144.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r141);

     label47:
        r277 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.THREAD_POOL_SIZE");

        if r277 == null goto label51;

     label48:
        $r102 = new java.lang.Integer;

        specialinvoke $r102.<java.lang.Integer: void <init>(java.lang.String)>(r277);

        $i12 = virtualinvoke $r102.<java.lang.Integer: int intValue()>();

        r0.<gov.nist.javax.sip.SipStackImpl: int threadPoolSize> = $i12;

     label49:
        goto label51;

     label50:
        $r161 := @caughtexception;

        r278 = $r161;

        $z35 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z35 == 0 goto label51;

        $r166 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r164 = new java.lang.StringBuilder;

        specialinvoke $r164.<java.lang.StringBuilder: void <init>()>();

        $r165 = virtualinvoke $r164.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("thread pool size - bad value ");

        $r169 = virtualinvoke r278.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r170 = virtualinvoke $r165.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r169);

        $r167 = virtualinvoke $r170.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r166.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r167);

     label51:
        r279 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.MAX_SERVER_TRANSACTIONS");

        if r279 == null goto label56;

     label52:
        $r101 = new java.lang.Integer;

        specialinvoke $r101.<java.lang.Integer: void <init>(java.lang.String)>(r279);

        $i9 = virtualinvoke $r101.<java.lang.Integer: int intValue()>();

        r0.<gov.nist.javax.sip.SipStackImpl: int serverTransactionTableHighwaterMark> = $i9;

        $i10 = r0.<gov.nist.javax.sip.SipStackImpl: int serverTransactionTableHighwaterMark>;

        $i13 = $i10 * 80;

        $i14 = $i13 / 100;

        r0.<gov.nist.javax.sip.SipStackImpl: int serverTransactionTableLowaterMark> = $i14;

     label53:
        goto label57;

     label54:
        $r157 := @caughtexception;

        r16 = $r157;

        $z34 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z34 == 0 goto label55;

        $r191 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r192 = new java.lang.StringBuilder;

        specialinvoke $r192.<java.lang.StringBuilder: void <init>()>();

        $r193 = virtualinvoke $r192.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("transaction table size - bad value ");

        $r194 = virtualinvoke r16.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r195 = virtualinvoke $r193.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r194);

        $r196 = virtualinvoke $r195.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r191.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r196);

     label55:
        goto label57;

     label56:
        r0.<gov.nist.javax.sip.SipStackImpl: boolean unlimitedServerTransactionTableSize> = 1;

     label57:
        r280 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.MAX_CLIENT_TRANSACTIONS");

        if r280 == null goto label62;

     label58:
        $r105 = new java.lang.Integer;

        specialinvoke $r105.<java.lang.Integer: void <init>(java.lang.String)>(r280);

        $i17 = virtualinvoke $r105.<java.lang.Integer: int intValue()>();

        r0.<gov.nist.javax.sip.SipStackImpl: int clientTransactionTableHiwaterMark> = $i17;

        $i15 = r0.<gov.nist.javax.sip.SipStackImpl: int clientTransactionTableLowaterMark>;

        $i16 = $i15 * 80;

        $i11 = $i16 / 100;

        r0.<gov.nist.javax.sip.SipStackImpl: int clientTransactionTableLowaterMark> = $i11;

     label59:
        goto label63;

     label60:
        $r234 := @caughtexception;

        r19 = $r234;

        $z38 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z38 == 0 goto label61;

        $r232 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r230 = new java.lang.StringBuilder;

        specialinvoke $r230.<java.lang.StringBuilder: void <init>()>();

        $r231 = virtualinvoke $r230.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("transaction table size - bad value ");

        $r228 = virtualinvoke r19.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r229 = virtualinvoke $r231.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r228);

        $r212 = virtualinvoke $r229.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r232.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r212);

     label61:
        goto label63;

     label62:
        r0.<gov.nist.javax.sip.SipStackImpl: boolean unlimitedClientTransactionTableSize> = 1;

     label63:
        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cacheServerConnections> = 1;

        r281 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.CACHE_SERVER_CONNECTIONS");

        if r281 == null goto label64;

        $r104 = "false";

        $r103 = virtualinvoke r281.<java.lang.String: java.lang.String trim()>();

        $z20 = virtualinvoke $r104.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r103);

        if $z20 == 0 goto label64;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cacheServerConnections> = 0;

     label64:
        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cacheClientConnections> = 1;

        r18 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.CACHE_CLIENT_CONNECTIONS");

        if r18 == null goto label65;

        $r95 = "false";

        $r94 = virtualinvoke r18.<java.lang.String: java.lang.String trim()>();

        $z21 = virtualinvoke $r95.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r94);

        if $z21 == 0 goto label65;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cacheClientConnections> = 0;

     label65:
        r20 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.READ_TIMEOUT");

        if r20 == null goto label70;

     label66:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r20);

        if i0 < 100 goto label67;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int readTimeout> = i0;

        goto label68;

     label67:
        $r92 = <java.lang.System: java.io.PrintStream err>;

        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        $r91 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value too low ");

        $r97 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r96 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r92.<java.io.PrintStream: void println(java.lang.String)>($r96);

     label68:
        goto label70;

     label69:
        $r197 := @caughtexception;

        $z36 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z36 == 0 goto label70;

        $r198 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r199 = new java.lang.StringBuilder;

        specialinvoke $r199.<java.lang.StringBuilder: void <init>()>();

        $r200 = virtualinvoke $r199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad read timeout ");

        $r201 = virtualinvoke $r200.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r202 = virtualinvoke $r201.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r198.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r202);

     label70:
        r283 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.STUN_SERVER");

        if r283 == null goto label71;

        $r99 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r99.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>("Ignoring obsolete property gov.nist.javax.sip.STUN_SERVER");

     label71:
        r22 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.MAX_MESSAGE_SIZE");

     label72:
        if r22 == null goto label73;

        $r100 = new java.lang.Integer;

        specialinvoke $r100.<java.lang.Integer: void <init>(java.lang.String)>(r22);

        $i8 = virtualinvoke $r100.<java.lang.Integer: int intValue()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxMessageSize> = $i8;

        $i7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxMessageSize>;

        if $i7 >= 4096 goto label74;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxMessageSize> = 4096;

        goto label74;

     label73:
        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxMessageSize> = 0;

     label74:
        goto label76;

     label75:
        $r211 := @caughtexception;

        r21 = $r211;

        $z37 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z37 == 0 goto label76;

        $r210 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r209 = new java.lang.StringBuilder;

        specialinvoke $r209.<java.lang.StringBuilder: void <init>()>();

        $r208 = virtualinvoke $r209.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxMessageSize - bad value ");

        $r207 = virtualinvoke r21.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r206 = virtualinvoke $r208.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r207);

        $r220 = virtualinvoke $r206.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r210.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r220);

     label76:
        r284 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.REENTRANT_LISTENER");

        if r284 == null goto label77;

        $r98 = "true";

        $z19 = virtualinvoke $r98.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r284);

        if $z19 == 0 goto label77;

        $z18 = 1;

        goto label78;

     label77:
        $z18 = 0;

     label78:
        r0.<gov.nist.javax.sip.SipStackImpl: boolean reEntrantListener> = $z18;

        r24 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.THREAD_AUDIT_INTERVAL_IN_MILLISECS");

        if r24 == null goto label82;

     label79:
        $r85 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.ThreadAuditor getThreadAuditor()>();

        $r86 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r24);

        $l3 = virtualinvoke $r86.<java.lang.Long: long longValue()>();

        $l6 = $l3 / 2L;

        virtualinvoke $r85.<gov.nist.core.ThreadAuditor: void setPingIntervalInMillisecs(long)>($l6);

     label80:
        goto label82;

     label81:
        $r152 := @caughtexception;

        r23 = $r152;

        $z33 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z33 == 0 goto label82;

        $r151 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r150 = new java.lang.StringBuilder;

        specialinvoke $r150.<java.lang.StringBuilder: void <init>()>();

        $r156 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("THREAD_AUDIT_INTERVAL_IN_MILLISECS - bad value [");

        $r155 = virtualinvoke $r156.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r154 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r153 = virtualinvoke r23.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r159 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r153);

        $r158 = virtualinvoke $r159.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r151.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r158);

     label82:
        $r49 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.PASS_INVITE_NON_2XX_ACK_TO_LISTENER", "false");

        $r46 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r49);

        $z8 = virtualinvoke $r46.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: void setNon2XXAckPassedToListener(boolean)>($z8);

        $r48 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.AUTO_GENERATE_TIMESTAMP", "false");

        $r47 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r48);

        $z10 = virtualinvoke $r47.<java.lang.Boolean: boolean booleanValue()>();

        r0.<gov.nist.javax.sip.SipStackImpl: boolean generateTimeStampHeader> = $z10;

        r285 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.LOG_FACTORY");

        if r285 == null goto label87;

     label83:
        r26 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r285);

        $r81 = newarray (java.lang.Class)[0];

        r25 = virtualinvoke r26.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r81);

        $r82 = newarray (java.lang.Object)[0];

        $r83 = virtualinvoke r25.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r82);

        $r84 = (gov.nist.javax.sip.LogRecordFactory) $r83;

        r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.LogRecordFactory logRecordFactory> = $r84;

     label84:
        goto label88;

     label85:
        $r236 := @caughtexception;

        $z39 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z39 == 0 goto label86;

        $r242 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r242.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Bad configuration value for LOG_FACTORY -- using default logger");

     label86:
        $r237 = new gov.nist.javax.sip.stack.DefaultMessageLogFactory;

        specialinvoke $r237.<gov.nist.javax.sip.stack.DefaultMessageLogFactory: void <init>()>();

        r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.LogRecordFactory logRecordFactory> = $r237;

        goto label88;

     label87:
        $r52 = new gov.nist.javax.sip.stack.DefaultMessageLogFactory;

        specialinvoke $r52.<gov.nist.javax.sip.stack.DefaultMessageLogFactory: void <init>()>();

        r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.LogRecordFactory logRecordFactory> = $r52;

     label88:
        $r51 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.COMPUTE_CONTENT_LENGTH_FROM_MESSAGE_BODY", "false");

        z40 = virtualinvoke $r51.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        staticinvoke <gov.nist.javax.sip.parser.StringMsgParser: void setComputeContentLengthFromMessage(boolean)>(z40);

        r287 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("gov.nist.javax.sip.TLS_CLIENT_PROTOCOLS");

        if r287 == null goto label91;

        $r89 = new java.util.StringTokenizer;

        specialinvoke $r89.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r287, " ,");

        r28 = $r89;

        $i4 = virtualinvoke r28.<java.util.StringTokenizer: int countTokens()>();

        r27 = newarray (java.lang.String)[$i4];

        i1 = 0;

     label89:
        $z17 = virtualinvoke r28.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z17 == 0 goto label90;

        $i5 = i1;

        i1 = i1 + 1;

        $r90 = virtualinvoke r28.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r27[$i5] = $r90;

        goto label89;

     label90:
        r0.<gov.nist.javax.sip.SipStackImpl: java.lang.String[] enabledProtocols> = r27;

     label91:
        $r50 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.RFC_2543_SUPPORT_ENABLED", "true");

        $z9 = virtualinvoke $r50.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean rfc2543Supported> = $z9;

        $r56 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.CANCEL_CLIENT_TRANSACTION_CHECKED", "true");

        $z13 = virtualinvoke $r56.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cancelClientTransactionChecked> = $z13;

        $r55 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.LOG_STACK_TRACE_ON_MESSAGE_SEND", "false");

        $z12 = virtualinvoke $r55.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean logStackTraceOnMessageSend> = $z12;

        $z11 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z11 == 0 goto label92;

        $r72 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("created Sip stack. Properties = ");

        $r87 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r72.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r88);

     label92:
        $r54 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r288 = virtualinvoke $r54.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/TIMESTAMP");

        if r288 == null goto label97;

        $r70 = new java.io.BufferedReader;

        $r71 = new java.io.InputStreamReader;

        specialinvoke $r71.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r288);

        specialinvoke $r70.<java.io.BufferedReader: void <init>(java.io.Reader)>($r71);

        r289 = $r70;

     label93:
        r290 = virtualinvoke r289.<java.io.BufferedReader: java.lang.String readLine()>();

        if r288 == null goto label94;

        virtualinvoke r288.<java.io.InputStream: void close()>();

     label94:
        $r73 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r73.<gov.nist.core.StackLogger: void setBuildTimeStamp(java.lang.String)>(r290);

     label95:
        goto label97;

     label96:
        $r147 := @caughtexception;

        $r146 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r146.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Could not open build timestamp.");

     label97:
        $r53 = <gov.nist.javax.sip.SipStackImpl: java.lang.Integer MAX_DATAGRAM_SIZE>;

        $r60 = virtualinvoke $r53.<java.lang.Integer: java.lang.String toString()>();

        r292 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.RECEIVE_UDP_BUFFER_SIZE", $r60);

        $r59 = new java.lang.Integer;

        specialinvoke $r59.<java.lang.Integer: void <init>(java.lang.String)>(r292);

        i21 = virtualinvoke $r59.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void setReceiveUdpBufferSize(int)>(i21);

        $r58 = <gov.nist.javax.sip.SipStackImpl: java.lang.Integer MAX_DATAGRAM_SIZE>;

        $r57 = virtualinvoke $r58.<java.lang.Integer: java.lang.String toString()>();

        r293 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.SEND_UDP_BUFFER_SIZE", $r57);

        $r64 = new java.lang.Integer;

        specialinvoke $r64.<java.lang.Integer: void <init>(java.lang.String)>(r293);

        i22 = virtualinvoke $r64.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void setSendUdpBufferSize(int)>(i22);

        $r63 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r62 = virtualinvoke $r63.<java.lang.Boolean: java.lang.String toString()>();

        $r61 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.CONGESTION_CONTROL_ENABLED", $r62);

        z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r61);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean stackDoesCongestionControl> = z0;

        $r69 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r68 = virtualinvoke $r69.<java.lang.Boolean: java.lang.String toString()>();

        $r67 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.IS_BACK_TO_BACK_USER_AGENT", $r68);

        $z14 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r67);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isBackToBackUserAgent> = $z14;

        $r66 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r65 = virtualinvoke $r66.<java.lang.Boolean: java.lang.String toString()>();

        $r76 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.REJECT_STRAY_RESPONSES", $r65);

        $z15 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r76);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean checkBranchId> = $z15;

        $r77 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r79 = virtualinvoke $r77.<java.lang.Boolean: java.lang.String toString()>();

        $r78 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.DELIVER_TERMINATED_EVENT_FOR_NULL_DIALOG", $r79);

        $z16 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r78);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isDialogTerminatedEventDeliveredForNullDialog> = $z16;

        $r80 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>("gov.nist.javax.sip.MAX_FORK_TIME_SECONDS", "0");

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r80);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxForkTime> = $i2;

        return;

        catch java.net.UnknownHostException from label01 to label02 with label03;
        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label08;
        catch java.lang.Exception from label06 to label07 with label09;
        catch java.lang.reflect.InvocationTargetException from label11 to label12 with label13;
        catch java.lang.Exception from label11 to label12 with label14;
        catch java.lang.reflect.InvocationTargetException from label16 to label17 with label18;
        catch java.lang.Exception from label16 to label17 with label19;
        catch java.lang.Exception from label27 to label28 with label29;
        catch java.lang.Exception from label36 to label37 with label38;
        catch java.lang.Exception from label40 to label41 with label42;
        catch java.lang.NumberFormatException from label44 to label45 with label46;
        catch java.lang.NumberFormatException from label48 to label49 with label50;
        catch java.lang.NumberFormatException from label52 to label53 with label54;
        catch java.lang.NumberFormatException from label58 to label59 with label60;
        catch java.lang.NumberFormatException from label66 to label68 with label69;
        catch java.lang.NumberFormatException from label72 to label74 with label75;
        catch java.lang.NumberFormatException from label79 to label80 with label81;
        catch java.lang.Exception from label83 to label84 with label85;
        catch java.io.IOException from label93 to label95 with label96;
    }

    public synchronized javax.sip.ListeningPoint createListeningPoint(java.lang.String, int, java.lang.String) throws javax.sip.TransportNotSupportedException, javax.sip.InvalidArgumentException
    {
        gov.nist.javax.sip.SipStackImpl r0;
        java.lang.String r1, r2, r3, $r20, $r27, $r39, $r43, $r48;
        int i0;
        gov.nist.javax.sip.ListeningPointImpl r4, $r9, r50;
        java.net.InetAddress r5;
        gov.nist.javax.sip.stack.MessageProcessor r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Hashtable $r7, $r11;
        java.lang.Object $r8;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r24, $r29, $r30, $r32, $r33, $r34, $r35, $r36, $r40, $r41, $r44, $r45, $r46, $r47, $r49;
        gov.nist.core.StackLogger $r13, $r31, $r42;
        javax.sip.TransportNotSupportedException $r23;
        java.lang.NullPointerException $r25, $r26;
        javax.sip.InvalidArgumentException $r28, $r37;
        java.io.IOException $r38, r51;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label01;

        $r31 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createListeningPoint : address = ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" port = ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r33 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transport = ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r31.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r39);

     label01:
        if r1 != null goto label02;

        $r26 = new java.lang.NullPointerException;

        specialinvoke $r26.<java.lang.NullPointerException: void <init>(java.lang.String)>("Address for listening point is null!");

        throw $r26;

     label02:
        if r2 != null goto label03;

        $r25 = new java.lang.NullPointerException;

        specialinvoke $r25.<java.lang.NullPointerException: void <init>(java.lang.String)>("null transport");

        throw $r25;

     label03:
        if i0 > 0 goto label04;

        $r28 = new javax.sip.InvalidArgumentException;

        specialinvoke $r28.<javax.sip.InvalidArgumentException: void <init>(java.lang.String)>("bad port");

        throw $r28;

     label04:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("UDP");

        if $z1 != 0 goto label05;

        $z4 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TLS");

        if $z4 != 0 goto label05;

        $z6 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TCP");

        if $z6 != 0 goto label05;

        $z5 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("SCTP");

        if $z5 != 0 goto label05;

        $r23 = new javax.sip.TransportNotSupportedException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad transport ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<javax.sip.TransportNotSupportedException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label05:
        $z2 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isAlive()>();

        if $z2 != 0 goto label06;

        r0.<gov.nist.javax.sip.SipStackImpl: boolean toExit> = 0;

        specialinvoke r0.<gov.nist.javax.sip.SipStackImpl: void reInitialize()>();

     label06:
        r3 = staticinvoke <gov.nist.javax.sip.ListeningPointImpl: java.lang.String makeKey(java.lang.String,int,java.lang.String)>(r1, i0, r2);

        $r7 = r0.<gov.nist.javax.sip.SipStackImpl: java.util.Hashtable listeningPoints>;

        $r8 = virtualinvoke $r7.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (gov.nist.javax.sip.ListeningPointImpl) $r8;

        if r4 == null goto label07;

        return r4;

     label07:
        r5 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r1);

        r6 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.MessageProcessor createMessageProcessor(java.net.InetAddress,int,java.lang.String)>(r5, i0, r2);

        $z3 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label08;

        $r13 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Created Message Processor: ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" port = ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transport = ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r20);

     label08:
        $r9 = new gov.nist.javax.sip.ListeningPointImpl;

        specialinvoke $r9.<gov.nist.javax.sip.ListeningPointImpl: void <init>(javax.sip.SipStack,int,java.lang.String)>(r0, i0, r2);

        r50 = $r9;

        r50.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.stack.MessageProcessor messageProcessor> = r6;

        virtualinvoke r6.<gov.nist.javax.sip.stack.MessageProcessor: void setListeningPoint(gov.nist.javax.sip.ListeningPointImpl)>(r50);

        $r11 = r0.<gov.nist.javax.sip.SipStackImpl: java.util.Hashtable listeningPoints>;

        virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r50);

        virtualinvoke r6.<gov.nist.javax.sip.stack.MessageProcessor: void start()>();

     label09:
        return r50;

     label10:
        $r38 := @caughtexception;

        r51 = $r38;

        $z7 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z7 == 0 goto label11;

        $r42 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid argument address = ");

        $r47 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" port = ");

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transport = ");

        $r49 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r42.<gov.nist.core.StackLogger: void logError(java.lang.String)>($r48);

     label11:
        $r37 = new javax.sip.InvalidArgumentException;

        $r43 = virtualinvoke r51.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r37.<javax.sip.InvalidArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r43, r51);

        throw $r37;

        catch java.io.IOException from label07 to label09 with label10;
    }

    public javax.sip.SipProvider createSipProvider(javax.sip.ListeningPoint) throws javax.sip.ObjectInUseException
    {
        gov.nist.javax.sip.SipStackImpl r0;
        javax.sip.ListeningPoint r1;
        gov.nist.javax.sip.ListeningPointImpl r2;
        gov.nist.javax.sip.SipProviderImpl r3, $r4, $r5;
        boolean $z0;
        java.util.LinkedList $r6;
        javax.sip.ObjectInUseException $r7;
        gov.nist.core.StackLogger $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;
        java.lang.NullPointerException $r13;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        r1 := @parameter0: javax.sip.ListeningPoint;

        if r1 != null goto label1;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("null listeningPoint");

        throw $r13;

     label1:
        $z0 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createSipProvider: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r12);

     label2:
        r2 = (gov.nist.javax.sip.ListeningPointImpl) r1;

        $r4 = r2.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl sipProvider>;

        if $r4 == null goto label3;

        $r7 = new javax.sip.ObjectInUseException;

        specialinvoke $r7.<javax.sip.ObjectInUseException: void <init>(java.lang.String)>("Provider already attached!");

        throw $r7;

     label3:
        $r5 = new gov.nist.javax.sip.SipProviderImpl;

        specialinvoke $r5.<gov.nist.javax.sip.SipProviderImpl: void <init>(gov.nist.javax.sip.SipStackImpl)>(r0);

        r3 = $r5;

        virtualinvoke r3.<gov.nist.javax.sip.SipProviderImpl: void setListeningPoint(javax.sip.ListeningPoint)>(r2);

        r2.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl sipProvider> = r3;

        $r6 = r0.<gov.nist.javax.sip.SipStackImpl: java.util.LinkedList sipProviders>;

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>(r3);

        return r3;
    }

    public void deleteListeningPoint(javax.sip.ListeningPoint) throws javax.sip.ObjectInUseException
    {
        gov.nist.javax.sip.SipStackImpl r0;
        javax.sip.ListeningPoint r1;
        gov.nist.javax.sip.ListeningPointImpl r2;
        java.lang.String r3;
        gov.nist.javax.sip.stack.MessageProcessor $r4;
        java.util.Hashtable $r5;
        java.lang.NullPointerException $r7;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        r1 := @parameter0: javax.sip.ListeningPoint;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("null listeningPoint arg");

        throw $r7;

     label1:
        r2 = (gov.nist.javax.sip.ListeningPointImpl) r1;

        $r4 = r2.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.stack.MessageProcessor messageProcessor>;

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void removeMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor)>($r4);

        r3 = virtualinvoke r2.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getKey()>();

        $r5 = r0.<gov.nist.javax.sip.SipStackImpl: java.util.Hashtable listeningPoints>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r3);

        return;
    }

    public void deleteSipProvider(javax.sip.SipProvider) throws javax.sip.ObjectInUseException
    {
        gov.nist.javax.sip.SipStackImpl r0;
        javax.sip.SipProvider r1;
        gov.nist.javax.sip.SipProviderImpl r2;
        javax.sip.SipListener $r3;
        java.util.LinkedList $r4, $r5;
        boolean $z1;
        javax.sip.ObjectInUseException $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        r1 := @parameter0: javax.sip.SipProvider;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("null provider arg");

        throw $r7;

     label1:
        r2 = (gov.nist.javax.sip.SipProviderImpl) r1;

        $r3 = virtualinvoke r2.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

        if $r3 == null goto label2;

        $r6 = new javax.sip.ObjectInUseException;

        specialinvoke $r6.<javax.sip.ObjectInUseException: void <init>(java.lang.String)>("SipProvider still has an associated SipListener!");

        throw $r6;

     label2:
        virtualinvoke r2.<gov.nist.javax.sip.SipProviderImpl: void removeListeningPoints()>();

        virtualinvoke r2.<gov.nist.javax.sip.SipProviderImpl: void stop()>();

        $r4 = r0.<gov.nist.javax.sip.SipStackImpl: java.util.LinkedList sipProviders>;

        virtualinvoke $r4.<java.util.LinkedList: boolean remove(java.lang.Object)>(r1);

        $r5 = r0.<gov.nist.javax.sip.SipStackImpl: java.util.LinkedList sipProviders>;

        $z1 = virtualinvoke $r5.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: void stopStack()>();

     label3:
        return;
    }

    public java.lang.String getIPAddress()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $r1 = specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String getHostAddress()>();

        return $r1;
    }

    public java.util.Iterator getListeningPoints()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        java.util.Hashtable $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $r1 = r0.<gov.nist.javax.sip.SipStackImpl: java.util.Hashtable listeningPoints>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }

    public boolean isRetransmissionFilterActive()
    {
        gov.nist.javax.sip.SipStackImpl r0;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        return 1;
    }

    public java.util.Iterator getSipProviders()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        java.util.LinkedList $r1;
        java.util.Iterator $r2;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $r1 = r0.<gov.nist.javax.sip.SipStackImpl: java.util.LinkedList sipProviders>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

        return $r2;
    }

    public java.lang.String getStackName()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $r1 = r0.<gov.nist.javax.sip.SipStackImpl: java.lang.String stackName>;

        return $r1;
    }

    protected void finalize()
    {
        gov.nist.javax.sip.SipStackImpl r0;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: void stopStack()>();

        return;
    }

    public javax.sip.ListeningPoint createListeningPoint(int, java.lang.String) throws javax.sip.TransportNotSupportedException, javax.sip.InvalidArgumentException
    {
        gov.nist.javax.sip.SipStackImpl r0;
        int i0;
        java.lang.String r1, $r2, $r3;
        javax.sip.ListeningPoint $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String stackAddress>;

        if $r2 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Stack does not have a default IP Address!");

        throw $r5;

     label1:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String stackAddress>;

        $r4 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: javax.sip.ListeningPoint createListeningPoint(java.lang.String,int,java.lang.String)>($r3, i0, r1);

        return $r4;
    }

    public void stop()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        boolean $z0;
        java.util.LinkedList $r1;
        java.util.Hashtable $r2;
        gov.nist.javax.sip.EventScanner $r3, $r4;
        gov.nist.core.StackLogger $r5;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $z0 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r5.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("stopStack -- stoppping the stack");

     label1:
        virtualinvoke r0.<gov.nist.javax.sip.SipStackImpl: void stopStack()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<gov.nist.javax.sip.SipStackImpl: java.util.LinkedList sipProviders> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<gov.nist.javax.sip.SipStackImpl: java.util.Hashtable listeningPoints> = $r2;

        $r3 = r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        if $r3 == null goto label2;

        $r4 = r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        virtualinvoke $r4.<gov.nist.javax.sip.EventScanner: void forceStop()>();

     label2:
        r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.EventScanner eventScanner> = null;

        return;
    }

    public void start() throws javax.sip.ProviderDoesNotExistException, javax.sip.SipException
    {
        gov.nist.javax.sip.SipStackImpl r0;
        gov.nist.javax.sip.EventScanner $r1, $r2;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $r1 = r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        if $r1 != null goto label1;

        $r2 = new gov.nist.javax.sip.EventScanner;

        specialinvoke $r2.<gov.nist.javax.sip.EventScanner: void <init>(gov.nist.javax.sip.SipStackImpl)>(r0);

        r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.EventScanner eventScanner> = $r2;

     label1:
        return;
    }

    public javax.sip.SipListener getSipListener()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        javax.sip.SipListener $r1;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $r1 = r0.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener sipListener>;

        return $r1;
    }

    public gov.nist.javax.sip.LogRecordFactory getLogRecordFactory()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        gov.nist.javax.sip.LogRecordFactory $r1;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.LogRecordFactory logRecordFactory>;

        return $r1;
    }

    public gov.nist.javax.sip.EventScanner getEventScanner()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        gov.nist.javax.sip.EventScanner $r1;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $r1 = r0.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.EventScanner eventScanner>;

        return $r1;
    }

    public gov.nist.javax.sip.clientauthutils.AuthenticationHelper getAuthenticationHelper(gov.nist.javax.sip.clientauthutils.AccountManager, javax.sip.header.HeaderFactory)
    {
        gov.nist.javax.sip.SipStackImpl r0;
        gov.nist.javax.sip.clientauthutils.AccountManager r1;
        javax.sip.header.HeaderFactory r2;
        gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl $r3;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        r1 := @parameter0: gov.nist.javax.sip.clientauthutils.AccountManager;

        r2 := @parameter1: javax.sip.header.HeaderFactory;

        $r3 = new gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl;

        specialinvoke $r3.<gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl: void <init>(gov.nist.javax.sip.SipStackImpl,gov.nist.javax.sip.clientauthutils.AccountManager,javax.sip.header.HeaderFactory)>(r0, r1, r2);

        return $r3;
    }

    public gov.nist.javax.sip.clientauthutils.AuthenticationHelper getSecureAuthenticationHelper(gov.nist.javax.sip.clientauthutils.SecureAccountManager, javax.sip.header.HeaderFactory)
    {
        gov.nist.javax.sip.SipStackImpl r0;
        gov.nist.javax.sip.clientauthutils.SecureAccountManager r1;
        javax.sip.header.HeaderFactory r2;
        gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl $r3;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        r1 := @parameter0: gov.nist.javax.sip.clientauthutils.SecureAccountManager;

        r2 := @parameter1: javax.sip.header.HeaderFactory;

        $r3 = new gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl;

        specialinvoke $r3.<gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl: void <init>(gov.nist.javax.sip.SipStackImpl,gov.nist.javax.sip.clientauthutils.SecureAccountManager,javax.sip.header.HeaderFactory)>(r0, r1, r2);

        return $r3;
    }

    public void setEnabledCipherSuites(java.lang.String[])
    {
        gov.nist.javax.sip.SipStackImpl r0;
        java.lang.String[] r1;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        r1 := @parameter0: java.lang.String[];

        r0.<gov.nist.javax.sip.SipStackImpl: java.lang.String[] cipherSuites> = r1;

        return;
    }

    public java.lang.String[] getEnabledCipherSuites()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        java.lang.String[] $r1;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $r1 = r0.<gov.nist.javax.sip.SipStackImpl: java.lang.String[] cipherSuites>;

        return $r1;
    }

    public void setEnabledProtocols(java.lang.String[])
    {
        gov.nist.javax.sip.SipStackImpl r0;
        java.lang.String[] r1;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        r1 := @parameter0: java.lang.String[];

        r0.<gov.nist.javax.sip.SipStackImpl: java.lang.String[] enabledProtocols> = r1;

        return;
    }

    public java.lang.String[] getEnabledProtocols()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        java.lang.String[] $r1;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $r1 = r0.<gov.nist.javax.sip.SipStackImpl: java.lang.String[] enabledProtocols>;

        return $r1;
    }

    public void setIsBackToBackUserAgent(boolean)
    {
        gov.nist.javax.sip.SipStackImpl r0;
        boolean z0;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        z0 := @parameter0: boolean;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isBackToBackUserAgent> = z0;

        return;
    }

    public boolean isBackToBackUserAgent()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isBackToBackUserAgent>;

        return $z0;
    }

    public boolean isAutomaticDialogErrorHandlingEnabled()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isAutomaticDialogErrorHandlingEnabled>;

        return $z0;
    }

    public boolean acquireSem()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.Semaphore $r3;
        boolean $z0;
        java.lang.InterruptedException $r4;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

     label1:
        $r3 = r0.<gov.nist.javax.sip.SipStackImpl: java.util.concurrent.Semaphore stackSemaphore>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>(10L, $r2);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public void releaseSem()
    {
        gov.nist.javax.sip.SipStackImpl r0;
        java.util.concurrent.Semaphore $r1;

        r0 := @this: gov.nist.javax.sip.SipStackImpl;

        $r1 = r0.<gov.nist.javax.sip.SipStackImpl: java.util.concurrent.Semaphore stackSemaphore>;

        virtualinvoke $r1.<java.util.concurrent.Semaphore: void release()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Integer $r0;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8192);

        <gov.nist.javax.sip.SipStackImpl: java.lang.Integer MAX_DATAGRAM_SIZE> = $r0;

        return;
    }
}
