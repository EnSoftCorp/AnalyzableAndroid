public class org.apache.http.protocol.HttpRequestExecutor extends java.lang.Object
{

    public void <init>()
    {
        org.apache.http.protocol.HttpRequestExecutor r0;

        r0 := @this: org.apache.http.protocol.HttpRequestExecutor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected boolean canResponseHaveBody(org.apache.http.HttpRequest, org.apache.http.HttpResponse)
    {
        org.apache.http.protocol.HttpRequestExecutor r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.HttpResponse r2;
        int i0;
        java.lang.String $r3, $r5;
        org.apache.http.RequestLine $r4;
        boolean $z0, $z1;
        org.apache.http.StatusLine $r6;

        r0 := @this: org.apache.http.protocol.HttpRequestExecutor;

        r1 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.HttpResponse;

        $r3 = "HEAD";

        $r4 = interfaceinvoke r1.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r5 = interfaceinvoke $r4.<org.apache.http.RequestLine: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r6 = interfaceinvoke r2.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        i0 = interfaceinvoke $r6.<org.apache.http.StatusLine: int getStatusCode()>();

        if i0 < 200 goto label2;

        if i0 == 204 goto label2;

        if i0 == 304 goto label2;

        if i0 == 205 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public org.apache.http.HttpResponse execute(org.apache.http.HttpRequest, org.apache.http.HttpClientConnection, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.protocol.HttpRequestExecutor r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.HttpClientConnection r2;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.HttpResponse r4;
        java.lang.IllegalArgumentException $r5, $r6, $r7;
        java.lang.RuntimeException $r8, r13;
        org.apache.http.HttpException $r9, r12;
        java.io.IOException $r10, r11;

        r0 := @this: org.apache.http.protocol.HttpRequestExecutor;

        r1 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.HttpClientConnection;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r7;

     label1:
        if r2 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Client connection may not be null");

        throw $r6;

     label2:
        if r3 != null goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r5;

     label3:
        r4 = virtualinvoke r0.<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>(r1, r2, r3);

        if r4 != null goto label4;

        r4 = virtualinvoke r0.<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>(r1, r2, r3);

     label4:
        return r4;

     label5:
        $r10 := @caughtexception;

        r11 = $r10;

        interfaceinvoke r2.<org.apache.http.HttpClientConnection: void close()>();

        throw r11;

     label6:
        $r9 := @caughtexception;

        r12 = $r9;

        interfaceinvoke r2.<org.apache.http.HttpClientConnection: void close()>();

        throw r12;

     label7:
        $r8 := @caughtexception;

        r13 = $r8;

        interfaceinvoke r2.<org.apache.http.HttpClientConnection: void close()>();

        throw r13;

        catch java.io.IOException from label3 to label4 with label5;
        catch org.apache.http.HttpException from label3 to label4 with label6;
        catch java.lang.RuntimeException from label3 to label4 with label7;
    }

    public void preProcess(org.apache.http.HttpRequest, org.apache.http.protocol.HttpProcessor, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.protocol.HttpRequestExecutor r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.protocol.HttpProcessor r2;
        org.apache.http.protocol.HttpContext r3;
        java.lang.IllegalArgumentException $r4, $r5, $r6;

        r0 := @this: org.apache.http.protocol.HttpRequestExecutor;

        r1 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.protocol.HttpProcessor;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP processor may not be null");

        throw $r5;

     label2:
        if r3 != null goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r4;

     label3:
        interfaceinvoke r2.<org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r1, r3);

        return;
    }

    protected org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest, org.apache.http.HttpClientConnection, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.protocol.HttpRequestExecutor r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.HttpClientConnection r2;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.HttpResponse r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.http.ProtocolVersion r5;
        int i0, i1;
        java.lang.Boolean $r6, $r7;
        org.apache.http.RequestLine $r8;
        org.apache.http.HttpEntityEnclosingRequest $r9, $r11;
        org.apache.http.HttpVersion $r10;
        org.apache.http.params.HttpParams $r12;
        org.apache.http.StatusLine $r13, $r16;
        java.lang.StringBuilder $r14, $r17, $r19;
        java.net.ProtocolException $r15;
        java.lang.String $r18;
        java.lang.IllegalArgumentException $r20, $r21, $r22;

        r0 := @this: org.apache.http.protocol.HttpRequestExecutor;

        r1 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.HttpClientConnection;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        if r1 != null goto label1;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r20;

     label1:
        if r2 != null goto label2;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP connection may not be null");

        throw $r22;

     label2:
        if r3 != null goto label3;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r21;

     label3:
        r4 = null;

        $r6 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        interfaceinvoke r3.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.request_sent", $r6);

        interfaceinvoke r2.<org.apache.http.HttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>(r1);

        $z1 = r1 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z1 == 0 goto label8;

        z0 = 1;

        $r8 = interfaceinvoke r1.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        r5 = interfaceinvoke $r8.<org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>();

        $r9 = (org.apache.http.HttpEntityEnclosingRequest) r1;

        $z2 = interfaceinvoke $r9.<org.apache.http.HttpEntityEnclosingRequest: boolean expectContinue()>();

        if $z2 == 0 goto label7;

        $r10 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $z3 = virtualinvoke r5.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r10);

        if $z3 != 0 goto label7;

        interfaceinvoke r2.<org.apache.http.HttpClientConnection: void flush()>();

        $r12 = interfaceinvoke r1.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        i0 = interfaceinvoke $r12.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.protocol.wait-for-continue", 2000);

        $z4 = interfaceinvoke r2.<org.apache.http.HttpClientConnection: boolean isResponseAvailable(int)>(i0);

        if $z4 == 0 goto label7;

        r4 = interfaceinvoke r2.<org.apache.http.HttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()>();

        $z5 = virtualinvoke r0.<org.apache.http.protocol.HttpRequestExecutor: boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)>(r1, r4);

        if $z5 == 0 goto label4;

        interfaceinvoke r2.<org.apache.http.HttpClientConnection: void receiveResponseEntity(org.apache.http.HttpResponse)>(r4);

     label4:
        $r13 = interfaceinvoke r4.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        i1 = interfaceinvoke $r13.<org.apache.http.StatusLine: int getStatusCode()>();

        if i1 >= 200 goto label6;

        if i1 == 100 goto label5;

        $r15 = new java.net.ProtocolException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected response: ");

        $r16 = interfaceinvoke r4.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.net.ProtocolException: void <init>(java.lang.String)>($r18);

        throw $r15;

     label5:
        r4 = null;

        goto label7;

     label6:
        z0 = 0;

     label7:
        if z0 == 0 goto label8;

        $r11 = (org.apache.http.HttpEntityEnclosingRequest) r1;

        interfaceinvoke r2.<org.apache.http.HttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>($r11);

     label8:
        interfaceinvoke r2.<org.apache.http.HttpClientConnection: void flush()>();

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r3.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.request_sent", $r7);

        return r4;
    }

    protected org.apache.http.HttpResponse doReceiveResponse(org.apache.http.HttpRequest, org.apache.http.HttpClientConnection, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.protocol.HttpRequestExecutor r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.HttpClientConnection r2;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.HttpResponse r4;
        int i0;
        boolean $z0;
        org.apache.http.StatusLine $r5;
        java.lang.IllegalArgumentException $r6, $r7, $r8;

        r0 := @this: org.apache.http.protocol.HttpRequestExecutor;

        r1 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.HttpClientConnection;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r8;

     label1:
        if r2 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP connection may not be null");

        throw $r7;

     label2:
        if r3 != null goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r6;

     label3:
        r4 = null;

        i0 = 0;

     label4:
        if r4 == null goto label5;

        if i0 >= 200 goto label7;

     label5:
        r4 = interfaceinvoke r2.<org.apache.http.HttpClientConnection: org.apache.http.HttpResponse receiveResponseHeader()>();

        $z0 = virtualinvoke r0.<org.apache.http.protocol.HttpRequestExecutor: boolean canResponseHaveBody(org.apache.http.HttpRequest,org.apache.http.HttpResponse)>(r1, r4);

        if $z0 == 0 goto label6;

        interfaceinvoke r2.<org.apache.http.HttpClientConnection: void receiveResponseEntity(org.apache.http.HttpResponse)>(r4);

     label6:
        $r5 = interfaceinvoke r4.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        i0 = interfaceinvoke $r5.<org.apache.http.StatusLine: int getStatusCode()>();

        goto label4;

     label7:
        return r4;
    }

    public void postProcess(org.apache.http.HttpResponse, org.apache.http.protocol.HttpProcessor, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.protocol.HttpRequestExecutor r0;
        org.apache.http.HttpResponse r1;
        org.apache.http.protocol.HttpProcessor r2;
        org.apache.http.protocol.HttpContext r3;
        java.lang.IllegalArgumentException $r4, $r5, $r6;

        r0 := @this: org.apache.http.protocol.HttpRequestExecutor;

        r1 := @parameter0: org.apache.http.HttpResponse;

        r2 := @parameter1: org.apache.http.protocol.HttpProcessor;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP processor may not be null");

        throw $r5;

     label2:
        if r3 != null goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null");

        throw $r4;

     label3:
        interfaceinvoke r2.<org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r1, r3);

        return;
    }
}
