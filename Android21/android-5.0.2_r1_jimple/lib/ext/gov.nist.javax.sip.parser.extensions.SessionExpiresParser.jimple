public class gov.nist.javax.sip.parser.extensions.SessionExpiresParser extends gov.nist.javax.sip.parser.ParametersParser
{

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.extensions.SessionExpiresParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.extensions.SessionExpiresParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.extensions.SessionExpiresParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.extensions.SessionExpiresParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.extensions.SessionExpiresParser r0;
        gov.nist.javax.sip.header.extensions.SessionExpires r1, $r4, r15;
        java.lang.String r2, $r10;
        int i0;
        java.lang.Throwable r3, $r11;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r5, $r6;
        java.lang.NumberFormatException $r7;
        java.text.ParseException $r8, $r12;
        javax.sip.InvalidArgumentException $r9, r14;

        r0 := @this: gov.nist.javax.sip.parser.extensions.SessionExpiresParser;

        $r4 = new gov.nist.javax.sip.header.extensions.SessionExpires;

        specialinvoke $r4.<gov.nist.javax.sip.header.extensions.SessionExpires: void <init>()>();

        r1 = $r4;

        $z0 = <gov.nist.javax.sip.parser.extensions.SessionExpiresParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.SessionExpiresParser: void dbg_enter(java.lang.String)>("parse");

     label01:
        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.SessionExpiresParser: void headerName(int)>(2133);

        $r5 = r0.<gov.nist.javax.sip.parser.extensions.SessionExpiresParser: gov.nist.core.LexerCore lexer>;

        r2 = virtualinvoke $r5.<gov.nist.core.LexerCore: java.lang.String getNextId()>();

     label02:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        virtualinvoke r1.<gov.nist.javax.sip.header.extensions.SessionExpires: void setExpires(int)>(i0);

     label03:
        goto label06;

     label04:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.SessionExpiresParser: java.text.ParseException createParseException(java.lang.String)>("bad integer format");

        throw $r8;

     label05:
        $r9 := @caughtexception;

        r14 = $r9;

        $r10 = virtualinvoke r14.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r12 = virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.SessionExpiresParser: java.text.ParseException createParseException(java.lang.String)>($r10);

        throw $r12;

     label06:
        $r6 = r0.<gov.nist.javax.sip.parser.extensions.SessionExpiresParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: void SPorHT()>();

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r1);

        r15 = r1;

     label07:
        $z1 = <gov.nist.javax.sip.parser.extensions.SessionExpiresParser: boolean debug>;

        if $z1 == 0 goto label08;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.SessionExpiresParser: void dbg_leave(java.lang.String)>("parse");

     label08:
        return r15;

     label09:
        $r11 := @caughtexception;

        r3 = $r11;

     label10:
        $z2 = <gov.nist.javax.sip.parser.extensions.SessionExpiresParser: boolean debug>;

        if $z2 == 0 goto label11;

        virtualinvoke r0.<gov.nist.javax.sip.parser.extensions.SessionExpiresParser: void dbg_leave(java.lang.String)>("parse");

     label11:
        throw r3;

        catch java.lang.NumberFormatException from label02 to label03 with label04;
        catch javax.sip.InvalidArgumentException from label02 to label03 with label05;
        catch java.lang.Throwable from label01 to label07 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public static void main(java.lang.String[]) throws java.text.ParseException
    {
        java.lang.String[] r0, r1, $r4;
        int i0, $i1, $i2;
        gov.nist.javax.sip.parser.extensions.SessionExpiresParser r2, $r5;
        gov.nist.javax.sip.header.extensions.SessionExpires r3;
        java.lang.String $r6, $r11, $r13, $r17, $r20, $r24, $r25;
        gov.nist.javax.sip.header.SIPHeader $r7;
        java.lang.StringBuilder $r8, $r10, $r12, $r15, $r16, $r18, $r19, $r21, $r23;
        java.io.PrintStream $r9, $r14, $r22;

        r0 := @parameter0: java.lang.String[];

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "Session-Expires: 30\n";

        $r4[1] = "Session-Expires: 45;refresher=uac\n";

        r1 = $r4;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label3;

        $r5 = new gov.nist.javax.sip.parser.extensions.SessionExpiresParser;

        $r6 = r1[i0];

        specialinvoke $r5.<gov.nist.javax.sip.parser.extensions.SessionExpiresParser: void <init>(java.lang.String)>($r6);

        r2 = $r5;

        $r7 = virtualinvoke r2.<gov.nist.javax.sip.parser.extensions.SessionExpiresParser: gov.nist.javax.sip.header.SIPHeader parse()>();

        r3 = (gov.nist.javax.sip.header.extensions.SessionExpires) $r7;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encoded = ");

        $r11 = virtualinvoke r3.<gov.nist.javax.sip.header.extensions.SessionExpires: java.lang.String encode()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\ntime=");

        $i2 = virtualinvoke r3.<gov.nist.javax.sip.header.extensions.SessionExpires: int getExpires()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r17);

        $r20 = virtualinvoke r3.<gov.nist.javax.sip.header.extensions.SessionExpires: java.lang.String getParameter(java.lang.String)>("refresher");

        if $r20 == null goto label2;

        $r22 = <java.lang.System: java.io.PrintStream out>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("refresher=");

        $r24 = virtualinvoke r3.<gov.nist.javax.sip.header.extensions.SessionExpires: java.lang.String getParameter(java.lang.String)>("refresher");

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r25);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }
}
