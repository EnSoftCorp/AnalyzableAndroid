public class org.apache.http.impl.entity.LaxContentLengthStrategy extends java.lang.Object implements org.apache.http.entity.ContentLengthStrategy
{

    public void <init>()
    {
        org.apache.http.impl.entity.LaxContentLengthStrategy r0;

        r0 := @this: org.apache.http.impl.entity.LaxContentLengthStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public long determineLength(org.apache.http.HttpMessage) throws org.apache.http.HttpException
    {
        org.apache.http.impl.entity.LaxContentLengthStrategy r0;
        org.apache.http.HttpMessage r1;
        org.apache.http.params.HttpParams r2;
        boolean z0, $z1, $z2, $z3, $z4;
        org.apache.http.Header r3, r4, r7;
        org.apache.http.ParseException r5, $r33;
        java.lang.String r6, $r8, $r10, $r11, $r14, $r15, $r19, $r26, $r28, $r34;
        int i0, $i1, $i3, $i4, $i5, $i6, i7, i8;
        byte $b2;
        org.apache.http.ProtocolException $r9, $r12, $r17, $r22, $r32;
        org.apache.http.HeaderElement $r13, $r16;
        java.lang.StringBuilder $r18, $r20, $r21, $r23, $r27, $r29, $r30, $r31, $r35;
        java.lang.IllegalArgumentException $r24;
        java.lang.NumberFormatException $r25;
        org.apache.http.HeaderElement[] r36;
        long l9;
        org.apache.http.Header[] r37;

        r0 := @this: org.apache.http.impl.entity.LaxContentLengthStrategy;

        r1 := @parameter0: org.apache.http.HttpMessage;

        if r1 != null goto label01;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP message may not be null");

        throw $r24;

     label01:
        r2 = interfaceinvoke r1.<org.apache.http.HttpMessage: org.apache.http.params.HttpParams getParams()>();

        z0 = interfaceinvoke r2.<org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>("http.protocol.strict-transfer-encoding");

        r3 = interfaceinvoke r1.<org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>("Transfer-Encoding");

        r4 = interfaceinvoke r1.<org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>("Content-Length");

        if r3 == null goto label12;

     label02:
        r36 = interfaceinvoke r3.<org.apache.http.Header: org.apache.http.HeaderElement[] getElements()>();

     label03:
        goto label05;

     label04:
        $r33 := @caughtexception;

        r5 = $r33;

        $r32 = new org.apache.http.ProtocolException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Transfer-Encoding header value: ");

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r34, r5);

        throw $r32;

     label05:
        if z0 == 0 goto label08;

        i7 = 0;

     label06:
        $i5 = lengthof r36;

        if i7 >= $i5 goto label08;

        $r16 = r36[i7];

        r6 = interfaceinvoke $r16.<org.apache.http.HeaderElement: java.lang.String getName()>();

        if r6 == null goto label07;

        $i6 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i6 <= 0 goto label07;

        $z4 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("chunked");

        if $z4 != 0 goto label07;

        $z3 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("identity");

        if $z3 != 0 goto label07;

        $r17 = new org.apache.http.ProtocolException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported transfer encoding: ");

        $r18 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r19);

        throw $r17;

     label07:
        i7 = i7 + 1;

        goto label06;

     label08:
        i8 = lengthof r36;

        $r11 = "identity";

        $r10 = interfaceinvoke r3.<org.apache.http.Header: java.lang.String getValue()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r10);

        if $z1 == 0 goto label09;

        return -1L;

     label09:
        if i8 <= 0 goto label10;

        $r15 = "chunked";

        $i4 = i8 - 1;

        $r13 = r36[$i4];

        $r14 = interfaceinvoke $r13.<org.apache.http.HeaderElement: java.lang.String getName()>();

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r14);

        if $z2 == 0 goto label10;

        return -2L;

     label10:
        if z0 == 0 goto label11;

        $r12 = new org.apache.http.ProtocolException;

        specialinvoke $r12.<org.apache.http.ProtocolException: void <init>(java.lang.String)>("Chunk-encoding must be the last one applied");

        throw $r12;

     label11:
        return -1L;

     label12:
        if r4 == null goto label21;

        l9 = -1L;

        r37 = interfaceinvoke r1.<org.apache.http.HttpMessage: org.apache.http.Header[] getHeaders(java.lang.String)>("Content-Length");

        if z0 == 0 goto label13;

        $i3 = lengthof r37;

        if $i3 <= 1 goto label13;

        $r9 = new org.apache.http.ProtocolException;

        specialinvoke $r9.<org.apache.http.ProtocolException: void <init>(java.lang.String)>("Multiple content length headers");

        throw $r9;

     label13:
        $i1 = lengthof r37;

        i0 = $i1 - 1;

     label14:
        if i0 < 0 goto label19;

        r7 = r37[i0];

     label15:
        $r8 = interfaceinvoke r7.<org.apache.http.Header: java.lang.String getValue()>();

        l9 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r8);

     label16:
        goto label19;

     label17:
        $r25 := @caughtexception;

        if z0 == 0 goto label18;

        $r22 = new org.apache.http.ProtocolException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid content length: ");

        $r28 = interfaceinvoke r7.<org.apache.http.Header: java.lang.String getValue()>();

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r26);

        throw $r22;

     label18:
        i0 = i0 + -1;

        goto label14;

     label19:
        $b2 = l9 cmp 0L;

        if $b2 < 0 goto label20;

        return l9;

     label20:
        return -1L;

     label21:
        return -1L;

        catch org.apache.http.ParseException from label02 to label03 with label04;
        catch java.lang.NumberFormatException from label15 to label16 with label17;
    }
}
