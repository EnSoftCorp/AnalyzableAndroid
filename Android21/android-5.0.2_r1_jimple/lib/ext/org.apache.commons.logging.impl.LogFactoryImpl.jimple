public class org.apache.commons.logging.impl.LogFactoryImpl extends org.apache.commons.logging.LogFactory
{
    private static final java.lang.String LOGGING_IMPL_LOG4J_LOGGER;
    private static final java.lang.String LOGGING_IMPL_JDK14_LOGGER;
    private static final java.lang.String LOGGING_IMPL_LUMBERJACK_LOGGER;
    private static final java.lang.String LOGGING_IMPL_SIMPLE_LOGGER;
    private static final java.lang.String PKG_IMPL;
    private static final int PKG_LEN;
    public static final java.lang.String LOG_PROPERTY;
    protected static final java.lang.String LOG_PROPERTY_OLD;
    public static final java.lang.String ALLOW_FLAWED_CONTEXT_PROPERTY;
    public static final java.lang.String ALLOW_FLAWED_DISCOVERY_PROPERTY;
    public static final java.lang.String ALLOW_FLAWED_HIERARCHY_PROPERTY;
    private static final java.lang.String[] classesToDiscover;
    private boolean useTCCL;
    private java.lang.String diagnosticPrefix;
    protected java.util.Hashtable attributes;
    protected java.util.Hashtable instances;
    private java.lang.String logClassName;
    protected java.lang.reflect.Constructor logConstructor;
    protected java.lang.Class[] logConstructorSignature;
    protected java.lang.reflect.Method logMethod;
    protected java.lang.Class[] logMethodSignature;
    private boolean allowFlawedContext;
    private boolean allowFlawedDiscovery;
    private boolean allowFlawedHierarchy;

    public void <init>()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.util.Hashtable $r1, $r2;
        java.lang.Class[] $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        specialinvoke r0.<org.apache.commons.logging.LogFactory: void <init>()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean useTCCL> = 1;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances> = $r2;

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor> = null;

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "java/lang/String";

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logConstructorSignature> = $r3;

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod> = null;

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "org/apache/commons/logging/LogFactory";

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logMethodSignature> = $r4;

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()>();

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Instance created.");

     label1:
        return;
    }

    public java.lang.Object getAttribute(java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.String[] getAttributeNames()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.util.Vector r1, $r4;
        java.util.Enumeration r2;
        java.lang.String[] r3;
        int i0, $i1, $i2;
        java.util.Hashtable $r5;
        boolean $z0;
        java.lang.Object $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r1 = $r4;

        $r5 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        r2 = virtualinvoke $r5.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r9 = (java.lang.String) $r8;

        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>($r9);

        goto label1;

     label2:
        $i1 = virtualinvoke r1.<java.util.Vector: int size()>();

        r3 = newarray (java.lang.String)[$i1];

        i0 = 0;

     label3:
        $i2 = lengthof r3;

        if i0 >= $i2 goto label4;

        $r6 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r7 = (java.lang.String) $r6;

        r3[i0] = $r7;

        i0 = i0 + 1;

        goto label3;

     label4:
        return r3;
    }

    public org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.Class r1;
        java.lang.String $r2;
        org.apache.commons.logging.Log $r3;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.String)>($r2);

        return $r3;
    }

    public org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1;
        org.apache.commons.logging.Log r2;
        java.util.Hashtable $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.commons.logging.Log) $r4;

        if r2 != null goto label1;

        r2 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log newInstance(java.lang.String)>(r1);

        $r5 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label1:
        return r2;
    }

    public void release()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Releasing all known loggers");

        $r1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances>;

        virtualinvoke $r1.<java.util.Hashtable: void clear()>();

        return;
    }

    public void removeAttribute(java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public void setAttribute(java.lang.String, java.lang.Object)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1, $r6;
        java.lang.Object r2;
        java.lang.reflect.Constructor $r3;
        java.util.Hashtable $r4, $r8;
        boolean $z0, $z1;
        java.lang.Boolean $r7;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        if $r3 == null goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("setAttribute: call too late; configuration already performed.");

     label1:
        if r2 != null goto label2;

        $r8 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1);

        goto label3;

     label2:
        $r4 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label3:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("use_tccl");

        if $z0 == 0 goto label4;

        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r6);

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean useTCCL> = $z1;

     label4:
        return;
    }

    protected static java.lang.ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.ClassLoader $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()>();

        return $r0;
    }

    protected static boolean isDiagnosticsEnabled()
    {
        boolean $z0;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        return $z0;
    }

    protected static java.lang.ClassLoader getClassLoader(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r0);

        return $r1;
    }

    private void initDiagnostics()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.Class r1;
        java.lang.ClassLoader r2;
        java.lang.String r3, $r11;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0;
        java.lang.SecurityException $r12;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r1);

     label1:
        if r2 != null goto label2;

        r3 = "BOOTLOADER";

        goto label3;

     label2:
        r3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r2);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r3 = "UNKNOWN";

     label5:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LogFactoryImpl@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String diagnosticPrefix> = $r11;

        return;

        catch java.lang.SecurityException from label1 to label3 with label4;
    }

    protected void logDiagnostic(java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1, $r3, $r6;
        boolean $z0;
        java.lang.StringBuilder $r2, $r4, $r5;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String diagnosticPrefix>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: void logRawDiagnostic(java.lang.String)>($r6);

     label1:
        return;
    }

    protected java.lang.String getLogClassName()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String $r1, $r2, $r4;
        java.lang.Class $r3;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String logClassName>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)>($r4);

     label1:
        $r2 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String logClassName>;

        return $r2;
    }

    protected java.lang.reflect.Constructor getLogConstructor() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.reflect.Constructor $r1, $r2;
        java.lang.Class $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)>($r4);

     label1:
        $r2 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        return $r2;
    }

    protected boolean isJdk13LumberjackAvailable()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean isLogLibraryAvailable(java.lang.String,java.lang.String)>("Jdk13Lumberjack", "org.apache.commons.logging.impl.Jdk13LumberjackLogger");

        return $z0;
    }

    protected boolean isJdk14Available()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean isLogLibraryAvailable(java.lang.String,java.lang.String)>("Jdk14", "org.apache.commons.logging.impl.Jdk14Logger");

        return $z0;
    }

    protected boolean isLog4JAvailable()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean $z0;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean isLogLibraryAvailable(java.lang.String,java.lang.String)>("Log4J", "org.apache.commons.logging.impl.Log4JLogger");

        return $z0;
    }

    protected org.apache.commons.logging.Log newInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1;
        java.lang.Object[] r2, $r5, $r9, r18;
        java.lang.Throwable r3, $r11, r21;
        java.lang.reflect.Constructor $r4, $r6;
        java.lang.Object $r7;
        java.lang.reflect.Method $r8, $r10;
        org.apache.commons.logging.LogConfigurationException $r12, $r14, $r15, $r16, r19;
        java.lang.reflect.InvocationTargetException $r13, r20;
        org.apache.commons.logging.Log r17;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        if $r4 != null goto label2;

        r17 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)>(r1);

        goto label3;

     label2:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r1;

        r2 = $r5;

        $r6 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        $r7 = virtualinvoke $r6.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r2);

        r17 = (org.apache.commons.logging.Log) $r7;

     label3:
        $r8 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod>;

        if $r8 == null goto label4;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r0;

        r18 = $r9;

        $r10 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod>;

        virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r17, r18);

     label4:
        return r17;

     label5:
        $r14 := @caughtexception;

        r19 = $r14;

        throw r19;

     label6:
        $r13 := @caughtexception;

        r20 = $r13;

        r3 = virtualinvoke r20.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        if r3 == null goto label7;

        $r16 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r16.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>(r3);

        throw $r16;

     label7:
        $r15 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r15.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>(r20);

        throw $r15;

     label8:
        $r11 := @caughtexception;

        r21 = $r11;

        $r12 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r12.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>(r21);

        throw $r12;

        catch org.apache.commons.logging.LogConfigurationException from label1 to label4 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label4 with label6;
        catch java.lang.Throwable from label1 to label4 with label8;
    }

    private boolean isLogLibraryAvailable(java.lang.String, java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1, r2, $r5, $r10, $r14, $r21, $r25;
        org.apache.commons.logging.Log r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r26;
        org.apache.commons.logging.LogConfigurationException $r20;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking for \'");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r21);

     label1:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        r3 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>(r2, $r5, 0);

        if r3 != null goto label3;

        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label2;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Did not find \'");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r14);

     label2:
        return 0;

     label3:
        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r10);

     label4:
        return 1;

     label5:
        $r20 := @caughtexception;

        $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label6;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Logging system \'");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is available but not useable.");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r25);

     label6:
        return 0;

        catch org.apache.commons.logging.LogConfigurationException from label1 to label2 with label5;
        catch org.apache.commons.logging.LogConfigurationException from label3 to label4 with label5;
    }

    private java.lang.String getConfigurationValue(java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1, r3, $r7, $r10, $r18, $r21, $r23, $r30, $r33, $r35;
        java.lang.Object r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r31, $r32, $r36, $r37;
        java.lang.SecurityException $r34;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Trying to get configuration for item ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r33);

     label01:
        r2 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>(r1);

        if r2 == null goto label03;

        $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label02;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Found LogFactory attribute [");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r30);

     label02:
        $r23 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        return $r23;

     label03:
        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label04;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] No LogFactory attribute found for ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r21);

     label04:
        r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r1);

        if r3 == null goto label06;

        $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label05;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Found system property [");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r18);

     label05:
        return r3;

     label06:
        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label07;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] No system property found for property ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r10);

     label07:
        goto label09;

     label08:
        $r34 := @caughtexception;

        $z6 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z6 == 0 goto label09;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Security prevented reading system property ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r35 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r35);

     label09:
        $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label10;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] No configuration defined for item ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r7);

     label10:
        return null;

        catch java.lang.SecurityException from label04 to label05 with label08;
        catch java.lang.SecurityException from label06 to label07 with label08;
    }

    private boolean getBooleanConfiguration(java.lang.String, boolean)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1, r2;
        boolean z0, $z1;
        java.lang.Boolean $r3;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)>(r1);

        if r2 != null goto label1;

        return z0;

     label1:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r2);

        $z1 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    private void initConfiguration()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedContext", 1);

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedContext> = $z0;

        $z1 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedDiscovery", 1);

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedDiscovery> = $z1;

        $z2 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedHierarchy", 1);

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedHierarchy> = $z2;

        return;
    }

    private org.apache.commons.logging.Log discoverLogImplementation(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1, r3, $r8, $r14, $r17;
        org.apache.commons.logging.Log r2, r19;
        java.lang.StringBuffer r4, $r10;
        boolean $z0, $z1, $z2;
        java.lang.String[] $r5, $r7;
        int $i0, i1;
        org.apache.commons.logging.LogConfigurationException $r6, $r11;
        java.lang.StringBuilder $r13, $r15, $r16, $r18;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Discovering a Log implementation...");

     label1:
        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void initConfiguration()>();

        r2 = null;

        r3 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()>();

        if r3 == null goto label5;

        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to load user-specified log class \'");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'...");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r17);

     label2:
        r19 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>(r3, r1, 1);

        if r19 != null goto label4;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>(java.lang.String)>("User-specified log class \'");

        r4 = $r10;

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot be found or is not useable.");

        if r3 == null goto label3;

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>(r4, r3, "org.apache.commons.logging.impl.Log4JLogger");

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>(r4, r3, "org.apache.commons.logging.impl.Jdk14Logger");

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>(r4, r3, "org.apache.commons.logging.impl.Jdk13LumberjackLogger");

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>(r4, r3, "org.apache.commons.logging.impl.SimpleLog");

     label3:
        $r11 = new org.apache.commons.logging.LogConfigurationException;

        $r14 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label4:
        return r19;

     label5:
        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label6;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("No user-specified Log implementation; performing discovery using the standard supported logging implementations...");

     label6:
        i1 = 0;

     label7:
        $r5 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] classesToDiscover>;

        $i0 = lengthof $r5;

        if i1 >= $i0 goto label8;

        if r2 != null goto label8;

        $r7 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] classesToDiscover>;

        $r8 = $r7[i1];

        r2 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>($r8, r1, 1);

        i1 = i1 + 1;

        goto label7;

     label8:
        if r2 != null goto label9;

        $r6 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r6.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("No suitable Log implementation");

        throw $r6;

     label9:
        return r2;
    }

    private void informUponSimilarName(java.lang.StringBuffer, java.lang.String, java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.StringBuffer r1;
        java.lang.String r2, r3;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = <org.apache.commons.logging.impl.LogFactoryImpl: int PKG_LEN>;

        $i1 = $i0 + 5;

        $z1 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, r3, 0, $i1);

        if $z1 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Did you mean \'");

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'?");

     label2:
        return;
    }

    private java.lang.String findUserSpecifiedLogClassName()
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1, $r9, $r11, $r13, $r15;
        java.lang.SecurityException r2, $r5, $r10, r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r3, $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r12, $r14, $r16;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from attribute \'org.apache.commons.logging.Log\'");

     label01:
        $r3 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>("org.apache.commons.logging.Log");

        r1 = (java.lang.String) $r3;

        if r1 != null goto label03;

        $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label02;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from attribute \'org.apache.commons.logging.log\'");

     label02:
        $r4 = virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>("org.apache.commons.logging.log");

        r1 = (java.lang.String) $r4;

     label03:
        if r1 != null goto label07;

        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label04;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from system property \'org.apache.commons.logging.Log\'");

     label04:
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.Log");

     label05:
        goto label07;

     label06:
        $r5 := @caughtexception;

        r2 = $r5;

        $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label07;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No access allowed to system property \'org.apache.commons.logging.Log\' - ");

        $r9 = virtualinvoke r2.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r11);

     label07:
        if r1 != null goto label11;

        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label08;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from system property \'org.apache.commons.logging.log\'");

     label08:
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.log");

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

        r17 = $r10;

        $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No access allowed to system property \'org.apache.commons.logging.log\' - ");

        $r13 = virtualinvoke r17.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r15);

     label11:
        if r1 == null goto label12;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

     label12:
        return r1;

        catch java.lang.SecurityException from label04 to label05 with label06;
        catch java.lang.SecurityException from label08 to label09 with label10;
    }

    private org.apache.commons.logging.Log createLogFromClass(java.lang.String, java.lang.String, boolean) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1, r2, r9, r10, $r18, $r19, $r29, $r31, $r36, $r38, $r42, $r50, $r54, $r67, $r68, $r72, $r80, $r85, $r87, $r88, $r93, $r101, $r103, $r105, $r111, $r112, $r122, $r124, $r127, $r130, $r132, r135, r138, r140;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object[] r3, $r12;
        org.apache.commons.logging.Log r4;
        java.lang.reflect.Constructor r5;
        java.lang.Class r6, r133;
        java.lang.ClassLoader r7, $r34;
        java.net.URL r8;
        java.lang.ClassNotFoundException r11, $r71, $r83, r134;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r23, $r24, $r25, $r26, $r27, $r28, $r30, $r32, $r33, $r35, $r37, $r39, $r40, $r41, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r51, $r52, $r53, $r55, $r56, $r57, $r58, $r59, $r61, $r62, $r63, $r64, $r65, $r66, $r69, $r70, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r81, $r82, $r84, $r86, $r89, $r90, $r91, $r92, $r94, $r95, $r96, $r97, $r98, $r102, $r104, $r106, $r107, $r108, $r109, $r110, $r113, $r114, $r115, $r116, $r117, $r118, $r119, $r120, $r121, $r125, $r128, $r129, $r131;
        java.lang.Class[] $r20, $r22;
        java.lang.reflect.Method $r21;
        java.lang.Throwable $r60, $r100, r142;
        java.lang.ExceptionInInitializerError $r99, r139;
        org.apache.commons.logging.LogConfigurationException $r123, r141;
        java.lang.NoClassDefFoundError $r126, r137;
        java.lang.Object r136;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label01;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to instantiate \'");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r67);

     label01:
        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r2;

        r3 = $r12;

        r4 = null;

        r5 = null;

        r6 = null;

        r7 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()>();

     label02:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to load \'");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from classloader ");

        $r18 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r7);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r19);

     label03:
        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label07;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r41 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        r9 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        if r7 == null goto label04;

        r8 = virtualinvoke r7.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r9);

        goto label05;

     label04:
        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        r8 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>($r42);

     label05:
        if r8 != null goto label06;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' [");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r53 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] cannot be found.");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r54);

        goto label07;

     label06:
        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was found at \'");

        $r52 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r51 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r50);

     label07:
        r133 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 1, r7);

     label08:
        goto label14;

     label09:
        $r71 := @caughtexception;

        r134 = $r71;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r81 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r80 = virtualinvoke r134.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r80);

        r10 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The log adapter \'");

        $r79 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r78 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not available via classloader ");

        $r88 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r7);

        $r89 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r88);

        $r86 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r87 = virtualinvoke r10.<java.lang.String: java.lang.String trim()>();

        $r84 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r87);

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r85);

     label10:
        r133 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

     label11:
        goto label14;

     label12:
        $r83 := @caughtexception;

        r11 = $r83;

        $r95 = new java.lang.StringBuilder;

        specialinvoke $r95.<java.lang.StringBuilder: void <init>()>();

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r93 = virtualinvoke r11.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        $r94 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r93);

        r135 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.String toString()>();

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r90 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The log adapter \'");

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r104 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not available via the LogFactoryImpl class classloader: ");

        $r103 = virtualinvoke r135.<java.lang.String: java.lang.String trim()>();

        $r102 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r103);

        $r101 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r101);

     label13:
        goto label24;

     label14:
        $r20 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logConstructorSignature>;

        r5 = virtualinvoke r133.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r20);

        r136 = virtualinvoke r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r3);

        $z3 = r136 instanceof org.apache.commons.logging.Log;

        if $z3 == 0 goto label16;

        r6 = r133;

        r4 = (org.apache.commons.logging.Log) r136;

     label15:
        goto label24;

     label16:
        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)>(r7, r133);

     label17:
        goto label22;

     label18:
        $r126 := @caughtexception;

        r137 = $r126;

        $r125 = new java.lang.StringBuilder;

        specialinvoke $r125.<java.lang.StringBuilder: void <init>()>();

        $r113 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r112 = virtualinvoke r137.<java.lang.NoClassDefFoundError: java.lang.String getMessage()>();

        $r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r112);

        r138 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.String toString()>();

        $r116 = new java.lang.StringBuilder;

        specialinvoke $r116.<java.lang.StringBuilder: void <init>()>();

        $r115 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The log adapter \'");

        $r118 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r117 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is missing dependencies when loaded via classloader ");

        $r127 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r7);

        $r128 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r127);

        $r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r130 = virtualinvoke r138.<java.lang.String: java.lang.String trim()>();

        $r131 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r130);

        $r132 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r132);

        goto label24;

     label19:
        $r99 := @caughtexception;

        r139 = $r99;

        $r98 = new java.lang.StringBuilder;

        specialinvoke $r98.<java.lang.StringBuilder: void <init>()>();

        $r97 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r111 = virtualinvoke r139.<java.lang.ExceptionInInitializerError: java.lang.String getMessage()>();

        $r110 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r111);

        r140 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.String toString()>();

        $r109 = new java.lang.StringBuilder;

        specialinvoke $r109.<java.lang.StringBuilder: void <init>()>();

        $r108 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The log adapter \'");

        $r107 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r106 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is unable to initialize itself when loaded via classloader ");

        $r105 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r7);

        $r120 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r105);

        $r119 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r122 = virtualinvoke r140.<java.lang.String: java.lang.String trim()>();

        $r121 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r122);

        $r124 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r124);

        goto label24;

     label20:
        $r123 := @caughtexception;

        r141 = $r123;

        throw r141;

     label21:
        $r100 := @caughtexception;

        r142 = $r100;

        specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)>(r1, r7, r142);

     label22:
        if r7 != null goto label23;

        goto label24;

     label23:
        r7 = virtualinvoke r7.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label02;

     label24:
        if r4 == null goto label29;

        if z0 == 0 goto label29;

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String logClassName> = r1;

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor> = r5;

     label25:
        $r22 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logMethodSignature>;

        $r21 = virtualinvoke r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setLogFactory", $r22);

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod> = $r21;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found method setLogFactory(LogFactory) in \'");

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r29);

     label26:
        goto label28;

     label27:
        $r60 := @caughtexception;

        r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod> = null;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[INFO] \'");

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r73 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from classloader ");

        $r72 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r7);

        $r75 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        $r74 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not declare optional method ");

        $r69 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setLogFactory(LogFactory)");

        $r68 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r68);

     label28:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Log adapter \'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from classloader ");

        $r34 = virtualinvoke r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r31 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>($r34);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been selected for use.");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r38);

     label29:
        return r4;

        catch java.lang.ClassNotFoundException from label07 to label08 with label09;
        catch java.lang.ClassNotFoundException from label10 to label11 with label12;
        catch java.lang.NoClassDefFoundError from label03 to label13 with label18;
        catch java.lang.NoClassDefFoundError from label14 to label15 with label18;
        catch java.lang.NoClassDefFoundError from label16 to label17 with label18;
        catch java.lang.ExceptionInInitializerError from label03 to label13 with label19;
        catch java.lang.ExceptionInInitializerError from label14 to label15 with label19;
        catch java.lang.ExceptionInInitializerError from label16 to label17 with label19;
        catch org.apache.commons.logging.LogConfigurationException from label03 to label13 with label20;
        catch org.apache.commons.logging.LogConfigurationException from label14 to label15 with label20;
        catch org.apache.commons.logging.LogConfigurationException from label16 to label17 with label20;
        catch java.lang.Throwable from label03 to label13 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label25 to label26 with label27;
    }

    private java.lang.ClassLoader getBaseClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.ClassLoader r1, r2, r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.commons.logging.LogConfigurationException $r4, $r5;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "org/apache/commons/logging/impl/LogFactoryImpl");

        $z0 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean useTCCL>;

        if $z0 != 0 goto label1;

        return r1;

     label1:
        r2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getContextClassLoader()>();

        r3 = specialinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getLowestClassLoader(java.lang.ClassLoader,java.lang.ClassLoader)>(r2, r1);

        if r3 != null goto label4;

        $z3 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedContext>;

        if $z3 == 0 goto label3;

        $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label2;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("[WARNING] the context classloader is not part of a parent-child relationship with the classloader that loaded LogFactoryImpl.");

     label2:
        return r2;

     label3:
        $r5 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r5.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("Bad classloader hierarchy; LogFactoryImpl was loaded via a classloader that is not related to the current context classloader.");

        throw $r5;

     label4:
        if r3 == r2 goto label6;

        $z1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedContext>;

        if $z1 == 0 goto label5;

        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label6;

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Warning: the context classloader is an ancestor of the classloader that loaded LogFactoryImpl; it should be the same or a descendant. The application using commons-logging should ensure the context classloader is used correctly.");

        goto label6;

     label5:
        $r4 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r4.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("Bad classloader hierarchy; LogFactoryImpl was loaded via a classloader that is not related to the current context classloader.");

        throw $r4;

     label6:
        return r3;
    }

    private java.lang.ClassLoader getLowestClassLoader(java.lang.ClassLoader, java.lang.ClassLoader)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.ClassLoader r1, r2, r3, r4;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.lang.ClassLoader;

        if r1 != null goto label1;

        return r2;

     label1:
        if r2 != null goto label2;

        return r1;

     label2:
        r3 = r1;

     label3:
        if r3 == null goto label5;

        if r3 != r2 goto label4;

        return r1;

     label4:
        r3 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label3;

     label5:
        r4 = r2;

     label6:
        if r4 == null goto label8;

        if r4 != r1 goto label7;

        return r2;

     label7:
        r4 = virtualinvoke r4.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label6;

     label8:
        return null;
    }

    private void handleFlawedDiscovery(java.lang.String, java.lang.ClassLoader, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.String r1, $r10, $r13, $r14;
        java.lang.ClassLoader r2;
        java.lang.Throwable r3;
        boolean $z0, $z1;
        org.apache.commons.logging.LogConfigurationException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r11, $r12, $r15;
        java.lang.Class $r9;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.ClassLoader;

        r3 := @parameter2: java.lang.Throwable;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not instantiate Log \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' -- ");

        $r9 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r13 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r14);

     label1:
        $z1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedDiscovery>;

        if $z1 != 0 goto label2;

        $r4 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r4.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>(r3);

        throw $r4;

     label2:
        return;
    }

    private void handleFlawedHierarchy(java.lang.ClassLoader, java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl r0;
        java.lang.ClassLoader r1, r60;
        java.lang.Class r2, $r5, $r22, $r35, $r56;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.String r3, $r8, $r12, $r16, $r18, $r20, $r26, $r27, $r36, $r37, $r38, $r40, $r44, $r48, $r55, $r57, $r59;
        java.lang.Class[] r4;
        int i0, $i1;
        java.lang.StringBuffer $r6, $r11, $r23, $r31, r62, r63, r64, r65;
        org.apache.commons.logging.LogConfigurationException $r19, $r39;
        java.lang.StringBuilder $r41, $r42, $r43, $r45, $r46, $r47, $r49, $r50, $r52, $r53, $r54, $r58;
        java.lang.Throwable $r51;

        r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.lang.Class;

        z0 = 0;

        $r5 = class "org/apache/commons/logging/Log";

        r3 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        r4 = virtualinvoke r2.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = 0;

     label01:
        $i1 = lengthof r4;

        if i0 >= $i1 goto label03;

        $r56 = r4[i0];

        $r57 = virtualinvoke $r56.<java.lang.Class: java.lang.String getName()>();

        $z8 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r57);

        if $z8 == 0 goto label02;

        z0 = 1;

        goto label03;

     label02:
        i0 = i0 + 1;

        goto label01;

     label03:
        if z0 == 0 goto label10;

        $z4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z4 == 0 goto label07;

     label04:
        r60 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "org/apache/commons/logging/Log");

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

        $r40 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r46 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was found in classloader ");

        $r44 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r1);

        $r43 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r50 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". It is bound to a Log interface which is not");

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" the one loaded from classloader ");

        $r48 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>(r60);

        $r47 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r55 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r55);

     label05:
        goto label07;

     label06:
        $r51 := @caughtexception;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while trying to output diagnostics about bad class \'");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r58 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r59);

     label07:
        $z6 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedHierarchy>;

        if $z6 != 0 goto label09;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        r62 = $r31;

        virtualinvoke r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Terminating logging for this context ");

        virtualinvoke r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("due to bad log hierarchy. ");

        virtualinvoke r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You have more than one version of \'");

        $r35 = class "org/apache/commons/logging/Log";

        $r36 = virtualinvoke $r35.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        virtualinvoke r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' visible.");

        $z7 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z7 == 0 goto label08;

        $r37 = virtualinvoke r62.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r37);

     label08:
        $r39 = new org.apache.commons.logging.LogConfigurationException;

        $r38 = virtualinvoke r62.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r39.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r38);

        throw $r39;

     label09:
        $z5 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z5 == 0 goto label13;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        r63 = $r23;

        virtualinvoke r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: bad log hierarchy. ");

        virtualinvoke r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You have more than one version of \'");

        $r22 = class "org/apache/commons/logging/Log";

        $r27 = virtualinvoke $r22.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        virtualinvoke r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' visible.");

        $r26 = virtualinvoke r63.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r26);

        goto label13;

     label10:
        $z1 = r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedDiscovery>;

        if $z1 != 0 goto label12;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        r64 = $r11;

        virtualinvoke r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Terminating logging for this context. ");

        virtualinvoke r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Log class \'");

        $r16 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        virtualinvoke r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not implement the Log interface.");

        $z3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z3 == 0 goto label11;

        $r20 = virtualinvoke r64.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r20);

     label11:
        $r19 = new org.apache.commons.logging.LogConfigurationException;

        $r18 = virtualinvoke r64.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r18);

        throw $r19;

     label12:
        $z2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z2 == 0 goto label13;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        r65 = $r6;

        virtualinvoke r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[WARNING] Log class \'");

        $r8 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not implement the Log interface.");

        $r12 = virtualinvoke r65.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r12);

     label13:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
    }

    static void <clinit>()
    {
        java.lang.String $r0;
        int $i0;
        java.lang.String[] $r1;

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String ALLOW_FLAWED_HIERARCHY_PROPERTY> = "org.apache.commons.logging.Log.allowFlawedHierarchy";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String ALLOW_FLAWED_DISCOVERY_PROPERTY> = "org.apache.commons.logging.Log.allowFlawedDiscovery";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String ALLOW_FLAWED_CONTEXT_PROPERTY> = "org.apache.commons.logging.Log.allowFlawedContext";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOG_PROPERTY_OLD> = "org.apache.commons.logging.log";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOG_PROPERTY> = "org.apache.commons.logging.Log";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String PKG_IMPL> = "org.apache.commons.logging.impl.";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_SIMPLE_LOGGER> = "org.apache.commons.logging.impl.SimpleLog";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_LUMBERJACK_LOGGER> = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_JDK14_LOGGER> = "org.apache.commons.logging.impl.Jdk14Logger";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_LOG4J_LOGGER> = "org.apache.commons.logging.impl.Log4JLogger";

        $r0 = "org.apache.commons.logging.impl.";

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        <org.apache.commons.logging.impl.LogFactoryImpl: int PKG_LEN> = $i0;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "org.apache.commons.logging.impl.Log4JLogger";

        $r1[1] = "org.apache.commons.logging.impl.Jdk14Logger";

        $r1[2] = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";

        $r1[3] = "org.apache.commons.logging.impl.SimpleLog";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] classesToDiscover> = $r1;

        return;
    }
}
