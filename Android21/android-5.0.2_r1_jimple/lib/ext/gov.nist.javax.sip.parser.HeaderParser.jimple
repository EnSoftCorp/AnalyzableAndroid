public class gov.nist.javax.sip.parser.HeaderParser extends gov.nist.javax.sip.parser.Parser
{

    protected int wkday() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        java.lang.String r1, r2, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        byte b0, b1, b2, b3, b4, b5, b6;
        java.lang.Throwable r3, $r12;
        gov.nist.core.LexerCore $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.text.ParseException $r13;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_enter(java.lang.String)>("wkday");

     label01:
        $r4 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        r1 = virtualinvoke $r4.<gov.nist.core.LexerCore: java.lang.String ttoken()>();

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = "Mon";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z0 == 0 goto label03;

        b0 = 2;

     label02:
        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        return b0;

     label03:
        $r6 = "Tue";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z1 == 0 goto label05;

        b1 = 3;

     label04:
        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        return b1;

     label05:
        $r7 = "Wed";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z2 == 0 goto label07;

        b2 = 4;

     label06:
        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        return b2;

     label07:
        $r8 = "Thu";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z3 == 0 goto label09;

        b3 = 5;

     label08:
        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        return b3;

     label09:
        $r9 = "Fri";

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z4 == 0 goto label11;

        b4 = 6;

     label10:
        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        return b4;

     label11:
        $r10 = "Sat";

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z5 == 0 goto label13;

        b5 = 7;

     label12:
        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        return b5;

     label13:
        $r11 = "Sun";

        $z6 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z6 == 0 goto label15;

        b6 = 1;

     label14:
        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        return b6;

     label15:
        $r13 = virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: java.text.ParseException createParseException(java.lang.String)>("bad wkday");

        throw $r13;

     label16:
        $r12 := @caughtexception;

        r3 = $r12;

     label17:
        virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void dbg_leave(java.lang.String)>("wkday");

        throw r3;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label15 to label17 with label16;
    }

    protected java.util.Calendar date() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        java.util.Calendar r1;
        java.lang.String r2, r3, r4, $r11;
        int i0, i1;
        java.util.TimeZone $r5;
        gov.nist.core.LexerCore $r6, $r8, $r10, $r13, $r15;
        java.text.ParseException $r7, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.Exception $r14;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

     label01:
        $r5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r5);

        $r6 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        r2 = virtualinvoke $r6.<gov.nist.core.LexerCore: java.lang.String number()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        if i0 <= 0 goto label02;

        if i0 <= 31 goto label03;

     label02:
        $r7 = virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: java.text.ParseException createParseException(java.lang.String)>("Bad day ");

        throw $r7;

     label03:
        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(5, i0);

        $r8 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(32);

        $r10 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r11 = virtualinvoke $r10.<gov.nist.core.LexerCore: java.lang.String ttoken()>();

        r3 = virtualinvoke $r11.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("jan");

        if $z1 == 0 goto label04;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 0);

        goto label15;

     label04:
        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("feb");

        if $z0 == 0 goto label05;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 1);

        goto label15;

     label05:
        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("mar");

        if $z3 == 0 goto label06;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 2);

        goto label15;

     label06:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("apr");

        if $z2 == 0 goto label07;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 3);

        goto label15;

     label07:
        $z5 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("may");

        if $z5 == 0 goto label08;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 4);

        goto label15;

     label08:
        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("jun");

        if $z4 == 0 goto label09;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 5);

        goto label15;

     label09:
        $z7 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("jul");

        if $z7 == 0 goto label10;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 6);

        goto label15;

     label10:
        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("aug");

        if $z6 == 0 goto label11;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 7);

        goto label15;

     label11:
        $z9 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("sep");

        if $z9 == 0 goto label12;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 8);

        goto label15;

     label12:
        $z8 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("oct");

        if $z8 == 0 goto label13;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 9);

        goto label15;

     label13:
        $z11 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("nov");

        if $z11 == 0 goto label14;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 10);

        goto label15;

     label14:
        $z10 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("dec");

        if $z10 == 0 goto label15;

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(2, 11);

     label15:
        $r13 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r13.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(32);

        $r15 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        r4 = virtualinvoke $r15.<gov.nist.core.LexerCore: java.lang.String number()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r4);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(1, i1);

     label16:
        return r1;

     label17:
        $r14 := @caughtexception;

        $r16 = virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: java.text.ParseException createParseException(java.lang.String)>("bad date field");

        throw $r16;

        catch java.lang.Exception from label01 to label16 with label17;
    }

    protected void time(java.util.Calendar) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        java.util.Calendar r1;
        java.lang.String r2, r12, r13;
        int i0, i1, i2;
        gov.nist.core.LexerCore $r3, $r4, $r6, $r7, $r9;
        java.lang.Exception $r10;
        java.text.ParseException $r11;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        r1 := @parameter0: java.util.Calendar;

     label1:
        $r3 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        r2 = virtualinvoke $r3.<gov.nist.core.LexerCore: java.lang.String number()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(11, i0);

        $r4 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r4.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r6 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        r12 = virtualinvoke $r6.<gov.nist.core.LexerCore: java.lang.String number()>();

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r12);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(12, i1);

        $r7 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r9 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        r13 = virtualinvoke $r9.<gov.nist.core.LexerCore: java.lang.String number()>();

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r13);

        virtualinvoke r1.<java.util.Calendar: void set(int,int)>(13, i2);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: java.text.ParseException createParseException(java.lang.String)>("error processing time ");

        throw $r11;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        java.lang.String r1;
        gov.nist.javax.sip.parser.Lexer $r2;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.Parser: void <init>()>();

        $r2 = new gov.nist.javax.sip.parser.Lexer;

        specialinvoke $r2.<gov.nist.javax.sip.parser.Lexer: void <init>(java.lang.String,java.lang.String)>("command_keywordLexer", r1);

        r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer> = $r2;

        return;
    }

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        gov.nist.javax.sip.parser.Lexer r1;
        gov.nist.core.LexerCore $r2;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.Parser: void <init>()>();

        r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer> = r1;

        $r2 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r2.<gov.nist.core.LexerCore: void selectLexer(java.lang.String)>("command_keywordLexer");

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        java.lang.String r1, r2, $r7;
        gov.nist.javax.sip.header.ExtensionHeaderImpl r3, $r8;
        gov.nist.core.LexerCore $r4, $r5, $r6;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        $r4 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        r1 = virtualinvoke $r4.<gov.nist.core.LexerCore: java.lang.String getNextToken(char)>(58);

        $r5 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r5.<gov.nist.core.LexerCore: void consume(int)>(1);

        $r6 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        $r7 = virtualinvoke $r6.<gov.nist.core.LexerCore: java.lang.String getLine()>();

        r2 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        $r8 = new gov.nist.javax.sip.header.ExtensionHeaderImpl;

        specialinvoke $r8.<gov.nist.javax.sip.header.ExtensionHeaderImpl: void <init>(java.lang.String)>(r1);

        r3 = $r8;

        virtualinvoke r3.<gov.nist.javax.sip.header.ExtensionHeaderImpl: void setValue(java.lang.String)>(r2);

        return r3;
    }

    protected void headerName(int) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.HeaderParser r0;
        int i0;
        gov.nist.core.LexerCore $r1, $r3, $r4, $r6;

        r0 := @this: gov.nist.javax.sip.parser.HeaderParser;

        i0 := @parameter0: int;

        $r1 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r1.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(i0);

        $r3 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: void SPorHT()>();

        $r4 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r4.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r6 = r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: void SPorHT()>();

        return;
    }
}
