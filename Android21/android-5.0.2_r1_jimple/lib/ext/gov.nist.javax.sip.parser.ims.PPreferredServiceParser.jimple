public class gov.nist.javax.sip.parser.ims.PPreferredServiceParser extends gov.nist.javax.sip.parser.HeaderParser implements gov.nist.javax.sip.parser.TokenTypes
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ims.PPreferredServiceParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PPreferredServiceParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ims.PPreferredServiceParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PPreferredServiceParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PPreferredServiceParser r0;
        gov.nist.javax.sip.header.ims.PPreferredService r1, $r12, r29;
        java.lang.String r2, r3, $r16, $r19, r26;
        javax.sip.InvalidArgumentException r4, $r15, $r18, $r21, $r22, $r23, $r24, r27, r28;
        java.lang.Throwable r5, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        gov.nist.core.LexerCore $r6, $r8, $r9, $r11, $r13;
        java.lang.String[] $r17, $r20;

        r0 := @this: gov.nist.javax.sip.parser.ims.PPreferredServiceParser;

        $z0 = <gov.nist.javax.sip.parser.ims.PPreferredServiceParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: void dbg_enter(java.lang.String)>("PPreferredServiceParser.parse");

     label01:
        $r6 = r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r6.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(2144);

        $r8 = r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: void SPorHT()>();

        $r9 = r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r9.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(58);

        $r11 = r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r11.<gov.nist.core.LexerCore: void SPorHT()>();

        $r12 = new gov.nist.javax.sip.header.ims.PPreferredService;

        specialinvoke $r12.<gov.nist.javax.sip.header.ims.PPreferredService: void <init>()>();

        r1 = $r12;

        $r13 = r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: gov.nist.core.LexerCore lexer>;

        r2 = virtualinvoke $r13.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $z1 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("urn:urn-7:");

        if $z1 == 0 goto label13;

        $z2 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("3gpp-service");

        if $z2 == 0 goto label06;

        $r20 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("3gpp-service.");

        r3 = $r20[1];

        $r19 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

        $z6 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z6 == 0 goto label04;

     label02:
        $r21 = new javax.sip.InvalidArgumentException;

        specialinvoke $r21.<javax.sip.InvalidArgumentException: void <init>(java.lang.String)>("URN should atleast have one sub-service");

        throw $r21;

     label03:
        $r24 := @caughtexception;

        r4 = $r24;

        virtualinvoke r4.<javax.sip.InvalidArgumentException: void printStackTrace()>();

        goto label05;

     label04:
        virtualinvoke r1.<gov.nist.javax.sip.header.ims.PPreferredService: void setSubserviceIdentifiers(java.lang.String)>(r3);

     label05:
        goto label13;

     label06:
        $z4 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("3gpp-application");

        if $z4 == 0 goto label11;

        $r17 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("3gpp-application");

        r26 = $r17[1];

        $r16 = virtualinvoke r26.<java.lang.String: java.lang.String trim()>();

        $z5 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z5 == 0 goto label09;

     label07:
        $r18 = new javax.sip.InvalidArgumentException;

        specialinvoke $r18.<javax.sip.InvalidArgumentException: void <init>(java.lang.String)>("URN should atleast have one sub-application");

        throw $r18;

     label08:
        $r23 := @caughtexception;

        r27 = $r23;

        virtualinvoke r27.<javax.sip.InvalidArgumentException: void printStackTrace()>();

        goto label10;

     label09:
        virtualinvoke r1.<gov.nist.javax.sip.header.ims.PPreferredService: void setApplicationIdentifiers(java.lang.String)>(r26);

     label10:
        goto label13;

     label11:
        $r15 = new javax.sip.InvalidArgumentException;

        specialinvoke $r15.<javax.sip.InvalidArgumentException: void <init>(java.lang.String)>("URN is not well formed");

        throw $r15;

     label12:
        $r22 := @caughtexception;

        r28 = $r22;

        virtualinvoke r28.<javax.sip.InvalidArgumentException: void printStackTrace()>();

     label13:
        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: gov.nist.javax.sip.header.SIPHeader parse()>();

        r29 = r1;

     label14:
        $z3 = <gov.nist.javax.sip.parser.ims.PPreferredServiceParser: boolean debug>;

        if $z3 == 0 goto label15;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: void dbg_enter(java.lang.String)>("PPreferredServiceParser.parse");

     label15:
        return r29;

     label16:
        $r25 := @caughtexception;

        r5 = $r25;

     label17:
        $z7 = <gov.nist.javax.sip.parser.ims.PPreferredServiceParser: boolean debug>;

        if $z7 == 0 goto label18;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PPreferredServiceParser: void dbg_enter(java.lang.String)>("PPreferredServiceParser.parse");

     label18:
        throw r5;

        catch javax.sip.InvalidArgumentException from label02 to label03 with label03;
        catch javax.sip.InvalidArgumentException from label07 to label08 with label08;
        catch javax.sip.InvalidArgumentException from label11 to label12 with label12;
        catch java.lang.Throwable from label01 to label14 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }
}
