public abstract class org.apache.http.impl.io.AbstractSessionInputBuffer extends java.lang.Object implements org.apache.http.io.SessionInputBuffer
{
    private java.io.InputStream instream;
    private byte[] buffer;
    private int bufferpos;
    private int bufferlen;
    private org.apache.http.util.ByteArrayBuffer linebuffer;
    private java.lang.String charset;
    private boolean ascii;
    private int maxLineLen;
    private org.apache.http.impl.io.HttpTransportMetricsImpl metrics;

    public void <init>()
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer> = null;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset> = "US-ASCII";

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii> = 1;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen> = -1;

        return;
    }

    protected void init(java.io.InputStream, int, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        java.io.InputStream r1;
        int i0, $i1;
        org.apache.http.params.HttpParams r2;
        byte[] $r3;
        org.apache.http.util.ByteArrayBuffer $r4;
        java.lang.String $r5, $r6, $r8;
        boolean $z0, $z1, $z2;
        org.apache.http.impl.io.HttpTransportMetricsImpl $r7;
        java.lang.IllegalArgumentException $r9, $r10, $r11;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.http.params.HttpParams;

        if r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input stream may not be null");

        throw $r11;

     label1:
        if i0 > 0 goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer size may not be negative or zero");

        throw $r10;

     label2:
        if r2 != null goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r9;

     label3:
        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.io.InputStream instream> = r1;

        $r3 = newarray (byte)[i0];

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer> = $r3;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = 0;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen> = 0;

        $r4 = new org.apache.http.util.ByteArrayBuffer;

        specialinvoke $r4.<org.apache.http.util.ByteArrayBuffer: void <init>(int)>(i0);

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer> = $r4;

        $r5 = staticinvoke <org.apache.http.params.HttpProtocolParams: java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams)>(r2);

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset> = $r5;

        $r6 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("US-ASCII");

        if $z0 != 0 goto label4;

        $r8 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset>;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ASCII");

        if $z1 == 0 goto label5;

     label4:
        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii> = $z2;

        $i1 = interfaceinvoke r2.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.connection.max-line-length", -1);

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen> = $i1;

        $r7 = new org.apache.http.impl.io.HttpTransportMetricsImpl;

        specialinvoke $r7.<org.apache.http.impl.io.HttpTransportMetricsImpl: void <init>()>();

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics> = $r7;

        return;
    }

    protected int fillBuffer() throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i8, $i9, i10;
        byte[] $r1, $r2, $r5, $r6;
        java.io.InputStream $r3;
        long $l6;
        org.apache.http.impl.io.HttpTransportMetricsImpl $r4;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $i3 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        if $i3 <= 0 goto label2;

        $i8 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $i7 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        i0 = $i8 - $i7;

        if i0 <= 0 goto label1;

        $r6 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i9 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $r5 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r6, $i9, $r5, 0, i0);

     label1:
        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = 0;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen> = i0;

     label2:
        i1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i4 = lengthof $r1;

        i2 = $i4 - i1;

        $r3 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.io.InputStream instream>;

        $r2 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        i10 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r2, i1, i2);

        if i10 != -1 goto label3;

        return -1;

     label3:
        $i5 = i1 + i10;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen> = $i5;

        $r4 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics>;

        $l6 = (long) i10;

        virtualinvoke $r4.<org.apache.http.impl.io.HttpTransportMetricsImpl: void incrementBytesTransferred(long)>($l6);

        return i10;
    }

    protected boolean hasBufferedData()
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $i1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        if $i1 >= $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int read() throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        boolean $z1;
        int $i0, $i1, i4;
        byte[] $r1;
        byte $b2;
        short $s3;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

     label1:
        $z1 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

        if $z1 != 0 goto label2;

        i4 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>();

        if i4 != -1 goto label1;

        return -1;

     label2:
        $r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i1 = $i0 + 1;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i1;

        $b2 = $r1[$i0];

        $s3 = $b2 & 255;

        return $s3;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        byte[] r1, $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8;
        boolean $z1;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

        if $z1 != 0 goto label2;

        i8 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>();

        if i8 != -1 goto label1;

        return -1;

     label2:
        $i4 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $i3 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        i2 = $i4 - $i3;

        if i2 <= i1 goto label3;

        i2 = i1;

     label3:
        $r2 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i5 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r2, $i5, r1, i0, i2);

        $i6 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i7 = $i6 + i2;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i7;

        return i2;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r1 := @parameter0: byte[];

        if r1 != null goto label1;

        return 0;

     label1:
        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    private int locateLF()
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        int i0, $i1;
        byte[] $r1;
        byte $b2;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        i0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

     label1:
        $i1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        if i0 >= $i1 goto label3;

        $r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $b2 = $r1[i0];

        if $b2 != 10 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    public int readLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        org.apache.http.util.CharArrayBuffer r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16;
        boolean z0, $z1, $z2, $z3;
        org.apache.http.util.ByteArrayBuffer $r2, $r3, $r4, $r7, $r8, $r10;
        java.io.IOException $r5;
        byte[] $r6, $r9;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        if r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r11;

     label1:
        $r2 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        virtualinvoke $r2.<org.apache.http.util.ByteArrayBuffer: void clear()>();

        i0 = 0;

        z0 = 1;

     label2:
        if z0 == 0 goto label8;

        i1 = specialinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int locateLF()>();

        if i1 == -1 goto label4;

        $r8 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $z3 = virtualinvoke $r8.<org.apache.http.util.ByteArrayBuffer: boolean isEmpty()>();

        if $z3 == 0 goto label3;

        $i15 = specialinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromReadBuffer(org.apache.http.util.CharArrayBuffer,int)>(r1, i1);

        return $i15;

     label3:
        z0 = 0;

        $i11 = i1 + 1;

        $i12 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        i2 = $i11 - $i12;

        $r10 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $r9 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i13 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        virtualinvoke $r10.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r9, $i13, i2);

        $i14 = i1 + 1;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i14;

        goto label6;

     label4:
        $z2 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

        if $z2 == 0 goto label5;

        $i7 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $i8 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        i16 = $i7 - $i8;

        $r7 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $r6 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i9 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        virtualinvoke $r7.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r6, $i9, i16);

        $i10 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i10;

     label5:
        i0 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>();

        if i0 != -1 goto label6;

        z0 = 0;

     label6:
        $i4 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen>;

        if $i4 <= 0 goto label7;

        $r4 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i5 = virtualinvoke $r4.<org.apache.http.util.ByteArrayBuffer: int length()>();

        $i6 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen>;

        if $i5 < $i6 goto label7;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Maximum line length limit exceeded");

        throw $r5;

     label7:
        goto label2;

     label8:
        if i0 != -1 goto label9;

        $r3 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $z1 = virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: boolean isEmpty()>();

        if $z1 == 0 goto label9;

        return -1;

     label9:
        $i3 = specialinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer)>(r1);

        return $i3;
    }

    private int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        org.apache.http.util.CharArrayBuffer r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.String r2, $r5, $r8;
        org.apache.http.util.ByteArrayBuffer $r3, $r4, $r6, $r9, $r10, $r11, $r12, $r13;
        boolean $z0;
        byte[] $r7;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r3 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        i0 = virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: int length()>();

        if i0 <= 0 goto label2;

        $r10 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i1 = i0 - 1;

        $i3 = virtualinvoke $r10.<org.apache.http.util.ByteArrayBuffer: int byteAt(int)>($i1);

        if $i3 != 10 goto label1;

        i0 = i0 + -1;

        $r12 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        virtualinvoke $r12.<org.apache.http.util.ByteArrayBuffer: void setLength(int)>(i0);

     label1:
        if i0 <= 0 goto label2;

        $r11 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i2 = i0 - 1;

        $i4 = virtualinvoke $r11.<org.apache.http.util.ByteArrayBuffer: int byteAt(int)>($i2);

        if $i4 != 13 goto label2;

        i5 = i0 + -1;

        $r13 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        virtualinvoke $r13.<org.apache.http.util.ByteArrayBuffer: void setLength(int)>(i5);

     label2:
        $r4 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        i6 = virtualinvoke $r4.<org.apache.http.util.ByteArrayBuffer: int length()>();

        $z0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii>;

        if $z0 == 0 goto label3;

        $r9 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.ByteArrayBuffer,int,int)>($r9, 0, i6);

        goto label4;

     label3:
        $r5 = new java.lang.String;

        $r6 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $r7 = virtualinvoke $r6.<org.apache.http.util.ByteArrayBuffer: byte[] buffer()>();

        $r8 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset>;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r7, 0, i6, $r8);

        r2 = $r5;

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r2);

     label4:
        return i6;
    }

    private int lineFromReadBuffer(org.apache.http.util.CharArrayBuffer, int) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        org.apache.http.util.CharArrayBuffer r1;
        int i0, i1, i2, $i3, $i4;
        java.lang.String r2, $r3, $r4;
        boolean $z0;
        byte[] $r5, $r6, $r7;
        byte $b5;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        i0 := @parameter1: int;

        i1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i3 = i0 + 1;

        r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i3;

        if i0 <= i1 goto label1;

        $r7 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i4 = i0 - 1;

        $b5 = $r7[$i4];

        if $b5 != 13 goto label1;

        i0 = i0 + -1;

     label1:
        i2 = i0 - i1;

        $z0 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii>;

        if $z0 == 0 goto label2;

        $r6 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(byte[],int,int)>($r6, i1, i2);

        goto label3;

     label2:
        $r3 = new java.lang.String;

        $r5 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $r4 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset>;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r5, i1, i2, $r4);

        r2 = $r3;

        virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r2);

     label3:
        return i2;
    }

    public java.lang.String readLine() throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        org.apache.http.util.CharArrayBuffer r1, $r2;
        int i0;
        java.lang.String $r3;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r2 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r2.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(64);

        r1 = $r2;

        i0 = virtualinvoke r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>(r1);

        if i0 == -1 goto label1;

        $r3 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: java.lang.String toString()>();

        return $r3;

     label1:
        return null;
    }

    public org.apache.http.io.HttpTransportMetrics getMetrics()
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer r0;
        org.apache.http.impl.io.HttpTransportMetricsImpl $r1;

        r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r1 = r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics>;

        return $r1;
    }
}
