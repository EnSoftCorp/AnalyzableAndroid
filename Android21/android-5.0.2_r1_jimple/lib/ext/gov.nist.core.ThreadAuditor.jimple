public class gov.nist.core.ThreadAuditor extends java.lang.Object
{
    private java.util.Map threadHandles;
    private long pingIntervalInMillisecs;

    public void <init>()
    {
        gov.nist.core.ThreadAuditor r0;
        java.util.HashMap $r1;

        r0 := @this: gov.nist.core.ThreadAuditor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<gov.nist.core.ThreadAuditor: java.util.Map threadHandles> = $r1;

        r0.<gov.nist.core.ThreadAuditor: long pingIntervalInMillisecs> = 0L;

        return;
    }

    public long getPingIntervalInMillisecs()
    {
        gov.nist.core.ThreadAuditor r0;
        long $l0;

        r0 := @this: gov.nist.core.ThreadAuditor;

        $l0 = r0.<gov.nist.core.ThreadAuditor: long pingIntervalInMillisecs>;

        return $l0;
    }

    public void setPingIntervalInMillisecs(long)
    {
        gov.nist.core.ThreadAuditor r0;
        long l0;

        r0 := @this: gov.nist.core.ThreadAuditor;

        l0 := @parameter0: long;

        r0.<gov.nist.core.ThreadAuditor: long pingIntervalInMillisecs> = l0;

        return;
    }

    public boolean isEnabled()
    {
        gov.nist.core.ThreadAuditor r0;
        long $l0;
        byte $b1;
        boolean $z0;

        r0 := @this: gov.nist.core.ThreadAuditor;

        $l0 = r0.<gov.nist.core.ThreadAuditor: long pingIntervalInMillisecs>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public synchronized gov.nist.core.ThreadAuditor$ThreadHandle addCurrentThread()
    {
        gov.nist.core.ThreadAuditor r0;
        gov.nist.core.ThreadAuditor$ThreadHandle r1, $r2;
        boolean $z0;
        java.util.Map $r3;
        java.lang.Thread $r4;

        r0 := @this: gov.nist.core.ThreadAuditor;

        $r2 = new gov.nist.core.ThreadAuditor$ThreadHandle;

        specialinvoke $r2.<gov.nist.core.ThreadAuditor$ThreadHandle: void <init>(gov.nist.core.ThreadAuditor,gov.nist.core.ThreadAuditor)>(r0, r0);

        r1 = $r2;

        $z0 = virtualinvoke r0.<gov.nist.core.ThreadAuditor: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<gov.nist.core.ThreadAuditor: java.util.Map threadHandles>;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1);

     label1:
        return r1;
    }

    public synchronized void removeThread(java.lang.Thread)
    {
        gov.nist.core.ThreadAuditor r0;
        java.lang.Thread r1;
        java.util.Map $r2;

        r0 := @this: gov.nist.core.ThreadAuditor;

        r1 := @parameter0: java.lang.Thread;

        $r2 = r0.<gov.nist.core.ThreadAuditor: java.util.Map threadHandles>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public synchronized void ping(gov.nist.core.ThreadAuditor$ThreadHandle)
    {
        gov.nist.core.ThreadAuditor r0;
        gov.nist.core.ThreadAuditor$ThreadHandle r1;

        r0 := @this: gov.nist.core.ThreadAuditor;

        r1 := @parameter0: gov.nist.core.ThreadAuditor$ThreadHandle;

        virtualinvoke r1.<gov.nist.core.ThreadAuditor$ThreadHandle: void setThreadActive(boolean)>(1);

        return;
    }

    public synchronized void reset()
    {
        gov.nist.core.ThreadAuditor r0;
        java.util.Map $r1;

        r0 := @this: gov.nist.core.ThreadAuditor;

        $r1 = r0.<gov.nist.core.ThreadAuditor: java.util.Map threadHandles>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public synchronized java.lang.String auditThreads()
    {
        gov.nist.core.ThreadAuditor r0;
        java.lang.String r1, $r11;
        java.util.Iterator r2;
        gov.nist.core.ThreadAuditor$ThreadHandle r3;
        java.lang.Thread r4;
        java.util.Map $r5;
        java.util.Collection $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13;

        r0 := @this: gov.nist.core.ThreadAuditor;

        r1 = null;

        $r5 = r0.<gov.nist.core.ThreadAuditor: java.util.Map threadHandles>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (gov.nist.core.ThreadAuditor$ThreadHandle) $r7;

        $z1 = virtualinvoke r3.<gov.nist.core.ThreadAuditor$ThreadHandle: boolean isThreadActive()>();

        if $z1 != 0 goto label3;

        r4 = virtualinvoke r3.<gov.nist.core.ThreadAuditor$ThreadHandle: java.lang.Thread getThread()>();

        if r1 != null goto label2;

        r1 = "Thread Auditor Report:\n";

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   Thread [");

        $r11 = virtualinvoke r4.<java.lang.Thread: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] has failed to respond to an audit request.\n");

        r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        virtualinvoke r3.<gov.nist.core.ThreadAuditor$ThreadHandle: void setThreadActive(boolean)>(0);

        goto label1;

     label4:
        return r1;
    }

    public synchronized java.lang.String toString()
    {
        gov.nist.core.ThreadAuditor r0;
        java.lang.String r1, $r10;
        java.util.Iterator r2;
        gov.nist.core.ThreadAuditor$ThreadHandle r3;
        java.util.Map $r4;
        java.util.Collection $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r11, $r12;

        r0 := @this: gov.nist.core.ThreadAuditor;

        r1 = "Thread Auditor - List of monitored threads:\n";

        $r4 = r0.<gov.nist.core.ThreadAuditor: java.util.Map threadHandles>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (gov.nist.core.ThreadAuditor$ThreadHandle) $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ");

        $r10 = virtualinvoke r3.<gov.nist.core.ThreadAuditor$ThreadHandle: java.lang.String toString()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label2:
        return r1;
    }
}
