public class org.apache.http.impl.DefaultConnectionReuseStrategy extends java.lang.Object implements org.apache.http.ConnectionReuseStrategy
{

    public void <init>()
    {
        org.apache.http.impl.DefaultConnectionReuseStrategy r0;

        r0 := @this: org.apache.http.impl.DefaultConnectionReuseStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean keepAlive(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.impl.DefaultConnectionReuseStrategy r0;
        org.apache.http.HttpResponse r1;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.HttpConnection r3;
        org.apache.http.HttpEntity r4;
        org.apache.http.ProtocolVersion r5;
        org.apache.http.HeaderIterator r6;
        org.apache.http.TokenIterator r7;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.String r8, $r12, $r13;
        java.lang.Object $r9;
        org.apache.http.StatusLine $r10;
        org.apache.http.HttpVersion $r11, $r14;
        byte $b0;
        long $l1;
        java.lang.IllegalArgumentException $r15, $r16;
        org.apache.http.ParseException $r17;

        r0 := @this: org.apache.http.impl.DefaultConnectionReuseStrategy;

        r1 := @parameter0: org.apache.http.HttpResponse;

        r2 := @parameter1: org.apache.http.protocol.HttpContext;

        if r1 != null goto label01;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null.");

        throw $r16;

     label01:
        if r2 != null goto label02;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP context may not be null.");

        throw $r15;

     label02:
        $r9 = interfaceinvoke r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.connection");

        r3 = (org.apache.http.HttpConnection) $r9;

        if r3 == null goto label03;

        $z10 = interfaceinvoke r3.<org.apache.http.HttpConnection: boolean isOpen()>();

        if $z10 != 0 goto label03;

        return 0;

     label03:
        r4 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        $r10 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        r5 = interfaceinvoke $r10.<org.apache.http.StatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>();

        if r4 == null goto label05;

        $l1 = interfaceinvoke r4.<org.apache.http.HttpEntity: long getContentLength()>();

        $b0 = $l1 cmp 0L;

        if $b0 >= 0 goto label05;

        $z8 = interfaceinvoke r4.<org.apache.http.HttpEntity: boolean isChunked()>();

        if $z8 == 0 goto label04;

        $r14 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $z9 = virtualinvoke r5.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r14);

        if $z9 == 0 goto label05;

     label04:
        return 0;

     label05:
        r6 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.HeaderIterator headerIterator(java.lang.String)>("Connection");

        $z1 = interfaceinvoke r6.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z1 != 0 goto label06;

        r6 = interfaceinvoke r1.<org.apache.http.HttpResponse: org.apache.http.HeaderIterator headerIterator(java.lang.String)>("Proxy-Connection");

     label06:
        $z2 = interfaceinvoke r6.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z2 == 0 goto label16;

     label07:
        r7 = virtualinvoke r0.<org.apache.http.impl.DefaultConnectionReuseStrategy: org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator)>(r6);

        z0 = 0;

     label08:
        $z5 = interfaceinvoke r7.<org.apache.http.TokenIterator: boolean hasNext()>();

        if $z5 == 0 goto label12;

        r8 = interfaceinvoke r7.<org.apache.http.TokenIterator: java.lang.String nextToken()>();

        $r12 = "Close";

        $z6 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r8);

        if $z6 == 0 goto label10;

     label09:
        return 0;

     label10:
        $r13 = "Keep-Alive";

        $z7 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r8);

        if $z7 == 0 goto label11;

        z0 = 1;

     label11:
        goto label08;

     label12:
        if z0 == 0 goto label14;

     label13:
        return 1;

     label14:
        goto label16;

     label15:
        $r17 := @caughtexception;

        return 0;

     label16:
        $r11 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $z4 = virtualinvoke r5.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r11);

        if $z4 != 0 goto label17;

        $z3 = 1;

        goto label18;

     label17:
        $z3 = 0;

     label18:
        return $z3;

        catch org.apache.http.ParseException from label07 to label09 with label15;
        catch org.apache.http.ParseException from label10 to label13 with label15;
    }

    protected org.apache.http.TokenIterator createTokenIterator(org.apache.http.HeaderIterator)
    {
        org.apache.http.impl.DefaultConnectionReuseStrategy r0;
        org.apache.http.HeaderIterator r1;
        org.apache.http.message.BasicTokenIterator $r2;

        r0 := @this: org.apache.http.impl.DefaultConnectionReuseStrategy;

        r1 := @parameter0: org.apache.http.HeaderIterator;

        $r2 = new org.apache.http.message.BasicTokenIterator;

        specialinvoke $r2.<org.apache.http.message.BasicTokenIterator: void <init>(org.apache.http.HeaderIterator)>(r1);

        return $r2;
    }
}
