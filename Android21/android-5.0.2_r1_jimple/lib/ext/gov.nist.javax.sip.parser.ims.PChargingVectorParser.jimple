public class gov.nist.javax.sip.parser.ims.PChargingVectorParser extends gov.nist.javax.sip.parser.ParametersParser implements gov.nist.javax.sip.parser.TokenTypes
{

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.ims.PChargingVectorParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingVectorParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.ims.PChargingVectorParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingVectorParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PChargingVectorParser r0;
        gov.nist.javax.sip.header.ims.PChargingVector r1, $r3, r15;
        char c0, $c1;
        java.lang.Throwable r2, $r13;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r4, $r7, $r8, $r9, $r12;
        java.lang.String $r5;
        java.text.ParseException $r6, $r11, r14;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingVectorParser;

        $z0 = <gov.nist.javax.sip.parser.ims.PChargingVectorParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void dbg_enter(java.lang.String)>("parse");

     label01:
        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void headerName(int)>(2125);

        $r3 = new gov.nist.javax.sip.header.ims.PChargingVector;

        specialinvoke $r3.<gov.nist.javax.sip.header.ims.PChargingVector: void <init>()>();

        r1 = $r3;

     label02:
        $r4 = r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r4.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 == 10 goto label04;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void parseParameter(gov.nist.javax.sip.header.ims.PChargingVector)>(r1);

        $r7 = r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: void SPorHT()>();

        $r8 = r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r8.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if c0 == 10 goto label04;

        if c0 != 0 goto label03;

        goto label04;

     label03:
        $r9 = r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r9.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(59);

        $r12 = r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r12.<gov.nist.core.LexerCore: void SPorHT()>();

        goto label02;

     label04:
        goto label06;

     label05:
        $r11 := @caughtexception;

        r14 = $r11;

        throw r14;

     label06:
        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r1);

        $r5 = virtualinvoke r1.<gov.nist.javax.sip.header.ims.PChargingVector: java.lang.String getParameter(java.lang.String)>("icid-value");

        if $r5 != null goto label07;

        $r6 = new java.text.ParseException;

        specialinvoke $r6.<java.text.ParseException: void <init>(java.lang.String,int)>("Missing a required Parameter : icid-value", 0);

        throw $r6;

     label07:
        r15 = r1;

     label08:
        $z1 = <gov.nist.javax.sip.parser.ims.PChargingVectorParser: boolean debug>;

        if $z1 == 0 goto label09;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void dbg_leave(java.lang.String)>("parse");

     label09:
        return r15;

     label10:
        $r13 := @caughtexception;

        r2 = $r13;

     label11:
        $z2 = <gov.nist.javax.sip.parser.ims.PChargingVectorParser: boolean debug>;

        if $z2 == 0 goto label12;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void dbg_leave(java.lang.String)>("parse");

     label12:
        throw r2;

        catch java.text.ParseException from label02 to label04 with label05;
        catch java.lang.Throwable from label01 to label08 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    protected void parseParameter(gov.nist.javax.sip.header.ims.PChargingVector) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.ims.PChargingVectorParser r0;
        gov.nist.javax.sip.header.ims.PChargingVector r1;
        gov.nist.core.NameValue r2;
        java.lang.Throwable r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: gov.nist.javax.sip.parser.ims.PChargingVectorParser;

        r1 := @parameter0: gov.nist.javax.sip.header.ims.PChargingVector;

        $z0 = <gov.nist.javax.sip.parser.ims.PChargingVectorParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void dbg_enter(java.lang.String)>("parseParameter");

     label1:
        r2 = virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: gov.nist.core.NameValue nameValue(char)>(61);

        virtualinvoke r1.<gov.nist.javax.sip.header.ims.PChargingVector: void setParameter(gov.nist.core.NameValue)>(r2);

     label2:
        $z1 = <gov.nist.javax.sip.parser.ims.PChargingVectorParser: boolean debug>;

        if $z1 == 0 goto label6;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void dbg_leave(java.lang.String)>("parseParameter");

        goto label6;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        $z2 = <gov.nist.javax.sip.parser.ims.PChargingVectorParser: boolean debug>;

        if $z2 == 0 goto label5;

        virtualinvoke r0.<gov.nist.javax.sip.parser.ims.PChargingVectorParser: void dbg_leave(java.lang.String)>("parseParameter");

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
