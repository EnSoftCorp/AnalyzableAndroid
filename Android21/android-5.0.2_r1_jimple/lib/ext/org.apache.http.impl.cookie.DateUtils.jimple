public final class org.apache.http.impl.cookie.DateUtils extends java.lang.Object
{
    public static final java.lang.String PATTERN_RFC1123;
    public static final java.lang.String PATTERN_RFC1036;
    public static final java.lang.String PATTERN_ASCTIME;
    private static final java.lang.String[] DEFAULT_PATTERNS;
    private static final java.util.Date DEFAULT_TWO_DIGIT_YEAR_START;
    public static final java.util.TimeZone GMT;

    public static java.util.Date parseDate(java.lang.String) throws org.apache.http.impl.cookie.DateParseException
    {
        java.lang.String r0;
        java.util.Date $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date)>(r0, null, null);

        return $r1;
    }

    public static java.util.Date parseDate(java.lang.String, java.lang.String[]) throws org.apache.http.impl.cookie.DateParseException
    {
        java.lang.String r0;
        java.lang.String[] r1;
        java.util.Date $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        $r2 = staticinvoke <org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date)>(r0, r1, null);

        return $r2;
    }

    public static java.util.Date parseDate(java.lang.String, java.lang.String[], java.util.Date) throws org.apache.http.impl.cookie.DateParseException
    {
        java.lang.String r0, r4, $r11;
        java.lang.String[] r1, r3;
        java.util.Date r2, $r12;
        int i0, i1, $i2, $i3, $i4;
        java.text.SimpleDateFormat r5;
        org.apache.http.impl.cookie.DateParseException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r13;
        java.text.ParseException $r14;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.util.Date;

        if r0 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dateValue is null");

        throw $r13;

     label1:
        if r1 != null goto label2;

        r1 = <org.apache.http.impl.cookie.DateUtils: java.lang.String[] DEFAULT_PATTERNS>;

     label2:
        if r2 != null goto label3;

        r2 = <org.apache.http.impl.cookie.DateUtils: java.util.Date DEFAULT_TWO_DIGIT_YEAR_START>;

     label3:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 <= 1 goto label4;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("\'");

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("\'");

        if $z1 == 0 goto label4;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i4 - 1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i3);

     label4:
        r3 = r1;

        i0 = lengthof r3;

        i1 = 0;

     label5:
        if i1 >= i0 goto label9;

        r4 = r3[i1];

        r5 = staticinvoke <org.apache.http.impl.cookie.DateUtils$DateFormatHolder: java.text.SimpleDateFormat formatFor(java.lang.String)>(r4);

        virtualinvoke r5.<java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)>(r2);

     label6:
        $r12 = virtualinvoke r5.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r0);

     label7:
        return $r12;

     label8:
        $r14 := @caughtexception;

        i1 = i1 + 1;

        goto label5;

     label9:
        $r7 = new org.apache.http.impl.cookie.DateParseException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse the date ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.http.impl.cookie.DateParseException: void <init>(java.lang.String)>($r11);

        throw $r7;

        catch java.text.ParseException from label6 to label7 with label8;
    }

    public static java.lang.String formatDate(java.util.Date)
    {
        java.util.Date r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Date;

        $r1 = staticinvoke <org.apache.http.impl.cookie.DateUtils: java.lang.String formatDate(java.util.Date,java.lang.String)>(r0, "EEE, dd MMM yyyy HH:mm:ss zzz");

        return $r1;
    }

    public static java.lang.String formatDate(java.util.Date, java.lang.String)
    {
        java.util.Date r0;
        java.lang.String r1, $r3;
        java.text.SimpleDateFormat r2;
        java.lang.IllegalArgumentException $r4, $r5;

        r0 := @parameter0: java.util.Date;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("date is null");

        throw $r5;

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("pattern is null");

        throw $r4;

     label2:
        r2 = staticinvoke <org.apache.http.impl.cookie.DateUtils$DateFormatHolder: java.text.SimpleDateFormat formatFor(java.lang.String)>(r1);

        $r3 = virtualinvoke r2.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r0);

        return $r3;
    }

    private void <init>()
    {
        org.apache.http.impl.cookie.DateUtils r0;

        r0 := @this: org.apache.http.impl.cookie.DateUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.util.Calendar r0;
        java.lang.String[] $r1;
        java.util.TimeZone $r2, $r3;
        java.util.Date $r4;

        <org.apache.http.impl.cookie.DateUtils: java.lang.String PATTERN_ASCTIME> = "EEE MMM d HH:mm:ss yyyy";

        <org.apache.http.impl.cookie.DateUtils: java.lang.String PATTERN_RFC1036> = "EEEE, dd-MMM-yy HH:mm:ss zzz";

        <org.apache.http.impl.cookie.DateUtils: java.lang.String PATTERN_RFC1123> = "EEE, dd MMM yyyy HH:mm:ss zzz";

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "EEEE, dd-MMM-yy HH:mm:ss zzz";

        $r1[1] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        $r1[2] = "EEE MMM d HH:mm:ss yyyy";

        <org.apache.http.impl.cookie.DateUtils: java.lang.String[] DEFAULT_PATTERNS> = $r1;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        <org.apache.http.impl.cookie.DateUtils: java.util.TimeZone GMT> = $r2;

        r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r3 = <org.apache.http.impl.cookie.DateUtils: java.util.TimeZone GMT>;

        virtualinvoke r0.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r3);

        virtualinvoke r0.<java.util.Calendar: void set(int,int,int,int,int,int)>(2000, 0, 1, 0, 0, 0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(14, 0);

        $r4 = virtualinvoke r0.<java.util.Calendar: java.util.Date getTime()>();

        <org.apache.http.impl.cookie.DateUtils: java.util.Date DEFAULT_TWO_DIGIT_YEAR_START> = $r4;

        return;
    }
}
