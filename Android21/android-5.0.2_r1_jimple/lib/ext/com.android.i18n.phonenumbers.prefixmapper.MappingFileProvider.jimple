public class com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider extends java.lang.Object implements java.io.Externalizable
{
    private int numOfEntries;
    private int[] countryCallingCodes;
    private java.util.List availableLanguages;
    private static final java.util.Map LOCALE_NORMALIZATION_MAP;

    public void <init>()
    {
        com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider r0;

        r0 := @this: com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int numOfEntries> = 0;

        return;
    }

    public void readFileConfigs(java.util.SortedMap)
    {
        com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider r0;
        java.util.SortedMap r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.Iterator r2;
        int[] $r3, $r8;
        java.util.ArrayList $r4;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6, $r11;
        java.lang.Integer $r7, $r12;
        java.util.List $r9;
        java.util.HashSet $r10;
        java.util.Collection $r13;

        r0 := @this: com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider;

        r1 := @parameter0: java.util.SortedMap;

        $i2 = interfaceinvoke r1.<java.util.SortedMap: int size()>();

        r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int numOfEntries> = $i2;

        $i3 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int numOfEntries>;

        $r3 = newarray (int)[$i3];

        r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int[] countryCallingCodes> = $r3;

        $r4 = new java.util.ArrayList;

        $i4 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int numOfEntries>;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i4);

        r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: java.util.List availableLanguages> = $r4;

        i0 = 0;

        $r5 = interfaceinvoke r1.<java.util.SortedMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.Integer) $r6;

        i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r8 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int[] countryCallingCodes>;

        $i5 = i0;

        i0 = i0 + 1;

        $r8[$i5] = i1;

        $r9 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: java.util.List availableLanguages>;

        $r10 = new java.util.HashSet;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r11 = interfaceinvoke r1.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>($r12);

        $r13 = (java.util.Collection) $r11;

        specialinvoke $r10.<java.util.HashSet: void <init>(java.util.Collection)>($r13);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        return;
    }

    public void readExternal(java.io.ObjectInput) throws java.io.IOException
    {
        com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider r0;
        java.io.ObjectInput r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.HashSet r2, $r7;
        int[] $r3, $r4, $r6, $r10;
        java.util.List $r5, $r8;
        java.lang.String $r9;
        java.util.ArrayList $r11;

        r0 := @this: com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider;

        r1 := @parameter0: java.io.ObjectInput;

        $i3 = interfaceinvoke r1.<java.io.ObjectInput: int readInt()>();

        r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int numOfEntries> = $i3;

        $r3 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int[] countryCallingCodes>;

        if $r3 == null goto label1;

        $r10 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int[] countryCallingCodes>;

        $i7 = lengthof $r10;

        $i8 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int numOfEntries>;

        if $i7 >= $i8 goto label2;

     label1:
        $i4 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int numOfEntries>;

        $r4 = newarray (int)[$i4];

        r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int[] countryCallingCodes> = $r4;

     label2:
        $r5 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: java.util.List availableLanguages>;

        if $r5 != null goto label3;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: java.util.List availableLanguages> = $r11;

     label3:
        i0 = 0;

     label4:
        $i5 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int numOfEntries>;

        if i0 >= $i5 goto label7;

        $r6 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int[] countryCallingCodes>;

        $i6 = interfaceinvoke r1.<java.io.ObjectInput: int readInt()>();

        $r6[i0] = $i6;

        i1 = interfaceinvoke r1.<java.io.ObjectInput: int readInt()>();

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        r2 = $r7;

        i2 = 0;

     label5:
        if i2 >= i1 goto label6;

        $r9 = interfaceinvoke r1.<java.io.ObjectInput: java.lang.String readUTF()>();

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r9);

        i2 = i2 + 1;

        goto label5;

     label6:
        $r8 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: java.util.List availableLanguages>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r2);

        i0 = i0 + 1;

        goto label4;

     label7:
        return;
    }

    public void writeExternal(java.io.ObjectOutput) throws java.io.IOException
    {
        com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider r0;
        java.io.ObjectOutput r1;
        int i0, i1, $i2, $i3, $i4;
        java.util.Set r2;
        java.util.Iterator r3;
        java.lang.String r4;
        int[] $r5;
        java.util.List $r6;
        java.lang.Object $r7, $r8;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider;

        r1 := @parameter0: java.io.ObjectOutput;

        $i2 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int numOfEntries>;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeInt(int)>($i2);

        i0 = 0;

     label1:
        $i3 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int numOfEntries>;

        if i0 >= $i3 goto label4;

        $r5 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int[] countryCallingCodes>;

        $i4 = $r5[i0];

        interfaceinvoke r1.<java.io.ObjectOutput: void writeInt(int)>($i4);

        $r6 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: java.util.List availableLanguages>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (java.util.Set) $r7;

        i1 = interfaceinvoke r2.<java.util.Set: int size()>();

        interfaceinvoke r1.<java.io.ObjectOutput: void writeInt(int)>(i1);

        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r8;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeUTF(java.lang.String)>(r4);

        goto label2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }

    public java.lang.String toString()
    {
        com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider r0;
        java.lang.StringBuilder r1, $r5;
        int i0, $i1, $i2;
        java.util.TreeSet r2, $r10;
        java.util.Iterator r3;
        java.lang.String r4, $r6;
        int[] $r7;
        java.util.List $r11;
        java.lang.Object $r12, $r16;
        java.util.Collection $r13;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r1 = $r5;

        i0 = 0;

     label1:
        $i1 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int numOfEntries>;

        if i0 >= $i1 goto label4;

        $r7 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int[] countryCallingCodes>;

        $i2 = $r7[i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(124);

        $r10 = new java.util.TreeSet;

        $r11 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: java.util.List availableLanguages>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i0);

        $r13 = (java.util.Collection) $r12;

        specialinvoke $r10.<java.util.TreeSet: void <init>(java.util.Collection)>($r13);

        r2 = $r10;

        r3 = interfaceinvoke r2.<java.util.SortedSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r16 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r16;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        goto label2;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        i0 = i0 + 1;

        goto label1;

     label4:
        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    java.lang.String getFileName(int, java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String r1, r2, r3, r5, $r13;
        java.util.Set r4;
        java.lang.StringBuilder r6, $r10, $r11, $r12;
        int[] $r7;
        java.util.List $r8;
        java.lang.Object $r9;

        r0 := @this: com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 != 0 goto label1;

        return "";

     label1:
        $r7 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: int[] countryCallingCodes>;

        i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r7, i0);

        if i1 >= 0 goto label2;

        return "";

     label2:
        $r8 = r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: java.util.List availableLanguages>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (java.util.Set) $r9;

        $i3 = interfaceinvoke r4.<java.util.Set: int size()>();

        if $i3 <= 0 goto label3;

        r5 = specialinvoke r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: java.lang.String findBestMatchingLanguageCode(java.util.Set,java.lang.String,java.lang.String,java.lang.String)>(r4, r1, r2, r3);

        $i4 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i4 <= 0 goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        r6 = $r10;

        $r12 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r13 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label3:
        return "";
    }

    private java.lang.String findBestMatchingLanguageCode(java.util.Set, java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider r0;
        java.util.Set r1;
        java.lang.String r2, r3, r4, r6, r7, r9, r11;
        java.lang.StringBuilder r5, r8, r10, $r14, $r15, $r16, $r17;
        java.util.Map $r12;
        java.lang.Object $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i1;

        r0 := @this: com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 = specialinvoke r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: java.lang.StringBuilder constructFullLocale(java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r4);

        r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = <com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: java.util.Map LOCALE_NORMALIZATION_MAP>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (java.lang.String) $r13;

        if r7 == null goto label1;

        $z6 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r7);

        if $z6 == 0 goto label1;

        return r7;

     label1:
        $z1 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        return r6;

     label2:
        $z0 = specialinvoke r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: boolean onlyOneOfScriptOrRegionIsEmpty(java.lang.String,java.lang.String)>(r3, r4);

        if $z0 == 0 goto label3;

        $z4 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z4 == 0 goto label6;

        return r2;

     label3:
        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i1 <= 0 goto label6;

        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i0 <= 0 goto label6;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>(r2);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        r8 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r9 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r9);

        if $z2 == 0 goto label4;

        return r9;

     label4:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        r10 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        r11 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $z3 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r11);

        if $z3 == 0 goto label5;

        return r11;

     label5:
        $z5 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z5 == 0 goto label6;

        return r2;

     label6:
        return "";
    }

    private boolean onlyOneOfScriptOrRegionIsEmpty(java.lang.String, java.lang.String)
    {
        com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider r0;
        java.lang.String r1, r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i3 > 0 goto label2;

     label1:
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 <= 0 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private java.lang.StringBuilder constructFullLocale(java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider r0;
        java.lang.String r1, r2, r3;
        java.lang.StringBuilder r4, $r5;

        r0 := @this: com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

        r4 = $r5;

        specialinvoke r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: void appendSubsequentLocalePart(java.lang.String,java.lang.StringBuilder)>(r2, r4);

        specialinvoke r0.<com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: void appendSubsequentLocalePart(java.lang.String,java.lang.StringBuilder)>(r3, r4);

        return r4;
    }

    private void appendSubsequentLocalePart(java.lang.String, java.lang.StringBuilder)
    {
        com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider r0;
        java.lang.String r1;
        java.lang.StringBuilder r2, $r3;
        int $i0;

        r0 := @this: com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.StringBuilder;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

     label1:
        return;
    }

    static void <clinit>()
    {
        java.util.HashMap r0, $r1;
        java.util.Map $r5;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0 = $r1;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("zh_TW", "zh_Hant");

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("zh_HK", "zh_Hant");

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("zh_MO", "zh_Hant");

        $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r0);

        <com.android.i18n.phonenumbers.prefixmapper.MappingFileProvider: java.util.Map LOCALE_NORMALIZATION_MAP> = $r5;

        return;
    }
}
