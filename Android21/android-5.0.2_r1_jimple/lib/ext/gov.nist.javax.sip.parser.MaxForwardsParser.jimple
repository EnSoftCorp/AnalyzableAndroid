public class gov.nist.javax.sip.parser.MaxForwardsParser extends gov.nist.javax.sip.parser.HeaderParser
{

    public void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.MaxForwardsParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.MaxForwardsParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(java.lang.String)>(r1);

        return;
    }

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.MaxForwardsParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.MaxForwardsParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.HeaderParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    public gov.nist.javax.sip.header.SIPHeader parse() throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.MaxForwardsParser r0;
        gov.nist.javax.sip.header.MaxForwards r1, r3, $r5;
        java.lang.String r2, $r11, $r16;
        java.lang.Throwable r4, $r12;
        boolean $z0, $z1, $z2;
        gov.nist.core.LexerCore $r6, $r7, $r8;
        int $i0;
        java.lang.NumberFormatException $r10, r18;
        java.text.ParseException $r13, $r15;
        javax.sip.InvalidArgumentException $r14, r17;

        r0 := @this: gov.nist.javax.sip.parser.MaxForwardsParser;

        $z0 = <gov.nist.javax.sip.parser.MaxForwardsParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.javax.sip.parser.MaxForwardsParser: void dbg_enter(java.lang.String)>("MaxForwardsParser.enter");

     label1:
        $r5 = new gov.nist.javax.sip.header.MaxForwards;

        specialinvoke $r5.<gov.nist.javax.sip.header.MaxForwards: void <init>()>();

        r1 = $r5;

        virtualinvoke r0.<gov.nist.javax.sip.parser.MaxForwardsParser: void headerName(int)>(2079);

        $r6 = r0.<gov.nist.javax.sip.parser.MaxForwardsParser: gov.nist.core.LexerCore lexer>;

        r2 = virtualinvoke $r6.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        virtualinvoke r1.<gov.nist.javax.sip.header.MaxForwards: void setMaxForwards(int)>($i0);

        $r7 = r0.<gov.nist.javax.sip.parser.MaxForwardsParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: void SPorHT()>();

        $r8 = r0.<gov.nist.javax.sip.parser.MaxForwardsParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: gov.nist.core.Token match(int)>(10);

        r3 = r1;

     label2:
        $z1 = <gov.nist.javax.sip.parser.MaxForwardsParser: boolean debug>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<gov.nist.javax.sip.parser.MaxForwardsParser: void dbg_leave(java.lang.String)>("MaxForwardsParser.leave");

     label3:
        return r3;

     label4:
        $r14 := @caughtexception;

        r17 = $r14;

        $r16 = virtualinvoke r17.<javax.sip.InvalidArgumentException: java.lang.String getMessage()>();

        $r15 = virtualinvoke r0.<gov.nist.javax.sip.parser.MaxForwardsParser: java.text.ParseException createParseException(java.lang.String)>($r16);

        throw $r15;

     label5:
        $r10 := @caughtexception;

        r18 = $r10;

        $r11 = virtualinvoke r18.<java.lang.NumberFormatException: java.lang.String getMessage()>();

        $r13 = virtualinvoke r0.<gov.nist.javax.sip.parser.MaxForwardsParser: java.text.ParseException createParseException(java.lang.String)>($r11);

        throw $r13;

     label6:
        $r12 := @caughtexception;

        r4 = $r12;

     label7:
        $z2 = <gov.nist.javax.sip.parser.MaxForwardsParser: boolean debug>;

        if $z2 == 0 goto label8;

        virtualinvoke r0.<gov.nist.javax.sip.parser.MaxForwardsParser: void dbg_leave(java.lang.String)>("MaxForwardsParser.leave");

     label8:
        throw r4;

        catch javax.sip.InvalidArgumentException from label1 to label2 with label4;
        catch java.lang.NumberFormatException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label7 with label6;
    }
}
