public abstract class gov.nist.javax.sip.stack.SIPTransactionStack extends java.lang.Object implements gov.nist.javax.sip.stack.SIPTransactionEventListener, gov.nist.javax.sip.stack.SIPDialogEventListener
{
    public static final int BASE_TIMER_INTERVAL;
    public static final int CONNECTION_LINGER_TIME;
    protected java.util.concurrent.ConcurrentHashMap retransmissionAlertTransactions;
    protected java.util.concurrent.ConcurrentHashMap earlyDialogTable;
    protected java.util.concurrent.ConcurrentHashMap dialogTable;
    protected static final java.util.Set dialogCreatingMethods;
    private java.util.Timer timer;
    private java.util.concurrent.ConcurrentHashMap pendingTransactions;
    private java.util.concurrent.ConcurrentHashMap clientTransactionTable;
    protected boolean unlimitedServerTransactionTableSize;
    protected boolean unlimitedClientTransactionTableSize;
    protected int serverTransactionTableHighwaterMark;
    protected int serverTransactionTableLowaterMark;
    protected int clientTransactionTableHiwaterMark;
    protected int clientTransactionTableLowaterMark;
    private java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount;
    private java.util.concurrent.ConcurrentHashMap serverTransactionTable;
    private java.util.concurrent.ConcurrentHashMap mergeTable;
    private java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck;
    private java.util.concurrent.ConcurrentHashMap forkedClientTransactionTable;
    private gov.nist.core.StackLogger stackLogger;
    protected gov.nist.core.ServerLogger serverLogger;
    boolean udpFlag;
    protected gov.nist.javax.sip.stack.DefaultRouter defaultRouter;
    protected boolean needsLogging;
    private boolean non2XXAckPassedToListener;
    protected gov.nist.javax.sip.stack.IOHandler ioHandler;
    protected boolean toExit;
    protected java.lang.String stackName;
    protected java.lang.String stackAddress;
    protected java.net.InetAddress stackInetAddress;
    protected gov.nist.javax.sip.stack.StackMessageFactory sipMessageFactory;
    protected javax.sip.address.Router router;
    protected int threadPoolSize;
    protected int maxConnections;
    protected boolean cacheServerConnections;
    protected boolean cacheClientConnections;
    protected boolean useRouterForAll;
    protected int maxContentLength;
    protected int maxMessageSize;
    private java.util.Collection messageProcessors;
    protected int readTimeout;
    protected gov.nist.core.net.NetworkLayer networkLayer;
    protected java.lang.String outboundProxy;
    protected java.lang.String routerPath;
    protected boolean isAutomaticDialogSupportEnabled;
    protected java.util.HashSet forkedEvents;
    protected boolean generateTimeStampHeader;
    protected gov.nist.core.net.AddressResolver addressResolver;
    protected int maxListenerResponseTime;
    protected boolean rfc2543Supported;
    protected gov.nist.core.ThreadAuditor threadAuditor;
    protected gov.nist.javax.sip.LogRecordFactory logRecordFactory;
    protected boolean cancelClientTransactionChecked;
    protected boolean remoteTagReassignmentAllowed;
    protected boolean logStackTraceOnMessageSend;
    protected int receiveUdpBufferSize;
    protected int sendUdpBufferSize;
    protected boolean stackDoesCongestionControl;
    protected boolean isBackToBackUserAgent;
    protected boolean checkBranchId;
    protected boolean isAutomaticDialogErrorHandlingEnabled;
    protected boolean isDialogTerminatedEventDeliveredForNullDialog;
    protected int maxForkTime;

    protected void <init>()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        gov.nist.core.ThreadAuditor $r2, $r16;
        java.util.HashSet $r3;
        java.util.ArrayList $r4;
        gov.nist.javax.sip.stack.IOHandler $r5;
        gov.nist.javax.sip.DefaultAddressResolver $r6;
        java.util.concurrent.ConcurrentHashMap $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r17;
        java.util.Timer $r14, $r19;
        gov.nist.javax.sip.stack.SIPTransactionStack$PingTimer $r18;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean unlimitedServerTransactionTableSize> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean unlimitedClientTransactionTableSize> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int serverTransactionTableHighwaterMark> = 5000;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int serverTransactionTableLowaterMark> = 4000;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int clientTransactionTableHiwaterMark> = 1000;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int clientTransactionTableLowaterMark> = 800;

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount> = $r1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean rfc2543Supported> = 1;

        $r2 = new gov.nist.core.ThreadAuditor;

        specialinvoke $r2.<gov.nist.core.ThreadAuditor: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ThreadAuditor threadAuditor> = $r2;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cancelClientTransactionChecked> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean remoteTagReassignmentAllowed> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean logStackTraceOnMessageSend> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean stackDoesCongestionControl> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isBackToBackUserAgent> = 0;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isAutomaticDialogErrorHandlingEnabled> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isDialogTerminatedEventDeliveredForNullDialog> = 0;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxForkTime> = 0;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean toExit> = 0;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.HashSet forkedEvents> = $r3;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int threadPoolSize> = -1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cacheServerConnections> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cacheClientConnections> = 1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxConnections> = -1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors> = $r4;

        $r5 = new gov.nist.javax.sip.stack.IOHandler;

        specialinvoke $r5.<gov.nist.javax.sip.stack.IOHandler: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack)>(r0);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler> = $r5;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int readTimeout> = -1;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxListenerResponseTime> = -1;

        $r6 = new gov.nist.javax.sip.DefaultAddressResolver;

        specialinvoke $r6.<gov.nist.javax.sip.DefaultAddressResolver: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.AddressResolver addressResolver> = $r6;

        $r7 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable> = $r7;

        $r8 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r8.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable> = $r8;

        $r9 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r9.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable> = $r9;

        $r10 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r10.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable> = $r10;

        $r11 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r11.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck> = $r11;

        $r12 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r12.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap mergeTable> = $r12;

        $r13 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r13.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap retransmissionAlertTransactions> = $r13;

        $r14 = new java.util.Timer;

        specialinvoke $r14.<java.util.Timer: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer> = $r14;

        $r15 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r15.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap pendingTransactions> = $r15;

        $r17 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r17.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap forkedClientTransactionTable> = $r17;

        $r16 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ThreadAuditor getThreadAuditor()>();

        $z0 = virtualinvoke $r16.<gov.nist.core.ThreadAuditor: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r19 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer>;

        $r18 = new gov.nist.javax.sip.stack.SIPTransactionStack$PingTimer;

        specialinvoke $r18.<gov.nist.javax.sip.stack.SIPTransactionStack$PingTimer: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.core.ThreadAuditor$ThreadHandle)>(r0, null);

        virtualinvoke $r19.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r18, 0L);

     label1:
        return;
    }

    protected void reInit()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.StackLogger $r1, $r15;
        boolean $z0;
        java.util.ArrayList $r2;
        gov.nist.javax.sip.stack.IOHandler $r3;
        java.util.concurrent.ConcurrentHashMap $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.util.Timer $r13;
        java.util.concurrent.atomic.AtomicInteger $r14;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r1.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r15 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r15.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Re-initializing !");

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors> = $r2;

        $r3 = new gov.nist.javax.sip.stack.IOHandler;

        specialinvoke $r3.<gov.nist.javax.sip.stack.IOHandler: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack)>(r0);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap pendingTransactions> = $r4;

        $r5 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r5.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable> = $r5;

        $r6 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable> = $r6;

        $r7 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap retransmissionAlertTransactions> = $r7;

        $r8 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r8.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap mergeTable> = $r8;

        $r9 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r9.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable> = $r9;

        $r10 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r10.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable> = $r10;

        $r11 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r11.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck> = $r11;

        $r12 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r12.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap forkedClientTransactionTable> = $r12;

        $r13 = new java.util.Timer;

        specialinvoke $r13.<java.util.Timer: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer> = $r13;

        $r14 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r14.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount> = $r14;

        return;
    }

    public java.net.SocketAddress obtainLocalAddress(java.net.InetAddress, int, java.net.InetAddress, int) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.net.InetAddress r1, r2;
        int i0, i1;
        gov.nist.javax.sip.stack.IOHandler $r3;
        java.net.SocketAddress $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler>;

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.stack.IOHandler: java.net.SocketAddress obtainLocalAddress(java.net.InetAddress,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        return $r4;
    }

    public void disableLogging()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.StackLogger $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r1.<gov.nist.core.StackLogger: void disableLogging()>();

        return;
    }

    public void enableLogging()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.StackLogger $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r1.<gov.nist.core.StackLogger: void enableLogging()>();

        return;
    }

    public void printDialogTable()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0;
        gov.nist.core.StackLogger $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r7, $r9, $r11;
        java.util.concurrent.ConcurrentHashMap $r4, $r10;
        java.lang.String $r6, $r12;
        java.io.PrintStream $r8;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dialog table  = ");

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r6);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dialog table = ");

        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label1:
        return;
    }

    public gov.nist.javax.sip.stack.SIPServerTransaction getRetransmissionAlertTransaction(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        gov.nist.javax.sip.stack.SIPServerTransaction $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap retransmissionAlertTransactions>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r3;

        return $r4;
    }

    public static boolean isDialogCreated(java.lang.String)
    {
        java.lang.String r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Set dialogCreatingMethods>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        return $z0;
    }

    public void addExtensionMethod(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1, $r3, $r4;
        boolean $z0, $z2;
        java.util.Set $r2;
        gov.nist.core.StackLogger $r5, $r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("NOTIFY");

        if $z0 == 0 goto label1;

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r5.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label2;

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r6.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("NOTIFY Supported Natively");

        goto label2;

     label1:
        $r2 = <gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Set dialogCreatingMethods>;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r4);

     label2:
        return;
    }

    public void putDialog(gov.nist.javax.sip.stack.SIPDialog)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPDialog r1;
        java.lang.String r2, $r14, $r25;
        java.util.concurrent.ConcurrentHashMap $r3, $r6, $r21;
        boolean $z0, $z1, $z2, $z3;
        gov.nist.core.StackLogger $r4, $r5, $r8, $r10, $r16, $r17;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r15, $r18, $r19, $r20, $r22, $r23;
        java.lang.Object $r24;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPDialog;

        r2 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r16 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z3 = interfaceinvoke $r16.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label1;

        $r17 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("putDialog: dialog already exists");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in table = ");

        $r21 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r24 = virtualinvoke $r21.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r25);

     label1:
        return;

     label2:
        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z1 = interfaceinvoke $r4.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label3;

        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("putDialog dialogId=");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dialog = ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r14);

     label3:
        virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: void setStack(gov.nist.javax.sip.stack.SIPTransactionStack)>(r0);

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r5.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label4;

        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r8.<gov.nist.core.StackLogger: void logStackTrace()>();

     label4:
        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        return;
    }

    public gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPTransaction r1;
        java.lang.String r2;
        gov.nist.javax.sip.stack.SIPDialog r3, $r4, $r9, $r17, r18;
        boolean $z0;
        javax.sip.message.Request $r5;
        gov.nist.javax.sip.message.SIPRequest $r6;
        java.util.concurrent.ConcurrentHashMap $r7, $r10, $r11, $r16;
        java.lang.Object $r8, $r13;
        javax.sip.DialogState $r12, $r14, $r15;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransaction;

        $z0 = r1 instanceof gov.nist.javax.sip.stack.SIPClientTransaction;

        if $z0 == 0 goto label6;

        $r5 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.message.Request getRequest()>();

        $r6 = (gov.nist.javax.sip.message.SIPRequest) $r5;

        r2 = virtualinvoke $r6.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        if $r8 == null goto label4;

        $r11 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        $r13 = virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (gov.nist.javax.sip.stack.SIPDialog) $r13;

        $r12 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        if $r12 == null goto label1;

        $r15 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r14 = <javax.sip.DialogState: javax.sip.DialogState EARLY>;

        if $r15 != $r14 goto label2;

     label1:
        r18 = r3;

        goto label3;

     label2:
        $r17 = new gov.nist.javax.sip.stack.SIPDialog;

        specialinvoke $r17.<gov.nist.javax.sip.stack.SIPDialog: void <init>(gov.nist.javax.sip.stack.SIPTransaction)>(r1);

        r18 = $r17;

        $r16 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        virtualinvoke $r16.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r18);

     label3:
        goto label5;

     label4:
        $r9 = new gov.nist.javax.sip.stack.SIPDialog;

        specialinvoke $r9.<gov.nist.javax.sip.stack.SIPDialog: void <init>(gov.nist.javax.sip.stack.SIPTransaction)>(r1);

        r18 = $r9;

        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r18);

     label5:
        goto label7;

     label6:
        $r4 = new gov.nist.javax.sip.stack.SIPDialog;

        specialinvoke $r4.<gov.nist.javax.sip.stack.SIPDialog: void <init>(gov.nist.javax.sip.stack.SIPTransaction)>(r1);

        r18 = $r4;

     label7:
        return r18;
    }

    public gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPClientTransaction, gov.nist.javax.sip.message.SIPResponse)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPClientTransaction r1;
        gov.nist.javax.sip.message.SIPResponse r2;
        java.lang.String r3;
        javax.sip.message.Request $r4;
        gov.nist.javax.sip.message.SIPRequest $r5;
        java.util.concurrent.ConcurrentHashMap $r6, $r9, $r11;
        java.lang.Object $r7, $r10;
        gov.nist.javax.sip.stack.SIPDialog $r8, r12;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPClientTransaction;

        r2 := @parameter1: gov.nist.javax.sip.message.SIPResponse;

        $r4 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPClientTransaction: javax.sip.message.Request getRequest()>();

        $r5 = (gov.nist.javax.sip.message.SIPRequest) $r4;

        r3 = virtualinvoke $r5.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r3);

        if $r7 == null goto label1;

        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r3);

        r12 = (gov.nist.javax.sip.stack.SIPDialog) $r10;

        $z0 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPResponse: boolean isFinalResponse()>();

        if $z0 == 0 goto label2;

        $r11 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r3);

        goto label2;

     label1:
        $r8 = new gov.nist.javax.sip.stack.SIPDialog;

        specialinvoke $r8.<gov.nist.javax.sip.stack.SIPDialog: void <init>(gov.nist.javax.sip.stack.SIPClientTransaction,gov.nist.javax.sip.message.SIPResponse)>(r1, r2);

        r12 = $r8;

     label2:
        return r12;
    }

    public gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.SipProviderImpl, gov.nist.javax.sip.message.SIPResponse)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.SipProviderImpl r1;
        gov.nist.javax.sip.message.SIPResponse r2;
        gov.nist.javax.sip.stack.SIPDialog $r3;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.SipProviderImpl;

        r2 := @parameter1: gov.nist.javax.sip.message.SIPResponse;

        $r3 = new gov.nist.javax.sip.stack.SIPDialog;

        specialinvoke $r3.<gov.nist.javax.sip.stack.SIPDialog: void <init>(gov.nist.javax.sip.SipProviderImpl,gov.nist.javax.sip.message.SIPResponse)>(r1, r2);

        return $r3;
    }

    public void removeDialog(gov.nist.javax.sip.stack.SIPDialog)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPDialog r1;
        java.lang.String r2, r3;
        java.lang.Object r4;
        javax.sip.DialogTerminatedEvent r5, $r6, $r11, r19;
        boolean $z0, $z1, $z2;
        gov.nist.javax.sip.SipProviderImpl $r7, $r8, $r10, $r13;
        java.util.concurrent.ConcurrentHashMap $r9, $r12, $r14, $r16;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPDialog;

        r2 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        r3 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getEarlyDialogId()>();

        if r3 == null goto label1;

        $r14 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        virtualinvoke $r14.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r3);

        $r16 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        virtualinvoke $r16.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r3);

     label1:
        if r2 == null goto label4;

        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        r4 = virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        if r4 != r1 goto label2;

        $r12 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r2);

     label2:
        $z2 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: boolean testAndSetIsDialogTerminatedEventDelivered()>();

        if $z2 != 0 goto label3;

        $r11 = new javax.sip.DialogTerminatedEvent;

        $r10 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        specialinvoke $r11.<javax.sip.DialogTerminatedEvent: void <init>(java.lang.Object,javax.sip.Dialog)>($r10, r1);

        r5 = $r11;

        $r13 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        virtualinvoke $r13.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r5, null);

     label3:
        goto label5;

     label4:
        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isDialogTerminatedEventDeliveredForNullDialog>;

        if $z0 == 0 goto label5;

        $z1 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: boolean testAndSetIsDialogTerminatedEventDelivered()>();

        if $z1 != 0 goto label5;

        $r6 = new javax.sip.DialogTerminatedEvent;

        $r7 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        specialinvoke $r6.<javax.sip.DialogTerminatedEvent: void <init>(java.lang.Object,javax.sip.Dialog)>($r7, r1);

        r19 = $r6;

        $r8 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        virtualinvoke $r8.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r19, null);

     label5:
        return;
    }

    public gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1, $r12;
        gov.nist.javax.sip.stack.SIPDialog r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.Object $r4;
        gov.nist.core.StackLogger $r5, $r7;
        boolean $z0;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (gov.nist.javax.sip.stack.SIPDialog) $r4;

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r5.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getDialog(");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") : returning ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r12);

     label1:
        return r2;
    }

    public void removeDialog(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1;
        gov.nist.core.StackLogger $r2, $r5;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r3;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r2.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r5.<gov.nist.core.StackLogger: void logWarning(java.lang.String)>("Silently removing dialog from table");

     label1:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    public gov.nist.javax.sip.stack.SIPClientTransaction findSubscribeTransaction(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.ListeningPointImpl)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.ListeningPointImpl r2;
        gov.nist.javax.sip.stack.SIPClientTransaction r3, r6, r7, r10, r85, r86;
        java.util.Iterator r4;
        java.lang.String r5, r8, $r21, $r23, $r27, $r31, $r37, $r40, $r43, $r52, $r54, $r60, $r68, $r72, $r80;
        gov.nist.javax.sip.header.Event r9, r84;
        java.lang.Throwable r11, $r75;
        java.util.concurrent.ConcurrentHashMap $r12, $r78;
        java.util.Collection $r13;
        gov.nist.core.StackLogger $r14, $r17, $r20, $r26, $r30, $r32, $r35, $r46, $r49, $r53, $r56, $r61, $r62, $r64, $r69, $r70, $r74, $r77, $r81;
        javax.sip.header.ToHeader $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        javax.sip.header.Header $r16;
        java.lang.StringBuilder $r18, $r19, $r22, $r33, $r34, $r36, $r38, $r39, $r41, $r42, $r44, $r45, $r47, $r48, $r50, $r51, $r55, $r57, $r58, $r59, $r63, $r65, $r66, $r67, $r71, $r73, $r76, $r79, $r82, $r83;
        java.lang.Object $r24;
        gov.nist.javax.sip.header.From $r25;
        gov.nist.javax.sip.header.CallID $r28;
        javax.sip.header.CallIdHeader $r29;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.ListeningPointImpl;

        r3 = null;

     label01:
        $r12 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r13 = virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r4 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

        $r14 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r14.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label02;

        $r77 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ct table size = ");

        $r78 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $i0 = virtualinvoke $r78.<java.util.concurrent.ConcurrentHashMap: int size()>();

        $r73 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r72 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r77.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r72);

     label02:
        $r15 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.ToHeader getTo()>();

        r5 = interfaceinvoke $r15.<javax.sip.header.ToHeader: java.lang.String getTag()>();

        if r5 != null goto label05;

        r6 = r3;

     label03:
        $r69 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z12 = interfaceinvoke $r69.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z12 == 0 goto label04;

        $r70 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findSubscribeTransaction : returning ");

        $r65 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r68 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r70.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r68);

     label04:
        return r6;

     label05:
        $r16 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.Header getHeader(java.lang.String)>("Event");

        r84 = (gov.nist.javax.sip.header.Event) $r16;

        if r84 != null goto label09;

        $r53 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z10 = interfaceinvoke $r53.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z10 == 0 goto label06;

        $r61 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r61.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("event Header is null -- returning null");

     label06:
        r7 = r3;

     label07:
        $r62 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z11 = interfaceinvoke $r62.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z11 == 0 goto label08;

        $r64 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findSubscribeTransaction : returning ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r64.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r60);

     label08:
        return r7;

     label09:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label17;

        $r24 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r85 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r24;

        $r23 = virtualinvoke r85.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getMethod()>();

        $z3 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>("SUBSCRIBE");

        if $z3 != 0 goto label10;

        goto label09;

     label10:
        $r25 = r85.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.header.From 'from'>;

        r8 = virtualinvoke $r25.<gov.nist.javax.sip.header.From: java.lang.String getTag()>();

        r9 = r85.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.header.Event event>;

        if r9 != null goto label11;

        goto label09;

     label11:
        $r26 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z4 = interfaceinvoke $r26.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label12;

        $r35 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ct.fromTag = ");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r35.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r40);

        $r46 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("thisToTag = ");

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r46.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r43);

        $r49 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hisEvent = ");

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r54 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r49.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r54);

        $r56 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eventHdr ");

        $r51 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r84);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r56.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r52);

     label12:
        $z5 = virtualinvoke r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5);

        if $z5 == 0 goto label16;

        if r9 == null goto label16;

        $z6 = virtualinvoke r84.<gov.nist.javax.sip.header.Event: boolean match(gov.nist.javax.sip.header.Event)>(r9);

        if $z6 == 0 goto label16;

        $r29 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CallIdHeader getCallId()>();

        $r27 = interfaceinvoke $r29.<javax.sip.header.CallIdHeader: java.lang.String getCallId()>();

        $r28 = r85.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.header.CallID callId>;

        $r31 = virtualinvoke $r28.<gov.nist.javax.sip.header.CallID: java.lang.String getCallId()>();

        $z8 = virtualinvoke $r27.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r31);

        if $z8 == 0 goto label16;

        $z7 = virtualinvoke r85.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean acquireSem()>();

        if $z7 == 0 goto label13;

        r3 = r85;

     label13:
        r10 = r3;

     label14:
        $r30 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z9 = interfaceinvoke $r30.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label15;

        $r32 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findSubscribeTransaction : returning ");

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r32.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r37);

     label15:
        return r10;

     label16:
        goto label09;

     label17:
        r86 = r3;

     label18:
        $r17 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r17.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label19;

        $r20 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findSubscribeTransaction : returning ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r21);

     label19:
        return r86;

     label20:
        $r75 := @caughtexception;

        r11 = $r75;

     label21:
        $r74 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z13 = interfaceinvoke $r74.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z13 == 0 goto label22;

        $r81 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r82 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findSubscribeTransaction : returning ");

        $r79 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r81.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r80);

     label22:
        throw r11;

        catch java.lang.Throwable from label01 to label03 with label20;
        catch java.lang.Throwable from label05 to label07 with label20;
        catch java.lang.Throwable from label09 to label14 with label20;
        catch java.lang.Throwable from label16 to label18 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    public void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        java.lang.String r2;
        javax.sip.message.Request $r3;
        gov.nist.javax.sip.message.SIPRequest $r4;
        gov.nist.javax.sip.header.Via $r5;
        java.util.concurrent.ConcurrentHashMap $r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r3 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.message.Request getRequest()>();

        $r4 = (gov.nist.javax.sip.message.SIPRequest) $r3;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        r2 = virtualinvoke $r5.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if r2 == null goto label1;

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck>;

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

     label1:
        return;
    }

    public gov.nist.javax.sip.stack.SIPServerTransaction findTransactionPendingAck(gov.nist.javax.sip.message.SIPRequest)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        gov.nist.javax.sip.header.Via $r3;
        java.lang.String $r4;
        java.lang.Object $r5;
        gov.nist.javax.sip.stack.SIPServerTransaction $r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck>;

        $r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $r5 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r5;

        return $r6;
    }

    public boolean removeTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        java.lang.String r2;
        javax.sip.message.Request $r3;
        gov.nist.javax.sip.message.SIPRequest $r4;
        gov.nist.javax.sip.header.Via $r5;
        java.util.concurrent.ConcurrentHashMap $r6, $r7;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r3 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.message.Request getRequest()>();

        $r4 = (gov.nist.javax.sip.message.SIPRequest) $r3;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        r2 = virtualinvoke $r5.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if r2 == null goto label1;

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck>;

        $z0 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck>;

        virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r2);

        return 1;

     label1:
        return 0;
    }

    public boolean isTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        java.lang.String r2;
        javax.sip.message.Request $r3;
        gov.nist.javax.sip.message.SIPRequest $r4;
        gov.nist.javax.sip.header.Via $r5;
        java.util.concurrent.ConcurrentHashMap $r6;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r3 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.message.Request getRequest()>();

        $r4 = (gov.nist.javax.sip.message.SIPRequest) $r3;

        $r5 = virtualinvoke $r4.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        r2 = virtualinvoke $r5.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap terminatedServerTransactionsPendingAck>;

        $z0 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: boolean contains(java.lang.Object)>(r2);

        return $z0;
    }

    public gov.nist.javax.sip.stack.SIPTransaction findTransaction(gov.nist.javax.sip.message.SIPMessage, boolean)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPMessage r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        gov.nist.javax.sip.stack.SIPTransaction r2, r5, r6, r76, r79;
        gov.nist.javax.sip.header.Via r3, r74;
        java.lang.String r4, $r8, $r15, $r23, $r30, $r38, $r39, $r44, $r52, $r61, $r67, r75;
        java.lang.Throwable r7, $r60;
        java.util.concurrent.ConcurrentHashMap $r9, $r24, $r37, $r49, $r66;
        java.util.Collection $r10, $r41;
        gov.nist.core.StackLogger $r11, $r12, $r18, $r20, $r26, $r27, $r28, $r35, $r42, $r43, $r48, $r51, $r53, $r56, $r62, $r69;
        java.lang.StringBuilder $r13, $r14, $r16, $r19, $r21, $r22, $r29, $r31, $r32, $r33, $r34, $r36, $r45, $r46, $r47, $r54, $r55, $r57, $r58, $r59, $r63, $r64, $r65, $r68, $r70, $r71;
        java.lang.Object $r17, $r25, $r40, $r50;
        java.util.Iterator r72, r77;
        gov.nist.javax.sip.stack.SIPServerTransaction r73;
        gov.nist.javax.sip.stack.SIPClientTransaction r78;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPMessage;

        z0 := @parameter1: boolean;

        r2 = null;

     label01:
        if z0 == 0 goto label11;

        r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r38 = virtualinvoke r3.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if $r38 == null goto label05;

        r4 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String getTransactionId()>();

        $r49 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $r50 = virtualinvoke $r49.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r4);

        r2 = (gov.nist.javax.sip.stack.SIPTransaction) $r50;

        $r51 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z11 = interfaceinvoke $r51.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z11 == 0 goto label02;

        $r53 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("serverTx: looking for key ");

        $r64 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r63 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" existing=");

        $r66 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r66);

        $r61 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r53.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r61);

     label02:
        $z12 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("z9hg4bk");

        if $z12 == 0 goto label05;

        r5 = r2;

     label03:
        $r48 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z13 = interfaceinvoke $r48.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z13 == 0 goto label04;

        $r56 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findTransaction: returning  : ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r52 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r56.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r52);

     label04:
        return r5;

     label05:
        $r37 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $r41 = virtualinvoke $r37.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r72 = interfaceinvoke $r41.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z8 = interfaceinvoke r72.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label10;

        $r40 = interfaceinvoke r72.<java.util.Iterator: java.lang.Object next()>();

        r73 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r40;

        $z10 = virtualinvoke r73.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r1);

        if $z10 == 0 goto label09;

        r2 = r73;

        r6 = r2;

     label07:
        $r43 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z9 = interfaceinvoke $r43.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label08;

        $r42 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findTransaction: returning  : ");

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r42.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r44);

     label08:
        return r6;

     label09:
        goto label06;

     label10:
        goto label20;

     label11:
        r74 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r8 = virtualinvoke r74.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        if $r8 == null goto label15;

        r75 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPMessage: java.lang.String getTransactionId()>();

        $r26 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z5 = interfaceinvoke $r26.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label12;

        $r35 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clientTx: looking for key ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r75);

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r35.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r39);

     label12:
        $r24 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r25 = virtualinvoke $r24.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r75);

        r2 = (gov.nist.javax.sip.stack.SIPTransaction) $r25;

        $z7 = virtualinvoke r75.<java.lang.String: boolean startsWith(java.lang.String)>("z9hg4bk");

        if $z7 == 0 goto label15;

        r76 = r2;

     label13:
        $r28 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z6 = interfaceinvoke $r28.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z6 == 0 goto label14;

        $r27 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findTransaction: returning  : ");

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r30);

     label14:
        return r76;

     label15:
        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r10 = virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r77 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label16:
        $z1 = interfaceinvoke r77.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label20;

        $r17 = interfaceinvoke r77.<java.util.Iterator: java.lang.Object next()>();

        r78 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r17;

        $z3 = virtualinvoke r78.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r1);

        if $z3 == 0 goto label19;

        r2 = r78;

        r79 = r2;

     label17:
        $r18 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z4 = interfaceinvoke $r18.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label18;

        $r20 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findTransaction: returning  : ");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r23);

     label18:
        return r79;

     label19:
        goto label16;

     label20:
        $r11 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z2 = interfaceinvoke $r11.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label24;

        $r12 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findTransaction: returning  : ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r15);

        goto label24;

     label21:
        $r60 := @caughtexception;

        r7 = $r60;

     label22:
        $r62 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $z14 = interfaceinvoke $r62.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z14 == 0 goto label23;

        $r69 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger getStackLogger()>();

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findTransaction: returning  : ");

        $r70 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r67 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r69.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r67);

     label23:
        throw r7;

     label24:
        return r2;

        catch java.lang.Throwable from label01 to label03 with label21;
        catch java.lang.Throwable from label05 to label07 with label21;
        catch java.lang.Throwable from label09 to label13 with label21;
        catch java.lang.Throwable from label15 to label17 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    public gov.nist.javax.sip.stack.SIPTransaction findCancelTransaction(gov.nist.javax.sip.message.SIPRequest, boolean)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Iterator r2, r21;
        gov.nist.javax.sip.stack.SIPTransaction r3, r22;
        gov.nist.javax.sip.stack.SIPServerTransaction r4;
        gov.nist.core.StackLogger $r5, $r8, $r9, $r16;
        java.util.concurrent.ConcurrentHashMap $r6, $r11;
        java.util.Collection $r7, $r12;
        java.lang.Object $r10, $r13;
        java.lang.StringBuilder $r14, $r15, $r17, $r18, $r20;
        java.lang.String $r19;
        gov.nist.javax.sip.stack.SIPClientTransaction r23;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        z0 := @parameter1: boolean;

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z1 = interfaceinvoke $r5.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label1;

        $r16 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findCancelTransaction request= \n");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nfindCancelRequest isServer=");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r19);

     label1:
        if z0 == 0 goto label5;

        $r11 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $r12 = virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label4;

        $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (gov.nist.javax.sip.stack.SIPTransaction) $r13;

        r4 = (gov.nist.javax.sip.stack.SIPServerTransaction) r3;

        $z6 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean doesCancelMatchTransaction(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if $z6 == 0 goto label3;

        return r4;

     label3:
        goto label2;

     label4:
        goto label8;

     label5:
        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r21 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r10 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (gov.nist.javax.sip.stack.SIPTransaction) $r10;

        r23 = (gov.nist.javax.sip.stack.SIPClientTransaction) r22;

        $z4 = virtualinvoke r23.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean doesCancelMatchTransaction(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if $z4 == 0 goto label7;

        return r23;

     label7:
        goto label6;

     label8:
        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z3 = interfaceinvoke $r8.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label9;

        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r9.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Could not find transaction for cancel request");

     label9:
        return null;
    }

    protected void <init>(gov.nist.javax.sip.stack.StackMessageFactory)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.StackMessageFactory r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.StackMessageFactory;

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void <init>()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.StackMessageFactory sipMessageFactory> = r1;

        return;
    }

    public gov.nist.javax.sip.stack.SIPServerTransaction findPendingTransaction(gov.nist.javax.sip.message.SIPRequest)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.core.StackLogger $r2, $r8;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.String $r4, $r10, $r12;
        java.lang.Object $r5;
        gov.nist.javax.sip.stack.SIPServerTransaction $r6;
        java.lang.StringBuilder $r7, $r9, $r11;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r2.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("looking for pending tx for :");

        $r10 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r12);

     label1:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap pendingTransactions>;

        $r4 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        $r5 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r5;

        return $r6;
    }

    public gov.nist.javax.sip.stack.SIPServerTransaction findMergedTransaction(gov.nist.javax.sip.message.SIPRequest)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1, r8;
        java.lang.String r2, $r9, $r20, $r21;
        gov.nist.javax.sip.stack.SIPServerTransaction r3, r7, $r19, $r22;
        java.util.Iterator r4;
        javax.sip.Dialog r5;
        gov.nist.javax.sip.stack.SIPDialog r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.concurrent.ConcurrentHashMap $r10, $r12;
        java.lang.Object $r11, $r15;
        java.util.Collection $r13;
        javax.sip.Transaction $r14, $r16, $r17, $r18, $r23;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        $r9 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z0 != 0 goto label1;

        return null;

     label1:
        r2 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMergeId()>();

        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap mergeTable>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r11;

        if r2 != null goto label2;

        return null;

     label2:
        if r3 == null goto label3;

        $z5 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r1);

        if $z5 != 0 goto label3;

        return r3;

     label3:
        $r12 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r13 = virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r4 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (javax.sip.Dialog) $r15;

        r6 = (gov.nist.javax.sip.stack.SIPDialog) r5;

        $r14 = virtualinvoke r6.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.Transaction getFirstTransaction()>();

        if $r14 == null goto label5;

        $r16 = virtualinvoke r6.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.Transaction getFirstTransaction()>();

        $z2 = $r16 instanceof javax.sip.ServerTransaction;

        if $z2 == 0 goto label5;

        $r18 = virtualinvoke r6.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.Transaction getFirstTransaction()>();

        r7 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r18;

        $r17 = virtualinvoke r6.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.Transaction getFirstTransaction()>();

        $r19 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r17;

        r8 = virtualinvoke $r19.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $z3 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r1);

        if $z3 != 0 goto label5;

        $r20 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMergeId()>();

        $r21 = virtualinvoke r8.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMergeId()>();

        $z4 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z4 == 0 goto label5;

        $r23 = virtualinvoke r6.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.Transaction getFirstTransaction()>();

        $r22 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r23;

        return $r22;

     label5:
        goto label4;

     label6:
        return null;
    }

    public void removePendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        gov.nist.core.StackLogger $r2, $r7;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.String $r4, $r9, $r11;
        java.lang.StringBuilder $r6, $r8, $r10;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r2.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removePendingTx: ");

        $r9 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPServerTransaction: java.lang.String getTransactionId()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r11);

     label1:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap pendingTransactions>;

        $r4 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPServerTransaction: java.lang.String getTransactionId()>();

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r4);

        return;
    }

    public void removeFromMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        java.lang.String r2;
        gov.nist.core.StackLogger $r3, $r8;
        boolean $z0;
        javax.sip.message.Request $r4;
        gov.nist.javax.sip.message.SIPRequest $r5;
        java.util.concurrent.ConcurrentHashMap $r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r3.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r8.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Removing tx from merge table ");

     label1:
        $r4 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.message.Request getRequest()>();

        $r5 = (gov.nist.javax.sip.message.SIPRequest) $r4;

        r2 = virtualinvoke $r5.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMergeId()>();

        if r2 == null goto label2;

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap mergeTable>;

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r2);

     label2:
        return;
    }

    public void putInMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction, gov.nist.javax.sip.message.SIPRequest)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        gov.nist.javax.sip.message.SIPRequest r2;
        java.lang.String r3;
        java.util.concurrent.ConcurrentHashMap $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        r2 := @parameter1: gov.nist.javax.sip.message.SIPRequest;

        r3 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMergeId()>();

        if r3 == null goto label1;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap mergeTable>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r1);

     label1:
        return;
    }

    public void mapTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $z0 = r1.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMapped>;

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addTransactionHash(gov.nist.javax.sip.stack.SIPTransaction)>(r1);

        r1.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMapped> = 1;

        return;
    }

    public gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.stack.MessageChannel r2, $r16;
        java.util.Iterator r3;
        gov.nist.javax.sip.stack.SIPServerTransaction r4, r5, r34;
        java.lang.String r6, $r12, $r14, $r15, $r23, $r24, $r28;
        gov.nist.javax.sip.message.SIPResponse r7;
        java.util.concurrent.ConcurrentHashMap $r8, $r10;
        java.lang.Object $r9, $r31;
        java.util.Collection $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        gov.nist.core.StackLogger $r13, $r21, $r33;
        gov.nist.javax.sip.stack.StackMessageFactory $r17;
        java.lang.StringBuilder $r18, $r20, $r22, $r25, $r26, $r29, $r30;
        gov.nist.javax.sip.stack.ServerRequestInterface $r19;
        gov.nist.javax.sip.header.Via $r27;
        java.lang.Exception $r32;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        r6 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: void setMessageChannel(java.lang.Object)>(r2);

        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r6);

        r5 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r9;

        if r5 == null goto label01;

        $z9 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r1);

        if $z9 != 0 goto label06;

     label01:
        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r3 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

        r5 = null;

        $r12 = virtualinvoke r6.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>("z9hg4bk");

        if $z0 != 0 goto label03;

     label02:
        $z5 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label03;

        if r5 != null goto label03;

        $r31 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r31;

        $z8 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r1);

        if $z8 == 0 goto label02;

        r5 = r4;

        goto label02;

     label03:
        if r5 != null goto label06;

        r34 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPServerTransaction findPendingTransaction(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if r34 == null goto label05;

        virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: void setTransaction(java.lang.Object)>(r34);

        if r34 == null goto label04;

        $z6 = virtualinvoke r34.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean acquireSem()>();

        if $z6 == 0 goto label04;

        return r34;

     label04:
        return null;

     label05:
        r5 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPServerTransaction createServerTransaction(gov.nist.javax.sip.stack.MessageChannel)>(r2);

        if r5 == null goto label06;

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r1);

        virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: void setTransaction(java.lang.Object)>(r5);

     label06:
        $r13 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z1 = interfaceinvoke $r13.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label07;

        $r21 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("newSIPServerRequest( ");

        $r23 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r27 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.Via getTopmostVia()>();

        $r24 = virtualinvoke $r27.<gov.nist.javax.sip.header.Via: java.lang.String getBranch()>();

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("):");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r28);

     label07:
        if r5 == null goto label08;

        $r17 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.StackMessageFactory sipMessageFactory>;

        $r19 = interfaceinvoke $r17.<gov.nist.javax.sip.stack.StackMessageFactory: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>(r1, r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setRequestInterface(gov.nist.javax.sip.stack.ServerRequestInterface)>($r19);

     label08:
        if r5 == null goto label09;

        $z4 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean acquireSem()>();

        if $z4 == 0 goto label09;

        return r5;

     label09:
        if r5 == null goto label14;

     label10:
        $z2 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r1);

        if $z2 == 0 goto label11;

        $r14 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: java.lang.String getMethod()>();

        $r15 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z3 == 0 goto label11;

        r7 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(100);

        virtualinvoke r7.<gov.nist.javax.sip.message.SIPResponse: void removeContent()>();

        $r16 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: gov.nist.javax.sip.stack.MessageChannel getMessageChannel()>();

        virtualinvoke $r16.<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>(r7);

     label11:
        goto label13;

     label12:
        $r32 := @caughtexception;

        $z7 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z7 == 0 goto label13;

        $r33 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r33.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Exception occured sending TRYING");

     label13:
        return null;

     label14:
        return null;

        catch java.lang.Exception from label10 to label11 with label12;
    }

    public gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPResponse r1;
        gov.nist.javax.sip.stack.MessageChannel r2;
        java.util.Iterator r3;
        gov.nist.javax.sip.stack.SIPClientTransaction r4, r5;
        java.lang.String r6;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        gov.nist.javax.sip.stack.ServerResponseInterface r7, $r19;
        java.util.concurrent.ConcurrentHashMap $r8, $r10;
        java.lang.Object $r9, $r21;
        java.util.Collection $r11;
        gov.nist.core.StackLogger $r12, $r13, $r14, $r16, $r17, $r18;
        gov.nist.javax.sip.stack.StackMessageFactory $r15, $r20;
        long $l0, $l1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPResponse;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        r6 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getTransactionId()>();

        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r6);

        r5 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r9;

        if r5 == null goto label01;

        $z7 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r1);

        if $z7 != 0 goto label05;

        $z8 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("z9hg4bk");

        if $z8 != 0 goto label05;

     label01:
        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r3 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

        r5 = null;

     label02:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        if r5 != null goto label03;

        $r21 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r21;

        $z6 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean isMessagePartOfTransaction(gov.nist.javax.sip.message.SIPMessage)>(r1);

        if $z6 == 0 goto label02;

        r5 = r4;

        goto label02;

     label03:
        if r5 != null goto label05;

        $r18 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z5 = interfaceinvoke $r18.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z5 == 0 goto label04;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r2.<gov.nist.javax.sip.stack.MessageChannel: void logResponse(gov.nist.javax.sip.message.SIPResponse,long,java.lang.String)>(r1, $l1, "before processing");

     label04:
        $r20 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.StackMessageFactory sipMessageFactory>;

        $r19 = interfaceinvoke $r20.<gov.nist.javax.sip.stack.StackMessageFactory: gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>(r1, r2);

        return $r19;

     label05:
        z0 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPClientTransaction: boolean acquireSem()>();

        $r12 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r12.<gov.nist.core.StackLogger: boolean isLoggingEnabled(int)>(16);

        if $z2 == 0 goto label06;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPClientTransaction: void logResponse(gov.nist.javax.sip.message.SIPResponse,long,java.lang.String)>(r1, $l0, "before processing");

     label06:
        if z0 == 0 goto label10;

        $r15 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.StackMessageFactory sipMessageFactory>;

        r7 = interfaceinvoke $r15.<gov.nist.javax.sip.stack.StackMessageFactory: gov.nist.javax.sip.stack.ServerResponseInterface newSIPServerResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>(r1, r5);

        if r7 == null goto label07;

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPClientTransaction: void setResponseInterface(gov.nist.javax.sip.stack.ServerResponseInterface)>(r7);

        goto label09;

     label07:
        $r16 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z4 = interfaceinvoke $r16.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label08;

        $r17 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r17.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("returning null - serverResponseInterface is null!");

     label08:
        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPClientTransaction: void releaseSem()>();

        return null;

     label09:
        goto label11;

     label10:
        $r13 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z3 = interfaceinvoke $r13.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label11;

        $r14 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r14.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Could not aquire semaphore !!");

     label11:
        if z0 == 0 goto label12;

        return r5;

     label12:
        return null;
    }

    public gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageProcessor, javax.sip.address.Hop) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.stack.MessageProcessor r2;
        javax.sip.address.Hop r3;
        gov.nist.javax.sip.stack.SIPClientTransaction r4, $r11, $r13;
        gov.nist.core.Host r5, $r8;
        gov.nist.core.HostPort r6, $r10;
        gov.nist.javax.sip.stack.MessageChannel r7;
        java.lang.String $r9, $r12;
        int $i0, $i1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageProcessor;

        r3 := @parameter2: javax.sip.address.Hop;

        $r8 = new gov.nist.core.Host;

        specialinvoke $r8.<gov.nist.core.Host: void <init>()>();

        r5 = $r8;

        $r9 = interfaceinvoke r3.<javax.sip.address.Hop: java.lang.String getHost()>();

        virtualinvoke r5.<gov.nist.core.Host: void setHostname(java.lang.String)>($r9);

        $r10 = new gov.nist.core.HostPort;

        specialinvoke $r10.<gov.nist.core.HostPort: void <init>()>();

        r6 = $r10;

        virtualinvoke r6.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>(r5);

        $i0 = interfaceinvoke r3.<javax.sip.address.Hop: int getPort()>();

        virtualinvoke r6.<gov.nist.core.HostPort: void setPort(int)>($i0);

        r7 = virtualinvoke r2.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.core.HostPort)>(r6);

        if r7 != null goto label1;

        return null;

     label1:
        r4 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPClientTransaction createClientTransaction(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>(r1, r7);

        $r11 = (gov.nist.javax.sip.stack.SIPClientTransaction) r4;

        $i1 = interfaceinvoke r3.<javax.sip.address.Hop: int getPort()>();

        virtualinvoke $r11.<gov.nist.javax.sip.stack.SIPClientTransaction: void setViaPort(int)>($i1);

        $r13 = (gov.nist.javax.sip.stack.SIPClientTransaction) r4;

        $r12 = interfaceinvoke r3.<javax.sip.address.Hop: java.lang.String getHost()>();

        virtualinvoke $r13.<gov.nist.javax.sip.stack.SIPClientTransaction: void setViaHost(java.lang.String)>($r12);

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addTransactionHash(gov.nist.javax.sip.stack.SIPTransaction)>(r4);

        return r4;
    }

    public gov.nist.javax.sip.stack.SIPClientTransaction createClientTransaction(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.stack.MessageChannel r2;
        gov.nist.javax.sip.stack.SIPClientTransaction r3, $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        $r4 = new gov.nist.javax.sip.stack.SIPClientTransaction;

        specialinvoke $r4.<gov.nist.javax.sip.stack.SIPClientTransaction: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.MessageChannel)>(r0, r2);

        r3 = $r4;

        virtualinvoke r3.<gov.nist.javax.sip.stack.SIPClientTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>(r1);

        return r3;
    }

    public gov.nist.javax.sip.stack.SIPServerTransaction createServerTransaction(gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.MessageChannel r1;
        float f0, $f1, $f2;
        boolean z0, $z1, $z2;
        java.util.concurrent.ConcurrentHashMap $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double $d0, $d1, $d2;
        byte $b6;
        gov.nist.javax.sip.stack.SIPServerTransaction $r3, $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.MessageChannel;

        $z1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean unlimitedServerTransactionTableSize>;

        if $z1 == 0 goto label1;

        $r4 = new gov.nist.javax.sip.stack.SIPServerTransaction;

        specialinvoke $r4.<gov.nist.javax.sip.stack.SIPServerTransaction: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.MessageChannel)>(r0, r1);

        return $r4;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: int size()>();

        $i1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int serverTransactionTableLowaterMark>;

        $i2 = $i0 - $i1;

        $f2 = (float) $i2;

        $i4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int serverTransactionTableHighwaterMark>;

        $i3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int serverTransactionTableLowaterMark>;

        $i5 = $i4 - $i3;

        $f1 = (float) $i5;

        f0 = $f2 / $f1;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        $d1 = (double) f0;

        $d2 = 1.0 - $d1;

        $b6 = $d0 cmpl $d2;

        if $b6 <= 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z0 = $z2;

        if z0 == 0 goto label4;

        return null;

     label4:
        $r3 = new gov.nist.javax.sip.stack.SIPServerTransaction;

        specialinvoke $r3.<gov.nist.javax.sip.stack.SIPServerTransaction: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.MessageChannel)>(r0, r1);

        return $r3;
    }

    public int getClientTransactionTableSize()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        return $i0;
    }

    public int getServerTransactionTableSize()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        return $i0;
    }

    public void addTransaction(gov.nist.javax.sip.stack.SIPClientTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPClientTransaction r1;
        gov.nist.core.StackLogger $r2, $r4;
        boolean $z0;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPClientTransaction;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r2.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("added transaction ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r7);

     label1:
        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addTransactionHash(gov.nist.javax.sip.stack.SIPTransaction)>(r1);

        return;
    }

    public void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPTransaction r1;
        java.lang.String r2, r4, $r17, $r19, $r34, $r36, r38;
        java.lang.Object r3, r39;
        gov.nist.javax.sip.SipProviderImpl r5, r42;
        javax.sip.TransactionTerminatedEvent r6, $r10, $r26, r43;
        gov.nist.core.StackLogger $r7, $r9, $r14, $r21, $r28, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8;
        java.util.concurrent.ConcurrentHashMap $r8, $r23;
        java.lang.StringBuilder $r11, $r13, $r15, $r16, $r18, $r29, $r32, $r33, $r35, $r37;
        javax.sip.ClientTransaction $r12;
        gov.nist.javax.sip.stack.SIPTransactionStack$RemoveForkedTransactionTimerTask $r20, r41;
        int $i0, $i1, $i2;
        long $l3;
        java.util.Timer $r22;
        gov.nist.javax.sip.stack.SIPServerTransaction $r24, $r25, $r31;
        javax.sip.ServerTransaction $r27;
        gov.nist.javax.sip.stack.SIPClientTransaction r40;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransaction;

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r7.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r28 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing Transaction = ");

        $r34 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransactionId()>();

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transaction = ");

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r28.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r36);

     label1:
        $z1 = r1 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z1 == 0 goto label5;

        $r21 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z5 = interfaceinvoke $r21.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label2;

        $r30 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r30.<gov.nist.core.StackLogger: void logStackTrace()>();

     label2:
        r2 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransactionId()>();

        $r23 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        r3 = virtualinvoke $r23.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r2);

        r4 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getMethod()>();

        $r24 = (gov.nist.javax.sip.stack.SIPServerTransaction) r1;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void removePendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>($r24);

        $r25 = (gov.nist.javax.sip.stack.SIPServerTransaction) r1;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean removeTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>($r25);

        $z7 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("INVITE");

        if $z7 == 0 goto label3;

        $r31 = (gov.nist.javax.sip.stack.SIPServerTransaction) r1;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void removeFromMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction)>($r31);

     label3:
        r5 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        if r3 == null goto label4;

        $z8 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: boolean testAndSetTransactionTerminatedEvent()>();

        if $z8 == 0 goto label4;

        $r26 = new javax.sip.TransactionTerminatedEvent;

        $r27 = (javax.sip.ServerTransaction) r1;

        specialinvoke $r26.<javax.sip.TransactionTerminatedEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction)>(r5, $r27);

        r6 = $r26;

        virtualinvoke r5.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r6, r1);

     label4:
        goto label7;

     label5:
        r38 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransactionId()>();

        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        r39 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r38);

        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r9.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label6;

        $r14 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REMOVED client tx ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" KEY = ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r17);

        if r39 == null goto label6;

        r40 = (gov.nist.javax.sip.stack.SIPClientTransaction) r39;

        $r19 = virtualinvoke r40.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getMethod()>();

        $z4 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z4 == 0 goto label6;

        $i0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxForkTime>;

        if $i0 == 0 goto label6;

        $r20 = new gov.nist.javax.sip.stack.SIPTransactionStack$RemoveForkedTransactionTimerTask;

        specialinvoke $r20.<gov.nist.javax.sip.stack.SIPTransactionStack$RemoveForkedTransactionTimerTask: void <init>(gov.nist.javax.sip.stack.SIPTransactionStack,gov.nist.javax.sip.stack.SIPClientTransaction)>(r0, r40);

        r41 = $r20;

        $r22 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer>;

        $i2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxForkTime>;

        $i1 = $i2 * 1000;

        $l3 = (long) $i1;

        virtualinvoke $r22.<java.util.Timer: void schedule(java.util.TimerTask,long)>(r41, $l3);

     label6:
        if r39 == null goto label7;

        $z3 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: boolean testAndSetTransactionTerminatedEvent()>();

        if $z3 == 0 goto label7;

        r42 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        $r10 = new javax.sip.TransactionTerminatedEvent;

        $r12 = (javax.sip.ClientTransaction) r1;

        specialinvoke $r10.<javax.sip.TransactionTerminatedEvent: void <init>(java.lang.Object,javax.sip.ClientTransaction)>(r42, $r12);

        r43 = $r10;

        virtualinvoke r42.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r43, r1);

     label7:
        return;
    }

    public void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        gov.nist.core.StackLogger $r2, $r4;
        boolean $z0;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r2.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("added transaction ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r7);

     label1:
        virtualinvoke r1.<gov.nist.javax.sip.stack.SIPServerTransaction: void map()>();

        specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addTransactionHash(gov.nist.javax.sip.stack.SIPTransaction)>(r1);

        return;
    }

    private void addTransactionHash(gov.nist.javax.sip.stack.SIPTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPTransaction r1;
        gov.nist.javax.sip.message.SIPRequest r2;
        java.util.concurrent.ConcurrentHashMap r3, $r7, $r15, $r24, $r26;
        java.lang.Throwable r4, $r30;
        boolean $z0, $z1, $z2, $z3, $z4;
        gov.nist.core.StackLogger $r5, $r10, $r17, $r21, $r29, $r31;
        gov.nist.javax.sip.stack.SIPServerTransaction $r6;
        java.lang.StringBuilder $r9, $r11, $r13, $r19, $r20, $r23;
        java.lang.String $r12, $r22, r33, r34;
        java.util.concurrent.atomic.AtomicInteger $r14, $r25, $r27;
        gov.nist.javax.sip.stack.SIPClientTransaction $r16;
        int $i1, $i2;
        java.lang.Exception $r28, r32;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransaction;

        r2 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        $z0 = r1 instanceof gov.nist.javax.sip.stack.SIPClientTransaction;

        if $z0 == 0 goto label12;

        $z2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean unlimitedClientTransactionTableSize>;

        if $z2 != 0 goto label09;

        $r25 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount>;

        $i2 = virtualinvoke $r25.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int clientTransactionTableHiwaterMark>;

        if $i2 <= $i1 goto label10;

     label01:
        $r24 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        r3 = $r24;

        entermonitor $r24;

     label02:
        $r26 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        virtualinvoke $r26.<java.lang.Object: void wait()>();

        $r27 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount>;

        virtualinvoke $r27.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        exitmonitor r3;

     label03:
        goto label06;

     label04:
        $r30 := @caughtexception;

        r4 = $r30;

        exitmonitor r3;

     label05:
        throw r4;

     label06:
        goto label10;

     label07:
        $r28 := @caughtexception;

        r32 = $r28;

        $r29 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z4 = interfaceinvoke $r29.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label08;

        $r31 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r31.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Exception occured while waiting for room", r32);

     label08:
        goto label10;

     label09:
        $r14 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount>;

        virtualinvoke $r14.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label10:
        r33 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        $r15 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r16 = (gov.nist.javax.sip.stack.SIPClientTransaction) r1;

        virtualinvoke $r15.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r33, $r16);

        $r17 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z3 = interfaceinvoke $r17.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label11;

        $r21 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" putTransactionHash :  key = ");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r22);

     label11:
        goto label14;

     label12:
        r34 = virtualinvoke r2.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getTransactionId()>();

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z1 = interfaceinvoke $r5.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label13;

        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" putTransactionHash :  key = ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r12);

     label13:
        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        $r6 = (gov.nist.javax.sip.stack.SIPServerTransaction) r1;

        virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r34, $r6);

     label14:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Exception from label01 to label06 with label07;
    }

    protected void decrementActiveClientTransactionCount()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.concurrent.ConcurrentHashMap r1, $r4, $r5;
        java.lang.Throwable r2, $r6;
        java.util.concurrent.atomic.AtomicInteger $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        $i1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int clientTransactionTableLowaterMark>;

        if $i0 > $i1 goto label5;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean unlimitedClientTransactionTableSize>;

        if $z0 != 0 goto label5;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        virtualinvoke $r5.<java.lang.Object: void notify()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void removeTransactionHash(gov.nist.javax.sip.stack.SIPTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPTransaction r1;
        gov.nist.javax.sip.message.SIPRequest r2;
        java.lang.String r3, $r11, $r19, r21;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.ConcurrentHashMap $r4, $r14;
        gov.nist.core.StackLogger $r6, $r8, $r12, $r16, $r18;
        java.lang.StringBuilder $r7, $r9, $r10, $r15, $r17, $r20;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransaction;

        r2 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if r2 != null goto label1;

        return;

     label1:
        $z0 = r1 instanceof gov.nist.javax.sip.stack.SIPClientTransaction;

        if $z0 == 0 goto label3;

        r3 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransactionId()>();

        $r12 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z3 = interfaceinvoke $r12.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label2;

        $r16 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r16.<gov.nist.core.StackLogger: void logStackTrace()>();

        $r18 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removing client Tx : ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r19);

     label2:
        $r14 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        virtualinvoke $r14.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r3);

        goto label4;

     label3:
        $z1 = r1 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z1 == 0 goto label4;

        r21 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransaction: java.lang.String getTransactionId()>();

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r21);

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r6.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label4;

        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removing server Tx : ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r11);

     label4:
        return;
    }

    public synchronized void transactionErrorEvent(gov.nist.javax.sip.stack.SIPTransactionErrorEvent)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPTransactionErrorEvent r1;
        gov.nist.javax.sip.stack.SIPTransaction r2;
        java.lang.Object $r3;
        int $i0;
        javax.sip.TransactionState $r4;
        boolean $z0;
        gov.nist.javax.sip.stack.SIPServerTransaction $r5;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionErrorEvent;

        $r3 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: java.lang.Object getSource()>();

        r2 = (gov.nist.javax.sip.stack.SIPTransaction) $r3;

        $i0 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPTransactionErrorEvent: int getErrorID()>();

        if $i0 != 2 goto label2;

        $r4 = <gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState TERMINATED_STATE>;

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransaction: void setState(javax.sip.TransactionState)>($r4);

        $z0 = r2 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z0 == 0 goto label1;

        $r5 = (gov.nist.javax.sip.stack.SIPServerTransaction) r2;

        $r5.<gov.nist.javax.sip.stack.SIPServerTransaction: int collectionTime> = 0;

     label1:
        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransaction: void disableTimeoutTimer()>();

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPTransaction: void disableRetransmissionTimer()>();

     label2:
        return;
    }

    public synchronized void dialogErrorEvent(gov.nist.javax.sip.stack.SIPDialogErrorEvent)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPDialogErrorEvent r1;
        gov.nist.javax.sip.stack.SIPDialog r2;
        javax.sip.SipListener r3;
        java.lang.Object $r4;
        gov.nist.javax.sip.SipStackImpl $r5;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPDialogErrorEvent;

        $r4 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPDialogErrorEvent: java.lang.Object getSource()>();

        r2 = (gov.nist.javax.sip.stack.SIPDialog) $r4;

        $r5 = (gov.nist.javax.sip.SipStackImpl) r0;

        r3 = virtualinvoke $r5.<gov.nist.javax.sip.SipStackImpl: javax.sip.SipListener getSipListener()>();

        if r2 == null goto label1;

        $z0 = r3 instanceof gov.nist.javax.sip.SipListenerExt;

        if $z0 != 0 goto label1;

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPDialog: void delete()>();

     label1:
        return;
    }

    public void stopStack()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0, r1;
        java.lang.Throwable r2, r3, r4, $r17, $r19, $r20;
        java.util.Timer $r5, $r18;
        java.util.concurrent.ConcurrentHashMap $r6, $r8, $r9, $r12, $r13, $r14, r22;
        java.util.Collection $r10, r23;
        int $i0, i1;
        gov.nist.javax.sip.stack.IOHandler $r11;
        gov.nist.javax.sip.stack.MessageProcessor $r15;
        gov.nist.core.ServerLogger $r16;
        java.lang.InterruptedException $r21;
        gov.nist.javax.sip.stack.MessageProcessor[] r24;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer>;

        if $r5 == null goto label01;

        $r18 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer>;

        virtualinvoke $r18.<java.util.Timer: void cancel()>();

     label01:
        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer> = null;

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap pendingTransactions>;

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean toExit> = 1;

        r1 = r0;

        entermonitor r0;

     label02:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label03:
        goto label06;

     label04:
        $r20 := @caughtexception;

        r2 = $r20;

        exitmonitor r1;

     label05:
        throw r2;

     label06:
        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        r22 = $r8;

        entermonitor $r8;

     label07:
        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        virtualinvoke $r9.<java.lang.Object: void notifyAll()>();

        exitmonitor r22;

     label08:
        goto label11;

     label09:
        $r17 := @caughtexception;

        r3 = $r17;

        exitmonitor r22;

     label10:
        throw r3;

     label11:
        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        r23 = $r10;

        entermonitor $r10;

     label12:
        r24 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.MessageProcessor[] getMessageProcessors()>();

        i1 = 0;

     label13:
        $i0 = lengthof r24;

        if i1 >= $i0 goto label14;

        $r15 = r24[i1];

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void removeMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor)>($r15);

        i1 = i1 + 1;

        goto label13;

     label14:
        $r11 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.IOHandler ioHandler>;

        virtualinvoke $r11.<gov.nist.javax.sip.stack.IOHandler: void closeAll()>();

        exitmonitor r23;

     label15:
        goto label18;

     label16:
        $r19 := @caughtexception;

        r4 = $r19;

        exitmonitor r23;

     label17:
        throw r4;

     label18:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

     label19:
        goto label21;

     label20:
        $r21 := @caughtexception;

     label21:
        $r12 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r14 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        virtualinvoke $r14.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r13 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        virtualinvoke $r13.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r16 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ServerLogger serverLogger>;

        interfaceinvoke $r16.<gov.nist.core.ServerLogger: void closeLogFile()>();

        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label12 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.InterruptedException from label18 to label19 with label20;
    }

    public void putPendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPServerTransaction r1;
        gov.nist.core.StackLogger $r2, $r7;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.String $r4, $r10;
        java.lang.StringBuilder $r6, $r8, $r9;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r2.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("putPendingTransaction: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r10);

     label1:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap pendingTransactions>;

        $r4 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPServerTransaction: java.lang.String getTransactionId()>();

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1);

        return;
    }

    public gov.nist.core.net.NetworkLayer getNetworkLayer()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.net.NetworkLayer $r1, $r2;
        gov.nist.core.net.DefaultNetworkLayer $r3;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.NetworkLayer networkLayer>;

        if $r1 != null goto label1;

        $r3 = <gov.nist.core.net.DefaultNetworkLayer: gov.nist.core.net.DefaultNetworkLayer SINGLETON>;

        return $r3;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.NetworkLayer networkLayer>;

        return $r2;
    }

    public boolean isLoggingEnabled()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.StackLogger $r1, $r2;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        if $r1 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r2.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

     label2:
        return $z0;
    }

    public gov.nist.core.StackLogger getStackLogger()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.StackLogger $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        return $r1;
    }

    public gov.nist.core.ServerLogger getServerLogger()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.ServerLogger $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ServerLogger serverLogger>;

        return $r1;
    }

    public int getMaxMessageSize()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $i0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxMessageSize>;

        return $i0;
    }

    public void setSingleThreaded()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int threadPoolSize> = 1;

        return;
    }

    public void setThreadPoolSize(int)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        i0 := @parameter0: int;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int threadPoolSize> = i0;

        return;
    }

    public void setMaxConnections(int)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        i0 := @parameter0: int;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int maxConnections> = i0;

        return;
    }

    public javax.sip.address.Hop getNextHop(gov.nist.javax.sip.message.SIPRequest) throws javax.sip.SipException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        boolean $z0, $z1;
        javax.sip.address.URI $r2;
        gov.nist.javax.sip.stack.DefaultRouter $r3;
        javax.sip.address.Hop $r4, $r8, $r11;
        gov.nist.javax.sip.header.RouteList $r5;
        javax.sip.address.Router $r6, $r7, $r9, $r10;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean useRouterForAll>;

        if $z0 == 0 goto label2;

        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router>;

        if $r9 == null goto label1;

        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router>;

        $r11 = interfaceinvoke $r10.<javax.sip.address.Router: javax.sip.address.Hop getNextHop(javax.sip.message.Request)>(r1);

        return $r11;

     label1:
        return null;

     label2:
        $r2 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()>();

        $z1 = interfaceinvoke $r2.<javax.sip.address.URI: boolean isSipURI()>();

        if $z1 != 0 goto label3;

        $r5 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.RouteList getRouteHeaders()>();

        if $r5 == null goto label4;

     label3:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.DefaultRouter defaultRouter>;

        $r4 = virtualinvoke $r3.<gov.nist.javax.sip.stack.DefaultRouter: javax.sip.address.Hop getNextHop(javax.sip.message.Request)>(r1);

        return $r4;

     label4:
        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router>;

        if $r6 == null goto label5;

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router>;

        $r8 = interfaceinvoke $r7.<javax.sip.address.Router: javax.sip.address.Hop getNextHop(javax.sip.message.Request)>(r1);

        return $r8;

     label5:
        return null;
    }

    public void setStackName(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String stackName> = r1;

        return;
    }

    protected void setHostAddress(java.lang.String) throws java.net.UnknownHostException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1, $r3, $r8;
        int $i0, $i1;
        java.net.InetAddress $r2;
        char $c2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        $i1 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(58);

        if $i0 == $i1 goto label1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        if $c2 == 91 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String stackAddress> = $r8;

        goto label2;

     label1:
        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String stackAddress> = r1;

     label2:
        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r1);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.net.InetAddress stackInetAddress> = $r2;

        return;
    }

    public java.lang.String getHostAddress()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String stackAddress>;

        return $r1;
    }

    protected void setRouter(javax.sip.address.Router)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        javax.sip.address.Router r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: javax.sip.address.Router;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router> = r1;

        return;
    }

    public javax.sip.address.Router getRouter(gov.nist.javax.sip.message.SIPRequest)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.header.RequestLine $r2;
        boolean $z0, $z1, $z2;
        javax.sip.address.URI $r3, $r6;
        java.lang.String $r4, $r7;
        gov.nist.javax.sip.stack.DefaultRouter $r5, $r9, $r12;
        javax.sip.address.Router $r8, $r10, $r11;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        $r2 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.RequestLine getRequestLine()>();

        if $r2 != null goto label1;

        $r12 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.DefaultRouter defaultRouter>;

        return $r12;

     label1:
        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean useRouterForAll>;

        if $z0 == 0 goto label2;

        $r11 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router>;

        return $r11;

     label2:
        $r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()>();

        $r4 = interfaceinvoke $r3.<javax.sip.address.URI: java.lang.String getScheme()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("sip");

        if $z1 != 0 goto label3;

        $r6 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.address.URI getRequestURI()>();

        $r7 = interfaceinvoke $r6.<javax.sip.address.URI: java.lang.String getScheme()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("sips");

        if $z2 == 0 goto label4;

     label3:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.DefaultRouter defaultRouter>;

        return $r5;

     label4:
        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router>;

        if $r8 == null goto label5;

        $r10 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router>;

        return $r10;

     label5:
        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.DefaultRouter defaultRouter>;

        return $r9;
    }

    public javax.sip.address.Router getRouter()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        javax.sip.address.Router $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.address.Router router>;

        return $r1;
    }

    public boolean isAlive()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0, $z1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean toExit>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected void addMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.MessageProcessor r1;
        java.util.Collection r2, $r4, $r5;
        java.lang.Throwable r3, $r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.MessageProcessor;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void removeMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.MessageProcessor r1;
        java.util.Collection r2, $r4, $r5;
        java.lang.Throwable r3, $r6;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.MessageProcessor;

        $r4 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        $z0 = interfaceinvoke $r5.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        virtualinvoke r1.<gov.nist.javax.sip.stack.MessageProcessor: void stop()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected gov.nist.javax.sip.stack.MessageProcessor[] getMessageProcessors()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.Collection r1, $r3, $r5;
        java.lang.Throwable r2, $r9;
        gov.nist.javax.sip.stack.MessageProcessor[] $r4, $r7, $r8;
        java.lang.Object[] $r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        $r4 = newarray (gov.nist.javax.sip.stack.MessageProcessor)[0];

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r7 = (gov.nist.javax.sip.stack.MessageProcessor[]) $r6;

        $r8 = (gov.nist.javax.sip.stack.MessageProcessor[]) $r7;

        exitmonitor r1;

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected gov.nist.javax.sip.stack.MessageProcessor createMessageProcessor(java.net.InetAddress, int, java.lang.String) throws java.io.IOException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.net.InetAddress r1;
        int i0;
        java.lang.String r2;
        gov.nist.javax.sip.stack.UDPMessageProcessor r3, $r11;
        gov.nist.javax.sip.stack.MessageProcessor r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r5, $r13, $r15, $r16;
        java.lang.ClassLoader $r6;
        java.lang.Object $r7;
        gov.nist.javax.sip.stack.TLSMessageProcessor $r8, r18;
        gov.nist.javax.sip.stack.TCPMessageProcessor $r9, r17;
        java.lang.IllegalAccessException $r10, r22;
        java.lang.InstantiationException $r12, r21;
        java.lang.ClassNotFoundException $r14;
        java.lang.Class r19;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("udp");

        if $z0 == 0 goto label1;

        $r11 = new gov.nist.javax.sip.stack.UDPMessageProcessor;

        specialinvoke $r11.<gov.nist.javax.sip.stack.UDPMessageProcessor: void <init>(java.net.InetAddress,gov.nist.javax.sip.stack.SIPTransactionStack,int)>(r1, r0, i0);

        r3 = $r11;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor)>(r3);

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean udpFlag> = 1;

        return r3;

     label1:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("tcp");

        if $z1 == 0 goto label2;

        $r9 = new gov.nist.javax.sip.stack.TCPMessageProcessor;

        specialinvoke $r9.<gov.nist.javax.sip.stack.TCPMessageProcessor: void <init>(java.net.InetAddress,gov.nist.javax.sip.stack.SIPTransactionStack,int)>(r1, r0, i0);

        r17 = $r9;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor)>(r17);

        return r17;

     label2:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("tls");

        if $z2 == 0 goto label3;

        $r8 = new gov.nist.javax.sip.stack.TLSMessageProcessor;

        specialinvoke $r8.<gov.nist.javax.sip.stack.TLSMessageProcessor: void <init>(java.net.InetAddress,gov.nist.javax.sip.stack.SIPTransactionStack,int)>(r1, r0, i0);

        r18 = $r8;

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor)>(r18);

        return r18;

     label3:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("sctp");

        if $z3 == 0 goto label9;

     label4:
        $r6 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        r19 = virtualinvoke $r6.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("gov.nist.javax.sip.stack.sctp.SCTPMessageProcessor");

        $r7 = virtualinvoke r19.<java.lang.Class: java.lang.Object newInstance()>();

        r4 = (gov.nist.javax.sip.stack.MessageProcessor) $r7;

        virtualinvoke r4.<gov.nist.javax.sip.stack.MessageProcessor: void initialize(java.net.InetAddress,int,gov.nist.javax.sip.stack.SIPTransactionStack)>(r1, i0, r0);

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void addMessageProcessor(gov.nist.javax.sip.stack.MessageProcessor)>(r4);

     label5:
        return r4;

     label6:
        $r14 := @caughtexception;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SCTP not supported (needs Java 7 and SCTP jar in classpath)");

        throw $r16;

     label7:
        $r12 := @caughtexception;

        r21 = $r12;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Error initializing SCTP", r21);

        throw $r15;

     label8:
        $r10 := @caughtexception;

        r22 = $r10;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Error initializing SCTP", r22);

        throw $r13;

     label9:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bad transport");

        throw $r5;

        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
        catch java.lang.InstantiationException from label4 to label5 with label7;
        catch java.lang.IllegalAccessException from label4 to label5 with label8;
    }

    protected void setMessageFactory(gov.nist.javax.sip.stack.StackMessageFactory)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.StackMessageFactory r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.StackMessageFactory;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.StackMessageFactory sipMessageFactory> = r1;

        return;
    }

    public gov.nist.javax.sip.stack.MessageChannel createRawMessageChannel(java.lang.String, int, javax.sip.address.Hop) throws java.net.UnknownHostException
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1, $r10, $r14, $r15, $r17;
        int i0, $i1, $i2;
        javax.sip.address.Hop r2;
        gov.nist.core.Host r3, $r9;
        gov.nist.core.HostPort r4, $r11;
        java.util.Iterator r5;
        gov.nist.javax.sip.stack.MessageProcessor r6;
        gov.nist.javax.sip.stack.MessageChannel r7;
        java.net.UnknownHostException r8, $r22;
        java.util.Collection $r12;
        java.lang.Object $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.net.InetAddress $r16;
        gov.nist.core.StackLogger $r18, $r20, $r21, $r23;
        java.io.IOException $r19, r24;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: javax.sip.address.Hop;

        $r9 = new gov.nist.core.Host;

        specialinvoke $r9.<gov.nist.core.Host: void <init>()>();

        r3 = $r9;

        $r10 = interfaceinvoke r2.<javax.sip.address.Hop: java.lang.String getHost()>();

        virtualinvoke r3.<gov.nist.core.Host: void setHostname(java.lang.String)>($r10);

        $r11 = new gov.nist.core.HostPort;

        specialinvoke $r11.<gov.nist.core.HostPort: void <init>()>();

        r4 = $r11;

        virtualinvoke r4.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>(r3);

        $i1 = interfaceinvoke r2.<javax.sip.address.Hop: int getPort()>();

        virtualinvoke r4.<gov.nist.core.HostPort: void setPort(int)>($i1);

        r7 = null;

        $r12 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Collection messageProcessors>;

        r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        if r7 != null goto label8;

        $r13 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (gov.nist.javax.sip.stack.MessageProcessor) $r13;

        $r15 = interfaceinvoke r2.<javax.sip.address.Hop: java.lang.String getTransport()>();

        $r14 = virtualinvoke r6.<gov.nist.javax.sip.stack.MessageProcessor: java.lang.String getTransport()>();

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r14);

        if $z1 == 0 goto label1;

        $r16 = virtualinvoke r6.<gov.nist.javax.sip.stack.MessageProcessor: java.net.InetAddress getIpAddress()>();

        $r17 = virtualinvoke $r16.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z2 == 0 goto label1;

        $i2 = virtualinvoke r6.<gov.nist.javax.sip.stack.MessageProcessor: int getPort()>();

        if i0 != $i2 goto label1;

     label2:
        r7 = virtualinvoke r6.<gov.nist.javax.sip.stack.MessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.core.HostPort)>(r4);

     label3:
        goto label1;

     label4:
        $r22 := @caughtexception;

        r8 = $r22;

        $r21 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z4 = interfaceinvoke $r21.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label5;

        $r23 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r23.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r8);

     label5:
        throw r8;

     label6:
        $r19 := @caughtexception;

        r24 = $r19;

        $r18 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z3 = interfaceinvoke $r18.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label7;

        $r20 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        interfaceinvoke $r20.<gov.nist.core.StackLogger: void logException(java.lang.Throwable)>(r24);

     label7:
        goto label1;

     label8:
        return r7;

        catch java.net.UnknownHostException from label2 to label3 with label4;
        catch java.io.IOException from label2 to label3 with label6;
    }

    public boolean isEventForked(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1, $r11;
        gov.nist.core.StackLogger $r2, $r5;
        boolean $z0, $z1, $z2;
        java.util.HashSet $r3, $r9;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r10;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r2.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isEventForked: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returning ");

        $r9 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.HashSet forkedEvents>;

        $z2 = virtualinvoke $r9.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r11);

     label1:
        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.HashSet forkedEvents>;

        $z1 = virtualinvoke $r3.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        return $z1;
    }

    public gov.nist.core.net.AddressResolver getAddressResolver()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.net.AddressResolver $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.AddressResolver addressResolver>;

        return $r1;
    }

    public void setAddressResolver(gov.nist.core.net.AddressResolver)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.net.AddressResolver r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.core.net.AddressResolver;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.net.AddressResolver addressResolver> = r1;

        return;
    }

    public void setLogRecordFactory(gov.nist.javax.sip.LogRecordFactory)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.LogRecordFactory r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.LogRecordFactory;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.LogRecordFactory logRecordFactory> = r1;

        return;
    }

    public gov.nist.core.ThreadAuditor getThreadAuditor()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.ThreadAuditor $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.ThreadAuditor threadAuditor>;

        return $r1;
    }

    public java.lang.String auditStack(java.util.Set, long, long)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.Set r1;
        long l0, l1;
        java.lang.String r2, r3, r4, r5, $r13, $r14, $r15;
        java.util.concurrent.ConcurrentHashMap $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.util.Set;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r2 = null;

        r3 = specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String auditDialogs(java.util.Set,long)>(r1, l0);

        $r6 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap serverTransactionTable>;

        r4 = specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String auditTransactions(java.util.concurrent.ConcurrentHashMap,long)>($r6, l1);

        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        r5 = specialinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.lang.String auditTransactions(java.util.concurrent.ConcurrentHashMap,long)>($r7, l1);

        if r3 != null goto label1;

        if r4 != null goto label1;

        if r5 == null goto label8;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SIP Stack Audit:\n");

        if r3 == null goto label2;

        $r14 = r3;

        goto label3;

     label2:
        $r14 = "";

     label3:
        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        if r4 == null goto label4;

        $r15 = r4;

        goto label5;

     label4:
        $r15 = "";

     label5:
        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        if r5 == null goto label6;

        $r13 = r5;

        goto label7;

     label6:
        $r13 = "";

     label7:
        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        r2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label8:
        return r2;
    }

    private java.lang.String auditDialogs(java.util.Set, long)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.Set r1;
        long l0, l2, $l3, $l4, $l5;
        java.lang.String r2, r7, r9, $r18, $r25, $r35, $r36, $r41, r44;
        int i1, $i8;
        java.util.LinkedList r3, $r10;
        java.util.concurrent.ConcurrentHashMap r4, $r11, $r13;
        java.lang.Throwable r5, $r39;
        javax.sip.header.CallIdHeader r6, $r40;
        javax.sip.DialogState r8;
        java.util.Collection $r12;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r19, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r29, $r30, $r31, $r33, $r37, $r38;
        boolean $z0, $z1, $z2;
        java.lang.Object $r20;
        byte $b6, $b7;
        gov.nist.core.StackLogger $r32, $r34;
        java.util.Iterator r42;
        gov.nist.javax.sip.stack.SIPDialog r43;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.util.Set;

        l0 := @parameter1: long;

        r2 = "  Leaked dialogs:\n";

        i1 = 0;

        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r11 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        r4 = $r11;

        entermonitor $r11;

     label01:
        $r10 = new java.util.LinkedList;

        $r13 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r12 = virtualinvoke $r13.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        specialinvoke $r10.<java.util.LinkedList: void <init>(java.util.Collection)>($r12);

        r3 = $r10;

        exitmonitor r4;

     label02:
        goto label05;

     label03:
        $r39 := @caughtexception;

        r5 = $r39;

        exitmonitor r4;

     label04:
        throw r5;

     label05:
        r42 = virtualinvoke r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke r42.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r20 = interfaceinvoke r42.<java.util.Iterator: java.lang.Object next()>();

        r43 = (gov.nist.javax.sip.stack.SIPDialog) $r20;

        if r43 == null goto label07;

        $r40 = virtualinvoke r43.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.header.CallIdHeader getCallId()>();

        goto label08;

     label07:
        $r40 = null;

     label08:
        r6 = $r40;

        if r6 == null goto label09;

        $r41 = interfaceinvoke r6.<javax.sip.header.CallIdHeader: java.lang.String getCallId()>();

        goto label10;

     label09:
        $r41 = null;

     label10:
        r7 = $r41;

        if r43 == null goto label14;

        if r7 == null goto label14;

        $z1 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r7);

        if $z1 != 0 goto label14;

        $l5 = r43.<gov.nist.javax.sip.stack.SIPDialog: long auditTag>;

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label11;

        r43.<gov.nist.javax.sip.stack.SIPDialog: long auditTag> = l2;

        goto label14;

     label11:
        $l3 = r43.<gov.nist.javax.sip.stack.SIPDialog: long auditTag>;

        $l4 = l2 - $l3;

        $b7 = $l4 cmp l0;

        if $b7 < 0 goto label14;

        i1 = i1 + 1;

        r8 = virtualinvoke r43.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dialog id: ");

        $r25 = virtualinvoke r43.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dialog state: ");

        if r8 == null goto label12;

        $r35 = virtualinvoke r8.<javax.sip.DialogState: java.lang.String toString()>();

        goto label13;

     label12:
        $r35 = "null";

     label13:
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        r9 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r2 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $i8 = <gov.nist.javax.sip.stack.SIPDialog: int TERMINATED_STATE>;

        virtualinvoke r43.<gov.nist.javax.sip.stack.SIPDialog: void setState(int)>($i8);

        $r34 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z2 = interfaceinvoke $r34.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label14;

        $r32 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("auditDialogs: leaked ");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r32.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r36);

     label14:
        goto label06;

     label15:
        if i1 <= 0 goto label16;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    Total: ");

        $r18 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" leaked dialogs detected and removed.\n");

        r44 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label17;

     label16:
        r44 = null;

     label17:
        return r44;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
    }

    private java.lang.String auditTransactions(java.util.concurrent.ConcurrentHashMap, long)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.concurrent.ConcurrentHashMap r1;
        long l0, l2, $l4, $l5, $l6;
        java.lang.String r2, r8, r9, $r14, $r23, $r33, $r37, $r38, $r39, r40;
        int i1;
        java.util.LinkedList r3, $r11;
        java.util.Iterator r4;
        gov.nist.javax.sip.stack.SIPTransaction r5;
        javax.sip.TransactionState r6;
        gov.nist.javax.sip.message.SIPRequest r7;
        java.util.Collection $r10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r12, $r13, $r15, $r16, $r17, $r19, $r20, $r21, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r34, $r35;
        java.lang.Object $r18;
        byte $b3, $b7;
        java.lang.Class $r22;
        gov.nist.core.StackLogger $r36;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap;

        l0 := @parameter1: long;

        r2 = "  Leaked transactions:\n";

        i1 = 0;

        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r11 = new java.util.LinkedList;

        $r10 = virtualinvoke r1.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        specialinvoke $r11.<java.util.LinkedList: void <init>(java.util.Collection)>($r10);

        r3 = $r11;

        r4 = virtualinvoke r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (gov.nist.javax.sip.stack.SIPTransaction) $r18;

        if r5 == null goto label09;

        $l4 = r5.<gov.nist.javax.sip.stack.SIPTransaction: long auditTag>;

        $b3 = $l4 cmp 0L;

        if $b3 != 0 goto label02;

        r5.<gov.nist.javax.sip.stack.SIPTransaction: long auditTag> = l2;

        goto label09;

     label02:
        $l6 = r5.<gov.nist.javax.sip.stack.SIPTransaction: long auditTag>;

        $l5 = l2 - $l6;

        $b7 = $l5 cmp l0;

        if $b7 < 0 goto label09;

        i1 = i1 + 1;

        r6 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState getState()>();

        r7 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPRequest getOriginalRequest()>();

        if r7 == null goto label03;

        $r37 = virtualinvoke r7.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        goto label04;

     label03:
        $r37 = null;

     label04:
        r8 = $r37;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke $r22.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", state: ");

        if r6 == null goto label05;

        $r38 = virtualinvoke r6.<javax.sip.TransactionState: java.lang.String toString()>();

        goto label06;

     label05:
        $r38 = "null";

     label06:
        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", OR: ");

        if r8 == null goto label07;

        $r39 = r8;

        goto label08;

     label07:
        $r39 = "null";

     label08:
        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        r9 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r2 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        $z1 = virtualinvoke r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label09;

        $r36 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("auditTransactions: leaked ");

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r36.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r33);

     label09:
        goto label01;

     label10:
        if i1 <= 0 goto label11;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    Total: ");

        $r14 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" leaked transactions detected and removed.\n");

        r40 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label12;

     label11:
        r40 = null;

     label12:
        return r40;
    }

    public void setNon2XXAckPassedToListener(boolean)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        z0 := @parameter0: boolean;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean non2XXAckPassedToListener> = z0;

        return;
    }

    public boolean isNon2XXAckPassedToListener()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean non2XXAckPassedToListener>;

        return $z0;
    }

    public int getActiveClientTransactionCount()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.atomic.AtomicInteger activeClientTransactionCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public boolean isRfc2543Supported()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean rfc2543Supported>;

        return $z0;
    }

    public boolean isCancelClientTransactionChecked()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean cancelClientTransactionChecked>;

        return $z0;
    }

    public boolean isRemoteTagReassignmentAllowed()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean remoteTagReassignmentAllowed>;

        return $z0;
    }

    public java.util.Collection getDialogs()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.HashSet r1, $r2;
        java.util.concurrent.ConcurrentHashMap $r3, $r5;
        java.util.Collection $r4, $r6;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r1 = $r2;

        $r3 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        virtualinvoke r1.<java.util.HashSet: boolean addAll(java.util.Collection)>($r4);

        $r5 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        virtualinvoke r1.<java.util.HashSet: boolean addAll(java.util.Collection)>($r6);

        return r1;
    }

    public java.util.Collection getDialogs(javax.sip.DialogState)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        javax.sip.DialogState r1, $r7, $r10, $r11;
        java.util.HashSet r2, $r6;
        java.util.Collection r3, $r12;
        java.util.Iterator r4;
        gov.nist.javax.sip.stack.SIPDialog r5;
        boolean $z0, $z1, $z3;
        java.util.concurrent.ConcurrentHashMap $r8, $r13;
        java.lang.Object $r9;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: javax.sip.DialogState;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r2 = $r6;

        $r7 = <javax.sip.DialogState: javax.sip.DialogState EARLY>;

        $z0 = virtualinvoke $r7.<javax.sip.DialogState: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r13 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap earlyDialogTable>;

        $r12 = virtualinvoke $r13.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        virtualinvoke r2.<java.util.HashSet: boolean addAll(java.util.Collection)>($r12);

        goto label4;

     label1:
        $r8 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        r3 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (gov.nist.javax.sip.stack.SIPDialog) $r9;

        $r10 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        if $r10 == null goto label3;

        $r11 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $z3 = virtualinvoke $r11.<javax.sip.DialogState: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label3;

        virtualinvoke r2.<java.util.HashSet: boolean add(java.lang.Object)>(r5);

     label3:
        goto label2;

     label4:
        return r2;
    }

    public javax.sip.Dialog getReplacesDialog(gov.nist.javax.sip.header.extensions.ReplacesHeader)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.header.extensions.ReplacesHeader r1;
        java.lang.String r2, r3, r4, r6, $r11, $r22;
        java.lang.StringBuffer r5, $r10;
        javax.sip.Dialog r7;
        java.util.Iterator r8;
        gov.nist.javax.sip.stack.SIPClientTransaction r9;
        boolean $z0, $z1;
        gov.nist.core.StackLogger $r12, $r21;
        java.lang.Object $r13, $r18;
        java.util.concurrent.ConcurrentHashMap $r14, $r16;
        java.util.Collection $r15;
        gov.nist.javax.sip.stack.SIPDialog $r17;
        java.lang.StringBuilder $r19, $r20, $r23;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.header.extensions.ReplacesHeader;

        r2 = interfaceinvoke r1.<gov.nist.javax.sip.header.extensions.ReplacesHeader: java.lang.String getCallId()>();

        r3 = interfaceinvoke r1.<gov.nist.javax.sip.header.extensions.ReplacesHeader: java.lang.String getFromTag()>();

        r4 = interfaceinvoke r1.<gov.nist.javax.sip.header.extensions.ReplacesHeader: java.lang.String getToTag()>();

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>(java.lang.String)>(r2);

        r5 = $r10;

        if r4 == null goto label1;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

     label1:
        if r3 == null goto label2;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

     label2:
        $r11 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.String toString()>();

        r6 = virtualinvoke $r11.<java.lang.String: java.lang.String toLowerCase()>();

        $r12 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $z0 = interfaceinvoke $r12.<gov.nist.core.StackLogger: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label3;

        $r21 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Looking for dialog ");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r22);

     label3:
        $r14 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r13 = virtualinvoke $r14.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (javax.sip.Dialog) $r13;

        if r7 != null goto label6;

        $r16 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap clientTransactionTable>;

        $r15 = virtualinvoke $r16.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r8 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r18 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r18;

        $r17 = virtualinvoke r9.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r6);

        if $r17 == null goto label5;

        r7 = virtualinvoke r9.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r6);

        goto label6;

     label5:
        goto label4;

     label6:
        return r7;
    }

    public javax.sip.Dialog getJoinDialog(gov.nist.javax.sip.header.extensions.JoinHeader)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.header.extensions.JoinHeader r1;
        java.lang.String r2, r3, r4, $r8, $r9;
        java.lang.StringBuffer r5, $r6;
        java.util.concurrent.ConcurrentHashMap $r7;
        java.lang.Object $r10;
        javax.sip.Dialog $r11;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.header.extensions.JoinHeader;

        r2 = interfaceinvoke r1.<gov.nist.javax.sip.header.extensions.JoinHeader: java.lang.String getCallId()>();

        r3 = interfaceinvoke r1.<gov.nist.javax.sip.header.extensions.JoinHeader: java.lang.String getFromTag()>();

        r4 = interfaceinvoke r1.<gov.nist.javax.sip.header.extensions.JoinHeader: java.lang.String getToTag()>();

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(java.lang.String)>(r2);

        r5 = $r6;

        if r4 == null goto label1;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

     label1:
        if r3 == null goto label2;

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        virtualinvoke r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

     label2:
        $r7 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap dialogTable>;

        $r8 = virtualinvoke r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>();

        $r10 = virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r9);

        $r11 = (javax.sip.Dialog) $r10;

        return $r11;
    }

    public void setTimer(java.util.Timer)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.Timer r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.util.Timer;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer> = r1;

        return;
    }

    public java.util.Timer getTimer()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.Timer $r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Timer timer>;

        return $r1;
    }

    public int getReceiveUdpBufferSize()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $i0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int receiveUdpBufferSize>;

        return $i0;
    }

    public void setReceiveUdpBufferSize(int)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        i0 := @parameter0: int;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int receiveUdpBufferSize> = i0;

        return;
    }

    public int getSendUdpBufferSize()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int $i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $i0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int sendUdpBufferSize>;

        return $i0;
    }

    public void setSendUdpBufferSize(int)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        int i0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        i0 := @parameter0: int;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: int sendUdpBufferSize> = i0;

        return;
    }

    public void setStackLogger(gov.nist.core.StackLogger)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.core.StackLogger r1;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.core.StackLogger;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.core.StackLogger stackLogger> = r1;

        return;
    }

    public boolean checkBranchId()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean checkBranchId>;

        return $z0;
    }

    public void setLogStackTraceOnMessageSend(boolean)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        z0 := @parameter0: boolean;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean logStackTraceOnMessageSend> = z0;

        return;
    }

    public boolean isLogStackTraceOnMessageSend()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        $z0 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean logStackTraceOnMessageSend>;

        return $z0;
    }

    public void setDeliverDialogTerminatedEventForNullDialog()
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r0.<gov.nist.javax.sip.stack.SIPTransactionStack: boolean isDialogTerminatedEventDeliveredForNullDialog> = 1;

        return;
    }

    public void addForkedClientTransaction(gov.nist.javax.sip.stack.SIPClientTransaction)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        gov.nist.javax.sip.stack.SIPClientTransaction r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.String $r3;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: gov.nist.javax.sip.stack.SIPClientTransaction;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap forkedClientTransactionTable>;

        $r3 = virtualinvoke r1.<gov.nist.javax.sip.stack.SIPClientTransaction: java.lang.String getTransactionId()>();

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public gov.nist.javax.sip.stack.SIPClientTransaction getForkedTransaction(java.lang.String)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        gov.nist.javax.sip.stack.SIPClientTransaction $r4;

        r0 := @this: gov.nist.javax.sip.stack.SIPTransactionStack;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap forkedClientTransactionTable>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r3;

        return $r4;
    }

    static java.util.concurrent.ConcurrentHashMap access$000(gov.nist.javax.sip.stack.SIPTransactionStack)
    {
        gov.nist.javax.sip.stack.SIPTransactionStack r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @parameter0: gov.nist.javax.sip.stack.SIPTransactionStack;

        $r1 = r0.<gov.nist.javax.sip.stack.SIPTransactionStack: java.util.concurrent.ConcurrentHashMap forkedClientTransactionTable>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.util.Set $r1, $r2, $r3;

        <gov.nist.javax.sip.stack.SIPTransactionStack: int CONNECTION_LINGER_TIME> = 8;

        <gov.nist.javax.sip.stack.SIPTransactionStack: int BASE_TIMER_INTERVAL> = 500;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        <gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Set dialogCreatingMethods> = $r0;

        $r1 = <gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Set dialogCreatingMethods>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>("REFER");

        $r2 = <gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Set dialogCreatingMethods>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("INVITE");

        $r3 = <gov.nist.javax.sip.stack.SIPTransactionStack: java.util.Set dialogCreatingMethods>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("SUBSCRIBE");

        return;
    }
}
