public final class gov.nist.javax.sip.header.From extends gov.nist.javax.sip.header.AddressParametersHeader implements javax.sip.header.FromHeader
{
    private static final long serialVersionUID;

    public void <init>()
    {
        gov.nist.javax.sip.header.From r0;

        r0 := @this: gov.nist.javax.sip.header.From;

        specialinvoke r0.<gov.nist.javax.sip.header.AddressParametersHeader: void <init>(java.lang.String)>("From");

        return;
    }

    public void <init>(gov.nist.javax.sip.header.To)
    {
        gov.nist.javax.sip.header.From r0;
        gov.nist.javax.sip.header.To r1;
        gov.nist.javax.sip.address.AddressImpl $r2;
        gov.nist.core.NameValueList $r3;

        r0 := @this: gov.nist.javax.sip.header.From;

        r1 := @parameter0: gov.nist.javax.sip.header.To;

        specialinvoke r0.<gov.nist.javax.sip.header.AddressParametersHeader: void <init>(java.lang.String)>("From");

        $r2 = r1.<gov.nist.javax.sip.header.To: gov.nist.javax.sip.address.AddressImpl address>;

        r0.<gov.nist.javax.sip.header.From: gov.nist.javax.sip.address.AddressImpl address> = $r2;

        $r3 = r1.<gov.nist.javax.sip.header.To: gov.nist.core.NameValueList parameters>;

        r0.<gov.nist.javax.sip.header.From: gov.nist.core.NameValueList parameters> = $r3;

        return;
    }

    protected java.lang.String encodeBody()
    {
        gov.nist.javax.sip.header.From r0;
        java.lang.StringBuffer $r1, $r2;
        java.lang.String $r3;

        r0 := @this: gov.nist.javax.sip.header.From;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r0.<gov.nist.javax.sip.header.From: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    protected java.lang.StringBuffer encodeBody(java.lang.StringBuffer)
    {
        gov.nist.javax.sip.header.From r0;
        java.lang.StringBuffer r1;
        gov.nist.javax.sip.address.AddressImpl $r2, $r3, $r5;
        int $i0, $i1;
        gov.nist.core.NameValueList $r6, $r8;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.header.From;

        r1 := @parameter0: java.lang.StringBuffer;

        $r2 = r0.<gov.nist.javax.sip.header.From: gov.nist.javax.sip.address.AddressImpl address>;

        $i0 = virtualinvoke $r2.<gov.nist.javax.sip.address.AddressImpl: int getAddressType()>();

        if $i0 != 2 goto label1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<");

     label1:
        $r3 = r0.<gov.nist.javax.sip.header.From: gov.nist.javax.sip.address.AddressImpl address>;

        virtualinvoke $r3.<gov.nist.javax.sip.address.AddressImpl: java.lang.StringBuffer encode(java.lang.StringBuffer)>(r1);

        $r5 = r0.<gov.nist.javax.sip.header.From: gov.nist.javax.sip.address.AddressImpl address>;

        $i1 = virtualinvoke $r5.<gov.nist.javax.sip.address.AddressImpl: int getAddressType()>();

        if $i1 != 2 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

     label2:
        $r6 = r0.<gov.nist.javax.sip.header.From: gov.nist.core.NameValueList parameters>;

        $z0 = virtualinvoke $r6.<gov.nist.core.NameValueList: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        $r8 = r0.<gov.nist.javax.sip.header.From: gov.nist.core.NameValueList parameters>;

        virtualinvoke $r8.<gov.nist.core.NameValueList: java.lang.StringBuffer encode(java.lang.StringBuffer)>(r1);

     label3:
        return r1;
    }

    public gov.nist.core.HostPort getHostPort()
    {
        gov.nist.javax.sip.header.From r0;
        gov.nist.javax.sip.address.AddressImpl $r1;
        gov.nist.core.HostPort $r2;

        r0 := @this: gov.nist.javax.sip.header.From;

        $r1 = r0.<gov.nist.javax.sip.header.From: gov.nist.javax.sip.address.AddressImpl address>;

        $r2 = virtualinvoke $r1.<gov.nist.javax.sip.address.AddressImpl: gov.nist.core.HostPort getHostPort()>();

        return $r2;
    }

    public java.lang.String getDisplayName()
    {
        gov.nist.javax.sip.header.From r0;
        gov.nist.javax.sip.address.AddressImpl $r1;
        java.lang.String $r2;

        r0 := @this: gov.nist.javax.sip.header.From;

        $r1 = r0.<gov.nist.javax.sip.header.From: gov.nist.javax.sip.address.AddressImpl address>;

        $r2 = virtualinvoke $r1.<gov.nist.javax.sip.address.AddressImpl: java.lang.String getDisplayName()>();

        return $r2;
    }

    public java.lang.String getTag()
    {
        gov.nist.javax.sip.header.From r0;
        gov.nist.core.NameValueList $r1;
        java.lang.String $r2;

        r0 := @this: gov.nist.javax.sip.header.From;

        $r1 = r0.<gov.nist.javax.sip.header.From: gov.nist.core.NameValueList parameters>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<gov.nist.javax.sip.header.From: java.lang.String getParameter(java.lang.String)>("tag");

        return $r2;
    }

    public boolean hasTag()
    {
        gov.nist.javax.sip.header.From r0;
        boolean $z0;

        r0 := @this: gov.nist.javax.sip.header.From;

        $z0 = virtualinvoke r0.<gov.nist.javax.sip.header.From: boolean hasParameter(java.lang.String)>("tag");

        return $z0;
    }

    public void removeTag()
    {
        gov.nist.javax.sip.header.From r0;
        gov.nist.core.NameValueList $r1;

        r0 := @this: gov.nist.javax.sip.header.From;

        $r1 = r0.<gov.nist.javax.sip.header.From: gov.nist.core.NameValueList parameters>;

        virtualinvoke $r1.<gov.nist.core.NameValueList: boolean delete(java.lang.String)>("tag");

        return;
    }

    public void setAddress(javax.sip.address.Address)
    {
        gov.nist.javax.sip.header.From r0;
        javax.sip.address.Address r1;
        gov.nist.javax.sip.address.AddressImpl $r2;

        r0 := @this: gov.nist.javax.sip.header.From;

        r1 := @parameter0: javax.sip.address.Address;

        $r2 = (gov.nist.javax.sip.address.AddressImpl) r1;

        r0.<gov.nist.javax.sip.header.From: gov.nist.javax.sip.address.AddressImpl address> = $r2;

        return;
    }

    public void setTag(java.lang.String) throws java.text.ParseException
    {
        gov.nist.javax.sip.header.From r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.header.From;

        r1 := @parameter0: java.lang.String;

        staticinvoke <gov.nist.javax.sip.parser.Parser: void checkToken(java.lang.String)>(r1);

        virtualinvoke r0.<gov.nist.javax.sip.header.From: void setParameter(java.lang.String,java.lang.String)>("tag", r1);

        return;
    }

    public java.lang.String getUserAtHostPort()
    {
        gov.nist.javax.sip.header.From r0;
        gov.nist.javax.sip.address.AddressImpl $r1;
        java.lang.String $r2;

        r0 := @this: gov.nist.javax.sip.header.From;

        $r1 = r0.<gov.nist.javax.sip.header.From: gov.nist.javax.sip.address.AddressImpl address>;

        $r2 = virtualinvoke $r1.<gov.nist.javax.sip.address.AddressImpl: java.lang.String getUserAtHostPort()>();

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        gov.nist.javax.sip.header.From r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: gov.nist.javax.sip.header.From;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof javax.sip.header.FromHeader;

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<gov.nist.javax.sip.header.AddressParametersHeader: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static void <clinit>()
    {
        <gov.nist.javax.sip.header.From: long serialVersionUID> = -6312727234330643892L;

        return;
    }
}
