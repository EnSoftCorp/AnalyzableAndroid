public class org.apache.http.conn.ssl.SSLSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.LayeredSocketFactory
{
    public static final java.lang.String TLS;
    public static final java.lang.String SSL;
    public static final java.lang.String SSLV2;
    public static final org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER;
    public static final org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;
    public static final org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER;
    private final javax.net.ssl.SSLContext sslcontext;
    private final javax.net.ssl.SSLSocketFactory socketfactory;
    private final org.apache.http.conn.scheme.HostNameResolver nameResolver;
    private org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier;

    public static org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;

        $r0 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory$NoPreloadHolder: org.apache.http.conn.ssl.SSLSocketFactory access$100()>();

        return $r0;
    }

    public void <init>(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, org.apache.http.conn.scheme.HostNameResolver) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.lang.String r1, r3;
        java.security.KeyStore r2, r4;
        java.security.SecureRandom r5;
        org.apache.http.conn.scheme.HostNameResolver r6;
        javax.net.ssl.KeyManager[] r7;
        javax.net.ssl.TrustManager[] r8;
        org.apache.http.conn.ssl.X509HostnameVerifier $r9;
        javax.net.ssl.SSLContext $r10, $r11, $r12;
        javax.net.ssl.SSLSocketFactory $r13;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.KeyStore;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.security.KeyStore;

        r5 := @parameter4: java.security.SecureRandom;

        r6 := @parameter5: org.apache.http.conn.scheme.HostNameResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r9 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r9;

        if r1 != null goto label1;

        r1 = "TLS";

     label1:
        r7 = null;

        if r2 == null goto label2;

        r7 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.KeyManager[] createKeyManagers(java.security.KeyStore,java.lang.String)>(r2, r3);

     label2:
        r8 = null;

        if r4 == null goto label3;

        r8 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.TrustManager[] createTrustManagers(java.security.KeyStore)>(r4);

     label3:
        $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(r1);

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext sslcontext> = $r10;

        $r11 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext sslcontext>;

        virtualinvoke $r11.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r7, r8, r5);

        $r12 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext sslcontext>;

        $r13 = virtualinvoke $r12.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r13;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = r6;

        return;
    }

    public void <init>(java.security.KeyStore, java.lang.String, java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.security.KeyStore r1, r3;
        java.lang.String r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.security.KeyStore;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.security.KeyStore;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.scheme.HostNameResolver)>("TLS", r1, r2, r3, null, null);

        return;
    }

    public void <init>(java.security.KeyStore, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.security.KeyStore r1;
        java.lang.String r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.security.KeyStore;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.scheme.HostNameResolver)>("TLS", r1, r2, null, null, null);

        return;
    }

    public void <init>(java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.security.KeyStore r1;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.security.KeyStore;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.scheme.HostNameResolver)>("TLS", null, null, r1, null, null);

        return;
    }

    public void <init>(javax.net.ssl.SSLSocketFactory)
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        javax.net.ssl.SSLSocketFactory r1;
        org.apache.http.conn.ssl.X509HostnameVerifier $r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r2;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext sslcontext> = null;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = r1;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = null;

        return;
    }

    private void <init>()
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        org.apache.http.conn.ssl.X509HostnameVerifier $r1;
        javax.net.ssl.SSLSocketFactory $r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r1;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext sslcontext> = null;

        $r2 = staticinvoke <javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>();

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r2;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = null;

        return;
    }

    private static javax.net.ssl.KeyManager[] createKeyManagers(java.security.KeyStore, java.lang.String) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    {
        java.security.KeyStore r0;
        java.lang.String r1, $r3;
        javax.net.ssl.KeyManagerFactory r2;
        javax.net.ssl.KeyManager[] $r4;
        char[] $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @parameter0: java.security.KeyStore;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Keystore may not be null");

        throw $r6;

     label1:
        $r3 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        r2 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r3);

        if r1 == null goto label2;

        $r5 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        goto label3;

     label2:
        $r5 = null;

     label3:
        virtualinvoke r2.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r0, $r5);

        $r4 = virtualinvoke r2.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        return $r4;
    }

    private static javax.net.ssl.TrustManager[] createTrustManagers(java.security.KeyStore) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException
    {
        java.security.KeyStore r0;
        javax.net.ssl.TrustManagerFactory r1;
        java.lang.String $r2;
        javax.net.ssl.TrustManager[] $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.security.KeyStore;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Keystore may not be null");

        throw $r4;

     label1:
        $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r2);

        virtualinvoke r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(r0);

        $r3 = virtualinvoke r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        return $r3;
    }

    public java.net.Socket createSocket() throws java.io.IOException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        javax.net.ssl.SSLSocketFactory $r1;
        java.net.Socket $r2;
        javax.net.ssl.SSLSocket $r3;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        $r3 = (javax.net.ssl.SSLSocket) $r2;

        return $r3;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.net.Socket r1, $r10;
        java.lang.String r2;
        int i0, i1, i2, i3;
        java.net.InetAddress r3, $r17;
        org.apache.http.params.HttpParams r4;
        javax.net.ssl.SSLSocket r5, $r11;
        java.net.InetSocketAddress r6, r7, $r12, $r13, $r15;
        java.io.IOException r8, $r21;
        org.apache.http.conn.scheme.HostNameResolver $r14, $r18;
        org.apache.http.conn.ssl.X509HostnameVerifier $r16;
        java.lang.IllegalArgumentException $r19, $r20;
        java.lang.Exception $r22;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.net.InetAddress;

        i1 := @parameter4: int;

        r4 := @parameter5: org.apache.http.params.HttpParams;

        if r2 != null goto label01;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host may not be null.");

        throw $r19;

     label01:
        if r4 != null goto label02;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null.");

        throw $r20;

     label02:
        if r1 == null goto label03;

        $r10 = r1;

        goto label04;

     label03:
        $r10 = virtualinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

     label04:
        $r11 = (javax.net.ssl.SSLSocket) $r10;

        r5 = (javax.net.ssl.SSLSocket) $r11;

        if r3 != null goto label05;

        if i1 <= 0 goto label07;

     label05:
        if i1 >= 0 goto label06;

        i1 = 0;

     label06:
        $r12 = new java.net.InetSocketAddress;

        specialinvoke $r12.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r3, i1);

        r6 = $r12;

        virtualinvoke r5.<javax.net.ssl.SSLSocket: void bind(java.net.SocketAddress)>(r6);

     label07:
        i3 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>(r4);

        i2 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>(r4);

        $r14 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver>;

        if $r14 == null goto label08;

        $r15 = new java.net.InetSocketAddress;

        $r18 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver>;

        $r17 = interfaceinvoke $r18.<org.apache.http.conn.scheme.HostNameResolver: java.net.InetAddress resolve(java.lang.String)>(r2);

        specialinvoke $r15.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r17, i0);

        r7 = $r15;

        goto label09;

     label08:
        $r13 = new java.net.InetSocketAddress;

        specialinvoke $r13.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r2, i0);

        r7 = $r13;

     label09:
        virtualinvoke r5.<javax.net.ssl.SSLSocket: void connect(java.net.SocketAddress,int)>(r7, i3);

        virtualinvoke r5.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>(i2);

     label10:
        $r16 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        interfaceinvoke $r16.<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>(r2, r5);

     label11:
        goto label17;

     label12:
        $r21 := @caughtexception;

        r8 = $r21;

     label13:
        virtualinvoke r5.<javax.net.ssl.SSLSocket: void close()>();

     label14:
        goto label16;

     label15:
        $r22 := @caughtexception;

     label16:
        throw r8;

     label17:
        return r5;

        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
    }

    public boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.net.Socket r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2, $r3, $r4;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.net.Socket;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null.");

        throw $r4;

     label1:
        $z0 = r1 instanceof javax.net.ssl.SSLSocket;

        if $z0 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket not created by this factory.");

        throw $r3;

     label2:
        $z1 = virtualinvoke r1.<java.net.Socket: boolean isClosed()>();

        if $z1 == 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket is closed.");

        throw $r2;

     label3:
        return 1;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException, java.net.UnknownHostException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.net.Socket r1, $r5;
        java.lang.String r2;
        int i0;
        boolean z0;
        javax.net.ssl.SSLSocket r3;
        javax.net.ssl.SSLSocketFactory $r4;
        org.apache.http.conn.ssl.X509HostnameVerifier $r6;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r4 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r5 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>(r1, r2, i0, z0);

        r3 = (javax.net.ssl.SSLSocket) $r5;

        $r6 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        interfaceinvoke $r6.<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>(r2, r3);

        return r3;
    }

    public void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        org.apache.http.conn.ssl.X509HostnameVerifier r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: org.apache.http.conn.ssl.X509HostnameVerifier;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Hostname verifier may not be null");

        throw $r2;

     label1:
        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = r1;

        return;
    }

    public org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier()
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        org.apache.http.conn.ssl.X509HostnameVerifier $r1;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        return $r1;
    }

    void <init>(org.apache.http.conn.ssl.SSLSocketFactory$1)
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        org.apache.http.conn.ssl.SSLSocketFactory$1 r1;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: org.apache.http.conn.ssl.SSLSocketFactory$1;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.apache.http.conn.ssl.AllowAllHostnameVerifier $r0;
        org.apache.http.conn.ssl.BrowserCompatHostnameVerifier $r1;
        org.apache.http.conn.ssl.StrictHostnameVerifier $r2;

        <org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String SSLV2> = "SSLv2";

        <org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String SSL> = "SSL";

        <org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String TLS> = "TLS";

        $r0 = new org.apache.http.conn.ssl.AllowAllHostnameVerifier;

        specialinvoke $r0.<org.apache.http.conn.ssl.AllowAllHostnameVerifier: void <init>()>();

        <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER> = $r0;

        $r1 = new org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;

        specialinvoke $r1.<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void <init>()>();

        <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER> = $r1;

        $r2 = new org.apache.http.conn.ssl.StrictHostnameVerifier;

        specialinvoke $r2.<org.apache.http.conn.ssl.StrictHostnameVerifier: void <init>()>();

        <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER> = $r2;

        return;
    }
}
