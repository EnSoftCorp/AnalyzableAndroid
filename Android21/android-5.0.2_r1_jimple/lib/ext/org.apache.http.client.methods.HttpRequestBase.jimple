public abstract class org.apache.http.client.methods.HttpRequestBase extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.client.methods.HttpUriRequest, org.apache.http.client.methods.AbortableHttpRequest, java.lang.Cloneable
{
    private java.util.concurrent.locks.Lock abortLock;
    private boolean aborted;
    private java.net.URI uri;
    private org.apache.http.conn.ClientConnectionRequest connRequest;
    private org.apache.http.conn.ConnectionReleaseTrigger releaseTrigger;

    public void <init>()
    {
        org.apache.http.client.methods.HttpRequestBase r0;
        java.util.concurrent.locks.ReentrantLock $r1;

        r0 := @this: org.apache.http.client.methods.HttpRequestBase;

        specialinvoke r0.<org.apache.http.message.AbstractHttpMessage: void <init>()>();

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<org.apache.http.client.methods.HttpRequestBase: java.util.concurrent.locks.Lock abortLock> = $r1;

        return;
    }

    public abstract java.lang.String getMethod();

    public org.apache.http.ProtocolVersion getProtocolVersion()
    {
        org.apache.http.client.methods.HttpRequestBase r0;
        org.apache.http.params.HttpParams $r1;
        org.apache.http.ProtocolVersion $r2;

        r0 := @this: org.apache.http.client.methods.HttpRequestBase;

        $r1 = virtualinvoke r0.<org.apache.http.client.methods.HttpRequestBase: org.apache.http.params.HttpParams getParams()>();

        $r2 = staticinvoke <org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>($r1);

        return $r2;
    }

    public java.net.URI getURI()
    {
        org.apache.http.client.methods.HttpRequestBase r0;
        java.net.URI $r1;

        r0 := @this: org.apache.http.client.methods.HttpRequestBase;

        $r1 = r0.<org.apache.http.client.methods.HttpRequestBase: java.net.URI uri>;

        return $r1;
    }

    public org.apache.http.RequestLine getRequestLine()
    {
        org.apache.http.client.methods.HttpRequestBase r0;
        java.lang.String r1, r4;
        org.apache.http.ProtocolVersion r2;
        java.net.URI r3;
        org.apache.http.message.BasicRequestLine $r5;
        int $i0;

        r0 := @this: org.apache.http.client.methods.HttpRequestBase;

        r1 = virtualinvoke r0.<org.apache.http.client.methods.HttpRequestBase: java.lang.String getMethod()>();

        r2 = virtualinvoke r0.<org.apache.http.client.methods.HttpRequestBase: org.apache.http.ProtocolVersion getProtocolVersion()>();

        r3 = virtualinvoke r0.<org.apache.http.client.methods.HttpRequestBase: java.net.URI getURI()>();

        r4 = null;

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<java.net.URI: java.lang.String toASCIIString()>();

     label1:
        if r4 == null goto label2;

        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        r4 = "/";

     label3:
        $r5 = new org.apache.http.message.BasicRequestLine;

        specialinvoke $r5.<org.apache.http.message.BasicRequestLine: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>(r1, r4, r2);

        return $r5;
    }

    public void setURI(java.net.URI)
    {
        org.apache.http.client.methods.HttpRequestBase r0;
        java.net.URI r1;

        r0 := @this: org.apache.http.client.methods.HttpRequestBase;

        r1 := @parameter0: java.net.URI;

        r0.<org.apache.http.client.methods.HttpRequestBase: java.net.URI uri> = r1;

        return;
    }

    public void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest) throws java.io.IOException
    {
        org.apache.http.client.methods.HttpRequestBase r0;
        org.apache.http.conn.ClientConnectionRequest r1;
        java.lang.Throwable r2, $r6;
        java.util.concurrent.locks.Lock $r3, $r4, $r7;
        boolean $z0;
        java.io.IOException $r5;

        r0 := @this: org.apache.http.client.methods.HttpRequestBase;

        r1 := @parameter0: org.apache.http.conn.ClientConnectionRequest;

        $r3 = r0.<org.apache.http.client.methods.HttpRequestBase: java.util.concurrent.locks.Lock abortLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = r0.<org.apache.http.client.methods.HttpRequestBase: boolean aborted>;

        if $z0 == 0 goto label2;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Request already aborted");

        throw $r5;

     label2:
        r0.<org.apache.http.client.methods.HttpRequestBase: org.apache.http.conn.ConnectionReleaseTrigger releaseTrigger> = null;

        r0.<org.apache.http.client.methods.HttpRequestBase: org.apache.http.conn.ClientConnectionRequest connRequest> = r1;

     label3:
        $r4 = r0.<org.apache.http.client.methods.HttpRequestBase: java.util.concurrent.locks.Lock abortLock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

     label5:
        $r7 = r0.<org.apache.http.client.methods.HttpRequestBase: java.util.concurrent.locks.Lock abortLock>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger) throws java.io.IOException
    {
        org.apache.http.client.methods.HttpRequestBase r0;
        org.apache.http.conn.ConnectionReleaseTrigger r1;
        java.lang.Throwable r2, $r6;
        java.util.concurrent.locks.Lock $r3, $r4, $r7;
        boolean $z0;
        java.io.IOException $r5;

        r0 := @this: org.apache.http.client.methods.HttpRequestBase;

        r1 := @parameter0: org.apache.http.conn.ConnectionReleaseTrigger;

        $r3 = r0.<org.apache.http.client.methods.HttpRequestBase: java.util.concurrent.locks.Lock abortLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = r0.<org.apache.http.client.methods.HttpRequestBase: boolean aborted>;

        if $z0 == 0 goto label2;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Request already aborted");

        throw $r5;

     label2:
        r0.<org.apache.http.client.methods.HttpRequestBase: org.apache.http.conn.ClientConnectionRequest connRequest> = null;

        r0.<org.apache.http.client.methods.HttpRequestBase: org.apache.http.conn.ConnectionReleaseTrigger releaseTrigger> = r1;

     label3:
        $r4 = r0.<org.apache.http.client.methods.HttpRequestBase: java.util.concurrent.locks.Lock abortLock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

     label5:
        $r7 = r0.<org.apache.http.client.methods.HttpRequestBase: java.util.concurrent.locks.Lock abortLock>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void abort()
    {
        org.apache.http.client.methods.HttpRequestBase r0;
        org.apache.http.conn.ClientConnectionRequest r1;
        org.apache.http.conn.ConnectionReleaseTrigger r2;
        java.lang.Throwable r3, $r8;
        java.util.concurrent.locks.Lock $r4, $r5, $r6, $r9;
        boolean $z0;
        java.io.IOException $r7;

        r0 := @this: org.apache.http.client.methods.HttpRequestBase;

        $r4 = r0.<org.apache.http.client.methods.HttpRequestBase: java.util.concurrent.locks.Lock abortLock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label01:
        $z0 = r0.<org.apache.http.client.methods.HttpRequestBase: boolean aborted>;

        if $z0 == 0 goto label03;

     label02:
        $r6 = r0.<org.apache.http.client.methods.HttpRequestBase: java.util.concurrent.locks.Lock abortLock>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label03:
        r0.<org.apache.http.client.methods.HttpRequestBase: boolean aborted> = 1;

        r1 = r0.<org.apache.http.client.methods.HttpRequestBase: org.apache.http.conn.ClientConnectionRequest connRequest>;

        r2 = r0.<org.apache.http.client.methods.HttpRequestBase: org.apache.http.conn.ConnectionReleaseTrigger releaseTrigger>;

     label04:
        $r5 = r0.<org.apache.http.client.methods.HttpRequestBase: java.util.concurrent.locks.Lock abortLock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label07;

     label05:
        $r8 := @caughtexception;

        r3 = $r8;

     label06:
        $r9 = r0.<org.apache.http.client.methods.HttpRequestBase: java.util.concurrent.locks.Lock abortLock>;

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        throw r3;

     label07:
        if r1 == null goto label08;

        interfaceinvoke r1.<org.apache.http.conn.ClientConnectionRequest: void abortRequest()>();

     label08:
        if r2 == null goto label12;

     label09:
        interfaceinvoke r2.<org.apache.http.conn.ConnectionReleaseTrigger: void abortConnection()>();

     label10:
        goto label12;

     label11:
        $r7 := @caughtexception;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.io.IOException from label09 to label10 with label11;
    }

    public boolean isAborted()
    {
        org.apache.http.client.methods.HttpRequestBase r0;
        boolean $z0;

        r0 := @this: org.apache.http.client.methods.HttpRequestBase;

        $z0 = r0.<org.apache.http.client.methods.HttpRequestBase: boolean aborted>;

        return $z0;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.http.client.methods.HttpRequestBase r0, r1;
        java.lang.Object $r2, $r5, $r8;
        java.util.concurrent.locks.ReentrantLock $r3;
        org.apache.http.message.HeaderGroup $r4, $r6;
        org.apache.http.params.HttpParams $r7, $r9;

        r0 := @this: org.apache.http.client.methods.HttpRequestBase;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (org.apache.http.client.methods.HttpRequestBase) $r2;

        $r3 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r1.<org.apache.http.client.methods.HttpRequestBase: java.util.concurrent.locks.Lock abortLock> = $r3;

        r1.<org.apache.http.client.methods.HttpRequestBase: boolean aborted> = 0;

        r1.<org.apache.http.client.methods.HttpRequestBase: org.apache.http.conn.ConnectionReleaseTrigger releaseTrigger> = null;

        r1.<org.apache.http.client.methods.HttpRequestBase: org.apache.http.conn.ClientConnectionRequest connRequest> = null;

        $r4 = r0.<org.apache.http.client.methods.HttpRequestBase: org.apache.http.message.HeaderGroup headergroup>;

        $r5 = staticinvoke <org.apache.http.client.utils.CloneUtils: java.lang.Object clone(java.lang.Object)>($r4);

        $r6 = (org.apache.http.message.HeaderGroup) $r5;

        r1.<org.apache.http.client.methods.HttpRequestBase: org.apache.http.message.HeaderGroup headergroup> = $r6;

        $r7 = r0.<org.apache.http.client.methods.HttpRequestBase: org.apache.http.params.HttpParams params>;

        $r8 = staticinvoke <org.apache.http.client.utils.CloneUtils: java.lang.Object clone(java.lang.Object)>($r7);

        $r9 = (org.apache.http.params.HttpParams) $r8;

        r1.<org.apache.http.client.methods.HttpRequestBase: org.apache.http.params.HttpParams params> = $r9;

        return r1;
    }
}
