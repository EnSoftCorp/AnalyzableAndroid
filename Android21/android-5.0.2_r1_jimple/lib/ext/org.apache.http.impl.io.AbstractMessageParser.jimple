public abstract class org.apache.http.impl.io.AbstractMessageParser extends java.lang.Object implements org.apache.http.io.HttpMessageParser
{
    private final org.apache.http.io.SessionInputBuffer sessionBuffer;
    private final int maxHeaderCount;
    private final int maxLineLen;
    protected final org.apache.http.message.LineParser lineParser;

    public void <init>(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.io.AbstractMessageParser r0;
        org.apache.http.io.SessionInputBuffer r1;
        org.apache.http.message.LineParser r2, $r4;
        org.apache.http.params.HttpParams r3;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: org.apache.http.impl.io.AbstractMessageParser;

        r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        r2 := @parameter1: org.apache.http.message.LineParser;

        r3 := @parameter2: org.apache.http.params.HttpParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session input buffer may not be null");

        throw $r6;

     label1:
        if r3 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r5;

     label2:
        r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.io.SessionInputBuffer sessionBuffer> = r1;

        $i0 = interfaceinvoke r3.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.connection.max-header-count", -1);

        r0.<org.apache.http.impl.io.AbstractMessageParser: int maxHeaderCount> = $i0;

        $i1 = interfaceinvoke r3.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.connection.max-line-length", -1);

        r0.<org.apache.http.impl.io.AbstractMessageParser: int maxLineLen> = $i1;

        if r2 == null goto label3;

        $r4 = r2;

        goto label4;

     label3:
        $r4 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label4:
        r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.message.LineParser lineParser> = $r4;

        return;
    }

    public static org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer, int, int, org.apache.http.message.LineParser) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.io.SessionInputBuffer r0;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i19;
        org.apache.http.message.LineParser r1;
        java.util.ArrayList r2, $r6;
        org.apache.http.util.CharArrayBuffer r3, r4, $r13, r17;
        char c4, $c8, $c18;
        org.apache.http.ParseException r5, $r12;
        java.lang.Object $r7;
        org.apache.http.Header $r8;
        java.io.IOException $r9, $r10;
        java.lang.IllegalArgumentException $r11;
        org.apache.http.ProtocolException $r14;
        java.lang.String $r15;
        org.apache.http.Header[] r16;

        r0 := @parameter0: org.apache.http.io.SessionInputBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: org.apache.http.message.LineParser;

        if r0 != null goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session input buffer may not be null");

        throw $r11;

     label01:
        if r1 != null goto label02;

        r1 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label02:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = $r6;

        r3 = null;

        r4 = null;

     label03:
        if r3 != null goto label04;

        $r13 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r13.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(64);

        r3 = $r13;

        goto label05;

     label04:
        virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: void clear()>();

     label05:
        i2 = interfaceinvoke r0.<org.apache.http.io.SessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>(r3);

        if i2 == -1 goto label15;

        $i7 = virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: int length()>();

        if $i7 >= 1 goto label06;

        goto label15;

     label06:
        $c8 = virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(0);

        if $c8 == 32 goto label07;

        $c18 = virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(0);

        if $c18 != 9 goto label12;

     label07:
        if r4 == null goto label12;

        i3 = 0;

     label08:
        $i11 = virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: int length()>();

        if i3 >= $i11 goto label10;

        c4 = virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i3);

        if c4 == 32 goto label09;

        if c4 == 9 goto label09;

        goto label10;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        if i1 <= 0 goto label11;

        $i12 = virtualinvoke r4.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i15 = $i12 + 1;

        $i14 = virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i17 = $i15 + $i14;

        $i16 = $i17 - i3;

        if $i16 <= i1 goto label11;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Maximum line length limit exceeded");

        throw $r10;

     label11:
        virtualinvoke r4.<org.apache.http.util.CharArrayBuffer: void append(char)>(32);

        $i10 = virtualinvoke r3.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i13 = $i10 - i3;

        virtualinvoke r4.<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)>(r3, i3, $i13);

        goto label13;

     label12:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        r4 = r3;

        r3 = null;

     label13:
        if i0 <= 0 goto label14;

        $i9 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i9 < i0 goto label14;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Maximum header count exceeded");

        throw $r9;

     label14:
        goto label03;

     label15:
        $i5 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        r16 = newarray (org.apache.http.Header)[$i5];

        i19 = 0;

     label16:
        $i6 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if i19 >= $i6 goto label21;

        $r7 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i19);

        r17 = (org.apache.http.util.CharArrayBuffer) $r7;

     label17:
        $r8 = interfaceinvoke r1.<org.apache.http.message.LineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)>(r17);

        r16[i19] = $r8;

     label18:
        goto label20;

     label19:
        $r12 := @caughtexception;

        r5 = $r12;

        $r14 = new org.apache.http.ProtocolException;

        $r15 = virtualinvoke r5.<org.apache.http.ParseException: java.lang.String getMessage()>();

        specialinvoke $r14.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label20:
        i19 = i19 + 1;

        goto label16;

     label21:
        return r16;

        catch org.apache.http.ParseException from label17 to label18 with label19;
    }

    protected abstract org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) throws java.io.IOException, org.apache.http.HttpException, org.apache.http.ParseException;

    public org.apache.http.HttpMessage parse() throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.impl.io.AbstractMessageParser r0;
        org.apache.http.ParseException r1, $r5;
        org.apache.http.io.SessionInputBuffer $r2, $r4;
        org.apache.http.message.LineParser $r3;
        int $i0, $i1;
        org.apache.http.ProtocolException $r6;
        java.lang.String $r7;
        org.apache.http.HttpMessage r8;
        org.apache.http.Header[] r9;

        r0 := @this: org.apache.http.impl.io.AbstractMessageParser;

     label1:
        $r2 = r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.io.SessionInputBuffer sessionBuffer>;

        r8 = virtualinvoke r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)>($r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new org.apache.http.ProtocolException;

        $r7 = virtualinvoke r1.<org.apache.http.ParseException: java.lang.String getMessage()>();

        specialinvoke $r6.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r7, r1);

        throw $r6;

     label4:
        $r4 = r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.io.SessionInputBuffer sessionBuffer>;

        $i1 = r0.<org.apache.http.impl.io.AbstractMessageParser: int maxHeaderCount>;

        $i0 = r0.<org.apache.http.impl.io.AbstractMessageParser: int maxLineLen>;

        $r3 = r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.message.LineParser lineParser>;

        r9 = staticinvoke <org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)>($r4, $i1, $i0, $r3);

        interfaceinvoke r8.<org.apache.http.HttpMessage: void setHeaders(org.apache.http.Header[])>(r9);

        return r8;

        catch org.apache.http.ParseException from label1 to label2 with label3;
    }
}
