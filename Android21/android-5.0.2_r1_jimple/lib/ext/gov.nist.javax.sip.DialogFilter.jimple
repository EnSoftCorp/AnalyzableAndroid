class gov.nist.javax.sip.DialogFilter extends java.lang.Object implements gov.nist.javax.sip.stack.ServerRequestInterface, gov.nist.javax.sip.stack.ServerResponseInterface
{
    protected gov.nist.javax.sip.stack.SIPTransaction transactionChannel;
    protected gov.nist.javax.sip.ListeningPointImpl listeningPoint;
    private gov.nist.javax.sip.SipStackImpl sipStack;

    public void <init>(gov.nist.javax.sip.SipStackImpl)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.SipStackImpl r1;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.SipStackImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack> = r1;

        return;
    }

    private void sendRequestPendingResponse(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.stack.SIPServerTransaction r2;
        gov.nist.javax.sip.message.SIPResponse r3;
        javax.sip.header.ServerHeader r4;
        gov.nist.javax.sip.header.RetryAfter r5, $r6;
        java.lang.String $r7;
        boolean $z0;
        gov.nist.javax.sip.SipStackImpl $r8, $r10, $r12;
        java.lang.Exception $r9, r13;
        gov.nist.core.StackLogger $r11;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.SIPServerTransaction;

        r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(491);

        r4 = staticinvoke <gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()>();

        if r4 == null goto label1;

        virtualinvoke r3.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r4);

     label1:
        $r6 = new gov.nist.javax.sip.header.RetryAfter;

        specialinvoke $r6.<gov.nist.javax.sip.header.RetryAfter: void <init>()>();

        r5 = $r6;

        virtualinvoke r5.<gov.nist.javax.sip.header.RetryAfter: void setRetryAfter(int)>(1);

        virtualinvoke r3.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r5);

        $r7 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z0 == 0 goto label2;

        $r8 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r8.<gov.nist.javax.sip.SipStackImpl: void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r2);

     label2:
        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>(r3);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        r13 = $r9;

        $r10 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r11 = virtualinvoke $r10.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r11.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Problem sending error response", r13);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

        $r12 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r12.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    private void sendBadRequestResponse(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.SIPServerTransaction, java.lang.String)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.stack.SIPServerTransaction r2;
        java.lang.String r3, $r7;
        gov.nist.javax.sip.message.SIPResponse r4;
        javax.sip.header.ServerHeader r5;
        java.lang.Exception r6, $r9;
        boolean $z0;
        gov.nist.javax.sip.SipStackImpl $r8, $r10, $r12;
        gov.nist.core.StackLogger $r11;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.SIPServerTransaction;

        r3 := @parameter2: java.lang.String;

        r4 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(400);

        if r3 == null goto label1;

        virtualinvoke r4.<gov.nist.javax.sip.message.SIPResponse: void setReasonPhrase(java.lang.String)>(r3);

     label1:
        r5 = staticinvoke <gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()>();

        if r5 == null goto label2;

        virtualinvoke r4.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r5);

     label2:
        $r7 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z0 == 0 goto label3;

        $r8 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r8.<gov.nist.javax.sip.SipStackImpl: void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r2);

     label3:
        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>(r4);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        r6 = $r9;

        $r10 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r11 = virtualinvoke $r10.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r11.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Problem sending error response", r6);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

        $r12 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r12.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

     label6:
        return;

        catch java.lang.Exception from label2 to label4 with label5;
    }

    private void sendCallOrTransactionDoesNotExistResponse(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.stack.SIPServerTransaction r2;
        gov.nist.javax.sip.message.SIPResponse r3;
        javax.sip.header.ServerHeader r4;
        java.lang.Exception r5, $r8;
        java.lang.String $r6;
        boolean $z0;
        gov.nist.javax.sip.SipStackImpl $r7, $r9, $r11;
        gov.nist.core.StackLogger $r10;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.SIPServerTransaction;

        r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(481);

        r4 = staticinvoke <gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()>();

        if r4 == null goto label1;

        virtualinvoke r3.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r4);

     label1:
        $r6 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z0 == 0 goto label2;

        $r7 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r7.<gov.nist.javax.sip.SipStackImpl: void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r2);

     label2:
        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>(r3);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r5 = $r8;

        $r9 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r10 = virtualinvoke $r9.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r10.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Problem sending error response", r5);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

        $r11 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r11.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    private void sendLoopDetectedResponse(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.stack.SIPServerTransaction r2;
        gov.nist.javax.sip.message.SIPResponse r3;
        javax.sip.header.ServerHeader r4;
        java.lang.Exception r5, $r7;
        gov.nist.javax.sip.SipStackImpl $r6, $r8, $r10;
        gov.nist.core.StackLogger $r9;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.SIPServerTransaction;

        r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(482);

        r4 = staticinvoke <gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()>();

        if r4 == null goto label1;

        virtualinvoke r3.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r4);

     label1:
        $r6 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r6.<gov.nist.javax.sip.SipStackImpl: void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r2);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>(r3);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r5 = $r7;

        $r8 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r9 = virtualinvoke $r8.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r9.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Problem sending error response", r5);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

        $r10 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r10.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void sendServerInternalErrorResponse(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.SIPServerTransaction)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPRequest r1;
        gov.nist.javax.sip.stack.SIPServerTransaction r2;
        gov.nist.javax.sip.message.SIPResponse r3;
        javax.sip.header.ServerHeader r4, $r6;
        gov.nist.javax.sip.SipStackImpl $r5, $r8, $r9, $r12, $r13;
        boolean $z0;
        gov.nist.javax.sip.header.RetryAfter $r7, r15;
        gov.nist.core.StackLogger $r10, $r14;
        java.lang.Exception $r11, r16;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.SIPServerTransaction;

        $r5 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r5.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r10 = virtualinvoke $r9.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r10.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Sending 500 response for out of sequence message");

     label1:
        r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(500);

        virtualinvoke r3.<gov.nist.javax.sip.message.SIPResponse: void setReasonPhrase(java.lang.String)>("Request out of order");

        $r6 = staticinvoke <gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()>();

        if $r6 == null goto label2;

        r4 = staticinvoke <gov.nist.javax.sip.message.MessageFactoryImpl: javax.sip.header.ServerHeader getDefaultServerHeader()>();

        virtualinvoke r3.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r4);

     label2:
        $r7 = new gov.nist.javax.sip.header.RetryAfter;

        specialinvoke $r7.<gov.nist.javax.sip.header.RetryAfter: void <init>()>();

        r15 = $r7;

        virtualinvoke r15.<gov.nist.javax.sip.header.RetryAfter: void setRetryAfter(int)>(10);

        virtualinvoke r3.<gov.nist.javax.sip.message.SIPResponse: void setHeader(javax.sip.header.Header)>(r15);

        $r8 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r8.<gov.nist.javax.sip.SipStackImpl: void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r2);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>(r3);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        r16 = $r11;

        $r12 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r14 = virtualinvoke $r12.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r14.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Problem sending response", r16);

        virtualinvoke r2.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

        $r13 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r13.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r2);

     label5:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void processRequest(gov.nist.javax.sip.message.SIPRequest, gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPRequest r1, r292;
        gov.nist.javax.sip.stack.MessageChannel r2;
        gov.nist.javax.sip.SipStackImpl r3, $r13, $r38, $r39, $r50, $r51, $r244, $r245, $r254;
        gov.nist.javax.sip.SipProviderImpl r4, $r66, $r131, $r230;
        gov.nist.javax.sip.stack.SIPServerTransaction r5, $r80, r285, r293, r294, r296, r297, r305, r310;
        java.lang.String r6, r10, r11, r12, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r28, $r36, $r41, $r42, $r43, $r44, $r53, $r54, $r60, $r61, $r62, $r67, $r68, $r81, $r83, $r101, $r111, $r118, $r134, $r139, $r153, $r161, $r172, $r173, $r176, $r177, $r183, $r187, $r189, $r194, $r197, $r199, $r202, $r211, $r213, $r222, $r233, $r234, $r242, $r256, $r258, $r280, r289;
        gov.nist.javax.sip.stack.SIPDialog r7, $r37, $r108, r315;
        gov.nist.javax.sip.header.Contact r8;
        gov.nist.javax.sip.address.SipUri r9, $r214, r288;
        int i0, $i1, $i9, $i16, $i17, $i18, $i19, $i20, i21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65, $z66, $z67, $z68, $z69, $z70, $z71, $z72, $z73, $z74, $z75, $z76, $z77, $z78, $z79, $z80, $z81, $z82, $z83, $z84, $z85, $z86, $z87, $z88, $z89, $z90, $z91, $z92, $z93, $z94, $z95, $z96, $z97, $z98, $z99, $z100, $z101, $z102, $z103, $z104, $z105, $z106, $z107;
        gov.nist.javax.sip.stack.SIPTransaction $r14, $r18, $r82, $r102, $r238, r291, r311;
        gov.nist.javax.sip.ListeningPointImpl $r15, $r16, $r30, $r198, $r200, $r203, $r204, $r212, $r218, $r241, $r257, $r279;
        gov.nist.javax.sip.stack.SIPTransactionStack $r17;
        javax.sip.header.Header $r20, $r40, $r185, $r208;
        javax.sip.RequestEvent $r27, $r29, $r32, $r33, $r35, r317;
        gov.nist.core.StackLogger $r31, $r45, $r49, $r52, $r57, $r78, $r86, $r92, $r94, $r103, $r107, $r116, $r123, $r124, $r130, $r135, $r146, $r154, $r156, $r157, $r158, $r159, $r160, $r164, $r169, $r180, $r184, $r190, $r191, $r219, $r223, $r226, $r243, $r248, $r255, $r260, $r263, $r266, $r272, $r278, $r284;
        javax.sip.DialogState $r34;
        java.lang.StringBuilder $r46, $r47, $r48, $r55, $r56, $r58, $r59, $r63, $r64, $r65, $r74, $r75, $r76, $r77, $r84, $r85, $r87, $r88, $r89, $r90, $r110, $r112, $r113, $r117, $r119, $r120, $r121, $r122, $r125, $r126, $r132, $r133, $r136, $r137, $r138, $r140, $r142, $r143, $r144, $r145, $r150, $r151, $r152, $r155, $r162, $r163, $r165, $r166, $r167, $r168, $r170, $r171, $r174, $r175, $r178, $r179, $r181, $r182, $r188, $r192, $r193, $r195, $r196, $r216, $r217, $r220, $r221, $r224, $r225, $r227, $r228, $r229, $r232, $r235, $r236, $r237, $r239, $r240, $r246, $r247, $r249, $r250, $r252, $r253, $r259, $r281;
        javax.sip.TransactionState $r69, $r70, $r71, $r79, $r98, $r99, $r100, $r104, $r105, $r106, $r127, $r128, $r147, $r148, $r251;
        byte $b2, $b10, $b14;
        long $l3, $l4, $l5, $l6, $l7, $l8, $l11, $l12, $l13, $l15, l22;
        javax.sip.header.CSeqHeader $r72, $r73, $r91, $r93, $r141, $r149, $r205;
        gov.nist.javax.sip.message.SIPResponse $r95, $r96, $r97, $r129, r299, r302, r307, r313;
        javax.sip.Dialog $r109, $r114, $r115, $r210;
        javax.sip.message.Request $r186;
        gov.nist.core.HostPort $r201, $r207;
        javax.sip.address.URI $r206, $r215;
        javax.sip.address.Address $r209, $r231;
        java.io.IOException $r261, $r277, $r283, r304;
        javax.sip.SipException $r262, $r265, $r267, r300, r303, r308;
        java.lang.Exception $r264, $r268, $r269, $r273, $r274, $r275, $r276, $r282, r295, r298, r301, r306, r309, r314;
        java.lang.Throwable $r270, $r271;
        gov.nist.javax.sip.header.RouteList r286;
        gov.nist.javax.sip.header.Route r287;
        javax.sip.header.ReferToHeader r290;
        gov.nist.javax.sip.stack.SIPClientTransaction r312;
        gov.nist.javax.sip.header.Event r316;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPRequest;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        $r13 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r13.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label001;

        $r244 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r248 = virtualinvoke $r244.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r249 = new java.lang.StringBuilder;

        specialinvoke $r249.<java.lang.StringBuilder: void <init>()>();

        $r246 = virtualinvoke $r249.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROCESSING INCOMING REQUEST ");

        $r247 = virtualinvoke $r246.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r237 = virtualinvoke $r247.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transactionChannel = ");

        $r238 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        $r235 = virtualinvoke $r237.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r238);

        $r236 = virtualinvoke $r235.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" listening point = ");

        $r241 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $r242 = virtualinvoke $r241.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getIPAddress()>();

        $r239 = virtualinvoke $r236.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r242);

        $r240 = virtualinvoke $r239.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r279 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $i20 = virtualinvoke $r279.<gov.nist.javax.sip.ListeningPointImpl: int getPort()>();

        $r281 = virtualinvoke $r240.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r280 = virtualinvoke $r281.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r248.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r280);

     label001:
        $r15 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        if $r15 != null goto label003;

        $r254 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z100 = virtualinvoke $r254.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z100 == 0 goto label002;

        $r245 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r243 = virtualinvoke $r245.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r243.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dropping message: No listening point registered!");

     label002:
        return;

     label003:
        $r14 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        $r17 = virtualinvoke $r14.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.stack.SIPTransactionStack getSIPStack()>();

        r3 = (gov.nist.javax.sip.SipStackImpl) $r17;

        $r16 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        r4 = virtualinvoke $r16.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl getProvider()>();

        if r4 != null goto label005;

        $z101 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z101 == 0 goto label004;

        $r255 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r255.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("No provider - dropping !!");

     label004:
        return;

     label005:
        if r3 != null goto label006;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.String)>("Egads! no sip stack!");

     label006:
        $r18 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        r5 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r18;

        if r5 == null goto label007;

        $z102 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z102 == 0 goto label007;

        $r260 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r253 = new java.lang.StringBuilder;

        specialinvoke $r253.<java.lang.StringBuilder: void <init>()>();

        $r252 = virtualinvoke $r253.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("transaction state = ");

        $r251 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()>();

        $r250 = virtualinvoke $r252.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r251);

        $r256 = virtualinvoke $r250.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r260.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r256);

     label007:
        r6 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(1);

        r7 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r6);

        if r7 == null goto label014;

        $r230 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        if r4 == $r230 goto label014;

        r8 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.header.Contact getMyContactHeader()>();

        if r8 == null goto label014;

        $r231 = virtualinvoke r8.<gov.nist.javax.sip.header.Contact: javax.sip.address.Address getAddress()>();

        $r215 = interfaceinvoke $r231.<javax.sip.address.Address: javax.sip.address.URI getURI()>();

        $r214 = (gov.nist.javax.sip.address.SipUri) $r215;

        r9 = (gov.nist.javax.sip.address.SipUri) $r214;

        r10 = virtualinvoke r9.<gov.nist.javax.sip.address.SipUri: java.lang.String getHost()>();

        i0 = virtualinvoke r9.<gov.nist.javax.sip.address.SipUri: int getPort()>();

        r11 = virtualinvoke r9.<gov.nist.javax.sip.address.SipUri: java.lang.String getTransportParam()>();

        if r11 != null goto label008;

        r11 = "udp";

     label008:
        if i0 != -1 goto label011;

        $z104 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("udp");

        if $z104 != 0 goto label009;

        $z103 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("tcp");

        if $z103 == 0 goto label010;

     label009:
        i0 = 5060;

        goto label011;

     label010:
        i0 = 5061;

     label011:
        if r10 == null goto label014;

        $r212 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $r213 = virtualinvoke $r212.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getIPAddress()>();

        $z97 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>($r213);

        if $z97 == 0 goto label012;

        $r257 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $i19 = virtualinvoke $r257.<gov.nist.javax.sip.ListeningPointImpl: int getPort()>();

        if i0 == $i19 goto label014;

     label012:
        $z98 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z98 == 0 goto label013;

        $r219 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r221 = new java.lang.StringBuilder;

        specialinvoke $r221.<java.lang.StringBuilder: void <init>()>();

        $r220 = virtualinvoke $r221.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("nulling dialog -- listening point mismatch!  ");

        $r217 = virtualinvoke $r220.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r216 = virtualinvoke $r217.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  lp port = ");

        $r218 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $i18 = virtualinvoke $r218.<gov.nist.javax.sip.ListeningPointImpl: int getPort()>();

        $r259 = virtualinvoke $r216.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r258 = virtualinvoke $r259.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r219.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r258);

     label013:
        r7 = null;

     label014:
        $z2 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z2 == 0 goto label015;

        $z99 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z99 == 0 goto label015;

        $r234 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getToTag()>();

        if $r234 != null goto label015;

        r285 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPServerTransaction findMergedTransaction(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if r285 == null goto label015;

        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendLoopDetectedResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label015:
        $z1 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label016;

        $r226 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r227 = new java.lang.StringBuilder;

        specialinvoke $r227.<java.lang.StringBuilder: void <init>()>();

        $r228 = virtualinvoke $r227.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dialogId = ");

        $r229 = virtualinvoke $r228.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r222 = virtualinvoke $r229.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r226.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r222);

        $r223 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r224 = new java.lang.StringBuilder;

        specialinvoke $r224.<java.lang.StringBuilder: void <init>()>();

        $r225 = virtualinvoke $r224.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dialog = ");

        $r232 = virtualinvoke $r225.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r233 = virtualinvoke $r232.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r223.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r233);

     label016:
        $r20 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.Header getHeader(java.lang.String)>("Route");

        if $r20 == null goto label022;

        $r210 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.Dialog getDialog()>();

        if $r210 == null goto label022;

        r286 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.header.RouteList getRouteHeaders()>();

        $r208 = virtualinvoke r286.<gov.nist.javax.sip.header.RouteList: javax.sip.header.Header getFirst()>();

        r287 = (gov.nist.javax.sip.header.Route) $r208;

        $r209 = virtualinvoke r287.<gov.nist.javax.sip.header.Route: javax.sip.address.Address getAddress()>();

        $r206 = interfaceinvoke $r209.<javax.sip.address.Address: javax.sip.address.URI getURI()>();

        r288 = (gov.nist.javax.sip.address.SipUri) $r206;

        $r207 = virtualinvoke r288.<gov.nist.javax.sip.address.SipUri: gov.nist.core.HostPort getHostPort()>();

        $z89 = virtualinvoke $r207.<gov.nist.core.HostPort: boolean hasPort()>();

        if $z89 == 0 goto label017;

        $r201 = virtualinvoke r288.<gov.nist.javax.sip.address.SipUri: gov.nist.core.HostPort getHostPort()>();

        i21 = virtualinvoke $r201.<gov.nist.core.HostPort: int getPort()>();

        goto label019;

     label017:
        $r200 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $r199 = virtualinvoke $r200.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getTransport()>();

        $z88 = virtualinvoke $r199.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TLS");

        if $z88 == 0 goto label018;

        i21 = 5061;

        goto label019;

     label018:
        i21 = 5060;

     label019:
        r289 = virtualinvoke r288.<gov.nist.javax.sip.address.SipUri: java.lang.String getHost()>();

        $r198 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $r197 = virtualinvoke $r198.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getIPAddress()>();

        $z87 = virtualinvoke r289.<java.lang.String: boolean equals(java.lang.Object)>($r197);

        if $z87 != 0 goto label020;

        $r203 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $r202 = virtualinvoke $r203.<gov.nist.javax.sip.ListeningPointImpl: java.lang.String getSentBy()>();

        $z90 = virtualinvoke r289.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r202);

        if $z90 == 0 goto label022;

     label020:
        $r204 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        $i17 = virtualinvoke $r204.<gov.nist.javax.sip.ListeningPointImpl: int getPort()>();

        if i21 != $i17 goto label022;

        $i16 = virtualinvoke r286.<gov.nist.javax.sip.header.RouteList: int size()>();

        if $i16 != 1 goto label021;

        virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: void removeHeader(java.lang.String)>("Route");

        goto label022;

     label021:
        virtualinvoke r286.<gov.nist.javax.sip.header.RouteList: void removeFirst()>();

     label022:
        $r19 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z3 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("REFER");

        if $z3 == 0 goto label026;

        if r7 == null goto label026;

        $z81 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z81 == 0 goto label026;

        $r185 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.Header getHeader(java.lang.String)>("Refer-To");

        r290 = (javax.sip.header.ReferToHeader) $r185;

        if r290 != null goto label023;

        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendBadRequestResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction,java.lang.String)>(r1, r5, "Refer-To header is missing");

        return;

     label023:
        r291 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.stack.SIPTransaction getLastTransaction()>();

        if r291 == null goto label025;

        $z83 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z83 == 0 goto label025;

        $r186 = virtualinvoke r291.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.message.Request getRequest()>();

        r292 = (gov.nist.javax.sip.message.SIPRequest) $r186;

        $z94 = r291 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z94 == 0 goto label024;

        $z92 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isAckSeen()>();

        if $z92 != 0 goto label025;

        $r211 = virtualinvoke r292.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z96 = virtualinvoke $r211.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z96 == 0 goto label025;

        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendRequestPendingResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label024:
        $z95 = r291 instanceof gov.nist.javax.sip.stack.SIPClientTransaction;

        if $z95 == 0 goto label025;

        $r205 = virtualinvoke r292.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeqHeader()>();

        l22 = interfaceinvoke $r205.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        r12 = virtualinvoke r292.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z93 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z93 == 0 goto label025;

        $z91 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isAckSent(long)>(l22);

        if $z91 != 0 goto label025;

        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendRequestPendingResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label025:
        goto label112;

     label026:
        $r21 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z4 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("UPDATE");

        if $z4 == 0 goto label027;

        $z82 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z82 == 0 goto label112;

        if r7 != null goto label112;

        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendCallOrTransactionDoesNotExistResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label027:
        $r22 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z6 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z6 == 0 goto label052;

        if r5 == null goto label028;

        $z79 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isInviteTransaction()>();

        if $z79 == 0 goto label028;

        $z80 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z80 == 0 goto label112;

        $r184 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r184.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Processing ACK for INVITE Tx ");

        goto label112;

     label028:
        $z72 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z72 == 0 goto label029;

        $r180 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r179 = new java.lang.StringBuilder;

        specialinvoke $r179.<java.lang.StringBuilder: void <init>()>();

        $r182 = virtualinvoke $r179.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing ACK for dialog ");

        $r181 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r183 = virtualinvoke $r181.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r180.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r183);

     label029:
        if r7 != null goto label037;

        $z84 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z84 == 0 goto label030;

        $r191 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r192 = new java.lang.StringBuilder;

        specialinvoke $r192.<java.lang.StringBuilder: void <init>()>();

        $r193 = virtualinvoke $r192.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog does not exist ");

        $r194 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r195 = virtualinvoke $r193.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r194);

        $r196 = virtualinvoke $r195.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isServerTransaction = ");

        $r178 = virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(1);

        $r177 = virtualinvoke $r178.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r191.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r177);

     label030:
        r293 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPServerTransaction getRetransmissionAlertTransaction(java.lang.String)>(r6);

        if r293 == null goto label031;

        $z86 = virtualinvoke r293.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isRetransmissionAlertEnabled()>();

        if $z86 == 0 goto label031;

        virtualinvoke r293.<gov.nist.javax.sip.stack.SIPServerTransaction: void disableRetransmissionAlerts()>();

     label031:
        r294 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPServerTransaction findTransactionPendingAck(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if r294 == null goto label036;

        $z85 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z85 == 0 goto label032;

        $r190 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r190.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Found Tx pending ACK");

     label032:
        virtualinvoke r294.<gov.nist.javax.sip.stack.SIPServerTransaction: void setAckSeen()>();

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r294);

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean removeTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r294);

     label033:
        goto label035;

     label034:
        $r282 := @caughtexception;

        r295 = $r282;

        $z107 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z107 == 0 goto label035;

        $r284 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r284.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Problem terminating transaction", r295);

     label035:
        return;

     label036:
        goto label112;

     label037:
        $z74 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean handleAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        if $z74 != 0 goto label046;

        $z75 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isSequnceNumberValidation()>();

        if $z75 != 0 goto label040;

        $z71 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z71 == 0 goto label038;

        $r164 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r163 = new java.lang.StringBuilder;

        specialinvoke $r163.<java.lang.StringBuilder: void <init>()>();

        $r162 = virtualinvoke $r163.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog exists with loose dialog validation ");

        $r161 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r168 = virtualinvoke $r162.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r161);

        $r167 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isServerTransaction = ");

        $r166 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(1);

        $r165 = virtualinvoke $r166.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dialog = ");

        $r187 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        $r188 = virtualinvoke $r165.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r187);

        $r189 = virtualinvoke $r188.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r164.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r189);

     label038:
        r296 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPServerTransaction getRetransmissionAlertTransaction(java.lang.String)>(r6);

        if r296 == null goto label039;

        $z70 = virtualinvoke r296.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isRetransmissionAlertEnabled()>();

        if $z70 == 0 goto label039;

        virtualinvoke r296.<gov.nist.javax.sip.stack.SIPServerTransaction: void disableRetransmissionAlerts()>();

     label039:
        goto label112;

     label040:
        $z76 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z76 == 0 goto label041;

        $r160 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r160.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dropping ACK - cannot find a transaction or dialog");

     label041:
        r297 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPServerTransaction findTransactionPendingAck(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if r297 == null goto label045;

        $z69 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z69 == 0 goto label042;

        $r159 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r159.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Found Tx pending ACK");

     label042:
        virtualinvoke r297.<gov.nist.javax.sip.stack.SIPServerTransaction: void setAckSeen()>();

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r297);

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean removeTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>(r297);

     label043:
        goto label045;

     label044:
        $r276 := @caughtexception;

        r298 = $r276;

        $z106 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z106 == 0 goto label045;

        $r278 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r278.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Problem terminating transaction", r298);

     label045:
        return;

     label046:
        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean passToListener()>();

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r1);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r7, r6);

        $r176 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z73 = virtualinvoke $r176.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z73 == 0 goto label047;

        $z78 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z78 == 0 goto label047;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void putInMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction,gov.nist.javax.sip.message.SIPRequest)>(r5, r1);

     label047:
        $z77 = r3.<gov.nist.javax.sip.SipStackImpl: boolean deliverTerminatedEventForAck>;

        if $z77 == 0 goto label051;

     label048:
        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void scheduleAckRemoval()>();

     label049:
        goto label112;

     label050:
        $r283 := @caughtexception;

        goto label112;

     label051:
        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setMapped(boolean)>(1);

        goto label112;

     label052:
        $r24 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z5 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("PRACK");

        if $z5 == 0 goto label068;

        $z62 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z62 == 0 goto label053;

        $r169 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r170 = new java.lang.StringBuilder;

        specialinvoke $r170.<java.lang.StringBuilder: void <init>()>();

        $r174 = virtualinvoke $r170.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing PRACK for dialog ");

        $r175 = virtualinvoke $r174.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r173 = virtualinvoke $r175.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r169.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r173);

     label053:
        if r7 != null goto label061;

        $z65 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z65 == 0 goto label061;

        $z63 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z63 == 0 goto label054;

        $r154 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r155 = new java.lang.StringBuilder;

        specialinvoke $r155.<java.lang.StringBuilder: void <init>()>();

        $r152 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dialog does not exist ");

        $r153 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFirstLine()>();

        $r150 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r153);

        $r151 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isServerTransaction = ");

        $r171 = virtualinvoke $r151.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(1);

        $r172 = virtualinvoke $r171.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r154.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r172);

     label054:
        $z64 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z64 == 0 goto label055;

        $r156 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r156.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Sending 481 for PRACK - automatic dialog support is enabled -- cant find dialog!");

     label055:
        r299 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(481);

     label056:
        virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: void sendResponse(javax.sip.message.Response)>(r299);

     label057:
        goto label059;

     label058:
        $r265 := @caughtexception;

        r300 = $r265;

        $r266 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r266.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("error sending response", r300);

     label059:
        if r5 == null goto label060;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label060:
        return;

     label061:
        if r7 == null goto label067;

        $z66 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean handlePrack(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if $z66 != 0 goto label064;

        $z67 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z67 == 0 goto label062;

        $r157 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r157.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dropping out of sequence PRACK ");

     label062:
        if r5 == null goto label063;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label063:
        return;

     label064:
        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r1);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r7, r6);

     label065:
        goto label112;

     label066:
        $r274 := @caughtexception;

        r301 = $r274;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r301);

        goto label112;

     label067:
        $z68 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z68 == 0 goto label112;

        $r158 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r158.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Processing PRACK without a DIALOG -- this must be a proxy element");

        goto label112;

     label068:
        $r23 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z8 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>("BYE");

        if $z8 == 0 goto label083;

        if r7 == null goto label072;

        $z57 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isRequestConsumable(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if $z57 != 0 goto label072;

        $z58 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z58 == 0 goto label069;

        $r146 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r145 = new java.lang.StringBuilder;

        specialinvoke $r145.<java.lang.StringBuilder: void <init>()>();

        $r144 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping out of sequence BYE ");

        $l13 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: long getRemoteSeqNumber()>();

        $r143 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l13);

        $r142 = virtualinvoke $r143.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r141 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l12 = interfaceinvoke $r141.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $r140 = virtualinvoke $r142.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l12);

        $r139 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r146.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r139);

     label069:
        $l11 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: long getRemoteSeqNumber()>();

        $r149 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l15 = interfaceinvoke $r149.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $b14 = $l11 cmp $l15;

        if $b14 < 0 goto label070;

        $r148 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()>();

        $r147 = <javax.sip.TransactionState: javax.sip.TransactionState TRYING>;

        if $r148 != $r147 goto label070;

        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendServerInternalErrorResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

     label070:
        if r5 == null goto label071;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

     label071:
        return;

     label072:
        if r7 != null goto label078;

        $z59 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z59 == 0 goto label078;

        r302 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(481);

        virtualinvoke r302.<gov.nist.javax.sip.message.SIPResponse: void setReasonPhrase(java.lang.String)>("Dialog Not Found");

        $z60 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z60 == 0 goto label073;

        $r130 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r130.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("dropping request -- automatic dialog support enabled and dialog does not exist!");

     label073:
        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>(r302);

     label074:
        goto label076;

     label075:
        $r262 := @caughtexception;

        r303 = $r262;

        $r263 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r263.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Error in sending response", r303);

     label076:
        if r5 == null goto label077;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label077:
        return;

     label078:
        if r5 == null goto label082;

        if r7 == null goto label082;

     label079:
        $r131 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        if r4 != $r131 goto label080;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r7, r6);

     label080:
        goto label082;

     label081:
        $r261 := @caughtexception;

        r304 = $r261;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r304);

     label082:
        $z55 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z55 == 0 goto label112;

        $r135 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r136 = new java.lang.StringBuilder;

        specialinvoke $r136.<java.lang.StringBuilder: void <init>()>();

        $r137 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BYE Tx = ");

        $r138 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r132 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isMapped =");

        $z61 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isTransactionMapped()>();

        $r133 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z61);

        $r134 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r135.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r134);

        goto label112;

     label083:
        $r26 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z7 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("CANCEL");

        if $z7 == 0 goto label102;

        $r102 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPTransaction findCancelTransaction(gov.nist.javax.sip.message.SIPRequest,boolean)>(r1, 1);

        r305 = (gov.nist.javax.sip.stack.SIPServerTransaction) $r102;

        $z45 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z45 == 0 goto label084;

        $r123 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r126 = new java.lang.StringBuilder;

        specialinvoke $r126.<java.lang.StringBuilder: void <init>()>();

        $r125 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got a CANCEL, InviteServerTx = ");

        $r120 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r305);

        $r119 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cancel Server Tx ID = ");

        $r122 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r121 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isMapped = ");

        $z54 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isTransactionMapped()>();

        $r117 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z54);

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r123.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r118);

     label084:
        $r101 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z52 = virtualinvoke $r101.<java.lang.String: boolean equals(java.lang.Object)>("CANCEL");

        if $z52 == 0 goto label090;

        if r305 == null goto label089;

        $r128 = virtualinvoke r305.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()>();

        $r127 = <gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState TERMINATED_STATE>;

        if $r128 != $r127 goto label089;

        $z56 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z56 == 0 goto label085;

        $r124 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r124.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Too late to cancel Transaction");

     label085:
        $r129 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(200);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>($r129);

     label086:
        goto label088;

     label087:
        $r269 := @caughtexception;

        r306 = $r269;

        $r270 = virtualinvoke r306.<java.lang.Exception: java.lang.Throwable getCause()>();

        if $r270 == null goto label088;

        $r271 = virtualinvoke r306.<java.lang.Exception: java.lang.Throwable getCause()>();

        $z105 = $r271 instanceof java.io.IOException;

        if $z105 == 0 goto label088;

        virtualinvoke r305.<gov.nist.javax.sip.stack.SIPServerTransaction: void raiseIOExceptionEvent()>();

     label088:
        return;

     label089:
        $z50 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z50 == 0 goto label090;

        $r107 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r112 = new java.lang.StringBuilder;

        specialinvoke $r112.<java.lang.StringBuilder: void <init>()>();

        $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cancel transaction = ");

        $r110 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r305);

        $r111 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r107.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r111);

     label090:
        if r5 == null goto label091;

        if r305 == null goto label091;

        $r114 = virtualinvoke r305.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.Dialog getDialog()>();

        if $r114 == null goto label091;

        $r115 = virtualinvoke r305.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.Dialog getDialog()>();

        $r108 = (gov.nist.javax.sip.stack.SIPDialog) $r115;

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>($r108, r6);

        $r109 = virtualinvoke r305.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.Dialog getDialog()>();

        r7 = (gov.nist.javax.sip.stack.SIPDialog) $r109;

        goto label097;

     label091:
        if r305 != null goto label097;

        $z51 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z51 == 0 goto label097;

        if r5 == null goto label097;

        r307 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(481);

        $z53 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z53 == 0 goto label092;

        $r116 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r116.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("dropping request -- automatic dialog support enabled and INVITE ST does not exist!");

     label092:
        virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: void sendResponse(javax.sip.message.Response)>(r307);

     label093:
        goto label095;

     label094:
        $r267 := @caughtexception;

        r308 = $r267;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r308);

     label095:
        if r5 == null goto label096;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void releaseSem()>();

     label096:
        return;

     label097:
        if r305 == null goto label101;

     label098:
        if r5 == null goto label099;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setPassToListener()>();

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setInviteTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r305);

        virtualinvoke r305.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean acquireSem()>();

     label099:
        goto label101;

     label100:
        $r268 := @caughtexception;

        r309 = $r268;

        staticinvoke <gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)>(r309);

     label101:
        goto label112;

     label102:
        $r25 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z10 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z10 == 0 goto label112;

        if r7 != null goto label103;

        $r80 = null;

        goto label104;

     label103:
        $r80 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.stack.SIPServerTransaction getInviteTransaction()>();

     label104:
        r310 = $r80;

        if r7 == null goto label106;

        if r5 == null goto label106;

        if r310 == null goto label106;

        $r93 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l7 = interfaceinvoke $r93.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $l8 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: long getRemoteSeqNumber()>();

        $b10 = $l7 cmp $l8;

        if $b10 <= 0 goto label106;

        $z48 = r310 instanceof gov.nist.javax.sip.stack.SIPServerTransaction;

        if $z48 == 0 goto label106;

        $z47 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z47 == 0 goto label106;

        $z46 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isSequnceNumberValidation()>();

        if $z46 == 0 goto label106;

        $z49 = virtualinvoke r310.<gov.nist.javax.sip.stack.SIPTransaction: boolean isInviteTransaction()>();

        if $z49 == 0 goto label106;

        $r106 = virtualinvoke r310.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState getState()>();

        $r105 = <javax.sip.TransactionState: javax.sip.TransactionState COMPLETED>;

        if $r106 == $r105 goto label106;

        $r104 = virtualinvoke r310.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState getState()>();

        $r100 = <javax.sip.TransactionState: javax.sip.TransactionState TERMINATED>;

        if $r104 == $r100 goto label106;

        $r99 = virtualinvoke r310.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.TransactionState getState()>();

        $r98 = <javax.sip.TransactionState: javax.sip.TransactionState CONFIRMED>;

        if $r99 == $r98 goto label106;

        $z44 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z44 == 0 goto label105;

        $r103 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r103.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Sending 500 response for out of sequence message");

     label105:
        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendServerInternalErrorResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label106:
        if r7 != null goto label107;

        $r82 = null;

        goto label108;

     label107:
        $r82 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.stack.SIPTransaction getLastTransaction()>();

     label108:
        r311 = $r82;

        if r7 == null goto label110;

        $z41 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z41 == 0 goto label110;

        if r311 == null goto label110;

        $z42 = virtualinvoke r311.<gov.nist.javax.sip.stack.SIPTransaction: boolean isInviteTransaction()>();

        if $z42 == 0 goto label110;

        $z43 = r311 instanceof javax.sip.ClientTransaction;

        if $z43 == 0 goto label110;

        $r95 = virtualinvoke r311.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()>();

        if $r95 == null goto label110;

        $r96 = virtualinvoke r311.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()>();

        $i9 = virtualinvoke $r96.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        if $i9 != 200 goto label110;

        $r97 = virtualinvoke r311.<gov.nist.javax.sip.stack.SIPTransaction: gov.nist.javax.sip.message.SIPResponse getLastResponse()>();

        $r91 = virtualinvoke $r97.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $l6 = interfaceinvoke $r91.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $z39 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isAckSent(long)>($l6);

        if $z39 != 0 goto label110;

        $z40 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z40 == 0 goto label109;

        $r92 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r92.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Sending 491 response for client Dialog ACK not sent.");

     label109:
        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendRequestPendingResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label110:
        if r7 == null goto label112;

        if r311 == null goto label112;

        $z34 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z34 == 0 goto label112;

        $z36 = virtualinvoke r311.<gov.nist.javax.sip.stack.SIPTransaction: boolean isInviteTransaction()>();

        if $z36 == 0 goto label112;

        $z35 = r311 instanceof javax.sip.ServerTransaction;

        if $z35 == 0 goto label112;

        $z38 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isAckSeen()>();

        if $z38 != 0 goto label112;

        $z37 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z37 == 0 goto label111;

        $r94 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r94.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Sending 491 response for server Dialog ACK not seen.");

     label111:
        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendRequestPendingResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

        return;

     label112:
        $z11 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z11 == 0 goto label113;

        $r86 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r88 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CHECK FOR OUT OF SEQ MESSAGE ");

        $r87 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r90 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transaction ");

        $r89 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r81 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r86.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r81);

     label113:
        if r7 == null goto label120;

        if r5 == null goto label120;

        $r62 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z26 = virtualinvoke $r62.<java.lang.String: boolean equals(java.lang.Object)>("BYE");

        if $z26 != 0 goto label120;

        $r60 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z32 = virtualinvoke $r60.<java.lang.String: boolean equals(java.lang.Object)>("CANCEL");

        if $z32 != 0 goto label120;

        $r68 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z31 = virtualinvoke $r68.<java.lang.String: boolean equals(java.lang.Object)>("ACK");

        if $z31 != 0 goto label120;

        $r67 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z29 = virtualinvoke $r67.<java.lang.String: boolean equals(java.lang.Object)>("PRACK");

        if $z29 != 0 goto label120;

        $z30 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: boolean isRequestConsumable(gov.nist.javax.sip.message.SIPRequest)>(r1);

        if $z30 != 0 goto label117;

        $z28 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z28 == 0 goto label114;

        $r78 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping out of sequence message ");

        $l5 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: long getRemoteSeqNumber()>();

        $r75 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r74 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r73 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $r84 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r73);

        $r83 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r78.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r83);

     label114:
        $l4 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: long getRemoteSeqNumber()>();

        $r72 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l3 = interfaceinvoke $r72.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $b2 = $l4 cmp $l3;

        if $b2 < 0 goto label116;

        $z33 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isDialogErrorsAutomaticallyHandled()>();

        if $z33 == 0 goto label116;

        $r71 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()>();

        $r70 = <javax.sip.TransactionState: javax.sip.TransactionState TRYING>;

        if $r71 == $r70 goto label115;

        $r69 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: javax.sip.TransactionState getState()>();

        $r79 = <javax.sip.TransactionState: javax.sip.TransactionState PROCEEDING>;

        if $r69 != $r79 goto label116;

     label115:
        specialinvoke r0.<gov.nist.javax.sip.DialogFilter: void sendServerInternalErrorResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)>(r1, r5);

     label116:
        return;

     label117:
        $r66 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.SipProviderImpl getSipProvider()>();

        if r4 != $r66 goto label118;

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        virtualinvoke r7.<gov.nist.javax.sip.stack.SIPDialog: void addRoute(gov.nist.javax.sip.message.SIPRequest)>(r1);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r7, r6);

     label118:
        goto label120;

     label119:
        $r277 := @caughtexception;

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void raiseIOExceptionEvent()>();

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void removeTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r5);

        return;

     label120:
        $z9 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z9 == 0 goto label121;

        $r52 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $r64 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transaction.isMapped = ");

        $z27 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isTransactionMapped()>();

        $r63 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z27);

        $r61 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r52.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r61);

     label121:
        if r7 != null goto label148;

        $r28 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getMethod()>();

        $z12 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>("NOTIFY");

        if $z12 == 0 goto label148;

        $r30 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        r312 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPClientTransaction findSubscribeTransaction(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.ListeningPointImpl)>(r1, $r30);

        $z15 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z15 == 0 goto label122;

        $r57 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROCESSING NOTIFY  DIALOG == null ");

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r312);

        $r53 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r57.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r53);

     label122:
        $z14 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z14 == 0 goto label127;

        if r312 != null goto label127;

        $z23 = r3.<gov.nist.javax.sip.SipStackImpl: boolean deliverUnsolicitedNotify>;

        if $z23 != 0 goto label127;

     label123:
        $z22 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z22 == 0 goto label124;

        $r49 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r49.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Could not find Subscription for Notify Tx.");

     label124:
        r313 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int)>(481);

        interfaceinvoke r313.<javax.sip.message.Response: void setReasonPhrase(java.lang.String)>("Subscription does not exist");

        virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: void sendResponse(javax.sip.message.Response)>(r313);

     label125:
        return;

     label126:
        $r273 := @caughtexception;

        r314 = $r273;

        $r272 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r272.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Exception while sending error response statelessly", r314);

        return;

     label127:
        if r312 == null goto label145;

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setPendingSubscribe(gov.nist.javax.sip.stack.SIPClientTransaction)>(r312);

        r315 = virtualinvoke r312.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDefaultDialog()>();

        if r315 == null goto label128;

        $r43 = virtualinvoke r315.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        if $r43 == null goto label128;

        $r44 = virtualinvoke r315.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        $z25 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z25 != 0 goto label137;

     label128:
        if r315 == null goto label129;

        $r42 = virtualinvoke r315.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        if $r42 != null goto label129;

        virtualinvoke r315.<gov.nist.javax.sip.stack.SIPDialog: void setDialogId(java.lang.String)>(r6);

        goto label130;

     label129:
        r315 = virtualinvoke r312.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r6);

     label130:
        $z18 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z18 == 0 goto label131;

        $r45 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROCESSING NOTIFY Subscribe DIALOG ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r315);

        $r41 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r45.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r41);

     label131:
        if r315 != null goto label133;

        $z21 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z21 != 0 goto label132;

        $r37 = virtualinvoke r312.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDefaultDialog()>();

        if $r37 == null goto label133;

     label132:
        $r40 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.Header getHeader(java.lang.String)>("Event");

        r316 = (gov.nist.javax.sip.header.Event) $r40;

        $r36 = virtualinvoke r316.<gov.nist.javax.sip.header.Event: java.lang.String getEventType()>();

        $z20 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isEventForked(java.lang.String)>($r36);

        if $z20 == 0 goto label133;

        r315 = staticinvoke <gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.stack.SIPDialog createFromNOTIFY(gov.nist.javax.sip.stack.SIPClientTransaction,gov.nist.javax.sip.stack.SIPTransaction)>(r312, r5);

     label133:
        if r315 == null goto label142;

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r315, r6);

        $r34 = <javax.sip.DialogState: javax.sip.DialogState CONFIRMED>;

        $i1 = virtualinvoke $r34.<javax.sip.DialogState: int getValue()>();

        virtualinvoke r315.<gov.nist.javax.sip.stack.SIPDialog: void setState(int)>($i1);

        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void putDialog(gov.nist.javax.sip.stack.SIPDialog)>(r315);

        virtualinvoke r312.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r315, r6);

        $z19 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isTransactionMapped()>();

        if $z19 != 0 goto label142;

        $r38 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r38.<gov.nist.javax.sip.SipStackImpl: void mapTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setPassToListener()>();

     label134:
        $r39 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r39.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

     label135:
        goto label142;

     label136:
        $r264 := @caughtexception;

        goto label142;

     label137:
        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r315, r6);

        $z24 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isTransactionMapped()>();

        if $z24 != 0 goto label141;

        $r51 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r51.<gov.nist.javax.sip.SipStackImpl: void mapTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: void setPassToListener()>();

     label138:
        $r50 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        virtualinvoke $r50.<gov.nist.javax.sip.SipStackImpl: void addTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>(r5);

     label139:
        goto label141;

     label140:
        $r275 := @caughtexception;

     label141:
        virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: void putDialog(gov.nist.javax.sip.stack.SIPDialog)>(r315);

        if r312 == null goto label142;

        virtualinvoke r315.<gov.nist.javax.sip.stack.SIPDialog: void addTransaction(gov.nist.javax.sip.stack.SIPTransaction)>(r312);

        virtualinvoke r312.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r315, r6);

     label142:
        if r5 == null goto label143;

        $z17 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isTransactionMapped()>();

        if $z17 == 0 goto label143;

        $r35 = new javax.sip.RequestEvent;

        specialinvoke $r35.<javax.sip.RequestEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Dialog,javax.sip.message.Request)>(r4, r5, r315, r1);

        r317 = $r35;

        goto label144;

     label143:
        $r33 = new javax.sip.RequestEvent;

        specialinvoke $r33.<javax.sip.RequestEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Dialog,javax.sip.message.Request)>(r4, null, r315, r1);

        r317 = $r33;

     label144:
        goto label147;

     label145:
        $z16 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z16 == 0 goto label146;

        $r31 = virtualinvoke r3.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r31.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("could not find subscribe tx");

     label146:
        $r32 = new javax.sip.RequestEvent;

        specialinvoke $r32.<javax.sip.RequestEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Dialog,javax.sip.message.Request)>(r4, null, null, r1);

        r317 = $r32;

     label147:
        goto label150;

     label148:
        if r5 == null goto label149;

        $z13 = virtualinvoke r5.<gov.nist.javax.sip.stack.SIPServerTransaction: boolean isTransactionMapped()>();

        if $z13 == 0 goto label149;

        $r29 = new javax.sip.RequestEvent;

        specialinvoke $r29.<javax.sip.RequestEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Dialog,javax.sip.message.Request)>(r4, r5, r7, r1);

        r317 = $r29;

        goto label150;

     label149:
        $r27 = new javax.sip.RequestEvent;

        specialinvoke $r27.<javax.sip.RequestEvent: void <init>(java.lang.Object,javax.sip.ServerTransaction,javax.sip.Dialog,javax.sip.message.Request)>(r4, null, r7, r1);

        r317 = $r27;

     label150:
        virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r317, r5);

        return;

        catch java.lang.Exception from label032 to label033 with label034;
        catch java.lang.Exception from label042 to label043 with label044;
        catch java.io.IOException from label048 to label049 with label050;
        catch javax.sip.SipException from label056 to label057 with label058;
        catch java.lang.Exception from label064 to label065 with label066;
        catch javax.sip.SipException from label073 to label074 with label075;
        catch java.io.IOException from label079 to label080 with label081;
        catch java.lang.Exception from label085 to label086 with label087;
        catch javax.sip.SipException from label092 to label093 with label094;
        catch java.lang.Exception from label098 to label099 with label100;
        catch java.io.IOException from label117 to label118 with label119;
        catch java.lang.Exception from label123 to label125 with label126;
        catch java.lang.Exception from label134 to label135 with label136;
        catch java.lang.Exception from label138 to label139 with label140;
    }

    public void processResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel, gov.nist.javax.sip.stack.SIPDialog)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPResponse r1;
        gov.nist.javax.sip.stack.MessageChannel r2;
        gov.nist.javax.sip.stack.SIPDialog r3;
        gov.nist.javax.sip.SipProviderImpl r4;
        gov.nist.javax.sip.stack.SIPClientTransaction r5, r80, r82;
        gov.nist.javax.sip.SipStackImpl r6, $r8, $r10, $r14, $r20, $r21, $r23, $r26, $r38, $r39, $r45, $r46, $r48, $r49, $r52, $r53, $r60, $r61, $r63, $r64, $r65, $r67, $r68, $r71;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        javax.sip.SipException r7, $r70;
        gov.nist.javax.sip.ListeningPointImpl $r9, $r11;
        gov.nist.javax.sip.stack.SIPTransaction $r12;
        javax.sip.SipListener $r13;
        javax.sip.header.CSeqHeader $r15, $r24, $r37, $r40, $r44;
        gov.nist.javax.sip.ResponseEventExt $r16, $r22, r79, r81;
        java.lang.String $r17, $r18, $r19, $r25, $r28, $r30, $r35, $r36, $r51, $r73, $r75;
        int $i0, $i1, $i2;
        gov.nist.core.StackLogger $r27, $r43, $r47, $r50, $r54, $r59, $r62, $r66, $r69, $r76, $r78;
        java.lang.StringBuilder $r29, $r31, $r32, $r55, $r56, $r57, $r72, $r74, $r77;
        javax.sip.DialogState $r33, $r34;
        gov.nist.javax.sip.message.SIPRequest $r41, $r42;
        byte $b3;
        long $l4, $l5;
        gov.nist.javax.sip.Utils $r58;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPResponse;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        r3 := @parameter2: gov.nist.javax.sip.stack.SIPDialog;

        $r8 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z1 = virtualinvoke $r8.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z1 == 0 goto label01;

        $r65 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r76 = virtualinvoke $r65.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r74 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROCESSING INCOMING RESPONSE");

        $r75 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String encodeMessage()>();

        $r72 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r76.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r73);

     label01:
        $r9 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        if $r9 != null goto label03;

        $r68 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z15 = virtualinvoke $r68.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z15 == 0 goto label02;

        $r64 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r66 = virtualinvoke $r64.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r66.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Dropping message: No listening point registered!");

     label02:
        return;

     label03:
        $r10 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z2 = virtualinvoke $r10.<gov.nist.javax.sip.SipStackImpl: boolean checkBranchId()>();

        if $z2 == 0 goto label05;

        $r58 = staticinvoke <gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils getInstance()>();

        $z13 = virtualinvoke $r58.<gov.nist.javax.sip.Utils: boolean responseBelongsToUs(gov.nist.javax.sip.message.SIPResponse)>(r1);

        if $z13 != 0 goto label05;

        $r60 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z16 = virtualinvoke $r60.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z16 == 0 goto label04;

        $r67 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r69 = virtualinvoke $r67.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r69.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Dropping response - topmost VIA header does not originate from this stack");

     label04:
        return;

     label05:
        $r11 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        r4 = virtualinvoke $r11.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl getProvider()>();

        if r4 != null goto label07;

        $r61 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z14 = virtualinvoke $r61.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z14 == 0 goto label06;

        $r63 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r59 = virtualinvoke $r63.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r59.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Dropping message:  no provider");

     label06:
        return;

     label07:
        $r13 = virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

        if $r13 != null goto label09;

        $r52 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z12 = virtualinvoke $r52.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z12 == 0 goto label08;

        $r53 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r62 = virtualinvoke $r53.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r62.<gov.nist.core.StackLogger: void logError(java.lang.String)>("No listener -- dropping response!");

     label08:
        return;

     label09:
        $r12 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        r5 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r12;

        r6 = r4.<gov.nist.javax.sip.SipProviderImpl: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r14 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z3 = virtualinvoke $r14.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z3 == 0 goto label10;

        $r54 = virtualinvoke r6.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction = ");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r51 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r54.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r51);

     label10:
        if r5 != null goto label23;

        if r3 == null goto label20;

        $i1 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        $i2 = $i1 / 100;

        if $i2 == 2 goto label12;

        $r45 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z10 = virtualinvoke $r45.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z10 == 0 goto label11;

        $r46 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r47 = virtualinvoke $r46.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r47.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Response is not a final response and dialog is found for response -- dropping response!");

     label11:
        return;

     label12:
        $r33 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r34 = <javax.sip.DialogState: javax.sip.DialogState TERMINATED>;

        if $r33 != $r34 goto label14;

        $r48 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z11 = virtualinvoke $r48.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z11 == 0 goto label13;

        $r49 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r50 = virtualinvoke $r49.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r50.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dialog is terminated -- dropping response!");

     label13:
        return;

     label14:
        z0 = 0;

        $z7 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: boolean isAckSeen()>();

        if $z7 == 0 goto label15;

        $r42 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()>();

        if $r42 == null goto label15;

        $r41 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()>();

        $r40 = virtualinvoke $r41.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l5 = interfaceinvoke $r40.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $r44 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $l4 = interfaceinvoke $r44.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $b3 = $l5 cmp $l4;

        if $b3 != 0 goto label15;

        z0 = 1;

     label15:
        if z0 == 0 goto label20;

        $r37 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $r36 = interfaceinvoke $r37.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $r35 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getMethod()>();

        $z9 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>($r35);

        if $z9 == 0 goto label20;

     label16:
        $r39 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z8 = virtualinvoke $r39.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z8 == 0 goto label17;

        $r38 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r43 = virtualinvoke $r38.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r43.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Retransmission of OK detected: Resending last ACK");

     label17:
        virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: void resendAck()>();

     label18:
        return;

     label19:
        $r70 := @caughtexception;

        r7 = $r70;

        $r71 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r78 = virtualinvoke $r71.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r78.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("could not resend ack", r7);

     label20:
        $r21 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z5 = virtualinvoke $r21.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z5 == 0 goto label21;

        $r26 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r27 = virtualinvoke $r26.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("could not find tx, handling statelessly Dialog =  ");

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r30);

     label21:
        $r22 = new gov.nist.javax.sip.ResponseEventExt;

        specialinvoke $r22.<gov.nist.javax.sip.ResponseEventExt: void <init>(java.lang.Object,gov.nist.javax.sip.ClientTransactionExt,javax.sip.Dialog,javax.sip.message.Response)>(r4, r5, r3, r1);

        r79 = $r22;

        $r24 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeqHeader()>();

        $r25 = interfaceinvoke $r24.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $z6 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z6 == 0 goto label22;

        $r23 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r28 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getTransactionId()>();

        r80 = virtualinvoke $r23.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPClientTransaction getForkedTransaction(java.lang.String)>($r28);

        virtualinvoke r79.<gov.nist.javax.sip.ResponseEventExt: void setOriginalTransaction(gov.nist.javax.sip.ClientTransactionExt)>(r80);

     label22:
        virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r79, r5);

        return;

     label23:
        $r16 = new gov.nist.javax.sip.ResponseEventExt;

        specialinvoke $r16.<gov.nist.javax.sip.ResponseEventExt: void <init>(java.lang.Object,gov.nist.javax.sip.ClientTransactionExt,javax.sip.Dialog,javax.sip.message.Response)>(r4, r5, r3, r1);

        r81 = $r16;

        $r15 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeqHeader()>();

        $r17 = interfaceinvoke $r15.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $z4 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z4 == 0 goto label24;

        $r20 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r19 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getTransactionId()>();

        r82 = virtualinvoke $r20.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPClientTransaction getForkedTransaction(java.lang.String)>($r19);

        virtualinvoke r81.<gov.nist.javax.sip.ResponseEventExt: void setOriginalTransaction(gov.nist.javax.sip.ClientTransactionExt)>(r82);

     label24:
        if r3 == null goto label25;

        $i0 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        if $i0 == 100 goto label25;

        virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: void setLastResponse(gov.nist.javax.sip.stack.SIPTransaction,gov.nist.javax.sip.message.SIPResponse)>(r5, r1);

        $r18 = virtualinvoke r3.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getDialogId()>();

        virtualinvoke r5.<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r3, $r18);

     label25:
        virtualinvoke r4.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r81, r5);

        return;

        catch javax.sip.SipException from label16 to label18 with label19;
    }

    public java.lang.String getProcessingInfo()
    {
        gov.nist.javax.sip.DialogFilter r0;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        return null;
    }

    public void processResponse(gov.nist.javax.sip.message.SIPResponse, gov.nist.javax.sip.stack.MessageChannel)
    {
        gov.nist.javax.sip.DialogFilter r0;
        gov.nist.javax.sip.message.SIPResponse r1;
        gov.nist.javax.sip.stack.MessageChannel r2;
        java.lang.String r3, r5, r8, $r25, $r27, $r30, $r34, $r38, $r46, $r48, $r52, $r60, $r61, $r62, $r72, $r75, $r80, $r97, $r106, $r115;
        gov.nist.javax.sip.stack.SIPDialog r4;
        gov.nist.javax.sip.SipProviderImpl r6;
        gov.nist.javax.sip.stack.SIPClientTransaction r7, $r66, r122;
        gov.nist.javax.sip.SipStackImpl $r10, $r12, $r13, $r18, $r21, $r23, $r31, $r37, $r42, $r45, $r50, $r56, $r58, $r67, $r70, $r78, $r79, $r83, $r85, $r86, $r87, $r89, $r90, $r92, $r100, $r102, $r108, $r109, $r112, $r113;
        javax.sip.header.CSeqHeader $r11, $r24, $r35, $r43, $r44, $r49, $r51;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, z25;
        gov.nist.javax.sip.ListeningPointImpl $r14, $r15;
        gov.nist.javax.sip.stack.SIPTransaction $r16, $r20, $r65, $r68, $r69, $r76;
        javax.sip.SipListener $r17;
        gov.nist.javax.sip.ResponseEventExt $r22, r121;
        int $i0, $i1, $i2, $i5, $i8, $i9, $i10;
        javax.sip.header.ToHeader $r26, $r59;
        gov.nist.core.StackLogger $r28, $r41, $r54, $r57, $r77, $r82, $r84, $r91, $r101, $r103, $r107, $r110, $r118;
        javax.sip.DialogState $r29, $r32, $r33, $r36, $r88, $r99;
        gov.nist.javax.sip.message.SIPRequest $r39, $r40, $r47, $r74;
        long $l3, $l4, $l7;
        byte $b6;
        java.lang.StringBuilder $r53, $r55, $r63, $r93, $r94, $r95, $r96, $r98, $r104, $r105, $r116;
        javax.sip.header.FromHeader $r64, $r71, $r81;
        javax.sip.message.Request $r73, r119;
        gov.nist.javax.sip.Utils $r111;
        java.lang.Exception $r114, r120;
        javax.sip.SipException $r117;

        r0 := @this: gov.nist.javax.sip.DialogFilter;

        r1 := @parameter0: gov.nist.javax.sip.message.SIPResponse;

        r2 := @parameter1: gov.nist.javax.sip.stack.MessageChannel;

        r3 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getDialogId(boolean)>(0);

        $r10 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        r4 = virtualinvoke $r10.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r3);

        $r11 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        r5 = interfaceinvoke $r11.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $r12 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z0 = virtualinvoke $r12.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z0 == 0 goto label01;

        $r102 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r103 = virtualinvoke $r102.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r104 = new java.lang.StringBuilder;

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROCESSING INCOMING RESPONSE: ");

        $r106 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String encodeMessage()>();

        $r116 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r106);

        $r115 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r103.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r115);

     label01:
        $r13 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z1 = virtualinvoke $r13.<gov.nist.javax.sip.SipStackImpl: boolean checkBranchId()>();

        if $z1 == 0 goto label03;

        $r111 = staticinvoke <gov.nist.javax.sip.Utils: gov.nist.javax.sip.Utils getInstance()>();

        $z24 = virtualinvoke $r111.<gov.nist.javax.sip.Utils: boolean responseBelongsToUs(gov.nist.javax.sip.message.SIPResponse)>(r1);

        if $z24 != 0 goto label03;

        $r112 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z22 = virtualinvoke $r112.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z22 == 0 goto label02;

        $r100 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r101 = virtualinvoke $r100.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r101.<gov.nist.core.StackLogger: void logError(java.lang.String)>("Detected stray response -- dropping");

     label02:
        return;

     label03:
        $r14 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        if $r14 != null goto label05;

        $r108 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z23 = virtualinvoke $r108.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z23 == 0 goto label04;

        $r109 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r110 = virtualinvoke $r109.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r110.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dropping message: No listening point registered!");

     label04:
        return;

     label05:
        $r15 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.ListeningPointImpl listeningPoint>;

        r6 = virtualinvoke $r15.<gov.nist.javax.sip.ListeningPointImpl: gov.nist.javax.sip.SipProviderImpl getProvider()>();

        if r6 != null goto label07;

        $r90 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z21 = virtualinvoke $r90.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z21 == 0 goto label06;

        $r92 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r107 = virtualinvoke $r92.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r107.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dropping message:  no provider");

     label06:
        return;

     label07:
        $r17 = virtualinvoke r6.<gov.nist.javax.sip.SipProviderImpl: javax.sip.SipListener getSipListener()>();

        if $r17 != null goto label09;

        $r87 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z20 = virtualinvoke $r87.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z20 == 0 goto label08;

        $r89 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r91 = virtualinvoke $r89.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r91.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dropping message:  no sipListener registered!");

     label08:
        return;

     label09:
        $r16 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        r7 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r16;

        if r4 != null goto label10;

        if r7 == null goto label10;

        r4 = virtualinvoke r7.<gov.nist.javax.sip.stack.SIPClientTransaction: gov.nist.javax.sip.stack.SIPDialog getDialog(java.lang.String)>(r3);

        if r4 == null goto label10;

        $r99 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r88 = <javax.sip.DialogState: javax.sip.DialogState TERMINATED>;

        if $r99 != $r88 goto label10;

        r4 = null;

     label10:
        $r18 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z2 = virtualinvoke $r18.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z2 == 0 goto label11;

        $r83 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r82 = virtualinvoke $r83.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        $r93 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transaction = ");

        $r96 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r95 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sipDialog = ");

        $r98 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r97 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r82.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r97);

     label11:
        $r20 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        if $r20 == null goto label19;

        $r76 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        $r73 = virtualinvoke $r76.<gov.nist.javax.sip.stack.SIPTransaction: javax.sip.message.Request getRequest()>();

        $r74 = (gov.nist.javax.sip.message.SIPRequest) $r73;

        r8 = virtualinvoke $r74.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getFromTag()>();

        if r8 != null goto label12;

        $z14 = 1;

        goto label13;

     label12:
        $z14 = 0;

     label13:
        $r71 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.FromHeader getFrom()>();

        $r72 = interfaceinvoke $r71.<javax.sip.header.FromHeader: java.lang.String getTag()>();

        if $r72 != null goto label14;

        $z18 = 1;

        goto label15;

     label14:
        $z18 = 0;

     label15:
        $z17 = $z14 ^ $z18;

        if $z17 == 0 goto label17;

        $r86 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z19 = virtualinvoke $r86.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z19 == 0 goto label16;

        $r85 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r84 = virtualinvoke $r85.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r84.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("From tag mismatch -- dropping response");

     label16:
        return;

     label17:
        if r8 == null goto label19;

        $r81 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.FromHeader getFrom()>();

        $r80 = interfaceinvoke $r81.<javax.sip.header.FromHeader: java.lang.String getTag()>();

        $z16 = virtualinvoke r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r80);

        if $z16 != 0 goto label19;

        $r79 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z15 = virtualinvoke $r79.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z15 == 0 goto label18;

        $r78 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r77 = virtualinvoke $r78.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r77.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("From tag mismatch -- dropping response");

     label18:
        return;

     label19:
        $z3 = staticinvoke <gov.nist.javax.sip.SipStackImpl: boolean isDialogCreated(java.lang.String)>(r5);

        if $z3 == 0 goto label21;

        $i10 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        if $i10 == 100 goto label21;

        $r64 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.FromHeader getFrom()>();

        $r60 = interfaceinvoke $r64.<javax.sip.header.FromHeader: java.lang.String getTag()>();

        if $r60 == null goto label21;

        $r59 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.ToHeader getTo()>();

        $r61 = interfaceinvoke $r59.<javax.sip.header.ToHeader: java.lang.String getTag()>();

        if $r61 == null goto label21;

        if r4 != null goto label21;

        $z13 = virtualinvoke r6.<gov.nist.javax.sip.SipProviderImpl: boolean isAutomaticDialogSupportEnabled()>();

        if $z13 == 0 goto label34;

        $r69 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        if $r69 == null goto label20;

        if r4 != null goto label34;

        $r67 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r68 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        $r66 = (gov.nist.javax.sip.stack.SIPClientTransaction) $r68;

        r4 = virtualinvoke $r67.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPClientTransaction,gov.nist.javax.sip.message.SIPResponse)>($r66, r1);

        $r65 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.stack.SIPTransaction transactionChannel>;

        $r75 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getDialogId(boolean)>(0);

        virtualinvoke $r65.<gov.nist.javax.sip.stack.SIPTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>(r4, $r75);

        goto label34;

     label20:
        $r70 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        r4 = virtualinvoke $r70.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.SipProviderImpl,gov.nist.javax.sip.message.SIPResponse)>(r6, r1);

        goto label34;

     label21:
        if r4 == null goto label34;

        if r7 != null goto label34;

        $r29 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r33 = <javax.sip.DialogState: javax.sip.DialogState TERMINATED>;

        if $r29 == $r33 goto label34;

        $i2 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        $i1 = $i2 / 100;

        if $i1 == 2 goto label22;

        $r56 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z12 = virtualinvoke $r56.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z12 == 0 goto label34;

        $r58 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r54 = virtualinvoke $r58.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("status code != 200 ; statusCode = ");

        $i9 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        $r63 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r62 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r54.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>($r62);

        goto label34;

     label22:
        $r32 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.DialogState getState()>();

        $r36 = <javax.sip.DialogState: javax.sip.DialogState TERMINATED>;

        if $r32 != $r36 goto label28;

        $r45 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z10 = virtualinvoke $r45.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z10 == 0 goto label23;

        $r50 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r57 = virtualinvoke $r50.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r57.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("Dialog is terminated -- dropping response!");

     label23:
        $i5 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        $i8 = $i5 / 100;

        if $i8 != 2 goto label27;

        $r51 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $r52 = interfaceinvoke $r51.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $z11 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z11 == 0 goto label27;

     label24:
        $r49 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $l7 = interfaceinvoke $r49.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        r119 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: javax.sip.message.Request createAck(long)>($l7);

        virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: void sendAck(javax.sip.message.Request)>(r119);

     label25:
        goto label27;

     label26:
        $r114 := @caughtexception;

        r120 = $r114;

        $r113 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r118 = virtualinvoke $r113.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r118.<gov.nist.core.StackLogger: void logError(java.lang.String,java.lang.Exception)>("Error creating ack", r120);

     label27:
        return;

     label28:
        z25 = 0;

        $z6 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: boolean isAckSeen()>();

        if $z6 == 0 goto label29;

        $r40 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()>();

        if $r40 == null goto label29;

        $r39 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()>();

        $r44 = virtualinvoke $r39.<gov.nist.javax.sip.message.SIPRequest: javax.sip.header.CSeqHeader getCSeq()>();

        $l4 = interfaceinvoke $r44.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $r43 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $l3 = interfaceinvoke $r43.<javax.sip.header.CSeqHeader: long getSeqNumber()>();

        $b6 = $l4 cmp $l3;

        if $b6 != 0 goto label29;

        $r46 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getDialogId(boolean)>(0);

        $r47 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: gov.nist.javax.sip.message.SIPRequest getLastAckSent()>();

        $r48 = virtualinvoke $r47.<gov.nist.javax.sip.message.SIPRequest: java.lang.String getDialogId(boolean)>(0);

        $z9 = virtualinvoke $r46.<java.lang.String: boolean equals(java.lang.Object)>($r48);

        if $z9 == 0 goto label29;

        z25 = 1;

     label29:
        if z25 == 0 goto label34;

        $r35 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $r34 = interfaceinvoke $r35.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $r38 = virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: java.lang.String getMethod()>();

        $z8 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>($r38);

        if $z8 == 0 goto label34;

     label30:
        $r37 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z7 = virtualinvoke $r37.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z7 == 0 goto label31;

        $r42 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r41 = virtualinvoke $r42.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r41.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("resending ACK");

     label31:
        virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: void resendAck()>();

     label32:
        return;

     label33:
        $r117 := @caughtexception;

     label34:
        $r21 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $z4 = virtualinvoke $r21.<gov.nist.javax.sip.SipStackImpl: boolean isLoggingEnabled()>();

        if $z4 == 0 goto label35;

        $r31 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r28 = virtualinvoke $r31.<gov.nist.javax.sip.SipStackImpl: gov.nist.core.StackLogger getStackLogger()>();

        interfaceinvoke $r28.<gov.nist.core.StackLogger: void logDebug(java.lang.String)>("sending response to TU for processing ");

     label35:
        if r4 == null goto label36;

        $i0 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()>();

        if $i0 == 100 goto label36;

        $r26 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.ToHeader getTo()>();

        $r30 = interfaceinvoke $r26.<javax.sip.header.ToHeader: java.lang.String getTag()>();

        if $r30 == null goto label36;

        virtualinvoke r4.<gov.nist.javax.sip.stack.SIPDialog: void setLastResponse(gov.nist.javax.sip.stack.SIPTransaction,gov.nist.javax.sip.message.SIPResponse)>(r7, r1);

     label36:
        $r22 = new gov.nist.javax.sip.ResponseEventExt;

        specialinvoke $r22.<gov.nist.javax.sip.ResponseEventExt: void <init>(java.lang.Object,gov.nist.javax.sip.ClientTransactionExt,javax.sip.Dialog,javax.sip.message.Response)>(r6, r7, r4, r1);

        r121 = $r22;

        $r24 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: javax.sip.header.CSeqHeader getCSeq()>();

        $r25 = interfaceinvoke $r24.<javax.sip.header.CSeqHeader: java.lang.String getMethod()>();

        $z5 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>("INVITE");

        if $z5 == 0 goto label37;

        $r23 = r0.<gov.nist.javax.sip.DialogFilter: gov.nist.javax.sip.SipStackImpl sipStack>;

        $r27 = virtualinvoke r1.<gov.nist.javax.sip.message.SIPResponse: java.lang.String getTransactionId()>();

        r122 = virtualinvoke $r23.<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.stack.SIPClientTransaction getForkedTransaction(java.lang.String)>($r27);

        virtualinvoke r121.<gov.nist.javax.sip.ResponseEventExt: void setOriginalTransaction(gov.nist.javax.sip.ClientTransactionExt)>(r122);

     label37:
        virtualinvoke r6.<gov.nist.javax.sip.SipProviderImpl: void handleEvent(java.util.EventObject,gov.nist.javax.sip.stack.SIPTransaction)>(r121, r7);

        return;

        catch java.lang.Exception from label24 to label25 with label26;
        catch javax.sip.SipException from label30 to label32 with label33;
    }
}
