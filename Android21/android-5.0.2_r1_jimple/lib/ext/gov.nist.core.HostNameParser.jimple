public class gov.nist.core.HostNameParser extends gov.nist.core.ParserCore
{
    private static gov.nist.core.LexerCore Lexer;
    private boolean stripAddressScopeZones;
    private static final char[] VALID_DOMAIN_LABEL_CHAR;

    public void <init>(java.lang.String)
    {
        gov.nist.core.HostNameParser r0;
        java.lang.String r1;
        gov.nist.core.LexerCore $r2;
        boolean $z0;

        r0 := @this: gov.nist.core.HostNameParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.core.ParserCore: void <init>()>();

        r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones> = 0;

        $r2 = new gov.nist.core.LexerCore;

        specialinvoke $r2.<gov.nist.core.LexerCore: void <init>(java.lang.String,java.lang.String)>("charLexer", r1);

        r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer> = $r2;

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("gov.nist.core.STRIP_ADDR_SCOPES");

        r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones> = $z0;

        return;
    }

    public void <init>(gov.nist.core.LexerCore)
    {
        gov.nist.core.HostNameParser r0;
        gov.nist.core.LexerCore r1;
        boolean $z0;

        r0 := @this: gov.nist.core.HostNameParser;

        r1 := @parameter0: gov.nist.core.LexerCore;

        specialinvoke r0.<gov.nist.core.ParserCore: void <init>()>();

        r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones> = 0;

        r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer> = r1;

        virtualinvoke r1.<gov.nist.core.LexerCore: void selectLexer(java.lang.String)>("charLexer");

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("gov.nist.core.STRIP_ADDR_SCOPES");

        r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones> = $z0;

        return;
    }

    protected void consumeDomainLabel() throws java.text.ParseException
    {
        gov.nist.core.HostNameParser r0;
        java.lang.Throwable r1, $r4;
        boolean $z0, $z1, $z2;
        char[] $r2;
        gov.nist.core.LexerCore $r3;

        r0 := @this: gov.nist.core.HostNameParser;

        $z0 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_enter(java.lang.String)>("domainLabel");

     label1:
        $r3 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r2 = <gov.nist.core.HostNameParser: char[] VALID_DOMAIN_LABEL_CHAR>;

        virtualinvoke $r3.<gov.nist.core.LexerCore: void consumeValidChars(char[])>($r2);

     label2:
        $z1 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z1 == 0 goto label6;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("domainLabel");

        goto label6;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

     label4:
        $z2 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z2 == 0 goto label5;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("domainLabel");

     label5:
        throw r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected java.lang.String ipv6Reference() throws java.text.ParseException
    {
        gov.nist.core.HostNameParser r0;
        java.lang.StringBuffer r1, $r5;
        char c0, c5;
        java.lang.String r2, r3, $r10, $r14, r31, r32;
        int i1, $i2, $i3, $i4;
        java.lang.Throwable r4, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        gov.nist.core.LexerCore $r6, $r9, $r13, $r15, $r17, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27;
        java.text.ParseException $r7;
        java.lang.StringBuilder $r8, $r11, $r12;

        r0 := @this: gov.nist.core.HostNameParser;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        r1 = $r5;

        $z0 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_enter(java.lang.String)>("ipv6Reference");

     label01:
        $z1 = r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones>;

        if $z1 == 0 goto label13;

     label02:
        $r20 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $z5 = virtualinvoke $r20.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z5 == 0 goto label19;

        $r22 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r22.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $z6 = staticinvoke <gov.nist.core.LexerCore: boolean isHexDigit(char)>(c0);

        if $z6 != 0 goto label03;

        if c0 == 46 goto label03;

        if c0 == 58 goto label03;

        if c0 != 91 goto label04;

     label03:
        $r21 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r21.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        goto label12;

     label04:
        if c0 != 93 goto label07;

        $r27 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r27.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        r2 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label05:
        $z8 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z8 == 0 goto label06;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("ipv6Reference");

     label06:
        return r2;

     label07:
        if c0 != 37 goto label19;

        $r25 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r25.<gov.nist.core.LexerCore: void consume(int)>(1);

        $r23 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        r31 = virtualinvoke $r23.<gov.nist.core.LexerCore: java.lang.String getRest()>();

        if r31 == null goto label19;

        $i4 = virtualinvoke r31.<java.lang.String: int length()>();

        if $i4 != 0 goto label08;

        goto label19;

     label08:
        i1 = virtualinvoke r31.<java.lang.String: int indexOf(int)>(93);

        if i1 != -1 goto label09;

        goto label19;

     label09:
        $r26 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i3 = i1 + 1;

        virtualinvoke $r26.<gov.nist.core.LexerCore: void consume(int)>($i3);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label10:
        $z7 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z7 == 0 goto label11;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("ipv6Reference");

     label11:
        return r3;

     label12:
        goto label02;

     label13:
        $r6 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $z2 = virtualinvoke $r6.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z2 == 0 goto label19;

        $r15 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        c5 = virtualinvoke $r15.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $z3 = staticinvoke <gov.nist.core.LexerCore: boolean isHexDigit(char)>(c5);

        if $z3 != 0 goto label14;

        if c5 == 46 goto label14;

        if c5 == 58 goto label14;

        if c5 != 91 goto label15;

     label14:
        $r17 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r17.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c5);

        goto label18;

     label15:
        if c5 != 93 goto label19;

        $r19 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r19.<gov.nist.core.LexerCore: void consume(int)>(1);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c5);

        r32 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

     label16:
        $z4 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z4 == 0 goto label17;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("ipv6Reference");

     label17:
        return r32;

     label18:
        goto label13;

     label19:
        $r7 = new java.text.ParseException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r10 = virtualinvoke $r9.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Illegal Host name ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i2 = virtualinvoke $r13.<gov.nist.core.LexerCore: int getPtr()>();

        specialinvoke $r7.<java.text.ParseException: void <init>(java.lang.String,int)>($r14, $i2);

        throw $r7;

     label20:
        $r29 := @caughtexception;

        r4 = $r29;

     label21:
        $z9 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z9 == 0 goto label22;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("ipv6Reference");

     label22:
        throw r4;

        catch java.lang.Throwable from label01 to label05 with label20;
        catch java.lang.Throwable from label07 to label10 with label20;
        catch java.lang.Throwable from label12 to label16 with label20;
        catch java.lang.Throwable from label18 to label21 with label20;
    }

    public gov.nist.core.Host host() throws java.text.ParseException
    {
        gov.nist.core.HostNameParser r0;
        java.lang.String r1, $r5, $r8, $r13, $r18, $r22, $r25;
        int i0, $i2, $i3, $i4, $i5, i6;
        java.lang.Throwable r2, $r28;
        boolean $z0, $z1, $z2, $z3;
        gov.nist.core.LexerCore $r3, $r4, $r6, $r7, $r9, $r14, $r17, $r19, $r21, $r23, $r27;
        char $c1;
        gov.nist.core.Host $r10, r30;
        java.lang.StringBuilder $r11, $r15, $r16;
        java.text.ParseException $r12;
        char[] $r20;
        java.lang.StringBuffer $r24, $r26, $r29;

        r0 := @this: gov.nist.core.HostNameParser;

        $z0 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z0 == 0 goto label01;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_enter(java.lang.String)>("host");

     label01:
        $r3 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $c1 = virtualinvoke $r3.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        if $c1 != 91 goto label02;

        r1 = virtualinvoke r0.<gov.nist.core.HostNameParser: java.lang.String ipv6Reference()>();

        goto label04;

     label02:
        $r4 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r5 = virtualinvoke $r4.<gov.nist.core.LexerCore: java.lang.String getRest()>();

        $z1 = specialinvoke r0.<gov.nist.core.HostNameParser: boolean isIPv6Address(java.lang.String)>($r5);

        if $z1 == 0 goto label03;

        $r19 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        i0 = virtualinvoke $r19.<gov.nist.core.LexerCore: int getPtr()>();

        $r23 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r20 = newarray (char)[2];

        $r20[0] = 65533;

        $r20[1] = 58;

        virtualinvoke $r23.<gov.nist.core.LexerCore: void consumeValidChars(char[])>($r20);

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>(java.lang.String)>("[");

        $r21 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r22 = virtualinvoke $r21.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r27 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i5 = virtualinvoke $r27.<gov.nist.core.LexerCore: int getPtr()>();

        $r25 = virtualinvoke $r22.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5);

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r29 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        r1 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label04;

     label03:
        $r6 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        i6 = virtualinvoke $r6.<gov.nist.core.LexerCore: int getPtr()>();

        virtualinvoke r0.<gov.nist.core.HostNameParser: void consumeDomainLabel()>();

        $r7 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r8 = virtualinvoke $r7.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r9 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i2 = virtualinvoke $r9.<gov.nist.core.LexerCore: int getPtr()>();

        r1 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(i6, $i2);

     label04:
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i3 != 0 goto label05;

        $r12 = new java.text.ParseException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r13 = virtualinvoke $r14.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Missing host name");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i4 = virtualinvoke $r17.<gov.nist.core.LexerCore: int getPtr()>();

        specialinvoke $r12.<java.text.ParseException: void <init>(java.lang.String,int)>($r18, $i4);

        throw $r12;

     label05:
        $r10 = new gov.nist.core.Host;

        specialinvoke $r10.<gov.nist.core.Host: void <init>(java.lang.String)>(r1);

        r30 = $r10;

     label06:
        $z2 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z2 == 0 goto label07;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("host");

     label07:
        return r30;

     label08:
        $r28 := @caughtexception;

        r2 = $r28;

     label09:
        $z3 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z3 == 0 goto label10;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("host");

     label10:
        throw r2;

        catch java.lang.Throwable from label01 to label06 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private boolean isIPv6Address(java.lang.String)
    {
        gov.nist.core.HostNameParser r0;
        java.lang.String r1, r2;
        int i0, i1, i2, i3, $i4;
        gov.nist.core.LexerCore $r3, $r4, $r5, $r6;

        r0 := @this: gov.nist.core.HostNameParser;

        r1 := @parameter0: java.lang.String;

        $r3 = <gov.nist.core.HostNameParser: gov.nist.core.LexerCore Lexer>;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(63);

        $r4 = <gov.nist.core.HostNameParser: gov.nist.core.LexerCore Lexer>;

        i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(59);

        if i0 == -1 goto label1;

        if i1 == -1 goto label2;

        if i0 <= i1 goto label2;

     label1:
        i0 = i1;

     label2:
        if i0 != -1 goto label3;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

     label3:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r5 = <gov.nist.core.HostNameParser: gov.nist.core.LexerCore Lexer>;

        i2 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);

        if i2 != -1 goto label4;

        return 0;

     label4:
        $r6 = <gov.nist.core.HostNameParser: gov.nist.core.LexerCore Lexer>;

        $i4 = i2 + 1;

        i3 = virtualinvoke r2.<java.lang.String: int indexOf(int,int)>(58, $i4);

        if i3 != -1 goto label5;

        return 0;

     label5:
        return 1;
    }

    public gov.nist.core.HostPort hostPort(boolean) throws java.text.ParseException
    {
        gov.nist.core.HostNameParser r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        gov.nist.core.Host r1;
        gov.nist.core.HostPort r2, $r5, r33;
        char c0, $c2;
        java.lang.String r3, $r15, $r20, $r24, $r30;
        java.lang.Throwable r4, $r31;
        gov.nist.core.LexerCore $r6, $r7, $r8, $r9, $r10, $r12, $r16, $r19, $r23, $r27, $r28;
        int $i1, $i3, $i4;
        java.text.ParseException $r11, $r22;
        java.lang.StringBuilder $r13, $r14, $r17, $r18, $r25, $r26, $r29;
        java.lang.NumberFormatException $r21;

        r0 := @this: gov.nist.core.HostNameParser;

        z0 := @parameter0: boolean;

        $z1 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z1 == 0 goto label01;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_enter(java.lang.String)>("hostPort");

     label01:
        r1 = virtualinvoke r0.<gov.nist.core.HostNameParser: gov.nist.core.Host host()>();

        $r5 = new gov.nist.core.HostPort;

        specialinvoke $r5.<gov.nist.core.HostPort: void <init>()>();

        r2 = $r5;

        virtualinvoke r2.<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)>(r1);

        if z0 == 0 goto label02;

        $r23 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r23.<gov.nist.core.LexerCore: void SPorHT()>();

     label02:
        $r6 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $z2 = virtualinvoke $r6.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z2 == 0 goto label10;

        $r7 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r7.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        lookupswitch(c0)
        {
            case 9: goto label07;
            case 10: goto label07;
            case 13: goto label07;
            case 32: goto label07;
            case 37: goto label08;
            case 44: goto label07;
            case 47: goto label07;
            case 58: goto label03;
            case 59: goto label07;
            case 62: goto label07;
            case 63: goto label07;
            default: goto label09;
        };

     label03:
        $r8 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r8.<gov.nist.core.LexerCore: void consume(int)>(1);

        if z0 == 0 goto label04;

        $r10 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r10.<gov.nist.core.LexerCore: void SPorHT()>();

     label04:
        $r9 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        r3 = virtualinvoke $r9.<gov.nist.core.LexerCore: java.lang.String number()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r3);

        virtualinvoke r2.<gov.nist.core.HostPort: void setPort(int)>($i1);

     label05:
        goto label10;

     label06:
        $r21 := @caughtexception;

        $r22 = new java.text.ParseException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r24 = virtualinvoke $r27.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :Error parsing port ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i4 = virtualinvoke $r28.<gov.nist.core.LexerCore: int getPtr()>();

        specialinvoke $r22.<java.text.ParseException: void <init>(java.lang.String,int)>($r30, $i4);

        throw $r22;

     label07:
        goto label10;

     label08:
        $z4 = r0.<gov.nist.core.HostNameParser: boolean stripAddressScopeZones>;

        if $z4 == 0 goto label09;

        goto label10;

     label09:
        if z0 != 0 goto label10;

        $r11 = new java.text.ParseException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $r15 = virtualinvoke $r12.<gov.nist.core.LexerCore: java.lang.String getBuffer()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Illegal character in hostname:");

        $r16 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $c2 = virtualinvoke $r16.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = r0.<gov.nist.core.HostNameParser: gov.nist.core.LexerCore lexer>;

        $i3 = virtualinvoke $r19.<gov.nist.core.LexerCore: int getPtr()>();

        specialinvoke $r11.<java.text.ParseException: void <init>(java.lang.String,int)>($r20, $i3);

        throw $r11;

     label10:
        r33 = r2;

     label11:
        $z3 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z3 == 0 goto label12;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("hostPort");

     label12:
        return r33;

     label13:
        $r31 := @caughtexception;

        r4 = $r31;

     label14:
        $z5 = <gov.nist.core.HostNameParser: boolean debug>;

        if $z5 == 0 goto label15;

        virtualinvoke r0.<gov.nist.core.HostNameParser: void dbg_leave(java.lang.String)>("hostPort");

     label15:
        throw r4;

        catch java.lang.NumberFormatException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label11 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public static void main(java.lang.String[]) throws java.text.ParseException
    {
        java.lang.String[] r0, r1, $r4;
        int i0, $i1;
        gov.nist.core.HostNameParser r2, $r5;
        gov.nist.core.HostPort r3;
        java.lang.String $r6, $r10, $r14, $r17, $r19;
        java.lang.StringBuilder $r7, $r9, $r11, $r12, $r16, $r18, $r20;
        java.io.PrintStream $r8, $r15;
        java.text.ParseException $r13, r21;

        r0 := @parameter0: java.lang.String[];

        $r4 = newarray (java.lang.String)[7];

        $r4[0] = "foo.bar.com:1234";

        $r4[1] = "proxima.chaplin.bt.co.uk";

        $r4[2] = "129.6.55.181:2345";

        $r4[3] = ":1234";

        $r4[4] = "foo.bar.com:         1234";

        $r4[5] = "foo.bar.com     :      1234   ";

        $r4[6] = "MIK_S:1234";

        r1 = $r4;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label6;

     label2:
        $r5 = new gov.nist.core.HostNameParser;

        $r6 = r1[i0];

        specialinvoke $r5.<gov.nist.core.HostNameParser: void <init>(java.lang.String)>($r6);

        r2 = $r5;

        r3 = virtualinvoke r2.<gov.nist.core.HostNameParser: gov.nist.core.HostPort hostPort(boolean)>(1);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r10 = virtualinvoke r3.<gov.nist.core.HostPort: java.lang.String encode()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        r21 = $r13;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception text = ");

        $r17 = virtualinvoke r21.<java.text.ParseException: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r19);

     label5:
        i0 = i0 + 1;

        goto label1;

     label6:
        return;

        catch java.text.ParseException from label2 to label3 with label4;
    }

    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[3];

        $r0[0] = 65533;

        $r0[1] = 45;

        $r0[2] = 46;

        <gov.nist.core.HostNameParser: char[] VALID_DOMAIN_LABEL_CHAR> = $r0;

        return;
    }
}
