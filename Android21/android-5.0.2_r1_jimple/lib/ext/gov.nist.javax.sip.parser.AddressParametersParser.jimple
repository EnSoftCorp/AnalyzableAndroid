public class gov.nist.javax.sip.parser.AddressParametersParser extends gov.nist.javax.sip.parser.ParametersParser
{

    protected void <init>(gov.nist.javax.sip.parser.Lexer)
    {
        gov.nist.javax.sip.parser.AddressParametersParser r0;
        gov.nist.javax.sip.parser.Lexer r1;

        r0 := @this: gov.nist.javax.sip.parser.AddressParametersParser;

        r1 := @parameter0: gov.nist.javax.sip.parser.Lexer;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(gov.nist.javax.sip.parser.Lexer)>(r1);

        return;
    }

    protected void <init>(java.lang.String)
    {
        gov.nist.javax.sip.parser.AddressParametersParser r0;
        java.lang.String r1;

        r0 := @this: gov.nist.javax.sip.parser.AddressParametersParser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void <init>(java.lang.String)>(r1);

        return;
    }

    protected void parse(gov.nist.javax.sip.header.AddressParametersHeader) throws java.text.ParseException
    {
        gov.nist.javax.sip.parser.AddressParametersParser r0;
        gov.nist.javax.sip.header.AddressParametersHeader r1;
        gov.nist.javax.sip.parser.AddressParser r2, $r5;
        gov.nist.javax.sip.address.AddressImpl r3;
        char c0;
        java.lang.Throwable r4, $r12;
        gov.nist.javax.sip.parser.Lexer $r6;
        gov.nist.core.LexerCore $r7, $r8, $r9, $r10;
        boolean $z0, $z1;
        java.text.ParseException $r11, r13;

        r0 := @this: gov.nist.javax.sip.parser.AddressParametersParser;

        r1 := @parameter0: gov.nist.javax.sip.header.AddressParametersHeader;

        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: void dbg_enter(java.lang.String)>("AddressParametersParser.parse");

     label1:
        $r5 = new gov.nist.javax.sip.parser.AddressParser;

        $r6 = virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: gov.nist.javax.sip.parser.Lexer getLexer()>();

        specialinvoke $r5.<gov.nist.javax.sip.parser.AddressParser: void <init>(gov.nist.javax.sip.parser.Lexer)>($r6);

        r2 = $r5;

        r3 = virtualinvoke r2.<gov.nist.javax.sip.parser.AddressParser: gov.nist.javax.sip.address.AddressImpl address(boolean)>(0);

        virtualinvoke r1.<gov.nist.javax.sip.header.AddressParametersHeader: void setAddress(javax.sip.address.Address)>(r3);

        $r7 = r0.<gov.nist.javax.sip.parser.AddressParametersParser: gov.nist.core.LexerCore lexer>;

        virtualinvoke $r7.<gov.nist.core.LexerCore: void SPorHT()>();

        $r8 = r0.<gov.nist.javax.sip.parser.AddressParametersParser: gov.nist.core.LexerCore lexer>;

        c0 = virtualinvoke $r8.<gov.nist.core.LexerCore: char lookAhead(int)>(0);

        $r9 = r0.<gov.nist.javax.sip.parser.AddressParametersParser: gov.nist.core.LexerCore lexer>;

        $z0 = virtualinvoke $r9.<gov.nist.core.LexerCore: boolean hasMoreChars()>();

        if $z0 == 0 goto label2;

        if c0 == 0 goto label2;

        if c0 == 10 goto label2;

        $r10 = r0.<gov.nist.javax.sip.parser.AddressParametersParser: gov.nist.core.LexerCore lexer>;

        $z1 = virtualinvoke $r10.<gov.nist.core.LexerCore: boolean startsId()>();

        if $z1 == 0 goto label2;

        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parseNameValueList(gov.nist.javax.sip.header.ParametersHeader)>(r1);

        goto label3;

     label2:
        specialinvoke r0.<gov.nist.javax.sip.parser.ParametersParser: void parse(gov.nist.javax.sip.header.ParametersHeader)>(r1);

     label3:
        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: void dbg_leave(java.lang.String)>("AddressParametersParser.parse");

        goto label7;

     label4:
        $r11 := @caughtexception;

        r13 = $r11;

        throw r13;

     label5:
        $r12 := @caughtexception;

        r4 = $r12;

     label6:
        virtualinvoke r0.<gov.nist.javax.sip.parser.AddressParametersParser: void dbg_leave(java.lang.String)>("AddressParametersParser.parse");

        throw r4;

     label7:
        return;

        catch java.text.ParseException from label1 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }
}
