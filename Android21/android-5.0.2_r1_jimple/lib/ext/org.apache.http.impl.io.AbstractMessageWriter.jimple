public abstract class org.apache.http.impl.io.AbstractMessageWriter extends java.lang.Object implements org.apache.http.io.HttpMessageWriter
{
    protected final org.apache.http.io.SessionOutputBuffer sessionBuffer;
    protected final org.apache.http.util.CharArrayBuffer lineBuf;
    protected final org.apache.http.message.LineFormatter lineFormatter;

    public void <init>(org.apache.http.io.SessionOutputBuffer, org.apache.http.message.LineFormatter, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.io.AbstractMessageWriter r0;
        org.apache.http.io.SessionOutputBuffer r1;
        org.apache.http.message.LineFormatter r2, $r5;
        org.apache.http.params.HttpParams r3;
        org.apache.http.util.CharArrayBuffer $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.http.impl.io.AbstractMessageWriter;

        r1 := @parameter0: org.apache.http.io.SessionOutputBuffer;

        r2 := @parameter1: org.apache.http.message.LineFormatter;

        r3 := @parameter2: org.apache.http.params.HttpParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session input buffer may not be null");

        throw $r6;

     label1:
        r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.io.SessionOutputBuffer sessionBuffer> = r1;

        $r4 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r4.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(128);

        r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.util.CharArrayBuffer lineBuf> = $r4;

        if r2 == null goto label2;

        $r5 = r2;

        goto label3;

     label2:
        $r5 = <org.apache.http.message.BasicLineFormatter: org.apache.http.message.BasicLineFormatter DEFAULT>;

     label3:
        r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.message.LineFormatter lineFormatter> = $r5;

        return;
    }

    protected abstract void writeHeadLine(org.apache.http.HttpMessage) throws java.io.IOException;

    public void write(org.apache.http.HttpMessage) throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.impl.io.AbstractMessageWriter r0;
        org.apache.http.HttpMessage r1;
        org.apache.http.HeaderIterator r2;
        org.apache.http.Header r3;
        boolean $z0;
        org.apache.http.util.CharArrayBuffer $r4, $r5, $r8, $r11;
        org.apache.http.io.SessionOutputBuffer $r6, $r10;
        java.lang.Object $r7;
        org.apache.http.message.LineFormatter $r9;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: org.apache.http.impl.io.AbstractMessageWriter;

        r1 := @parameter0: org.apache.http.HttpMessage;

        if r1 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP message may not be null");

        throw $r12;

     label1:
        virtualinvoke r0.<org.apache.http.impl.io.AbstractMessageWriter: void writeHeadLine(org.apache.http.HttpMessage)>(r1);

        r2 = interfaceinvoke r1.<org.apache.http.HttpMessage: org.apache.http.HeaderIterator headerIterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.http.Header) $r7;

        $r10 = r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.io.SessionOutputBuffer sessionBuffer>;

        $r9 = r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.message.LineFormatter lineFormatter>;

        $r8 = r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.util.CharArrayBuffer lineBuf>;

        $r11 = interfaceinvoke $r9.<org.apache.http.message.LineFormatter: org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)>($r8, r3);

        interfaceinvoke $r10.<org.apache.http.io.SessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)>($r11);

        goto label2;

     label3:
        $r4 = r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.util.CharArrayBuffer lineBuf>;

        virtualinvoke $r4.<org.apache.http.util.CharArrayBuffer: void clear()>();

        $r6 = r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.io.SessionOutputBuffer sessionBuffer>;

        $r5 = r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.util.CharArrayBuffer lineBuf>;

        interfaceinvoke $r6.<org.apache.http.io.SessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)>($r5);

        return;
    }
}
