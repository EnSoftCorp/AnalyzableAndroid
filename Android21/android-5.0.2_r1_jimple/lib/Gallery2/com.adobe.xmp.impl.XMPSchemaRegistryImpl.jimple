public final class com.adobe.xmp.impl.XMPSchemaRegistryImpl extends java.lang.Object implements com.adobe.xmp.XMPSchemaRegistry, com.adobe.xmp.XMPConst
{
    private java.util.Map namespaceToPrefixMap;
    private java.util.Map prefixToNamespaceMap;
    private java.util.Map aliasMap;
    private java.util.regex.Pattern p;

    public void <init>()
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl r0;
        java.util.HashMap $r2, $r3, $r4;
        java.util.regex.Pattern $r5;
        com.adobe.xmp.XMPException $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map namespaceToPrefixMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map prefixToNamespaceMap> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map aliasMap> = $r4;

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[/*?\\[\\]]");

        r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.regex.Pattern p> = $r5;

     label1:
        specialinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerStandardNamespaces()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerStandardAliases()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("The XMPSchemaRegistry cannot be initialized!");

        throw $r7;

     label4:
        return;

        catch com.adobe.xmp.XMPException from label1 to label2 with label3;
    }

    public synchronized java.lang.String registerNamespace(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl r0;
        java.lang.String r1, r2, r3, r4, r5, $r6, $r17;
        int i0, $i1, $i2, $i4, $i5, $i6, $i7;
        char $c3;
        boolean $z0, $z1;
        java.util.Map $r7, $r8, $r10, $r12, $r14;
        java.lang.Object $r9, $r11;
        java.lang.StringBuilder $r16, $r18, $r19, $r21, $r22, $r23, $r24, $r25;
        com.adobe.xmp.XMPException $r20;

        r0 := @this: com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertPrefix(java.lang.String)>(r2);

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i2);

        if $c3 == 58 goto label1;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        $r6 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        $z0 = staticinvoke <com.adobe.xmp.impl.Utils: boolean isXMLNameNS(java.lang.String)>($r6);

        if $z0 != 0 goto label2;

        $r20 = new com.adobe.xmp.XMPException;

        specialinvoke $r20.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("The prefix is a bad XML name", 201);

        throw $r20;

     label2:
        $r7 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map namespaceToPrefixMap>;

        $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.lang.String) $r9;

        $r8 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map prefixToNamespaceMap>;

        $r11 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r4 = (java.lang.String) $r11;

        if r3 == null goto label3;

        return r3;

     label3:
        if r4 == null goto label6;

        r5 = r2;

        i0 = 1;

     label4:
        $r14 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map prefixToNamespaceMap>;

        $z1 = interfaceinvoke $r14.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z1 == 0 goto label5;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $i6 = virtualinvoke r2.<java.lang.String: int length()>();

        $i7 = $i6 - 1;

        $r17 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i7);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_:");

        r5 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = i0 + 1;

        goto label4;

     label5:
        r2 = r5;

     label6:
        $r10 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map prefixToNamespaceMap>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        $r12 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map namespaceToPrefixMap>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return r2;
    }

    public synchronized void deleteNamespace(java.lang.String)
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl r0;
        java.lang.String r1, r2;
        java.util.Map $r3, $r5;

        r0 := @this: com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String getNamespacePrefix(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r3 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map namespaceToPrefixMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r5 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map prefixToNamespaceMap>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    public synchronized java.lang.String getNamespacePrefix(java.lang.String)
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl r0;
        java.lang.String r1, $r4;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this: com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map namespaceToPrefixMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public synchronized java.lang.String getNamespaceURI(java.lang.String)
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl r0;
        java.lang.String r1, $r4;
        java.util.Map $r2;
        java.lang.Object $r3;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this: com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(":");

        if $z0 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r2 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map prefixToNamespaceMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public synchronized java.util.Map getNamespaces()
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl r0;
        java.util.TreeMap $r1;
        java.util.Map $r2, $r3;

        r0 := @this: com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        $r1 = new java.util.TreeMap;

        $r2 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map namespaceToPrefixMap>;

        specialinvoke $r1.<java.util.TreeMap: void <init>(java.util.Map)>($r2);

        $r3 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r3;
    }

    public synchronized java.util.Map getPrefixes()
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl r0;
        java.util.TreeMap $r1;
        java.util.Map $r2, $r3;

        r0 := @this: com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        $r1 = new java.util.TreeMap;

        $r2 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map prefixToNamespaceMap>;

        specialinvoke $r1.<java.util.TreeMap: void <init>(java.util.Map)>($r2);

        $r3 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r3;
    }

    private void registerStandardNamespaces() throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl r0;

        r0 := @this: com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "xml");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://www.w3.org/1999/02/22-rdf-syntax-ns#", "rdf");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://purl.org/dc/elements/1.1/", "dc");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", "Iptc4xmpCore");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("adobe:ns:meta/", "x");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/iX/1.0/", "iX");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/", "xmp");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/rights/", "xmpRights");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/mm/", "xmpMM");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/bj/", "xmpBJ");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xmp/note/", "xmpNote");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/pdf/1.3/", "pdf");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/pdfx/1.3/", "pdfx");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://www.npes.org/pdfx/ns/id/", "pdfxid");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://www.aiim.org/pdfa/ns/schema#", "pdfaSchema");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://www.aiim.org/pdfa/ns/property#", "pdfaProperty");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://www.aiim.org/pdfa/ns/type#", "pdfaType");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://www.aiim.org/pdfa/ns/field#", "pdfaField");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://www.aiim.org/pdfa/ns/id/", "pdfaid");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://www.aiim.org/pdfa/ns/extension/", "pdfaExtension");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/photoshop/1.0/", "photoshop");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/album/1.0/", "album");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/exif/1.0/", "exif");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/exif/1.0/aux/", "aux");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/tiff/1.0/", "tiff");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/png/1.0/", "png");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/jpeg/1.0/", "jpeg");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/jp2k/1.0/", "jp2k");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/camera-raw-settings/1.0/", "crs");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/StockPhoto/1.0/", "bmsp");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/creatorAtom/1.0/", "creatorAtom");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/asf/1.0/", "asf");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xmp/wav/1.0/", "wav");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xmp/1.0/DynamicMedia/", "xmpDM");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xmp/transient/1.0/", "xmpx");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/t/", "xmpT");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/t/pg/", "xmpTPg");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/g/", "xmpG");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/g/img/", "xmpGImg");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/sType/Font#", "stFNT");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/sType/Dimensions#", "stDim");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/sType/ResourceEvent#", "stEvt");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/sType/ResourceRef#", "stRef");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/sType/Version#", "stVer");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/sType/Job#", "stJob");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xap/1.0/sType/ManifestItem#", "stMfs");

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>("http://ns.adobe.com/xmp/Identifier/qual/1.0/", "xmpidq");

        return;
    }

    public synchronized com.adobe.xmp.properties.XMPAliasInfo resolveAlias(java.lang.String, java.lang.String)
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl r0;
        java.lang.String r1, r2, r3, $r8;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.util.Map $r5;
        java.lang.Object $r9;
        com.adobe.xmp.properties.XMPAliasInfo $r10;

        r0 := @this: com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String getNamespacePrefix(java.lang.String)>(r1);

        if r3 != null goto label1;

        return null;

     label1:
        $r5 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map aliasMap>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r10 = (com.adobe.xmp.properties.XMPAliasInfo) $r9;

        return $r10;
    }

    public synchronized com.adobe.xmp.properties.XMPAliasInfo findAlias(java.lang.String)
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        com.adobe.xmp.properties.XMPAliasInfo $r4;

        r0 := @this: com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map aliasMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.adobe.xmp.properties.XMPAliasInfo) $r3;

        return $r4;
    }

    public synchronized com.adobe.xmp.properties.XMPAliasInfo[] findAliases(java.lang.String)
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl r0;
        java.lang.String r1, r2, r5;
        java.util.ArrayList r3, $r6;
        java.util.Iterator r4;
        int $i0;
        com.adobe.xmp.properties.XMPAliasInfo[] $r7, $r9, $r10;
        java.lang.Object[] $r8;
        java.util.Map $r11;
        java.util.Set $r12;
        java.lang.Object $r13;
        boolean $z0, $z1;
        com.adobe.xmp.properties.XMPAliasInfo $r14;

        r0 := @this: com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String getNamespacePrefix(java.lang.String)>(r1);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = $r6;

        if r2 == null goto label3;

        $r11 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map aliasMap>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>();

        r4 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r13;

        $z1 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

        $r14 = virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: com.adobe.xmp.properties.XMPAliasInfo findAlias(java.lang.String)>(r5);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r14);

     label2:
        goto label1;

     label3:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $r7 = newarray (com.adobe.xmp.properties.XMPAliasInfo)[$i0];

        $r8 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (com.adobe.xmp.properties.XMPAliasInfo[]) $r8;

        $r10 = (com.adobe.xmp.properties.XMPAliasInfo[]) $r9;

        return $r10;
    }

    synchronized void registerAlias(java.lang.String, java.lang.String, java.lang.String, java.lang.String, com.adobe.xmp.options.AliasOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl r0;
        java.lang.String r1, r2, r3, r4, r7, r8, r9, $r24;
        com.adobe.xmp.options.AliasOptions r5, r6, $r11;
        com.adobe.xmp.impl.XMPSchemaRegistryImpl$1 r10, $r28;
        java.util.regex.Pattern $r12, $r16;
        java.util.regex.Matcher $r13, $r15;
        boolean $z0, $z1, $z2, $z3;
        com.adobe.xmp.XMPException $r14, $r29, $r30, $r31, $r32;
        java.lang.StringBuilder $r17, $r18, $r19, $r21, $r22, $r25;
        java.util.Map $r20, $r23, $r26;
        com.adobe.xmp.options.PropertyOptions $r33, $r34;
        int $i0;

        r0 := @this: com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: com.adobe.xmp.options.AliasOptions;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertPropName(java.lang.String)>(r2);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r3);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertPropName(java.lang.String)>(r4);

        if r5 == null goto label1;

        $r11 = new com.adobe.xmp.options.AliasOptions;

        $r34 = virtualinvoke r5.<com.adobe.xmp.options.AliasOptions: com.adobe.xmp.options.PropertyOptions toPropertyOptions()>();

        $r33 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.options.PropertyOptions verifySetOptions(com.adobe.xmp.options.PropertyOptions,java.lang.Object)>($r34, null);

        $i0 = virtualinvoke $r33.<com.adobe.xmp.options.PropertyOptions: int getOptions()>();

        specialinvoke $r11.<com.adobe.xmp.options.AliasOptions: void <init>(int)>($i0);

        goto label2;

     label1:
        $r11 = new com.adobe.xmp.options.AliasOptions;

        specialinvoke $r11.<com.adobe.xmp.options.AliasOptions: void <init>()>();

     label2:
        r6 = $r11;

        $r12 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.regex.Pattern p>;

        $r13 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $z0 = virtualinvoke $r13.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label3;

        $r16 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.regex.Pattern p>;

        $r15 = virtualinvoke $r16.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r4);

        $z1 = virtualinvoke $r15.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label4;

     label3:
        $r14 = new com.adobe.xmp.XMPException;

        specialinvoke $r14.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Alias and actual property names must be simple", 102);

        throw $r14;

     label4:
        r7 = virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String getNamespacePrefix(java.lang.String)>(r1);

        r8 = virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String getNamespacePrefix(java.lang.String)>(r3);

        if r7 != null goto label5;

        $r30 = new com.adobe.xmp.XMPException;

        specialinvoke $r30.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Alias namespace is not registered", 101);

        throw $r30;

     label5:
        if r8 != null goto label6;

        $r29 = new com.adobe.xmp.XMPException;

        specialinvoke $r29.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Actual namespace is not registered", 101);

        throw $r29;

     label6:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r9 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map aliasMap>;

        $z2 = interfaceinvoke $r20.<java.util.Map: boolean containsKey(java.lang.Object)>(r9);

        if $z2 == 0 goto label7;

        $r32 = new com.adobe.xmp.XMPException;

        specialinvoke $r32.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Alias is already existing", 4);

        throw $r32;

     label7:
        $r23 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map aliasMap>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $z3 = interfaceinvoke $r23.<java.util.Map: boolean containsKey(java.lang.Object)>($r24);

        if $z3 == 0 goto label8;

        $r31 = new com.adobe.xmp.XMPException;

        specialinvoke $r31.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Actual property is already an alias, use the base property", 4);

        throw $r31;

     label8:
        $r28 = new com.adobe.xmp.impl.XMPSchemaRegistryImpl$1;

        specialinvoke $r28.<com.adobe.xmp.impl.XMPSchemaRegistryImpl$1: void <init>(com.adobe.xmp.impl.XMPSchemaRegistryImpl,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>(r0, r3, r8, r4, r6);

        r10 = $r28;

        $r26 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map aliasMap>;

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r10);

        return;
    }

    public synchronized java.util.Map getAliases()
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl r0;
        java.util.TreeMap $r1;
        java.util.Map $r2, $r3;

        r0 := @this: com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        $r1 = new java.util.TreeMap;

        $r2 = r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.util.Map aliasMap>;

        specialinvoke $r1.<java.util.TreeMap: void <init>(java.util.Map)>($r2);

        $r3 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r3;
    }

    private void registerStandardAliases() throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl r0;
        com.adobe.xmp.options.AliasOptions r1, r2, $r3, $r4;

        r0 := @this: com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        $r3 = new com.adobe.xmp.options.AliasOptions;

        specialinvoke $r3.<com.adobe.xmp.options.AliasOptions: void <init>()>();

        r1 = virtualinvoke $r3.<com.adobe.xmp.options.AliasOptions: com.adobe.xmp.options.AliasOptions setArrayOrdered(boolean)>(1);

        $r4 = new com.adobe.xmp.options.AliasOptions;

        specialinvoke $r4.<com.adobe.xmp.options.AliasOptions: void <init>()>();

        r2 = virtualinvoke $r4.<com.adobe.xmp.options.AliasOptions: com.adobe.xmp.options.AliasOptions setArrayAltText(boolean)>(1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/xap/1.0/", "Author", "http://purl.org/dc/elements/1.1/", "creator", r1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/xap/1.0/", "Authors", "http://purl.org/dc/elements/1.1/", "creator", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/xap/1.0/", "Description", "http://purl.org/dc/elements/1.1/", "description", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/xap/1.0/", "Format", "http://purl.org/dc/elements/1.1/", "format", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/xap/1.0/", "Keywords", "http://purl.org/dc/elements/1.1/", "subject", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/xap/1.0/", "Locale", "http://purl.org/dc/elements/1.1/", "language", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/xap/1.0/", "Title", "http://purl.org/dc/elements/1.1/", "title", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/xap/1.0/rights/", "Copyright", "http://purl.org/dc/elements/1.1/", "rights", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/pdf/1.3/", "Author", "http://purl.org/dc/elements/1.1/", "creator", r1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/pdf/1.3/", "BaseURL", "http://ns.adobe.com/xap/1.0/", "BaseURL", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/pdf/1.3/", "CreationDate", "http://ns.adobe.com/xap/1.0/", "CreateDate", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/pdf/1.3/", "Creator", "http://ns.adobe.com/xap/1.0/", "CreatorTool", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/pdf/1.3/", "ModDate", "http://ns.adobe.com/xap/1.0/", "ModifyDate", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/pdf/1.3/", "Subject", "http://purl.org/dc/elements/1.1/", "description", r2);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/pdf/1.3/", "Title", "http://purl.org/dc/elements/1.1/", "title", r2);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/photoshop/1.0/", "Author", "http://purl.org/dc/elements/1.1/", "creator", r1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/photoshop/1.0/", "Caption", "http://purl.org/dc/elements/1.1/", "description", r2);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/photoshop/1.0/", "Copyright", "http://purl.org/dc/elements/1.1/", "rights", r2);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/photoshop/1.0/", "Keywords", "http://purl.org/dc/elements/1.1/", "subject", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/photoshop/1.0/", "Marked", "http://ns.adobe.com/xap/1.0/rights/", "Marked", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/photoshop/1.0/", "Title", "http://purl.org/dc/elements/1.1/", "title", r2);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/photoshop/1.0/", "WebStatement", "http://ns.adobe.com/xap/1.0/rights/", "WebStatement", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/tiff/1.0/", "Artist", "http://purl.org/dc/elements/1.1/", "creator", r1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/tiff/1.0/", "Copyright", "http://purl.org/dc/elements/1.1/", "rights", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/tiff/1.0/", "DateTime", "http://ns.adobe.com/xap/1.0/", "ModifyDate", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/tiff/1.0/", "ImageDescription", "http://purl.org/dc/elements/1.1/", "description", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/tiff/1.0/", "Software", "http://ns.adobe.com/xap/1.0/", "CreatorTool", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/png/1.0/", "Author", "http://purl.org/dc/elements/1.1/", "creator", r1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/png/1.0/", "Copyright", "http://purl.org/dc/elements/1.1/", "rights", r2);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/png/1.0/", "CreationTime", "http://ns.adobe.com/xap/1.0/", "CreateDate", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/png/1.0/", "Description", "http://purl.org/dc/elements/1.1/", "description", r2);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/png/1.0/", "ModificationTime", "http://ns.adobe.com/xap/1.0/", "ModifyDate", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/png/1.0/", "Software", "http://ns.adobe.com/xap/1.0/", "CreatorTool", null);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>("http://ns.adobe.com/png/1.0/", "Title", "http://purl.org/dc/elements/1.1/", "title", r2);

        return;
    }
}
