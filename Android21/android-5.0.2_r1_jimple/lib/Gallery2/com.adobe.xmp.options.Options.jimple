public abstract class com.adobe.xmp.options.Options extends java.lang.Object
{
    private int options;
    private java.util.Map optionNames;

    public void <init>()
    {
        com.adobe.xmp.options.Options r0;

        r0 := @this: com.adobe.xmp.options.Options;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.options.Options: int options> = 0;

        r0.<com.adobe.xmp.options.Options: java.util.Map optionNames> = null;

        return;
    }

    public void <init>(int) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.options.Options r0;
        int i0;

        r0 := @this: com.adobe.xmp.options.Options;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.options.Options: int options> = 0;

        r0.<com.adobe.xmp.options.Options: java.util.Map optionNames> = null;

        specialinvoke r0.<com.adobe.xmp.options.Options: void assertOptionsValid(int)>(i0);

        virtualinvoke r0.<com.adobe.xmp.options.Options: void setOptions(int)>(i0);

        return;
    }

    public void clear()
    {
        com.adobe.xmp.options.Options r0;

        r0 := @this: com.adobe.xmp.options.Options;

        r0.<com.adobe.xmp.options.Options: int options> = 0;

        return;
    }

    public boolean isExactly(int)
    {
        com.adobe.xmp.options.Options r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.Options;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.adobe.xmp.options.Options: int getOptions()>();

        if $i1 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsAllOptions(int)
    {
        com.adobe.xmp.options.Options r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.Options;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.adobe.xmp.options.Options: int getOptions()>();

        $i2 = $i1 & i0;

        if $i2 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsOneOf(int)
    {
        com.adobe.xmp.options.Options r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.Options;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.adobe.xmp.options.Options: int getOptions()>();

        $i2 = $i1 & i0;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean getOption(int)
    {
        com.adobe.xmp.options.Options r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.Options;

        i0 := @parameter0: int;

        $i1 = r0.<com.adobe.xmp.options.Options: int options>;

        $i2 = $i1 & i0;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setOption(int, boolean)
    {
        com.adobe.xmp.options.Options r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0;

        r0 := @this: com.adobe.xmp.options.Options;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i4 = r0.<com.adobe.xmp.options.Options: int options>;

        $i3 = $i4 | i0;

        goto label2;

     label1:
        $i2 = r0.<com.adobe.xmp.options.Options: int options>;

        $i1 = i0 ^ -1;

        $i3 = $i2 & $i1;

     label2:
        r0.<com.adobe.xmp.options.Options: int options> = $i3;

        return;
    }

    public int getOptions()
    {
        com.adobe.xmp.options.Options r0;
        int $i0;

        r0 := @this: com.adobe.xmp.options.Options;

        $i0 = r0.<com.adobe.xmp.options.Options: int options>;

        return $i0;
    }

    public void setOptions(int) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.options.Options r0;
        int i0;

        r0 := @this: com.adobe.xmp.options.Options;

        i0 := @parameter0: int;

        specialinvoke r0.<com.adobe.xmp.options.Options: void assertOptionsValid(int)>(i0);

        r0.<com.adobe.xmp.options.Options: int options> = i0;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        com.adobe.xmp.options.Options r0, $r2;
        java.lang.Object r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.Options;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.adobe.xmp.options.Options: int getOptions()>();

        $r2 = (com.adobe.xmp.options.Options) r1;

        $i1 = virtualinvoke $r2.<com.adobe.xmp.options.Options: int getOptions()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int hashCode()
    {
        com.adobe.xmp.options.Options r0;
        int $i0;

        r0 := @this: com.adobe.xmp.options.Options;

        $i0 = virtualinvoke r0.<com.adobe.xmp.options.Options: int getOptions()>();

        return $i0;
    }

    public java.lang.String getOptionsString()
    {
        com.adobe.xmp.options.Options r0;
        java.lang.StringBuffer r1, $r3;
        int i0, i1, i2, $i3, $i4;
        java.lang.String r2, $r4;

        r0 := @this: com.adobe.xmp.options.Options;

        $i3 = r0.<com.adobe.xmp.options.Options: int options>;

        if $i3 == 0 goto label4;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        r1 = $r3;

        i0 = r0.<com.adobe.xmp.options.Options: int options>;

     label1:
        if i0 == 0 goto label3;

        $i4 = i0 - 1;

        i1 = i0 & $i4;

        i2 = i0 ^ i1;

        r2 = specialinvoke r0.<com.adobe.xmp.options.Options: java.lang.String getOptionName(int)>(i2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        if i1 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" | ");

     label2:
        i0 = i1;

        goto label1;

     label3:
        $r4 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

     label4:
        return "<none>";
    }

    public java.lang.String toString()
    {
        com.adobe.xmp.options.Options r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        int $i0;
        java.lang.String $r3, $r5;

        r0 := @this: com.adobe.xmp.options.Options;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $i0 = r0.<com.adobe.xmp.options.Options: int options>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected abstract int getValidOptions();

    protected abstract java.lang.String defineOptionName(int);

    protected void assertConsistency(int) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.options.Options r0;
        int i0;

        r0 := @this: com.adobe.xmp.options.Options;

        i0 := @parameter0: int;

        return;
    }

    private void assertOptionsValid(int) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.options.Options r0;
        int i0, i1, $i2, $i3;
        com.adobe.xmp.XMPException $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String $r4, $r7;

        r0 := @this: com.adobe.xmp.options.Options;

        i0 := @parameter0: int;

        $i2 = virtualinvoke r0.<com.adobe.xmp.options.Options: int getValidOptions()>();

        $i3 = $i2 ^ -1;

        i1 = i0 & $i3;

        if i1 != 0 goto label1;

        virtualinvoke r0.<com.adobe.xmp.options.Options: void assertConsistency(int)>(i0);

        goto label2;

     label1:
        $r1 = new com.adobe.xmp.XMPException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The option bit(s) 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" are invalid!");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>($r7, 103);

        throw $r1;

     label2:
        return;
    }

    private java.lang.String getOptionName(int)
    {
        com.adobe.xmp.options.Options r0;
        int i0;
        java.util.Map r1;
        java.lang.Integer r2, $r4;
        java.lang.String r3;
        java.lang.Object $r5;

        r0 := @this: com.adobe.xmp.options.Options;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.adobe.xmp.options.Options: java.util.Map procureOptionNames()>();

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0);

        r2 = $r4;

        $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.lang.String) $r5;

        if r3 != null goto label2;

        r3 = virtualinvoke r0.<com.adobe.xmp.options.Options: java.lang.String defineOptionName(int)>(i0);

        if r3 == null goto label1;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        goto label2;

     label1:
        r3 = "<option name not defined>";

     label2:
        return r3;
    }

    private java.util.Map procureOptionNames()
    {
        com.adobe.xmp.options.Options r0;
        java.util.Map $r1, $r2;
        java.util.HashMap $r3;

        r0 := @this: com.adobe.xmp.options.Options;

        $r1 = r0.<com.adobe.xmp.options.Options: java.util.Map optionNames>;

        if $r1 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.adobe.xmp.options.Options: java.util.Map optionNames> = $r3;

     label1:
        $r2 = r0.<com.adobe.xmp.options.Options: java.util.Map optionNames>;

        return $r2;
    }
}
