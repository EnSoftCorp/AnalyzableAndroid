public final class com.adobe.xmp.options.PropertyOptions extends com.adobe.xmp.options.Options
{
    public static final int NO_OPTIONS;
    public static final int URI;
    public static final int HAS_QUALIFIERS;
    public static final int QUALIFIER;
    public static final int HAS_LANGUAGE;
    public static final int HAS_TYPE;
    public static final int STRUCT;
    public static final int ARRAY;
    public static final int ARRAY_ORDERED;
    public static final int ARRAY_ALTERNATE;
    public static final int ARRAY_ALT_TEXT;
    public static final int SCHEMA_NODE;
    public static final int DELETE_EXISTING;

    public void <init>()
    {
        com.adobe.xmp.options.PropertyOptions r0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        specialinvoke r0.<com.adobe.xmp.options.Options: void <init>()>();

        return;
    }

    public void <init>(int) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.options.PropertyOptions r0;
        int i0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        i0 := @parameter0: int;

        specialinvoke r0.<com.adobe.xmp.options.Options: void <init>(int)>(i0);

        return;
    }

    public boolean isURI()
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        $z0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean getOption(int)>(2);

        return $z0;
    }

    public com.adobe.xmp.options.PropertyOptions setURI(boolean)
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: void setOption(int,boolean)>(2, z0);

        return r0;
    }

    public boolean getHasQualifiers()
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        $z0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean getOption(int)>(16);

        return $z0;
    }

    public com.adobe.xmp.options.PropertyOptions setHasQualifiers(boolean)
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: void setOption(int,boolean)>(16, z0);

        return r0;
    }

    public boolean isQualifier()
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        $z0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean getOption(int)>(32);

        return $z0;
    }

    public com.adobe.xmp.options.PropertyOptions setQualifier(boolean)
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: void setOption(int,boolean)>(32, z0);

        return r0;
    }

    public boolean getHasLanguage()
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        $z0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean getOption(int)>(64);

        return $z0;
    }

    public com.adobe.xmp.options.PropertyOptions setHasLanguage(boolean)
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: void setOption(int,boolean)>(64, z0);

        return r0;
    }

    public boolean getHasType()
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        $z0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean getOption(int)>(128);

        return $z0;
    }

    public com.adobe.xmp.options.PropertyOptions setHasType(boolean)
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: void setOption(int,boolean)>(128, z0);

        return r0;
    }

    public boolean isStruct()
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        $z0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean getOption(int)>(256);

        return $z0;
    }

    public com.adobe.xmp.options.PropertyOptions setStruct(boolean)
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: void setOption(int,boolean)>(256, z0);

        return r0;
    }

    public boolean isArray()
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        $z0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean getOption(int)>(512);

        return $z0;
    }

    public com.adobe.xmp.options.PropertyOptions setArray(boolean)
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: void setOption(int,boolean)>(512, z0);

        return r0;
    }

    public boolean isArrayOrdered()
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        $z0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean getOption(int)>(1024);

        return $z0;
    }

    public com.adobe.xmp.options.PropertyOptions setArrayOrdered(boolean)
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: void setOption(int,boolean)>(1024, z0);

        return r0;
    }

    public boolean isArrayAlternate()
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        $z0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean getOption(int)>(2048);

        return $z0;
    }

    public com.adobe.xmp.options.PropertyOptions setArrayAlternate(boolean)
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: void setOption(int,boolean)>(2048, z0);

        return r0;
    }

    public boolean isArrayAltText()
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        $z0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean getOption(int)>(4096);

        return $z0;
    }

    public com.adobe.xmp.options.PropertyOptions setArrayAltText(boolean)
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: void setOption(int,boolean)>(4096, z0);

        return r0;
    }

    public boolean isSchemaNode()
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        $z0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean getOption(int)>(-2147483648);

        return $z0;
    }

    public com.adobe.xmp.options.PropertyOptions setSchemaNode(boolean)
    {
        com.adobe.xmp.options.PropertyOptions r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: void setOption(int,boolean)>(-2147483648, z0);

        return r0;
    }

    public boolean isCompositeProperty()
    {
        com.adobe.xmp.options.PropertyOptions r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        $i0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: int getOptions()>();

        $i1 = $i0 & 768;

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSimple()
    {
        com.adobe.xmp.options.PropertyOptions r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        $i0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: int getOptions()>();

        $i1 = $i0 & 768;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean equalArrayTypes(com.adobe.xmp.options.PropertyOptions)
    {
        com.adobe.xmp.options.PropertyOptions r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        r1 := @parameter0: com.adobe.xmp.options.PropertyOptions;

        $z0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        $z1 = virtualinvoke r1.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z0 != $z1 goto label1;

        $z2 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean isArrayOrdered()>();

        $z3 = virtualinvoke r1.<com.adobe.xmp.options.PropertyOptions: boolean isArrayOrdered()>();

        if $z2 != $z3 goto label1;

        $z4 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAlternate()>();

        $z5 = virtualinvoke r1.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAlternate()>();

        if $z4 != $z5 goto label1;

        $z6 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        $z7 = virtualinvoke r1.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z6 != $z7 goto label1;

        $z8 = 1;

        goto label2;

     label1:
        $z8 = 0;

     label2:
        return $z8;
    }

    public void mergeWith(com.adobe.xmp.options.PropertyOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.options.PropertyOptions r0, r1;
        int $i0, $i1, $i2;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        r1 := @parameter0: com.adobe.xmp.options.PropertyOptions;

        if r1 == null goto label1;

        $i0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: int getOptions()>();

        $i1 = virtualinvoke r1.<com.adobe.xmp.options.PropertyOptions: int getOptions()>();

        $i2 = $i0 | $i1;

        virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: void setOptions(int)>($i2);

     label1:
        return;
    }

    public boolean isOnlyArrayOptions()
    {
        com.adobe.xmp.options.PropertyOptions r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        $i0 = virtualinvoke r0.<com.adobe.xmp.options.PropertyOptions: int getOptions()>();

        $i1 = $i0 & -7681;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected int getValidOptions()
    {
        com.adobe.xmp.options.PropertyOptions r0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        return -2147475470;
    }

    protected java.lang.String defineOptionName(int)
    {
        com.adobe.xmp.options.PropertyOptions r0;
        int i0;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case -2147483648: goto label11;
            case 2: goto label01;
            case 16: goto label02;
            case 32: goto label03;
            case 64: goto label04;
            case 128: goto label05;
            case 256: goto label06;
            case 512: goto label07;
            case 1024: goto label08;
            case 2048: goto label09;
            case 4096: goto label10;
            default: goto label12;
        };

     label01:
        return "URI";

     label02:
        return "HAS_QUALIFIER";

     label03:
        return "QUALIFIER";

     label04:
        return "HAS_LANGUAGE";

     label05:
        return "HAS_TYPE";

     label06:
        return "STRUCT";

     label07:
        return "ARRAY";

     label08:
        return "ARRAY_ORDERED";

     label09:
        return "ARRAY_ALTERNATE";

     label10:
        return "ARRAY_ALT_TEXT";

     label11:
        return "SCHEMA_NODE";

     label12:
        return null;
    }

    public void assertConsistency(int) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.options.PropertyOptions r0;
        int i0, $i1, $i2, $i3, $i4;
        com.adobe.xmp.XMPException $r1, $r2;

        r0 := @this: com.adobe.xmp.options.PropertyOptions;

        i0 := @parameter0: int;

        $i1 = i0 & 256;

        if $i1 <= 0 goto label1;

        $i4 = i0 & 512;

        if $i4 <= 0 goto label1;

        $r2 = new com.adobe.xmp.XMPException;

        specialinvoke $r2.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("IsStruct and IsArray options are mutually exclusive", 103);

        throw $r2;

     label1:
        $i2 = i0 & 2;

        if $i2 <= 0 goto label2;

        $i3 = i0 & 768;

        if $i3 <= 0 goto label2;

        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Structs and arrays can\'t have \"value\" options", 103);

        throw $r1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <com.adobe.xmp.options.PropertyOptions: int DELETE_EXISTING> = 536870912;

        <com.adobe.xmp.options.PropertyOptions: int SCHEMA_NODE> = -2147483648;

        <com.adobe.xmp.options.PropertyOptions: int ARRAY_ALT_TEXT> = 4096;

        <com.adobe.xmp.options.PropertyOptions: int ARRAY_ALTERNATE> = 2048;

        <com.adobe.xmp.options.PropertyOptions: int ARRAY_ORDERED> = 1024;

        <com.adobe.xmp.options.PropertyOptions: int ARRAY> = 512;

        <com.adobe.xmp.options.PropertyOptions: int STRUCT> = 256;

        <com.adobe.xmp.options.PropertyOptions: int HAS_TYPE> = 128;

        <com.adobe.xmp.options.PropertyOptions: int HAS_LANGUAGE> = 64;

        <com.adobe.xmp.options.PropertyOptions: int QUALIFIER> = 32;

        <com.adobe.xmp.options.PropertyOptions: int HAS_QUALIFIERS> = 16;

        <com.adobe.xmp.options.PropertyOptions: int URI> = 2;

        <com.adobe.xmp.options.PropertyOptions: int NO_OPTIONS> = 0;

        return;
    }
}
