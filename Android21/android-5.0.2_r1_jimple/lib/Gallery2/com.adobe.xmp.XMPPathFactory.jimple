public final class com.adobe.xmp.XMPPathFactory extends java.lang.Object
{

    private void <init>()
    {
        com.adobe.xmp.XMPPathFactory r0;

        r0 := @this: com.adobe.xmp.XMPPathFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String composeArrayItemPath(java.lang.String, int) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0, $r5, $r11;
        int i0;
        com.adobe.xmp.XMPException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 <= 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

     label1:
        if i0 != -1 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[last()]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label2:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Array index must be larger than zero", 104);

        throw $r1;
    }

    public static java.lang.String composeStructFieldPath(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0, r1, $r6, $r8;
        com.adobe.xmp.impl.xpath.XMPPath r2;
        int $i0;
        java.lang.StringBuilder $r3, $r4, $r7;
        com.adobe.xmp.impl.xpath.XMPPathSegment $r5;
        com.adobe.xmp.XMPException $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.adobe.xmp.XMPPathFactory: void assertFieldNS(java.lang.String)>(r0);

        staticinvoke <com.adobe.xmp.XMPPathFactory: void assertFieldName(java.lang.String)>(r1);

        r2 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r0, r1);

        $i0 = virtualinvoke r2.<com.adobe.xmp.impl.xpath.XMPPath: int size()>();

        if $i0 == 2 goto label1;

        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("The field name must be simple", 102);

        throw $r9;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r5 = virtualinvoke r2.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(1);

        $r6 = virtualinvoke $r5.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String composeQualifierPath(java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0, r1, $r6, $r8;
        com.adobe.xmp.impl.xpath.XMPPath r2;
        int $i0;
        java.lang.StringBuilder $r3, $r4, $r7;
        com.adobe.xmp.impl.xpath.XMPPathSegment $r5;
        com.adobe.xmp.XMPException $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.adobe.xmp.XMPPathFactory: void assertQualNS(java.lang.String)>(r0);

        staticinvoke <com.adobe.xmp.XMPPathFactory: void assertQualName(java.lang.String)>(r1);

        r2 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r0, r1);

        $i0 = virtualinvoke r2.<com.adobe.xmp.impl.xpath.XMPPath: int size()>();

        if $i0 == 2 goto label1;

        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("The qualifier name must be simple", 102);

        throw $r9;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/?");

        $r5 = virtualinvoke r2.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(1);

        $r6 = virtualinvoke $r5.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String composeLangSelector(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r5, $r8;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[?xml:lang=\"");

        $r5 = staticinvoke <com.adobe.xmp.impl.Utils: java.lang.String normalizeLangValue(java.lang.String)>(r1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String composeFieldSelector(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0, r1, r2, r3, $r9, $r15;
        com.adobe.xmp.impl.xpath.XMPPath r4;
        int $i0;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12, $r13;
        com.adobe.xmp.impl.xpath.XMPPathSegment $r8;
        com.adobe.xmp.XMPException $r14;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $i0 = virtualinvoke r4.<com.adobe.xmp.impl.xpath.XMPPath: int size()>();

        if $i0 == 2 goto label1;

        $r14 = new com.adobe.xmp.XMPException;

        specialinvoke $r14.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("The fieldName name must be simple", 102);

        throw $r14;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r8 = virtualinvoke r4.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(1);

        $r9 = virtualinvoke $r8.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\"");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"]");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    private static void assertQualNS(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.XMPException $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty qualifier namespace URI", 101);

        throw $r1;

     label2:
        return;
    }

    private static void assertQualName(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.XMPException $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty qualifier name", 102);

        throw $r1;

     label2:
        return;
    }

    private static void assertFieldNS(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.XMPException $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty field namespace URI", 101);

        throw $r1;

     label2:
        return;
    }

    private static void assertFieldName(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.XMPException $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty f name", 102);

        throw $r1;

     label2:
        return;
    }
}
