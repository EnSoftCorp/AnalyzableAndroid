public class com.googlecode.mp4parser.authoring.tracks.H264TrackImpl extends com.googlecode.mp4parser.authoring.AbstractTrack
{
    private static final java.util.logging.Logger LOG;
    com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData;
    com.coremedia.iso.boxes.SampleDescriptionBox sampleDescriptionBox;
    private com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper reader;
    private java.util.List samples;
    boolean readSamples;
    java.util.List stts;
    java.util.List ctts;
    java.util.List sdtp;
    java.util.List stss;
    com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet;
    com.googlecode.mp4parser.h264.model.PictureParameterSet pictureParameterSet;
    java.util.LinkedList seqParameterSetList;
    java.util.LinkedList pictureParameterSetList;
    private int width;
    private int height;
    private int timescale;
    private int frametick;
    private int currentScSize;
    private int prevScSize;
    private com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage seiMessage;
    int frameNrInGop;
    private boolean determineFrameRate;
    private java.lang.String lang;

    public void <init>(java.io.InputStream, java.lang.String, long) throws java.io.IOException
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        java.io.InputStream r1;
        java.lang.String r2;
        long l0;
        com.googlecode.mp4parser.authoring.TrackMetaData $r3;
        java.util.LinkedList $r4, $r5;
        byte $b1;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        specialinvoke r0.<com.googlecode.mp4parser.authoring.AbstractTrack: void <init>()>();

        $r3 = new com.googlecode.mp4parser.authoring.TrackMetaData;

        specialinvoke $r3.<com.googlecode.mp4parser.authoring.TrackMetaData: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData> = $r3;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: boolean readSamples> = 0;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet> = null;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.PictureParameterSet pictureParameterSet> = null;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.LinkedList seqParameterSetList> = $r4;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.LinkedList pictureParameterSetList> = $r5;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frameNrInGop> = 0;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: boolean determineFrameRate> = 1;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.lang.String lang> = "und";

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.lang.String lang> = r2;

        $b1 = l0 cmp 1000L;

        if $b1 <= 0 goto label1;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frametick> = 1000;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: boolean determineFrameRate> = 0;

        goto label2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Timescale must be specified in milliseconds!");

        throw $r6;

     label2:
        specialinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: void parse(java.io.InputStream)>(r1);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        java.io.InputStream r1;
        java.lang.String r2;
        com.googlecode.mp4parser.authoring.TrackMetaData $r3;
        java.util.LinkedList $r4, $r5;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.googlecode.mp4parser.authoring.AbstractTrack: void <init>()>();

        $r3 = new com.googlecode.mp4parser.authoring.TrackMetaData;

        specialinvoke $r3.<com.googlecode.mp4parser.authoring.TrackMetaData: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData> = $r3;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: boolean readSamples> = 0;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet> = null;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.PictureParameterSet pictureParameterSet> = null;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.LinkedList seqParameterSetList> = $r4;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.LinkedList pictureParameterSetList> = $r5;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frameNrInGop> = 0;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: boolean determineFrameRate> = 1;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.lang.String lang> = "und";

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.lang.String lang> = r2;

        specialinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: void parse(java.io.InputStream)>(r1);

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        java.io.InputStream r1;
        com.googlecode.mp4parser.authoring.TrackMetaData $r2;
        java.util.LinkedList $r3, $r4;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<com.googlecode.mp4parser.authoring.AbstractTrack: void <init>()>();

        $r2 = new com.googlecode.mp4parser.authoring.TrackMetaData;

        specialinvoke $r2.<com.googlecode.mp4parser.authoring.TrackMetaData: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData> = $r2;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: boolean readSamples> = 0;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet> = null;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.PictureParameterSet pictureParameterSet> = null;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.LinkedList seqParameterSetList> = $r3;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.LinkedList pictureParameterSetList> = $r4;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frameNrInGop> = 0;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: boolean determineFrameRate> = 1;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.lang.String lang> = "und";

        specialinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: void parse(java.io.InputStream)>(r1);

        return;
    }

    private void parse(java.io.InputStream) throws java.io.IOException
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        java.io.InputStream r1;
        com.coremedia.iso.boxes.sampleentry.VisualSampleEntry r2, $r11;
        com.coremedia.iso.boxes.h264.AvcConfigurationBox r3, $r13;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper $r4;
        java.util.LinkedList $r5, $r6, $r7, $r8, $r9, $r12, $r15, $r22;
        boolean $z0, $z1;
        com.coremedia.iso.boxes.SampleDescriptionBox $r10, $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i9, $i10, $i11;
        com.googlecode.mp4parser.h264.model.SeqParameterSet $r14, $r16, $r17, $r18, $r19;
        com.googlecode.mp4parser.h264.model.ChromaFormat $r20;
        java.lang.Object $r21;
        java.util.Date $r24, $r29;
        byte[] $r25;
        byte $b7;
        com.googlecode.mp4parser.authoring.TrackMetaData $r26, $r28, $r30, $r31, $r32, $r35;
        java.lang.String $r27;
        long $l8;
        double $d0, $d1;
        java.io.IOException $r33, $r34;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        r1 := @parameter0: java.io.InputStream;

        $r4 = new com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper;

        specialinvoke $r4.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper: void <init>(com.googlecode.mp4parser.authoring.tracks.H264TrackImpl,java.io.InputStream,com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$1)>(r0, r1, null);

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper reader> = $r4;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List stts> = $r5;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List ctts> = $r6;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List sdtp> = $r7;

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List stss> = $r8;

        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List samples> = $r9;

        $z0 = specialinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: boolean readSamples()>();

        if $z0 != 0 goto label1;

        $r33 = new java.io.IOException;

        specialinvoke $r33.<java.io.IOException: void <init>()>();

        throw $r33;

     label1:
        $z1 = specialinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: boolean readVariables()>();

        if $z1 != 0 goto label2;

        $r34 = new java.io.IOException;

        specialinvoke $r34.<java.io.IOException: void <init>()>();

        throw $r34;

     label2:
        $r10 = new com.coremedia.iso.boxes.SampleDescriptionBox;

        specialinvoke $r10.<com.coremedia.iso.boxes.SampleDescriptionBox: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.coremedia.iso.boxes.SampleDescriptionBox sampleDescriptionBox> = $r10;

        $r11 = new com.coremedia.iso.boxes.sampleentry.VisualSampleEntry;

        specialinvoke $r11.<com.coremedia.iso.boxes.sampleentry.VisualSampleEntry: void <init>(java.lang.String)>("avc1");

        r2 = $r11;

        virtualinvoke r2.<com.coremedia.iso.boxes.sampleentry.VisualSampleEntry: void setDataReferenceIndex(int)>(1);

        virtualinvoke r2.<com.coremedia.iso.boxes.sampleentry.VisualSampleEntry: void setDepth(int)>(24);

        virtualinvoke r2.<com.coremedia.iso.boxes.sampleentry.VisualSampleEntry: void setFrameCount(int)>(1);

        virtualinvoke r2.<com.coremedia.iso.boxes.sampleentry.VisualSampleEntry: void setHorizresolution(double)>(72.0);

        virtualinvoke r2.<com.coremedia.iso.boxes.sampleentry.VisualSampleEntry: void setVertresolution(double)>(72.0);

        $i0 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int width>;

        virtualinvoke r2.<com.coremedia.iso.boxes.sampleentry.VisualSampleEntry: void setWidth(int)>($i0);

        $i1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int height>;

        virtualinvoke r2.<com.coremedia.iso.boxes.sampleentry.VisualSampleEntry: void setHeight(int)>($i1);

        virtualinvoke r2.<com.coremedia.iso.boxes.sampleentry.VisualSampleEntry: void setCompressorname(java.lang.String)>("AVC Coding");

        $r13 = new com.coremedia.iso.boxes.h264.AvcConfigurationBox;

        specialinvoke $r13.<com.coremedia.iso.boxes.h264.AvcConfigurationBox: void <init>()>();

        r3 = $r13;

        $r12 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.LinkedList seqParameterSetList>;

        virtualinvoke r3.<com.coremedia.iso.boxes.h264.AvcConfigurationBox: void setSequenceParameterSets(java.util.List)>($r12);

        $r15 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.LinkedList pictureParameterSetList>;

        virtualinvoke r3.<com.coremedia.iso.boxes.h264.AvcConfigurationBox: void setPictureParameterSets(java.util.List)>($r15);

        $r14 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $i2 = $r14.<com.googlecode.mp4parser.h264.model.SeqParameterSet: int level_idc>;

        virtualinvoke r3.<com.coremedia.iso.boxes.h264.AvcConfigurationBox: void setAvcLevelIndication(int)>($i2);

        $r16 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $i3 = $r16.<com.googlecode.mp4parser.h264.model.SeqParameterSet: int profile_idc>;

        virtualinvoke r3.<com.coremedia.iso.boxes.h264.AvcConfigurationBox: void setAvcProfileIndication(int)>($i3);

        $r17 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $i4 = $r17.<com.googlecode.mp4parser.h264.model.SeqParameterSet: int bit_depth_luma_minus8>;

        virtualinvoke r3.<com.coremedia.iso.boxes.h264.AvcConfigurationBox: void setBitDepthLumaMinus8(int)>($i4);

        $r18 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $i5 = $r18.<com.googlecode.mp4parser.h264.model.SeqParameterSet: int bit_depth_chroma_minus8>;

        virtualinvoke r3.<com.coremedia.iso.boxes.h264.AvcConfigurationBox: void setBitDepthChromaMinus8(int)>($i5);

        $r19 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $r20 = $r19.<com.googlecode.mp4parser.h264.model.SeqParameterSet: com.googlecode.mp4parser.h264.model.ChromaFormat chroma_format_idc>;

        $i6 = virtualinvoke $r20.<com.googlecode.mp4parser.h264.model.ChromaFormat: int getId()>();

        virtualinvoke r3.<com.coremedia.iso.boxes.h264.AvcConfigurationBox: void setChromaFormat(int)>($i6);

        virtualinvoke r3.<com.coremedia.iso.boxes.h264.AvcConfigurationBox: void setConfigurationVersion(int)>(1);

        virtualinvoke r3.<com.coremedia.iso.boxes.h264.AvcConfigurationBox: void setLengthSizeMinusOne(int)>(3);

        $r22 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.LinkedList seqParameterSetList>;

        $r21 = virtualinvoke $r22.<java.util.LinkedList: java.lang.Object get(int)>(0);

        $r25 = (byte[]) $r21;

        $b7 = $r25[1];

        virtualinvoke r3.<com.coremedia.iso.boxes.h264.AvcConfigurationBox: void setProfileCompatibility(int)>($b7);

        virtualinvoke r2.<com.coremedia.iso.boxes.sampleentry.VisualSampleEntry: void addBox(com.coremedia.iso.boxes.Box)>(r3);

        $r23 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.coremedia.iso.boxes.SampleDescriptionBox sampleDescriptionBox>;

        virtualinvoke $r23.<com.coremedia.iso.boxes.SampleDescriptionBox: void addBox(com.coremedia.iso.boxes.Box)>(r2);

        $r28 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData>;

        $r24 = new java.util.Date;

        specialinvoke $r24.<java.util.Date: void <init>()>();

        virtualinvoke $r28.<com.googlecode.mp4parser.authoring.TrackMetaData: void setCreationTime(java.util.Date)>($r24);

        $r26 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData>;

        $r29 = new java.util.Date;

        specialinvoke $r29.<java.util.Date: void <init>()>();

        virtualinvoke $r26.<com.googlecode.mp4parser.authoring.TrackMetaData: void setModificationTime(java.util.Date)>($r29);

        $r31 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData>;

        $r27 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.lang.String lang>;

        virtualinvoke $r31.<com.googlecode.mp4parser.authoring.TrackMetaData: void setLanguage(java.lang.String)>($r27);

        $r30 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData>;

        $i9 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int timescale>;

        $l8 = (long) $i9;

        virtualinvoke $r30.<com.googlecode.mp4parser.authoring.TrackMetaData: void setTimescale(long)>($l8);

        $r32 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData>;

        $i11 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int width>;

        $d0 = (double) $i11;

        virtualinvoke $r32.<com.googlecode.mp4parser.authoring.TrackMetaData: void setWidth(double)>($d0);

        $r35 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData>;

        $i10 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int height>;

        $d1 = (double) $i10;

        virtualinvoke $r35.<com.googlecode.mp4parser.authoring.TrackMetaData: void setHeight(double)>($d1);

        return;
    }

    public com.coremedia.iso.boxes.SampleDescriptionBox getSampleDescriptionBox()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        com.coremedia.iso.boxes.SampleDescriptionBox $r1;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.coremedia.iso.boxes.SampleDescriptionBox sampleDescriptionBox>;

        return $r1;
    }

    public java.util.List getDecodingTimeEntries()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        java.util.List $r1;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List stts>;

        return $r1;
    }

    public java.util.List getCompositionTimeEntries()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        java.util.List $r1;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List ctts>;

        return $r1;
    }

    public long[] getSyncSamples()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        long[] r1;
        int i0, $i1, $i2, $i3;
        java.util.List $r2, $r3, $r4;
        java.lang.Object $r5;
        java.lang.Integer $r6;
        long $l4;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        $r2 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List stss>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        r1 = newarray (long)[$i1];

        i0 = 0;

     label1:
        $r3 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List stss>;

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i0 >= $i2 goto label2;

        $r4 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List stss>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r6 = (java.lang.Integer) $r5;

        $i3 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $l4 = (long) $i3;

        r1[i0] = $l4;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    public java.util.List getSampleDependencies()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        java.util.List $r1;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List sdtp>;

        return $r1;
    }

    public com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        com.googlecode.mp4parser.authoring.TrackMetaData $r1;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData>;

        return $r1;
    }

    public java.lang.String getHandler()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        return "vide";
    }

    public java.util.List getSamples()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        java.util.List $r1;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List samples>;

        return $r1;
    }

    public com.coremedia.iso.boxes.AbstractMediaHeaderBox getMediaHeaderBox()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        com.coremedia.iso.boxes.VideoMediaHeaderBox $r1;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        $r1 = new com.coremedia.iso.boxes.VideoMediaHeaderBox;

        specialinvoke $r1.<com.coremedia.iso.boxes.VideoMediaHeaderBox: void <init>()>();

        return $r1;
    }

    public com.coremedia.iso.boxes.SubSampleInformationBox getSubsampleInformationBox()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        return null;
    }

    private boolean readVariables()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        byte b0;
        int i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        com.googlecode.mp4parser.h264.model.SeqParameterSet $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13;
        boolean $z0, $z1, $z2;
        com.googlecode.mp4parser.h264.model.ChromaFormat $r12, $r14, $r15;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $i4 = $r1.<com.googlecode.mp4parser.h264.model.SeqParameterSet: int pic_width_in_mbs_minus1>;

        $i5 = $i4 + 1;

        $i6 = $i5 * 16;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int width> = $i6;

        b0 = 2;

        $r2 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $z0 = $r2.<com.googlecode.mp4parser.h264.model.SeqParameterSet: boolean frame_mbs_only_flag>;

        if $z0 == 0 goto label1;

        b0 = 1;

     label1:
        $r3 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $i7 = $r3.<com.googlecode.mp4parser.h264.model.SeqParameterSet: int pic_height_in_map_units_minus1>;

        $i8 = $i7 + 1;

        $i9 = 16 * $i8;

        $i10 = $i9 * b0;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int height> = $i10;

        $r4 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $z1 = $r4.<com.googlecode.mp4parser.h264.model.SeqParameterSet: boolean frame_cropping_flag>;

        if $z1 == 0 goto label4;

        i1 = 0;

        $r5 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $z2 = $r5.<com.googlecode.mp4parser.h264.model.SeqParameterSet: boolean residual_color_transform_flag>;

        if $z2 != 0 goto label2;

        $r13 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $r14 = $r13.<com.googlecode.mp4parser.h264.model.SeqParameterSet: com.googlecode.mp4parser.h264.model.ChromaFormat chroma_format_idc>;

        i1 = virtualinvoke $r14.<com.googlecode.mp4parser.h264.model.ChromaFormat: int getId()>();

     label2:
        i2 = 1;

        i3 = b0;

        if i1 == 0 goto label3;

        $r11 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $r12 = $r11.<com.googlecode.mp4parser.h264.model.SeqParameterSet: com.googlecode.mp4parser.h264.model.ChromaFormat chroma_format_idc>;

        i2 = virtualinvoke $r12.<com.googlecode.mp4parser.h264.model.ChromaFormat: int getSubWidth()>();

        $r10 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $r15 = $r10.<com.googlecode.mp4parser.h264.model.SeqParameterSet: com.googlecode.mp4parser.h264.model.ChromaFormat chroma_format_idc>;

        $i23 = virtualinvoke $r15.<com.googlecode.mp4parser.h264.model.ChromaFormat: int getSubHeight()>();

        i3 = $i23 * b0;

     label3:
        $i16 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int width>;

        $r7 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $i11 = $r7.<com.googlecode.mp4parser.h264.model.SeqParameterSet: int frame_crop_left_offset>;

        $r6 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $i12 = $r6.<com.googlecode.mp4parser.h264.model.SeqParameterSet: int frame_crop_right_offset>;

        $i14 = $i11 + $i12;

        $i13 = i2 * $i14;

        $i15 = $i16 - $i13;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int width> = $i15;

        $i19 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int height>;

        $r9 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $i17 = $r9.<com.googlecode.mp4parser.h264.model.SeqParameterSet: int frame_crop_top_offset>;

        $r8 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $i18 = $r8.<com.googlecode.mp4parser.h264.model.SeqParameterSet: int frame_crop_bottom_offset>;

        $i21 = $i17 + $i18;

        $i22 = i3 * $i21;

        $i20 = $i19 - $i22;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int height> = $i20;

     label4:
        return 1;
    }

    private boolean findNextStartcode() throws java.io.IOException
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        byte[] r1, $r2;
        int i0, $i1, $i10, $i14;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper $r3;
        byte $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b11, $b12, $b13;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        $r2 = newarray (byte)[4];

        $r2[0] = -1;

        $r2[1] = -1;

        $r2[2] = -1;

        $r2[3] = -1;

        r1 = $r2;

     label1:
        $r3 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper reader>;

        $i1 = virtualinvoke $r3.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper: int read()>();

        i0 = $i1;

        if $i1 == -1 goto label3;

        $b2 = r1[1];

        r1[0] = $b2;

        $b3 = r1[2];

        r1[1] = $b3;

        $b4 = r1[3];

        r1[2] = $b4;

        $b5 = (byte) i0;

        r1[3] = $b5;

        $b6 = r1[0];

        if $b6 != 0 goto label2;

        $b11 = r1[1];

        if $b11 != 0 goto label2;

        $b13 = r1[2];

        if $b13 != 0 goto label2;

        $b12 = r1[3];

        if $b12 != 1 goto label2;

        $i14 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int currentScSize>;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int prevScSize> = $i14;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int currentScSize> = 4;

        return 1;

     label2:
        $b7 = r1[0];

        if $b7 != 0 goto label1;

        $b8 = r1[1];

        if $b8 != 0 goto label1;

        $b9 = r1[2];

        if $b9 != 1 goto label1;

        $i10 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int currentScSize>;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int prevScSize> = $i10;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int currentScSize> = 3;

        return 1;

     label3:
        return 0;
    }

    private boolean readSamples() throws java.io.IOException
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        long l0, l2, $l9, $l11, $l12, $l15, $l24;
        java.util.ArrayList r1, $r9;
        int i1, i3, i7, i8, $i10, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        byte[] r2, $r28;
        byte b4, b5, b6, $b14;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions r3;
        java.nio.ByteBuffer r4;
        boolean z0, $z1, $z3, $z6, $z9;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SliceHeader r5, $r34;
        java.io.ByteArrayInputStream r6;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper $r7, $r8, $r10, $r11, $r12, $r26, $r27;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r31, $r33, $r41, $r42, $r43;
        java.util.logging.Logger $r15, $r32;
        int[] $r24;
        java.lang.String $r25, $r38;
        java.lang.Object $r29;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SliceHeader$SliceType $r30, $r37;
        com.googlecode.mp4parser.h264.model.PictureParameterSet $r35;
        com.googlecode.mp4parser.h264.model.SeqParameterSet $r36;
        java.util.List $r39, $r46, $r47, $r53, $r55;
        com.coremedia.iso.boxes.TimeToSampleBox$Entry $r40;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage $r44, $r45, $r49, $r51, $r52;
        com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry $r48;
        com.coremedia.iso.boxes.CompositionTimeToSample$Entry $r50;
        java.lang.Integer $r54;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        $z1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: boolean readSamples>;

        if $z1 == 0 goto label01;

        return 1;

     label01:
        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: boolean readSamples> = 1;

        specialinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: boolean findNextStartcode()>();

        $r7 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper reader>;

        virtualinvoke $r7.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper: void mark()>();

        $r8 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper reader>;

        l0 = virtualinvoke $r8.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper: long getPos()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r1 = $r9;

        i1 = 0;

     label02:
        $z3 = specialinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: boolean findNextStartcode()>();

        if $z3 == 0 goto label14;

        $r10 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper reader>;

        l2 = virtualinvoke $r10.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper: long getPos()>();

        $l12 = l2 - l0;

        $i10 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int prevScSize>;

        $l9 = (long) $i10;

        $l11 = $l12 - $l9;

        i3 = (int) $l11;

        $r11 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper reader>;

        virtualinvoke $r11.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper: void reset()>();

        r2 = newarray (byte)[i3];

        $r12 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper reader>;

        virtualinvoke $r12.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper: long read(byte[])>(r2);

        b4 = r2[0];

        $b14 = b4 >> 5;

        b5 = $b14 & 3;

        b6 = b4 & 31;

        $r15 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.logging.Logger LOG>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found startcode at ");

        $l15 = l0 - 4L;

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l15);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Type: ");

        $r16 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ref idc: ");

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b5);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (size ");

        $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.util.logging.Logger: void fine(java.lang.String)>($r25);

        r3 = specialinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions handleNALUnit(int,int,byte[])>(b5, b6, r2);

        $r24 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$1: int[] $SwitchMap$com$googlecode$mp4parser$authoring$tracks$H264TrackImpl$NALActions>;

        $i16 = virtualinvoke r3.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions: int ordinal()>();

        $i19 = $r24[$i16];

        tableswitch($i19)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label12;
            default: goto label13;
        };

     label03:
        goto label13;

     label04:
        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        goto label13;

     label05:
        i7 = 22;

        i1 = i1 + 1;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        r4 = specialinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.nio.ByteBuffer createSample(java.util.List)>(r1);

        z0 = 0;

        if b6 != 5 goto label06;

        i7 = i7 + 16;

        z0 = 1;

     label06:
        $i20 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $i21 = $i20 - 1;

        $r29 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i21);

        $r28 = (byte[]) $r29;

        r6 = specialinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.io.ByteArrayInputStream cleanBuffer(byte[])>($r28);

        $r34 = new com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SliceHeader;

        $r36 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $r35 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.PictureParameterSet pictureParameterSet>;

        specialinvoke $r34.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SliceHeader: void <init>(java.io.InputStream,com.googlecode.mp4parser.h264.model.SeqParameterSet,com.googlecode.mp4parser.h264.model.PictureParameterSet,boolean)>(r6, $r36, $r35, z0);

        r5 = $r34;

        $r30 = r5.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SliceHeader: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SliceHeader$SliceType slice_type>;

        $r37 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SliceHeader$SliceType: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SliceHeader$SliceType B>;

        if $r30 != $r37 goto label07;

        i7 = i7 + 4;

     label07:
        $r32 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.logging.Logger LOG>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding sample with size ");

        $i22 = virtualinvoke r4.<java.nio.ByteBuffer: int capacity()>();

        $r41 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and header ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r38 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r32.<java.util.logging.Logger: void fine(java.lang.String)>($r38);

        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        $r39 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List samples>;

        interfaceinvoke $r39.<java.util.List: boolean add(java.lang.Object)>(r4);

        $r46 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List stts>;

        $r40 = new com.coremedia.iso.boxes.TimeToSampleBox$Entry;

        $i25 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frametick>;

        $l24 = (long) $i25;

        specialinvoke $r40.<com.coremedia.iso.boxes.TimeToSampleBox$Entry: void <init>(long,long)>(1L, $l24);

        interfaceinvoke $r46.<java.util.List: boolean add(java.lang.Object)>($r40);

        if b6 != 5 goto label08;

        $r55 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List stss>;

        $r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r55.<java.util.List: boolean add(java.lang.Object)>($r54);

     label08:
        $r44 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage seiMessage>;

        $i23 = $r44.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage: int n_frames>;

        if $i23 != 0 goto label09;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frameNrInGop> = 0;

     label09:
        i8 = 0;

        $r45 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage seiMessage>;

        $z6 = $r45.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage: boolean clock_timestamp_flag>;

        if $z6 == 0 goto label10;

        $r51 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage seiMessage>;

        $i32 = $r51.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage: int n_frames>;

        $i28 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frameNrInGop>;

        i8 = $i32 - $i28;

        goto label11;

     label10:
        $r49 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage seiMessage>;

        $z9 = $r49.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage: boolean removal_delay_flag>;

        if $z9 == 0 goto label11;

        $r52 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage seiMessage>;

        $i29 = $r52.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage: int dpb_removal_delay>;

        i8 = $i29 / 2;

     label11:
        $r47 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List ctts>;

        $r50 = new com.coremedia.iso.boxes.CompositionTimeToSample$Entry;

        $i27 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frametick>;

        $i26 = i8 * $i27;

        specialinvoke $r50.<com.coremedia.iso.boxes.CompositionTimeToSample$Entry: void <init>(int,int)>(1, $i26);

        interfaceinvoke $r47.<java.util.List: boolean add(java.lang.Object)>($r50);

        $r53 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.List sdtp>;

        $r48 = new com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry;

        specialinvoke $r48.<com.coremedia.iso.boxes.SampleDependencyTypeBox$Entry: void <init>(int)>(i7);

        interfaceinvoke $r53.<java.util.List: boolean add(java.lang.Object)>($r48);

        $i30 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frameNrInGop>;

        $i31 = $i30 + 1;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frameNrInGop> = $i31;

        goto label13;

     label12:
        return 1;

     label13:
        l0 = l2;

        $r26 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper reader>;

        $i18 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int currentScSize>;

        virtualinvoke $r26.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper: long seek(int)>($i18);

        $r27 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper reader>;

        virtualinvoke $r27.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$ReaderWrapper: void mark()>();

        goto label02;

     label14:
        return 1;
    }

    private java.nio.ByteBuffer createSample(java.util.List)
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        java.util.List r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.ByteBuffer r2;
        java.lang.Object $r4, $r7, $r9;
        byte[] $r5, $r8, $r11, r12;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        r1 := @parameter0: java.util.List;

        i0 = 0;

        i1 = 0;

     label1:
        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        if i1 >= $i3 goto label2;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r11 = (byte[]) $r9;

        $i6 = lengthof $r11;

        $i7 = $i6 + 4;

        i0 = i0 + $i7;

        i1 = i1 + 1;

        goto label1;

     label2:
        r12 = newarray (byte)[i0];

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r12);

        i2 = 0;

     label3:
        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        if i2 >= $i4 goto label4;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r5 = (byte[]) $r4;

        $i5 = lengthof $r5;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i5);

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r8 = (byte[]) $r7;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r8);

        i2 = i2 + 1;

        goto label3;

     label4:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        return r2;
    }

    private java.io.ByteArrayInputStream cleanBuffer(byte[])
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i3, $i6, $i8, $i10;
        java.io.ByteArrayInputStream $r3;
        byte $b4, $b5, $b7, $b9;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        r1 := @parameter0: byte[];

        $i2 = lengthof r1;

        r2 = newarray (byte)[$i2];

        i0 = 0;

        i1 = 0;

     label1:
        $i3 = lengthof r1;

        if i0 >= $i3 goto label3;

        $b4 = r1[i0];

        if $b4 != 0 goto label2;

        $i6 = i0 + 1;

        $b7 = r1[$i6];

        if $b7 != 0 goto label2;

        $i8 = i0 + 2;

        $b9 = r1[$i8];

        if $b9 != 3 goto label2;

        r2[i1] = 0;

        $i10 = i1 + 1;

        r2[$i10] = 0;

        i0 = i0 + 3;

        i1 = i1 + 2;

        goto label1;

     label2:
        $b5 = r1[i0];

        r2[i1] = $b5;

        i0 = i0 + 1;

        i1 = i1 + 1;

        goto label1;

     label3:
        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r2, 0, i1);

        return $r3;
    }

    private com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions handleNALUnit(int, int, byte[]) throws java.io.IOException
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        int i0, i1;
        byte[] r1;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions r2;
        byte b2, $b3;
        java.io.ByteArrayInputStream r3, $r10, $r18, r24;
        java.lang.StringBuilder $r4, $r6, $r7, $r20, $r21, $r22;
        java.util.logging.Logger $r5;
        java.lang.String $r8, $r23;
        com.googlecode.mp4parser.h264.model.PictureParameterSet $r9, $r12;
        java.util.LinkedList $r11, $r14;
        com.googlecode.mp4parser.h264.model.SeqParameterSet $r13, $r15, $r17;
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage $r16;
        java.io.PrintStream $r19;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        tableswitch(i1)
        {
            case 1: goto label01;
            case 2: goto label01;
            case 3: goto label01;
            case 4: goto label01;
            case 5: goto label01;
            case 6: goto label02;
            case 7: goto label04;
            case 8: goto label06;
            case 9: goto label03;
            case 10: goto label08;
            case 11: goto label08;
            default: goto label09;
        };

     label01:
        r2 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions STORE>;

        goto label10;

     label02:
        $r16 = new com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage;

        $r18 = specialinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.io.ByteArrayInputStream cleanBuffer(byte[])>(r1);

        $r17 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        specialinvoke $r16.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage: void <init>(com.googlecode.mp4parser.authoring.tracks.H264TrackImpl,java.io.InputStream,com.googlecode.mp4parser.h264.model.SeqParameterSet)>(r0, $r18, $r17);

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$SEIMessage seiMessage> = $r16;

        r2 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions BUFFER>;

        goto label10;

     label03:
        $b3 = r1[1];

        b2 = $b3 >> 5;

        $r5 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.logging.Logger LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Access unit delimiter type: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.util.logging.Logger: void fine(java.lang.String)>($r8);

        r2 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions BUFFER>;

        goto label10;

     label04:
        $r13 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        if $r13 != null goto label05;

        r3 = specialinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.io.ByteArrayInputStream cleanBuffer(byte[])>(r1);

        virtualinvoke r3.<java.io.ByteArrayInputStream: int read()>();

        $r15 = staticinvoke <com.googlecode.mp4parser.h264.model.SeqParameterSet: com.googlecode.mp4parser.h264.model.SeqParameterSet read(java.io.InputStream)>(r3);

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet> = $r15;

        $r14 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.LinkedList seqParameterSetList>;

        virtualinvoke $r14.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);

        specialinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: void configureFramerate()>();

     label05:
        r2 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions IGNORE>;

        goto label10;

     label06:
        $r9 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.PictureParameterSet pictureParameterSet>;

        if $r9 != null goto label07;

        $r10 = new java.io.ByteArrayInputStream;

        specialinvoke $r10.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        r24 = $r10;

        virtualinvoke r24.<java.io.ByteArrayInputStream: int read()>();

        $r12 = staticinvoke <com.googlecode.mp4parser.h264.model.PictureParameterSet: com.googlecode.mp4parser.h264.model.PictureParameterSet read(java.io.InputStream)>(r24);

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.PictureParameterSet pictureParameterSet> = $r12;

        $r11 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.LinkedList pictureParameterSetList>;

        virtualinvoke $r11.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);

     label07:
        r2 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions IGNORE>;

        goto label10;

     label08:
        r2 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions END>;

        goto label10;

     label09:
        $r19 = <java.lang.System: java.io.PrintStream err>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown NAL unit type: ");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r23);

        r2 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl$NALActions IGNORE>;

     label10:
        return r2;
    }

    private void configureFramerate()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        boolean $z0;
        com.googlecode.mp4parser.h264.model.SeqParameterSet $r1, $r4, $r6;
        com.googlecode.mp4parser.h264.model.VUIParameters $r2, $r5, $r7;
        java.io.PrintStream $r3, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r14;
        java.lang.String $r15;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        $z0 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: boolean determineFrameRate>;

        if $z0 == 0 goto label3;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $r2 = $r1.<com.googlecode.mp4parser.h264.model.SeqParameterSet: com.googlecode.mp4parser.h264.model.VUIParameters vuiParams>;

        if $r2 == null goto label2;

        $r4 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $r5 = $r4.<com.googlecode.mp4parser.h264.model.SeqParameterSet: com.googlecode.mp4parser.h264.model.VUIParameters vuiParams>;

        $i0 = $r5.<com.googlecode.mp4parser.h264.model.VUIParameters: int time_scale>;

        $i1 = $i0 >> 1;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int timescale> = $i1;

        $r6 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.googlecode.mp4parser.h264.model.SeqParameterSet seqParameterSet>;

        $r7 = $r6.<com.googlecode.mp4parser.h264.model.SeqParameterSet: com.googlecode.mp4parser.h264.model.VUIParameters vuiParams>;

        $i2 = $r7.<com.googlecode.mp4parser.h264.model.VUIParameters: int num_units_in_tick>;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frametick> = $i2;

        $i3 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int timescale>;

        if $i3 == 0 goto label1;

        $i6 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frametick>;

        if $i6 != 0 goto label3;

     label1:
        $r9 = <java.lang.System: java.io.PrintStream err>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: vuiParams contain invalid values: time_scale: ");

        $i4 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int timescale>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and frame_tick: ");

        $i5 = r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frametick>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Setting frame rate to 25fps");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r15);

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int timescale> = 90000;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frametick> = 3600;

        goto label3;

     label2:
        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Warning: Can\'t determine frame rate. Guessing 25 fps");

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int timescale> = 90000;

        r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: int frametick> = 3600;

     label3:
        return;
    }

    public void printAccessUnitDelimiter(byte[])
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        byte[] r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.util.logging.Logger $r3;
        byte $b0, $b1;
        java.lang.String $r6;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        r1 := @parameter0: byte[];

        $r3 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.logging.Logger LOG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Access unit delimiter: ");

        $b0 = r1[1];

        $b1 = $b0 >> 5;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.util.logging.Logger: void fine(java.lang.String)>($r6);

        return;
    }

    public volatile com.coremedia.iso.boxes.Box getMediaHeaderBox()
    {
        com.googlecode.mp4parser.authoring.tracks.H264TrackImpl r0;
        com.coremedia.iso.boxes.AbstractMediaHeaderBox $r1;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.H264TrackImpl;

        $r1 = virtualinvoke r0.<com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: com.coremedia.iso.boxes.AbstractMediaHeaderBox getMediaHeaderBox()>();

        return $r1;
    }

    static java.util.logging.Logger access$100()
    {
        java.util.logging.Logger $r0;

        $r0 = <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.logging.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "com/googlecode/mp4parser/authoring/tracks/H264TrackImpl";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.googlecode.mp4parser.authoring.tracks.H264TrackImpl: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
