public final class com.android.gallery3d.filtershow.imageshow.GeometryMathUtils extends java.lang.Object
{
    private static final java.lang.String TAG;
    public static final float SHOW_SCALE;

    private void <init>()
    {
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils r0;

        r0 := @this: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static float clamp(float, float, float)
    {
        float f0, f1, f2, $f3, $f4;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = staticinvoke <java.lang.Math: float min(float,float)>(f0, f2);

        $f4 = staticinvoke <java.lang.Math: float max(float,float)>($f3, f1);

        return $f4;
    }

    public static float[] lineIntersect(float[], float[])
    {
        float[] r0, r1, r2, $r3;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24;
        byte $b0;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        f0 = r0[0];

        f1 = r0[1];

        f2 = r0[2];

        f3 = r0[3];

        f4 = r1[0];

        f5 = r1[1];

        f6 = r1[2];

        f7 = r1[3];

        f8 = f0 - f2;

        f9 = f1 - f3;

        f10 = f2 - f6;

        f11 = f7 - f3;

        f12 = f4 - f6;

        f13 = f5 - f7;

        $f17 = f9 * f12;

        $f16 = f8 * f13;

        f15 = $f17 - $f16;

        $b0 = f15 cmpl 0.0F;

        if $b0 != 0 goto label1;

        return null;

     label1:
        $f18 = f11 * f12;

        $f19 = f13 * f10;

        $f20 = $f18 + $f19;

        f14 = $f20 / f15;

        $r3 = newarray (float)[2];

        $f22 = f14 * f8;

        $f21 = f2 + $f22;

        $r3[0] = $f21;

        $f24 = f14 * f9;

        $f23 = f3 + $f24;

        $r3[1] = $f23;

        r2 = $r3;

        return r2;
    }

    public static float[] shortestVectorFromPointToLine(float[], float[])
    {
        float[] r0, r1, r2, r3, $r4, $r5;
        float f0, f1, f2, f3, f4, f5, f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28;
        byte $b0, $b1;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        f0 = r1[0];

        f1 = r1[2];

        f2 = r1[1];

        f3 = r1[3];

        f4 = f1 - f0;

        f5 = f3 - f2;

        $b0 = f4 cmpl 0.0F;

        if $b0 != 0 goto label1;

        $b1 = f5 cmpl 0.0F;

        if $b1 != 0 goto label1;

        return null;

     label1:
        $f7 = r0[0];

        $f8 = $f7 - f0;

        $f11 = $f8 * f4;

        $f9 = r0[1];

        $f10 = $f9 - f2;

        $f12 = $f10 * f5;

        $f15 = $f11 + $f12;

        $f13 = f4 * f4;

        $f14 = f5 * f5;

        $f16 = $f13 + $f14;

        f6 = $f15 / $f16;

        $r4 = newarray (float)[2];

        $f17 = f1 - f0;

        $f19 = f6 * $f17;

        $f18 = f0 + $f19;

        $r4[0] = $f18;

        $f21 = f3 - f2;

        $f20 = f6 * $f21;

        $f22 = f2 + $f20;

        $r4[1] = $f22;

        r2 = $r4;

        $r5 = newarray (float)[2];

        $f23 = r2[0];

        $f24 = r0[0];

        $f27 = $f23 - $f24;

        $r5[0] = $f27;

        $f25 = r2[1];

        $f28 = r0[1];

        $f26 = $f25 - $f28;

        $r5[1] = $f26;

        r3 = $r5;

        return r3;
    }

    public static float dotProduct(float[], float[])
    {
        float[] r0, r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        $f1 = r0[0];

        $f0 = r1[0];

        $f5 = $f1 * $f0;

        $f3 = r0[1];

        $f2 = r1[1];

        $f4 = $f3 * $f2;

        $f6 = $f5 + $f4;

        return $f6;
    }

    public static float[] normalize(float[])
    {
        float[] r0, r1, $r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        double $d0, $d1;

        r0 := @parameter0: float[];

        $f2 = r0[0];

        $f1 = r0[0];

        $f6 = $f2 * $f1;

        $f4 = r0[1];

        $f3 = r0[1];

        $f5 = $f4 * $f3;

        $f7 = $f6 + $f5;

        $d0 = (double) $f7;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f0 = (float) $d1;

        $r2 = newarray (float)[2];

        $f8 = r0[0];

        $f9 = $f8 / f0;

        $r2[0] = $f9;

        $f10 = r0[1];

        $f11 = $f10 / f0;

        $r2[1] = $f11;

        r1 = $r2;

        return r1;
    }

    public static float scalarProjection(float[], float[])
    {
        float[] r0, r1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        double $d0, $d1;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        $f2 = r1[0];

        $f1 = r1[0];

        $f6 = $f2 * $f1;

        $f4 = r1[1];

        $f3 = r1[1];

        $f5 = $f4 * $f3;

        $f7 = $f6 + $f5;

        $d0 = (double) $f7;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        f0 = (float) $d1;

        $f8 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: float dotProduct(float[],float[])>(r0, r1);

        $f9 = $f8 / f0;

        return $f9;
    }

    public static float[] getVectorFromPoints(float[], float[])
    {
        float[] r0, r1, r2, $r3;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        $r3 = newarray (float)[2];

        $f1 = r1[0];

        $f0 = r0[0];

        $f2 = $f1 - $f0;

        $r3[0] = $f2;

        $f4 = r1[1];

        $f3 = r0[1];

        $f5 = $f4 - $f3;

        $r3[1] = $f5;

        r2 = $r3;

        return r2;
    }

    public static float[] getUnitVectorFromPoints(float[], float[])
    {
        float[] r0, r1, r2, $r3;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17;
        double $d0, $d1;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        $r3 = newarray (float)[2];

        $f2 = r1[0];

        $f1 = r0[0];

        $f3 = $f2 - $f1;

        $r3[0] = $f3;

        $f5 = r1[1];

        $f4 = r0[1];

        $f6 = $f5 - $f4;

        $r3[1] = $f6;

        r2 = $r3;

        $f8 = r2[0];

        $f7 = r2[0];

        $f13 = $f8 * $f7;

        $f10 = r2[1];

        $f9 = r2[1];

        $f11 = $f10 * $f9;

        $f12 = $f13 + $f11;

        $d1 = (double) $f12;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        f0 = (float) $d0;

        $f15 = r2[0];

        $f14 = $f15 / f0;

        r2[0] = $f14;

        $f17 = r2[1];

        $f16 = $f17 / f0;

        r2[1] = $f16;

        return r2;
    }

    public static void scaleRect(android.graphics.RectF, float)
    {
        android.graphics.RectF r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;

        r0 := @parameter0: android.graphics.RectF;

        f0 := @parameter1: float;

        $f1 = r0.<android.graphics.RectF: float left>;

        $f8 = $f1 * f0;

        $f2 = r0.<android.graphics.RectF: float top>;

        $f7 = $f2 * f0;

        $f3 = r0.<android.graphics.RectF: float right>;

        $f6 = $f3 * f0;

        $f4 = r0.<android.graphics.RectF: float bottom>;

        $f5 = $f4 * f0;

        virtualinvoke r0.<android.graphics.RectF: void set(float,float,float,float)>($f8, $f7, $f6, $f5);

        return;
    }

    public static float[] vectorSubtract(float[], float[])
    {
        float[] r0, r1, r2;
        int i0, i1, $i2;
        float $f0, $f1, $f2;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        i0 = lengthof r0;

        $i2 = lengthof r1;

        if i0 == $i2 goto label1;

        return null;

     label1:
        r2 = newarray (float)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $f1 = r0[i1];

        $f0 = r1[i1];

        $f2 = $f1 - $f0;

        r2[i1] = $f2;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r2;
    }

    public static float vectorLength(float[])
    {
        float[] r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        double $d0, $d1;

        r0 := @parameter0: float[];

        $f1 = r0[0];

        $f0 = r0[0];

        $f5 = $f1 * $f0;

        $f3 = r0[1];

        $f2 = r0[1];

        $f4 = $f3 * $f2;

        $f6 = $f5 + $f4;

        $d0 = (double) $f6;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f7 = (float) $d1;

        return $f7;
    }

    public static float scale(float, float, float, float)
    {
        float f0, f1, f2, f3, $f4, $f5, $f6;
        byte $b0, $b1, $b2, $b3;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $b0 = f1 cmpl 0.0F;

        if $b0 == 0 goto label1;

        $b1 = f0 cmpl 0.0F;

        if $b1 == 0 goto label1;

        $b2 = f0 cmpl f2;

        if $b2 != 0 goto label2;

        $b3 = f1 cmpl f3;

        if $b3 != 0 goto label2;

     label1:
        return 1.0F;

     label2:
        $f5 = f2 / f0;

        $f4 = f3 / f1;

        $f6 = staticinvoke <java.lang.Math: float min(float,float)>($f5, $f4);

        return $f6;
    }

    public static android.graphics.Rect roundNearest(android.graphics.RectF)
    {
        android.graphics.RectF r0;
        android.graphics.Rect r1, $r2;
        float $f0, $f1, $f2, $f3;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: android.graphics.RectF;

        $r2 = new android.graphics.Rect;

        $f0 = r0.<android.graphics.RectF: float left>;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $f1 = r0.<android.graphics.RectF: float top>;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $f2 = r0.<android.graphics.RectF: float right>;

        $i2 = staticinvoke <java.lang.Math: int round(float)>($f2);

        $f3 = r0.<android.graphics.RectF: float bottom>;

        $i3 = staticinvoke <java.lang.Math: int round(float)>($f3);

        specialinvoke $r2.<android.graphics.Rect: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        r1 = $r2;

        return r1;
    }

    private static void concatMirrorMatrix(android.graphics.Matrix, com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder)
    {
        android.graphics.Matrix r0;
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r1;
        com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror r2, $r3, $r4, $r5, $r6, $r7;
        com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation $r8, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: android.graphics.Matrix;

        r1 := @parameter1: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder;

        r2 = r1.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror mirror>;

        $r3 = <com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror: com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror HORIZONTAL>;

        if r2 != $r3 goto label2;

        $r10 = r1.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation rotation>;

        $i2 = virtualinvoke $r10.<com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation: int value()>();

        if $i2 == 90 goto label1;

        $r11 = r1.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation rotation>;

        $i3 = virtualinvoke $r11.<com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation: int value()>();

        if $i3 != 270 goto label4;

     label1:
        r2 = <com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror: com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror VERTICAL>;

        goto label4;

     label2:
        $r4 = <com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror: com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror VERTICAL>;

        if r2 != $r4 goto label4;

        $r8 = r1.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation rotation>;

        $i0 = virtualinvoke $r8.<com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation: int value()>();

        if $i0 == 90 goto label3;

        $r9 = r1.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation rotation>;

        $i1 = virtualinvoke $r9.<com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation: int value()>();

        if $i1 != 270 goto label4;

     label3:
        r2 = <com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror: com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror HORIZONTAL>;

     label4:
        $r5 = <com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror: com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror HORIZONTAL>;

        if r2 != $r5 goto label5;

        virtualinvoke r0.<android.graphics.Matrix: boolean postScale(float,float)>(-1.0F, 1.0F);

        goto label7;

     label5:
        $r6 = <com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror: com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror VERTICAL>;

        if r2 != $r6 goto label6;

        virtualinvoke r0.<android.graphics.Matrix: boolean postScale(float,float)>(1.0F, -1.0F);

        goto label7;

     label6:
        $r7 = <com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror: com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror BOTH>;

        if r2 != $r7 goto label7;

        virtualinvoke r0.<android.graphics.Matrix: boolean postScale(float,float)>(1.0F, -1.0F);

        virtualinvoke r0.<android.graphics.Matrix: boolean postScale(float,float)>(-1.0F, 1.0F);

     label7:
        return;
    }

    private static int getRotationForOrientation(int)
    {
        int i0;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 3: goto label2;
            case 6: goto label1;
            case 8: goto label3;
            default: goto label4;
        };

     label1:
        return 90;

     label2:
        return 180;

     label3:
        return 270;

     label4:
        return 0;
    }

    public static com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder unpackGeometry(java.util.Collection)
    {
        java.util.Collection r0;
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r1, $r2;

        r0 := @parameter0: java.util.Collection;

        $r2 = new com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder;

        specialinvoke $r2.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: void <init>()>();

        r1 = $r2;

        staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: void unpackGeometry(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder,java.util.Collection)>(r1, r0);

        return r1;
    }

    public static void unpackGeometry(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder, java.util.Collection)
    {
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        com.android.gallery3d.filtershow.filters.FilterRepresentation r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.String $r5, $r6, $r7, $r8;
        com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation $r9;
        com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror $r10;
        android.graphics.RectF $r11;
        com.android.gallery3d.filtershow.filters.FilterCropRepresentation $r12;
        float $f0;
        com.android.gallery3d.filtershow.filters.FilterStraightenRepresentation $r13;
        com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation $r14;
        com.android.gallery3d.filtershow.filters.FilterRotateRepresentation $r15;

        r0 := @parameter0: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder;

        r1 := @parameter1: java.util.Collection;

        virtualinvoke r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: void wipe()>();

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.gallery3d.filtershow.filters.FilterRepresentation) $r4;

        $z1 = virtualinvoke r3.<com.android.gallery3d.filtershow.filters.FilterRepresentation: boolean isNil()>();

        if $z1 == 0 goto label2;

        goto label1;

     label2:
        $r5 = virtualinvoke r3.<com.android.gallery3d.filtershow.filters.FilterRepresentation: java.lang.String getSerializationName()>();

        if $r5 != "ROTATION" goto label3;

        $r15 = (com.android.gallery3d.filtershow.filters.FilterRotateRepresentation) r3;

        $r14 = virtualinvoke $r15.<com.android.gallery3d.filtershow.filters.FilterRotateRepresentation: com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation getRotation()>();

        r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation rotation> = $r14;

        goto label6;

     label3:
        $r6 = virtualinvoke r3.<com.android.gallery3d.filtershow.filters.FilterRepresentation: java.lang.String getSerializationName()>();

        if $r6 != "STRAIGHTEN" goto label4;

        $r13 = (com.android.gallery3d.filtershow.filters.FilterStraightenRepresentation) r3;

        $f0 = virtualinvoke $r13.<com.android.gallery3d.filtershow.filters.FilterStraightenRepresentation: float getStraighten()>();

        r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: float straighten> = $f0;

        goto label6;

     label4:
        $r7 = virtualinvoke r3.<com.android.gallery3d.filtershow.filters.FilterRepresentation: java.lang.String getSerializationName()>();

        if $r7 != "CROP" goto label5;

        $r12 = (com.android.gallery3d.filtershow.filters.FilterCropRepresentation) r3;

        $r11 = r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: android.graphics.RectF crop>;

        virtualinvoke $r12.<com.android.gallery3d.filtershow.filters.FilterCropRepresentation: void getCrop(android.graphics.RectF)>($r11);

        goto label6;

     label5:
        $r8 = virtualinvoke r3.<com.android.gallery3d.filtershow.filters.FilterRepresentation: java.lang.String getSerializationName()>();

        if $r8 != "MIRROR" goto label6;

        $r9 = (com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation) r3;

        $r10 = virtualinvoke $r9.<com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation: com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror getMirror()>();

        r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: com.android.gallery3d.filtershow.filters.FilterMirrorRepresentation$Mirror mirror> = $r10;

     label6:
        goto label1;

     label7:
        return;
    }

    public static void replaceInstances(java.util.Collection, com.android.gallery3d.filtershow.filters.FilterRepresentation)
    {
        java.util.Collection r0;
        com.android.gallery3d.filtershow.filters.FilterRepresentation r1, r3;
        java.util.Iterator r2;
        boolean $z0, $z1, $z3;
        java.lang.Object $r4;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: com.android.gallery3d.filtershow.filters.FilterRepresentation;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.gallery3d.filtershow.filters.FilterRepresentation) $r4;

        $z3 = staticinvoke <com.android.gallery3d.filtershow.pipeline.ImagePreset: boolean sameSerializationName(com.android.gallery3d.filtershow.filters.FilterRepresentation,com.android.gallery3d.filtershow.filters.FilterRepresentation)>(r1, r3);

        if $z3 == 0 goto label2;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        $z1 = virtualinvoke r1.<com.android.gallery3d.filtershow.filters.FilterRepresentation: boolean isNil()>();

        if $z1 != 0 goto label4;

        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r1);

     label4:
        return;
    }

    public static void initializeHolder(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder, com.android.gallery3d.filtershow.filters.FilterRepresentation)
    {
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r0;
        com.android.gallery3d.filtershow.filters.FilterRepresentation r1;
        java.util.Collection r2;
        com.android.gallery3d.filtershow.imageshow.MasterImage $r3;
        com.android.gallery3d.filtershow.pipeline.ImagePreset $r4;

        r0 := @parameter0: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder;

        r1 := @parameter1: com.android.gallery3d.filtershow.filters.FilterRepresentation;

        $r3 = staticinvoke <com.android.gallery3d.filtershow.imageshow.MasterImage: com.android.gallery3d.filtershow.imageshow.MasterImage getImage()>();

        $r4 = virtualinvoke $r3.<com.android.gallery3d.filtershow.imageshow.MasterImage: com.android.gallery3d.filtershow.pipeline.ImagePreset getPreset()>();

        r2 = virtualinvoke $r4.<com.android.gallery3d.filtershow.pipeline.ImagePreset: java.util.Collection getGeometryFilters()>();

        staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: void replaceInstances(java.util.Collection,com.android.gallery3d.filtershow.filters.FilterRepresentation)>(r2, r1);

        staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: void unpackGeometry(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder,java.util.Collection)>(r0, r2);

        return;
    }

    public static android.graphics.Rect finalGeometryRect(int, int, java.util.Collection)
    {
        int i0, i1;
        java.util.Collection r0;
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r1;
        android.graphics.RectF r2;
        android.graphics.Rect r3, $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.util.Collection;

        r1 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder unpackGeometry(java.util.Collection)>(r0);

        r2 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: android.graphics.RectF getTrueCropRect(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder,int,int)>(r1, i0, i1);

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r3 = $r4;

        virtualinvoke r2.<android.graphics.RectF: void roundOut(android.graphics.Rect)>(r3);

        return r3;
    }

    private static android.graphics.Bitmap applyFullGeometryMatrix(android.graphics.Bitmap, com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder)
    {
        android.graphics.Bitmap r0, r6;
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.graphics.RectF r2;
        android.graphics.Rect r3, $r9;
        android.graphics.Matrix r4;
        com.android.gallery3d.filtershow.cache.BitmapCache r5;
        android.graphics.Canvas r7, $r12;
        android.graphics.Paint r8, $r11;
        com.android.gallery3d.filtershow.imageshow.MasterImage $r10;

        r0 := @parameter0: android.graphics.Bitmap;

        r1 := @parameter1: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder;

        i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        r2 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: android.graphics.RectF getTrueCropRect(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder,int,int)>(r1, i0, i1);

        $r9 = new android.graphics.Rect;

        specialinvoke $r9.<android.graphics.Rect: void <init>()>();

        r3 = $r9;

        virtualinvoke r2.<android.graphics.RectF: void roundOut(android.graphics.Rect)>(r3);

        $i3 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        $i2 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        r4 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: android.graphics.Matrix getCropSelectionToScreenMatrix(android.graphics.RectF,com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder,int,int,int,int)>(null, r1, i0, i1, $i3, $i2);

        $r10 = staticinvoke <com.android.gallery3d.filtershow.imageshow.MasterImage: com.android.gallery3d.filtershow.imageshow.MasterImage getImage()>();

        r5 = virtualinvoke $r10.<com.android.gallery3d.filtershow.imageshow.MasterImage: com.android.gallery3d.filtershow.cache.BitmapCache getBitmapCache()>();

        $i4 = virtualinvoke r3.<android.graphics.Rect: int width()>();

        $i5 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        r6 = virtualinvoke r5.<com.android.gallery3d.filtershow.cache.BitmapCache: android.graphics.Bitmap getBitmap(int,int,int)>($i4, $i5, 7);

        $r12 = new android.graphics.Canvas;

        specialinvoke $r12.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r6);

        r7 = $r12;

        $r11 = new android.graphics.Paint;

        specialinvoke $r11.<android.graphics.Paint: void <init>()>();

        r8 = $r11;

        virtualinvoke r8.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        virtualinvoke r8.<android.graphics.Paint: void setFilterBitmap(boolean)>(1);

        virtualinvoke r8.<android.graphics.Paint: void setDither(boolean)>(1);

        virtualinvoke r7.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r0, r4, r8);

        return r6;
    }

    public static android.graphics.Matrix getImageToScreenMatrix(java.util.Collection, boolean, android.graphics.Rect, float, float)
    {
        java.util.Collection r0;
        boolean z0;
        android.graphics.Rect r1;
        float f0, f1, $f2, $f3;
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r2;
        int $i0, $i1;
        android.graphics.Matrix $r3;

        r0 := @parameter0: java.util.Collection;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.graphics.Rect;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r2 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder unpackGeometry(java.util.Collection)>(r0);

        $i0 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $f2 = (float) $i0;

        $i1 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $f3 = (float) $i1;

        $r3 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: android.graphics.Matrix getOriginalToScreen(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder,boolean,float,float,float,float)>(r2, z0, $f2, $f3, f0, f1);

        return $r3;
    }

    public static android.graphics.Matrix getPartialToScreenMatrix(java.util.Collection, android.graphics.Rect, float, float, float, float)
    {
        java.util.Collection r0;
        android.graphics.Rect r1;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, f24;
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r2;
        android.graphics.RectF r3, $r5;
        int i0, $i1, $i2, $i3, $i6;
        android.graphics.Matrix r4, $r7;
        com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation $r6;
        byte $b4, $b5;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: android.graphics.Rect;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f3 := @parameter5: float;

        r2 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder unpackGeometry(java.util.Collection)>(r0);

        $r5 = new android.graphics.RectF;

        $i1 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $f11 = (float) $i1;

        $i2 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $f12 = (float) $i2;

        specialinvoke $r5.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f11, $f12);

        r3 = $r5;

        f4 = r2.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: float straighten>;

        $r6 = r2.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation rotation>;

        i0 = virtualinvoke $r6.<com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation: int value()>();

        staticinvoke <com.android.gallery3d.filtershow.imageshow.ImageStraighten: void getUntranslatedStraightenCropBounds(android.graphics.RectF,float)>(r3, f4);

        $f13 = f0 - f2;

        f5 = $f13 / 2.0F;

        $f14 = f1 - f3;

        f6 = $f14 / 2.0F;

        $r7 = new android.graphics.Matrix;

        specialinvoke $r7.<android.graphics.Matrix: void <init>()>();

        r4 = $r7;

        virtualinvoke r4.<android.graphics.Matrix: boolean postTranslate(float,float)>(f5, f6);

        $i3 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $f17 = (float) $i3;

        $f18 = virtualinvoke r3.<android.graphics.RectF: float width()>();

        f7 = $f17 / $f18;

        $f15 = virtualinvoke r3.<android.graphics.RectF: float width()>();

        $f16 = virtualinvoke r3.<android.graphics.RectF: float height()>();

        $b4 = $f15 cmpg $f16;

        if $b4 >= 0 goto label1;

        $i6 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $f22 = (float) $i6;

        $f23 = virtualinvoke r3.<android.graphics.RectF: float height()>();

        f7 = $f22 / $f23;

     label1:
        f8 = f0 / f2;

        $b5 = f0 cmpg f1;

        if $b5 >= 0 goto label2;

        f8 = f1 / f3;

     label2:
        f24 = f8 * f7;

        f9 = f0 / 2.0F;

        f10 = f1 / 2.0F;

        virtualinvoke r4.<android.graphics.Matrix: boolean postScale(float,float,float,float)>(f24, f24, f9, f10);

        virtualinvoke r4.<android.graphics.Matrix: boolean postRotate(float,float,float)>(f4, f9, f10);

        $f21 = (float) i0;

        virtualinvoke r4.<android.graphics.Matrix: boolean postRotate(float,float,float)>($f21, f9, f10);

        $f20 = neg f9;

        $f19 = neg f10;

        virtualinvoke r4.<android.graphics.Matrix: boolean postTranslate(float,float)>($f20, $f19);

        staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: void concatMirrorMatrix(android.graphics.Matrix,com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder)>(r4, r2);

        virtualinvoke r4.<android.graphics.Matrix: boolean postTranslate(float,float)>(f9, f10);

        return r4;
    }

    public static android.graphics.Matrix getOriginalToScreen(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder, boolean, float, float, float, float)
    {
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r0;
        boolean z0;
        float f0, f1, f2, f3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation r1, $r4;
        android.graphics.Matrix r2;
        com.android.gallery3d.filtershow.imageshow.MasterImage $r3;

        r0 := @parameter0: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder;

        z0 := @parameter1: boolean;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f3 := @parameter5: float;

        $r3 = staticinvoke <com.android.gallery3d.filtershow.imageshow.MasterImage: com.android.gallery3d.filtershow.imageshow.MasterImage getImage()>();

        i0 = virtualinvoke $r3.<com.android.gallery3d.filtershow.imageshow.MasterImage: int getZoomOrientation()>();

        i1 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: int getRotationForOrientation(int)>(i0);

        r1 = r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation rotation>;

        $i2 = virtualinvoke r1.<com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation: int value()>();

        $i3 = i1 + $i2;

        i8 = $i3 % 360;

        $r4 = staticinvoke <com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation: com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation fromValue(int)>(i8);

        r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation rotation> = $r4;

        $i6 = (int) f0;

        $i7 = (int) f1;

        $i4 = (int) f2;

        $i5 = (int) f3;

        r2 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: android.graphics.Matrix getCropSelectionToScreenMatrix(android.graphics.RectF,com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder,int,int,int,int)>(null, r0, $i6, $i7, $i4, $i5);

        r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation rotation> = r1;

        return r2;
    }

    public static android.graphics.Bitmap applyGeometryRepresentations(java.util.Collection, android.graphics.Bitmap)
    {
        java.util.Collection r0;
        android.graphics.Bitmap r1, r3;
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r2;
        com.android.gallery3d.filtershow.cache.BitmapCache r4;
        boolean $z0;
        com.android.gallery3d.filtershow.imageshow.MasterImage $r5;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder unpackGeometry(java.util.Collection)>(r0);

        r3 = r1;

        $z0 = virtualinvoke r2.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: boolean isNil()>();

        if $z0 != 0 goto label1;

        r3 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: android.graphics.Bitmap applyFullGeometryMatrix(android.graphics.Bitmap,com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder)>(r3, r2);

        if r3 == r1 goto label1;

        $r5 = staticinvoke <com.android.gallery3d.filtershow.imageshow.MasterImage: com.android.gallery3d.filtershow.imageshow.MasterImage getImage()>();

        r4 = virtualinvoke $r5.<com.android.gallery3d.filtershow.imageshow.MasterImage: com.android.gallery3d.filtershow.cache.BitmapCache getBitmapCache()>();

        virtualinvoke r4.<com.android.gallery3d.filtershow.cache.BitmapCache: boolean cache(android.graphics.Bitmap)>(r1);

     label1:
        return r3;
    }

    public static android.graphics.RectF drawTransformedCropped(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder, android.graphics.Canvas, android.graphics.Bitmap, int, int)
    {
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r0;
        android.graphics.Canvas r1;
        android.graphics.Bitmap r2;
        int i0, i1, $i2, $i3;
        android.graphics.RectF r3, $r6;
        android.graphics.Matrix r4;
        android.graphics.Paint r5, $r7;

        r0 := @parameter0: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder;

        r1 := @parameter1: android.graphics.Canvas;

        r2 := @parameter2: android.graphics.Bitmap;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        if r2 != null goto label1;

        return null;

     label1:
        $r6 = new android.graphics.RectF;

        specialinvoke $r6.<android.graphics.RectF: void <init>()>();

        r3 = $r6;

        $i2 = virtualinvoke r2.<android.graphics.Bitmap: int getWidth()>();

        $i3 = virtualinvoke r2.<android.graphics.Bitmap: int getHeight()>();

        r4 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: android.graphics.Matrix getCropSelectionToScreenMatrix(android.graphics.RectF,com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder,int,int,int,int)>(r3, r0, $i2, $i3, i0, i1);

        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(android.graphics.RectF)>(r3);

        $r7 = new android.graphics.Paint;

        specialinvoke $r7.<android.graphics.Paint: void <init>()>();

        r5 = $r7;

        virtualinvoke r5.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r2, r4, r5);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

        return r3;
    }

    public static boolean needsDimensionSwap(com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation)
    {
        com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @parameter0: com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation;

        $r1 = <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$1: int[] $SwitchMap$com$android$gallery3d$filtershow$filters$FilterRotateRepresentation$Rotation>;

        $i0 = virtualinvoke r0.<com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    private static android.graphics.Matrix getFullGeometryMatrix(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder, int, int)
    {
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r0;
        int i0, i1, $i2;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        android.graphics.Matrix r1, $r2;
        com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation $r3;

        r0 := @parameter0: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $f2 = (float) i0;

        f0 = $f2 / 2.0F;

        $f3 = (float) i1;

        f1 = $f3 / 2.0F;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        r1 = $r2;

        $f5 = neg f0;

        $f4 = neg f1;

        virtualinvoke r1.<android.graphics.Matrix: void setTranslate(float,float)>($f5, $f4);

        $f6 = r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: float straighten>;

        $r3 = r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation rotation>;

        $i2 = virtualinvoke $r3.<com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation: int value()>();

        $f7 = (float) $i2;

        $f8 = $f6 + $f7;

        virtualinvoke r1.<android.graphics.Matrix: boolean postRotate(float)>($f8);

        staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: void concatMirrorMatrix(android.graphics.Matrix,com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder)>(r1, r0);

        return r1;
    }

    public static android.graphics.Matrix getFullGeometryToScreenMatrix(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder, int, int, int, int)
    {
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r0;
        int i0, i1, i2, i3, i4, i5;
        float f0, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, f16;
        android.graphics.Matrix r1;
        com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation $r2;
        boolean $z0;

        r0 := @parameter0: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 = i1;

        i5 = i0;

        $r2 = r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation rotation>;

        $z0 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: boolean needsDimensionSwap(com.android.gallery3d.filtershow.filters.FilterRotateRepresentation$Rotation)>($r2);

        if $z0 == 0 goto label1;

        i4 = i0;

        i5 = i1;

     label1:
        $f5 = (float) i5;

        $f4 = (float) i4;

        $f3 = (float) i2;

        $f2 = (float) i3;

        f0 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: float scale(float,float,float,float)>($f5, $f4, $f3, $f2);

        f16 = f0 * 0.9F;

        $f8 = (float) i2;

        $f6 = (float) i0;

        $f11 = $f8 / $f6;

        $f10 = (float) i3;

        $f7 = (float) i1;

        $f9 = $f10 / $f7;

        staticinvoke <java.lang.Math: float min(float,float)>($f11, $f9);

        r1 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: android.graphics.Matrix getFullGeometryMatrix(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder,int,int)>(r0, i0, i1);

        virtualinvoke r1.<android.graphics.Matrix: boolean postScale(float,float)>(f16, f16);

        $f13 = (float) i2;

        $f14 = $f13 / 2.0F;

        $f12 = (float) i3;

        $f15 = $f12 / 2.0F;

        virtualinvoke r1.<android.graphics.Matrix: boolean postTranslate(float,float)>($f14, $f15);

        return r1;
    }

    public static android.graphics.RectF getTrueCropRect(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder, int, int)
    {
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r0;
        int i0, i1;
        android.graphics.RectF r1, $r3, $r4;
        float f0;
        android.graphics.Matrix r2;

        r0 := @parameter0: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = new android.graphics.RectF;

        $r4 = r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: android.graphics.RectF crop>;

        specialinvoke $r3.<android.graphics.RectF: void <init>(android.graphics.RectF)>($r4);

        r1 = $r3;

        staticinvoke <com.android.gallery3d.filtershow.filters.FilterCropRepresentation: void findScaledCrop(android.graphics.RectF,int,int)>(r1, i0, i1);

        f0 = r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: float straighten>;

        r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: float straighten> = 0.0F;

        r2 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: android.graphics.Matrix getFullGeometryMatrix(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder,int,int)>(r0, i0, i1);

        r0.<com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder: float straighten> = f0;

        virtualinvoke r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r1);

        return r1;
    }

    public static android.graphics.Matrix getCropSelectionToScreenMatrix(android.graphics.RectF, com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder, int, int, int, int)
    {
        android.graphics.RectF r0, r3;
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r1;
        int i0, i1, i2, i3;
        android.graphics.Matrix r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20;

        r0 := @parameter0: android.graphics.RectF;

        r1 := @parameter1: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r2 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: android.graphics.Matrix getFullGeometryMatrix(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder,int,int)>(r1, i0, i1);

        r3 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: android.graphics.RectF getTrueCropRect(com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder,int,int)>(r1, i0, i1);

        $f1 = virtualinvoke r3.<android.graphics.RectF: float width()>();

        $f2 = virtualinvoke r3.<android.graphics.RectF: float height()>();

        $f4 = (float) i2;

        $f3 = (float) i3;

        f0 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: float scale(float,float,float,float)>($f1, $f2, $f4, $f3);

        virtualinvoke r2.<android.graphics.Matrix: boolean postScale(float,float)>(f0, f0);

        staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: void scaleRect(android.graphics.RectF,float)>(r3, f0);

        $f5 = (float) i2;

        $f7 = $f5 / 2.0F;

        $f6 = virtualinvoke r3.<android.graphics.RectF: float centerX()>();

        $f8 = $f7 - $f6;

        $f9 = (float) i3;

        $f11 = $f9 / 2.0F;

        $f10 = virtualinvoke r3.<android.graphics.RectF: float centerY()>();

        $f12 = $f11 - $f10;

        virtualinvoke r2.<android.graphics.Matrix: boolean postTranslate(float,float)>($f8, $f12);

        if r0 == null goto label1;

        $f14 = (float) i2;

        $f13 = $f14 / 2.0F;

        $f16 = virtualinvoke r3.<android.graphics.RectF: float centerX()>();

        $f18 = $f13 - $f16;

        $f15 = (float) i3;

        $f17 = $f15 / 2.0F;

        $f19 = virtualinvoke r3.<android.graphics.RectF: float centerY()>();

        $f20 = $f17 - $f19;

        virtualinvoke r3.<android.graphics.RectF: void offset(float,float)>($f18, $f20);

        virtualinvoke r0.<android.graphics.RectF: void set(android.graphics.RectF)>(r3);

     label1:
        return r2;
    }

    public static android.graphics.Matrix getCropSelectionToScreenMatrix(android.graphics.RectF, java.util.Collection, int, int, int, int)
    {
        android.graphics.RectF r0;
        java.util.Collection r1;
        int i0, i1, i2, i3;
        com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder r2;
        android.graphics.Matrix $r3;

        r0 := @parameter0: android.graphics.RectF;

        r1 := @parameter1: java.util.Collection;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r2 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder unpackGeometry(java.util.Collection)>(r1);

        $r3 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: android.graphics.Matrix getCropSelectionToScreenMatrix(android.graphics.RectF,com.android.gallery3d.filtershow.imageshow.GeometryMathUtils$GeometryHolder,int,int,int,int)>(r0, r2, i0, i1, i2, i3);

        return $r3;
    }

    public static void <clinit>()
    {
        <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: float SHOW_SCALE> = 0.9F;

        <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: java.lang.String TAG> = "GeometryMathUtils";

        return;
    }
}
