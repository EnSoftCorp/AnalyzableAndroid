public class com.coremedia.iso.boxes.ChunkOffset64BitBox extends com.coremedia.iso.boxes.ChunkOffsetBox
{
    public static final java.lang.String TYPE;
    private long[] chunkOffsets;

    public void <init>()
    {
        com.coremedia.iso.boxes.ChunkOffset64BitBox r0;

        r0 := @this: com.coremedia.iso.boxes.ChunkOffset64BitBox;

        specialinvoke r0.<com.coremedia.iso.boxes.ChunkOffsetBox: void <init>(java.lang.String)>("co64");

        return;
    }

    public long[] getChunkOffsets()
    {
        com.coremedia.iso.boxes.ChunkOffset64BitBox r0;
        long[] $r1;

        r0 := @this: com.coremedia.iso.boxes.ChunkOffset64BitBox;

        $r1 = r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: long[] chunkOffsets>;

        return $r1;
    }

    protected long getContentSize()
    {
        com.coremedia.iso.boxes.ChunkOffset64BitBox r0;
        long[] $r1;
        int $i0, $i1, $i2;
        long $l3;

        r0 := @this: com.coremedia.iso.boxes.ChunkOffset64BitBox;

        $r1 = r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: long[] chunkOffsets>;

        $i0 = lengthof $r1;

        $i1 = 8 * $i0;

        $i2 = 8 + $i1;

        $l3 = (long) $i2;

        return $l3;
    }

    public void _parseDetails(java.nio.ByteBuffer)
    {
        com.coremedia.iso.boxes.ChunkOffset64BitBox r0;
        java.nio.ByteBuffer r1;
        int i0, i1;
        long $l3, $l4;
        long[] $r2, $r3;

        r0 := @this: com.coremedia.iso.boxes.ChunkOffset64BitBox;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: long parseVersionAndFlags(java.nio.ByteBuffer)>(r1);

        $l3 = staticinvoke <com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>(r1);

        i0 = staticinvoke <com.googlecode.mp4parser.util.CastUtils: int l2i(long)>($l3);

        $r2 = newarray (long)[i0];

        r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: long[] chunkOffsets> = $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: long[] chunkOffsets>;

        $l4 = staticinvoke <com.coremedia.iso.IsoTypeReader: long readUInt64(java.nio.ByteBuffer)>(r1);

        $r3[i1] = $l4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void getContent(java.nio.ByteBuffer)
    {
        com.coremedia.iso.boxes.ChunkOffset64BitBox r0;
        java.nio.ByteBuffer r1;
        long[] r2, $r3;
        int i0, i1, $i3;
        long l2, $l4;

        r0 := @this: com.coremedia.iso.boxes.ChunkOffset64BitBox;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: void writeVersionAndFlags(java.nio.ByteBuffer)>(r1);

        $r3 = r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: long[] chunkOffsets>;

        $i3 = lengthof $r3;

        $l4 = (long) $i3;

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>(r1, $l4);

        r2 = r0.<com.coremedia.iso.boxes.ChunkOffset64BitBox: long[] chunkOffsets>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        l2 = r2[i1];

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>(r1, l2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <com.coremedia.iso.boxes.ChunkOffset64BitBox: java.lang.String TYPE> = "co64";

        return;
    }
}
