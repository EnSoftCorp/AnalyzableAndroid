public abstract class com.googlecode.mp4parser.AbstractContainerBox extends com.googlecode.mp4parser.AbstractBox implements com.coremedia.iso.boxes.ContainerBox
{
    private static java.util.logging.Logger LOG;
    protected java.util.List boxes;
    protected com.coremedia.iso.BoxParser boxParser;

    protected long getContentSize()
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;
        long l0, $l1;
        java.util.Iterator r1;
        com.coremedia.iso.boxes.Box r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        l0 = 0L;

        $r3 = r0.<com.googlecode.mp4parser.AbstractContainerBox: java.util.List boxes>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.coremedia.iso.boxes.Box) $r4;

        $l1 = interfaceinvoke r2.<com.coremedia.iso.boxes.Box: long getSize()>();

        l0 = l0 + $l1;

        goto label1;

     label2:
        return l0;
    }

    public void <init>(java.lang.String)
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;
        java.lang.String r1;
        java.util.LinkedList $r2;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.googlecode.mp4parser.AbstractBox: void <init>(java.lang.String)>(r1);

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<com.googlecode.mp4parser.AbstractContainerBox: java.util.List boxes> = $r2;

        return;
    }

    public java.util.List getBoxes()
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;
        java.util.List $r1, $r2;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        $r1 = r0.<com.googlecode.mp4parser.AbstractContainerBox: java.util.List boxes>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public void setBoxes(java.util.List)
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;
        java.util.List r1;
        java.util.LinkedList $r2;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        r1 := @parameter0: java.util.List;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>(java.util.Collection)>(r1);

        r0.<com.googlecode.mp4parser.AbstractContainerBox: java.util.List boxes> = $r2;

        return;
    }

    public java.util.List getBoxes(java.lang.Class)
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;
        java.lang.Class r1;
        java.util.List $r2;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractContainerBox: java.util.List getBoxes(java.lang.Class,boolean)>(r1, 0);

        return $r2;
    }

    public java.util.List getBoxes(java.lang.Class, boolean)
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;
        java.lang.Class r1;
        boolean z0, $z1, $z2, $z3;
        java.util.ArrayList r2, $r5;
        java.util.Iterator r3;
        com.coremedia.iso.boxes.Box r4;
        java.util.List $r6, $r9;
        java.lang.Object $r7;
        com.coremedia.iso.boxes.ContainerBox $r8;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        r1 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(2);

        r2 = $r5;

        $r6 = r0.<com.googlecode.mp4parser.AbstractContainerBox: java.util.List boxes>;

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.coremedia.iso.boxes.Box) $r7;

        $z2 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r4);

        if $z2 == 0 goto label2;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        if z0 == 0 goto label3;

        $z3 = r4 instanceof com.coremedia.iso.boxes.ContainerBox;

        if $z3 == 0 goto label3;

        $r8 = (com.coremedia.iso.boxes.ContainerBox) r4;

        $r9 = interfaceinvoke $r8.<com.coremedia.iso.boxes.ContainerBox: java.util.List getBoxes(java.lang.Class,boolean)>(r1, z0);

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r9);

     label3:
        goto label1;

     label4:
        return r2;
    }

    public void addBox(com.coremedia.iso.boxes.Box)
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;
        com.coremedia.iso.boxes.Box r1;
        java.util.List $r2;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        r1 := @parameter0: com.coremedia.iso.boxes.Box;

        interfaceinvoke r1.<com.coremedia.iso.boxes.Box: void setParent(com.coremedia.iso.boxes.ContainerBox)>(r0);

        $r2 = r0.<com.googlecode.mp4parser.AbstractContainerBox: java.util.List boxes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeBox(com.coremedia.iso.boxes.Box)
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;
        com.coremedia.iso.boxes.Box r1;
        java.util.List $r2;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        r1 := @parameter0: com.coremedia.iso.boxes.Box;

        interfaceinvoke r1.<com.coremedia.iso.boxes.Box: void setParent(com.coremedia.iso.boxes.ContainerBox)>(r0);

        $r2 = r0.<com.googlecode.mp4parser.AbstractContainerBox: java.util.List boxes>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void parse(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer, long, com.coremedia.iso.BoxParser) throws java.io.IOException
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;
        java.nio.channels.ReadableByteChannel r1;
        java.nio.ByteBuffer r2;
        long l0;
        com.coremedia.iso.BoxParser r3;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        r1 := @parameter0: java.nio.channels.ReadableByteChannel;

        r2 := @parameter1: java.nio.ByteBuffer;

        l0 := @parameter2: long;

        r3 := @parameter3: com.coremedia.iso.BoxParser;

        r0.<com.googlecode.mp4parser.AbstractContainerBox: com.coremedia.iso.BoxParser boxParser> = r3;

        specialinvoke r0.<com.googlecode.mp4parser.AbstractBox: void parse(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer,long,com.coremedia.iso.BoxParser)>(r1, r2, l0, r3);

        return;
    }

    public void _parseDetails(java.nio.ByteBuffer)
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;
        java.nio.ByteBuffer r1;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r0.<com.googlecode.mp4parser.AbstractContainerBox: void parseChildBoxes(java.nio.ByteBuffer)>(r1);

        return;
    }

    public java.lang.String toString()
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;
        java.lang.StringBuilder r1, $r2, $r5;
        int i0, $i1;
        java.lang.Class $r3;
        java.lang.String $r4, $r9, $r13;
        java.util.List $r7, $r10;
        java.lang.Object $r11;
        com.coremedia.iso.boxes.Box $r12;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        i0 = 0;

     label1:
        $r7 = r0.<com.googlecode.mp4parser.AbstractContainerBox: java.util.List boxes>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i0 >= $i1 goto label3;

        if i0 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

     label2:
        $r10 = r0.<com.googlecode.mp4parser.AbstractContainerBox: java.util.List boxes>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i0);

        $r12 = (com.coremedia.iso.boxes.Box) $r11;

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        i0 = i0 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public long getNumOfBytesToFirstChild()
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        return 8L;
    }

    protected void getContent(java.nio.ByteBuffer)
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;
        java.nio.ByteBuffer r1;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r0.<com.googlecode.mp4parser.AbstractContainerBox: void writeChildBoxes(java.nio.ByteBuffer)>(r1);

        return;
    }

    protected final void parseChildBoxes(java.nio.ByteBuffer)
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;
        java.nio.ByteBuffer r1, $r3;
        java.io.IOException r2, $r9;
        int $i0, $i1;
        java.util.logging.Logger $r4;
        com.googlecode.mp4parser.util.ByteBufferByteChannel $r5;
        java.util.List $r6;
        com.coremedia.iso.BoxParser $r7;
        com.coremedia.iso.boxes.Box $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        r1 := @parameter0: java.nio.ByteBuffer;

     label1:
        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        if $i0 < 8 goto label2;

        $r6 = r0.<com.googlecode.mp4parser.AbstractContainerBox: java.util.List boxes>;

        $r7 = r0.<com.googlecode.mp4parser.AbstractContainerBox: com.coremedia.iso.BoxParser boxParser>;

        $r5 = new com.googlecode.mp4parser.util.ByteBufferByteChannel;

        specialinvoke $r5.<com.googlecode.mp4parser.util.ByteBufferByteChannel: void <init>(java.nio.ByteBuffer)>(r1);

        $r8 = interfaceinvoke $r7.<com.coremedia.iso.BoxParser: com.coremedia.iso.boxes.Box parseBox(java.nio.channels.ReadableByteChannel,com.coremedia.iso.boxes.ContainerBox)>($r5, r0);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        if $i1 == 0 goto label3;

        $r3 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        virtualinvoke r0.<com.googlecode.mp4parser.AbstractContainerBox: void setDeadBytes(java.nio.ByteBuffer)>($r3);

        $r4 = <com.googlecode.mp4parser.AbstractContainerBox: java.util.logging.Logger LOG>;

        virtualinvoke $r4.<java.util.logging.Logger: void warning(java.lang.String)>("Something\'s wrong with the sizes. There are dead bytes in a container box.");

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r10;

     label5:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    protected final void writeChildBoxes(java.nio.ByteBuffer)
    {
        com.googlecode.mp4parser.AbstractContainerBox r0;
        java.nio.ByteBuffer r1;
        com.googlecode.mp4parser.util.ByteBufferByteChannel r2, $r6;
        java.util.Iterator r3;
        com.coremedia.iso.boxes.Box r4;
        java.io.IOException r5, $r9;
        java.util.List $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: com.googlecode.mp4parser.AbstractContainerBox;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r6 = new com.googlecode.mp4parser.util.ByteBufferByteChannel;

        specialinvoke $r6.<com.googlecode.mp4parser.util.ByteBufferByteChannel: void <init>(java.nio.ByteBuffer)>(r1);

        r2 = $r6;

        $r7 = r0.<com.googlecode.mp4parser.AbstractContainerBox: java.util.List boxes>;

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.coremedia.iso.boxes.Box) $r8;

     label2:
        interfaceinvoke r4.<com.coremedia.iso.boxes.Box: void getBox(java.nio.channels.WritableByteChannel)>(r2);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot happen to me", r5);

        throw $r10;

     label5:
        goto label1;

     label6:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "com/googlecode/mp4parser/AbstractContainerBox";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.googlecode.mp4parser.AbstractContainerBox: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
