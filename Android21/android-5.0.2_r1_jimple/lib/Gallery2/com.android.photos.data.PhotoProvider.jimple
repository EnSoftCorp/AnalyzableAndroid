public class com.android.photos.data.PhotoProvider extends com.android.photos.data.SQLiteContentProvider
{
    private static final java.lang.String TAG;
    protected static final java.lang.String DB_NAME;
    public static final java.lang.String AUTHORITY;
    static final android.net.Uri BASE_CONTENT_URI;
    protected static final java.lang.String WHERE_ID;
    protected static final java.lang.String WHERE_METADATA_ID;
    protected static final java.lang.String SELECT_ALBUM_ID;
    protected static final java.lang.String SELECT_PHOTO_ID;
    protected static final java.lang.String SELECT_PHOTO_COUNT;
    protected static final java.lang.String DELETE_PHOTOS;
    protected static final java.lang.String DELETE_METADATA;
    protected static final java.lang.String SELECT_METADATA_COUNT;
    protected static final java.lang.String WHERE;
    protected static final java.lang.String IN;
    protected static final java.lang.String NESTED_SELECT_START;
    protected static final java.lang.String NESTED_SELECT_END;
    protected static final java.lang.String[] PROJECTION_COUNT;
    private static final java.lang.String[] PROJECTION_MIME_TYPE;
    protected static final java.lang.String[] BASE_COLUMNS_ID;
    protected com.android.photos.data.PhotoProvider$ChangeNotification mNotifier;
    protected static final android.content.UriMatcher sUriMatcher;
    protected static final int MATCH_PHOTO;
    protected static final int MATCH_PHOTO_ID;
    protected static final int MATCH_ALBUM;
    protected static final int MATCH_ALBUM_ID;
    protected static final int MATCH_METADATA;
    protected static final int MATCH_METADATA_ID;
    protected static final int MATCH_ACCOUNT;
    protected static final int MATCH_ACCOUNT_ID;

    public void <init>()
    {
        com.android.photos.data.PhotoProvider r0;

        r0 := @this: com.android.photos.data.PhotoProvider;

        specialinvoke r0.<com.android.photos.data.SQLiteContentProvider: void <init>()>();

        r0.<com.android.photos.data.PhotoProvider: com.android.photos.data.PhotoProvider$ChangeNotification mNotifier> = null;

        return;
    }

    public int deleteInTransaction(android.net.Uri, java.lang.String, java.lang.String[], boolean)
    {
        com.android.photos.data.PhotoProvider r0;
        android.net.Uri r1;
        java.lang.String r2, r4;
        java.lang.String[] r3, r5;
        boolean z0;
        int i0, $i1;

        r0 := @this: com.android.photos.data.PhotoProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        i0 = specialinvoke r0.<com.android.photos.data.PhotoProvider: int matchUri(android.net.Uri)>(r1);

        r4 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String addIdToSelection(int,java.lang.String)>(i0, r2);

        r5 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String[] addIdToSelectionArgs(int,android.net.Uri,java.lang.String[])>(i0, r1, r3);

        $i1 = virtualinvoke r0.<com.android.photos.data.PhotoProvider: int deleteCascade(android.net.Uri,int,java.lang.String,java.lang.String[])>(r1, i0, r4, r5);

        return $i1;
    }

    public java.lang.String getType(android.net.Uri)
    {
        com.android.photos.data.PhotoProvider r0;
        android.net.Uri r1;
        android.database.Cursor r2;
        java.lang.String r3;
        java.lang.String[] $r4;
        boolean $z0;

        r0 := @this: com.android.photos.data.PhotoProvider;

        r1 := @parameter0: android.net.Uri;

        $r4 = <com.android.photos.data.PhotoProvider: java.lang.String[] PROJECTION_MIME_TYPE>;

        r2 = virtualinvoke r0.<com.android.photos.data.PhotoProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r1, $r4, null, null, null);

        r3 = null;

        $z0 = interfaceinvoke r2.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label1;

        r3 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>(0);

     label1:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

        return r3;
    }

    public android.net.Uri insertInTransaction(android.net.Uri, android.content.ContentValues, boolean)
    {
        com.android.photos.data.PhotoProvider r0;
        android.net.Uri r1, r5;
        android.content.ContentValues r2;
        boolean z0;
        int i0;
        java.lang.String r3;
        android.database.sqlite.SQLiteDatabase r4;
        long l1;
        android.database.sqlite.SQLiteOpenHelper $r6;
        byte $b2;

        r0 := @this: com.android.photos.data.PhotoProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        z0 := @parameter2: boolean;

        i0 = specialinvoke r0.<com.android.photos.data.PhotoProvider: int matchUri(android.net.Uri)>(r1);

        staticinvoke <com.android.photos.data.PhotoProvider: void validateMatchTable(int)>(i0);

        r3 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String getTableFromMatch(int,android.net.Uri)>(i0, r1);

        $r6 = virtualinvoke r0.<com.android.photos.data.PhotoProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()>();

        r4 = virtualinvoke $r6.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        r5 = null;

        l1 = virtualinvoke r4.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>(r3, null, r2);

        $b2 = l1 cmp -1L;

        if $b2 == 0 goto label1;

        r5 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>(r1, l1);

        virtualinvoke r0.<com.android.photos.data.PhotoProvider: void postNotifyUri(android.net.Uri)>(r5);

     label1:
        return r5;
    }

    public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        com.android.photos.data.PhotoProvider r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5;
        android.database.Cursor $r6;

        r0 := @this: com.android.photos.data.PhotoProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        $r6 = virtualinvoke r0.<com.android.photos.data.PhotoProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>(r1, r2, r3, r4, r5, null);

        return $r6;
    }

    public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)
    {
        com.android.photos.data.PhotoProvider r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4, r11, r13;
        java.lang.String r3, r5, r7, r12;
        android.os.CancellationSignal r6;
        int i0;
        android.database.Cursor r8;
        android.content.ContentResolver $r9;
        android.content.Context $r10;

        r0 := @this: com.android.photos.data.PhotoProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: android.os.CancellationSignal;

        r11 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String[] replaceCount(java.lang.String[])>(r2);

        i0 = specialinvoke r0.<com.android.photos.data.PhotoProvider: int matchUri(android.net.Uri)>(r1);

        r12 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String addIdToSelection(int,java.lang.String)>(i0, r3);

        r13 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String[] addIdToSelectionArgs(int,android.net.Uri,java.lang.String[])>(i0, r1, r4);

        r7 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String getTableFromMatch(int,android.net.Uri)>(i0, r1);

        r8 = virtualinvoke r0.<com.android.photos.data.PhotoProvider: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>(r7, r11, r12, r13, r5, r6);

        if r8 == null goto label1;

        $r10 = virtualinvoke r0.<com.android.photos.data.PhotoProvider: android.content.Context getContext()>();

        $r9 = virtualinvoke $r10.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        interfaceinvoke r8.<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>($r9, r1);

     label1:
        return r8;
    }

    public int updateInTransaction(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[], boolean)
    {
        com.android.photos.data.PhotoProvider r0;
        android.net.Uri r1;
        android.content.ContentValues r2;
        java.lang.String r3, r6, r8;
        java.lang.String[] r4, r9;
        boolean z0;
        int i0, i1;
        android.database.sqlite.SQLiteDatabase r5;
        android.database.sqlite.SQLiteOpenHelper $r7;

        r0 := @this: com.android.photos.data.PhotoProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        z0 := @parameter4: boolean;

        i0 = specialinvoke r0.<com.android.photos.data.PhotoProvider: int matchUri(android.net.Uri)>(r1);

        $r7 = virtualinvoke r0.<com.android.photos.data.PhotoProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()>();

        r5 = virtualinvoke $r7.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        if i0 != 5 goto label1;

        i1 = specialinvoke r0.<com.android.photos.data.PhotoProvider: int modifyMetadata(android.database.sqlite.SQLiteDatabase,android.content.ContentValues)>(r5, r2);

        goto label2;

     label1:
        r8 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String addIdToSelection(int,java.lang.String)>(i0, r3);

        r9 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String[] addIdToSelectionArgs(int,android.net.Uri,java.lang.String[])>(i0, r1, r4);

        r6 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String getTableFromMatch(int,android.net.Uri)>(i0, r1);

        i1 = virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>(r6, r2, r8, r9);

     label2:
        virtualinvoke r0.<com.android.photos.data.PhotoProvider: void postNotifyUri(android.net.Uri)>(r1);

        return i1;
    }

    public void setMockNotification(com.android.photos.data.PhotoProvider$ChangeNotification)
    {
        com.android.photos.data.PhotoProvider r0;
        com.android.photos.data.PhotoProvider$ChangeNotification r1;

        r0 := @this: com.android.photos.data.PhotoProvider;

        r1 := @parameter0: com.android.photos.data.PhotoProvider$ChangeNotification;

        r0.<com.android.photos.data.PhotoProvider: com.android.photos.data.PhotoProvider$ChangeNotification mNotifier> = r1;

        return;
    }

    protected static java.lang.String addIdToSelection(int, java.lang.String)
    {
        int i0;
        java.lang.String r0, r1, $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        tableswitch(i0)
        {
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label1;
            case 5: goto label2;
            case 6: goto label1;
            default: goto label2;
        };

     label1:
        r1 = "_id = ?";

        goto label3;

     label2:
        return r0;

     label3:
        $r2 = staticinvoke <android.database.DatabaseUtils: java.lang.String concatenateWhere(java.lang.String,java.lang.String)>(r0, r1);

        return $r2;
    }

    protected static java.lang.String[] addIdToSelectionArgs(int, android.net.Uri, java.lang.String[])
    {
        int i0;
        android.net.Uri r0;
        java.lang.String[] r1, r2, $r3, $r7;
        java.util.List $r4;
        java.lang.Object $r5;
        java.lang.String $r6;

        i0 := @parameter0: int;

        r0 := @parameter1: android.net.Uri;

        r1 := @parameter2: java.lang.String[];

        tableswitch(i0)
        {
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label1;
            case 5: goto label2;
            case 6: goto label1;
            default: goto label2;
        };

     label1:
        $r3 = newarray (java.lang.String)[1];

        $r4 = virtualinvoke r0.<android.net.Uri: java.util.List getPathSegments()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(1);

        $r6 = (java.lang.String) $r5;

        $r3[0] = $r6;

        r2 = $r3;

        goto label3;

     label2:
        return r1;

     label3:
        $r7 = staticinvoke <android.database.DatabaseUtils: java.lang.String[] appendSelectionArgs(java.lang.String[],java.lang.String[])>(r1, r2);

        return $r7;
    }

    protected static java.lang.String[] addMetadataKeysToSelectionArgs(java.lang.String[], android.net.Uri)
    {
        java.lang.String[] r0, r3, $r4, $r9;
        android.net.Uri r1;
        java.util.List r2;
        java.lang.Object $r5, $r7;
        java.lang.String $r6, $r8;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: android.net.Uri;

        r2 = virtualinvoke r1.<android.net.Uri: java.util.List getPathSegments()>();

        $r4 = newarray (java.lang.String)[2];

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1);

        $r6 = (java.lang.String) $r5;

        $r4[0] = $r6;

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(2);

        $r8 = (java.lang.String) $r7;

        $r4[1] = $r8;

        r3 = $r4;

        $r9 = staticinvoke <android.database.DatabaseUtils: java.lang.String[] appendSelectionArgs(java.lang.String[],java.lang.String[])>(r0, r3);

        return $r9;
    }

    protected static java.lang.String getTableFromMatch(int, android.net.Uri)
    {
        int i0;
        android.net.Uri r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: android.net.Uri;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label3;
            case 7: goto label4;
            case 8: goto label4;
            default: goto label5;
        };

     label1:
        r1 = "photos";

        goto label6;

     label2:
        r1 = "albums";

        goto label6;

     label3:
        r1 = "metadata";

        goto label6;

     label4:
        r1 = "accounts";

        goto label6;

     label5:
        $r2 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.IllegalArgumentException unknownUri(android.net.Uri)>(r0);

        throw $r2;

     label6:
        return r1;
    }

    public android.database.sqlite.SQLiteOpenHelper getDatabaseHelper(android.content.Context)
    {
        com.android.photos.data.PhotoProvider r0;
        android.content.Context r1;
        com.android.photos.data.PhotoDatabase $r2;

        r0 := @this: com.android.photos.data.PhotoProvider;

        r1 := @parameter0: android.content.Context;

        $r2 = new com.android.photos.data.PhotoDatabase;

        specialinvoke $r2.<com.android.photos.data.PhotoDatabase: void <init>(android.content.Context,java.lang.String)>(r1, "photo.db");

        return $r2;
    }

    private int modifyMetadata(android.database.sqlite.SQLiteDatabase, android.content.ContentValues)
    {
        com.android.photos.data.PhotoProvider r0;
        android.database.sqlite.SQLiteDatabase r1;
        android.content.ContentValues r2;
        int i0;
        java.lang.String[] r3, $r5;
        java.lang.Object $r4;
        byte $b1, $b2;
        java.lang.String $r6, $r7;
        long l3;

        r0 := @this: com.android.photos.data.PhotoProvider;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: android.content.ContentValues;

        $r4 = virtualinvoke r2.<android.content.ContentValues: java.lang.Object get(java.lang.String)>("value");

        if $r4 != null goto label1;

        $r5 = newarray (java.lang.String)[2];

        $r6 = virtualinvoke r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("photo_id");

        $r5[0] = $r6;

        $r7 = virtualinvoke r2.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("key");

        $r5[1] = $r7;

        r3 = $r5;

        i0 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("metadata", "photo_id = ? AND key = ?", r3);

        goto label4;

     label1:
        l3 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>("metadata", null, r2);

        $b1 = l3 cmp -1L;

        if $b1 != 0 goto label2;

        $b2 = 0;

        goto label3;

     label2:
        $b2 = 1;

     label3:
        i0 = $b2;

     label4:
        return i0;
    }

    private int matchUri(android.net.Uri)
    {
        com.android.photos.data.PhotoProvider r0;
        android.net.Uri r1;
        int i0;
        android.content.UriMatcher $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.android.photos.data.PhotoProvider;

        r1 := @parameter0: android.net.Uri;

        $r2 = <com.android.photos.data.PhotoProvider: android.content.UriMatcher sUriMatcher>;

        i0 = virtualinvoke $r2.<android.content.UriMatcher: int match(android.net.Uri)>(r1);

        if i0 != -1 goto label1;

        $r3 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.IllegalArgumentException unknownUri(android.net.Uri)>(r1);

        throw $r3;

     label1:
        return i0;
    }

    protected void notifyChange(android.content.ContentResolver, android.net.Uri, boolean)
    {
        com.android.photos.data.PhotoProvider r0;
        android.content.ContentResolver r1;
        android.net.Uri r2;
        boolean z0;
        com.android.photos.data.PhotoProvider$ChangeNotification $r3, $r4;

        r0 := @this: com.android.photos.data.PhotoProvider;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: android.net.Uri;

        z0 := @parameter2: boolean;

        $r3 = r0.<com.android.photos.data.PhotoProvider: com.android.photos.data.PhotoProvider$ChangeNotification mNotifier>;

        if $r3 == null goto label1;

        $r4 = r0.<com.android.photos.data.PhotoProvider: com.android.photos.data.PhotoProvider$ChangeNotification mNotifier>;

        interfaceinvoke $r4.<com.android.photos.data.PhotoProvider$ChangeNotification: void notifyChange(android.net.Uri,boolean)>(r2, z0);

        goto label2;

     label1:
        specialinvoke r0.<com.android.photos.data.SQLiteContentProvider: void notifyChange(android.content.ContentResolver,android.net.Uri,boolean)>(r1, r2, z0);

     label2:
        return;
    }

    protected static java.lang.IllegalArgumentException unknownUri(android.net.Uri)
    {
        android.net.Uri r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @parameter0: android.net.Uri;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown Uri format: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        return $r1;
    }

    protected static java.lang.String nestWhere(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, r3, $r11;
        java.lang.String[] $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r4 = <com.android.photos.data.PhotoProvider: java.lang.String[] BASE_COLUMNS_ID>;

        r3 = staticinvoke <android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(0, r1, $r4, r2, null, null, null, null);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IN ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    protected static java.lang.String metadataSelectionFromPhotos(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String nestWhere(java.lang.String,java.lang.String,java.lang.String)>("photo_id", "photos", r0);

        return $r1;
    }

    protected static java.lang.String photoSelectionFromAlbums(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String nestWhere(java.lang.String,java.lang.String,java.lang.String)>("album_id", "albums", r0);

        return $r1;
    }

    protected static java.lang.String photoSelectionFromAccounts(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String nestWhere(java.lang.String,java.lang.String,java.lang.String)>("account_id", "accounts", r0);

        return $r1;
    }

    protected static java.lang.String albumSelectionFromAccounts(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String nestWhere(java.lang.String,java.lang.String,java.lang.String)>("account_id", "accounts", r0);

        return $r1;
    }

    protected int deleteCascade(android.net.Uri, int, java.lang.String, java.lang.String[])
    {
        com.android.photos.data.PhotoProvider r0;
        android.net.Uri r1, $r6, $r9, $r11, $r13;
        int i0, i1;
        java.lang.String r2, r5, $r7, $r10, $r12, $r14;
        java.lang.String[] r3;
        android.database.sqlite.SQLiteDatabase r4;
        android.database.sqlite.SQLiteOpenHelper $r8;

        r0 := @this: com.android.photos.data.PhotoProvider;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String[];

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label4;
            case 6: goto label4;
            case 7: goto label3;
            case 8: goto label3;
            default: goto label4;
        };

     label1:
        $r6 = <com.android.photos.data.PhotoProvider$Metadata: android.net.Uri CONTENT_URI>;

        $r7 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String metadataSelectionFromPhotos(java.lang.String)>(r2);

        virtualinvoke r0.<com.android.photos.data.PhotoProvider: int deleteCascade(android.net.Uri,int,java.lang.String,java.lang.String[])>($r6, 5, $r7, r3);

        goto label4;

     label2:
        $r13 = <com.android.photos.data.PhotoProvider$Photos: android.net.Uri CONTENT_URI>;

        $r14 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String photoSelectionFromAlbums(java.lang.String)>(r2);

        virtualinvoke r0.<com.android.photos.data.PhotoProvider: int deleteCascade(android.net.Uri,int,java.lang.String,java.lang.String[])>($r13, 1, $r14, r3);

        goto label4;

     label3:
        $r9 = <com.android.photos.data.PhotoProvider$Photos: android.net.Uri CONTENT_URI>;

        $r10 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String photoSelectionFromAccounts(java.lang.String)>(r2);

        virtualinvoke r0.<com.android.photos.data.PhotoProvider: int deleteCascade(android.net.Uri,int,java.lang.String,java.lang.String[])>($r9, 1, $r10, r3);

        $r11 = <com.android.photos.data.PhotoProvider$Albums: android.net.Uri CONTENT_URI>;

        $r12 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String albumSelectionFromAccounts(java.lang.String)>(r2);

        virtualinvoke r0.<com.android.photos.data.PhotoProvider: int deleteCascade(android.net.Uri,int,java.lang.String,java.lang.String[])>($r11, 3, $r12, r3);

     label4:
        $r8 = virtualinvoke r0.<com.android.photos.data.PhotoProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()>();

        r4 = virtualinvoke $r8.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        r5 = staticinvoke <com.android.photos.data.PhotoProvider: java.lang.String getTableFromMatch(int,android.net.Uri)>(i0, r1);

        i1 = virtualinvoke r4.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>(r5, r2, r3);

        if i1 <= 0 goto label5;

        virtualinvoke r0.<com.android.photos.data.PhotoProvider: void postNotifyUri(android.net.Uri)>(r1);

     label5:
        return i1;
    }

    private static void validateMatchTable(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label1;
            default: goto label2;
        };

     label1:
        goto label3;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Operation not allowed on an existing row.");

        throw $r0;

     label3:
        return;
    }

    protected android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)
    {
        com.android.photos.data.PhotoProvider r0;
        java.lang.String r1, r3, r5;
        java.lang.String[] r2, r4;
        android.os.CancellationSignal r6;
        android.database.sqlite.SQLiteDatabase r7;
        android.database.sqlite.SQLiteOpenHelper $r8;
        boolean $z0;
        android.database.Cursor $r9, $r10;

        r0 := @this: com.android.photos.data.PhotoProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: android.os.CancellationSignal;

        $r8 = virtualinvoke r0.<com.android.photos.data.PhotoProvider: android.database.sqlite.SQLiteOpenHelper getDatabaseHelper()>();

        r7 = virtualinvoke $r8.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $z0 = <com.android.gallery3d.common.ApiHelper: boolean HAS_CANCELLATION_SIGNAL>;

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r7.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>(0, r1, r2, r3, r4, null, null, r5, null, r6);

        return $r10;

     label1:
        $r9 = virtualinvoke r7.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4, null, null, r5);

        return $r9;
    }

    protected static java.lang.String[] replaceCount(java.lang.String[])
    {
        java.lang.String[] r0, $r3;
        int $i0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 1 goto label1;

        $r2 = "_count";

        $r1 = r0[0];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r3 = <com.android.photos.data.PhotoProvider: java.lang.String[] PROJECTION_COUNT>;

        return $r3;

     label1:
        return r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        android.net.Uri$Builder $r2, $r3, $r4;
        android.net.Uri $r5;
        java.lang.String[] $r6, $r7, $r8;
        android.content.UriMatcher $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;

        <com.android.photos.data.PhotoProvider: int MATCH_ACCOUNT_ID> = 8;

        <com.android.photos.data.PhotoProvider: int MATCH_ACCOUNT> = 7;

        <com.android.photos.data.PhotoProvider: int MATCH_METADATA_ID> = 6;

        <com.android.photos.data.PhotoProvider: int MATCH_METADATA> = 5;

        <com.android.photos.data.PhotoProvider: int MATCH_ALBUM_ID> = 4;

        <com.android.photos.data.PhotoProvider: int MATCH_ALBUM> = 3;

        <com.android.photos.data.PhotoProvider: int MATCH_PHOTO_ID> = 2;

        <com.android.photos.data.PhotoProvider: int MATCH_PHOTO> = 1;

        <com.android.photos.data.PhotoProvider: java.lang.String NESTED_SELECT_END> = ")";

        <com.android.photos.data.PhotoProvider: java.lang.String NESTED_SELECT_START> = "(";

        <com.android.photos.data.PhotoProvider: java.lang.String IN> = " IN ";

        <com.android.photos.data.PhotoProvider: java.lang.String WHERE> = " WHERE ";

        <com.android.photos.data.PhotoProvider: java.lang.String SELECT_METADATA_COUNT> = "SELECT COUNT(*) FROM metadata";

        <com.android.photos.data.PhotoProvider: java.lang.String DELETE_METADATA> = "DELETE FROM metadata";

        <com.android.photos.data.PhotoProvider: java.lang.String DELETE_PHOTOS> = "DELETE FROM photos";

        <com.android.photos.data.PhotoProvider: java.lang.String SELECT_PHOTO_COUNT> = "SELECT COUNT(*) FROM photos";

        <com.android.photos.data.PhotoProvider: java.lang.String SELECT_PHOTO_ID> = "SELECT _id FROM photos";

        <com.android.photos.data.PhotoProvider: java.lang.String SELECT_ALBUM_ID> = "SELECT _id FROM albums";

        <com.android.photos.data.PhotoProvider: java.lang.String WHERE_METADATA_ID> = "photo_id = ? AND key = ?";

        <com.android.photos.data.PhotoProvider: java.lang.String WHERE_ID> = "_id = ?";

        <com.android.photos.data.PhotoProvider: java.lang.String AUTHORITY> = "com.android.gallery3d.photoprovider";

        <com.android.photos.data.PhotoProvider: java.lang.String DB_NAME> = "photo.db";

        $r0 = class "com/android/photos/data/PhotoProvider";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.photos.data.PhotoProvider: java.lang.String TAG> = $r1;

        $r2 = new android.net.Uri$Builder;

        specialinvoke $r2.<android.net.Uri$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>("com.android.gallery3d.photoprovider");

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri build()>();

        <com.android.photos.data.PhotoProvider: android.net.Uri BASE_CONTENT_URI> = $r5;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "COUNT(*)";

        <com.android.photos.data.PhotoProvider: java.lang.String[] PROJECTION_COUNT> = $r6;

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "mime_type";

        <com.android.photos.data.PhotoProvider: java.lang.String[] PROJECTION_MIME_TYPE> = $r7;

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = "_id";

        <com.android.photos.data.PhotoProvider: java.lang.String[] BASE_COLUMNS_ID> = $r8;

        $r9 = new android.content.UriMatcher;

        specialinvoke $r9.<android.content.UriMatcher: void <init>(int)>(-1);

        <com.android.photos.data.PhotoProvider: android.content.UriMatcher sUriMatcher> = $r9;

        $r10 = <com.android.photos.data.PhotoProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r10.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.android.gallery3d.photoprovider", "photos", 1);

        $r11 = <com.android.photos.data.PhotoProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r11.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.android.gallery3d.photoprovider", "photos/#", 2);

        $r12 = <com.android.photos.data.PhotoProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r12.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.android.gallery3d.photoprovider", "albums", 3);

        $r13 = <com.android.photos.data.PhotoProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r13.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.android.gallery3d.photoprovider", "albums/#", 4);

        $r14 = <com.android.photos.data.PhotoProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r14.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.android.gallery3d.photoprovider", "metadata", 5);

        $r15 = <com.android.photos.data.PhotoProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r15.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.android.gallery3d.photoprovider", "metadata/#", 6);

        $r17 = <com.android.photos.data.PhotoProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r17.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.android.gallery3d.photoprovider", "accounts", 7);

        $r16 = <com.android.photos.data.PhotoProvider: android.content.UriMatcher sUriMatcher>;

        virtualinvoke $r16.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.android.gallery3d.photoprovider", "accounts/#", 8);

        return;
    }
}
