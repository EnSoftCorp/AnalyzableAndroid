class android.support.v8.renderscript.AllocationThunker extends android.support.v8.renderscript.Allocation
{
    android.renderscript.Allocation mN;
    static android.graphics.BitmapFactory$Options mBitmapOptions;

    android.renderscript.Allocation getNObj()
    {
        android.support.v8.renderscript.AllocationThunker r0;
        android.renderscript.Allocation $r1;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        $r1 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        return $r1;
    }

    static android.renderscript.Allocation$MipmapControl convertMipmapControl(android.support.v8.renderscript.Allocation$MipmapControl)
    {
        android.support.v8.renderscript.Allocation$MipmapControl r0;
        int[] $r1;
        int $i0, $i1;
        android.renderscript.Allocation$MipmapControl $r2, $r3, $r4;

        r0 := @parameter0: android.support.v8.renderscript.Allocation$MipmapControl;

        $r1 = <android.support.v8.renderscript.AllocationThunker$1: int[] $SwitchMap$android$support$v8$renderscript$Allocation$MipmapControl>;

        $i0 = virtualinvoke r0.<android.support.v8.renderscript.Allocation$MipmapControl: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $r2 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        return $r2;

     label2:
        $r4 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_FULL>;

        return $r4;

     label3:
        $r3 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_ON_SYNC_TO_TEXTURE>;

        return $r3;

     label4:
        return null;
    }

    public android.support.v8.renderscript.Type getType()
    {
        android.support.v8.renderscript.AllocationThunker r0;
        android.renderscript.Allocation $r1;
        android.renderscript.Type $r2;
        android.support.v8.renderscript.Type $r3;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        $r1 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        $r2 = virtualinvoke $r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r3 = staticinvoke <android.support.v8.renderscript.TypeThunker: android.support.v8.renderscript.Type find(android.renderscript.Type)>($r2);

        return $r3;
    }

    public android.support.v8.renderscript.Element getElement()
    {
        android.support.v8.renderscript.AllocationThunker r0;
        android.support.v8.renderscript.Type $r1;
        android.support.v8.renderscript.Element $r2;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.AllocationThunker: android.support.v8.renderscript.Type getType()>();

        $r2 = virtualinvoke $r1.<android.support.v8.renderscript.Type: android.support.v8.renderscript.Element getElement()>();

        return $r2;
    }

    public int getUsage()
    {
        android.support.v8.renderscript.AllocationThunker r0;
        android.renderscript.RSRuntimeException r1, $r3;
        android.renderscript.Allocation $r2;
        int $i0;
        java.lang.RuntimeException $r4;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

     label1:
        $r2 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        $i0 = virtualinvoke $r2.<android.renderscript.Allocation: int getUsage()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r1);

        throw $r4;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public int getBytesSize()
    {
        android.support.v8.renderscript.AllocationThunker r0;
        android.renderscript.RSRuntimeException r1, $r3;
        android.renderscript.Allocation $r2;
        int $i0;
        java.lang.RuntimeException $r4;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

     label1:
        $r2 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        $i0 = virtualinvoke $r2.<android.renderscript.Allocation: int getBytesSize()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r1);

        throw $r4;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    void <init>(android.support.v8.renderscript.RenderScript, android.support.v8.renderscript.Type, int, android.renderscript.Allocation)
    {
        android.support.v8.renderscript.AllocationThunker r0;
        android.support.v8.renderscript.RenderScript r1;
        android.support.v8.renderscript.Type r2;
        int i0;
        android.renderscript.Allocation r3;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: android.support.v8.renderscript.RenderScript;

        r2 := @parameter1: android.support.v8.renderscript.Type;

        i0 := @parameter2: int;

        r3 := @parameter3: android.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.Allocation: void <init>(int,android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Type,int)>(0, r1, r2, i0);

        r0.<android.support.v8.renderscript.AllocationThunker: android.support.v8.renderscript.Type mType> = r2;

        r0.<android.support.v8.renderscript.AllocationThunker: int mUsage> = i0;

        r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN> = r3;

        return;
    }

    public void syncAll(int)
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0;
        android.renderscript.RSRuntimeException r1, $r3;
        android.renderscript.Allocation $r2;
        java.lang.RuntimeException $r4;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r2.<android.renderscript.Allocation: void syncAll(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r1);

        throw $r4;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void ioSend()
    {
        android.support.v8.renderscript.AllocationThunker r0;
        android.renderscript.RSRuntimeException r1, $r3;
        android.renderscript.Allocation $r2;
        java.lang.RuntimeException $r4;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

     label1:
        $r2 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r2.<android.renderscript.Allocation: void ioSend()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r1);

        throw $r4;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void ioReceive()
    {
        android.support.v8.renderscript.AllocationThunker r0;
        android.renderscript.RSRuntimeException r1, $r3;
        android.renderscript.Allocation $r2;
        java.lang.RuntimeException $r4;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

     label1:
        $r2 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r2.<android.renderscript.Allocation: void ioReceive()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r1);

        throw $r4;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyFrom(android.support.v8.renderscript.BaseObj[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        android.support.v8.renderscript.BaseObj[] r1;
        android.renderscript.BaseObj[] r2;
        int i0, $i1, $i2;
        android.renderscript.Allocation $r3;
        android.support.v8.renderscript.BaseObj $r4;
        android.renderscript.BaseObj $r5;
        android.renderscript.RSRuntimeException $r6, r8;
        java.lang.RuntimeException $r7;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: android.support.v8.renderscript.BaseObj[];

        if r1 != null goto label1;

        return;

     label1:
        $i1 = lengthof r1;

        r2 = newarray (android.renderscript.BaseObj)[$i1];

        i0 = 0;

     label2:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label3;

        $r4 = r1[i0];

        $r5 = virtualinvoke $r4.<android.support.v8.renderscript.BaseObj: android.renderscript.BaseObj getNObj()>();

        r2[i0] = $r5;

        i0 = i0 + 1;

        goto label2;

     label3:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyFrom(android.renderscript.BaseObj[])>(r2);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r8);

        throw $r7;

     label6:
        return;

        catch android.renderscript.RSRuntimeException from label3 to label4 with label5;
    }

    public void copyFromUnchecked(int[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: int[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyFromUnchecked(int[])>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyFromUnchecked(short[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        short[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: short[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyFromUnchecked(short[])>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyFromUnchecked(byte[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        byte[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: byte[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyFromUnchecked(byte[])>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyFromUnchecked(float[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        float[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: float[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyFromUnchecked(float[])>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyFrom(int[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: int[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyFrom(int[])>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyFrom(short[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        short[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: short[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyFrom(short[])>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyFrom(byte[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        byte[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: byte[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyFrom(byte[])>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyFrom(float[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        float[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: float[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyFrom(float[])>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyFrom(android.graphics.Bitmap)
    {
        android.support.v8.renderscript.AllocationThunker r0;
        android.graphics.Bitmap r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: android.graphics.Bitmap;

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyFrom(android.graphics.Bitmap)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyFrom(android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.AllocationThunker r0, r2;
        android.support.v8.renderscript.Allocation r1;
        android.renderscript.RSRuntimeException r3, $r6;
        android.renderscript.Allocation $r4, $r5;
        java.lang.RuntimeException $r7;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 = (android.support.v8.renderscript.AllocationThunker) r1;

     label1:
        $r5 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        $r4 = r2.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r5.<android.renderscript.Allocation: void copyFrom(android.renderscript.Allocation)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r3);

        throw $r7;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void setFromFieldPacker(int, android.support.v8.renderscript.FieldPacker)
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1, i2;
        android.support.v8.renderscript.FieldPacker r1;
        byte[] r2;
        android.renderscript.FieldPacker r3, $r4;
        android.renderscript.Allocation $r5;
        byte $b3;
        android.renderscript.RSRuntimeException $r6, r8;
        java.lang.RuntimeException $r7;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        r1 := @parameter1: android.support.v8.renderscript.FieldPacker;

     label1:
        r2 = virtualinvoke r1.<android.support.v8.renderscript.FieldPacker: byte[] getData()>();

        i1 = virtualinvoke r1.<android.support.v8.renderscript.FieldPacker: int getPos()>();

        $r4 = new android.renderscript.FieldPacker;

        specialinvoke $r4.<android.renderscript.FieldPacker: void <init>(int)>(i1);

        r3 = $r4;

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $b3 = r2[i2];

        virtualinvoke r3.<android.renderscript.FieldPacker: void addI8(byte)>($b3);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r5 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r5.<android.renderscript.Allocation: void setFromFieldPacker(int,android.renderscript.FieldPacker)>(i0, r3);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r8);

        throw $r7;

     label6:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label4 with label5;
    }

    public void setFromFieldPacker(int, int, android.support.v8.renderscript.FieldPacker)
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1, i2, i3;
        android.support.v8.renderscript.FieldPacker r1;
        byte[] r2;
        android.renderscript.FieldPacker r3, $r4;
        android.renderscript.Allocation $r5;
        byte $b4;
        android.renderscript.RSRuntimeException $r6, r8;
        java.lang.RuntimeException $r7;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.support.v8.renderscript.FieldPacker;

     label1:
        r2 = virtualinvoke r1.<android.support.v8.renderscript.FieldPacker: byte[] getData()>();

        i2 = virtualinvoke r1.<android.support.v8.renderscript.FieldPacker: int getPos()>();

        $r4 = new android.renderscript.FieldPacker;

        specialinvoke $r4.<android.renderscript.FieldPacker: void <init>(int)>(i2);

        r3 = $r4;

        i3 = 0;

     label2:
        if i3 >= i2 goto label3;

        $b4 = r2[i3];

        virtualinvoke r3.<android.renderscript.FieldPacker: void addI8(byte)>($b4);

        i3 = i3 + 1;

        goto label2;

     label3:
        $r5 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r5.<android.renderscript.Allocation: void setFromFieldPacker(int,int,android.renderscript.FieldPacker)>(i0, i1, r3);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r8);

        throw $r7;

     label6:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label4 with label5;
    }

    public void generateMipmaps()
    {
        android.support.v8.renderscript.AllocationThunker r0;
        android.renderscript.RSRuntimeException r1, $r3;
        android.renderscript.Allocation $r2;
        java.lang.RuntimeException $r4;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

     label1:
        $r2 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r2.<android.renderscript.Allocation: void generateMipmaps()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r1);

        throw $r4;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy1DRangeFromUnchecked(int, int, int[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1;
        int[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,int[])>(i0, i1, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy1DRangeFromUnchecked(int, int, short[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1;
        short[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: short[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,short[])>(i0, i1, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy1DRangeFromUnchecked(int, int, byte[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1;
        byte[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,byte[])>(i0, i1, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy1DRangeFromUnchecked(int, int, float[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1;
        float[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,float[])>(i0, i1, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy1DRangeFrom(int, int, int[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1;
        int[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copy1DRangeFrom(int,int,int[])>(i0, i1, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy1DRangeFrom(int, int, short[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1;
        short[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: short[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copy1DRangeFrom(int,int,short[])>(i0, i1, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy1DRangeFrom(int, int, byte[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1;
        byte[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copy1DRangeFrom(int,int,byte[])>(i0, i1, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy1DRangeFrom(int, int, float[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1;
        float[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copy1DRangeFrom(int,int,float[])>(i0, i1, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy1DRangeFrom(int, int, android.support.v8.renderscript.Allocation, int)
    {
        android.support.v8.renderscript.AllocationThunker r0, r2;
        int i0, i1, i2;
        android.support.v8.renderscript.Allocation r1;
        android.renderscript.Allocation $r3, $r4;
        android.renderscript.RSRuntimeException $r5, r7;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.support.v8.renderscript.Allocation;

        i2 := @parameter3: int;

     label1:
        r2 = (android.support.v8.renderscript.AllocationThunker) r1;

        $r4 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        $r3 = r2.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r4.<android.renderscript.Allocation: void copy1DRangeFrom(int,int,android.renderscript.Allocation,int)>(i0, i1, $r3, i2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r7);

        throw $r6;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy2DRangeFrom(int, int, int, int, byte[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1, i2, i3;
        byte[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: byte[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,byte[])>(i0, i1, i2, i3, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy2DRangeFrom(int, int, int, int, short[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1, i2, i3;
        short[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: short[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,short[])>(i0, i1, i2, i3, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy2DRangeFrom(int, int, int, int, int[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1, i2, i3;
        int[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: int[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,int[])>(i0, i1, i2, i3, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy2DRangeFrom(int, int, int, int, float[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1, i2, i3;
        float[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: float[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,float[])>(i0, i1, i2, i3, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy2DRangeFrom(int, int, int, int, android.support.v8.renderscript.Allocation, int, int)
    {
        android.support.v8.renderscript.AllocationThunker r0, r2;
        int i0, i1, i2, i3, i4, i5;
        android.support.v8.renderscript.Allocation r1;
        android.renderscript.Allocation $r3, $r4;
        android.renderscript.RSRuntimeException $r5, r7;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.support.v8.renderscript.Allocation;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

     label1:
        r2 = (android.support.v8.renderscript.AllocationThunker) r1;

        $r4 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        $r3 = r2.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r4.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,android.renderscript.Allocation,int,int)>(i0, i1, i2, i3, $r3, i4, i5);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r7);

        throw $r6;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copy2DRangeFrom(int, int, android.graphics.Bitmap)
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int i0, i1;
        android.graphics.Bitmap r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Bitmap;

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,android.graphics.Bitmap)>(i0, i1, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyTo(android.graphics.Bitmap)
    {
        android.support.v8.renderscript.AllocationThunker r0;
        android.graphics.Bitmap r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: android.graphics.Bitmap;

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyTo(android.graphics.Bitmap)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyTo(byte[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        byte[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: byte[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyTo(byte[])>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyTo(short[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        short[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: short[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyTo(short[])>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyTo(int[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        int[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: int[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyTo(int[])>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void copyTo(float[])
    {
        android.support.v8.renderscript.AllocationThunker r0;
        float[] r1;
        android.renderscript.RSRuntimeException r2, $r4;
        android.renderscript.Allocation $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        r1 := @parameter0: float[];

     label1:
        $r3 = r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation mN>;

        virtualinvoke $r3.<android.renderscript.Allocation: void copyTo(float[])>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r5;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public static android.support.v8.renderscript.Allocation createTyped(android.support.v8.renderscript.RenderScript, android.support.v8.renderscript.Type, android.support.v8.renderscript.Allocation$MipmapControl, int)
    {
        android.support.v8.renderscript.RenderScript r0;
        android.support.v8.renderscript.Type r1;
        android.support.v8.renderscript.Allocation$MipmapControl r2;
        int i0;
        android.support.v8.renderscript.RenderScriptThunker r3;
        android.support.v8.renderscript.TypeThunker r4;
        android.renderscript.Allocation r5;
        android.renderscript.RenderScript $r6;
        android.renderscript.Type $r7;
        android.renderscript.Allocation$MipmapControl $r8;
        android.support.v8.renderscript.AllocationThunker $r9;
        android.renderscript.RSRuntimeException $r10, r12;
        java.lang.RuntimeException $r11;

        r0 := @parameter0: android.support.v8.renderscript.RenderScript;

        r1 := @parameter1: android.support.v8.renderscript.Type;

        r2 := @parameter2: android.support.v8.renderscript.Allocation$MipmapControl;

        i0 := @parameter3: int;

        r3 = (android.support.v8.renderscript.RenderScriptThunker) r0;

        r4 = (android.support.v8.renderscript.TypeThunker) r1;

     label1:
        $r6 = r3.<android.support.v8.renderscript.RenderScriptThunker: android.renderscript.RenderScript mN>;

        $r7 = r4.<android.support.v8.renderscript.TypeThunker: android.renderscript.Type mN>;

        $r8 = staticinvoke <android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation$MipmapControl convertMipmapControl(android.support.v8.renderscript.Allocation$MipmapControl)>(r2);

        r5 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,android.renderscript.Allocation$MipmapControl,int)>($r6, $r7, $r8, i0);

        $r9 = new android.support.v8.renderscript.AllocationThunker;

        specialinvoke $r9.<android.support.v8.renderscript.AllocationThunker: void <init>(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Type,int,android.renderscript.Allocation)>(r0, r1, i0, r5);

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

        r12 = $r10;

        $r11 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r12);

        throw $r11;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public static android.support.v8.renderscript.Allocation createFromBitmap(android.support.v8.renderscript.RenderScript, android.graphics.Bitmap, android.support.v8.renderscript.Allocation$MipmapControl, int)
    {
        android.support.v8.renderscript.RenderScript r0;
        android.graphics.Bitmap r1;
        android.support.v8.renderscript.Allocation$MipmapControl r2;
        int i0;
        android.support.v8.renderscript.RenderScriptThunker r3;
        android.renderscript.Allocation r4;
        android.support.v8.renderscript.TypeThunker r5, $r8;
        android.renderscript.RenderScript $r6;
        android.renderscript.Allocation$MipmapControl $r7;
        android.renderscript.Type $r9;
        android.support.v8.renderscript.AllocationThunker $r10;
        android.renderscript.RSRuntimeException $r11, r13;
        java.lang.RuntimeException $r12;

        r0 := @parameter0: android.support.v8.renderscript.RenderScript;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: android.support.v8.renderscript.Allocation$MipmapControl;

        i0 := @parameter3: int;

        r3 = (android.support.v8.renderscript.RenderScriptThunker) r0;

     label1:
        $r6 = r3.<android.support.v8.renderscript.RenderScriptThunker: android.renderscript.RenderScript mN>;

        $r7 = staticinvoke <android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation$MipmapControl convertMipmapControl(android.support.v8.renderscript.Allocation$MipmapControl)>(r2);

        r4 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>($r6, r1, $r7, i0);

        $r8 = new android.support.v8.renderscript.TypeThunker;

        $r9 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        specialinvoke $r8.<android.support.v8.renderscript.TypeThunker: void <init>(android.support.v8.renderscript.RenderScript,android.renderscript.Type)>(r0, $r9);

        r5 = $r8;

        $r10 = new android.support.v8.renderscript.AllocationThunker;

        specialinvoke $r10.<android.support.v8.renderscript.AllocationThunker: void <init>(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Type,int,android.renderscript.Allocation)>(r0, r5, i0, r4);

     label2:
        return $r10;

     label3:
        $r11 := @caughtexception;

        r13 = $r11;

        $r12 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r13);

        throw $r12;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public static android.support.v8.renderscript.Allocation createCubemapFromBitmap(android.support.v8.renderscript.RenderScript, android.graphics.Bitmap, android.support.v8.renderscript.Allocation$MipmapControl, int)
    {
        android.support.v8.renderscript.RenderScript r0;
        android.graphics.Bitmap r1;
        android.support.v8.renderscript.Allocation$MipmapControl r2;
        int i0;
        android.support.v8.renderscript.RenderScriptThunker r3;
        android.renderscript.Allocation r4;
        android.support.v8.renderscript.TypeThunker r5, $r8;
        android.renderscript.RenderScript $r6;
        android.renderscript.Allocation$MipmapControl $r7;
        android.renderscript.Type $r9;
        android.support.v8.renderscript.AllocationThunker $r10;
        android.renderscript.RSRuntimeException $r11, r13;
        java.lang.RuntimeException $r12;

        r0 := @parameter0: android.support.v8.renderscript.RenderScript;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: android.support.v8.renderscript.Allocation$MipmapControl;

        i0 := @parameter3: int;

        r3 = (android.support.v8.renderscript.RenderScriptThunker) r0;

     label1:
        $r6 = r3.<android.support.v8.renderscript.RenderScriptThunker: android.renderscript.RenderScript mN>;

        $r7 = staticinvoke <android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation$MipmapControl convertMipmapControl(android.support.v8.renderscript.Allocation$MipmapControl)>(r2);

        r4 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>($r6, r1, $r7, i0);

        $r8 = new android.support.v8.renderscript.TypeThunker;

        $r9 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        specialinvoke $r8.<android.support.v8.renderscript.TypeThunker: void <init>(android.support.v8.renderscript.RenderScript,android.renderscript.Type)>(r0, $r9);

        r5 = $r8;

        $r10 = new android.support.v8.renderscript.AllocationThunker;

        specialinvoke $r10.<android.support.v8.renderscript.AllocationThunker: void <init>(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Type,int,android.renderscript.Allocation)>(r0, r5, i0, r4);

     label2:
        return $r10;

     label3:
        $r11 := @caughtexception;

        r13 = $r11;

        $r12 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r13);

        throw $r12;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public static android.support.v8.renderscript.Allocation createCubemapFromCubeFaces(android.support.v8.renderscript.RenderScript, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.support.v8.renderscript.Allocation$MipmapControl, int)
    {
        android.support.v8.renderscript.RenderScript r0;
        android.graphics.Bitmap r1, r2, r3, r4, r5, r6;
        android.support.v8.renderscript.Allocation$MipmapControl r7;
        int i0;
        android.support.v8.renderscript.RenderScriptThunker r8;
        android.renderscript.Allocation r9;
        android.support.v8.renderscript.TypeThunker r10, $r13;
        android.renderscript.RenderScript $r11;
        android.renderscript.Allocation$MipmapControl $r12;
        android.support.v8.renderscript.AllocationThunker $r14;
        android.renderscript.Type $r15;
        java.lang.RuntimeException $r16;
        android.renderscript.RSRuntimeException $r17, r18;

        r0 := @parameter0: android.support.v8.renderscript.RenderScript;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: android.graphics.Bitmap;

        r3 := @parameter3: android.graphics.Bitmap;

        r4 := @parameter4: android.graphics.Bitmap;

        r5 := @parameter5: android.graphics.Bitmap;

        r6 := @parameter6: android.graphics.Bitmap;

        r7 := @parameter7: android.support.v8.renderscript.Allocation$MipmapControl;

        i0 := @parameter8: int;

        r8 = (android.support.v8.renderscript.RenderScriptThunker) r0;

     label1:
        $r11 = r8.<android.support.v8.renderscript.RenderScriptThunker: android.renderscript.RenderScript mN>;

        $r12 = staticinvoke <android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation$MipmapControl convertMipmapControl(android.support.v8.renderscript.Allocation$MipmapControl)>(r7);

        r9 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>($r11, r1, r2, r3, r4, r5, r6, $r12, i0);

        $r13 = new android.support.v8.renderscript.TypeThunker;

        $r15 = virtualinvoke r9.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        specialinvoke $r13.<android.support.v8.renderscript.TypeThunker: void <init>(android.support.v8.renderscript.RenderScript,android.renderscript.Type)>(r0, $r15);

        r10 = $r13;

        $r14 = new android.support.v8.renderscript.AllocationThunker;

        specialinvoke $r14.<android.support.v8.renderscript.AllocationThunker: void <init>(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Type,int,android.renderscript.Allocation)>(r0, r10, i0, r9);

     label2:
        return $r14;

     label3:
        $r17 := @caughtexception;

        r18 = $r17;

        $r16 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r18);

        throw $r16;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public static android.support.v8.renderscript.Allocation createFromBitmapResource(android.support.v8.renderscript.RenderScript, android.content.res.Resources, int, android.support.v8.renderscript.Allocation$MipmapControl, int)
    {
        android.support.v8.renderscript.RenderScript r0;
        android.content.res.Resources r1;
        int i0, i1;
        android.support.v8.renderscript.Allocation$MipmapControl r2;
        android.support.v8.renderscript.RenderScriptThunker r3;
        android.renderscript.Allocation r4;
        android.support.v8.renderscript.TypeThunker r5, $r8;
        android.renderscript.RenderScript $r6;
        android.renderscript.Allocation$MipmapControl $r7;
        android.renderscript.Type $r9;
        android.support.v8.renderscript.AllocationThunker $r10;
        android.renderscript.RSRuntimeException $r11, r13;
        java.lang.RuntimeException $r12;

        r0 := @parameter0: android.support.v8.renderscript.RenderScript;

        r1 := @parameter1: android.content.res.Resources;

        i0 := @parameter2: int;

        r2 := @parameter3: android.support.v8.renderscript.Allocation$MipmapControl;

        i1 := @parameter4: int;

        r3 = (android.support.v8.renderscript.RenderScriptThunker) r0;

     label1:
        $r6 = r3.<android.support.v8.renderscript.RenderScriptThunker: android.renderscript.RenderScript mN>;

        $r7 = staticinvoke <android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation$MipmapControl convertMipmapControl(android.support.v8.renderscript.Allocation$MipmapControl)>(r2);

        r4 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)>($r6, r1, i0, $r7, i1);

        $r8 = new android.support.v8.renderscript.TypeThunker;

        $r9 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        specialinvoke $r8.<android.support.v8.renderscript.TypeThunker: void <init>(android.support.v8.renderscript.RenderScript,android.renderscript.Type)>(r0, $r9);

        r5 = $r8;

        $r10 = new android.support.v8.renderscript.AllocationThunker;

        specialinvoke $r10.<android.support.v8.renderscript.AllocationThunker: void <init>(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Type,int,android.renderscript.Allocation)>(r0, r5, i1, r4);

     label2:
        return $r10;

     label3:
        $r11 := @caughtexception;

        r13 = $r11;

        $r12 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r13);

        throw $r12;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public static android.support.v8.renderscript.Allocation createFromString(android.support.v8.renderscript.RenderScript, java.lang.String, int)
    {
        android.support.v8.renderscript.RenderScript r0;
        java.lang.String r1;
        int i0;
        android.support.v8.renderscript.RenderScriptThunker r2;
        android.renderscript.Allocation r3;
        android.support.v8.renderscript.TypeThunker r4, $r6;
        android.renderscript.RenderScript $r5;
        android.renderscript.Type $r7;
        android.support.v8.renderscript.AllocationThunker $r8;
        android.renderscript.RSRuntimeException $r9, r11;
        java.lang.RuntimeException $r10;

        r0 := @parameter0: android.support.v8.renderscript.RenderScript;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 = (android.support.v8.renderscript.RenderScriptThunker) r0;

     label1:
        $r5 = r2.<android.support.v8.renderscript.RenderScriptThunker: android.renderscript.RenderScript mN>;

        r3 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)>($r5, r1, i0);

        $r6 = new android.support.v8.renderscript.TypeThunker;

        $r7 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        specialinvoke $r6.<android.support.v8.renderscript.TypeThunker: void <init>(android.support.v8.renderscript.RenderScript,android.renderscript.Type)>(r0, $r7);

        r4 = $r6;

        $r8 = new android.support.v8.renderscript.AllocationThunker;

        specialinvoke $r8.<android.support.v8.renderscript.AllocationThunker: void <init>(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Type,int,android.renderscript.Allocation)>(r0, r4, i0, r3);

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        r11 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r11);

        throw $r10;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public static android.support.v8.renderscript.Allocation createSized(android.support.v8.renderscript.RenderScript, android.support.v8.renderscript.Element, int, int)
    {
        android.support.v8.renderscript.RenderScript r0;
        android.support.v8.renderscript.Element r1;
        int i0, i1;
        android.support.v8.renderscript.RenderScriptThunker r2;
        android.support.v8.renderscript.ElementThunker r3;
        android.renderscript.Allocation r4;
        android.support.v8.renderscript.TypeThunker r5, $r9;
        android.renderscript.RenderScript $r6;
        android.renderscript.BaseObj $r7;
        android.renderscript.Element $r8;
        android.renderscript.Type $r10;
        android.support.v8.renderscript.AllocationThunker $r11;
        android.renderscript.RSRuntimeException $r12, r14;
        java.lang.RuntimeException $r13;

        r0 := @parameter0: android.support.v8.renderscript.RenderScript;

        r1 := @parameter1: android.support.v8.renderscript.Element;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 = (android.support.v8.renderscript.RenderScriptThunker) r0;

        r3 = (android.support.v8.renderscript.ElementThunker) r1;

     label1:
        $r6 = r2.<android.support.v8.renderscript.RenderScriptThunker: android.renderscript.RenderScript mN>;

        $r7 = virtualinvoke r1.<android.support.v8.renderscript.Element: android.renderscript.BaseObj getNObj()>();

        $r8 = (android.renderscript.Element) $r7;

        r4 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)>($r6, $r8, i0, i1);

        $r9 = new android.support.v8.renderscript.TypeThunker;

        $r10 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        specialinvoke $r9.<android.support.v8.renderscript.TypeThunker: void <init>(android.support.v8.renderscript.RenderScript,android.renderscript.Type)>(r0, $r10);

        r5 = $r9;

        $r11 = new android.support.v8.renderscript.AllocationThunker;

        specialinvoke $r11.<android.support.v8.renderscript.AllocationThunker: void <init>(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Type,int,android.renderscript.Allocation)>(r0, r5, i1, r4);

     label2:
        return $r11;

     label3:
        $r12 := @caughtexception;

        r14 = $r12;

        $r13 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r14);

        throw $r13;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    volatile android.renderscript.BaseObj getNObj()
    {
        android.support.v8.renderscript.AllocationThunker r0;
        android.renderscript.Allocation $r1;

        r0 := @this: android.support.v8.renderscript.AllocationThunker;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        return $r1;
    }

    static void <clinit>()
    {
        android.graphics.BitmapFactory$Options $r0, $r1;

        $r0 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r0.<android.graphics.BitmapFactory$Options: void <init>()>();

        <android.support.v8.renderscript.AllocationThunker: android.graphics.BitmapFactory$Options mBitmapOptions> = $r0;

        $r1 = <android.support.v8.renderscript.AllocationThunker: android.graphics.BitmapFactory$Options mBitmapOptions>;

        $r1.<android.graphics.BitmapFactory$Options: boolean inScaled> = 0;

        return;
    }
}
