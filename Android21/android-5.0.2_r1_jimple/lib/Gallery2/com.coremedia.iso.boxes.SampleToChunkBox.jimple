public class com.coremedia.iso.boxes.SampleToChunkBox extends com.googlecode.mp4parser.AbstractFullBox
{
    java.util.List entries;
    public static final java.lang.String TYPE;

    public void <init>()
    {
        com.coremedia.iso.boxes.SampleToChunkBox r0;
        java.util.List $r1;

        r0 := @this: com.coremedia.iso.boxes.SampleToChunkBox;

        specialinvoke r0.<com.googlecode.mp4parser.AbstractFullBox: void <init>(java.lang.String)>("stsc");

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List entries> = $r1;

        return;
    }

    public java.util.List getEntries()
    {
        com.coremedia.iso.boxes.SampleToChunkBox r0;
        java.util.List $r1;

        r0 := @this: com.coremedia.iso.boxes.SampleToChunkBox;

        $r1 = r0.<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List entries>;

        return $r1;
    }

    public void setEntries(java.util.List)
    {
        com.coremedia.iso.boxes.SampleToChunkBox r0;
        java.util.List r1;

        r0 := @this: com.coremedia.iso.boxes.SampleToChunkBox;

        r1 := @parameter0: java.util.List;

        r0.<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List entries> = r1;

        return;
    }

    protected long getContentSize()
    {
        com.coremedia.iso.boxes.SampleToChunkBox r0;
        java.util.List $r1;
        int $i0, $i1, $i2;
        long $l3;

        r0 := @this: com.coremedia.iso.boxes.SampleToChunkBox;

        $r1 = r0.<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List entries>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 * 12;

        $i2 = $i1 + 8;

        $l3 = (long) $i2;

        return $l3;
    }

    public void _parseDetails(java.nio.ByteBuffer)
    {
        com.coremedia.iso.boxes.SampleToChunkBox r0;
        java.nio.ByteBuffer r1;
        int i0, i1;
        long $l3, $l4, $l5, $l6;
        java.util.ArrayList $r2;
        com.coremedia.iso.boxes.SampleToChunkBox$Entry $r3;
        java.util.List $r4;

        r0 := @this: com.coremedia.iso.boxes.SampleToChunkBox;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r0.<com.coremedia.iso.boxes.SampleToChunkBox: long parseVersionAndFlags(java.nio.ByteBuffer)>(r1);

        $l3 = staticinvoke <com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>(r1);

        i0 = staticinvoke <com.googlecode.mp4parser.util.CastUtils: int l2i(long)>($l3);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List entries> = $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List entries>;

        $r3 = new com.coremedia.iso.boxes.SampleToChunkBox$Entry;

        $l4 = staticinvoke <com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>(r1);

        $l5 = staticinvoke <com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>(r1);

        $l6 = staticinvoke <com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>(r1);

        specialinvoke $r3.<com.coremedia.iso.boxes.SampleToChunkBox$Entry: void <init>(long,long,long)>($l4, $l5, $l6);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void getContent(java.nio.ByteBuffer)
    {
        com.coremedia.iso.boxes.SampleToChunkBox r0;
        java.nio.ByteBuffer r1;
        java.util.Iterator r2;
        com.coremedia.iso.boxes.SampleToChunkBox$Entry r3;
        java.util.List $r4, $r5;
        int $i0;
        long $l1, $l2, $l3, $l4;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: com.coremedia.iso.boxes.SampleToChunkBox;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r0.<com.coremedia.iso.boxes.SampleToChunkBox: void writeVersionAndFlags(java.nio.ByteBuffer)>(r1);

        $r4 = r0.<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List entries>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>(r1, $l1);

        $r5 = r0.<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List entries>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.coremedia.iso.boxes.SampleToChunkBox$Entry) $r6;

        $l2 = virtualinvoke r3.<com.coremedia.iso.boxes.SampleToChunkBox$Entry: long getFirstChunk()>();

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>(r1, $l2);

        $l3 = virtualinvoke r3.<com.coremedia.iso.boxes.SampleToChunkBox$Entry: long getSamplesPerChunk()>();

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>(r1, $l3);

        $l4 = virtualinvoke r3.<com.coremedia.iso.boxes.SampleToChunkBox$Entry: long getSampleDescriptionIndex()>();

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>(r1, $l4);

        goto label1;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        com.coremedia.iso.boxes.SampleToChunkBox r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.util.List $r3;
        int $i0;
        java.lang.String $r6;

        r0 := @this: com.coremedia.iso.boxes.SampleToChunkBox;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SampleToChunkBox[entryCount=");

        $r3 = r0.<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List entries>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public long[] blowup(int)
    {
        com.coremedia.iso.boxes.SampleToChunkBox r0;
        int i0, i1, $i3;
        long[] r1;
        java.util.LinkedList r2, $r5;
        java.util.Iterator r3;
        com.coremedia.iso.boxes.SampleToChunkBox$Entry r4;
        java.util.List $r6;
        java.lang.Object $r7, $r8;
        long $l2, $l4, $l5, $l6;
        byte $b7;

        r0 := @this: com.coremedia.iso.boxes.SampleToChunkBox;

        i0 := @parameter0: int;

        r1 = newarray (long)[i0];

        $r5 = new java.util.LinkedList;

        $r6 = r0.<com.coremedia.iso.boxes.SampleToChunkBox: java.util.List entries>;

        specialinvoke $r5.<java.util.LinkedList: void <init>(java.util.Collection)>($r6);

        r2 = $r5;

        staticinvoke <java.util.Collections: void reverse(java.util.List)>(r2);

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.coremedia.iso.boxes.SampleToChunkBox$Entry) $r7;

        i1 = lengthof r1;

     label1:
        if i1 <= 1 goto label3;

        $i3 = i1 - 1;

        $l4 = virtualinvoke r4.<com.coremedia.iso.boxes.SampleToChunkBox$Entry: long getSamplesPerChunk()>();

        r1[$i3] = $l4;

        $l6 = (long) i1;

        $l5 = virtualinvoke r4.<com.coremedia.iso.boxes.SampleToChunkBox$Entry: long getFirstChunk()>();

        $b7 = $l6 cmp $l5;

        if $b7 != 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.coremedia.iso.boxes.SampleToChunkBox$Entry) $r8;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        $l2 = virtualinvoke r4.<com.coremedia.iso.boxes.SampleToChunkBox$Entry: long getSamplesPerChunk()>();

        r1[0] = $l2;

        return r1;
    }

    public static void <clinit>()
    {
        <com.coremedia.iso.boxes.SampleToChunkBox: java.lang.String TYPE> = "stsc";

        return;
    }
}
