public abstract class com.googlecode.mp4parser.AbstractBox extends java.lang.Object implements com.coremedia.iso.boxes.Box
{
    public static int MEM_MAP_THRESHOLD;
    private static java.util.logging.Logger LOG;
    protected java.lang.String type;
    private byte[] userType;
    private com.coremedia.iso.boxes.ContainerBox parent;
    private java.nio.ByteBuffer content;
    private java.nio.ByteBuffer deadBytes;
    static final boolean $assertionsDisabled;

    protected void <init>(java.lang.String)
    {
        com.googlecode.mp4parser.AbstractBox r0;
        java.lang.String r1;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes> = null;

        r0.<com.googlecode.mp4parser.AbstractBox: java.lang.String type> = r1;

        return;
    }

    protected void <init>(java.lang.String, byte[])
    {
        com.googlecode.mp4parser.AbstractBox r0;
        java.lang.String r1;
        byte[] r2;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes> = null;

        r0.<com.googlecode.mp4parser.AbstractBox: java.lang.String type> = r1;

        r0.<com.googlecode.mp4parser.AbstractBox: byte[] userType> = r2;

        return;
    }

    protected abstract long getContentSize();

    protected abstract void getContent(java.nio.ByteBuffer);

    protected abstract void _parseDetails(java.nio.ByteBuffer);

    public void parse(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer, long, com.coremedia.iso.BoxParser) throws java.io.IOException
    {
        com.googlecode.mp4parser.AbstractBox r0;
        java.nio.channels.ReadableByteChannel r1;
        java.nio.ByteBuffer r2, $r4;
        long l0, $l3, $l5, $l6, $l7;
        com.coremedia.iso.BoxParser r3;
        boolean $z0, $z1, $z2;
        byte $b1, $b4;
        java.lang.AssertionError $r5;
        int $i2;
        java.nio.channels.FileChannel $r6, $r8, $r10, $r11;
        java.nio.channels.FileChannel$MapMode $r7;
        java.nio.MappedByteBuffer $r9;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        r1 := @parameter0: java.nio.channels.ReadableByteChannel;

        r2 := @parameter1: java.nio.ByteBuffer;

        l0 := @parameter2: long;

        r3 := @parameter3: com.coremedia.iso.BoxParser;

        $z0 = r1 instanceof java.nio.channels.FileChannel;

        if $z0 == 0 goto label1;

        $i2 = <com.googlecode.mp4parser.AbstractBox: int MEM_MAP_THRESHOLD>;

        $l3 = (long) $i2;

        $b4 = l0 cmp $l3;

        if $b4 <= 0 goto label1;

        $r8 = (java.nio.channels.FileChannel) r1;

        $r7 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $r6 = (java.nio.channels.FileChannel) r1;

        $l5 = virtualinvoke $r6.<java.nio.channels.FileChannel: long position()>();

        $r9 = virtualinvoke $r8.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r7, $l5, l0);

        r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer content> = $r9;

        $r10 = (java.nio.channels.FileChannel) r1;

        $r11 = (java.nio.channels.FileChannel) r1;

        $l7 = virtualinvoke $r11.<java.nio.channels.FileChannel: long position()>();

        $l6 = $l7 + l0;

        virtualinvoke $r10.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>($l6);

        goto label3;

     label1:
        $z1 = <com.googlecode.mp4parser.AbstractBox: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $b1 = l0 cmp 2147483647L;

        if $b1 < 0 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        $r4 = staticinvoke <com.coremedia.iso.ChannelHelper: java.nio.ByteBuffer readFully(java.nio.channels.ReadableByteChannel,long)>(r1, l0);

        r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer content> = $r4;

     label3:
        $z2 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: boolean isParsed()>();

        if $z2 != 0 goto label4;

        virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: void parseDetails()>();

     label4:
        return;
    }

    public void getBox(java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        com.googlecode.mp4parser.AbstractBox r0;
        java.nio.channels.WritableByteChannel r1;
        java.nio.ByteBuffer r2, $r3, $r4, $r6, $r9, $r10, $r12, $r14;
        long $l0;
        int $i1, $i3;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        r1 := @parameter0: java.nio.channels.WritableByteChannel;

        $l0 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: long getSize()>();

        $i1 = staticinvoke <com.googlecode.mp4parser.util.CastUtils: int l2i(long)>($l0);

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1);

        specialinvoke r0.<com.googlecode.mp4parser.AbstractBox: void getHeader(java.nio.ByteBuffer)>(r2);

        $r3 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer content>;

        if $r3 != null goto label2;

        virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: void getContent(java.nio.ByteBuffer)>(r2);

        $r9 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes>;

        if $r9 == null goto label3;

        $r10 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes>;

        virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

     label1:
        $r12 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes>;

        $i3 = virtualinvoke $r12.<java.nio.ByteBuffer: int remaining()>();

        if $i3 <= 0 goto label3;

        $r14 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>($r14);

        goto label1;

     label2:
        $r4 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer content>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $r6 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer content>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>($r6);

     label3:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        interfaceinvoke r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>(r2);

        return;
    }

    final synchronized void parseDetails()
    {
        com.googlecode.mp4parser.AbstractBox r0;
        java.nio.ByteBuffer r1, $r2, $r5;
        int $i0;
        boolean $z0, $z1;
        java.lang.AssertionError $r4;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        $r2 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer content>;

        if $r2 == null goto label2;

        r1 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer content>;

        r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer content> = null;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: void _parseDetails(java.nio.ByteBuffer)>(r1);

        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        if $i0 <= 0 goto label1;

        $r5 = virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes> = $r5;

     label1:
        $z0 = <com.googlecode.mp4parser.AbstractBox: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<com.googlecode.mp4parser.AbstractBox: boolean verify(java.nio.ByteBuffer)>(r1);

        if $z1 != 0 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        return;
    }

    protected void setDeadBytes(java.nio.ByteBuffer)
    {
        com.googlecode.mp4parser.AbstractBox r0;
        java.nio.ByteBuffer r1;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        r1 := @parameter0: java.nio.ByteBuffer;

        r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes> = r1;

        return;
    }

    public long getSize()
    {
        com.googlecode.mp4parser.AbstractBox r0;
        long l0, $l5, $l8, $l9, l11, l12;
        java.nio.ByteBuffer $r1, $r2, $r5, $r6;
        int $i1, $i3, $i4, $i6;
        byte $b2, $b7, $b10;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        $r1 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer content>;

        if $r1 != null goto label1;

        $l9 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: long getContentSize()>();

        goto label2;

     label1:
        $r2 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer content>;

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int limit()>();

        $l9 = (long) $i1;

     label2:
        l0 = $l9;

        $b2 = l0 cmp 4294967288L;

        if $b2 < 0 goto label3;

        $b10 = 8;

        goto label4;

     label3:
        $b10 = 0;

     label4:
        $i3 = 8 + $b10;

        $r3 = "uuid";

        $r4 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: java.lang.String getType()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label5;

        $b7 = 16;

        goto label6;

     label5:
        $b7 = 0;

     label6:
        $i4 = $i3 + $b7;

        $l5 = (long) $i4;

        l11 = l0 + $l5;

        $r5 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes>;

        if $r5 != null goto label7;

        $i6 = 0;

        goto label8;

     label7:
        $r6 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes>;

        $i6 = virtualinvoke $r6.<java.nio.ByteBuffer: int limit()>();

     label8:
        $l8 = (long) $i6;

        l12 = l11 + $l8;

        return l12;
    }

    public java.lang.String getType()
    {
        com.googlecode.mp4parser.AbstractBox r0;
        java.lang.String $r1;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        $r1 = r0.<com.googlecode.mp4parser.AbstractBox: java.lang.String type>;

        return $r1;
    }

    public byte[] getUserType()
    {
        com.googlecode.mp4parser.AbstractBox r0;
        byte[] $r1;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        $r1 = r0.<com.googlecode.mp4parser.AbstractBox: byte[] userType>;

        return $r1;
    }

    public com.coremedia.iso.boxes.ContainerBox getParent()
    {
        com.googlecode.mp4parser.AbstractBox r0;
        com.coremedia.iso.boxes.ContainerBox $r1;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        $r1 = r0.<com.googlecode.mp4parser.AbstractBox: com.coremedia.iso.boxes.ContainerBox parent>;

        return $r1;
    }

    public void setParent(com.coremedia.iso.boxes.ContainerBox)
    {
        com.googlecode.mp4parser.AbstractBox r0;
        com.coremedia.iso.boxes.ContainerBox r1;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        r1 := @parameter0: com.coremedia.iso.boxes.ContainerBox;

        r0.<com.googlecode.mp4parser.AbstractBox: com.coremedia.iso.boxes.ContainerBox parent> = r1;

        return;
    }

    public com.coremedia.iso.IsoFile getIsoFile()
    {
        com.googlecode.mp4parser.AbstractBox r0;
        com.coremedia.iso.boxes.ContainerBox $r1;
        com.coremedia.iso.IsoFile $r2;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        $r1 = r0.<com.googlecode.mp4parser.AbstractBox: com.coremedia.iso.boxes.ContainerBox parent>;

        $r2 = interfaceinvoke $r1.<com.coremedia.iso.boxes.ContainerBox: com.coremedia.iso.IsoFile getIsoFile()>();

        return $r2;
    }

    public boolean isParsed()
    {
        com.googlecode.mp4parser.AbstractBox r0;
        java.nio.ByteBuffer $r1;
        boolean $z0;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        $r1 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer content>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean verify(java.nio.ByteBuffer)
    {
        com.googlecode.mp4parser.AbstractBox r0;
        java.nio.ByteBuffer r1, r2, $r5, $r7, $r38, $r40, $r42, $r44;
        int i0, i1, i2, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        byte b3, b4;
        byte[] r3, r4;
        long $l5, $l6, $l7;
        java.util.logging.Logger $r9, $r28;
        java.lang.Object[] $r10;
        java.lang.String $r11, $r15, $r21, $r23, $r24, $r30, $r34, $r41;
        java.lang.Byte $r12, $r14;
        java.lang.Integer $r13;
        java.lang.StringBuilder $r16, $r20, $r22, $r25, $r27, $r29, $r31, $r32, $r33, $r35, $r36, $r37;
        java.io.PrintStream $r17, $r26;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        r1 := @parameter0: java.nio.ByteBuffer;

        $l5 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: long getContentSize()>();

        $r5 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes>;

        if $r5 == null goto label1;

        $r40 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes>;

        $i18 = virtualinvoke $r40.<java.nio.ByteBuffer: int limit()>();

        goto label2;

     label1:
        $i18 = 0;

     label2:
        $l6 = (long) $i18;

        $l7 = $l5 + $l6;

        $i8 = staticinvoke <com.googlecode.mp4parser.util.CastUtils: int l2i(long)>($l7);

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i8);

        virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: void getContent(java.nio.ByteBuffer)>(r2);

        $r7 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes>;

        if $r7 == null goto label4;

        $r42 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes>;

        virtualinvoke $r42.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

     label3:
        $r44 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes>;

        $i17 = virtualinvoke $r44.<java.nio.ByteBuffer: int remaining()>();

        if $i17 <= 0 goto label4;

        $r38 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>($r38);

        goto label3;

     label4:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $i9 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $i10 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        if $i9 == $i10 goto label5;

        $r28 = <com.googlecode.mp4parser.AbstractBox: java.util.logging.Logger LOG>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: java.lang.String getType()>();

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": remaining differs ");

        $i15 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs. ");

        $i16 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r41 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r28.<java.util.logging.Logger: void severe(java.lang.String)>($r41);

        return 0;

     label5:
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i12 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        i1 = $i12 - 1;

        $i11 = virtualinvoke r2.<java.nio.ByteBuffer: int limit()>();

        i2 = $i11 - 1;

     label6:
        if i1 < i0 goto label8;

        b3 = virtualinvoke r1.<java.nio.ByteBuffer: byte get(int)>(i1);

        b4 = virtualinvoke r2.<java.nio.ByteBuffer: byte get(int)>(i2);

        if b3 == b4 goto label7;

        $r9 = <com.googlecode.mp4parser.AbstractBox: java.util.logging.Logger LOG>;

        $r10 = newarray (java.lang.Object)[4];

        $r11 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: java.lang.String getType()>();

        $r10[0] = $r11;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r10[1] = $r13;

        $r12 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b3);

        $r10[2] = $r12;

        $r14 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b4);

        $r10[3] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s: buffers differ at %d: %2X/%2X", $r10);

        virtualinvoke $r9.<java.util.logging.Logger: void severe(java.lang.String)>($r15);

        $i13 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        r3 = newarray (byte)[$i13];

        $i14 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        r4 = newarray (byte)[$i14];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r3);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r4);

        $r17 = <java.lang.System: java.io.PrintStream err>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("original      : ");

        $r23 = staticinvoke <com.coremedia.iso.Hex: java.lang.String encodeHex(byte[],int)>(r3, 4);

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r21);

        $r26 = <java.lang.System: java.io.PrintStream err>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reconstructed : ");

        $r24 = staticinvoke <com.coremedia.iso.Hex: java.lang.String encodeHex(byte[],int)>(r4, 4);

        $r31 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>($r30);

        return 0;

     label7:
        i1 = i1 + -1;

        i2 = i2 + -1;

        goto label6;

     label8:
        return 1;
    }

    private boolean isSmallBox()
    {
        com.googlecode.mp4parser.AbstractBox r0;
        java.nio.ByteBuffer $r1, $r2, $r3, $r4;
        int $i0, $i6;
        long $l1, $l3, $l4, $l5;
        byte $b2;
        boolean $z0;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        $r1 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer content>;

        if $r1 != null goto label3;

        $l3 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: long getContentSize()>();

        $r3 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes>;

        if $r3 == null goto label1;

        $r4 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer deadBytes>;

        $i6 = virtualinvoke $r4.<java.nio.ByteBuffer: int limit()>();

        goto label2;

     label1:
        $i6 = 0;

     label2:
        $l4 = (long) $i6;

        $l5 = $l3 + $l4;

        $l1 = $l5 + 8L;

        goto label4;

     label3:
        $r2 = r0.<com.googlecode.mp4parser.AbstractBox: java.nio.ByteBuffer content>;

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int limit()>();

        $l1 = (long) $i0;

     label4:
        $b2 = $l1 cmp 4294967296L;

        if $b2 >= 0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    private void getHeader(java.nio.ByteBuffer)
    {
        com.googlecode.mp4parser.AbstractBox r0;
        java.nio.ByteBuffer r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r5, $r6, $r9;
        byte[] $r3, $r7, $r10;
        long $l0, $l1;

        r0 := @this: com.googlecode.mp4parser.AbstractBox;

        r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = specialinvoke r0.<com.googlecode.mp4parser.AbstractBox: boolean isSmallBox()>();

        if $z0 == 0 goto label1;

        $l1 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: long getSize()>();

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>(r1, $l1);

        $r9 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: java.lang.String getType()>();

        $r10 = staticinvoke <com.coremedia.iso.IsoFile: byte[] fourCCtoBytes(java.lang.String)>($r9);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r10);

        goto label2;

     label1:
        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>(r1, 1L);

        $r2 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: java.lang.String getType()>();

        $r3 = staticinvoke <com.coremedia.iso.IsoFile: byte[] fourCCtoBytes(java.lang.String)>($r2);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r3);

        $l0 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: long getSize()>();

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>(r1, $l0);

     label2:
        $r5 = "uuid";

        $r6 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: java.lang.String getType()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label3;

        $r7 = virtualinvoke r0.<com.googlecode.mp4parser.AbstractBox: byte[] getUserType()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r7);

     label3:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;
        java.lang.String $r2;
        java.util.logging.Logger $r3;

        $r0 = class "com/googlecode/mp4parser/AbstractBox";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.googlecode.mp4parser.AbstractBox: boolean $assertionsDisabled> = $z1;

        <com.googlecode.mp4parser.AbstractBox: int MEM_MAP_THRESHOLD> = 102400;

        $r1 = class "com/googlecode/mp4parser/AbstractBox";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2);

        <com.googlecode.mp4parser.AbstractBox: java.util.logging.Logger LOG> = $r3;

        return;
    }
}
