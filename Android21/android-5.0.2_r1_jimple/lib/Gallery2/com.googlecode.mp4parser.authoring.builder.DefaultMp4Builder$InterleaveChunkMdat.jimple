class com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat extends java.lang.Object implements com.coremedia.iso.boxes.Box
{
    java.util.List tracks;
    java.util.List samples;
    com.coremedia.iso.boxes.ContainerBox parent;
    long contentSize;
    final com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder this$0;

    public com.coremedia.iso.boxes.ContainerBox getParent()
    {
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;
        com.coremedia.iso.boxes.ContainerBox $r1;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        $r1 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.coremedia.iso.boxes.ContainerBox parent>;

        return $r1;
    }

    public void setParent(com.coremedia.iso.boxes.ContainerBox)
    {
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;
        com.coremedia.iso.boxes.ContainerBox r1;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        r1 := @parameter0: com.coremedia.iso.boxes.ContainerBox;

        r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.coremedia.iso.boxes.ContainerBox parent> = r1;

        return;
    }

    public void parse(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer, long, com.coremedia.iso.BoxParser) throws java.io.IOException
    {
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;
        java.nio.channels.ReadableByteChannel r1;
        java.nio.ByteBuffer r2;
        long l0;
        com.coremedia.iso.BoxParser r3;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        r1 := @parameter0: java.nio.channels.ReadableByteChannel;

        r2 := @parameter1: java.nio.ByteBuffer;

        l0 := @parameter2: long;

        r3 := @parameter3: com.coremedia.iso.BoxParser;

        return;
    }

    private void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder, com.googlecode.mp4parser.authoring.Movie)
    {
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder r1;
        com.googlecode.mp4parser.authoring.Movie r2;
        java.util.HashMap r3, $r11, $r20;
        java.util.Iterator r4, $r13, r30;
        com.googlecode.mp4parser.authoring.Track r5, r6;
        int[] r7, $r15, $r28;
        long l0, $l4, $l5, $l6, $l8, $l10, $l11, $l13;
        int i1, $i2, $i3, $i9, $i12, i14, i15;
        java.nio.ByteBuffer r8, $r26;
        java.util.ArrayList $r9;
        java.util.List $r10, $r12, $r17, $r22, $r24;
        boolean $z0, $z1;
        java.util.Collection $r14;
        java.lang.Object $r16, $r18, $r19, $r21, $r23, $r29;
        byte $b7;
        java.nio.Buffer $r25;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        r1 := @parameter0: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder;

        r2 := @parameter1: com.googlecode.mp4parser.authoring.Movie;

        r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: java.util.List samples> = $r9;

        r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long contentSize> = 0L;

        $r10 = virtualinvoke r2.<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>();

        r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: java.util.List tracks> = $r10;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r3 = $r11;

        $r12 = virtualinvoke r2.<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>();

        r4 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r29 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.googlecode.mp4parser.authoring.Track) $r29;

        $r28 = virtualinvoke r1.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int[] getChunkSizes(com.googlecode.mp4parser.authoring.Track,com.googlecode.mp4parser.authoring.Movie)>(r5, r2);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r28);

        goto label01;

     label02:
        i14 = 0;

     label03:
        $r14 = interfaceinvoke r3.<java.util.Map: java.util.Collection values()>();

        $r13 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

        $r16 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (int[]) $r16;

        $i2 = lengthof $r15;

        if i14 >= $i2 goto label10;

        $r17 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: java.util.List tracks>;

        r30 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r19 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.googlecode.mp4parser.authoring.Track) $r19;

        $r18 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (int[]) $r18;

        l0 = 0L;

        i1 = 0;

     label05:
        if i1 >= i14 goto label06;

        $i12 = r7[i1];

        $l13 = (long) $i12;

        l0 = l0 + $l13;

        i1 = i1 + 1;

        goto label05;

     label06:
        i15 = staticinvoke <com.googlecode.mp4parser.util.CastUtils: int l2i(long)>(l0);

     label07:
        $l6 = (long) i15;

        $i3 = r7[i14];

        $l5 = (long) $i3;

        $l4 = l0 + $l5;

        $b7 = $l6 cmp $l4;

        if $b7 >= 0 goto label08;

        $r20 = r1.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: java.util.HashMap track2Sample>;

        $r21 = virtualinvoke $r20.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);

        $r22 = (java.util.List) $r21;

        $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(i15);

        r8 = (java.nio.ByteBuffer) $r23;

        $l8 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long contentSize>;

        $i9 = virtualinvoke r8.<java.nio.ByteBuffer: int limit()>();

        $l10 = (long) $i9;

        $l11 = $l8 + $l10;

        r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long contentSize> = $l11;

        $r24 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: java.util.List samples>;

        $r25 = virtualinvoke r8.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $r26 = (java.nio.ByteBuffer) $r25;

        interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>($r26);

        i15 = i15 + 1;

        goto label07;

     label08:
        goto label04;

     label09:
        i14 = i14 + 1;

        goto label03;

     label10:
        return;
    }

    public long getDataOffset()
    {
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;
        com.coremedia.iso.boxes.Box r1, r3;
        long l0, $l1;
        java.util.Iterator r2;
        com.coremedia.iso.boxes.ContainerBox $r4, $r5;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        r1 = r0;

        l0 = 16L;

     label1:
        $r4 = interfaceinvoke r1.<com.coremedia.iso.boxes.Box: com.coremedia.iso.boxes.ContainerBox getParent()>();

        if $r4 == null goto label5;

        $r5 = interfaceinvoke r1.<com.coremedia.iso.boxes.Box: com.coremedia.iso.boxes.ContainerBox getParent()>();

        $r6 = interfaceinvoke $r5.<com.coremedia.iso.boxes.ContainerBox: java.util.List getBoxes()>();

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.coremedia.iso.boxes.Box) $r7;

        if r1 != r3 goto label3;

        goto label4;

     label3:
        $l1 = interfaceinvoke r3.<com.coremedia.iso.boxes.Box: long getSize()>();

        l0 = l0 + $l1;

        goto label2;

     label4:
        r1 = interfaceinvoke r1.<com.coremedia.iso.boxes.Box: com.coremedia.iso.boxes.ContainerBox getParent()>();

        goto label1;

     label5:
        return l0;
    }

    public java.lang.String getType()
    {
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        return "mdat";
    }

    public long getSize()
    {
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;
        long $l0, $l1;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        $l0 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long contentSize>;

        $l1 = 16L + $l0;

        return $l1;
    }

    private boolean isSmallBox(long)
    {
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;
        long l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        l0 := @parameter0: long;

        $l1 = l0 + 8L;

        $b2 = $l1 cmp 4294967296L;

        if $b2 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void getBox(java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;
        java.nio.channels.WritableByteChannel r1;
        java.nio.ByteBuffer r2, $r21, r25;
        long l0;
        java.util.List r3, r4, $r9, $r13;
        int i1, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20;
        java.nio.ByteBuffer[] r5, $r17;
        boolean $z0, $z1, $z2, $z3;
        byte[] $r6, $r23;
        java.lang.Object $r10;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder $r12, $r14, $r15, $r16, $r20;
        double $d0, $d1, $d2, $d3, $d4;
        byte $b6;
        java.nio.channels.GatheringByteChannel $r18;
        java.lang.Object[] $r19;
        java.util.Iterator r24;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        r1 := @parameter0: java.nio.channels.WritableByteChannel;

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(16);

        l0 = virtualinvoke r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: long getSize()>();

        $z0 = specialinvoke r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: boolean isSmallBox(long)>(l0);

        if $z0 == 0 goto label01;

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>(r2, l0);

        goto label02;

     label01:
        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>(r2, 1L);

     label02:
        $r6 = staticinvoke <com.coremedia.iso.IsoFile: byte[] fourCCtoBytes(java.lang.String)>("mdat");

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r6);

        $z1 = specialinvoke r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: boolean isSmallBox(long)>(l0);

        if $z1 == 0 goto label03;

        $r23 = newarray (byte)[8];

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r23);

        goto label04;

     label03:
        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt64(java.nio.ByteBuffer,long)>(r2, l0);

     label04:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        interfaceinvoke r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>(r2);

        $z2 = r1 instanceof java.nio.channels.GatheringByteChannel;

        if $z2 == 0 goto label10;

        $r12 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder this$0>;

        $r13 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: java.util.List samples>;

        r3 = virtualinvoke $r12.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: java.util.List unifyAdjacentBuffers(java.util.List)>($r13);

        i1 = 0;

     label05:
        $d0 = (double) i1;

        $i4 = interfaceinvoke r3.<java.util.List: int size()>();

        $d3 = (double) $i4;

        $r14 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder this$0>;

        $i5 = $r14.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int STEPSIZE>;

        $d1 = (double) $i5;

        $d4 = $d3 / $d1;

        $d2 = staticinvoke <java.lang.Math: double ceil(double)>($d4);

        $b6 = $d0 cmpg $d2;

        if $b6 >= 0 goto label09;

        $r16 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder this$0>;

        $i8 = $r16.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int STEPSIZE>;

        $i12 = i1 * $i8;

        $i11 = i1 + 1;

        $r15 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder this$0>;

        $i7 = $r15.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int STEPSIZE>;

        $i9 = $i11 * $i7;

        $i10 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i9 >= $i10 goto label06;

        $i19 = i1 + 1;

        $r20 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder this$0>;

        $i20 = $r20.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: int STEPSIZE>;

        $i14 = $i19 * $i20;

        goto label07;

     label06:
        $i14 = interfaceinvoke r3.<java.util.List: int size()>();

     label07:
        r4 = interfaceinvoke r3.<java.util.List: java.util.List subList(int,int)>($i12, $i14);

        $i13 = interfaceinvoke r4.<java.util.List: int size()>();

        $r17 = newarray (java.nio.ByteBuffer)[$i13];

        $r19 = interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r17);

        r5 = (java.nio.ByteBuffer[]) $r19;

     label08:
        $r18 = (java.nio.channels.GatheringByteChannel) r1;

        interfaceinvoke $r18.<java.nio.channels.GatheringByteChannel: long write(java.nio.ByteBuffer[])>(r5);

        $i15 = lengthof r5;

        $i18 = $i15 - 1;

        $r21 = r5[$i18];

        $i17 = virtualinvoke $r21.<java.nio.ByteBuffer: int remaining()>();

        if $i17 > 0 goto label08;

        i1 = i1 + 1;

        goto label05;

     label09:
        goto label12;

     label10:
        $r9 = r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: java.util.List samples>;

        r24 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r10 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.nio.ByteBuffer) $r10;

        virtualinvoke r25.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        interfaceinvoke r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>(r25);

        goto label11;

     label12:
        return;
    }

    void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder, com.googlecode.mp4parser.authoring.Movie, com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$1)
    {
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat r0;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder r1;
        com.googlecode.mp4parser.authoring.Movie r2;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$1 r3;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat;

        r1 := @parameter0: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder;

        r2 := @parameter1: com.googlecode.mp4parser.authoring.Movie;

        r3 := @parameter2: com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$1;

        specialinvoke r0.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder$InterleaveChunkMdat: void <init>(com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder,com.googlecode.mp4parser.authoring.Movie)>(r1, r2);

        return;
    }
}
