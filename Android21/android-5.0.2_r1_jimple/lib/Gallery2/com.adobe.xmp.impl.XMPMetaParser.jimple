public class com.adobe.xmp.impl.XMPMetaParser extends java.lang.Object
{
    private static final java.lang.Object XMP_RDF;
    private static javax.xml.parsers.DocumentBuilderFactory factory;

    private void <init>()
    {
        com.adobe.xmp.impl.XMPMetaParser r0;

        r0 := @this: com.adobe.xmp.impl.XMPMetaParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.adobe.xmp.XMPMeta parse(java.lang.Object, com.adobe.xmp.options.ParseOptions) throws com.adobe.xmp.XMPException
    {
        java.lang.Object r0, $r7, $r8, $r9, $r12;
        com.adobe.xmp.options.ParseOptions r1, $r5, r14;
        org.w3c.dom.Document r2;
        boolean z0, $z1;
        java.lang.Object[] r3, r15;
        com.adobe.xmp.impl.XMPMetaImpl r4, $r6;
        org.w3c.dom.Node $r10;
        java.lang.String $r11;
        com.adobe.xmp.XMPMeta $r13;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: com.adobe.xmp.options.ParseOptions;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertNotNull(java.lang.Object)>(r0);

        if r1 == null goto label1;

        $r5 = r1;

        goto label2;

     label1:
        $r5 = new com.adobe.xmp.options.ParseOptions;

        specialinvoke $r5.<com.adobe.xmp.options.ParseOptions: void <init>()>();

     label2:
        r14 = $r5;

        r2 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: org.w3c.dom.Document parseXml(java.lang.Object,com.adobe.xmp.options.ParseOptions)>(r0, r14);

        z0 = virtualinvoke r14.<com.adobe.xmp.options.ParseOptions: boolean getRequireXMPMeta()>();

        r3 = newarray (java.lang.Object)[3];

        r15 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: java.lang.Object[] findRootNode(org.w3c.dom.Node,boolean,java.lang.Object[])>(r2, z0, r3);

        if r15 == null goto label4;

        $r8 = r15[1];

        $r7 = <com.adobe.xmp.impl.XMPMetaParser: java.lang.Object XMP_RDF>;

        if $r8 != $r7 goto label4;

        $r9 = r15[0];

        $r10 = (org.w3c.dom.Node) $r9;

        r4 = staticinvoke <com.adobe.xmp.impl.ParseRDF: com.adobe.xmp.impl.XMPMetaImpl parse(org.w3c.dom.Node)>($r10);

        $r12 = r15[2];

        $r11 = (java.lang.String) $r12;

        virtualinvoke r4.<com.adobe.xmp.impl.XMPMetaImpl: void setPacketHeader(java.lang.String)>($r11);

        $z1 = virtualinvoke r14.<com.adobe.xmp.options.ParseOptions: boolean getOmitNormalization()>();

        if $z1 != 0 goto label3;

        $r13 = staticinvoke <com.adobe.xmp.impl.XMPNormalizer: com.adobe.xmp.XMPMeta process(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.options.ParseOptions)>(r4, r14);

        return $r13;

     label3:
        return r4;

     label4:
        $r6 = new com.adobe.xmp.impl.XMPMetaImpl;

        specialinvoke $r6.<com.adobe.xmp.impl.XMPMetaImpl: void <init>()>();

        return $r6;
    }

    private static org.w3c.dom.Document parseXml(java.lang.Object, com.adobe.xmp.options.ParseOptions) throws com.adobe.xmp.XMPException
    {
        java.lang.Object r0;
        com.adobe.xmp.options.ParseOptions r1;
        boolean $z0, $z1;
        java.lang.String $r2;
        org.w3c.dom.Document $r3, $r7, $r9;
        com.adobe.xmp.impl.ByteBuffer $r4;
        byte[] $r5, $r6;
        java.io.InputStream $r8;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: com.adobe.xmp.options.ParseOptions;

        $z0 = r0 instanceof java.io.InputStream;

        if $z0 == 0 goto label1;

        $r8 = (java.io.InputStream) r0;

        $r9 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: org.w3c.dom.Document parseXmlFromInputStream(java.io.InputStream,com.adobe.xmp.options.ParseOptions)>($r8, r1);

        return $r9;

     label1:
        $z1 = r0 instanceof byte[];

        if $z1 == 0 goto label2;

        $r4 = new com.adobe.xmp.impl.ByteBuffer;

        $r5 = (byte[]) r0;

        $r6 = (byte[]) $r5;

        specialinvoke $r4.<com.adobe.xmp.impl.ByteBuffer: void <init>(byte[])>($r6);

        $r7 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: org.w3c.dom.Document parseXmlFromBytebuffer(com.adobe.xmp.impl.ByteBuffer,com.adobe.xmp.options.ParseOptions)>($r4, r1);

        return $r7;

     label2:
        $r2 = (java.lang.String) r0;

        $r3 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: org.w3c.dom.Document parseXmlFromString(java.lang.String,com.adobe.xmp.options.ParseOptions)>($r2, r1);

        return $r3;
    }

    private static org.w3c.dom.Document parseXmlFromInputStream(java.io.InputStream, com.adobe.xmp.options.ParseOptions) throws com.adobe.xmp.XMPException
    {
        java.io.InputStream r0;
        com.adobe.xmp.options.ParseOptions r1;
        com.adobe.xmp.impl.ByteBuffer r2, $r3;
        boolean $z0, $z1;
        org.w3c.dom.Document $r4, $r6;
        org.xml.sax.InputSource $r5;
        java.io.IOException $r7, r9;
        com.adobe.xmp.XMPException $r8;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: com.adobe.xmp.options.ParseOptions;

        $z0 = virtualinvoke r1.<com.adobe.xmp.options.ParseOptions: boolean getAcceptLatin1()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<com.adobe.xmp.options.ParseOptions: boolean getFixControlChars()>();

        if $z1 != 0 goto label1;

        $r5 = new org.xml.sax.InputSource;

        specialinvoke $r5.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r0);

        $r6 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: org.w3c.dom.Document parseInputSource(org.xml.sax.InputSource)>($r5);

        return $r6;

     label1:
        $r3 = new com.adobe.xmp.impl.ByteBuffer;

        specialinvoke $r3.<com.adobe.xmp.impl.ByteBuffer: void <init>(java.io.InputStream)>(r0);

        r2 = $r3;

        $r4 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: org.w3c.dom.Document parseXmlFromBytebuffer(com.adobe.xmp.impl.ByteBuffer,com.adobe.xmp.options.ParseOptions)>(r2, r1);

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = new com.adobe.xmp.XMPException;

        specialinvoke $r8.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int,java.lang.Throwable)>("Error reading the XML-file", 204, r9);

        throw $r8;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static org.w3c.dom.Document parseXmlFromBytebuffer(com.adobe.xmp.impl.ByteBuffer, com.adobe.xmp.options.ParseOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.ByteBuffer r0;
        com.adobe.xmp.options.ParseOptions r1;
        org.xml.sax.InputSource r2, $r6, $r10, $r17, r21;
        com.adobe.xmp.XMPException r3, $r9, $r18;
        java.lang.String r4;
        com.adobe.xmp.impl.FixASCIIControlsReader r5, $r13;
        java.io.InputStream $r7, $r11, $r14;
        org.w3c.dom.Document $r8, $r12, $r16;
        int $i0, $i1;
        boolean $z0, $z1;
        java.io.InputStreamReader $r15;
        java.io.UnsupportedEncodingException $r19;

        r0 := @parameter0: com.adobe.xmp.impl.ByteBuffer;

        r1 := @parameter1: com.adobe.xmp.options.ParseOptions;

        $r6 = new org.xml.sax.InputSource;

        $r7 = virtualinvoke r0.<com.adobe.xmp.impl.ByteBuffer: java.io.InputStream getByteStream()>();

        specialinvoke $r6.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r7);

        r2 = $r6;

     label01:
        $r8 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: org.w3c.dom.Document parseInputSource(org.xml.sax.InputSource)>(r2);

     label02:
        return $r8;

     label03:
        $r9 := @caughtexception;

        r3 = $r9;

        $i0 = virtualinvoke r3.<com.adobe.xmp.XMPException: int getErrorCode()>();

        if $i0 == 201 goto label04;

        $i1 = virtualinvoke r3.<com.adobe.xmp.XMPException: int getErrorCode()>();

        if $i1 != 204 goto label10;

     label04:
        $z0 = virtualinvoke r1.<com.adobe.xmp.options.ParseOptions: boolean getAcceptLatin1()>();

        if $z0 == 0 goto label05;

        r0 = staticinvoke <com.adobe.xmp.impl.Latin1Converter: com.adobe.xmp.impl.ByteBuffer convert(com.adobe.xmp.impl.ByteBuffer)>(r0);

     label05:
        $z1 = virtualinvoke r1.<com.adobe.xmp.options.ParseOptions: boolean getFixControlChars()>();

        if $z1 == 0 goto label09;

     label06:
        r4 = virtualinvoke r0.<com.adobe.xmp.impl.ByteBuffer: java.lang.String getEncoding()>();

        $r13 = new com.adobe.xmp.impl.FixASCIIControlsReader;

        $r15 = new java.io.InputStreamReader;

        $r14 = virtualinvoke r0.<com.adobe.xmp.impl.ByteBuffer: java.io.InputStream getByteStream()>();

        specialinvoke $r15.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r14, r4);

        specialinvoke $r13.<com.adobe.xmp.impl.FixASCIIControlsReader: void <init>(java.io.Reader)>($r15);

        r5 = $r13;

        $r17 = new org.xml.sax.InputSource;

        specialinvoke $r17.<org.xml.sax.InputSource: void <init>(java.io.Reader)>(r5);

        $r16 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: org.w3c.dom.Document parseInputSource(org.xml.sax.InputSource)>($r17);

     label07:
        return $r16;

     label08:
        $r19 := @caughtexception;

        $r18 = new com.adobe.xmp.XMPException;

        specialinvoke $r18.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int,java.lang.Throwable)>("Unsupported Encoding", 9, r3);

        throw $r18;

     label09:
        $r10 = new org.xml.sax.InputSource;

        $r11 = virtualinvoke r0.<com.adobe.xmp.impl.ByteBuffer: java.io.InputStream getByteStream()>();

        specialinvoke $r10.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r11);

        r21 = $r10;

        $r12 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: org.w3c.dom.Document parseInputSource(org.xml.sax.InputSource)>(r21);

        return $r12;

     label10:
        throw r3;

        catch com.adobe.xmp.XMPException from label01 to label02 with label03;
        catch java.io.UnsupportedEncodingException from label06 to label07 with label08;
    }

    private static org.w3c.dom.Document parseXmlFromString(java.lang.String, com.adobe.xmp.options.ParseOptions) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.options.ParseOptions r1;
        org.xml.sax.InputSource r2, $r4, $r8, r12;
        com.adobe.xmp.XMPException r3, $r7;
        java.io.StringReader $r5, $r10;
        org.w3c.dom.Document $r6, $r11;
        int $i0;
        boolean $z0;
        com.adobe.xmp.impl.FixASCIIControlsReader $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.adobe.xmp.options.ParseOptions;

        $r4 = new org.xml.sax.InputSource;

        $r5 = new java.io.StringReader;

        specialinvoke $r5.<java.io.StringReader: void <init>(java.lang.String)>(r0);

        specialinvoke $r4.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r5);

        r2 = $r4;

     label1:
        $r6 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: org.w3c.dom.Document parseInputSource(org.xml.sax.InputSource)>(r2);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        $i0 = virtualinvoke r3.<com.adobe.xmp.XMPException: int getErrorCode()>();

        if $i0 != 201 goto label4;

        $z0 = virtualinvoke r1.<com.adobe.xmp.options.ParseOptions: boolean getFixControlChars()>();

        if $z0 == 0 goto label4;

        $r8 = new org.xml.sax.InputSource;

        $r9 = new com.adobe.xmp.impl.FixASCIIControlsReader;

        $r10 = new java.io.StringReader;

        specialinvoke $r10.<java.io.StringReader: void <init>(java.lang.String)>(r0);

        specialinvoke $r9.<com.adobe.xmp.impl.FixASCIIControlsReader: void <init>(java.io.Reader)>($r10);

        specialinvoke $r8.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r9);

        r12 = $r8;

        $r11 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: org.w3c.dom.Document parseInputSource(org.xml.sax.InputSource)>(r12);

        return $r11;

     label4:
        throw r3;

        catch com.adobe.xmp.XMPException from label1 to label2 with label3;
    }

    private static org.w3c.dom.Document parseInputSource(org.xml.sax.InputSource) throws com.adobe.xmp.XMPException
    {
        org.xml.sax.InputSource r0;
        javax.xml.parsers.DocumentBuilder r1;
        javax.xml.parsers.DocumentBuilderFactory $r2;
        org.w3c.dom.Document $r3;
        java.io.IOException $r4, r12;
        com.adobe.xmp.XMPException $r5, $r7, $r9;
        org.xml.sax.SAXException $r6, r10;
        javax.xml.parsers.ParserConfigurationException $r8, r11;

        r0 := @parameter0: org.xml.sax.InputSource;

     label1:
        $r2 = <com.adobe.xmp.impl.XMPMetaParser: javax.xml.parsers.DocumentBuilderFactory factory>;

        r1 = virtualinvoke $r2.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        virtualinvoke r1.<javax.xml.parsers.DocumentBuilder: void setErrorHandler(org.xml.sax.ErrorHandler)>(null);

        $r3 = virtualinvoke r1.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>(r0);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        r10 = $r6;

        $r7 = new com.adobe.xmp.XMPException;

        specialinvoke $r7.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int,java.lang.Throwable)>("XML parsing failure", 201, r10);

        throw $r7;

     label4:
        $r8 := @caughtexception;

        r11 = $r8;

        $r9 = new com.adobe.xmp.XMPException;

        specialinvoke $r9.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int,java.lang.Throwable)>("XML Parser not correctly configured", 0, r11);

        throw $r9;

     label5:
        $r4 := @caughtexception;

        r12 = $r4;

        $r5 = new com.adobe.xmp.XMPException;

        specialinvoke $r5.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int,java.lang.Throwable)>("Error reading the XML-file", 204, r12);

        throw $r5;

        catch org.xml.sax.SAXException from label1 to label2 with label3;
        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label4;
        catch java.io.IOException from label1 to label2 with label5;
    }

    private static java.lang.Object[] findRootNode(org.w3c.dom.Node, boolean, java.lang.Object[])
    {
        org.w3c.dom.Node r0, r17;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object[] r1, r5, $r10;
        org.w3c.dom.NodeList r2;
        int i0, $i1;
        java.lang.String r3, r4, $r6, $r7, $r8, $r9, $r12, $r15, $r16;
        short $s2, $s3, $s4;
        java.lang.Object $r11;
        org.w3c.dom.ProcessingInstruction $r13, $r14;

        r0 := @parameter0: org.w3c.dom.Node;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.Object[];

        r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i0 = 0;

     label1:
        $i1 = interfaceinvoke r2.<org.w3c.dom.NodeList: int getLength()>();

        if i0 >= $i1 goto label8;

        r17 = interfaceinvoke r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $s2 = interfaceinvoke r17.<org.w3c.dom.Node: short getNodeType()>();

        if 7 != $s2 goto label2;

        $r14 = (org.w3c.dom.ProcessingInstruction) r17;

        $r15 = interfaceinvoke $r14.<org.w3c.dom.ProcessingInstruction: java.lang.String getTarget()>();

        if $r15 != "xpacket" goto label2;

        if r1 == null goto label7;

        $r13 = (org.w3c.dom.ProcessingInstruction) r17;

        $r16 = interfaceinvoke $r13.<org.w3c.dom.ProcessingInstruction: java.lang.String getData()>();

        r1[2] = $r16;

        goto label7;

     label2:
        $s3 = interfaceinvoke r17.<org.w3c.dom.Node: short getNodeType()>();

        if 3 == $s3 goto label7;

        $s4 = interfaceinvoke r17.<org.w3c.dom.Node: short getNodeType()>();

        if 7 == $s4 goto label7;

        r3 = interfaceinvoke r17.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        r4 = interfaceinvoke r17.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r6 = "xmpmeta";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 != 0 goto label3;

        $r12 = "xapmeta";

        $z5 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z5 == 0 goto label4;

     label3:
        $r7 = "adobe:ns:meta/";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label4;

        $r10 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: java.lang.Object[] findRootNode(org.w3c.dom.Node,boolean,java.lang.Object[])>(r17, 0, r1);

        return $r10;

     label4:
        if z0 != 0 goto label6;

        $r8 = "RDF";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z3 == 0 goto label6;

        $r9 = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z4 == 0 goto label6;

        if r1 == null goto label5;

        r1[0] = r17;

        $r11 = <com.adobe.xmp.impl.XMPMetaParser: java.lang.Object XMP_RDF>;

        r1[1] = $r11;

     label5:
        return r1;

     label6:
        r5 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: java.lang.Object[] findRootNode(org.w3c.dom.Node,boolean,java.lang.Object[])>(r17, z0, r1);

        if r5 == null goto label7;

        return r5;

     label7:
        i0 = i0 + 1;

        goto label1;

     label8:
        return null;
    }

    private static javax.xml.parsers.DocumentBuilderFactory createDocumentBuilderFactory()
    {
        javax.xml.parsers.DocumentBuilderFactory r0;
        java.lang.Exception $r2;

        r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        virtualinvoke r0.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1);

        virtualinvoke r0.<javax.xml.parsers.DocumentBuilderFactory: void setIgnoringComments(boolean)>(1);

     label1:
        virtualinvoke r0.<javax.xml.parsers.DocumentBuilderFactory: void setFeature(java.lang.String,boolean)>("http://javax.xml.XMLConstants/feature/secure-processing", 1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return r0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;
        javax.xml.parsers.DocumentBuilderFactory $r1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.adobe.xmp.impl.XMPMetaParser: java.lang.Object XMP_RDF> = $r0;

        $r1 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: javax.xml.parsers.DocumentBuilderFactory createDocumentBuilderFactory()>();

        <com.adobe.xmp.impl.XMPMetaParser: javax.xml.parsers.DocumentBuilderFactory factory> = $r1;

        return;
    }
}
