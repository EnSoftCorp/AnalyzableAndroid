class com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator extends java.lang.Object implements java.util.Iterator
{
    protected static final int ITERATE_NODE;
    protected static final int ITERATE_CHILDREN;
    protected static final int ITERATE_QUALIFIER;
    private int state;
    private com.adobe.xmp.impl.XMPNode visitedNode;
    private java.lang.String path;
    private java.util.Iterator childrenIterator;
    private int index;
    private java.util.Iterator subIterator;
    private com.adobe.xmp.properties.XMPPropertyInfo returnProperty;
    final com.adobe.xmp.impl.XMPIteratorImpl this$0;

    public void <init>(com.adobe.xmp.impl.XMPIteratorImpl)
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator r0;
        com.adobe.xmp.impl.XMPIteratorImpl r1;
        java.util.List $r2;
        java.util.Iterator $r3;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        r1 := @parameter0: com.adobe.xmp.impl.XMPIteratorImpl;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPIteratorImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int state> = 0;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator childrenIterator> = null;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int index> = 0;

        $r2 = <java.util.Collections: java.util.List EMPTY_LIST>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator subIterator> = $r3;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.properties.XMPPropertyInfo returnProperty> = null;

        return;
    }

    public void <init>(com.adobe.xmp.impl.XMPIteratorImpl, com.adobe.xmp.impl.XMPNode, java.lang.String, int)
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator r0;
        com.adobe.xmp.impl.XMPIteratorImpl r1;
        com.adobe.xmp.impl.XMPNode r2;
        java.lang.String r3, $r7, $r8;
        int i0;
        java.util.List $r4;
        java.util.Iterator $r5;
        com.adobe.xmp.options.PropertyOptions $r6;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        r1 := @parameter0: com.adobe.xmp.impl.XMPIteratorImpl;

        r2 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPIteratorImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int state> = 0;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator childrenIterator> = null;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int index> = 0;

        $r4 = <java.util.Collections: java.util.List EMPTY_LIST>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator subIterator> = $r5;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.properties.XMPPropertyInfo returnProperty> = null;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPNode visitedNode> = r2;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int state> = 0;

        $r6 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r6.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        virtualinvoke r1.<com.adobe.xmp.impl.XMPIteratorImpl: void setBaseNS(java.lang.String)>($r8);

     label1:
        $r7 = virtualinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.lang.String accumulatePath(com.adobe.xmp.impl.XMPNode,java.lang.String,int)>(r2, r3, i0);

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.lang.String path> = $r7;

        return;
    }

    public boolean hasNext()
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator r0;
        boolean z0, $z1, $z2, $z3, $z4;
        com.adobe.xmp.properties.XMPPropertyInfo $r1;
        int $i0, $i1;
        java.util.Iterator $r2, $r3, $r5, $r6, $r7, $r12;
        com.adobe.xmp.impl.XMPNode $r4, $r8, $r11;
        com.adobe.xmp.impl.XMPIteratorImpl $r9;
        com.adobe.xmp.options.IteratorOptions $r10;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        $r1 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.properties.XMPPropertyInfo returnProperty>;

        if $r1 == null goto label1;

        return 1;

     label1:
        $i0 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int state>;

        if $i0 != 0 goto label2;

        $z4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: boolean reportNode()>();

        return $z4;

     label2:
        $i1 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int state>;

        if $i1 != 1 goto label5;

        $r6 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator childrenIterator>;

        if $r6 != null goto label3;

        $r11 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPNode visitedNode>;

        $r12 = virtualinvoke $r11.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator childrenIterator> = $r12;

     label3:
        $r7 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator childrenIterator>;

        z0 = specialinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: boolean iterateChildren(java.util.Iterator)>($r7);

        if z0 != 0 goto label4;

        $r8 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPNode visitedNode>;

        $z2 = virtualinvoke $r8.<com.adobe.xmp.impl.XMPNode: boolean hasQualifier()>();

        if $z2 == 0 goto label4;

        $r9 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPIteratorImpl this$0>;

        $r10 = virtualinvoke $r9.<com.adobe.xmp.impl.XMPIteratorImpl: com.adobe.xmp.options.IteratorOptions getOptions()>();

        $z3 = virtualinvoke $r10.<com.adobe.xmp.options.IteratorOptions: boolean isOmitQualifiers()>();

        if $z3 != 0 goto label4;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int state> = 2;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator childrenIterator> = null;

        z0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: boolean hasNext()>();

     label4:
        return z0;

     label5:
        $r2 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator childrenIterator>;

        if $r2 != null goto label6;

        $r4 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPNode visitedNode>;

        $r5 = virtualinvoke $r4.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator childrenIterator> = $r5;

     label6:
        $r3 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator childrenIterator>;

        $z1 = specialinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: boolean iterateChildren(java.util.Iterator)>($r3);

        return $z1;
    }

    protected boolean reportNode()
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator r0;
        com.adobe.xmp.impl.XMPNode $r1, $r2, $r6, $r10;
        boolean $z0, $z1, $z2;
        com.adobe.xmp.impl.XMPIteratorImpl $r3, $r5;
        com.adobe.xmp.options.IteratorOptions $r4;
        java.lang.String $r7, $r8;
        com.adobe.xmp.properties.XMPPropertyInfo $r9;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int state> = 1;

        $r1 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPNode visitedNode>;

        $r2 = virtualinvoke $r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        if $r2 == null goto label2;

        $r3 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPIteratorImpl this$0>;

        $r4 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPIteratorImpl: com.adobe.xmp.options.IteratorOptions getOptions()>();

        $z1 = virtualinvoke $r4.<com.adobe.xmp.options.IteratorOptions: boolean isJustLeafnodes()>();

        if $z1 == 0 goto label1;

        $r10 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPNode visitedNode>;

        $z2 = virtualinvoke $r10.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z2 != 0 goto label2;

     label1:
        $r6 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPNode visitedNode>;

        $r5 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPIteratorImpl this$0>;

        $r7 = virtualinvoke $r5.<com.adobe.xmp.impl.XMPIteratorImpl: java.lang.String getBaseNS()>();

        $r8 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.lang.String path>;

        $r9 = virtualinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.properties.XMPPropertyInfo createPropertyInfo(com.adobe.xmp.impl.XMPNode,java.lang.String,java.lang.String)>($r6, $r7, $r8);

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.properties.XMPPropertyInfo returnProperty> = $r9;

        return 1;

     label2:
        $z0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: boolean hasNext()>();

        return $z0;
    }

    private boolean iterateChildren(java.util.Iterator)
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator r0, $r10;
        java.util.Iterator r1, $r4, $r5, $r6, $r15;
        com.adobe.xmp.impl.XMPNode r2;
        com.adobe.xmp.impl.XMPIteratorImpl $r3, $r11, $r14;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r7, $r9;
        com.adobe.xmp.properties.XMPPropertyInfo $r8;
        int $i0, $i1, $i2;
        java.lang.String $r12;
        java.util.List $r13;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        r1 := @parameter0: java.util.Iterator;

        $r3 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPIteratorImpl this$0>;

        $z0 = $r3.<com.adobe.xmp.impl.XMPIteratorImpl: boolean skipSiblings>;

        if $z0 == 0 goto label1;

        $r14 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPIteratorImpl this$0>;

        $r14.<com.adobe.xmp.impl.XMPIteratorImpl: boolean skipSiblings> = 0;

        $r13 = <java.util.Collections: java.util.List EMPTY_LIST>;

        $r15 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator subIterator> = $r15;

     label1:
        $r4 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator subIterator>;

        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.adobe.xmp.impl.XMPNode) $r9;

        $i0 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int index>;

        $i1 = $i0 + 1;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int index> = $i1;

        $r10 = new com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        $r11 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPIteratorImpl this$0>;

        $r12 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.lang.String path>;

        $i2 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int index>;

        specialinvoke $r10.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: void <init>(com.adobe.xmp.impl.XMPIteratorImpl,com.adobe.xmp.impl.XMPNode,java.lang.String,int)>($r11, r2, $r12, $i2);

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator subIterator> = $r10;

     label2:
        $r5 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator subIterator>;

        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r6 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator subIterator>;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.adobe.xmp.properties.XMPPropertyInfo) $r7;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.properties.XMPPropertyInfo returnProperty> = $r8;

        return 1;

     label3:
        return 0;
    }

    public java.lang.Object next()
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator r0;
        com.adobe.xmp.properties.XMPPropertyInfo r1;
        boolean $z0;
        java.util.NoSuchElementException $r2;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        $z0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        r1 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.properties.XMPPropertyInfo returnProperty>;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.properties.XMPPropertyInfo returnProperty> = null;

        return r1;

     label1:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("There are no more nodes to return");

        throw $r2;
    }

    public void remove()
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    protected java.lang.String accumulatePath(com.adobe.xmp.impl.XMPNode, java.lang.String, int)
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator r0;
        com.adobe.xmp.impl.XMPNode r1, $r5, $r7;
        java.lang.String r2, r3, r4, $r14, $r16, $r20;
        int i0, $i1;
        com.adobe.xmp.options.PropertyOptions $r6, $r8;
        boolean $z0, $z1, $z2, $z3;
        com.adobe.xmp.impl.XMPIteratorImpl $r9;
        com.adobe.xmp.options.IteratorOptions $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r15, $r17, $r18, $r19, $r21;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r5 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        if $r5 == null goto label1;

        $r6 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r6.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z0 == 0 goto label2;

     label1:
        return null;

     label2:
        $r7 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        $r8 = virtualinvoke $r7.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z1 == 0 goto label3;

        r3 = "";

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r4 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        r3 = "/";

        r4 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

     label4:
        if r2 == null goto label5;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 != 0 goto label6;

     label5:
        return r4;

     label6:
        $r9 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.impl.XMPIteratorImpl this$0>;

        $r10 = virtualinvoke $r9.<com.adobe.xmp.impl.XMPIteratorImpl: com.adobe.xmp.options.IteratorOptions getOptions()>();

        $z2 = virtualinvoke $r10.<com.adobe.xmp.options.IteratorOptions: boolean isJustLeafname()>();

        if $z2 == 0 goto label9;

        $z3 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("?");

        if $z3 != 0 goto label7;

        $r16 = r4;

        goto label8;

     label7:
        $r16 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(1);

     label8:
        return $r16;

     label9:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    protected com.adobe.xmp.properties.XMPPropertyInfo createPropertyInfo(com.adobe.xmp.impl.XMPNode, java.lang.String, java.lang.String)
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator r0;
        com.adobe.xmp.impl.XMPNode r1;
        java.lang.String r2, r3, r4, $r6;
        com.adobe.xmp.options.PropertyOptions $r5;
        boolean $z0;
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1 $r7;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r5 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r5.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z0 == 0 goto label1;

        $r6 = null;

        goto label2;

     label1:
        $r6 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

     label2:
        r4 = $r6;

        $r7 = new com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1;

        specialinvoke $r7.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator$1: void <init>(com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator,java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.impl.XMPNode)>(r0, r2, r3, r4, r1);

        return $r7;
    }

    protected java.util.Iterator getChildrenIterator()
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator r0;
        java.util.Iterator $r1;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        $r1 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator childrenIterator>;

        return $r1;
    }

    protected void setChildrenIterator(java.util.Iterator)
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator r0;
        java.util.Iterator r1;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        r1 := @parameter0: java.util.Iterator;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: java.util.Iterator childrenIterator> = r1;

        return;
    }

    protected com.adobe.xmp.properties.XMPPropertyInfo getReturnProperty()
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator r0;
        com.adobe.xmp.properties.XMPPropertyInfo $r1;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        $r1 = r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.properties.XMPPropertyInfo returnProperty>;

        return $r1;
    }

    protected void setReturnProperty(com.adobe.xmp.properties.XMPPropertyInfo)
    {
        com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator r0;
        com.adobe.xmp.properties.XMPPropertyInfo r1;

        r0 := @this: com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator;

        r1 := @parameter0: com.adobe.xmp.properties.XMPPropertyInfo;

        r0.<com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: com.adobe.xmp.properties.XMPPropertyInfo returnProperty> = r1;

        return;
    }

    public static void <clinit>()
    {
        <com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int ITERATE_QUALIFIER> = 2;

        <com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int ITERATE_CHILDREN> = 1;

        <com.adobe.xmp.impl.XMPIteratorImpl$NodeIterator: int ITERATE_NODE> = 0;

        return;
    }
}
