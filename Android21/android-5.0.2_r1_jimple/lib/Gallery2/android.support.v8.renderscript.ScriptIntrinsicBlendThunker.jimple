class android.support.v8.renderscript.ScriptIntrinsicBlendThunker extends android.support.v8.renderscript.ScriptIntrinsicBlend
{
    android.renderscript.ScriptIntrinsicBlend mN;

    android.renderscript.ScriptIntrinsicBlend getNObj()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.renderscript.ScriptIntrinsicBlend $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        $r1 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        return $r1;
    }

    void <init>(int, android.support.v8.renderscript.RenderScript)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        int i0;
        android.support.v8.renderscript.RenderScript r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        i0 := @parameter0: int;

        r1 := @parameter1: android.support.v8.renderscript.RenderScript;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void <init>(int,android.support.v8.renderscript.RenderScript)>(i0, r1);

        return;
    }

    public static android.support.v8.renderscript.ScriptIntrinsicBlendThunker create(android.support.v8.renderscript.RenderScript, android.support.v8.renderscript.Element)
    {
        android.support.v8.renderscript.RenderScript r0;
        android.support.v8.renderscript.Element r1;
        android.support.v8.renderscript.RenderScriptThunker r2;
        android.support.v8.renderscript.ElementThunker r3;
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r4, $r6;
        android.renderscript.RSRuntimeException r5, $r10;
        android.renderscript.RenderScript $r7;
        android.renderscript.Element $r8;
        android.renderscript.ScriptIntrinsicBlend $r9;
        java.lang.RuntimeException $r11;

        r0 := @parameter0: android.support.v8.renderscript.RenderScript;

        r1 := @parameter1: android.support.v8.renderscript.Element;

        r2 = (android.support.v8.renderscript.RenderScriptThunker) r0;

        r3 = (android.support.v8.renderscript.ElementThunker) r1;

        $r6 = new android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        specialinvoke $r6.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: void <init>(int,android.support.v8.renderscript.RenderScript)>(0, r0);

        r4 = $r6;

     label1:
        $r7 = r2.<android.support.v8.renderscript.RenderScriptThunker: android.renderscript.RenderScript mN>;

        $r8 = virtualinvoke r3.<android.support.v8.renderscript.ElementThunker: android.renderscript.Element getNObj()>();

        $r9 = staticinvoke <android.renderscript.ScriptIntrinsicBlend: android.renderscript.ScriptIntrinsicBlend create(android.renderscript.RenderScript,android.renderscript.Element)>($r7, $r8);

        r4.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN> = $r9;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r5 = $r10;

        $r11 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r11;

     label4:
        return r4;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachClear(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachClear(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDClear()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(0, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDClear()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachSrc(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachSrc(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDSrc()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(1, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDSrc()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachDst(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachDst(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDDst()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(2, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDDst()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachSrcOver(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOver(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDSrcOver()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(3, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDSrcOver()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachDstOver(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachDstOver(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDDstOver()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(4, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDDstOver()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachSrcIn(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachSrcIn(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDSrcIn()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(5, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDSrcIn()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachDstIn(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachDstIn(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDDstIn()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(6, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDDstIn()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachSrcOut(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachSrcOut(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDSrcOut()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(7, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDSrcOut()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachDstOut(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachDstOut(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDDstOut()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(8, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDDstOut()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachSrcAtop(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachSrcAtop(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDSrcAtop()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(9, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDSrcAtop()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachDstAtop(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachDstAtop(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDDstAtop()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(10, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDDstAtop()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachXor(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachXor(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDXor()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(11, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDXor()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachMultiply(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachMultiply(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDMultiply()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(14, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDMultiply()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachAdd(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachAdd(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDAdd()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(34, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDAdd()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public void forEachSubtract(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.AllocationThunker r3, r4;
        android.renderscript.RSRuntimeException r5, $r9;
        android.renderscript.ScriptIntrinsicBlend $r6;
        android.renderscript.Allocation $r7, $r8;
        java.lang.RuntimeException $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        r3 = (android.support.v8.renderscript.AllocationThunker) r1;

        r4 = (android.support.v8.renderscript.AllocationThunker) r2;

     label1:
        $r6 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r7 = virtualinvoke r3.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        $r8 = virtualinvoke r4.<android.support.v8.renderscript.AllocationThunker: android.renderscript.Allocation getNObj()>();

        virtualinvoke $r6.<android.renderscript.ScriptIntrinsicBlend: void forEachSubtract(android.renderscript.Allocation,android.renderscript.Allocation)>($r7, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r5 = $r9;

        $r10 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r5);

        throw $r10;

     label4:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDSubtract()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.support.v8.renderscript.Script$KernelID r1;
        android.renderscript.RSRuntimeException r2, $r5;
        android.renderscript.ScriptIntrinsicBlend $r3;
        android.renderscript.Script$KernelID $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(35, 3, null, null);

     label1:
        $r3 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend mN>;

        $r4 = virtualinvoke $r3.<android.renderscript.ScriptIntrinsicBlend: android.renderscript.Script$KernelID getKernelIDSubtract()>();

        r1.<android.support.v8.renderscript.Script$KernelID: android.renderscript.Script$KernelID mN> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r2);

        throw $r6;

     label4:
        return r1;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
    }

    volatile android.renderscript.Script getNObj()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.renderscript.ScriptIntrinsicBlend $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend getNObj()>();

        return $r1;
    }

    volatile android.renderscript.BaseObj getNObj()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker r0;
        android.renderscript.ScriptIntrinsicBlend $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlendThunker;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.renderscript.ScriptIntrinsicBlend getNObj()>();

        return $r1;
    }
}
