public class com.coremedia.iso.boxes.FreeBox extends java.lang.Object implements com.coremedia.iso.boxes.Box
{
    public static final java.lang.String TYPE;
    java.nio.ByteBuffer data;
    java.util.List replacers;
    private com.coremedia.iso.boxes.ContainerBox parent;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        com.coremedia.iso.boxes.FreeBox r0;
        java.util.LinkedList $r1;

        r0 := @this: com.coremedia.iso.boxes.FreeBox;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<com.coremedia.iso.boxes.FreeBox: java.util.List replacers> = $r1;

        return;
    }

    public void <init>(int)
    {
        com.coremedia.iso.boxes.FreeBox r0;
        int i0;
        java.util.LinkedList $r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.coremedia.iso.boxes.FreeBox;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<com.coremedia.iso.boxes.FreeBox: java.util.List replacers> = $r1;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        r0.<com.coremedia.iso.boxes.FreeBox: java.nio.ByteBuffer data> = $r2;

        return;
    }

    public java.nio.ByteBuffer getData()
    {
        com.coremedia.iso.boxes.FreeBox r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.coremedia.iso.boxes.FreeBox;

        $r1 = r0.<com.coremedia.iso.boxes.FreeBox: java.nio.ByteBuffer data>;

        return $r1;
    }

    public void setData(java.nio.ByteBuffer)
    {
        com.coremedia.iso.boxes.FreeBox r0;
        java.nio.ByteBuffer r1;

        r0 := @this: com.coremedia.iso.boxes.FreeBox;

        r1 := @parameter0: java.nio.ByteBuffer;

        r0.<com.coremedia.iso.boxes.FreeBox: java.nio.ByteBuffer data> = r1;

        return;
    }

    public void getBox(java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        com.coremedia.iso.boxes.FreeBox r0;
        java.nio.channels.WritableByteChannel r1;
        java.util.Iterator r2;
        com.coremedia.iso.boxes.Box r3;
        java.util.List $r4;
        boolean $z0;
        java.nio.ByteBuffer $r5, $r11, $r12, r14;
        int $i0, $i1;
        long $l2;
        java.lang.String $r6;
        byte[] $r7;
        java.lang.Object $r13;

        r0 := @this: com.coremedia.iso.boxes.FreeBox;

        r1 := @parameter0: java.nio.channels.WritableByteChannel;

        $r4 = r0.<com.coremedia.iso.boxes.FreeBox: java.util.List replacers>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.coremedia.iso.boxes.Box) $r13;

        interfaceinvoke r3.<com.coremedia.iso.boxes.Box: void getBox(java.nio.channels.WritableByteChannel)>(r1);

        goto label1;

     label2:
        r14 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8);

        $r5 = r0.<com.coremedia.iso.boxes.FreeBox: java.nio.ByteBuffer data>;

        $i0 = virtualinvoke $r5.<java.nio.ByteBuffer: int limit()>();

        $i1 = 8 + $i0;

        $l2 = (long) $i1;

        staticinvoke <com.coremedia.iso.IsoTypeWriter: void writeUInt32(java.nio.ByteBuffer,long)>(r14, $l2);

        $r6 = "free";

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r14.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r7);

        virtualinvoke r14.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        interfaceinvoke r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>(r14);

        $r11 = r0.<com.coremedia.iso.boxes.FreeBox: java.nio.ByteBuffer data>;

        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $r12 = r0.<com.coremedia.iso.boxes.FreeBox: java.nio.ByteBuffer data>;

        interfaceinvoke r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r12);

        return;
    }

    public com.coremedia.iso.boxes.ContainerBox getParent()
    {
        com.coremedia.iso.boxes.FreeBox r0;
        com.coremedia.iso.boxes.ContainerBox $r1;

        r0 := @this: com.coremedia.iso.boxes.FreeBox;

        $r1 = r0.<com.coremedia.iso.boxes.FreeBox: com.coremedia.iso.boxes.ContainerBox parent>;

        return $r1;
    }

    public void setParent(com.coremedia.iso.boxes.ContainerBox)
    {
        com.coremedia.iso.boxes.FreeBox r0;
        com.coremedia.iso.boxes.ContainerBox r1;

        r0 := @this: com.coremedia.iso.boxes.FreeBox;

        r1 := @parameter0: com.coremedia.iso.boxes.ContainerBox;

        r0.<com.coremedia.iso.boxes.FreeBox: com.coremedia.iso.boxes.ContainerBox parent> = r1;

        return;
    }

    public long getSize()
    {
        com.coremedia.iso.boxes.FreeBox r0;
        long l0, $l2, $l3, l4;
        java.util.Iterator r1;
        com.coremedia.iso.boxes.Box r2;
        java.util.List $r3;
        boolean $z0;
        java.nio.ByteBuffer $r4;
        int $i1;
        java.lang.Object $r5;

        r0 := @this: com.coremedia.iso.boxes.FreeBox;

        l0 = 8L;

        $r3 = r0.<com.coremedia.iso.boxes.FreeBox: java.util.List replacers>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.coremedia.iso.boxes.Box) $r5;

        $l3 = interfaceinvoke r2.<com.coremedia.iso.boxes.Box: long getSize()>();

        l0 = l0 + $l3;

        goto label1;

     label2:
        $r4 = r0.<com.coremedia.iso.boxes.FreeBox: java.nio.ByteBuffer data>;

        $i1 = virtualinvoke $r4.<java.nio.ByteBuffer: int limit()>();

        $l2 = (long) $i1;

        l4 = l0 + $l2;

        return l4;
    }

    public java.lang.String getType()
    {
        com.coremedia.iso.boxes.FreeBox r0;

        r0 := @this: com.coremedia.iso.boxes.FreeBox;

        return "free";
    }

    public void parse(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer, long, com.coremedia.iso.BoxParser) throws java.io.IOException
    {
        com.coremedia.iso.boxes.FreeBox r0;
        java.nio.channels.ReadableByteChannel r1;
        java.nio.ByteBuffer r2, $r4;
        long l0, $l3, $l4, $l5;
        com.coremedia.iso.BoxParser r3;
        boolean $z0, $z1;
        byte $b1, $b2;
        java.lang.AssertionError $r5;
        java.nio.channels.FileChannel $r6, $r7, $r9, $r11;
        java.nio.channels.FileChannel$MapMode $r8;
        java.nio.MappedByteBuffer $r10;

        r0 := @this: com.coremedia.iso.boxes.FreeBox;

        r1 := @parameter0: java.nio.channels.ReadableByteChannel;

        r2 := @parameter1: java.nio.ByteBuffer;

        l0 := @parameter2: long;

        r3 := @parameter3: com.coremedia.iso.BoxParser;

        $z0 = r1 instanceof java.nio.channels.FileChannel;

        if $z0 == 0 goto label1;

        $b2 = l0 cmp 1048576L;

        if $b2 <= 0 goto label1;

        $r7 = (java.nio.channels.FileChannel) r1;

        $r8 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $r6 = (java.nio.channels.FileChannel) r1;

        $l3 = virtualinvoke $r6.<java.nio.channels.FileChannel: long position()>();

        $r10 = virtualinvoke $r7.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r8, $l3, l0);

        r0.<com.coremedia.iso.boxes.FreeBox: java.nio.ByteBuffer data> = $r10;

        $r11 = (java.nio.channels.FileChannel) r1;

        $r9 = (java.nio.channels.FileChannel) r1;

        $l4 = virtualinvoke $r9.<java.nio.channels.FileChannel: long position()>();

        $l5 = $l4 + l0;

        virtualinvoke $r11.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>($l5);

        goto label3;

     label1:
        $z1 = <com.coremedia.iso.boxes.FreeBox: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $b1 = l0 cmp 2147483647L;

        if $b1 < 0 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        $r4 = staticinvoke <com.coremedia.iso.ChannelHelper: java.nio.ByteBuffer readFully(java.nio.channels.ReadableByteChannel,long)>(r1, l0);

        r0.<com.coremedia.iso.boxes.FreeBox: java.nio.ByteBuffer data> = $r4;

     label3:
        return;
    }

    public void addAndReplace(com.coremedia.iso.boxes.Box)
    {
        com.coremedia.iso.boxes.FreeBox r0;
        com.coremedia.iso.boxes.Box r1;
        java.nio.ByteBuffer $r2, $r4, $r5;
        long $l0;
        int $i1;
        java.util.List $r6;

        r0 := @this: com.coremedia.iso.boxes.FreeBox;

        r1 := @parameter0: com.coremedia.iso.boxes.Box;

        $r2 = r0.<com.coremedia.iso.boxes.FreeBox: java.nio.ByteBuffer data>;

        $l0 = interfaceinvoke r1.<com.coremedia.iso.boxes.Box: long getSize()>();

        $i1 = staticinvoke <com.googlecode.mp4parser.util.CastUtils: int l2i(long)>($l0);

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i1);

        $r4 = r0.<com.coremedia.iso.boxes.FreeBox: java.nio.ByteBuffer data>;

        $r5 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        r0.<com.coremedia.iso.boxes.FreeBox: java.nio.ByteBuffer data> = $r5;

        $r6 = r0.<com.coremedia.iso.boxes.FreeBox: java.util.List replacers>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.coremedia.iso.boxes.FreeBox: java.lang.String TYPE> = "free";

        $r0 = class "com/coremedia/iso/boxes/FreeBox";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.coremedia.iso.boxes.FreeBox: boolean $assertionsDisabled> = $z1;

        return;
    }
}
