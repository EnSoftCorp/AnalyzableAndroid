class com.adobe.xmp.impl.ParameterAsserts extends java.lang.Object implements com.adobe.xmp.XMPConst
{

    private void <init>()
    {
        com.adobe.xmp.impl.ParameterAsserts r0;

        r0 := @this: com.adobe.xmp.impl.ParameterAsserts;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assertArrayName(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.XMPException $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty array name", 4);

        throw $r1;

     label2:
        return;
    }

    public static void assertPropName(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.XMPException $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty property name", 4);

        throw $r1;

     label2:
        return;
    }

    public static void assertSchemaNS(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.XMPException $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty schema namespace URI", 4);

        throw $r1;

     label2:
        return;
    }

    public static void assertPrefix(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.XMPException $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty prefix", 4);

        throw $r1;

     label2:
        return;
    }

    public static void assertSpecificLang(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.XMPException $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty specific language", 4);

        throw $r1;

     label2:
        return;
    }

    public static void assertStructName(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.XMPException $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Empty array name", 4);

        throw $r1;

     label2:
        return;
    }

    public static void assertNotNull(java.lang.Object) throws com.adobe.xmp.XMPException
    {
        java.lang.Object r0;
        boolean $z0;
        java.lang.String $r1;
        int $i0;
        com.adobe.xmp.XMPException $r2, $r3;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r3 = new com.adobe.xmp.XMPException;

        specialinvoke $r3.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Parameter must not be null", 4);

        throw $r3;

     label1:
        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r1 = (java.lang.String) r0;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        $r2 = new com.adobe.xmp.XMPException;

        specialinvoke $r2.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Parameter must not be null or empty", 4);

        throw $r2;

     label2:
        return;
    }

    public static void assertImplementation(com.adobe.xmp.XMPMeta) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPMeta r0;
        boolean $z0;
        com.adobe.xmp.XMPException $r1, $r2;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        if r0 != null goto label1;

        $r2 = new com.adobe.xmp.XMPException;

        specialinvoke $r2.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Parameter must not be null", 4);

        throw $r2;

     label1:
        $z0 = r0 instanceof com.adobe.xmp.impl.XMPMetaImpl;

        if $z0 != 0 goto label2;

        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("The XMPMeta-object is not compatible with this implementation", 4);

        throw $r1;

     label2:
        return;
    }
}
