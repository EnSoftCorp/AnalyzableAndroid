public class com.adobe.xmp.impl.XMPUtilsImpl extends java.lang.Object implements com.adobe.xmp.XMPConst
{
    private static final int UCK_NORMAL;
    private static final int UCK_SPACE;
    private static final int UCK_COMMA;
    private static final int UCK_SEMICOLON;
    private static final int UCK_QUOTE;
    private static final int UCK_CONTROL;
    private static final java.lang.String SPACES;
    private static final java.lang.String COMMAS;
    private static final java.lang.String SEMICOLA;
    private static final java.lang.String QUOTES;
    private static final java.lang.String CONTROLS;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        com.adobe.xmp.impl.XMPUtilsImpl r0;

        r0 := @this: com.adobe.xmp.impl.XMPUtilsImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String catenateArrayItems(com.adobe.xmp.XMPMeta, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPMeta r0;
        java.lang.String r1, r2, r3, r4, r9, $r16, $r18;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        com.adobe.xmp.impl.XMPMetaImpl r5;
        com.adobe.xmp.impl.xpath.XMPPath r6;
        char c0, c1;
        java.lang.StringBuffer r7, $r14;
        java.util.Iterator r8;
        com.adobe.xmp.impl.XMPNode $r10, r20, r21;
        com.adobe.xmp.options.PropertyOptions $r11, $r12, $r17;
        com.adobe.xmp.XMPException $r13, $r19;
        java.lang.Object $r15;
        int $i2, $i3;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertArrayName(java.lang.String)>(r2);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertImplementation(com.adobe.xmp.XMPMeta)>(r0);

        if r3 == null goto label01;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i3 != 0 goto label02;

     label01:
        r3 = "; ";

     label02:
        if r4 == null goto label03;

        $i2 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i2 != 0 goto label04;

     label03:
        r4 = "\"";

     label04:
        r5 = (com.adobe.xmp.impl.XMPMetaImpl) r0;

        r6 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $r10 = virtualinvoke r5.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        r20 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r10, r6, 0, null);

        if r20 != null goto label05;

        return "";

     label05:
        $r11 = virtualinvoke r20.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke $r11.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z1 == 0 goto label06;

        $r12 = virtualinvoke r20.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r12.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAlternate()>();

        if $z2 == 0 goto label07;

     label06:
        $r13 = new com.adobe.xmp.XMPException;

        specialinvoke $r13.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Named property must be non-alternate array", 4);

        throw $r13;

     label07:
        staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: void checkSeparator(java.lang.String)>(r3);

        c0 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0);

        c1 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: char checkQuotes(java.lang.String,char)>(r4, c0);

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        r7 = $r14;

        r8 = virtualinvoke r20.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label08:
        $z3 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r15 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r21 = (com.adobe.xmp.impl.XMPNode) $r15;

        $r17 = virtualinvoke r21.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z4 = virtualinvoke $r17.<com.adobe.xmp.options.PropertyOptions: boolean isCompositeProperty()>();

        if $z4 == 0 goto label09;

        $r19 = new com.adobe.xmp.XMPException;

        specialinvoke $r19.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Array items must be simple", 4);

        throw $r19;

     label09:
        $r18 = virtualinvoke r21.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        r9 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: java.lang.String applyQuotes(java.lang.String,char,char,boolean)>($r18, c0, c1, z0);

        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);

        $z5 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label10;

        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

     label10:
        goto label08;

     label11:
        $r16 = virtualinvoke r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r16;
    }

    public static void separateArrayItems(com.adobe.xmp.XMPMeta, java.lang.String, java.lang.String, java.lang.String, com.adobe.xmp.options.PropertyOptions, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPMeta r0;
        java.lang.String r1, r2, r3, r7, $r10;
        com.adobe.xmp.options.PropertyOptions r4;
        boolean z0, $z1, $z2, $z3;
        com.adobe.xmp.impl.XMPMetaImpl r5;
        com.adobe.xmp.impl.XMPNode r6, $r8, $r9, r21;
        int i0, i1, i2, i4, $i7, $i8, $i9, $i10, $i11, i12, i13, i15, i16;
        char c3, c5, c6, c14;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        com.adobe.xmp.XMPException $r20;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: com.adobe.xmp.options.PropertyOptions;

        z0 := @parameter5: boolean;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertSchemaNS(java.lang.String)>(r1);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertArrayName(java.lang.String)>(r2);

        if r3 != null goto label01;

        $r20 = new com.adobe.xmp.XMPException;

        specialinvoke $r20.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Parameter must not be null", 4);

        throw $r20;

     label01:
        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertImplementation(com.adobe.xmp.XMPMeta)>(r0);

        r5 = (com.adobe.xmp.impl.XMPMetaImpl) r0;

        r6 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: com.adobe.xmp.impl.XMPNode separateFindCreateArray(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions,com.adobe.xmp.impl.XMPMetaImpl)>(r1, r2, r4, r5);

        i2 = 0;

        c3 = 0;

        i1 = 0;

        i4 = virtualinvoke r3.<java.lang.String: int length()>();

     label02:
        if i1 >= i4 goto label26;

        i0 = i1;

     label03:
        if i0 >= i4 goto label05;

        c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i0);

        i2 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>(c3);

        if i2 == 0 goto label05;

        if i2 != 4 goto label04;

        goto label05;

     label04:
        i0 = i0 + 1;

        goto label03;

     label05:
        if i0 < i4 goto label06;

        goto label26;

     label06:
        if i2 == 4 goto label12;

        i1 = i0;

     label07:
        if i1 >= i4 goto label11;

        c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i1);

        i2 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>(c3);

        if i2 == 0 goto label10;

        if i2 == 4 goto label10;

        if i2 != 2 goto label08;

        if z0 == 0 goto label08;

        goto label10;

     label08:
        if i2 == 1 goto label09;

        goto label11;

     label09:
        $i11 = i1 + 1;

        if $i11 >= i4 goto label11;

        $i10 = i1 + 1;

        c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i10);

        i12 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>(c3);

        if i12 == 0 goto label10;

        if i12 == 4 goto label10;

        if i12 != 2 goto label11;

        if z0 == 0 goto label11;

     label10:
        i1 = i1 + 1;

        goto label07;

     label11:
        r7 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        goto label21;

     label12:
        c6 = c3;

        c5 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: char getClosingQuote(char)>(c6);

        i13 = i0 + 1;

        r7 = "";

        i1 = i13;

     label13:
        if i1 >= i4 goto label21;

        c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i1);

        i2 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>(c3);

        if i2 != 4 goto label14;

        $z3 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean isSurroundingQuote(char,char,char)>(c3, c6, c5);

        if $z3 != 0 goto label15;

     label14:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        r7 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label20;

     label15:
        $i8 = i1 + 1;

        if $i8 >= i4 goto label16;

        $i9 = i1 + 1;

        c14 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i9);

        staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>(c14);

        goto label17;

     label16:
        c14 = 59;

     label17:
        if c3 != c14 goto label18;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        r7 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

        goto label20;

     label18:
        $z2 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean isClosingingQuote(char,char,char)>(c3, c6, c5);

        if $z2 != 0 goto label19;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        r7 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label20;

     label19:
        i1 = i1 + 1;

        goto label21;

     label20:
        i1 = i1 + 1;

        goto label13;

     label21:
        i15 = -1;

        i16 = 1;

     label22:
        $i7 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if i16 > $i7 goto label24;

        $r8 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getChild(int)>(i16);

        $r10 = virtualinvoke $r8.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z1 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label23;

        i15 = i16;

        goto label24;

     label23:
        i16 = i16 + 1;

        goto label22;

     label24:
        if i15 >= 0 goto label25;

        $r9 = new com.adobe.xmp.impl.XMPNode;

        specialinvoke $r9.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>("[]", r7, null);

        r21 = $r9;

        virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>(r21);

     label25:
        goto label02;

     label26:
        return;
    }

    private static com.adobe.xmp.impl.XMPNode separateFindCreateArray(java.lang.String, java.lang.String, com.adobe.xmp.options.PropertyOptions, com.adobe.xmp.impl.XMPMetaImpl) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0, r1;
        com.adobe.xmp.options.PropertyOptions r2, r6, $r9, r14;
        com.adobe.xmp.impl.XMPMetaImpl r3;
        com.adobe.xmp.impl.xpath.XMPPath r4;
        com.adobe.xmp.impl.XMPNode r5, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;
        com.adobe.xmp.XMPException $r10, $r11, $r12, $r13;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.adobe.xmp.options.PropertyOptions;

        r3 := @parameter3: com.adobe.xmp.impl.XMPMetaImpl;

        r14 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.options.PropertyOptions verifySetOptions(com.adobe.xmp.options.PropertyOptions,java.lang.Object)>(r2, null);

        $z0 = virtualinvoke r14.<com.adobe.xmp.options.PropertyOptions: boolean isOnlyArrayOptions()>();

        if $z0 != 0 goto label1;

        $r12 = new com.adobe.xmp.XMPException;

        specialinvoke $r12.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Options can only provide array form", 103);

        throw $r12;

     label1:
        r4 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r0, r1);

        $r7 = virtualinvoke r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        r5 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r7, r4, 0, null);

        if r5 == null goto label5;

        r6 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z1 = virtualinvoke r6.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z1 == 0 goto label2;

        $z3 = virtualinvoke r6.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAlternate()>();

        if $z3 == 0 goto label3;

     label2:
        $r11 = new com.adobe.xmp.XMPException;

        specialinvoke $r11.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Named property must be non-alternate array", 102);

        throw $r11;

     label3:
        $z2 = virtualinvoke r14.<com.adobe.xmp.options.PropertyOptions: boolean equalArrayTypes(com.adobe.xmp.options.PropertyOptions)>(r6);

        if $z2 == 0 goto label4;

        $r13 = new com.adobe.xmp.XMPException;

        specialinvoke $r13.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Mismatch of specified and existing array form", 102);

        throw $r13;

     label4:
        goto label6;

     label5:
        $r8 = virtualinvoke r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r9 = virtualinvoke r14.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArray(boolean)>(1);

        r5 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r8, r4, 1, $r9);

        if r5 != null goto label6;

        $r10 = new com.adobe.xmp.XMPException;

        specialinvoke $r10.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Failed to create named array", 102);

        throw $r10;

     label6:
        return r5;
    }

    public static void removeProperties(com.adobe.xmp.XMPMeta, java.lang.String, java.lang.String, boolean, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPMeta r0;
        java.lang.String r1, r2, $r15, $r16, $r24, $r25;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.adobe.xmp.impl.XMPMetaImpl r3;
        com.adobe.xmp.impl.xpath.XMPPath r4, r8;
        com.adobe.xmp.impl.XMPNode r5, r6, r9, r10, $r11, $r13, $r17, $r18, $r21, $r22, r27, r30;
        com.adobe.xmp.properties.XMPAliasInfo r7;
        java.lang.Object $r12;
        int $i0, $i1, $i2, $i3, i4;
        com.adobe.xmp.XMPSchemaRegistry $r14;
        com.adobe.xmp.XMPException $r19;
        com.adobe.xmp.options.PropertyOptions $r20;
        com.adobe.xmp.impl.xpath.XMPPathSegment $r23, $r26;
        com.adobe.xmp.properties.XMPAliasInfo[] r28;
        java.util.Iterator r29;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertImplementation(com.adobe.xmp.XMPMeta)>(r0);

        r3 = (com.adobe.xmp.impl.XMPMetaImpl) r0;

        if r2 == null goto label05;

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i3 <= 0 goto label05;

        if r1 == null goto label01;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 != 0 goto label02;

     label01:
        $r19 = new com.adobe.xmp.XMPException;

        specialinvoke $r19.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Property name requires schema namespace", 4);

        throw $r19;

     label02:
        r4 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>(r1, r2);

        $r21 = virtualinvoke r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        r5 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r21, r4, 0, null);

        if r5 == null goto label04;

        if z0 != 0 goto label03;

        $r23 = virtualinvoke r4.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(0);

        $r25 = virtualinvoke $r23.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $r26 = virtualinvoke r4.<com.adobe.xmp.impl.xpath.XMPPath: com.adobe.xmp.impl.xpath.XMPPathSegment getSegment(int)>(1);

        $r24 = virtualinvoke $r26.<com.adobe.xmp.impl.xpath.XMPPathSegment: java.lang.String getName()>();

        $z7 = staticinvoke <com.adobe.xmp.impl.Utils: boolean isInternalProperty(java.lang.String,java.lang.String)>($r25, $r24);

        if $z7 != 0 goto label04;

     label03:
        r6 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r5);

        $r20 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z5 = virtualinvoke $r20.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z5 == 0 goto label04;

        $z6 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z6 != 0 goto label04;

        $r22 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        virtualinvoke $r22.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r6);

     label04:
        goto label13;

     label05:
        if r1 == null goto label10;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label10;

        $r13 = virtualinvoke r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        r27 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>($r13, r1, 0);

        if r27 == null goto label06;

        $z4 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean removeSchemaChildren(com.adobe.xmp.impl.XMPNode,boolean)>(r27, z0);

        if $z4 == 0 goto label06;

        $r18 = virtualinvoke r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        virtualinvoke $r18.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r27);

     label06:
        if z1 == 0 goto label09;

        $r14 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()>();

        r28 = interfaceinvoke $r14.<com.adobe.xmp.XMPSchemaRegistry: com.adobe.xmp.properties.XMPAliasInfo[] findAliases(java.lang.String)>(r1);

        i4 = 0;

     label07:
        $i1 = lengthof r28;

        if i4 >= $i1 goto label09;

        r7 = r28[i4];

        $r16 = interfaceinvoke r7.<com.adobe.xmp.properties.XMPAliasInfo: java.lang.String getNamespace()>();

        $r15 = interfaceinvoke r7.<com.adobe.xmp.properties.XMPAliasInfo: java.lang.String getPropName()>();

        r8 = staticinvoke <com.adobe.xmp.impl.xpath.XMPPathParser: com.adobe.xmp.impl.xpath.XMPPath expandXPath(java.lang.String,java.lang.String)>($r16, $r15);

        $r17 = virtualinvoke r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        r9 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findNode(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.xpath.XMPPath,boolean,com.adobe.xmp.options.PropertyOptions)>($r17, r8, 0, null);

        if r9 == null goto label08;

        r10 = virtualinvoke r9.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        virtualinvoke r10.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r9);

     label08:
        i4 = i4 + 1;

        goto label07;

     label09:
        goto label13;

     label10:
        $r11 = virtualinvoke r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        r29 = virtualinvoke $r11.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label11:
        $z2 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r12 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r30 = (com.adobe.xmp.impl.XMPNode) $r12;

        $z3 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean removeSchemaChildren(com.adobe.xmp.impl.XMPNode,boolean)>(r30, z0);

        if $z3 == 0 goto label12;

        interfaceinvoke r29.<java.util.Iterator: void remove()>();

     label12:
        goto label11;

     label13:
        return;
    }

    public static void appendProperties(com.adobe.xmp.XMPMeta, com.adobe.xmp.XMPMeta, boolean, boolean, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPMeta r0, r1;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7;
        com.adobe.xmp.impl.XMPMetaImpl r2, r3;
        java.util.Iterator r4, r7;
        com.adobe.xmp.impl.XMPNode r5, r6, r8, $r9, $r10, $r13, $r18, $r22;
        java.lang.Object $r11, $r15;
        java.lang.String $r12, $r14, $r16, $r17, $r20;
        com.adobe.xmp.options.PropertyOptions $r19, $r21;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r1 := @parameter1: com.adobe.xmp.XMPMeta;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertImplementation(com.adobe.xmp.XMPMeta)>(r0);

        staticinvoke <com.adobe.xmp.impl.ParameterAsserts: void assertImplementation(com.adobe.xmp.XMPMeta)>(r1);

        r2 = (com.adobe.xmp.impl.XMPMetaImpl) r0;

        r3 = (com.adobe.xmp.impl.XMPMetaImpl) r1;

        $r9 = virtualinvoke r2.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        r4 = virtualinvoke $r9.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z4 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label9;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.adobe.xmp.impl.XMPNode) $r11;

        $r10 = virtualinvoke r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        $r12 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        r6 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findSchemaNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>($r10, $r12, 0);

        z3 = 0;

        if r6 != null goto label2;

        $r18 = new com.adobe.xmp.impl.XMPNode;

        $r17 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r20 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r19 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r19.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        $r21 = virtualinvoke $r19.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setSchemaNode(boolean)>(1);

        specialinvoke $r18.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>($r17, $r20, $r21);

        r6 = $r18;

        $r22 = virtualinvoke r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        virtualinvoke $r22.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>(r6);

        z3 = 1;

     label2:
        r7 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label3:
        $z5 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label6;

        $r15 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.adobe.xmp.impl.XMPNode) $r15;

        if z0 != 0 goto label4;

        $r14 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r16 = virtualinvoke r8.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z7 = staticinvoke <com.adobe.xmp.impl.Utils: boolean isInternalProperty(java.lang.String,java.lang.String)>($r14, $r16);

        if $z7 != 0 goto label5;

     label4:
        staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: void appendSubtree(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode,boolean,boolean)>(r3, r8, r6, z1, z2);

     label5:
        goto label3;

     label6:
        $z6 = virtualinvoke r6.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z6 != 0 goto label8;

        if z3 != 0 goto label7;

        if z2 == 0 goto label8;

     label7:
        $r13 = virtualinvoke r3.<com.adobe.xmp.impl.XMPMetaImpl: com.adobe.xmp.impl.XMPNode getRoot()>();

        virtualinvoke $r13.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r6);

     label8:
        goto label1;

     label9:
        return;
    }

    private static boolean removeSchemaChildren(com.adobe.xmp.impl.XMPNode, boolean)
    {
        com.adobe.xmp.impl.XMPNode r0, r2;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.Iterator r1;
        java.lang.Object $r3;
        java.lang.String $r4, $r5;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        z0 := @parameter1: boolean;

        r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.adobe.xmp.impl.XMPNode) $r3;

        if z0 != 0 goto label2;

        $r4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r5 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z4 = staticinvoke <com.adobe.xmp.impl.Utils: boolean isInternalProperty(java.lang.String,java.lang.String)>($r4, $r5);

        if $z4 != 0 goto label3;

     label2:
        interfaceinvoke r1.<java.util.Iterator: void remove()>();

     label3:
        goto label1;

     label4:
        $z2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z2 != 0 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        return $z3;
    }

    private static void appendSubtree(com.adobe.xmp.impl.XMPMetaImpl, com.adobe.xmp.impl.XMPNode, com.adobe.xmp.impl.XMPNode, boolean, boolean) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPMetaImpl r0;
        com.adobe.xmp.impl.XMPNode r1, r2, r3, r7, r8, r9, $r15, $r19, $r22, $r25, $r34, r38, r40, r42;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, z20;
        com.adobe.xmp.options.PropertyOptions r4, r5, $r28, $r31, $r33;
        java.util.Iterator r6, r39, r41, r43;
        int i0, $i1, $i2;
        java.lang.String $r10, $r16, $r17, $r18, $r20, $r21, $r23, $r24, $r26, $r27, $r32, $r36, $r37;
        java.lang.Object $r11, $r12, $r13, $r14, $r29, $r30, $r35;

        r0 := @parameter0: com.adobe.xmp.impl.XMPMetaImpl;

        r1 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter2: com.adobe.xmp.impl.XMPNode;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r10 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        r3 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r2, $r10, 0);

        z2 = 0;

        if z1 == 0 goto label06;

        $r33 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z17 = virtualinvoke $r33.<com.adobe.xmp.options.PropertyOptions: boolean isSimple()>();

        if $z17 == 0 goto label03;

        $r36 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        if $r36 == null goto label01;

        $r37 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $i2 = virtualinvoke $r37.<java.lang.String: int length()>();

        if $i2 != 0 goto label02;

     label01:
        $z19 = 1;

        goto label05;

     label02:
        $z19 = 0;

        goto label05;

     label03:
        $z18 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z18 != 0 goto label04;

        $z19 = 1;

        goto label05;

     label04:
        $z19 = 0;

     label05:
        z2 = $z19;

     label06:
        if z1 == 0 goto label07;

        if z2 == 0 goto label07;

        if r3 == null goto label29;

        virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r3);

        goto label29;

     label07:
        if r3 != null goto label08;

        $r35 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.Object clone()>();

        $r34 = (com.adobe.xmp.impl.XMPNode) $r35;

        virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>($r34);

        goto label29;

     label08:
        if z0 == 0 goto label09;

        $r32 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r31 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke r0.<com.adobe.xmp.impl.XMPMetaImpl: void setNode(com.adobe.xmp.impl.XMPNode,java.lang.Object,com.adobe.xmp.options.PropertyOptions,boolean)>(r3, $r32, $r31, 1);

        virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r3);

        $r30 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.Object clone()>();

        r38 = (com.adobe.xmp.impl.XMPNode) $r30;

        virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>(r38);

        goto label29;

     label09:
        r4 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        r5 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        if r4 == r5 goto label10;

        return;

     label10:
        $z4 = virtualinvoke r4.<com.adobe.xmp.options.PropertyOptions: boolean isStruct()>();

        if $z4 == 0 goto label14;

        r6 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label11:
        $z15 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label13;

        $r29 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.adobe.xmp.impl.XMPNode) $r29;

        staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: void appendSubtree(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode,boolean,boolean)>(r0, r7, r3, z0, z1);

        if z1 == 0 goto label12;

        $z16 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z16 != 0 goto label12;

        virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r3);

     label12:
        goto label11;

     label13:
        goto label29;

     label14:
        $z3 = virtualinvoke r4.<com.adobe.xmp.options.PropertyOptions: boolean isArrayAltText()>();

        if $z3 == 0 goto label23;

        r39 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label15:
        $z9 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label22;

        $r14 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r40 = (com.adobe.xmp.impl.XMPNode) $r14;

        $z10 = virtualinvoke r40.<com.adobe.xmp.impl.XMPNode: boolean hasQualifier()>();

        if $z10 == 0 goto label15;

        $r17 = "xml:lang";

        $r15 = virtualinvoke r40.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r16 = virtualinvoke $r15.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z11 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z11 != 0 goto label16;

        goto label15;

     label16:
        $r19 = virtualinvoke r40.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r18 = virtualinvoke $r19.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        i0 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: int lookupLanguageItem(com.adobe.xmp.impl.XMPNode,java.lang.String)>(r3, $r18);

        if z1 == 0 goto label18;

        $r27 = virtualinvoke r40.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        if $r27 == null goto label17;

        $r26 = virtualinvoke r40.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $i1 = virtualinvoke $r26.<java.lang.String: int length()>();

        if $i1 != 0 goto label18;

     label17:
        if i0 == -1 goto label21;

        virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: void removeChild(int)>(i0);

        $z14 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z14 != 0 goto label21;

        virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: void removeChild(com.adobe.xmp.impl.XMPNode)>(r3);

        goto label21;

     label18:
        if i0 != -1 goto label21;

        $r21 = "x-default";

        $r22 = virtualinvoke r40.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r20 = virtualinvoke $r22.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z12 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z12 == 0 goto label19;

        $z13 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z13 != 0 goto label20;

     label19:
        virtualinvoke r40.<com.adobe.xmp.impl.XMPNode: void cloneSubtree(com.adobe.xmp.impl.XMPNode)>(r3);

        goto label21;

     label20:
        $r25 = new com.adobe.xmp.impl.XMPNode;

        $r23 = virtualinvoke r40.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $r24 = virtualinvoke r40.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r28 = virtualinvoke r40.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        specialinvoke $r25.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>($r23, $r24, $r28);

        r8 = $r25;

        virtualinvoke r40.<com.adobe.xmp.impl.XMPNode: void cloneSubtree(com.adobe.xmp.impl.XMPNode)>(r8);

        virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: void addChild(int,com.adobe.xmp.impl.XMPNode)>(1, r8);

     label21:
        goto label15;

     label22:
        goto label29;

     label23:
        $z5 = virtualinvoke r4.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z5 == 0 goto label29;

        r41 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label24:
        $z6 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label29;

        $r11 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>();

        r42 = (com.adobe.xmp.impl.XMPNode) $r11;

        z20 = 0;

        r43 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label25:
        $z7 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label27;

        $r12 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.adobe.xmp.impl.XMPNode) $r12;

        $z8 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean itemValuesMatch(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode)>(r42, r9);

        if $z8 == 0 goto label26;

        z20 = 1;

     label26:
        goto label25;

     label27:
        if z20 != 0 goto label28;

        $r13 = virtualinvoke r42.<com.adobe.xmp.impl.XMPNode: java.lang.Object clone()>();

        r3 = (com.adobe.xmp.impl.XMPNode) $r13;

        virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>(r3);

     label28:
        goto label24;

     label29:
        return;
    }

    private static boolean itemValuesMatch(com.adobe.xmp.impl.XMPNode, com.adobe.xmp.impl.XMPNode) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r0, r1, r5, r6, r8, $r20, $r21, r24;
        com.adobe.xmp.options.PropertyOptions r2, r3, $r14, $r17, $r18;
        java.util.Iterator r4, r7, r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14;
        int $i0, $i1, $i2;
        java.lang.Object $r9, $r10, $r13;
        java.lang.AssertionError $r11;
        java.lang.String $r12, $r15, $r16, $r19, $r22;

        r0 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter1: com.adobe.xmp.impl.XMPNode;

        r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        r3 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke r2.<com.adobe.xmp.options.PropertyOptions: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $i0 = virtualinvoke r2.<com.adobe.xmp.options.PropertyOptions: int getOptions()>();

        if $i0 != 0 goto label04;

        $r15 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r16 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z9 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z9 != 0 goto label02;

        return 0;

     label02:
        $r14 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z11 = virtualinvoke $r14.<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()>();

        $r18 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z10 = virtualinvoke $r18.<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()>();

        if $z11 == $z10 goto label03;

        return 0;

     label03:
        $r17 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z12 = virtualinvoke $r17.<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()>();

        if $z12 == 0 goto label17;

        $r21 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r19 = virtualinvoke $r21.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $r20 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getQualifier(int)>(1);

        $r22 = virtualinvoke $r20.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $z13 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z13 != 0 goto label17;

        return 0;

     label04:
        $z1 = virtualinvoke r2.<com.adobe.xmp.options.PropertyOptions: boolean isStruct()>();

        if $z1 == 0 goto label10;

        $i2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        $i1 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        if $i2 == $i1 goto label05;

        return 0;

     label05:
        r4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label06:
        $z7 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label09;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.adobe.xmp.impl.XMPNode) $r13;

        $r12 = virtualinvoke r5.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        r6 = staticinvoke <com.adobe.xmp.impl.XMPNodeUtils: com.adobe.xmp.impl.XMPNode findChildNode(com.adobe.xmp.impl.XMPNode,java.lang.String,boolean)>(r1, $r12, 0);

        if r6 == null goto label07;

        $z8 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean itemValuesMatch(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode)>(r5, r6);

        if $z8 != 0 goto label08;

     label07:
        return 0;

     label08:
        goto label06;

     label09:
        goto label17;

     label10:
        $z2 = <com.adobe.xmp.impl.XMPUtilsImpl: boolean $assertionsDisabled>;

        if $z2 != 0 goto label11;

        $z6 = virtualinvoke r2.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z6 != 0 goto label11;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label11:
        r23 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label12:
        $z3 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label17;

        $r9 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.adobe.xmp.impl.XMPNode) $r9;

        z14 = 0;

        r7 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label13:
        $z4 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label15;

        $r10 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.adobe.xmp.impl.XMPNode) $r10;

        $z5 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean itemValuesMatch(com.adobe.xmp.impl.XMPNode,com.adobe.xmp.impl.XMPNode)>(r24, r8);

        if $z5 == 0 goto label14;

        z14 = 1;

        goto label15;

     label14:
        goto label13;

     label15:
        if z14 != 0 goto label16;

        return 0;

     label16:
        goto label12;

     label17:
        return 1;
    }

    private static void checkSeparator(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        boolean z0;
        int i0, i1, $i2;
        com.adobe.xmp.XMPException $r1, $r2, $r3;
        char $c3;

        r0 := @parameter0: java.lang.String;

        z0 = 0;

        i0 = 0;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i2 goto label5;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        i1 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>($c3);

        if i1 != 3 goto label3;

        if z0 == 0 goto label2;

        $r3 = new com.adobe.xmp.XMPException;

        specialinvoke $r3.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Separator can have only one semicolon", 4);

        throw $r3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        if i1 == 1 goto label4;

        $r2 = new com.adobe.xmp.XMPException;

        specialinvoke $r2.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Separator can have only spaces and one semicolon", 4);

        throw $r2;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        if z0 != 0 goto label6;

        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Separator must have one semicolon", 4);

        throw $r1;

     label6:
        return;
    }

    private static char checkQuotes(java.lang.String, char) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        char c0, c1, $c4;
        int i2, $i3, i5;
        com.adobe.xmp.XMPException $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        i2 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>(c0);

        if i2 == 4 goto label1;

        $r3 = new com.adobe.xmp.XMPException;

        specialinvoke $r3.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid quoting character", 4);

        throw $r3;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i3 != 1 goto label2;

        c1 = c0;

        goto label3;

     label2:
        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        i5 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>(c1);

        if i5 == 4 goto label3;

        $r2 = new com.adobe.xmp.XMPException;

        specialinvoke $r2.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Invalid quoting character", 4);

        throw $r2;

     label3:
        $c4 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: char getClosingQuote(char)>(c0);

        if c1 == $c4 goto label4;

        $r1 = new com.adobe.xmp.XMPException;

        specialinvoke $r1.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>("Mismatched quote pair", 4);

        throw $r1;

     label4:
        return c1;
    }

    private static int classifyCharacter(char)
    {
        char c0;
        java.lang.String $r0, $r1, $r2, $r3, $r4;
        int $i1, $i2, $i3, $i4, $i5;

        c0 := @parameter0: char;

        $r0 = " \u3000\u303f";

        $i1 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(c0);

        if $i1 >= 0 goto label1;

        if 8192 > c0 goto label2;

        if c0 > 8203 goto label2;

     label1:
        return 1;

     label2:
        $r1 = ",\uff0c\uff64\ufe50\ufe51\u3001\u060c\u055d";

        $i2 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(c0);

        if $i2 < 0 goto label3;

        return 2;

     label3:
        $r2 = ";\uff1b\ufe54\u061b\u037e";

        $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(c0);

        if $i3 < 0 goto label4;

        return 3;

     label4:
        $r3 = "\"[]\u00ab\u00bb\u301d\u301e\u301f\u2015\u2039\u203a";

        $i4 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(c0);

        if $i4 >= 0 goto label6;

        if 12296 > c0 goto label5;

        if c0 <= 12303 goto label6;

     label5:
        if 8216 > c0 goto label7;

        if c0 > 8223 goto label7;

     label6:
        return 4;

     label7:
        if c0 < 32 goto label8;

        $r4 = "\u2028\u2029";

        $i5 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(c0);

        if $i5 < 0 goto label9;

     label8:
        return 5;

     label9:
        return 0;
    }

    private static char getClosingQuote(char)
    {
        char c0;

        c0 := @parameter0: char;

        lookupswitch(c0)
        {
            case 34: goto label01;
            case 91: goto label02;
            case 171: goto label03;
            case 187: goto label04;
            case 8213: goto label05;
            case 8216: goto label06;
            case 8218: goto label07;
            case 8220: goto label08;
            case 8222: goto label09;
            case 8249: goto label10;
            case 8250: goto label11;
            case 12296: goto label12;
            case 12298: goto label13;
            case 12300: goto label14;
            case 12302: goto label15;
            case 12317: goto label16;
            default: goto label17;
        };

     label01:
        return 34;

     label02:
        return 93;

     label03:
        return 187;

     label04:
        return 171;

     label05:
        return 8213;

     label06:
        return 8217;

     label07:
        return 8219;

     label08:
        return 8221;

     label09:
        return 8223;

     label10:
        return 8250;

     label11:
        return 8249;

     label12:
        return 12297;

     label13:
        return 12299;

     label14:
        return 12301;

     label15:
        return 12303;

     label16:
        return 12319;

     label17:
        return 0;
    }

    private static java.lang.String applyQuotes(java.lang.String, char, char, boolean)
    {
        java.lang.String r0, $r4;
        char c0, c1, c5, $c12, $c13, $c14, $c16, $c17;
        boolean z0, z1, $z2;
        int i2, i3, i4, i6, $i7, $i8, $i9, $i10, $i11, $i15, $i18;
        java.lang.StringBuffer $r1, $r2, r8;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        c1 := @parameter2: char;

        z0 := @parameter3: boolean;

        if r0 != null goto label01;

        r0 = "";

     label01:
        z1 = 0;

        i4 = 0;

     label02:
        $i7 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 >= $i7 goto label07;

        c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        i3 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>(c5);

        if i4 != 0 goto label03;

        if i3 != 4 goto label03;

        goto label07;

     label03:
        if i3 != 1 goto label05;

        if z1 == 0 goto label04;

        goto label07;

     label04:
        z1 = 1;

        goto label06;

     label05:
        z1 = 0;

        if i3 == 3 goto label07;

        if i3 == 5 goto label07;

        if i3 != 2 goto label06;

        if z0 != 0 goto label06;

        goto label07;

     label06:
        i4 = i4 + 1;

        goto label02;

     label07:
        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 >= $i8 goto label14;

        $r1 = new java.lang.StringBuffer;

        $i9 = virtualinvoke r0.<java.lang.String: int length()>();

        $i10 = $i9 + 2;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>($i10);

        r8 = $r1;

        i6 = 0;

     label08:
        if i6 > i4 goto label10;

        $c17 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i18 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>($c17);

        if $i18 != 4 goto label09;

        goto label10;

     label09:
        i6 = i6 + 1;

        goto label08;

     label10:
        $r2 = virtualinvoke r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i6);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        i2 = i6;

     label11:
        $i11 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i11 goto label13;

        $c12 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        virtualinvoke r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c12);

        $c13 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i15 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: int classifyCharacter(char)>($c13);

        if $i15 != 4 goto label12;

        $c14 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z2 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean isSurroundingQuote(char,char,char)>($c14, c0, c1);

        if $z2 == 0 goto label12;

        $c16 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        virtualinvoke r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c16);

     label12:
        i2 = i2 + 1;

        goto label11;

     label13:
        virtualinvoke r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        r0 = virtualinvoke r8.<java.lang.StringBuffer: java.lang.String toString()>();

     label14:
        return r0;
    }

    private static boolean isSurroundingQuote(char, char, char)
    {
        char c0, c1, c2;
        boolean $z0, $z1;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        c2 := @parameter2: char;

        if c0 == c1 goto label1;

        $z0 = staticinvoke <com.adobe.xmp.impl.XMPUtilsImpl: boolean isClosingingQuote(char,char,char)>(c0, c1, c2);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static boolean isClosingingQuote(char, char, char)
    {
        char c0, c1, c2;
        boolean $z0;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        c2 := @parameter2: char;

        if c0 == c2 goto label2;

        if c1 != 12317 goto label1;

        if c0 == 12318 goto label2;

     label1:
        if c0 != 12319 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.adobe.xmp.impl.XMPUtilsImpl: java.lang.String CONTROLS> = "\u2028\u2029";

        <com.adobe.xmp.impl.XMPUtilsImpl: java.lang.String QUOTES> = "\"[]\u00ab\u00bb\u301d\u301e\u301f\u2015\u2039\u203a";

        <com.adobe.xmp.impl.XMPUtilsImpl: java.lang.String SEMICOLA> = ";\uff1b\ufe54\u061b\u037e";

        <com.adobe.xmp.impl.XMPUtilsImpl: java.lang.String COMMAS> = ",\uff0c\uff64\ufe50\ufe51\u3001\u060c\u055d";

        <com.adobe.xmp.impl.XMPUtilsImpl: java.lang.String SPACES> = " \u3000\u303f";

        <com.adobe.xmp.impl.XMPUtilsImpl: int UCK_CONTROL> = 5;

        <com.adobe.xmp.impl.XMPUtilsImpl: int UCK_QUOTE> = 4;

        <com.adobe.xmp.impl.XMPUtilsImpl: int UCK_SEMICOLON> = 3;

        <com.adobe.xmp.impl.XMPUtilsImpl: int UCK_COMMA> = 2;

        <com.adobe.xmp.impl.XMPUtilsImpl: int UCK_SPACE> = 1;

        <com.adobe.xmp.impl.XMPUtilsImpl: int UCK_NORMAL> = 0;

        $r0 = class "com/adobe/xmp/impl/XMPUtilsImpl";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.adobe.xmp.impl.XMPUtilsImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
