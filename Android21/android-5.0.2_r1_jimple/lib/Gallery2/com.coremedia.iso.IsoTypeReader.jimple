public final class com.coremedia.iso.IsoTypeReader extends java.lang.Object
{

    public void <init>()
    {
        com.coremedia.iso.IsoTypeReader r0;

        r0 := @this: com.coremedia.iso.IsoTypeReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long readUInt32BE(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        long l0, l1, l2, l3, $l8, $l9, $l10, $l11, $l12, $l13, $l14;
        int $i4, $i5, $i6, $i7;

        r0 := @parameter0: java.nio.ByteBuffer;

        $i4 = staticinvoke <com.coremedia.iso.IsoTypeReader: int readUInt8(java.nio.ByteBuffer)>(r0);

        l0 = (long) $i4;

        $i5 = staticinvoke <com.coremedia.iso.IsoTypeReader: int readUInt8(java.nio.ByteBuffer)>(r0);

        l1 = (long) $i5;

        $i6 = staticinvoke <com.coremedia.iso.IsoTypeReader: int readUInt8(java.nio.ByteBuffer)>(r0);

        l2 = (long) $i6;

        $i7 = staticinvoke <com.coremedia.iso.IsoTypeReader: int readUInt8(java.nio.ByteBuffer)>(r0);

        l3 = (long) $i7;

        $l9 = l3 << 24;

        $l8 = l2 << 16;

        $l12 = $l9 + $l8;

        $l10 = l1 << 8;

        $l14 = $l12 + $l10;

        $l11 = l0 << 0;

        $l13 = $l14 + $l11;

        return $l13;
    }

    public static long readUInt32(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        long l0;
        int $i1;
        byte $b2;

        r0 := @parameter0: java.nio.ByteBuffer;

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int getInt()>();

        l0 = (long) $i1;

        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label1;

        l0 = l0 + 4294967296L;

     label1:
        return l0;
    }

    public static int readUInt24(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        byte b0, $b3;
        int $i1, $i2, $i4, i5, i6;

        r0 := @parameter0: java.nio.ByteBuffer;

        b0 = 0;

        $i1 = staticinvoke <com.coremedia.iso.IsoTypeReader: int readUInt16(java.nio.ByteBuffer)>(r0);

        $i2 = $i1 << 8;

        i5 = b0 + $i2;

        $b3 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i4 = staticinvoke <com.coremedia.iso.IsoTypeReader: int byte2int(byte)>($b3);

        i6 = i5 + $i4;

        return i6;
    }

    public static int readUInt16(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        byte b0, $b1, $b4;
        int $i2, $i3, $i5, i6, i7;

        r0 := @parameter0: java.nio.ByteBuffer;

        b0 = 0;

        $b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i2 = staticinvoke <com.coremedia.iso.IsoTypeReader: int byte2int(byte)>($b1);

        $i3 = $i2 << 8;

        i6 = b0 + $i3;

        $b4 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i5 = staticinvoke <com.coremedia.iso.IsoTypeReader: int byte2int(byte)>($b4);

        i7 = i6 + $i5;

        return i7;
    }

    public static int readUInt16BE(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        byte b0, $b1, $b3;
        int $i2, $i4, $i5, i6, i7;

        r0 := @parameter0: java.nio.ByteBuffer;

        b0 = 0;

        $b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i2 = staticinvoke <com.coremedia.iso.IsoTypeReader: int byte2int(byte)>($b1);

        i6 = b0 + $i2;

        $b3 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i4 = staticinvoke <com.coremedia.iso.IsoTypeReader: int byte2int(byte)>($b3);

        $i5 = $i4 << 8;

        i7 = i6 + $i5;

        return i7;
    }

    public static int readUInt8(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        byte $b0;
        int $i1;

        r0 := @parameter0: java.nio.ByteBuffer;

        $b0 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i1 = staticinvoke <com.coremedia.iso.IsoTypeReader: int byte2int(byte)>($b0);

        return $i1;
    }

    public static int byte2int(byte)
    {
        byte b0;
        int $i1;

        b0 := @parameter0: byte;

        if b0 >= 0 goto label1;

        $i1 = b0 + 256;

        goto label2;

     label1:
        $i1 = b0;

     label2:
        return $i1;
    }

    public static java.lang.String readString(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        java.io.ByteArrayOutputStream r1, $r2;
        byte b0, $b1;
        byte[] $r3;
        java.lang.String $r4;

        r0 := @parameter0: java.nio.ByteBuffer;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        r1 = $r2;

     label1:
        $b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        b0 = $b1;

        if $b1 == 0 goto label2;

        virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(int)>(b0);

        goto label1;

     label2:
        $r3 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r4 = staticinvoke <com.coremedia.iso.Utf8: java.lang.String convert(byte[])>($r3);

        return $r4;
    }

    public static java.lang.String readString(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0;
        byte[] r1;
        java.lang.String $r3;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        r1 = newarray (byte)[i0];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r1);

        $r3 = staticinvoke <com.coremedia.iso.Utf8: java.lang.String convert(byte[])>(r1);

        return $r3;
    }

    public static long readUInt64(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        long l0, $l1, $l2, $l4, l5, l6;
        byte $b3;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: java.nio.ByteBuffer;

        l0 = 0L;

        $l1 = staticinvoke <com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>(r0);

        $l2 = $l1 << 32;

        l5 = l0 + $l2;

        $b3 = l5 cmp 0L;

        if $b3 >= 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("I don\'t know how to deal with UInt64! long is not sufficient and I don\'t want to use BigInt");

        throw $r1;

     label1:
        $l4 = staticinvoke <com.coremedia.iso.IsoTypeReader: long readUInt32(java.nio.ByteBuffer)>(r0);

        l6 = l5 + $l4;

        return l6;
    }

    public static double readFixedPoint1616(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        byte[] r1;
        byte b0, $b1, $b4, $b7, $b10;
        int $i2, $i3, $i5, $i6, $i8, $i9, i12, i13, i14, i15;
        short $s11;
        double $d0, $d1;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 = newarray (byte)[4];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r1);

        b0 = 0;

        $b1 = r1[0];

        $i2 = $b1 << 24;

        $i3 = $i2 & -16777216;

        i12 = b0 | $i3;

        $b4 = r1[1];

        $i5 = $b4 << 16;

        $i6 = $i5 & 16711680;

        i13 = i12 | $i6;

        $b7 = r1[2];

        $i8 = $b7 << 8;

        $i9 = $i8 & 65280;

        i14 = i13 | $i9;

        $b10 = r1[3];

        $s11 = $b10 & 255;

        i15 = i14 | $s11;

        $d0 = (double) i15;

        $d1 = $d0 / 65536.0;

        return $d1;
    }

    public static float readFixedPoint88(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        byte[] r1;
        byte b0, $b1, $b5;
        int $i2, $i3, $i4;
        short $s6, $s7, s8, s9;
        float $f0, $f1;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 = newarray (byte)[2];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r1);

        b0 = 0;

        $b1 = r1[0];

        $i2 = $b1 << 8;

        $i3 = $i2 & 65280;

        $i4 = b0 | $i3;

        s8 = (short) $i4;

        $b5 = r1[1];

        $s6 = $b5 & 255;

        $s7 = s8 | $s6;

        s9 = (short) $s7;

        $f0 = (float) s9;

        $f1 = $f0 / 256.0F;

        return $f1;
    }

    public static java.lang.String readIso639(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.StringBuilder r1, $r2;
        java.lang.String $r3;
        char $c7;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 = staticinvoke <com.coremedia.iso.IsoTypeReader: int readUInt16(java.nio.ByteBuffer)>(r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        i1 = 0;

     label1:
        if i1 >= 3 goto label2;

        $i3 = 2 - i1;

        $i4 = $i3 * 5;

        $i5 = i0 >> $i4;

        i2 = $i5 & 31;

        $i6 = i2 + 96;

        $c7 = (char) $i6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String read4cc(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        byte[] r1;
        java.lang.String $r3;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 = newarray (byte)[4];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r1);

        $r3 = staticinvoke <com.coremedia.iso.IsoFile: java.lang.String bytesToFourCC(byte[])>(r1);

        return $r3;
    }
}
