public final class com.adobe.xmp.XMPMetaFactory extends java.lang.Object
{
    private static com.adobe.xmp.XMPSchemaRegistry schema;
    private static com.adobe.xmp.XMPVersionInfo versionInfo;

    private void <init>()
    {
        com.adobe.xmp.XMPMetaFactory r0;

        r0 := @this: com.adobe.xmp.XMPMetaFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.adobe.xmp.XMPSchemaRegistry getSchemaRegistry()
    {
        com.adobe.xmp.XMPSchemaRegistry $r0;

        $r0 = <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry schema>;

        return $r0;
    }

    public static com.adobe.xmp.XMPMeta create()
    {
        com.adobe.xmp.impl.XMPMetaImpl $r0;

        $r0 = new com.adobe.xmp.impl.XMPMetaImpl;

        specialinvoke $r0.<com.adobe.xmp.impl.XMPMetaImpl: void <init>()>();

        return $r0;
    }

    public static com.adobe.xmp.XMPMeta parse(java.io.InputStream) throws com.adobe.xmp.XMPException
    {
        java.io.InputStream r0;
        com.adobe.xmp.XMPMeta $r1;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPMeta parse(java.io.InputStream,com.adobe.xmp.options.ParseOptions)>(r0, null);

        return $r1;
    }

    public static com.adobe.xmp.XMPMeta parse(java.io.InputStream, com.adobe.xmp.options.ParseOptions) throws com.adobe.xmp.XMPException
    {
        java.io.InputStream r0;
        com.adobe.xmp.options.ParseOptions r1;
        com.adobe.xmp.XMPMeta $r2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: com.adobe.xmp.options.ParseOptions;

        $r2 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: com.adobe.xmp.XMPMeta parse(java.lang.Object,com.adobe.xmp.options.ParseOptions)>(r0, r1);

        return $r2;
    }

    public static com.adobe.xmp.XMPMeta parseFromString(java.lang.String) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.XMPMeta $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPMeta parseFromString(java.lang.String,com.adobe.xmp.options.ParseOptions)>(r0, null);

        return $r1;
    }

    public static com.adobe.xmp.XMPMeta parseFromString(java.lang.String, com.adobe.xmp.options.ParseOptions) throws com.adobe.xmp.XMPException
    {
        java.lang.String r0;
        com.adobe.xmp.options.ParseOptions r1;
        com.adobe.xmp.XMPMeta $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.adobe.xmp.options.ParseOptions;

        $r2 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: com.adobe.xmp.XMPMeta parse(java.lang.Object,com.adobe.xmp.options.ParseOptions)>(r0, r1);

        return $r2;
    }

    public static com.adobe.xmp.XMPMeta parseFromBuffer(byte[]) throws com.adobe.xmp.XMPException
    {
        byte[] r0;
        com.adobe.xmp.XMPMeta $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPMeta parseFromBuffer(byte[],com.adobe.xmp.options.ParseOptions)>(r0, null);

        return $r1;
    }

    public static com.adobe.xmp.XMPMeta parseFromBuffer(byte[], com.adobe.xmp.options.ParseOptions) throws com.adobe.xmp.XMPException
    {
        byte[] r0;
        com.adobe.xmp.options.ParseOptions r1;
        com.adobe.xmp.XMPMeta $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: com.adobe.xmp.options.ParseOptions;

        $r2 = staticinvoke <com.adobe.xmp.impl.XMPMetaParser: com.adobe.xmp.XMPMeta parse(java.lang.Object,com.adobe.xmp.options.ParseOptions)>(r0, r1);

        return $r2;
    }

    public static void serialize(com.adobe.xmp.XMPMeta, java.io.OutputStream) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPMeta r0;
        java.io.OutputStream r1;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r1 := @parameter1: java.io.OutputStream;

        staticinvoke <com.adobe.xmp.XMPMetaFactory: void serialize(com.adobe.xmp.XMPMeta,java.io.OutputStream,com.adobe.xmp.options.SerializeOptions)>(r0, r1, null);

        return;
    }

    public static void serialize(com.adobe.xmp.XMPMeta, java.io.OutputStream, com.adobe.xmp.options.SerializeOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPMeta r0;
        java.io.OutputStream r1;
        com.adobe.xmp.options.SerializeOptions r2;
        com.adobe.xmp.impl.XMPMetaImpl $r3;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r1 := @parameter1: java.io.OutputStream;

        r2 := @parameter2: com.adobe.xmp.options.SerializeOptions;

        staticinvoke <com.adobe.xmp.XMPMetaFactory: void assertImplementation(com.adobe.xmp.XMPMeta)>(r0);

        $r3 = (com.adobe.xmp.impl.XMPMetaImpl) r0;

        staticinvoke <com.adobe.xmp.impl.XMPSerializerHelper: void serialize(com.adobe.xmp.impl.XMPMetaImpl,java.io.OutputStream,com.adobe.xmp.options.SerializeOptions)>($r3, r1, r2);

        return;
    }

    public static byte[] serializeToBuffer(com.adobe.xmp.XMPMeta, com.adobe.xmp.options.SerializeOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPMeta r0;
        com.adobe.xmp.options.SerializeOptions r1;
        com.adobe.xmp.impl.XMPMetaImpl $r2;
        byte[] $r3;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r1 := @parameter1: com.adobe.xmp.options.SerializeOptions;

        staticinvoke <com.adobe.xmp.XMPMetaFactory: void assertImplementation(com.adobe.xmp.XMPMeta)>(r0);

        $r2 = (com.adobe.xmp.impl.XMPMetaImpl) r0;

        $r3 = staticinvoke <com.adobe.xmp.impl.XMPSerializerHelper: byte[] serializeToBuffer(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.options.SerializeOptions)>($r2, r1);

        return $r3;
    }

    public static java.lang.String serializeToString(com.adobe.xmp.XMPMeta, com.adobe.xmp.options.SerializeOptions) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.XMPMeta r0;
        com.adobe.xmp.options.SerializeOptions r1;
        com.adobe.xmp.impl.XMPMetaImpl $r2;
        java.lang.String $r3;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        r1 := @parameter1: com.adobe.xmp.options.SerializeOptions;

        staticinvoke <com.adobe.xmp.XMPMetaFactory: void assertImplementation(com.adobe.xmp.XMPMeta)>(r0);

        $r2 = (com.adobe.xmp.impl.XMPMetaImpl) r0;

        $r3 = staticinvoke <com.adobe.xmp.impl.XMPSerializerHelper: java.lang.String serializeToString(com.adobe.xmp.impl.XMPMetaImpl,com.adobe.xmp.options.SerializeOptions)>($r2, r1);

        return $r3;
    }

    private static void assertImplementation(com.adobe.xmp.XMPMeta)
    {
        com.adobe.xmp.XMPMeta r0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @parameter0: com.adobe.xmp.XMPMeta;

        $z0 = r0 instanceof com.adobe.xmp.impl.XMPMetaImpl;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The serializing service works onlywith the XMPMeta implementation of this library");

        throw $r1;

     label1:
        return;
    }

    public static void reset()
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl $r0;

        $r0 = new com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        specialinvoke $r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void <init>()>();

        <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry schema> = $r0;

        return;
    }

    public static synchronized com.adobe.xmp.XMPVersionInfo getVersionInfo()
    {
        com.adobe.xmp.XMPVersionInfo $r1, $r2;
        com.adobe.xmp.XMPMetaFactory$1 $r3;
        java.lang.Throwable $r4, r6;
        java.io.PrintStream $r5;

        $r1 = <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPVersionInfo versionInfo>;

        if $r1 != null goto label4;

     label1:
        $r3 = new com.adobe.xmp.XMPMetaFactory$1;

        specialinvoke $r3.<com.adobe.xmp.XMPMetaFactory$1: void <init>()>();

        <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPVersionInfo versionInfo> = $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r6 = $r4;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.Object)>(r6);

     label4:
        $r2 = <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPVersionInfo versionInfo>;

        return $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        com.adobe.xmp.impl.XMPSchemaRegistryImpl $r0;

        $r0 = new com.adobe.xmp.impl.XMPSchemaRegistryImpl;

        specialinvoke $r0.<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void <init>()>();

        <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPSchemaRegistry schema> = $r0;

        <com.adobe.xmp.XMPMetaFactory: com.adobe.xmp.XMPVersionInfo versionInfo> = null;

        return;
    }
}
