public final class com.coremedia.iso.boxes.mdat.MediaDataBox extends java.lang.Object implements com.coremedia.iso.boxes.Box
{
    private static java.util.logging.Logger LOG;
    public static final java.lang.String TYPE;
    public static final int BUFFER_SIZE;
    com.coremedia.iso.boxes.ContainerBox parent;
    java.nio.ByteBuffer header;
    private java.nio.channels.FileChannel fileChannel;
    private long startPosition;
    private long contentSize;
    private java.util.Map cache;
    private java.nio.ByteBuffer content;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        com.coremedia.iso.boxes.mdat.MediaDataBox r0;
        java.util.HashMap $r1;

        r0 := @this: com.coremedia.iso.boxes.mdat.MediaDataBox;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.util.Map cache> = $r1;

        return;
    }

    public com.coremedia.iso.boxes.ContainerBox getParent()
    {
        com.coremedia.iso.boxes.mdat.MediaDataBox r0;
        com.coremedia.iso.boxes.ContainerBox $r1;

        r0 := @this: com.coremedia.iso.boxes.mdat.MediaDataBox;

        $r1 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: com.coremedia.iso.boxes.ContainerBox parent>;

        return $r1;
    }

    public void setParent(com.coremedia.iso.boxes.ContainerBox)
    {
        com.coremedia.iso.boxes.mdat.MediaDataBox r0;
        com.coremedia.iso.boxes.ContainerBox r1;

        r0 := @this: com.coremedia.iso.boxes.mdat.MediaDataBox;

        r1 := @parameter0: com.coremedia.iso.boxes.ContainerBox;

        r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: com.coremedia.iso.boxes.ContainerBox parent> = r1;

        return;
    }

    public java.lang.String getType()
    {
        com.coremedia.iso.boxes.mdat.MediaDataBox r0;

        r0 := @this: com.coremedia.iso.boxes.mdat.MediaDataBox;

        return "mdat";
    }

    private static void transfer(java.nio.channels.FileChannel, long, long, java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        java.nio.channels.FileChannel r0;
        long l0, l1, l2, l3, $l5, $l6, $l7, $l8;
        java.nio.channels.WritableByteChannel r1;
        byte $b4;

        r0 := @parameter0: java.nio.channels.FileChannel;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r1 := @parameter3: java.nio.channels.WritableByteChannel;

        l2 = 67076096L;

        l3 = 0L;

     label1:
        $b4 = l3 cmp l1;

        if $b4 >= 0 goto label2;

        $l6 = l0 + l3;

        $l5 = l1 - l3;

        $l7 = staticinvoke <java.lang.Math: long min(long,long)>(l2, $l5);

        $l8 = virtualinvoke r0.<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>($l6, $l7, r1);

        l3 = l3 + $l8;

        goto label1;

     label2:
        return;
    }

    public void getBox(java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        com.coremedia.iso.boxes.mdat.MediaDataBox r0;
        java.nio.channels.WritableByteChannel r1;
        java.nio.channels.FileChannel $r2, $r8;
        java.nio.ByteBuffer $r3, $r5, $r6, $r7, $r9;
        boolean $z0, $z1;
        long $l2, $l4, $l5, $l6, $l7, $l9;
        int $i3, $i8;
        java.lang.AssertionError $r10;

        r0 := @this: com.coremedia.iso.boxes.mdat.MediaDataBox;

        r1 := @parameter0: java.nio.channels.WritableByteChannel;

        $r2 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.channels.FileChannel fileChannel>;

        if $r2 == null goto label2;

        $z0 = <com.coremedia.iso.boxes.mdat.MediaDataBox: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: boolean checkStillOk()>();

        if $z1 != 0 goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $r8 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.channels.FileChannel fileChannel>;

        $l2 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: long startPosition>;

        $r7 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer header>;

        $i3 = virtualinvoke $r7.<java.nio.ByteBuffer: int limit()>();

        $l4 = (long) $i3;

        $l6 = $l2 - $l4;

        $l5 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: long contentSize>;

        $r9 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer header>;

        $i8 = virtualinvoke $r9.<java.nio.ByteBuffer: int limit()>();

        $l7 = (long) $i8;

        $l9 = $l5 + $l7;

        staticinvoke <com.coremedia.iso.boxes.mdat.MediaDataBox: void transfer(java.nio.channels.FileChannel,long,long,java.nio.channels.WritableByteChannel)>($r8, $l6, $l9, r1);

        goto label3;

     label2:
        $r3 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer header>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $r5 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer header>;

        interfaceinvoke r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r5);

        $r6 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer content>;

        interfaceinvoke r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r6);

     label3:
        return;
    }

    private boolean checkStillOk()
    {
        com.coremedia.iso.boxes.mdat.MediaDataBox r0;
        java.nio.ByteBuffer r1, $r2, $r5, $r7, $r10;
        java.nio.channels.FileChannel $r3, $r6;
        long $l0, $l2, $l3;
        int $i1, $i4;
        boolean $z0, $z1;
        java.io.IOException $r11, r13;
        java.lang.AssertionError $r12;

        r0 := @this: com.coremedia.iso.boxes.mdat.MediaDataBox;

     label1:
        $r3 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.channels.FileChannel fileChannel>;

        $l0 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: long startPosition>;

        $r2 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer header>;

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int limit()>();

        $l2 = (long) $i1;

        $l3 = $l0 - $l2;

        virtualinvoke $r3.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>($l3);

        $r5 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer header>;

        $i4 = virtualinvoke $r5.<java.nio.ByteBuffer: int limit()>();

        r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i4);

        $r6 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.channels.FileChannel fileChannel>;

        virtualinvoke $r6.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>(r1);

        $r7 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer header>;

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $z0 = <com.coremedia.iso.boxes.mdat.MediaDataBox: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r10 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer header>;

        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean equals(java.lang.Object)>($r10);

        if $z1 != 0 goto label2;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>("It seems that the content I want to read has already been overwritten.");

        throw $r12;

     label2:
        return 1;

     label3:
        $r11 := @caughtexception;

        r13 = $r11;

        virtualinvoke r13.<java.io.IOException: void printStackTrace()>();

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public long getSize()
    {
        com.coremedia.iso.boxes.mdat.MediaDataBox r0;
        long l0, $l2, l3;
        java.nio.ByteBuffer $r1;
        int $i1;

        r0 := @this: com.coremedia.iso.boxes.mdat.MediaDataBox;

        $r1 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer header>;

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int limit()>();

        l0 = (long) $i1;

        $l2 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: long contentSize>;

        l3 = l0 + $l2;

        return l3;
    }

    public void parse(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer, long, com.coremedia.iso.BoxParser) throws java.io.IOException
    {
        com.coremedia.iso.boxes.mdat.MediaDataBox r0;
        java.nio.channels.ReadableByteChannel r1;
        java.nio.ByteBuffer r2, $r4, $r8;
        long l0, $l2, $l5, $l6, $l7, $l8;
        com.coremedia.iso.BoxParser r3;
        boolean $z0;
        int $i1, $i3;
        java.util.Map $r5;
        java.lang.Long $r6;
        java.lang.ref.SoftReference $r7;
        byte $b4;
        java.nio.channels.FileChannel $r10, $r11, $r12, $r13;

        r0 := @this: com.coremedia.iso.boxes.mdat.MediaDataBox;

        r1 := @parameter0: java.nio.channels.ReadableByteChannel;

        r2 := @parameter1: java.nio.ByteBuffer;

        l0 := @parameter2: long;

        r3 := @parameter3: com.coremedia.iso.BoxParser;

        r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer header> = r2;

        r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: long contentSize> = l0;

        $z0 = r1 instanceof java.nio.channels.FileChannel;

        if $z0 == 0 goto label1;

        $i3 = <com.googlecode.mp4parser.AbstractBox: int MEM_MAP_THRESHOLD>;

        $l5 = (long) $i3;

        $b4 = l0 cmp $l5;

        if $b4 <= 0 goto label1;

        $r11 = (java.nio.channels.FileChannel) r1;

        r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.channels.FileChannel fileChannel> = $r11;

        $r10 = (java.nio.channels.FileChannel) r1;

        $l6 = virtualinvoke $r10.<java.nio.channels.FileChannel: long position()>();

        r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: long startPosition> = $l6;

        $r13 = (java.nio.channels.FileChannel) r1;

        $r12 = (java.nio.channels.FileChannel) r1;

        $l7 = virtualinvoke $r12.<java.nio.channels.FileChannel: long position()>();

        $l8 = $l7 + l0;

        virtualinvoke $r13.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>($l8);

        goto label2;

     label1:
        $i1 = staticinvoke <com.googlecode.mp4parser.util.CastUtils: int l2i(long)>(l0);

        $l2 = (long) $i1;

        $r4 = staticinvoke <com.coremedia.iso.ChannelHelper: java.nio.ByteBuffer readFully(java.nio.channels.ReadableByteChannel,long)>(r1, $l2);

        r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer content> = $r4;

        $r5 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.util.Map cache>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r7 = new java.lang.ref.SoftReference;

        $r8 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer content>;

        specialinvoke $r7.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r8);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

     label2:
        return;
    }

    public synchronized java.nio.ByteBuffer getContent(long, int)
    {
        com.coremedia.iso.boxes.mdat.MediaDataBox r0;
        long l0, $l2, $l3, $l4, $l5, $l6, $l8, $l9, $l10, $l13, $l14, $l15, $l17, $l18, $l20, $l21;
        int i1, $i12, $i19;
        java.util.Iterator r1;
        java.lang.Long r2, $r9;
        java.nio.ByteBuffer r3, r4, r31;
        java.util.Map $r5, $r10, $r18;
        java.util.Set $r6;
        boolean $z0;
        java.nio.channels.FileChannel $r7;
        java.nio.channels.FileChannel$MapMode $r8;
        java.lang.ref.SoftReference $r12;
        java.lang.Object $r14, $r16, $r19;
        byte $b7, $b11, $b16;
        java.lang.ref.Reference $r17;
        java.lang.StringBuilder $r21, $r25, $r26;
        java.io.IOException $r22, r30;
        java.lang.String $r24;
        java.util.logging.Logger $r27;
        java.lang.RuntimeException $r28;
        java.nio.MappedByteBuffer r29;

        r0 := @this: com.coremedia.iso.boxes.mdat.MediaDataBox;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r5 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.util.Map cache>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.Long) $r14;

        $l8 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        $b7 = $l8 cmp l0;

        if $b7 > 0 goto label2;

        $l10 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        $l9 = $l10 + 10485760L;

        $b11 = l0 cmp $l9;

        if $b11 > 0 goto label2;

        $r18 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.util.Map cache>;

        $r16 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r17 = (java.lang.ref.Reference) $r16;

        $r19 = virtualinvoke $r17.<java.lang.ref.Reference: java.lang.Object get()>();

        r3 = (java.nio.ByteBuffer) $r19;

        if r3 == null goto label2;

        $l14 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        $i12 = virtualinvoke r3.<java.nio.ByteBuffer: int limit()>();

        $l13 = (long) $i12;

        $l15 = $l14 + $l13;

        $l17 = (long) i1;

        $l18 = l0 + $l17;

        $b16 = $l15 cmp $l18;

        if $b16 < 0 goto label2;

        $l20 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        $l21 = l0 - $l20;

        $i19 = (int) $l21;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i19);

        r4 = virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i1);

        return r4;

     label2:
        goto label1;

     label3:
        $r7 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.channels.FileChannel fileChannel>;

        $r8 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $l2 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: long startPosition>;

        $l5 = $l2 + l0;

        $l3 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: long contentSize>;

        $l4 = $l3 - l0;

        $l6 = staticinvoke <java.lang.Math: long min(long,long)>(10485760L, $l4);

        r29 = virtualinvoke $r7.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r8, $l5, $l6);

     label4:
        goto label6;

     label5:
        $r22 := @caughtexception;

        r30 = $r22;

        $r27 = <com.coremedia.iso.boxes.mdat.MediaDataBox: java.util.logging.Logger LOG>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Even mapping just 10MB of the source file into the memory failed. ");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r27.<java.util.logging.Logger: void fine(java.lang.String)>($r24);

        $r28 = new java.lang.RuntimeException;

        specialinvoke $r28.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Delayed reading of mdat content failed. Make sure not to close the FileChannel that has been used to create the IsoFile!", r30);

        throw $r28;

     label6:
        $r10 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.util.Map cache>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r12 = new java.lang.ref.SoftReference;

        specialinvoke $r12.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r29);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r12);

        virtualinvoke r29.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        r31 = virtualinvoke r29.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        virtualinvoke r31.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i1);

        return r31;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public java.nio.ByteBuffer getHeader()
    {
        com.coremedia.iso.boxes.mdat.MediaDataBox r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.coremedia.iso.boxes.mdat.MediaDataBox;

        $r1 = r0.<com.coremedia.iso.boxes.mdat.MediaDataBox: java.nio.ByteBuffer header>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;
        java.lang.String $r2;
        java.util.logging.Logger $r3;

        <com.coremedia.iso.boxes.mdat.MediaDataBox: int BUFFER_SIZE> = 10485760;

        <com.coremedia.iso.boxes.mdat.MediaDataBox: java.lang.String TYPE> = "mdat";

        $r0 = class "com/coremedia/iso/boxes/mdat/MediaDataBox";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.coremedia.iso.boxes.mdat.MediaDataBox: boolean $assertionsDisabled> = $z1;

        $r1 = class "com/coremedia/iso/boxes/mdat/MediaDataBox";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2);

        <com.coremedia.iso.boxes.mdat.MediaDataBox: java.util.logging.Logger LOG> = $r3;

        return;
    }
}
