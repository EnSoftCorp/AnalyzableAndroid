public class com.android.gallery3d.filtershow.crop.CropMath extends java.lang.Object
{

    public void <init>()
    {
        com.android.gallery3d.filtershow.crop.CropMath r0;

        r0 := @this: com.android.gallery3d.filtershow.crop.CropMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static float[] getCornersFromRect(android.graphics.RectF)
    {
        android.graphics.RectF r0;
        float[] r1, $r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @parameter0: android.graphics.RectF;

        $r2 = newarray (float)[8];

        $f0 = r0.<android.graphics.RectF: float left>;

        $r2[0] = $f0;

        $f1 = r0.<android.graphics.RectF: float top>;

        $r2[1] = $f1;

        $f2 = r0.<android.graphics.RectF: float right>;

        $r2[2] = $f2;

        $f3 = r0.<android.graphics.RectF: float top>;

        $r2[3] = $f3;

        $f4 = r0.<android.graphics.RectF: float right>;

        $r2[4] = $f4;

        $f5 = r0.<android.graphics.RectF: float bottom>;

        $r2[5] = $f5;

        $f6 = r0.<android.graphics.RectF: float left>;

        $r2[6] = $f6;

        $f7 = r0.<android.graphics.RectF: float bottom>;

        $r2[7] = $f7;

        r1 = $r2;

        return r1;
    }

    public static boolean inclusiveContains(android.graphics.RectF, float, float)
    {
        android.graphics.RectF r0;
        float f0, f1, $f2, $f3, $f4, $f5;
        byte $b0, $b1, $b2, $b3;
        boolean $z0;

        r0 := @parameter0: android.graphics.RectF;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $f2 = r0.<android.graphics.RectF: float right>;

        $b0 = f0 cmpl $f2;

        if $b0 > 0 goto label1;

        $f3 = r0.<android.graphics.RectF: float left>;

        $b1 = f0 cmpg $f3;

        if $b1 < 0 goto label1;

        $f4 = r0.<android.graphics.RectF: float bottom>;

        $b2 = f1 cmpl $f4;

        if $b2 > 0 goto label1;

        $f5 = r0.<android.graphics.RectF: float top>;

        $b3 = f1 cmpg $f5;

        if $b3 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static android.graphics.RectF trapToRect(float[])
    {
        float[] r0;
        android.graphics.RectF r1, $r2;
        int i0, $i1, $i2;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        byte $b3, $b4, $b5, $b6;

        r0 := @parameter0: float[];

        $r2 = new android.graphics.RectF;

        specialinvoke $r2.<android.graphics.RectF: void <init>(float,float,float,float)>(#InfinityF, #InfinityF, #-InfinityF, #-InfinityF);

        r1 = $r2;

        i0 = 1;

     label01:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label10;

        $i2 = i0 - 1;

        f0 = r0[$i2];

        f1 = r0[i0];

        $f2 = r1.<android.graphics.RectF: float left>;

        $b3 = f0 cmpg $f2;

        if $b3 >= 0 goto label02;

        $f3 = f0;

        goto label03;

     label02:
        $f3 = r1.<android.graphics.RectF: float left>;

     label03:
        r1.<android.graphics.RectF: float left> = $f3;

        $f4 = r1.<android.graphics.RectF: float top>;

        $b4 = f1 cmpg $f4;

        if $b4 >= 0 goto label04;

        $f5 = f1;

        goto label05;

     label04:
        $f5 = r1.<android.graphics.RectF: float top>;

     label05:
        r1.<android.graphics.RectF: float top> = $f5;

        $f6 = r1.<android.graphics.RectF: float right>;

        $b5 = f0 cmpl $f6;

        if $b5 <= 0 goto label06;

        $f8 = f0;

        goto label07;

     label06:
        $f8 = r1.<android.graphics.RectF: float right>;

     label07:
        r1.<android.graphics.RectF: float right> = $f8;

        $f7 = r1.<android.graphics.RectF: float bottom>;

        $b6 = f1 cmpl $f7;

        if $b6 <= 0 goto label08;

        $f9 = f1;

        goto label09;

     label08:
        $f9 = r1.<android.graphics.RectF: float bottom>;

     label09:
        r1.<android.graphics.RectF: float bottom> = $f9;

        i0 = i0 + 2;

        goto label01;

     label10:
        virtualinvoke r1.<android.graphics.RectF: void sort()>();

        return r1;
    }

    public static void getEdgePoints(android.graphics.RectF, float[])
    {
        android.graphics.RectF r0;
        float[] r1;
        int i0, $i1, $i2, $i3, $i4;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @parameter0: android.graphics.RectF;

        r1 := @parameter1: float[];

        $i1 = lengthof r1;

        if $i1 >= 2 goto label1;

        return;

     label1:
        i0 = 0;

     label2:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label3;

        $f2 = r1[i0];

        $f1 = r0.<android.graphics.RectF: float left>;

        $f0 = r0.<android.graphics.RectF: float right>;

        $f3 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: float clamp(float,float,float)>($f2, $f1, $f0);

        r1[i0] = $f3;

        $i4 = i0 + 1;

        $i3 = i0 + 1;

        $f6 = r1[$i3];

        $f5 = r0.<android.graphics.RectF: float top>;

        $f4 = r0.<android.graphics.RectF: float bottom>;

        $f7 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: float clamp(float,float,float)>($f6, $f5, $f4);

        r1[$i4] = $f7;

        i0 = i0 + 2;

        goto label2;

     label3:
        return;
    }

    public static float[] closestSide(float[], float[])
    {
        float[] r0, r1, r2, r3, $r4, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        float f0, f1, $f2, $f3, $f4, $f5;
        byte $b8;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        i0 = lengthof r1;

        f0 = #InfinityF;

        r2 = null;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = newarray (float)[4];

        $f2 = r1[i1];

        $r4[0] = $f2;

        $i2 = i1 + 1;

        $i3 = $i2 % i0;

        $f3 = r1[$i3];

        $r4[1] = $f3;

        $i4 = i1 + 2;

        $i5 = $i4 % i0;

        $f4 = r1[$i5];

        $r4[2] = $f4;

        $i7 = i1 + 3;

        $i6 = $i7 % i0;

        $f5 = r1[$i6];

        $r4[3] = $f5;

        r3 = $r4;

        $r5 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: float[] shortestVectorFromPointToLine(float[],float[])>(r0, r3);

        f1 = staticinvoke <com.android.gallery3d.filtershow.imageshow.GeometryMathUtils: float vectorLength(float[])>($r5);

        $b8 = f1 cmpg f0;

        if $b8 >= 0 goto label2;

        f0 = f1;

        r2 = r3;

     label2:
        i1 = i1 + 2;

        goto label1;

     label3:
        return r2;
    }

    public static boolean pointInRotatedRect(float[], android.graphics.RectF, float)
    {
        float[] r0, r3;
        android.graphics.RectF r1;
        float f0, $f1, $f2, $f3, $f4;
        android.graphics.Matrix r2, r4, $r5, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: float[];

        r1 := @parameter1: android.graphics.RectF;

        f0 := @parameter2: float;

        $r5 = new android.graphics.Matrix;

        specialinvoke $r5.<android.graphics.Matrix: void <init>()>();

        r2 = $r5;

        r3 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(r0, 2);

        $f1 = virtualinvoke r1.<android.graphics.RectF: float centerX()>();

        $f2 = virtualinvoke r1.<android.graphics.RectF: float centerY()>();

        virtualinvoke r2.<android.graphics.Matrix: void setRotate(float,float,float)>(f0, $f1, $f2);

        $r6 = new android.graphics.Matrix;

        specialinvoke $r6.<android.graphics.Matrix: void <init>()>();

        r4 = $r6;

        $z0 = virtualinvoke r2.<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>(r4);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        virtualinvoke r4.<android.graphics.Matrix: void mapPoints(float[])>(r3);

        $f4 = r3[0];

        $f3 = r3[1];

        $z1 = staticinvoke <com.android.gallery3d.filtershow.crop.CropMath: boolean inclusiveContains(android.graphics.RectF,float,float)>(r1, $f4, $f3);

        return $z1;
    }

    public static boolean pointInRotatedRect(float[], float[], float[])
    {
        float[] r0, r1, r2;
        android.graphics.RectF r3, $r4;
        float f0;
        boolean $z0;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        r2 := @parameter2: float[];

        $r4 = new android.graphics.RectF;

        specialinvoke $r4.<android.graphics.RectF: void <init>()>();

        r3 = $r4;

        f0 = staticinvoke <com.android.gallery3d.filtershow.crop.CropMath: float getUnrotated(float[],float[],android.graphics.RectF)>(r1, r2, r3);

        $z0 = staticinvoke <com.android.gallery3d.filtershow.crop.CropMath: boolean pointInRotatedRect(float[],android.graphics.RectF,float)>(r0, r3, f0);

        return $z0;
    }

    public static void fixAspectRatio(android.graphics.RectF, float, float)
    {
        android.graphics.RectF r0;
        float f0, f1, f2, f3, f4, f5, f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;

        r0 := @parameter0: android.graphics.RectF;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $f7 = virtualinvoke r0.<android.graphics.RectF: float width()>();

        $f8 = $f7 / f0;

        $f9 = virtualinvoke r0.<android.graphics.RectF: float height()>();

        $f10 = $f9 / f1;

        f2 = staticinvoke <java.lang.Math: float min(float,float)>($f8, $f10);

        f3 = virtualinvoke r0.<android.graphics.RectF: float centerX()>();

        f4 = virtualinvoke r0.<android.graphics.RectF: float centerY()>();

        $f11 = f2 * f0;

        f5 = $f11 / 2.0F;

        $f13 = f2 * f1;

        f6 = $f13 / 2.0F;

        $f16 = f3 - f5;

        $f14 = f4 - f6;

        $f15 = f3 + f5;

        $f12 = f4 + f6;

        virtualinvoke r0.<android.graphics.RectF: void set(float,float,float,float)>($f16, $f14, $f15, $f12);

        return;
    }

    public static void fixAspectRatioContained(android.graphics.RectF, float, float)
    {
        android.graphics.RectF r0;
        float f0, f1, f2, f3, f4, f5, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, f18, f19;
        byte $b0;

        r0 := @parameter0: android.graphics.RectF;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 = virtualinvoke r0.<android.graphics.RectF: float width()>();

        f3 = virtualinvoke r0.<android.graphics.RectF: float height()>();

        f4 = f2 / f3;

        f5 = f0 / f1;

        $b0 = f4 cmpg f5;

        if $b0 >= 0 goto label1;

        f18 = f2 / f5;

        $f12 = virtualinvoke r0.<android.graphics.RectF: float centerY()>();

        $f15 = f18 / 2.0F;

        $f14 = $f12 - $f15;

        r0.<android.graphics.RectF: float top> = $f14;

        $f17 = r0.<android.graphics.RectF: float top>;

        $f16 = $f17 + f18;

        r0.<android.graphics.RectF: float bottom> = $f16;

        goto label2;

     label1:
        f19 = f3 * f5;

        $f8 = virtualinvoke r0.<android.graphics.RectF: float centerX()>();

        $f9 = f19 / 2.0F;

        $f10 = $f8 - $f9;

        r0.<android.graphics.RectF: float left> = $f10;

        $f11 = r0.<android.graphics.RectF: float left>;

        $f13 = $f11 + f19;

        r0.<android.graphics.RectF: float right> = $f13;

     label2:
        return;
    }

    public static android.graphics.RectF getScaledCropBounds(android.graphics.RectF, android.graphics.RectF, android.graphics.RectF)
    {
        android.graphics.RectF r0, r1, r2, r4, $r7;
        android.graphics.Matrix r3, $r5;
        android.graphics.Matrix$ScaleToFit $r6;
        boolean $z1;

        r0 := @parameter0: android.graphics.RectF;

        r1 := @parameter1: android.graphics.RectF;

        r2 := @parameter2: android.graphics.RectF;

        $r5 = new android.graphics.Matrix;

        specialinvoke $r5.<android.graphics.Matrix: void <init>()>();

        r3 = $r5;

        $r6 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit FILL>;

        virtualinvoke r3.<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>(r1, r2, $r6);

        $r7 = new android.graphics.RectF;

        specialinvoke $r7.<android.graphics.RectF: void <init>(android.graphics.RectF)>(r0);

        r4 = $r7;

        $z1 = virtualinvoke r3.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r4);

        if $z1 != 0 goto label1;

        return null;

     label1:
        return r4;
    }

    public static int getBitmapSize(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0;
        int $i0, $i1, $i2;

        r0 := @parameter0: android.graphics.Bitmap;

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getRowBytes()>();

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i2 = $i0 * $i1;

        return $i2;
    }

    public static int constrainedRotation(float)
    {
        float f0, $f1, $f2;
        int i0, $i1, $i2, i3;

        f0 := @parameter0: float;

        $f1 = f0 % 360.0F;

        $f2 = $f1 / 90.0F;

        i0 = (int) $f2;

        if i0 >= 0 goto label1;

        $i2 = i0 + 4;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        i3 = $i2;

        $i1 = i3 * 90;

        return $i1;
    }

    private static float getUnrotated(float[], float[], android.graphics.RectF)
    {
        float[] r0, r1, r4;
        android.graphics.RectF r2, $r6;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;
        android.graphics.Matrix r3, $r5;
        double $d0, $d1, $d2, $d3;
        int $i0;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        r2 := @parameter2: android.graphics.RectF;

        $f4 = r0[1];

        $f3 = r0[3];

        f0 = $f4 - $f3;

        $f6 = r0[0];

        $f5 = r0[2];

        f1 = $f6 - $f5;

        $f7 = f0 / f1;

        $d0 = (double) $f7;

        $d1 = staticinvoke <java.lang.Math: double atan(double)>($d0);

        $d2 = $d1 * 180.0;

        $d3 = $d2 / 3.141592653589793;

        f2 = (float) $d3;

        $r5 = new android.graphics.Matrix;

        specialinvoke $r5.<android.graphics.Matrix: void <init>()>();

        r3 = $r5;

        $f10 = neg f2;

        $f8 = r1[0];

        $f9 = r1[1];

        virtualinvoke r3.<android.graphics.Matrix: void setRotate(float,float,float)>($f10, $f8, $f9);

        $i0 = lengthof r0;

        r4 = newarray (float)[$i0];

        virtualinvoke r3.<android.graphics.Matrix: void mapPoints(float[],float[])>(r4, r0);

        $r6 = staticinvoke <com.android.gallery3d.filtershow.crop.CropMath: android.graphics.RectF trapToRect(float[])>(r4);

        virtualinvoke r2.<android.graphics.RectF: void set(android.graphics.RectF)>($r6);

        return f2;
    }
}
