public class com.googlecode.mp4parser.authoring.builder.ByteBufferHelper extends java.lang.Object
{

    public void <init>()
    {
        com.googlecode.mp4parser.authoring.builder.ByteBufferHelper r0;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.ByteBufferHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List mergeAdjacentBuffers(java.util.List)
    {
        java.util.List r0;
        java.util.ArrayList r1, $r6;
        java.util.Iterator r2;
        java.nio.ByteBuffer r3, r4, r5, $r10, $r13, $r18, $r22, $r24, $r25, $r28, r29;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        boolean $z0, $z2, $z3, $z4, $z5;
        java.lang.Object $r7, $r9, $r11, $r12, $r14, $r17, $r20, $r21, $r23, $r26;
        byte[] $r16, $r19, $r27;

        r0 := @parameter0: java.util.List;

        $r6 = new java.util.ArrayList;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i1);

        r1 = $r6;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.nio.ByteBuffer) $r7;

        $i2 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i0 = $i2 - 1;

        if i0 < 0 goto label2;

        $z4 = virtualinvoke r3.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z4 == 0 goto label2;

        $r17 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r18 = (java.nio.ByteBuffer) $r17;

        $z5 = virtualinvoke $r18.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z5 == 0 goto label2;

        $r16 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>();

        $r21 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r22 = (java.nio.ByteBuffer) $r21;

        $r19 = virtualinvoke $r22.<java.nio.ByteBuffer: byte[] array()>();

        if $r16 != $r19 goto label2;

        $r20 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r25 = (java.nio.ByteBuffer) $r20;

        $i10 = virtualinvoke $r25.<java.nio.ByteBuffer: int arrayOffset()>();

        $r23 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r24 = (java.nio.ByteBuffer) $r23;

        $i12 = virtualinvoke $r24.<java.nio.ByteBuffer: int limit()>();

        $i13 = $i10 + $i12;

        $i11 = virtualinvoke r3.<java.nio.ByteBuffer: int arrayOffset()>();

        if $i13 != $i11 goto label2;

        $r26 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        r4 = (java.nio.ByteBuffer) $r26;

        $r27 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>();

        $i16 = virtualinvoke r4.<java.nio.ByteBuffer: int arrayOffset()>();

        $i15 = virtualinvoke r4.<java.nio.ByteBuffer: int limit()>();

        $i14 = virtualinvoke r3.<java.nio.ByteBuffer: int limit()>();

        $i17 = $i15 + $i14;

        $r28 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r27, $i16, $i17);

        r5 = virtualinvoke $r28.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        goto label4;

     label2:
        if i0 < 0 goto label3;

        $z2 = r3 instanceof java.nio.MappedByteBuffer;

        if $z2 == 0 goto label3;

        $r9 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $z3 = $r9 instanceof java.nio.MappedByteBuffer;

        if $z3 == 0 goto label3;

        $r11 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r10 = (java.nio.ByteBuffer) $r11;

        $i3 = virtualinvoke $r10.<java.nio.ByteBuffer: int limit()>();

        $r12 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r13 = (java.nio.ByteBuffer) $r12;

        $i4 = virtualinvoke $r13.<java.nio.ByteBuffer: int capacity()>();

        $i6 = virtualinvoke r3.<java.nio.ByteBuffer: int capacity()>();

        $i5 = $i4 - $i6;

        if $i3 != $i5 goto label3;

        $r14 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r29 = (java.nio.ByteBuffer) $r14;

        $i7 = virtualinvoke r3.<java.nio.ByteBuffer: int limit()>();

        $i9 = virtualinvoke r29.<java.nio.ByteBuffer: int limit()>();

        $i8 = $i7 + $i9;

        virtualinvoke r29.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i8);

        goto label4;

     label3:
        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label4:
        goto label1;

     label5:
        return r1;
    }
}
