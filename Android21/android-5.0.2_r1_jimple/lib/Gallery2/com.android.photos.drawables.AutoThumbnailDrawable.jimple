public abstract class com.android.photos.drawables.AutoThumbnailDrawable extends android.graphics.drawable.Drawable
{
    private static final java.lang.String TAG;
    private static java.util.concurrent.ExecutorService sThreadPool;
    private static com.android.photos.data.GalleryBitmapPool sBitmapPool;
    private static byte[] sTempStorage;
    private android.graphics.Paint mPaint;
    private android.graphics.Matrix mDrawMatrix;
    private android.graphics.BitmapFactory$Options mOptions;
    private java.lang.Object mLock;
    private android.graphics.Bitmap mBitmap;
    protected java.lang.Object mData;
    private boolean mIsQueued;
    private int mImageWidth;
    private int mImageHeight;
    private android.graphics.Rect mBounds;
    private int mSampleSize;
    private final java.lang.Runnable mLoadBitmap;
    private final java.lang.Runnable mUpdateBitmap;

    public void <init>()
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        android.graphics.Paint $r1, $r8, $r9;
        android.graphics.Matrix $r2, $r10;
        android.graphics.BitmapFactory$Options $r3, $r12;
        java.lang.Object $r4;
        android.graphics.Rect $r5;
        com.android.photos.drawables.AutoThumbnailDrawable$1 $r6;
        com.android.photos.drawables.AutoThumbnailDrawable$2 $r7;
        byte[] $r11;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r1 = new android.graphics.Paint;

        specialinvoke $r1.<android.graphics.Paint: void <init>()>();

        r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Paint mPaint> = $r1;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Matrix mDrawMatrix> = $r2;

        $r3 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r3.<android.graphics.BitmapFactory$Options: void <init>()>();

        r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.BitmapFactory$Options mOptions> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.photos.drawables.AutoThumbnailDrawable: java.lang.Object mLock> = $r4;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Rect mBounds> = $r5;

        r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mSampleSize> = 1;

        $r6 = new com.android.photos.drawables.AutoThumbnailDrawable$1;

        specialinvoke $r6.<com.android.photos.drawables.AutoThumbnailDrawable$1: void <init>(com.android.photos.drawables.AutoThumbnailDrawable)>(r0);

        r0.<com.android.photos.drawables.AutoThumbnailDrawable: java.lang.Runnable mLoadBitmap> = $r6;

        $r7 = new com.android.photos.drawables.AutoThumbnailDrawable$2;

        specialinvoke $r7.<com.android.photos.drawables.AutoThumbnailDrawable$2: void <init>(com.android.photos.drawables.AutoThumbnailDrawable)>(r0);

        r0.<com.android.photos.drawables.AutoThumbnailDrawable: java.lang.Runnable mUpdateBitmap> = $r7;

        $r8 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r8.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r9 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r9.<android.graphics.Paint: void setFilterBitmap(boolean)>(1);

        $r10 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Matrix mDrawMatrix>;

        virtualinvoke $r10.<android.graphics.Matrix: void reset()>();

        $r12 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.BitmapFactory$Options mOptions>;

        $r11 = <com.android.photos.drawables.AutoThumbnailDrawable: byte[] sTempStorage>;

        $r12.<android.graphics.BitmapFactory$Options: byte[] inTempStorage> = $r11;

        return;
    }

    protected abstract byte[] getPreferredImageBytes(java.lang.Object);

    protected abstract java.io.InputStream getFallbackImageStream(java.lang.Object);

    protected abstract boolean dataChangedLocked(java.lang.Object);

    public void setImage(java.lang.Object, int, int)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        java.lang.Object r1, r2, $r4;
        int i0, i1;
        java.lang.Throwable r3, $r5;
        boolean $z0;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: boolean dataChangedLocked(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mImageWidth> = i0;

        r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mImageHeight> = i1;

        r0.<com.android.photos.drawables.AutoThumbnailDrawable: java.lang.Object mData> = r1;

        specialinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: void setBitmapLocked(android.graphics.Bitmap)>(null);

        specialinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: void refreshSampleSizeLocked()>();

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        virtualinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: void invalidateSelf()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void setBitmapLocked(android.graphics.Bitmap)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        android.graphics.Bitmap r1, $r2, $r3, $r4;
        com.android.photos.data.GalleryBitmapPool $r5;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        r1 := @parameter0: android.graphics.Bitmap;

        $r2 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Bitmap mBitmap>;

        if r1 != $r2 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Bitmap mBitmap>;

        if $r3 == null goto label2;

        $r5 = <com.android.photos.drawables.AutoThumbnailDrawable: com.android.photos.data.GalleryBitmapPool sBitmapPool>;

        $r4 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Bitmap mBitmap>;

        virtualinvoke $r5.<com.android.photos.data.GalleryBitmapPool: boolean put(android.graphics.Bitmap)>($r4);

     label2:
        r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Bitmap mBitmap> = r1;

        return;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        android.graphics.Rect r1, $r5, $r6;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean $z0;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        r1 := @parameter0: android.graphics.Rect;

        specialinvoke r0.<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>(r1);

        $r4 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Rect mBounds>;

        virtualinvoke $r5.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        $r6 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Rect mBounds>;

        $z0 = virtualinvoke $r6.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Bitmap mBitmap> = null;

        goto label3;

     label2:
        specialinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: void refreshSampleSizeLocked()>();

        specialinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: void updateDrawMatrixLocked()>();

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        virtualinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: void invalidateSelf()>();

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void draw(android.graphics.Canvas)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Bitmap $r2, $r6;
        android.graphics.Rect $r3;
        android.graphics.Matrix $r4;
        android.graphics.Paint $r5;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Bitmap mBitmap>;

        if $r2 == null goto label1;

        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $r3 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Rect mBounds>;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>($r3);

        $r4 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Matrix mDrawMatrix>;

        virtualinvoke r1.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r4);

        $r6 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Bitmap mBitmap>;

        $r5 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Paint mPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>($r6, 0.0F, 0.0F, $r5);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

     label1:
        return;
    }

    private void updateDrawMatrixLocked()
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18;
        int i0, i1, i2, i3, $i4, $i5, $i8, $i9, $i11, $i12;
        android.graphics.Bitmap $r1, $r4, $r5;
        android.graphics.Matrix $r2, $r8, $r10;
        android.graphics.Rect $r3, $r6, $r7;
        boolean $z0;
        byte $b6, $b7;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r20, $r21;
        java.lang.String $r14, $r19;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        $r1 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Bitmap mBitmap>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Rect mBounds>;

        $z0 = virtualinvoke $r3.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r2 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Matrix mDrawMatrix>;

        virtualinvoke $r2.<android.graphics.Matrix: void reset()>();

        return;

     label2:
        f1 = 0.0F;

        f2 = 0.0F;

        $r4 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Bitmap mBitmap>;

        i0 = virtualinvoke $r4.<android.graphics.Bitmap: int getWidth()>();

        $r5 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Bitmap mBitmap>;

        i1 = virtualinvoke $r5.<android.graphics.Bitmap: int getHeight()>();

        $r6 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Rect mBounds>;

        i2 = virtualinvoke $r6.<android.graphics.Rect: int width()>();

        $r7 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Rect mBounds>;

        i3 = virtualinvoke $r7.<android.graphics.Rect: int height()>();

        $i4 = i0 * i3;

        $i5 = i2 * i1;

        if $i4 <= $i5 goto label3;

        $f14 = (float) i3;

        $f15 = (float) i1;

        f0 = $f14 / $f15;

        $f17 = (float) i2;

        $f13 = (float) i0;

        $f18 = $f13 * f0;

        $f16 = $f17 - $f18;

        f1 = $f16 * 0.5F;

        goto label4;

     label3:
        $f3 = (float) i2;

        $f4 = (float) i0;

        f0 = $f3 / $f4;

        $f8 = (float) i3;

        $f6 = (float) i1;

        $f5 = $f6 * f0;

        $f7 = $f8 - $f5;

        f2 = $f7 * 0.5F;

     label4:
        $b7 = f0 cmpg 0.8F;

        if $b7 >= 0 goto label5;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sample size was too small! Overdrawing! ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i12 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mSampleSize>;

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AutoThumbnailDrawable", $r19);

        goto label6;

     label5:
        $b6 = f0 cmpl 1.5F;

        if $b6 <= 0 goto label6;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Potential quality loss! ");

        $r11 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i11 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mSampleSize>;

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AutoThumbnailDrawable", $r14);

     label6:
        $r8 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Matrix mDrawMatrix>;

        virtualinvoke $r8.<android.graphics.Matrix: void setScale(float,float)>(f0, f0);

        $r10 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Matrix mDrawMatrix>;

        $f9 = f1 + 0.5F;

        $i9 = (int) $f9;

        $f12 = (float) $i9;

        $f11 = f2 + 0.5F;

        $i8 = (int) $f11;

        $f10 = (float) $i8;

        virtualinvoke $r10.<android.graphics.Matrix: boolean postTranslate(float,float)>($f12, $f10);

        return;
    }

    private int calculateSampleSizeLocked(int, int)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        float f0, $f1, $f2, $f3, $f4;
        android.graphics.Rect $r1, $r2;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Rect mBounds>;

        i2 = virtualinvoke $r1.<android.graphics.Rect: int width()>();

        $r2 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Rect mBounds>;

        i3 = virtualinvoke $r2.<android.graphics.Rect: int height()>();

        $i6 = i0 * i3;

        $i5 = i2 * i1;

        if $i6 <= $i5 goto label1;

        $f4 = (float) i1;

        $f3 = (float) i3;

        f0 = $f4 / $f3;

        goto label2;

     label1:
        $f2 = (float) i0;

        $f1 = (float) i2;

        f0 = $f2 / $f1;

     label2:
        i4 = staticinvoke <java.lang.Math: int round(float)>(f0);

        if i4 <= 0 goto label3;

        $i7 = i4;

        goto label4;

     label3:
        $i7 = 1;

     label4:
        return $i7;
    }

    private void refreshSampleSizeLocked()
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.Rect $r1;
        boolean $z0;
        android.graphics.Bitmap $r2;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        $r1 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Rect mBounds>;

        $z0 = virtualinvoke $r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i1 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mImageWidth>;

        if $i1 == 0 goto label1;

        $i2 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mImageHeight>;

        if $i2 != 0 goto label2;

     label1:
        return;

     label2:
        $i4 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mImageWidth>;

        $i3 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mImageHeight>;

        i0 = specialinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: int calculateSampleSizeLocked(int,int)>($i4, $i3);

        $i5 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mSampleSize>;

        if i0 != $i5 goto label3;

        $r2 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Bitmap mBitmap>;

        if $r2 != null goto label4;

     label3:
        r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mSampleSize> = i0;

        specialinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: void loadBitmapLocked()>();

     label4:
        return;
    }

    private void loadBitmapLocked()
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        boolean $z0, $z1;
        android.graphics.Rect $r1;
        java.lang.Runnable $r2, $r3;
        java.util.concurrent.ExecutorService $r4;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        $z0 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: boolean mIsQueued>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Rect mBounds>;

        $z1 = virtualinvoke $r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $r2 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: java.lang.Runnable mUpdateBitmap>;

        virtualinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: void unscheduleSelf(java.lang.Runnable)>($r2);

        $r4 = <com.android.photos.drawables.AutoThumbnailDrawable: java.util.concurrent.ExecutorService sThreadPool>;

        $r3 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: java.lang.Runnable mLoadBitmap>;

        interfaceinvoke $r4.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r3);

        r0.<com.android.photos.drawables.AutoThumbnailDrawable: boolean mIsQueued> = 1;

     label1:
        return;
    }

    public float getAspectRatio()
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        int $i0, $i1;
        float $f0, $f1, $f2;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        $i0 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mImageWidth>;

        $f1 = (float) $i0;

        $i1 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mImageHeight>;

        $f0 = (float) $i1;

        $f2 = $f1 / $f0;

        return $f2;
    }

    public int getIntrinsicWidth()
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        return -1;
    }

    public int getIntrinsicHeight()
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        return -1;
    }

    public int getOpacity()
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        android.graphics.Bitmap r1;
        boolean $z0;
        android.graphics.Paint $r2;
        int $i0;
        byte $b1;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        r1 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Bitmap mBitmap>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.Bitmap: boolean hasAlpha()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Paint mPaint>;

        $i0 = virtualinvoke $r2.<android.graphics.Paint: int getAlpha()>();

        if $i0 >= 255 goto label2;

     label1:
        $b1 = -3;

        goto label3;

     label2:
        $b1 = -1;

     label3:
        return $b1;
    }

    public void setAlpha(int)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        int i0, i1;
        android.graphics.Paint $r1, $r2;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Paint mPaint>;

        i1 = virtualinvoke $r1.<android.graphics.Paint: int getAlpha()>();

        if i0 == i1 goto label1;

        $r2 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r2.<android.graphics.Paint: void setAlpha(int)>(i0);

        virtualinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        android.graphics.ColorFilter r1;
        android.graphics.Paint $r2;

        r0 := @this: com.android.photos.drawables.AutoThumbnailDrawable;

        r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r2.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>(r1);

        virtualinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: void invalidateSelf()>();

        return;
    }

    static java.lang.Object access$000(com.android.photos.drawables.AutoThumbnailDrawable)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.photos.drawables.AutoThumbnailDrawable;

        $r1 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: java.lang.Object mLock>;

        return $r1;
    }

    static android.graphics.BitmapFactory$Options access$100(com.android.photos.drawables.AutoThumbnailDrawable)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        android.graphics.BitmapFactory$Options $r1;

        r0 := @parameter0: com.android.photos.drawables.AutoThumbnailDrawable;

        $r1 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: android.graphics.BitmapFactory$Options mOptions>;

        return $r1;
    }

    static int access$200(com.android.photos.drawables.AutoThumbnailDrawable)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        int $i0;

        r0 := @parameter0: com.android.photos.drawables.AutoThumbnailDrawable;

        $i0 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mImageWidth>;

        return $i0;
    }

    static int access$300(com.android.photos.drawables.AutoThumbnailDrawable)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        int $i0;

        r0 := @parameter0: com.android.photos.drawables.AutoThumbnailDrawable;

        $i0 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: int mImageHeight>;

        return $i0;
    }

    static int access$400(com.android.photos.drawables.AutoThumbnailDrawable, int, int)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        int i0, i1, $i2;

        r0 := @parameter0: com.android.photos.drawables.AutoThumbnailDrawable;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = specialinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: int calculateSampleSizeLocked(int,int)>(i0, i1);

        return $i2;
    }

    static boolean access$502(com.android.photos.drawables.AutoThumbnailDrawable, boolean)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        boolean z0;

        r0 := @parameter0: com.android.photos.drawables.AutoThumbnailDrawable;

        z0 := @parameter1: boolean;

        r0.<com.android.photos.drawables.AutoThumbnailDrawable: boolean mIsQueued> = z0;

        return z0;
    }

    static com.android.photos.data.GalleryBitmapPool access$600()
    {
        com.android.photos.data.GalleryBitmapPool $r0;

        $r0 = <com.android.photos.drawables.AutoThumbnailDrawable: com.android.photos.data.GalleryBitmapPool sBitmapPool>;

        return $r0;
    }

    static void access$700(com.android.photos.drawables.AutoThumbnailDrawable, android.graphics.Bitmap)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        android.graphics.Bitmap r1;

        r0 := @parameter0: com.android.photos.drawables.AutoThumbnailDrawable;

        r1 := @parameter1: android.graphics.Bitmap;

        specialinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: void setBitmapLocked(android.graphics.Bitmap)>(r1);

        return;
    }

    static java.lang.Runnable access$800(com.android.photos.drawables.AutoThumbnailDrawable)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: com.android.photos.drawables.AutoThumbnailDrawable;

        $r1 = r0.<com.android.photos.drawables.AutoThumbnailDrawable: java.lang.Runnable mUpdateBitmap>;

        return $r1;
    }

    static void access$900(com.android.photos.drawables.AutoThumbnailDrawable)
    {
        com.android.photos.drawables.AutoThumbnailDrawable r0;

        r0 := @parameter0: com.android.photos.drawables.AutoThumbnailDrawable;

        specialinvoke r0.<com.android.photos.drawables.AutoThumbnailDrawable: void updateDrawMatrixLocked()>();

        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.ExecutorService $r0;
        com.android.photos.data.GalleryBitmapPool $r1;
        byte[] $r2;

        <com.android.photos.drawables.AutoThumbnailDrawable: java.lang.String TAG> = "AutoThumbnailDrawable";

        $r0 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

        <com.android.photos.drawables.AutoThumbnailDrawable: java.util.concurrent.ExecutorService sThreadPool> = $r0;

        $r1 = staticinvoke <com.android.photos.data.GalleryBitmapPool: com.android.photos.data.GalleryBitmapPool getInstance()>();

        <com.android.photos.drawables.AutoThumbnailDrawable: com.android.photos.data.GalleryBitmapPool sBitmapPool> = $r1;

        $r2 = newarray (byte)[65536];

        <com.android.photos.drawables.AutoThumbnailDrawable: byte[] sTempStorage> = $r2;

        return;
    }
}
