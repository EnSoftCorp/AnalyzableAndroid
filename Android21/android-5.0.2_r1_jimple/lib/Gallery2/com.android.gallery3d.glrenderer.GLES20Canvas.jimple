public class com.android.gallery3d.glrenderer.GLES20Canvas extends java.lang.Object implements com.android.gallery3d.glrenderer.GLCanvas
{
    private static final java.lang.String TAG;
    private static final int FLOAT_SIZE;
    private static final float OPAQUE_ALPHA;
    private static final int COORDS_PER_VERTEX;
    private static final int VERTEX_STRIDE;
    private static final int COUNT_FILL_VERTEX;
    private static final int COUNT_LINE_VERTEX;
    private static final int COUNT_RECT_VERTEX;
    private static final int OFFSET_FILL_RECT;
    private static final int OFFSET_DRAW_LINE;
    private static final int OFFSET_DRAW_RECT;
    private static final float[] BOX_COORDINATES;
    private static final float[] BOUNDS_COORDINATES;
    private static final java.lang.String POSITION_ATTRIBUTE;
    private static final java.lang.String COLOR_UNIFORM;
    private static final java.lang.String MATRIX_UNIFORM;
    private static final java.lang.String TEXTURE_MATRIX_UNIFORM;
    private static final java.lang.String TEXTURE_SAMPLER_UNIFORM;
    private static final java.lang.String ALPHA_UNIFORM;
    private static final java.lang.String TEXTURE_COORD_ATTRIBUTE;
    private static final java.lang.String DRAW_VERTEX_SHADER;
    private static final java.lang.String DRAW_FRAGMENT_SHADER;
    private static final java.lang.String TEXTURE_VERTEX_SHADER;
    private static final java.lang.String MESH_VERTEX_SHADER;
    private static final java.lang.String TEXTURE_FRAGMENT_SHADER;
    private static final java.lang.String OES_TEXTURE_FRAGMENT_SHADER;
    private static final int INITIAL_RESTORE_STATE_SIZE;
    private static final int MATRIX_SIZE;
    private float[] mMatrices;
    private float[] mAlphas;
    private com.android.gallery3d.util.IntArray mSaveFlags;
    private int mCurrentAlphaIndex;
    private int mCurrentMatrixIndex;
    private int mWidth;
    private int mHeight;
    private float[] mProjectionMatrix;
    private int mScreenWidth;
    private int mScreenHeight;
    private int mDrawProgram;
    private int mTextureProgram;
    private int mOesTextureProgram;
    private int mMeshProgram;
    private int mBoxCoordinates;
    private static final int INDEX_POSITION;
    private static final int INDEX_MATRIX;
    private static final int INDEX_COLOR;
    private static final int INDEX_TEXTURE_MATRIX;
    private static final int INDEX_TEXTURE_SAMPLER;
    private static final int INDEX_ALPHA;
    private static final int INDEX_TEXTURE_COORD;
    com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mDrawParameters;
    com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mTextureParameters;
    com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mOesTextureParameters;
    com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mMeshParameters;
    private final com.android.gallery3d.util.IntArray mUnboundTextures;
    private final com.android.gallery3d.util.IntArray mDeleteBuffers;
    private int mCountDrawMesh;
    private int mCountTextureRect;
    private int mCountFillRect;
    private int mCountDrawLine;
    private int[] mFrameBuffer;
    private java.util.ArrayList mTargetTextures;
    private final float[] mTempMatrix;
    private final float[] mTempColor;
    private final android.graphics.RectF mTempSourceRect;
    private final android.graphics.RectF mTempTargetRect;
    private final float[] mTempTextureMatrix;
    private final int[] mTempIntArray;
    private static final com.android.gallery3d.glrenderer.GLId mGLId;

    public void <init>()
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        java.nio.FloatBuffer r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        float[] $r2, $r3, $r5, $r34, $r35, $r36, $r38, $r39, $r40, $r41;
        com.android.gallery3d.util.IntArray $r4, $r30, $r31;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] $r6, $r10, $r17, $r23, $r43, $r44, $r45, $r46;
        com.android.gallery3d.glrenderer.GLES20Canvas$AttributeShaderParameter $r7, $r11, $r16, $r22, $r24;
        com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter $r8, $r9, $r12, $r13, $r14, $r15, $r18, $r19, $r20, $r21, $r25, $r26, $r27;
        java.util.ArrayList $r28, $r42;
        int[] $r29, $r37;
        android.graphics.RectF $r32, $r33;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (float)[128];

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices> = $r2;

        $r3 = newarray (float)[8];

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mAlphas> = $r3;

        $r4 = new com.android.gallery3d.util.IntArray;

        specialinvoke $r4.<com.android.gallery3d.util.IntArray: void <init>()>();

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.util.IntArray mSaveFlags> = $r4;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentAlphaIndex> = 0;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex> = 0;

        $r5 = newarray (float)[16];

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mProjectionMatrix> = $r5;

        $r6 = newarray (com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter)[3];

        $r7 = new com.android.gallery3d.glrenderer.GLES20Canvas$AttributeShaderParameter;

        specialinvoke $r7.<com.android.gallery3d.glrenderer.GLES20Canvas$AttributeShaderParameter: void <init>(java.lang.String)>("aPosition");

        $r6[0] = $r7;

        $r8 = new com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter;

        specialinvoke $r8.<com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter: void <init>(java.lang.String)>("uMatrix");

        $r6[1] = $r8;

        $r9 = new com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter;

        specialinvoke $r9.<com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter: void <init>(java.lang.String)>("uColor");

        $r6[2] = $r9;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mDrawParameters> = $r6;

        $r10 = newarray (com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter)[5];

        $r11 = new com.android.gallery3d.glrenderer.GLES20Canvas$AttributeShaderParameter;

        specialinvoke $r11.<com.android.gallery3d.glrenderer.GLES20Canvas$AttributeShaderParameter: void <init>(java.lang.String)>("aPosition");

        $r10[0] = $r11;

        $r12 = new com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter;

        specialinvoke $r12.<com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter: void <init>(java.lang.String)>("uMatrix");

        $r10[1] = $r12;

        $r13 = new com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter;

        specialinvoke $r13.<com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter: void <init>(java.lang.String)>("uTextureMatrix");

        $r10[2] = $r13;

        $r14 = new com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter;

        specialinvoke $r14.<com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter: void <init>(java.lang.String)>("uTextureSampler");

        $r10[3] = $r14;

        $r15 = new com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter;

        specialinvoke $r15.<com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter: void <init>(java.lang.String)>("uAlpha");

        $r10[4] = $r15;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mTextureParameters> = $r10;

        $r17 = newarray (com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter)[5];

        $r16 = new com.android.gallery3d.glrenderer.GLES20Canvas$AttributeShaderParameter;

        specialinvoke $r16.<com.android.gallery3d.glrenderer.GLES20Canvas$AttributeShaderParameter: void <init>(java.lang.String)>("aPosition");

        $r17[0] = $r16;

        $r19 = new com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter;

        specialinvoke $r19.<com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter: void <init>(java.lang.String)>("uMatrix");

        $r17[1] = $r19;

        $r18 = new com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter;

        specialinvoke $r18.<com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter: void <init>(java.lang.String)>("uTextureMatrix");

        $r17[2] = $r18;

        $r21 = new com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter;

        specialinvoke $r21.<com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter: void <init>(java.lang.String)>("uTextureSampler");

        $r17[3] = $r21;

        $r20 = new com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter;

        specialinvoke $r20.<com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter: void <init>(java.lang.String)>("uAlpha");

        $r17[4] = $r20;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mOesTextureParameters> = $r17;

        $r23 = newarray (com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter)[5];

        $r22 = new com.android.gallery3d.glrenderer.GLES20Canvas$AttributeShaderParameter;

        specialinvoke $r22.<com.android.gallery3d.glrenderer.GLES20Canvas$AttributeShaderParameter: void <init>(java.lang.String)>("aPosition");

        $r23[0] = $r22;

        $r25 = new com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter;

        specialinvoke $r25.<com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter: void <init>(java.lang.String)>("uMatrix");

        $r23[1] = $r25;

        $r24 = new com.android.gallery3d.glrenderer.GLES20Canvas$AttributeShaderParameter;

        specialinvoke $r24.<com.android.gallery3d.glrenderer.GLES20Canvas$AttributeShaderParameter: void <init>(java.lang.String)>("aTextureCoordinate");

        $r23[2] = $r24;

        $r27 = new com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter;

        specialinvoke $r27.<com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter: void <init>(java.lang.String)>("uTextureSampler");

        $r23[3] = $r27;

        $r26 = new com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter;

        specialinvoke $r26.<com.android.gallery3d.glrenderer.GLES20Canvas$UniformShaderParameter: void <init>(java.lang.String)>("uAlpha");

        $r23[4] = $r26;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mMeshParameters> = $r23;

        $r31 = new com.android.gallery3d.util.IntArray;

        specialinvoke $r31.<com.android.gallery3d.util.IntArray: void <init>()>();

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.util.IntArray mUnboundTextures> = $r31;

        $r30 = new com.android.gallery3d.util.IntArray;

        specialinvoke $r30.<com.android.gallery3d.util.IntArray: void <init>()>();

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.util.IntArray mDeleteBuffers> = $r30;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountDrawMesh> = 0;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountTextureRect> = 0;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountFillRect> = 0;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountDrawLine> = 0;

        $r29 = newarray (int)[1];

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int[] mFrameBuffer> = $r29;

        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>()>();

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: java.util.ArrayList mTargetTextures> = $r28;

        $r35 = newarray (float)[32];

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix> = $r35;

        $r34 = newarray (float)[4];

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempColor> = $r34;

        $r33 = new android.graphics.RectF;

        specialinvoke $r33.<android.graphics.RectF: void <init>()>();

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempSourceRect> = $r33;

        $r32 = new android.graphics.RectF;

        specialinvoke $r32.<android.graphics.RectF: void <init>()>();

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempTargetRect> = $r32;

        $r38 = newarray (float)[16];

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempTextureMatrix> = $r38;

        $r37 = newarray (int)[1];

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int[] mTempIntArray> = $r37;

        $r36 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempTextureMatrix>;

        staticinvoke <android.opengl.Matrix: void setIdentityM(float[],int)>($r36, 0);

        $r40 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        $i6 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        staticinvoke <android.opengl.Matrix: void setIdentityM(float[],int)>($r40, $i6);

        $r41 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mAlphas>;

        $i8 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentAlphaIndex>;

        $r41[$i8] = 1.0F;

        $r42 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: java.util.ArrayList mTargetTextures>;

        virtualinvoke $r42.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

        $r39 = <com.android.gallery3d.glrenderer.GLES20Canvas: float[] BOX_COORDINATES>;

        r1 = staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: java.nio.FloatBuffer createBuffer(float[])>($r39);

        $i7 = virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int uploadBuffer(java.nio.FloatBuffer)>(r1);

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mBoxCoordinates> = $i7;

        i0 = staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: int loadShader(int,java.lang.String)>(35633, "uniform mat4 uMatrix;\nattribute vec2 aPosition;\nvoid main() {\n  vec4 pos = vec4(aPosition, 0.0, 1.0);\n  gl_Position = uMatrix * pos;\n}\n");

        i1 = staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: int loadShader(int,java.lang.String)>(35633, "uniform mat4 uMatrix;\nuniform mat4 uTextureMatrix;\nattribute vec2 aPosition;\nvarying vec2 vTextureCoord;\nvoid main() {\n  vec4 pos = vec4(aPosition, 0.0, 1.0);\n  gl_Position = uMatrix * pos;\n  vTextureCoord = (uTextureMatrix * pos).xy;\n}\n");

        i2 = staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: int loadShader(int,java.lang.String)>(35633, "uniform mat4 uMatrix;\nattribute vec2 aPosition;\nattribute vec2 aTextureCoordinate;\nvarying vec2 vTextureCoord;\nvoid main() {\n  vec4 pos = vec4(aPosition, 0.0, 1.0);\n  gl_Position = uMatrix * pos;\n  vTextureCoord = aTextureCoordinate;\n}\n");

        i3 = staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: int loadShader(int,java.lang.String)>(35632, "precision mediump float;\nuniform vec4 uColor;\nvoid main() {\n  gl_FragColor = uColor;\n}\n");

        i4 = staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: int loadShader(int,java.lang.String)>(35632, "precision mediump float;\nvarying vec2 vTextureCoord;\nuniform float uAlpha;\nuniform sampler2D uTextureSampler;\nvoid main() {\n  gl_FragColor = texture2D(uTextureSampler, vTextureCoord);\n  gl_FragColor *= uAlpha;\n}\n");

        i5 = staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: int loadShader(int,java.lang.String)>(35632, "#extension GL_OES_EGL_image_external : require\nprecision mediump float;\nvarying vec2 vTextureCoord;\nuniform float uAlpha;\nuniform samplerExternalOES uTextureSampler;\nvoid main() {\n  gl_FragColor = texture2D(uTextureSampler, vTextureCoord);\n  gl_FragColor *= uAlpha;\n}\n");

        $r43 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mDrawParameters>;

        $i9 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int assembleProgram(int,int,com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[])>(i0, i3, $r43);

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mDrawProgram> = $i9;

        $r45 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mTextureParameters>;

        $i11 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int assembleProgram(int,int,com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[])>(i1, i4, $r45);

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mTextureProgram> = $i11;

        $r46 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mOesTextureParameters>;

        $i12 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int assembleProgram(int,int,com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[])>(i1, i5, $r46);

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mOesTextureProgram> = $i12;

        $r44 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mMeshParameters>;

        $i10 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int assembleProgram(int,int,com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[])>(i2, i4, $r44);

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mMeshProgram> = $i10;

        staticinvoke <android.opengl.GLES20: void glBlendFunc(int,int)>(1, 771);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        return;
    }

    private static java.nio.FloatBuffer createBuffer(float[])
    {
        float[] r0;
        int i0, $i1, $i2;
        java.nio.FloatBuffer r1, $r5;
        java.nio.ByteBuffer $r2, $r4;
        java.nio.ByteOrder $r3;

        r0 := @parameter0: float[];

        $i1 = lengthof r0;

        i0 = $i1 * 4;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i0);

        $r3 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r4 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        r1 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $i2 = lengthof r0;

        $r5 = virtualinvoke r1.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[],int,int)>(r0, 0, $i2);

        virtualinvoke $r5.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        return r1;
    }

    private int assembleProgram(int, int, com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[])
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        int i0, i1, i2, i3, $i4, $i5, $i8;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] r1;
        int[] r2;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter $r3;
        java.lang.String $r4, $r5, $r6, $r10;
        java.lang.StringBuilder $r7, $r9, $r11;
        java.lang.RuntimeException $r8;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[];

        i2 = staticinvoke <android.opengl.GLES20: int glCreateProgram()>();

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        if i2 != 0 goto label1;

        $r8 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create GL program: ");

        $i8 = staticinvoke <android.opengl.GLES20: int glGetError()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label1:
        staticinvoke <android.opengl.GLES20: void glAttachShader(int,int)>(i2, i0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glAttachShader(int,int)>(i2, i1);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glLinkProgram(int)>(i2);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int[] mTempIntArray>;

        staticinvoke <android.opengl.GLES20: void glGetProgramiv(int,int,int[],int)>(i2, 35714, r2, 0);

        $i4 = r2[0];

        if $i4 == 1 goto label2;

        $r4 = <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r4, "Could not link program: ");

        $r5 = <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String TAG>;

        $r6 = staticinvoke <android.opengl.GLES20: java.lang.String glGetProgramInfoLog(int)>(i2);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r5, $r6);

        staticinvoke <android.opengl.GLES20: void glDeleteProgram(int)>(i2);

        i2 = 0;

     label2:
        i3 = 0;

     label3:
        $i5 = lengthof r1;

        if i3 >= $i5 goto label4;

        $r3 = r1[i3];

        virtualinvoke $r3.<com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter: void loadHandle(int)>(i2);

        i3 = i3 + 1;

        goto label3;

     label4:
        return i2;
    }

    private static int loadShader(int, java.lang.String)
    {
        int i0, i1;
        java.lang.String r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        i1 = staticinvoke <android.opengl.GLES20: int glCreateShader(int)>(i0);

        staticinvoke <android.opengl.GLES20: void glShaderSource(int,java.lang.String)>(i1, r0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glCompileShader(int)>(i1);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        return i1;
    }

    public void setSize(int, int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        float[] $r1, $r2, $r4, $r5;
        float $f0, $f1, $f2;
        com.android.gallery3d.glrenderer.RawTexture $r3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mWidth> = i0;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mHeight> = i1;

        $i3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mWidth>;

        $i2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mHeight>;

        staticinvoke <android.opengl.GLES20: void glViewport(int,int,int,int)>(0, 0, $i3, $i2);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        $i4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        staticinvoke <android.opengl.Matrix: void setIdentityM(float[],int)>($r1, $i4);

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mProjectionMatrix>;

        $f1 = (float) i0;

        $f0 = (float) i1;

        staticinvoke <android.opengl.Matrix: void orthoM(float[],int,float,float,float,float,float,float)>($r2, 0, 0.0F, $f1, 0.0F, $f0, -1.0F, 1.0F);

        $r3 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.RawTexture getTargetTexture()>();

        if $r3 != null goto label1;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mScreenWidth> = i0;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mScreenHeight> = i1;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        $i5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        $f2 = (float) i1;

        staticinvoke <android.opengl.Matrix: void translateM(float[],int,float,float,float)>($r4, $i5, 0.0F, $f2, 0.0F);

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        $i6 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        staticinvoke <android.opengl.Matrix: void scaleM(float[],int,float,float,float)>($r5, $i6, 1.0F, -1.0F, 1.0F);

     label1:
        return;
    }

    public void clearBuffer()
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        staticinvoke <android.opengl.GLES20: void glClearColor(float,float,float,float)>(0.0F, 0.0F, 0.0F, 1.0F);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glClear(int)>(16384);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        return;
    }

    public void clearBuffer(float[])
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        float[] r1;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: float[];

        $f3 = r1[1];

        $f2 = r1[2];

        $f1 = r1[3];

        $f0 = r1[0];

        staticinvoke <android.opengl.GLES20: void glClearColor(float,float,float,float)>($f3, $f2, $f1, $f0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glClear(int)>(16384);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        return;
    }

    public float getAlpha()
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        int $i0;
        float[] $r1;
        float $f0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mAlphas>;

        $i0 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentAlphaIndex>;

        $f0 = $r1[$i0];

        return $f0;
    }

    public void setAlpha(float)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        float f0;
        int $i0;
        float[] $r1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        f0 := @parameter0: float;

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mAlphas>;

        $i0 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentAlphaIndex>;

        $r1[$i0] = f0;

        return;
    }

    public void multiplyAlpha(float)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        float f0, $f1, $f2;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float getAlpha()>();

        $f2 = $f1 * f0;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void setAlpha(float)>($f2);

        return;
    }

    public void translate(float, float, float)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        float f0, f1, f2;
        int $i0;
        float[] $r1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        $i0 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        staticinvoke <android.opengl.Matrix: void translateM(float[],int,float,float,float)>($r1, $i0, f0, f1, f2);

        return;
    }

    public void translate(float, float)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        float[] r1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        r1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        $i1 = i0 + 12;

        $f7 = r1[$i1];

        $i2 = i0 + 0;

        $f2 = r1[$i2];

        $f5 = $f2 * f0;

        $i3 = i0 + 4;

        $f3 = r1[$i3];

        $f4 = $f3 * f1;

        $f6 = $f5 + $f4;

        $f8 = $f7 + $f6;

        r1[$i1] = $f8;

        $i4 = i0 + 13;

        $f13 = r1[$i4];

        $i5 = i0 + 1;

        $f9 = r1[$i5];

        $f11 = $f9 * f0;

        $i6 = i0 + 5;

        $f10 = r1[$i6];

        $f12 = $f10 * f1;

        $f14 = $f11 + $f12;

        $f15 = $f13 + $f14;

        r1[$i4] = $f15;

        $i7 = i0 + 14;

        $f22 = r1[$i7];

        $i8 = i0 + 2;

        $f16 = r1[$i8];

        $f18 = $f16 * f0;

        $i9 = i0 + 6;

        $f17 = r1[$i9];

        $f19 = $f17 * f1;

        $f21 = $f18 + $f19;

        $f20 = $f22 + $f21;

        r1[$i7] = $f20;

        $i10 = i0 + 15;

        $f26 = r1[$i10];

        $i12 = i0 + 3;

        $f24 = r1[$i12];

        $f28 = $f24 * f0;

        $i11 = i0 + 7;

        $f23 = r1[$i11];

        $f27 = $f23 * f1;

        $f25 = $f28 + $f27;

        $f29 = $f26 + $f25;

        r1[$i10] = $f29;

        return;
    }

    public void scale(float, float, float)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        float f0, f1, f2;
        int $i0;
        float[] $r1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        $i0 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        staticinvoke <android.opengl.Matrix: void scaleM(float[],int,float,float,float)>($r1, $i0, f0, f1, f2);

        return;
    }

    public void rotate(float, float, float, float)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        float f0, f1, f2, f3;
        float[] r1, r2;
        int i0;
        byte $b1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $b1 = f0 cmpl 0.0F;

        if $b1 != 0 goto label1;

        return;

     label1:
        r1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        staticinvoke <android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)>(r1, 0, f0, f1, f2, f3);

        r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        i0 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>(r1, 16, r2, i0, r1, 0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 16, r2, i0, 16);

        return;
    }

    public void multiplyMatrix(float[], int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        float[] r1, r2, r3;
        int i0, i1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        r3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        i1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>(r2, 0, r3, i1, r1, i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, i1, 16);

        return;
    }

    public void save()
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void save(int)>(-1);

        return;
    }

    public void save(int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        boolean z0, $z1, $z2, z3;
        float f0;
        com.android.gallery3d.util.IntArray $r1;
        float[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        i0 := @parameter0: int;

        $i2 = i0 & 1;

        if $i2 != 1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 == 0 goto label4;

        f0 = virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float getAlpha()>();

        $i11 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentAlphaIndex>;

        $i12 = $i11 + 1;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentAlphaIndex> = $i12;

        $r8 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mAlphas>;

        $i13 = lengthof $r8;

        $i14 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentAlphaIndex>;

        if $i13 > $i14 goto label3;

        $r12 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mAlphas>;

        $r10 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mAlphas>;

        $i16 = lengthof $r10;

        $i17 = $i16 * 2;

        $r11 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>($r12, $i17);

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mAlphas> = $r11;

     label3:
        $r9 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mAlphas>;

        $i15 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentAlphaIndex>;

        $r9[$i15] = f0;

     label4:
        $i3 = i0 & 2;

        if $i3 != 2 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        z3 = $z1;

        if z3 == 0 goto label8;

        i1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        $i4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        $i5 = $i4 + 16;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex> = $i5;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        $i7 = lengthof $r2;

        $i6 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        if $i7 > $i6 goto label7;

        $r6 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        $i9 = lengthof $r5;

        $i10 = $i9 * 2;

        $r7 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>($r6, $i10);

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices> = $r7;

     label7:
        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        $i8 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i1, $r3, $i8, 16);

     label8:
        $r1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.util.IntArray mSaveFlags>;

        virtualinvoke $r1.<com.android.gallery3d.util.IntArray: void add(int)>(i0);

        return;
    }

    public void restore()
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0, z1, $z2, $z3;
        com.android.gallery3d.util.IntArray $r1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.util.IntArray mSaveFlags>;

        i0 = virtualinvoke $r1.<com.android.gallery3d.util.IntArray: int removeLast()>();

        $i1 = i0 & 1;

        if $i1 != 1 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        if z0 == 0 goto label3;

        $i5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentAlphaIndex>;

        $i6 = $i5 - 1;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentAlphaIndex> = $i6;

     label3:
        $i2 = i0 & 2;

        if $i2 != 2 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        z1 = $z2;

        if z1 == 0 goto label6;

        $i3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        $i4 = $i3 - 16;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex> = $i4;

     label6:
        return;
    }

    public void drawLine(float, float, float, float, com.android.gallery3d.glrenderer.GLPaint)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        float f0, f1, f2, f3, $f4, $f5;
        com.android.gallery3d.glrenderer.GLPaint r1;
        int $i0, $i1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: com.android.gallery3d.glrenderer.GLPaint;

        $f5 = f2 - f0;

        $f4 = f3 - f1;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void draw(int,int,int,float,float,float,float,com.android.gallery3d.glrenderer.GLPaint)>(3, 4, 2, f0, f1, $f5, $f4, r1);

        $i0 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountDrawLine>;

        $i1 = $i0 + 1;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountDrawLine> = $i1;

        return;
    }

    public void drawRect(float, float, float, float, com.android.gallery3d.glrenderer.GLPaint)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        float f0, f1, f2, f3;
        com.android.gallery3d.glrenderer.GLPaint r1;
        int $i0, $i1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: com.android.gallery3d.glrenderer.GLPaint;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void draw(int,int,int,float,float,float,float,com.android.gallery3d.glrenderer.GLPaint)>(2, 6, 4, f0, f1, f2, f3, r1);

        $i0 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountDrawLine>;

        $i1 = $i0 + 1;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountDrawLine> = $i1;

        return;
    }

    private void draw(int, int, int, float, float, float, float, com.android.gallery3d.glrenderer.GLPaint)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        int i0, i1, i2, $i3;
        float f0, f1, f2, f3, $f4;
        com.android.gallery3d.glrenderer.GLPaint r1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        f2 := @parameter5: float;

        f3 := @parameter6: float;

        r1 := @parameter7: com.android.gallery3d.glrenderer.GLPaint;

        $i3 = virtualinvoke r1.<com.android.gallery3d.glrenderer.GLPaint: int getColor()>();

        $f4 = virtualinvoke r1.<com.android.gallery3d.glrenderer.GLPaint: float getLineWidth()>();

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void draw(int,int,int,float,float,float,float,int,float)>(i0, i1, i2, f0, f1, f2, f3, $i3, $f4);

        return;
    }

    private void draw(int, int, int, float, float, float, float, int, float)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        int i0, i1, i2, i3;
        float f0, f1, f2, f3, f4;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] $r1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        f2 := @parameter5: float;

        f3 := @parameter6: float;

        i3 := @parameter7: int;

        f4 := @parameter8: float;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void prepareDraw(int,int,float)>(i1, i3, f4);

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mDrawParameters>;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void draw(com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[],int,int,float,float,float,float)>($r1, i0, i2, f0, f1, f2, f3);

        return;
    }

    private void prepareDraw(int, int, float)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        int i0, i1, $i2, $i5;
        float f0, $f1, $f2, $f3, $f4, $f5;
        float[] r1;
        boolean z0, $z1;
        byte $b3, $b4;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] $r2, $r4;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter $r3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        $i2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mDrawProgram>;

        staticinvoke <android.opengl.GLES20: void glUseProgram(int)>($i2);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $b3 = f0 cmpl 0.0F;

        if $b3 <= 0 goto label1;

        staticinvoke <android.opengl.GLES20: void glLineWidth(float)>(f0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

     label1:
        r1 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] getColor(int)>(i1);

        $f1 = r1[3];

        $b4 = $f1 cmpg 1.0F;

        if $b4 >= 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void enableBlending(boolean)>(z0);

        if z0 == 0 goto label4;

        $f5 = r1[0];

        $f3 = r1[1];

        $f4 = r1[2];

        $f2 = r1[3];

        staticinvoke <android.opengl.GLES20: void glBlendColor(float,float,float,float)>($f5, $f3, $f4, $f2);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

     label4:
        $r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mDrawParameters>;

        $r3 = $r2[2];

        $i5 = $r3.<com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter: int handle>;

        staticinvoke <android.opengl.GLES20: void glUniform4fv(int,int,float[],int)>($i5, 1, r1, 0);

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mDrawParameters>;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void setPosition(com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[],int)>($r4, i0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        return;
    }

    private float[] getColor(int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        float[] $r1, $r2, $r3, $r4, $r5;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        i0 := @parameter0: int;

        $i1 = i0 >>> 24;

        $i2 = $i1 & 255;

        $f4 = (float) $i2;

        $f5 = $f4 / 255.0F;

        $f6 = virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float getAlpha()>();

        f0 = $f5 * $f6;

        $i3 = i0 >>> 16;

        $i4 = $i3 & 255;

        $f7 = (float) $i4;

        $f8 = $f7 / 255.0F;

        f1 = $f8 * f0;

        $i5 = i0 >>> 8;

        $i6 = $i5 & 255;

        $f9 = (float) $i6;

        $f10 = $f9 / 255.0F;

        f2 = $f10 * f0;

        $i7 = i0 & 255;

        $f12 = (float) $i7;

        $f11 = $f12 / 255.0F;

        f3 = $f11 * f0;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempColor>;

        $r2[0] = f1;

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempColor>;

        $r1[1] = f2;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempColor>;

        $r4[2] = f3;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempColor>;

        $r3[3] = f0;

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempColor>;

        return $r5;
    }

    private void enableBlending(boolean)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        boolean z0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        staticinvoke <android.opengl.GLES20: void glEnable(int)>(3042);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        goto label2;

     label1:
        staticinvoke <android.opengl.GLES20: void glDisable(int)>(3042);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

     label2:
        return;
    }

    private void setPosition(com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[], int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] r1;
        int i0, $i1, $i2, $i3;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter $r2;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[];

        i0 := @parameter1: int;

        $i1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mBoxCoordinates>;

        staticinvoke <android.opengl.GLES20: void glBindBuffer(int,int)>(34962, $i1);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $r2 = r1[0];

        $i3 = $r2.<com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter: int handle>;

        $i2 = i0 * 8;

        staticinvoke <android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,int)>($i3, 2, 5126, 0, 8, $i2);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glBindBuffer(int,int)>(34962, 0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        return;
    }

    private void draw(com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[], int, int, float, float, float, float)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] r1;
        int i0, i1, i2;
        float f0, f1, f2, f3;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter $r2;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        f2 := @parameter5: float;

        f3 := @parameter6: float;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void setMatrix(com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[],float,float,float,float)>(r1, f0, f1, f2, f3);

        $r2 = r1[0];

        i2 = $r2.<com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter: int handle>;

        staticinvoke <android.opengl.GLES20: void glEnableVertexAttribArray(int)>(i2);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glDrawArrays(int,int,int)>(i0, 0, i1);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glDisableVertexAttribArray(int)>(i2);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        return;
    }

    private void setMatrix(com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[], float, float, float, float)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] r1;
        float f0, f1, f2, f3;
        int $i0, $i1;
        float[] $r2, $r3, $r4, $r5, $r6, $r7, $r9;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter $r8;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[];

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        $i0 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        staticinvoke <android.opengl.Matrix: void translateM(float[],int,float[],int,float,float,float)>($r3, 0, $r2, $i0, f0, f1, 0.0F);

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        staticinvoke <android.opengl.Matrix: void scaleM(float[],int,float,float,float)>($r4, 0, f2, f3, 1.0F);

        $r7 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        $r6 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mProjectionMatrix>;

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>($r7, 16, $r6, 0, $r5, 0);

        $r8 = r1[1];

        $i1 = $r8.<com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter: int handle>;

        $r9 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        staticinvoke <android.opengl.GLES20: void glUniformMatrix4fv(int,int,boolean,float[],int)>($i1, 1, 0, $r9, 16);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        return;
    }

    public void fillRect(float, float, float, float, int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        float f0, f1, f2, f3;
        int i0, $i1, $i2;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        i0 := @parameter4: int;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void draw(int,int,int,float,float,float,float,int,float)>(5, 0, 4, f0, f1, f2, f3, i0, 0.0F);

        $i1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountFillRect>;

        $i2 = $i1 + 1;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountFillRect> = $i2;

        return;
    }

    public void drawTexture(com.android.gallery3d.glrenderer.BasicTexture, int, int, int, int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, i1, i2, i3, $i4, $i5;
        android.graphics.RectF $r2, $r3, $r4, $r5, $r6, $r7;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        if i2 <= 0 goto label1;

        if i3 > 0 goto label2;

     label1:
        return;

     label2:
        $r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempSourceRect>;

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void copyTextureCoordinates(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF)>(r1, $r2);

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempTargetRect>;

        $f3 = (float) i0;

        $f2 = (float) i1;

        $i4 = i0 + i2;

        $f1 = (float) $i4;

        $i5 = i1 + i3;

        $f0 = (float) $i5;

        virtualinvoke $r3.<android.graphics.RectF: void set(float,float,float,float)>($f3, $f2, $f1, $f0);

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempSourceRect>;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempTargetRect>;

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void convertCoordinate(android.graphics.RectF,android.graphics.RectF,com.android.gallery3d.glrenderer.BasicTexture)>($r5, $r4, r1);

        $r6 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempSourceRect>;

        $r7 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempTargetRect>;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void drawTextureRect(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF,android.graphics.RectF)>(r1, $r6, $r7);

        return;
    }

    private static void copyTextureCoordinates(com.android.gallery3d.glrenderer.BasicTexture, android.graphics.RectF)
    {
        com.android.gallery3d.glrenderer.BasicTexture r0;
        android.graphics.RectF r1;
        boolean z0, z1, $z2;
        int i0, i1;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        r1 := @parameter1: android.graphics.RectF;

        z0 = 0;

        z1 = 0;

        i0 = virtualinvoke r0.<com.android.gallery3d.glrenderer.BasicTexture: int getWidth()>();

        i1 = virtualinvoke r0.<com.android.gallery3d.glrenderer.BasicTexture: int getHeight()>();

        $z2 = virtualinvoke r0.<com.android.gallery3d.glrenderer.BasicTexture: boolean hasBorder()>();

        if $z2 == 0 goto label1;

        z0 = 1;

        z1 = 1;

        i0 = i0 + -1;

        i1 = i1 + -1;

     label1:
        $f3 = (float) z0;

        $f2 = (float) z1;

        $f1 = (float) i0;

        $f0 = (float) i1;

        virtualinvoke r1.<android.graphics.RectF: void set(float,float,float,float)>($f3, $f2, $f1, $f0);

        return;
    }

    public void drawTexture(com.android.gallery3d.glrenderer.BasicTexture, android.graphics.RectF, android.graphics.RectF)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        android.graphics.RectF r2, r3, $r4, $r5, $r6, $r7, $r8, $r9;
        float $f0, $f1;
        byte $b0, $b1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        r2 := @parameter1: android.graphics.RectF;

        r3 := @parameter2: android.graphics.RectF;

        $f0 = virtualinvoke r3.<android.graphics.RectF: float width()>();

        $b0 = $f0 cmpg 0.0F;

        if $b0 <= 0 goto label1;

        $f1 = virtualinvoke r3.<android.graphics.RectF: float height()>();

        $b1 = $f1 cmpg 0.0F;

        if $b1 > 0 goto label2;

     label1:
        return;

     label2:
        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempSourceRect>;

        virtualinvoke $r4.<android.graphics.RectF: void set(android.graphics.RectF)>(r2);

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempTargetRect>;

        virtualinvoke $r5.<android.graphics.RectF: void set(android.graphics.RectF)>(r3);

        $r7 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempSourceRect>;

        $r6 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempTargetRect>;

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void convertCoordinate(android.graphics.RectF,android.graphics.RectF,com.android.gallery3d.glrenderer.BasicTexture)>($r7, $r6, r1);

        $r9 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempSourceRect>;

        $r8 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempTargetRect>;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void drawTextureRect(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF,android.graphics.RectF)>(r1, $r9, $r8);

        return;
    }

    public void drawTexture(com.android.gallery3d.glrenderer.BasicTexture, float[], int, int, int, int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        float[] r2;
        int i0, i1, i2, i3, $i4, $i5;
        float $f0, $f1, $f2, $f3;
        android.graphics.RectF $r3, $r4;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        r2 := @parameter1: float[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        if i2 <= 0 goto label1;

        if i3 > 0 goto label2;

     label1:
        return;

     label2:
        $r3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempTargetRect>;

        $f3 = (float) i0;

        $f2 = (float) i1;

        $i4 = i0 + i2;

        $f1 = (float) $i4;

        $i5 = i1 + i3;

        $f0 = (float) $i5;

        virtualinvoke $r3.<android.graphics.RectF: void set(float,float,float,float)>($f3, $f2, $f1, $f0);

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempTargetRect>;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void drawTextureRect(com.android.gallery3d.glrenderer.BasicTexture,float[],android.graphics.RectF)>(r1, r2, $r4);

        return;
    }

    private void drawTextureRect(com.android.gallery3d.glrenderer.BasicTexture, android.graphics.RectF, android.graphics.RectF)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        android.graphics.RectF r2, r3;
        float[] $r4;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        r2 := @parameter1: android.graphics.RectF;

        r3 := @parameter2: android.graphics.RectF;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void setTextureMatrix(android.graphics.RectF)>(r2);

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempTextureMatrix>;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void drawTextureRect(com.android.gallery3d.glrenderer.BasicTexture,float[],android.graphics.RectF)>(r1, $r4, r3);

        return;
    }

    private void setTextureMatrix(android.graphics.RectF)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        android.graphics.RectF r1;
        float[] $r2, $r3, $r4, $r5;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: android.graphics.RectF;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempTextureMatrix>;

        $f0 = virtualinvoke r1.<android.graphics.RectF: float width()>();

        $r2[0] = $f0;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempTextureMatrix>;

        $f1 = virtualinvoke r1.<android.graphics.RectF: float height()>();

        $r3[5] = $f1;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempTextureMatrix>;

        $f2 = r1.<android.graphics.RectF: float left>;

        $r4[12] = $f2;

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempTextureMatrix>;

        $f3 = r1.<android.graphics.RectF: float top>;

        $r5[13] = $f3;

        return;
    }

    private static void convertCoordinate(android.graphics.RectF, android.graphics.RectF, com.android.gallery3d.glrenderer.BasicTexture)
    {
        android.graphics.RectF r0, r1;
        com.android.gallery3d.glrenderer.BasicTexture r2;
        int i0, i1, i2, i3;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35;
        byte $b4, $b5;

        r0 := @parameter0: android.graphics.RectF;

        r1 := @parameter1: android.graphics.RectF;

        r2 := @parameter2: com.android.gallery3d.glrenderer.BasicTexture;

        i0 = virtualinvoke r2.<com.android.gallery3d.glrenderer.BasicTexture: int getWidth()>();

        i1 = virtualinvoke r2.<com.android.gallery3d.glrenderer.BasicTexture: int getHeight()>();

        i2 = virtualinvoke r2.<com.android.gallery3d.glrenderer.BasicTexture: int getTextureWidth()>();

        i3 = virtualinvoke r2.<com.android.gallery3d.glrenderer.BasicTexture: int getTextureHeight()>();

        $f3 = r0.<android.graphics.RectF: float left>;

        $f2 = (float) i2;

        $f4 = $f3 / $f2;

        r0.<android.graphics.RectF: float left> = $f4;

        $f5 = r0.<android.graphics.RectF: float right>;

        $f6 = (float) i2;

        $f8 = $f5 / $f6;

        r0.<android.graphics.RectF: float right> = $f8;

        $f10 = r0.<android.graphics.RectF: float top>;

        $f7 = (float) i3;

        $f9 = $f10 / $f7;

        r0.<android.graphics.RectF: float top> = $f9;

        $f11 = r0.<android.graphics.RectF: float bottom>;

        $f12 = (float) i3;

        $f14 = $f11 / $f12;

        r0.<android.graphics.RectF: float bottom> = $f14;

        $f16 = (float) i0;

        $f13 = (float) i2;

        f0 = $f16 / $f13;

        $f15 = r0.<android.graphics.RectF: float right>;

        $b4 = $f15 cmpl f0;

        if $b4 <= 0 goto label1;

        $f30 = r1.<android.graphics.RectF: float left>;

        $f27 = virtualinvoke r1.<android.graphics.RectF: float width()>();

        $f28 = r0.<android.graphics.RectF: float left>;

        $f33 = f0 - $f28;

        $f34 = $f27 * $f33;

        $f31 = virtualinvoke r0.<android.graphics.RectF: float width()>();

        $f32 = $f34 / $f31;

        $f35 = $f30 + $f32;

        r1.<android.graphics.RectF: float right> = $f35;

        r0.<android.graphics.RectF: float right> = f0;

     label1:
        $f19 = (float) i1;

        $f17 = (float) i3;

        f1 = $f19 / $f17;

        $f18 = r0.<android.graphics.RectF: float bottom>;

        $b5 = $f18 cmpl f1;

        if $b5 <= 0 goto label2;

        $f22 = r1.<android.graphics.RectF: float top>;

        $f20 = virtualinvoke r1.<android.graphics.RectF: float height()>();

        $f21 = r0.<android.graphics.RectF: float top>;

        $f25 = f1 - $f21;

        $f26 = $f20 * $f25;

        $f23 = virtualinvoke r0.<android.graphics.RectF: float height()>();

        $f24 = $f26 / $f23;

        $f29 = $f22 + $f24;

        r1.<android.graphics.RectF: float bottom> = $f29;

        r0.<android.graphics.RectF: float bottom> = f1;

     label2:
        return;
    }

    private void drawTextureRect(com.android.gallery3d.glrenderer.BasicTexture, float[], android.graphics.RectF)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        float[] r2;
        android.graphics.RectF r3;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] r4;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter $r5;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        r2 := @parameter1: float[];

        r3 := @parameter2: android.graphics.RectF;

        r4 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] prepareTexture(com.android.gallery3d.glrenderer.BasicTexture)>(r1);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void setPosition(com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[],int)>(r4, 0);

        $r5 = r4[2];

        $i0 = $r5.<com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter: int handle>;

        staticinvoke <android.opengl.GLES20: void glUniformMatrix4fv(int,int,boolean,float[],int)>($i0, 1, 0, r2, 0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $z0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: boolean isFlippedVertically()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void save(int)>(2);

        $f4 = virtualinvoke r3.<android.graphics.RectF: float centerY()>();

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void translate(float,float)>(0.0F, $f4);

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void scale(float,float,float)>(1.0F, -1.0F, 1.0F);

        $f5 = virtualinvoke r3.<android.graphics.RectF: float centerY()>();

        $f6 = neg $f5;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void translate(float,float)>(0.0F, $f6);

     label1:
        $f0 = r3.<android.graphics.RectF: float left>;

        $f1 = r3.<android.graphics.RectF: float top>;

        $f2 = virtualinvoke r3.<android.graphics.RectF: float width()>();

        $f3 = virtualinvoke r3.<android.graphics.RectF: float height()>();

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void draw(com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[],int,int,float,float,float,float)>(r4, 5, 4, $f0, $f1, $f2, $f3);

        $z1 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: boolean isFlippedVertically()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void restore()>();

     label2:
        $i2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountTextureRect>;

        $i1 = $i2 + 1;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountTextureRect> = $i1;

        return;
    }

    private com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] prepareTexture(com.android.gallery3d.glrenderer.BasicTexture)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] r2;
        int i0, $i1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        $i1 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTarget()>();

        if $i1 != 3553 goto label1;

        r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mTextureParameters>;

        i0 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mTextureProgram>;

        goto label2;

     label1:
        r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mOesTextureParameters>;

        i0 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mOesTextureProgram>;

     label2:
        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void prepareTexture(com.android.gallery3d.glrenderer.BasicTexture,int,com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[])>(r1, i0, r2);

        return r2;
    }

    private void prepareTexture(com.android.gallery3d.glrenderer.BasicTexture, int, com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[])
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, $i1, $i2, $i3, $i4;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] r2;
        boolean $z0, $z2;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter $r3, $r4;
        float $f0, $f1;
        byte $b5;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[];

        staticinvoke <android.opengl.GLES20: void glUseProgram(int)>(i0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $z0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: boolean isOpaque()>();

        if $z0 == 0 goto label1;

        $f1 = virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float getAlpha()>();

        $b5 = $f1 cmpg 0.95F;

        if $b5 >= 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void enableBlending(boolean)>($z2);

        staticinvoke <android.opengl.GLES20: void glActiveTexture(int)>(33984);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: boolean onBind(com.android.gallery3d.glrenderer.GLCanvas)>(r0);

        $i1 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTarget()>();

        $i2 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getId()>();

        staticinvoke <android.opengl.GLES20: void glBindTexture(int,int)>($i1, $i2);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $r3 = r2[3];

        $i3 = $r3.<com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter: int handle>;

        staticinvoke <android.opengl.GLES20: void glUniform1i(int,int)>($i3, 0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $r4 = r2[4];

        $i4 = $r4.<com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter: int handle>;

        $f0 = virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float getAlpha()>();

        staticinvoke <android.opengl.GLES20: void glUniform1f(int,float)>($i4, $f0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        return;
    }

    public void drawMesh(com.android.gallery3d.glrenderer.BasicTexture, int, int, int, int, int, int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] $r2, $r3, $r5, $r7;
        com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter $r4, $r6;
        float $f0, $f1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        $i8 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mMeshProgram>;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mMeshParameters>;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void prepareTexture(com.android.gallery3d.glrenderer.BasicTexture,int,com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[])>(r1, $i8, $r2);

        staticinvoke <android.opengl.GLES20: void glBindBuffer(int,int)>(34963, i4);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glBindBuffer(int,int)>(34962, i2);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mMeshParameters>;

        $r4 = $r3[0];

        i6 = $r4.<com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter: int handle>;

        staticinvoke <android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,int)>(i6, 2, 5126, 0, 8, 0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glBindBuffer(int,int)>(34962, i3);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mMeshParameters>;

        $r6 = $r5[2];

        i7 = $r6.<com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter: int handle>;

        staticinvoke <android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,int)>(i7, 2, 5126, 0, 8, 0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glBindBuffer(int,int)>(34962, 0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glEnableVertexAttribArray(int)>(i6);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glEnableVertexAttribArray(int)>(i7);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $r7 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[] mMeshParameters>;

        $f0 = (float) i0;

        $f1 = (float) i1;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void setMatrix(com.android.gallery3d.glrenderer.GLES20Canvas$ShaderParameter[],float,float,float,float)>($r7, $f0, $f1, 1.0F, 1.0F);

        staticinvoke <android.opengl.GLES20: void glDrawElements(int,int,int,int)>(5, i5, 5121, 0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glDisableVertexAttribArray(int)>(i6);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glDisableVertexAttribArray(int)>(i7);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glBindBuffer(int,int)>(34963, 0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $i9 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountDrawMesh>;

        $i10 = $i9 + 1;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountDrawMesh> = $i10;

        return;
    }

    public void drawMixed(com.android.gallery3d.glrenderer.BasicTexture, int, float, int, int, int, int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, i1, i2, i3, i4, $i5, $i6;
        float f0, $f1, $f2, $f3, $f4;
        android.graphics.RectF $r2, $r3, $r4, $r5;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempSourceRect>;

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void copyTextureCoordinates(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF)>(r1, $r2);

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempTargetRect>;

        $f4 = (float) i1;

        $f3 = (float) i2;

        $i5 = i1 + i3;

        $f2 = (float) $i5;

        $i6 = i2 + i4;

        $f1 = (float) $i6;

        virtualinvoke $r3.<android.graphics.RectF: void set(float,float,float,float)>($f4, $f3, $f2, $f1);

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempSourceRect>;

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: android.graphics.RectF mTempTargetRect>;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void drawMixed(com.android.gallery3d.glrenderer.BasicTexture,int,float,android.graphics.RectF,android.graphics.RectF)>(r1, i0, f0, $r4, $r5);

        return;
    }

    public void drawMixed(com.android.gallery3d.glrenderer.BasicTexture, int, float, android.graphics.RectF, android.graphics.RectF)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        android.graphics.RectF r2, r3;
        byte $b1, $b2;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        r2 := @parameter3: android.graphics.RectF;

        r3 := @parameter4: android.graphics.RectF;

        $f5 = virtualinvoke r3.<android.graphics.RectF: float width()>();

        $b1 = $f5 cmpg 0.0F;

        if $b1 <= 0 goto label1;

        $f6 = virtualinvoke r3.<android.graphics.RectF: float height()>();

        $b2 = $f6 cmpg 0.0F;

        if $b2 > 0 goto label2;

     label1:
        return;

     label2:
        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void save(int)>(1);

        f1 = virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float getAlpha()>();

        $f7 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, f0);

        f2 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f7);

        $f9 = 1.0F - f2;

        f3 = $f9 * f1;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void setAlpha(float)>(f3);

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF,android.graphics.RectF)>(r1, r2, r3);

        f4 = f2 * f1;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void setAlpha(float)>(f4);

        $f8 = r3.<android.graphics.RectF: float left>;

        $f11 = r3.<android.graphics.RectF: float top>;

        $f10 = virtualinvoke r3.<android.graphics.RectF: float width()>();

        $f12 = virtualinvoke r3.<android.graphics.RectF: float height()>();

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void fillRect(float,float,float,float,int)>($f8, $f11, $f10, $f12, i0);

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void restore()>();

        return;
    }

    public boolean unloadTexture(com.android.gallery3d.glrenderer.BasicTexture)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        boolean z0;
        com.android.gallery3d.util.IntArray r2, $r4, $r5;
        java.lang.Throwable r3, $r6;
        int $i0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        z0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: boolean isLoaded()>();

        if z0 == 0 goto label5;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.util.IntArray mUnboundTextures>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.util.IntArray mUnboundTextures>;

        $i0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getId()>();

        virtualinvoke $r5.<com.android.gallery3d.util.IntArray: void add(int)>($i0);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return z0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void deleteBuffer(int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        int i0;
        com.android.gallery3d.util.IntArray r1, $r3, $r4;
        java.lang.Throwable r2, $r5;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.util.IntArray mUnboundTextures>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.util.IntArray mDeleteBuffers>;

        virtualinvoke $r4.<com.android.gallery3d.util.IntArray: void add(int)>(i0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void deleteRecycledResources()
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.util.IntArray r1, r2, $r4, $r5, r11;
        java.lang.Throwable r3, $r9;
        int $i0, $i1, $i2, $i3;
        com.android.gallery3d.glrenderer.GLId $r6, $r8;
        int[] $r7, $r10;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.util.IntArray mUnboundTextures>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.util.IntArray mUnboundTextures>;

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.util.IntArray mUnboundTextures>;

        $i0 = virtualinvoke $r5.<com.android.gallery3d.util.IntArray: int size()>();

        if $i0 <= 0 goto label2;

        $r8 = <com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLId mGLId>;

        $i3 = virtualinvoke r2.<com.android.gallery3d.util.IntArray: int size()>();

        $r10 = virtualinvoke r2.<com.android.gallery3d.util.IntArray: int[] getInternalArray()>();

        interfaceinvoke $r8.<com.android.gallery3d.glrenderer.GLId: void glDeleteTextures(javax.microedition.khronos.opengles.GL11,int,int[],int)>(null, $i3, $r10, 0);

        virtualinvoke r2.<com.android.gallery3d.util.IntArray: void clear()>();

     label2:
        r11 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.util.IntArray mDeleteBuffers>;

        $i1 = virtualinvoke r11.<com.android.gallery3d.util.IntArray: int size()>();

        if $i1 <= 0 goto label3;

        $r6 = <com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLId mGLId>;

        $i2 = virtualinvoke r11.<com.android.gallery3d.util.IntArray: int size()>();

        $r7 = virtualinvoke r11.<com.android.gallery3d.util.IntArray: int[] getInternalArray()>();

        interfaceinvoke $r6.<com.android.gallery3d.glrenderer.GLId: void glDeleteBuffers(javax.microedition.khronos.opengles.GL11,int,int[],int)>(null, $i2, $r7, 0);

        virtualinvoke r11.<com.android.gallery3d.util.IntArray: void clear()>();

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r1;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void dumpStatisticsAndClear()
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        java.lang.String r1, $r7;
        java.lang.Object[] $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r3, $r4, $r5, $r6;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        $r2 = newarray (java.lang.Object)[4];

        $i0 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountDrawMesh>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $i1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountTextureRect>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r4;

        $i2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountFillRect>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[2] = $r5;

        $i3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountDrawLine>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[3] = $r6;

        r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("MESH:%d, TEX_RECT:%d, FILL_RECT:%d, LINE:%d", $r2);

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountDrawMesh> = 0;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountTextureRect> = 0;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountFillRect> = 0;

        r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCountDrawLine> = 0;

        $r7 = <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r7, r1);

        return;
    }

    public void endRenderTarget()
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.RawTexture r1, r2;
        java.util.ArrayList $r3, $r4;
        int $i0, $i1;
        java.lang.Object $r5;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: java.util.ArrayList mTargetTextures>;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: java.util.ArrayList mTargetTextures>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        r1 = (com.android.gallery3d.glrenderer.RawTexture) $r5;

        r2 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.RawTexture getTargetTexture()>();

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void setRenderTarget(com.android.gallery3d.glrenderer.BasicTexture,com.android.gallery3d.glrenderer.RawTexture)>(r1, r2);

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void restore()>();

        return;
    }

    public void beginRenderTarget(com.android.gallery3d.glrenderer.RawTexture)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.RawTexture r1, r2;
        java.util.ArrayList $r3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.RawTexture;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void save()>();

        r2 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.RawTexture getTargetTexture()>();

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: java.util.ArrayList mTargetTextures>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void setRenderTarget(com.android.gallery3d.glrenderer.BasicTexture,com.android.gallery3d.glrenderer.RawTexture)>(r2, r1);

        return;
    }

    private com.android.gallery3d.glrenderer.RawTexture getTargetTexture()
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        java.util.ArrayList $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        com.android.gallery3d.glrenderer.RawTexture $r4;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: java.util.ArrayList mTargetTextures>;

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: java.util.ArrayList mTargetTextures>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (com.android.gallery3d.glrenderer.RawTexture) $r3;

        return $r4;
    }

    private void setRenderTarget(com.android.gallery3d.glrenderer.BasicTexture, com.android.gallery3d.glrenderer.RawTexture)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        com.android.gallery3d.glrenderer.RawTexture r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        int[] $r3, $r4, $r5;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        r2 := @parameter1: com.android.gallery3d.glrenderer.RawTexture;

        if r1 != null goto label1;

        if r2 == null goto label1;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int[] mFrameBuffer>;

        staticinvoke <android.opengl.GLES20: void glGenFramebuffers(int,int[],int)>(1, $r4, 0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int[] mFrameBuffer>;

        $i6 = $r5[0];

        staticinvoke <android.opengl.GLES20: void glBindFramebuffer(int,int)>(36160, $i6);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        goto label2;

     label1:
        if r1 == null goto label2;

        if r2 != null goto label2;

        staticinvoke <android.opengl.GLES20: void glBindFramebuffer(int,int)>(36160, 0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int[] mFrameBuffer>;

        staticinvoke <android.opengl.GLES20: void glDeleteFramebuffers(int,int[],int)>(1, $r3, 0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

     label2:
        if r2 != null goto label3;

        $i5 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mScreenWidth>;

        $i4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mScreenHeight>;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void setSize(int,int)>($i5, $i4);

        goto label5;

     label3:
        $i0 = virtualinvoke r2.<com.android.gallery3d.glrenderer.RawTexture: int getWidth()>();

        $i1 = virtualinvoke r2.<com.android.gallery3d.glrenderer.RawTexture: int getHeight()>();

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: void setSize(int,int)>($i0, $i1);

        $z0 = virtualinvoke r2.<com.android.gallery3d.glrenderer.RawTexture: boolean isLoaded()>();

        if $z0 != 0 goto label4;

        virtualinvoke r2.<com.android.gallery3d.glrenderer.RawTexture: void prepare(com.android.gallery3d.glrenderer.GLCanvas)>(r0);

     label4:
        $i2 = virtualinvoke r2.<com.android.gallery3d.glrenderer.RawTexture: int getTarget()>();

        $i3 = virtualinvoke r2.<com.android.gallery3d.glrenderer.RawTexture: int getId()>();

        staticinvoke <android.opengl.GLES20: void glFramebufferTexture2D(int,int,int,int,int)>(36160, 36064, $i2, $i3, 0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkFramebufferStatus()>();

     label5:
        return;
    }

    private static void checkFramebufferStatus()
    {
        int i0;
        java.lang.String r0, $r5, $r7;
        java.lang.RuntimeException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r6;

        i0 = staticinvoke <android.opengl.GLES20: int glCheckFramebufferStatus(int)>(36160);

        if i0 == 36053 goto label6;

        r0 = "";

        tableswitch(i0)
        {
            case 36054: goto label1;
            case 36055: goto label3;
            case 36056: goto label5;
            case 36057: goto label2;
            case 36058: goto label5;
            case 36059: goto label5;
            case 36060: goto label5;
            case 36061: goto label4;
            default: goto label5;
        };

     label1:
        r0 = "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT";

        goto label5;

     label2:
        r0 = "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS";

        goto label5;

     label3:
        r0 = "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";

        goto label5;

     label4:
        r0 = "GL_FRAMEBUFFER_UNSUPPORTED";

     label5:
        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label6:
        return;
    }

    public void setTextureParameters(com.android.gallery3d.glrenderer.BasicTexture)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, $i1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTarget()>();

        $i1 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getId()>();

        staticinvoke <android.opengl.GLES20: void glBindTexture(int,int)>(i0, $i1);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLES20: void glTexParameteri(int,int,int)>(i0, 10242, 33071);

        staticinvoke <android.opengl.GLES20: void glTexParameteri(int,int,int)>(i0, 10243, 33071);

        staticinvoke <android.opengl.GLES20: void glTexParameterf(int,int,float)>(i0, 10241, 9729.0F);

        staticinvoke <android.opengl.GLES20: void glTexParameterf(int,int,float)>(i0, 10240, 9729.0F);

        return;
    }

    public void initializeTextureSize(com.android.gallery3d.glrenderer.BasicTexture, int, int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, i1, i2, i3, i4, $i5;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTarget()>();

        $i5 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getId()>();

        staticinvoke <android.opengl.GLES20: void glBindTexture(int,int)>(i2, $i5);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        i3 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTextureWidth()>();

        i4 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTextureHeight()>();

        staticinvoke <android.opengl.GLES20: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>(i2, 0, i0, i3, i4, 0, i0, i1, null);

        return;
    }

    public void initializeTexture(com.android.gallery3d.glrenderer.BasicTexture, android.graphics.Bitmap)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        android.graphics.Bitmap r2;
        int i0, $i1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        r2 := @parameter1: android.graphics.Bitmap;

        i0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTarget()>();

        $i1 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getId()>();

        staticinvoke <android.opengl.GLES20: void glBindTexture(int,int)>(i0, $i1);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLUtils: void texImage2D(int,int,android.graphics.Bitmap,int)>(i0, 0, r2, 0);

        return;
    }

    public void texSubImage2D(com.android.gallery3d.glrenderer.BasicTexture, int, int, android.graphics.Bitmap, int, int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, i1, i2, i3, i4, $i5;
        android.graphics.Bitmap r2;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Bitmap;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTarget()>();

        $i5 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getId()>();

        staticinvoke <android.opengl.GLES20: void glBindTexture(int,int)>(i4, $i5);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        staticinvoke <android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap,int,int)>(i4, 0, i0, i1, r2, i2, i3);

        return;
    }

    public int uploadBuffer(java.nio.FloatBuffer)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        java.nio.FloatBuffer r1;
        int $i0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: java.nio.FloatBuffer;

        $i0 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int uploadBuffer(java.nio.Buffer,int)>(r1, 4);

        return $i0;
    }

    public int uploadBuffer(java.nio.ByteBuffer)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        java.nio.ByteBuffer r1;
        int $i0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int uploadBuffer(java.nio.Buffer,int)>(r1, 1);

        return $i0;
    }

    private int uploadBuffer(java.nio.Buffer, int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        java.nio.Buffer r1;
        int i0, i1, $i2, $i3;
        int[] $r2, $r4;
        com.android.gallery3d.glrenderer.GLId $r3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: java.nio.Buffer;

        i0 := @parameter1: int;

        $r3 = <com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLId mGLId>;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int[] mTempIntArray>;

        interfaceinvoke $r3.<com.android.gallery3d.glrenderer.GLId: void glGenBuffers(int,int[],int)>(1, $r2, 0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int[] mTempIntArray>;

        i1 = $r4[0];

        staticinvoke <android.opengl.GLES20: void glBindBuffer(int,int)>(34962, i1);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        $i2 = virtualinvoke r1.<java.nio.Buffer: int capacity()>();

        $i3 = $i2 * i0;

        staticinvoke <android.opengl.GLES20: void glBufferData(int,int,java.nio.Buffer,int)>(34962, $i3, r1, 35044);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        return i1;
    }

    public static void checkError()
    {
        int i0;
        java.lang.Throwable r0, $r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        i0 = staticinvoke <android.opengl.GLES20: int glGetError()>();

        if i0 == 0 goto label1;

        $r1 = new java.lang.Throwable;

        specialinvoke $r1.<java.lang.Throwable: void <init>()>();

        r0 = $r1;

        $r3 = <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GL error: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, $r6, r0);

     label1:
        return;
    }

    private static void printMatrix(java.lang.String, float[], int)
    {
        java.lang.String r0, $r4, $r5;
        float[] r1;
        int i0, i1, $i3, $i4;
        java.lang.StringBuilder r2, $r3;
        float $f0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: float[];

        i0 := @parameter2: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r0);

        r2 = $r3;

        i1 = 0;

     label1:
        if i1 >= 16 goto label3;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i3 = i1 % 4;

        if $i3 != 0 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label2:
        $i4 = i0 + i1;

        $f0 = r1[$i4];

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        i1 = i1 + 1;

        goto label1;

     label3:
        $r4 = <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String TAG>;

        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r4, $r5);

        return;
    }

    public void recoverFromLightCycle()
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        int $i0, $i1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        $i1 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mWidth>;

        $i0 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mHeight>;

        staticinvoke <android.opengl.GLES20: void glViewport(int,int,int,int)>(0, 0, $i1, $i0);

        staticinvoke <android.opengl.GLES20: void glDisable(int)>(2929);

        staticinvoke <android.opengl.GLES20: void glBlendFunc(int,int)>(1, 771);

        staticinvoke <com.android.gallery3d.glrenderer.GLES20Canvas: void checkError()>();

        return;
    }

    public void getBounds(android.graphics.Rect, int, int, int, int)
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        android.graphics.Rect r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        float[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        r1 := @parameter0: android.graphics.Rect;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mMatrices>;

        $i4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: int mCurrentMatrixIndex>;

        $f1 = (float) i0;

        $f0 = (float) i1;

        staticinvoke <android.opengl.Matrix: void translateM(float[],int,float[],int,float,float,float)>($r3, 0, $r2, $i4, $f1, $f0, 0.0F);

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        $f3 = (float) i2;

        $f2 = (float) i3;

        staticinvoke <android.opengl.Matrix: void scaleM(float[],int,float,float,float)>($r4, 0, $f3, $f2, 1.0F);

        $r8 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        $r6 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        $r5 = <com.android.gallery3d.glrenderer.GLES20Canvas: float[] BOUNDS_COORDINATES>;

        staticinvoke <android.opengl.Matrix: void multiplyMV(float[],int,float[],int,float[],int)>($r8, 16, $r6, 0, $r5, 0);

        $r9 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        $r10 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        $r7 = <com.android.gallery3d.glrenderer.GLES20Canvas: float[] BOUNDS_COORDINATES>;

        staticinvoke <android.opengl.Matrix: void multiplyMV(float[],int,float[],int,float[],int)>($r9, 20, $r10, 0, $r7, 4);

        $r11 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        $f4 = $r11[16];

        $i5 = staticinvoke <java.lang.Math: int round(float)>($f4);

        r1.<android.graphics.Rect: int left> = $i5;

        $r12 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        $f5 = $r12[20];

        $i6 = staticinvoke <java.lang.Math: int round(float)>($f5);

        r1.<android.graphics.Rect: int right> = $i6;

        $r13 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        $f6 = $r13[17];

        $i7 = staticinvoke <java.lang.Math: int round(float)>($f6);

        r1.<android.graphics.Rect: int top> = $i7;

        $r14 = r0.<com.android.gallery3d.glrenderer.GLES20Canvas: float[] mTempMatrix>;

        $f7 = $r14[21];

        $i8 = staticinvoke <java.lang.Math: int round(float)>($f7);

        r1.<android.graphics.Rect: int bottom> = $i8;

        virtualinvoke r1.<android.graphics.Rect: void sort()>();

        return;
    }

    public com.android.gallery3d.glrenderer.GLId getGLId()
    {
        com.android.gallery3d.glrenderer.GLES20Canvas r0;
        com.android.gallery3d.glrenderer.GLId $r1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES20Canvas;

        $r1 = <com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLId mGLId>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        float[] $r2, $r3;
        com.android.gallery3d.glrenderer.GLES20IdImpl $r4;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int INDEX_TEXTURE_COORD> = 2;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int INDEX_ALPHA> = 4;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int INDEX_TEXTURE_SAMPLER> = 3;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int INDEX_TEXTURE_MATRIX> = 2;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int INDEX_COLOR> = 2;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int INDEX_MATRIX> = 1;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int INDEX_POSITION> = 0;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int MATRIX_SIZE> = 16;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int INITIAL_RESTORE_STATE_SIZE> = 8;

        <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String OES_TEXTURE_FRAGMENT_SHADER> = "#extension GL_OES_EGL_image_external : require\nprecision mediump float;\nvarying vec2 vTextureCoord;\nuniform float uAlpha;\nuniform samplerExternalOES uTextureSampler;\nvoid main() {\n  gl_FragColor = texture2D(uTextureSampler, vTextureCoord);\n  gl_FragColor *= uAlpha;\n}\n";

        <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String TEXTURE_FRAGMENT_SHADER> = "precision mediump float;\nvarying vec2 vTextureCoord;\nuniform float uAlpha;\nuniform sampler2D uTextureSampler;\nvoid main() {\n  gl_FragColor = texture2D(uTextureSampler, vTextureCoord);\n  gl_FragColor *= uAlpha;\n}\n";

        <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String MESH_VERTEX_SHADER> = "uniform mat4 uMatrix;\nattribute vec2 aPosition;\nattribute vec2 aTextureCoordinate;\nvarying vec2 vTextureCoord;\nvoid main() {\n  vec4 pos = vec4(aPosition, 0.0, 1.0);\n  gl_Position = uMatrix * pos;\n  vTextureCoord = aTextureCoordinate;\n}\n";

        <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String TEXTURE_VERTEX_SHADER> = "uniform mat4 uMatrix;\nuniform mat4 uTextureMatrix;\nattribute vec2 aPosition;\nvarying vec2 vTextureCoord;\nvoid main() {\n  vec4 pos = vec4(aPosition, 0.0, 1.0);\n  gl_Position = uMatrix * pos;\n  vTextureCoord = (uTextureMatrix * pos).xy;\n}\n";

        <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String DRAW_FRAGMENT_SHADER> = "precision mediump float;\nuniform vec4 uColor;\nvoid main() {\n  gl_FragColor = uColor;\n}\n";

        <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String DRAW_VERTEX_SHADER> = "uniform mat4 uMatrix;\nattribute vec2 aPosition;\nvoid main() {\n  vec4 pos = vec4(aPosition, 0.0, 1.0);\n  gl_Position = uMatrix * pos;\n}\n";

        <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String TEXTURE_COORD_ATTRIBUTE> = "aTextureCoordinate";

        <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String ALPHA_UNIFORM> = "uAlpha";

        <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String TEXTURE_SAMPLER_UNIFORM> = "uTextureSampler";

        <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String TEXTURE_MATRIX_UNIFORM> = "uTextureMatrix";

        <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String MATRIX_UNIFORM> = "uMatrix";

        <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String COLOR_UNIFORM> = "uColor";

        <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String POSITION_ATTRIBUTE> = "aPosition";

        <com.android.gallery3d.glrenderer.GLES20Canvas: int OFFSET_DRAW_RECT> = 6;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int OFFSET_DRAW_LINE> = 4;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int OFFSET_FILL_RECT> = 0;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int COUNT_RECT_VERTEX> = 4;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int COUNT_LINE_VERTEX> = 2;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int COUNT_FILL_VERTEX> = 4;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int VERTEX_STRIDE> = 8;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int COORDS_PER_VERTEX> = 2;

        <com.android.gallery3d.glrenderer.GLES20Canvas: float OPAQUE_ALPHA> = 0.95F;

        <com.android.gallery3d.glrenderer.GLES20Canvas: int FLOAT_SIZE> = 4;

        $r0 = class "com/android/gallery3d/glrenderer/GLES20Canvas";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.gallery3d.glrenderer.GLES20Canvas: java.lang.String TAG> = $r1;

        $r2 = newarray (float)[20];

        $r2[0] = 0.0F;

        $r2[1] = 0.0F;

        $r2[2] = 1.0F;

        $r2[3] = 0.0F;

        $r2[4] = 0.0F;

        $r2[5] = 1.0F;

        $r2[6] = 1.0F;

        $r2[7] = 1.0F;

        $r2[8] = 0.0F;

        $r2[9] = 0.0F;

        $r2[10] = 1.0F;

        $r2[11] = 1.0F;

        $r2[12] = 0.0F;

        $r2[13] = 0.0F;

        $r2[14] = 0.0F;

        $r2[15] = 1.0F;

        $r2[16] = 1.0F;

        $r2[17] = 1.0F;

        $r2[18] = 1.0F;

        $r2[19] = 0.0F;

        <com.android.gallery3d.glrenderer.GLES20Canvas: float[] BOX_COORDINATES> = $r2;

        $r3 = newarray (float)[8];

        $r3[0] = 0.0F;

        $r3[1] = 0.0F;

        $r3[2] = 0.0F;

        $r3[3] = 1.0F;

        $r3[4] = 1.0F;

        $r3[5] = 1.0F;

        $r3[6] = 0.0F;

        $r3[7] = 1.0F;

        <com.android.gallery3d.glrenderer.GLES20Canvas: float[] BOUNDS_COORDINATES> = $r3;

        $r4 = new com.android.gallery3d.glrenderer.GLES20IdImpl;

        specialinvoke $r4.<com.android.gallery3d.glrenderer.GLES20IdImpl: void <init>()>();

        <com.android.gallery3d.glrenderer.GLES20Canvas: com.android.gallery3d.glrenderer.GLId mGLId> = $r4;

        return;
    }
}
