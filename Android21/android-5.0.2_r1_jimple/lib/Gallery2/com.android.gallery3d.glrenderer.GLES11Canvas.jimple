public class com.android.gallery3d.glrenderer.GLES11Canvas extends java.lang.Object implements com.android.gallery3d.glrenderer.GLCanvas
{
    private static final java.lang.String TAG;
    private static final float OPAQUE_ALPHA;
    private static final int OFFSET_FILL_RECT;
    private static final int OFFSET_DRAW_LINE;
    private static final int OFFSET_DRAW_RECT;
    private static final float[] BOX_COORDINATES;
    private javax.microedition.khronos.opengles.GL11 mGL;
    private final float[] mMatrixValues;
    private final float[] mTextureMatrixValues;
    private final float[] mMapPointsBuffer;
    private final float[] mTextureColor;
    private int mBoxCoords;
    private com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState;
    private final java.util.ArrayList mTargetStack;
    private float mAlpha;
    private final java.util.ArrayList mRestoreStack;
    private com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState mRecycledRestoreAction;
    private final android.graphics.RectF mDrawTextureSourceRect;
    private final android.graphics.RectF mDrawTextureTargetRect;
    private final float[] mTempMatrix;
    private final com.android.gallery3d.util.IntArray mUnboundTextures;
    private final com.android.gallery3d.util.IntArray mDeleteBuffers;
    private int mScreenWidth;
    private int mScreenHeight;
    private boolean mBlendEnabled;
    private int[] mFrameBuffer;
    private static float[] sCropRect;
    private com.android.gallery3d.glrenderer.RawTexture mTargetTexture;
    int mCountDrawLine;
    int mCountFillRect;
    int mCountDrawMesh;
    int mCountTextureRect;
    int mCountTextureOES;
    private static com.android.gallery3d.glrenderer.GLId mGLId;
    private static final int MSKEW_X;
    private static final int MSKEW_Y;
    private static final int MSCALE_X;
    private static final int MSCALE_Y;

    public void <init>(javax.microedition.khronos.opengles.GL11)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        javax.microedition.khronos.opengles.GL11 r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.FloatBuffer r2, $r22;
        int[] r3, $r16;
        float[] $r4, $r5, $r6, $r7, $r12, $r17, $r19, $r20;
        java.util.ArrayList $r8, $r9;
        android.graphics.RectF $r10, $r11;
        com.android.gallery3d.util.IntArray $r13, $r14;
        com.android.gallery3d.glrenderer.GLES11Canvas$GLState $r15;
        java.nio.ByteBuffer $r18;
        com.android.gallery3d.glrenderer.GLId $r23;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: javax.microedition.khronos.opengles.GL11;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = newarray (float)[16];

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues> = $r4;

        $r5 = newarray (float)[16];

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTextureMatrixValues> = $r5;

        $r6 = newarray (float)[4];

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMapPointsBuffer> = $r6;

        $r7 = newarray (float)[4];

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTextureColor> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: java.util.ArrayList mTargetStack> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: java.util.ArrayList mRestoreStack> = $r9;

        $r10 = new android.graphics.RectF;

        specialinvoke $r10.<android.graphics.RectF: void <init>()>();

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: android.graphics.RectF mDrawTextureSourceRect> = $r10;

        $r11 = new android.graphics.RectF;

        specialinvoke $r11.<android.graphics.RectF: void <init>()>();

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: android.graphics.RectF mDrawTextureTargetRect> = $r11;

        $r12 = newarray (float)[32];

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTempMatrix> = $r12;

        $r13 = new com.android.gallery3d.util.IntArray;

        specialinvoke $r13.<com.android.gallery3d.util.IntArray: void <init>()>();

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.util.IntArray mUnboundTextures> = $r13;

        $r14 = new com.android.gallery3d.util.IntArray;

        specialinvoke $r14.<com.android.gallery3d.util.IntArray: void <init>()>();

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.util.IntArray mDeleteBuffers> = $r14;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: boolean mBlendEnabled> = 1;

        $r16 = newarray (int)[1];

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int[] mFrameBuffer> = $r16;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL> = r1;

        $r15 = new com.android.gallery3d.glrenderer.GLES11Canvas$GLState;

        specialinvoke $r15.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void <init>(javax.microedition.khronos.opengles.GL11)>(r1);

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState> = $r15;

        $r17 = <com.android.gallery3d.glrenderer.GLES11Canvas: float[] BOX_COORDINATES>;

        $i1 = lengthof $r17;

        $i2 = $i1 * 32;

        i0 = $i2 / 8;

        $r18 = staticinvoke <com.android.gallery3d.glrenderer.GLES11Canvas: java.nio.ByteBuffer allocateDirectNativeOrderBuffer(int)>(i0);

        r2 = virtualinvoke $r18.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        $r20 = <com.android.gallery3d.glrenderer.GLES11Canvas: float[] BOX_COORDINATES>;

        $r19 = <com.android.gallery3d.glrenderer.GLES11Canvas: float[] BOX_COORDINATES>;

        $i3 = lengthof $r19;

        $r22 = virtualinvoke r2.<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[],int,int)>($r20, 0, $i3);

        virtualinvoke $r22.<java.nio.FloatBuffer: java.nio.Buffer position(int)>(0);

        r3 = newarray (int)[1];

        $r23 = <com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLId mGLId>;

        interfaceinvoke $r23.<com.android.gallery3d.glrenderer.GLId: void glGenBuffers(int,int[],int)>(1, r3, 0);

        $i4 = r3[0];

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mBoxCoords> = $i4;

        $i5 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mBoxCoords>;

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glBindBuffer(int,int)>(34962, $i5);

        $i6 = virtualinvoke r2.<java.nio.FloatBuffer: int capacity()>();

        $i7 = $i6 * 4;

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glBufferData(int,int,java.nio.Buffer,int)>(34962, $i7, r2, 35044);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glVertexPointer(int,int,int,int)>(2, 5126, 0, 0);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glTexCoordPointer(int,int,int,int)>(2, 5126, 0, 0);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glClientActiveTexture(int)>(33985);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glTexCoordPointer(int,int,int,int)>(2, 5126, 0, 0);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glClientActiveTexture(int)>(33984);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glEnableClientState(int)>(32888);

        return;
    }

    public void setSize(int, int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        int i0, i1;
        javax.microedition.khronos.opengles.GL11 r1;
        float[] r2;
        com.android.gallery3d.glrenderer.RawTexture $r3, $r4;
        float $f0, $f1, $f2;
        boolean $z0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <junit.framework.Assert: void assertTrue(boolean)>($z0);

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.RawTexture mTargetTexture>;

        if $r3 != null goto label3;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mScreenWidth> = i0;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mScreenHeight> = i1;

     label3:
        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha> = 1.0F;

        r1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glViewport(int,int,int,int)>(0, 0, i0, i1);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glMatrixMode(int)>(5889);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glLoadIdentity()>();

        $f1 = (float) i0;

        $f0 = (float) i1;

        staticinvoke <android.opengl.GLU: void gluOrtho2D(javax.microedition.khronos.opengles.GL10,float,float,float,float)>(r1, 0.0F, $f1, 0.0F, $f0);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glMatrixMode(int)>(5888);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glLoadIdentity()>();

        r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        staticinvoke <android.opengl.Matrix: void setIdentityM(float[],int)>(r2, 0);

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.RawTexture mTargetTexture>;

        if $r4 != null goto label4;

        $f2 = (float) i1;

        staticinvoke <android.opengl.Matrix: void translateM(float[],int,float,float,float)>(r2, 0, 0.0F, $f2, 0.0F);

        staticinvoke <android.opengl.Matrix: void scaleM(float[],int,float,float,float)>(r2, 0, 1.0F, -1.0F, 1.0F);

     label4:
        return;
    }

    public void setAlpha(float)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float f0;
        byte $b0, $b1;
        boolean $z0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        f0 := @parameter0: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 < 0 goto label1;

        $b1 = f0 cmpg 1.0F;

        if $b1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <junit.framework.Assert: void assertTrue(boolean)>($z0);

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha> = f0;

        return;
    }

    public float getAlpha()
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float $f0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        $f0 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha>;

        return $f0;
    }

    public void multiplyAlpha(float)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float f0, $f1, $f2;
        byte $b0, $b1;
        boolean $z0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        f0 := @parameter0: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 < 0 goto label1;

        $b1 = f0 cmpg 1.0F;

        if $b1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <junit.framework.Assert: void assertTrue(boolean)>($z0);

        $f1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha>;

        $f2 = $f1 * f0;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha> = $f2;

        return;
    }

    private static java.nio.ByteBuffer allocateDirectNativeOrderBuffer(int)
    {
        int i0;
        java.nio.ByteBuffer $r0, $r2;
        java.nio.ByteOrder $r1;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i0);

        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r2 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r1);

        return $r2;
    }

    public void drawRect(float, float, float, float, com.android.gallery3d.glrenderer.GLPaint)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float f0, f1, f2, f3, $f4, $f5;
        com.android.gallery3d.glrenderer.GLPaint r1;
        javax.microedition.khronos.opengles.GL11 r2;
        com.android.gallery3d.glrenderer.GLES11Canvas$GLState $r3, $r4;
        int $i0, $i1, $i2;
        float[] $r5;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: com.android.gallery3d.glrenderer.GLPaint;

        r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        $i0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.GLPaint: int getColor()>();

        $f4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha>;

        virtualinvoke $r3.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setColorMode(int,float)>($i0, $f4);

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        $f5 = virtualinvoke r1.<com.android.gallery3d.glrenderer.GLPaint: float getLineWidth()>();

        virtualinvoke $r4.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setLineWidth(float)>($f5);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void saveTransform()>();

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void translate(float,float)>(f0, f1);

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void scale(float,float,float)>(f2, f3, 1.0F);

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        interfaceinvoke r2.<javax.microedition.khronos.opengles.GL11: void glLoadMatrixf(float[],int)>($r5, 0);

        interfaceinvoke r2.<javax.microedition.khronos.opengles.GL11: void glDrawArrays(int,int,int)>(2, 6, 4);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void restoreTransform()>();

        $i1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountDrawLine>;

        $i2 = $i1 + 1;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountDrawLine> = $i2;

        return;
    }

    public void drawLine(float, float, float, float, com.android.gallery3d.glrenderer.GLPaint)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7;
        com.android.gallery3d.glrenderer.GLPaint r1;
        javax.microedition.khronos.opengles.GL11 r2;
        com.android.gallery3d.glrenderer.GLES11Canvas$GLState $r3, $r4;
        int $i0, $i1, $i2;
        float[] $r5;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 := @parameter4: com.android.gallery3d.glrenderer.GLPaint;

        r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        $i0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.GLPaint: int getColor()>();

        $f4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha>;

        virtualinvoke $r3.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setColorMode(int,float)>($i0, $f4);

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        $f5 = virtualinvoke r1.<com.android.gallery3d.glrenderer.GLPaint: float getLineWidth()>();

        virtualinvoke $r4.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setLineWidth(float)>($f5);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void saveTransform()>();

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void translate(float,float)>(f0, f1);

        $f7 = f2 - f0;

        $f6 = f3 - f1;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void scale(float,float,float)>($f7, $f6, 1.0F);

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        interfaceinvoke r2.<javax.microedition.khronos.opengles.GL11: void glLoadMatrixf(float[],int)>($r5, 0);

        interfaceinvoke r2.<javax.microedition.khronos.opengles.GL11: void glDrawArrays(int,int,int)>(3, 4, 2);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void restoreTransform()>();

        $i1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountDrawLine>;

        $i2 = $i1 + 1;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountDrawLine> = $i2;

        return;
    }

    public void fillRect(float, float, float, float, int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float f0, f1, f2, f3, $f4;
        int i0, $i1, $i2;
        javax.microedition.khronos.opengles.GL11 r1;
        com.android.gallery3d.glrenderer.GLES11Canvas$GLState $r2;
        float[] $r3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        i0 := @parameter4: int;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        $f4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha>;

        virtualinvoke $r2.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setColorMode(int,float)>(i0, $f4);

        r1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void saveTransform()>();

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void translate(float,float)>(f0, f1);

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void scale(float,float,float)>(f2, f3, 1.0F);

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glLoadMatrixf(float[],int)>($r3, 0);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glDrawArrays(int,int,int)>(5, 0, 4);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void restoreTransform()>();

        $i1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountFillRect>;

        $i2 = $i1 + 1;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountFillRect> = $i2;

        return;
    }

    public void translate(float, float, float)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float f0, f1, f2;
        float[] $r1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        staticinvoke <android.opengl.Matrix: void translateM(float[],int,float,float,float)>($r1, 0, f0, f1, f2);

        return;
    }

    public void translate(float, float)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29;
        float[] r1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        $f7 = r1[12];

        $f2 = r1[0];

        $f5 = $f2 * f0;

        $f3 = r1[4];

        $f4 = $f3 * f1;

        $f6 = $f5 + $f4;

        $f8 = $f7 + $f6;

        r1[12] = $f8;

        $f15 = r1[13];

        $f9 = r1[1];

        $f12 = $f9 * f0;

        $f10 = r1[5];

        $f11 = $f10 * f1;

        $f13 = $f12 + $f11;

        $f14 = $f15 + $f13;

        r1[13] = $f14;

        $f20 = r1[14];

        $f17 = r1[2];

        $f18 = $f17 * f0;

        $f16 = r1[6];

        $f19 = $f16 * f1;

        $f21 = $f18 + $f19;

        $f23 = $f20 + $f21;

        r1[14] = $f23;

        $f29 = r1[15];

        $f22 = r1[3];

        $f27 = $f22 * f0;

        $f25 = r1[7];

        $f24 = $f25 * f1;

        $f26 = $f27 + $f24;

        $f28 = $f29 + $f26;

        r1[15] = $f28;

        return;
    }

    public void scale(float, float, float)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float f0, f1, f2;
        float[] $r1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        staticinvoke <android.opengl.Matrix: void scaleM(float[],int,float,float,float)>($r1, 0, f0, f1, f2);

        return;
    }

    public void rotate(float, float, float, float)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float f0, f1, f2, f3;
        float[] r1, $r2, $r3;
        byte $b0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        return;

     label1:
        r1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTempMatrix>;

        staticinvoke <android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)>(r1, 0, f0, f1, f2, f3);

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>(r1, 16, $r2, 0, r1, 0);

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 16, $r3, 0, 16);

        return;
    }

    public void multiplyMatrix(float[], int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float[] r1, r2, $r3, $r4;
        int i0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTempMatrix>;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>(r2, 0, $r3, 0, r1, i0);

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r4, 0, 16);

        return;
    }

    private void textureRect(float, float, float, float)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float f0, f1, f2, f3;
        javax.microedition.khronos.opengles.GL11 r1;
        float[] $r2;
        int $i0, $i1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void saveTransform()>();

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void translate(float,float)>(f0, f1);

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void scale(float,float,float)>(f2, f3, 1.0F);

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glLoadMatrixf(float[],int)>($r2, 0);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glDrawArrays(int,int,int)>(5, 0, 4);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void restoreTransform()>();

        $i0 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountTextureRect>;

        $i1 = $i0 + 1;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountTextureRect> = $i1;

        return;
    }

    public void drawMesh(com.android.gallery3d.glrenderer.BasicTexture, int, int, int, int, int, int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;
        float f0, $f1, $f2;
        boolean $z0, $z1, $z2, $z3;
        com.android.gallery3d.glrenderer.GLES11Canvas$GLState $r2, $r3;
        float[] $r4;
        javax.microedition.khronos.opengles.GL11 $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        byte $b9;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        f0 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha>;

        $z0 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: boolean bindTexture(com.android.gallery3d.glrenderer.BasicTexture)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        $z1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: boolean mBlendEnabled>;

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: boolean isOpaque()>();

        if $z2 == 0 goto label2;

        $b9 = f0 cmpg 0.95F;

        if $b9 >= 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        virtualinvoke $r2.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setBlendEnabled(boolean)>($z3);

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        virtualinvoke $r3.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setTextureAlpha(float)>(f0);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void setTextureCoords(float,float,float,float)>(0.0F, 0.0F, 1.0F, 1.0F);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void saveTransform()>();

        $f2 = (float) i0;

        $f1 = (float) i1;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void translate(float,float)>($f2, $f1);

        $r6 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        interfaceinvoke $r6.<javax.microedition.khronos.opengles.GL11: void glLoadMatrixf(float[],int)>($r4, 0);

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r5.<javax.microedition.khronos.opengles.GL11: void glBindBuffer(int,int)>(34962, i2);

        $r8 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r8.<javax.microedition.khronos.opengles.GL11: void glVertexPointer(int,int,int,int)>(2, 5126, 0, 0);

        $r7 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r7.<javax.microedition.khronos.opengles.GL11: void glBindBuffer(int,int)>(34962, i3);

        $r10 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r10.<javax.microedition.khronos.opengles.GL11: void glTexCoordPointer(int,int,int,int)>(2, 5126, 0, 0);

        $r9 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r9.<javax.microedition.khronos.opengles.GL11: void glBindBuffer(int,int)>(34963, i4);

        $r11 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r11.<javax.microedition.khronos.opengles.GL11: void glDrawElements(int,int,int,int)>(5, i5, 5121, 0);

        $r13 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $i6 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mBoxCoords>;

        interfaceinvoke $r13.<javax.microedition.khronos.opengles.GL11: void glBindBuffer(int,int)>(34962, $i6);

        $r12 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r12.<javax.microedition.khronos.opengles.GL11: void glVertexPointer(int,int,int,int)>(2, 5126, 0, 0);

        $r14 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r14.<javax.microedition.khronos.opengles.GL11: void glTexCoordPointer(int,int,int,int)>(2, 5126, 0, 0);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void restoreTransform()>();

        $i7 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountDrawMesh>;

        $i8 = $i7 + 1;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountDrawMesh> = $i8;

        return;
    }

    private float[] mapPoints(float[], int, int, int, int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float[] r1, r2;
        int i0, i1, i2, i3;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, $f56, $f57;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMapPointsBuffer>;

        $f7 = r1[0];

        $f6 = (float) i0;

        $f12 = $f7 * $f6;

        $f10 = r1[4];

        $f8 = (float) i1;

        $f9 = $f10 * $f8;

        $f14 = $f12 + $f9;

        $f11 = r1[12];

        f0 = $f14 + $f11;

        $f16 = r1[1];

        $f13 = (float) i0;

        $f20 = $f16 * $f13;

        $f18 = r1[5];

        $f15 = (float) i1;

        $f17 = $f18 * $f15;

        $f22 = $f20 + $f17;

        $f19 = r1[13];

        f1 = $f22 + $f19;

        $f24 = r1[3];

        $f21 = (float) i0;

        $f25 = $f24 * $f21;

        $f27 = r1[7];

        $f23 = (float) i1;

        $f28 = $f27 * $f23;

        $f31 = $f25 + $f28;

        $f26 = r1[15];

        f2 = $f31 + $f26;

        $f32 = f0 / f2;

        r2[0] = $f32;

        $f29 = f1 / f2;

        r2[1] = $f29;

        $f35 = r1[0];

        $f30 = (float) i2;

        $f39 = $f35 * $f30;

        $f33 = r1[4];

        $f36 = (float) i3;

        $f34 = $f33 * $f36;

        $f37 = $f39 + $f34;

        $f40 = r1[12];

        f3 = $f37 + $f40;

        $f44 = r1[1];

        $f38 = (float) i2;

        $f48 = $f44 * $f38;

        $f42 = r1[5];

        $f43 = (float) i3;

        $f41 = $f42 * $f43;

        $f46 = $f48 + $f41;

        $f47 = r1[13];

        f4 = $f46 + $f47;

        $f52 = r1[3];

        $f45 = (float) i2;

        $f56 = $f52 * $f45;

        $f50 = r1[7];

        $f51 = (float) i3;

        $f49 = $f50 * $f51;

        $f54 = $f56 + $f49;

        $f55 = r1[15];

        f5 = $f54 + $f55;

        $f53 = f3 / f5;

        r2[2] = $f53;

        $f57 = f4 / f5;

        r2[3] = $f57;

        return r2;
    }

    private void drawBoundTexture(com.android.gallery3d.glrenderer.BasicTexture, int, int, int, int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23;
        float[] r2, $r3, $r4;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29;
        javax.microedition.khronos.opengles.GL11 $r5;
        javax.microedition.khronos.opengles.GL11Ext $r6;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        $z0 = staticinvoke <com.android.gallery3d.glrenderer.GLES11Canvas: boolean isMatrixRotatedOrFlipped(float[])>($r3);

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: boolean hasBorder()>();

        if $z1 == 0 goto label1;

        $i14 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTextureWidth()>();

        $f18 = (float) $i14;

        $f19 = 1.0F / $f18;

        $i15 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTextureHeight()>();

        $f21 = (float) $i15;

        $f20 = 1.0F / $f21;

        $i17 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getWidth()>();

        $f23 = (float) $i17;

        $f22 = $f23 - 1.0F;

        $i16 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTextureWidth()>();

        $f26 = (float) $i16;

        $f25 = $f22 / $f26;

        $i18 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getHeight()>();

        $f24 = (float) $i18;

        $f29 = $f24 - 1.0F;

        $i19 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTextureHeight()>();

        $f28 = (float) $i19;

        $f27 = $f29 / $f28;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void setTextureCoords(float,float,float,float)>($f19, $f20, $f25, $f27);

        goto label2;

     label1:
        $i10 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getWidth()>();

        $f8 = (float) $i10;

        $i12 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTextureWidth()>();

        $f10 = (float) $i12;

        $f9 = $f8 / $f10;

        $i11 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getHeight()>();

        $f13 = (float) $i11;

        $i13 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTextureHeight()>();

        $f11 = (float) $i13;

        $f12 = $f13 / $f11;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void setTextureCoords(float,float,float,float)>(0.0F, 0.0F, $f9, $f12);

     label2:
        $f15 = (float) i0;

        $f14 = (float) i1;

        $f17 = (float) i2;

        $f16 = (float) i3;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void textureRect(float,float,float,float)>($f15, $f14, $f17, $f16);

        goto label4;

     label3:
        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        $i5 = i1 + i3;

        $i4 = i0 + i2;

        r2 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mapPoints(float[],int,int,int,int)>($r4, i0, $i5, $i4, i1);

        $f0 = r2[0];

        $f1 = $f0 + 0.5F;

        i20 = (int) $f1;

        $f2 = r2[1];

        $f4 = $f2 + 0.5F;

        i21 = (int) $f4;

        $f3 = r2[2];

        $f5 = $f3 + 0.5F;

        $i6 = (int) $f5;

        i22 = $i6 - i20;

        $f7 = r2[3];

        $f6 = $f7 + 0.5F;

        $i7 = (int) $f6;

        i23 = $i7 - i21;

        if i22 <= 0 goto label4;

        if i23 <= 0 goto label4;

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $r6 = (javax.microedition.khronos.opengles.GL11Ext) $r5;

        interfaceinvoke $r6.<javax.microedition.khronos.opengles.GL11Ext: void glDrawTexiOES(int,int,int,int,int)>(i20, i21, 0, i22, i23);

        $i8 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountTextureOES>;

        $i9 = $i8 + 1;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountTextureOES> = $i9;

     label4:
        return;
    }

    public void drawTexture(com.android.gallery3d.glrenderer.BasicTexture, int, int, int, int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, i1, i2, i3;
        float $f0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $f0 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha>;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,int,int,int,int,float)>(r1, i0, i1, i2, i3, $f0);

        return;
    }

    private void drawTexture(com.android.gallery3d.glrenderer.BasicTexture, int, int, int, int, float)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, i1, i2, i3;
        float f0;
        boolean $z0, $z1, $z2, $z3;
        com.android.gallery3d.glrenderer.GLES11Canvas$GLState $r2, $r3;
        byte $b4;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        f0 := @parameter5: float;

        if i2 <= 0 goto label1;

        if i3 > 0 goto label2;

     label1:
        return;

     label2:
        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        $z0 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: boolean mBlendEnabled>;

        if $z0 == 0 goto label4;

        $z2 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: boolean isOpaque()>();

        if $z2 == 0 goto label3;

        $b4 = f0 cmpg 0.95F;

        if $b4 >= 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        virtualinvoke $r2.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setBlendEnabled(boolean)>($z3);

        $z1 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: boolean bindTexture(com.android.gallery3d.glrenderer.BasicTexture)>(r1);

        if $z1 != 0 goto label6;

        return;

     label6:
        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        virtualinvoke $r3.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setTextureAlpha(float)>(f0);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void drawBoundTexture(com.android.gallery3d.glrenderer.BasicTexture,int,int,int,int)>(r1, i0, i1, i2, i3);

        return;
    }

    public void drawTexture(com.android.gallery3d.glrenderer.BasicTexture, android.graphics.RectF, android.graphics.RectF)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        android.graphics.RectF r2, r3, $r4, $r5, r8, r9;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        byte $b0, $b1, $b2;
        boolean $z0, $z1, $z2, $z3;
        com.android.gallery3d.glrenderer.GLES11Canvas$GLState $r6, $r7;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        r2 := @parameter1: android.graphics.RectF;

        r3 := @parameter2: android.graphics.RectF;

        $f0 = virtualinvoke r3.<android.graphics.RectF: float width()>();

        $b0 = $f0 cmpg 0.0F;

        if $b0 <= 0 goto label1;

        $f1 = virtualinvoke r3.<android.graphics.RectF: float height()>();

        $b1 = $f1 cmpg 0.0F;

        if $b1 > 0 goto label2;

     label1:
        return;

     label2:
        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: android.graphics.RectF mDrawTextureSourceRect>;

        virtualinvoke $r4.<android.graphics.RectF: void set(android.graphics.RectF)>(r2);

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: android.graphics.RectF mDrawTextureTargetRect>;

        virtualinvoke $r5.<android.graphics.RectF: void set(android.graphics.RectF)>(r3);

        r8 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: android.graphics.RectF mDrawTextureSourceRect>;

        r9 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: android.graphics.RectF mDrawTextureTargetRect>;

        $r6 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        $z0 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: boolean mBlendEnabled>;

        if $z0 == 0 goto label4;

        $z2 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: boolean isOpaque()>();

        if $z2 == 0 goto label3;

        $f7 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha>;

        $b2 = $f7 cmpg 0.95F;

        if $b2 >= 0 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        virtualinvoke $r6.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setBlendEnabled(boolean)>($z3);

        $z1 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: boolean bindTexture(com.android.gallery3d.glrenderer.BasicTexture)>(r1);

        if $z1 != 0 goto label6;

        return;

     label6:
        staticinvoke <com.android.gallery3d.glrenderer.GLES11Canvas: void convertCoordinate(android.graphics.RectF,android.graphics.RectF,com.android.gallery3d.glrenderer.BasicTexture)>(r8, r9, r1);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void setTextureCoords(android.graphics.RectF)>(r8);

        $r7 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        $f2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha>;

        virtualinvoke $r7.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setTextureAlpha(float)>($f2);

        $f3 = r9.<android.graphics.RectF: float left>;

        $f5 = r9.<android.graphics.RectF: float top>;

        $f4 = virtualinvoke r9.<android.graphics.RectF: float width()>();

        $f6 = virtualinvoke r9.<android.graphics.RectF: float height()>();

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void textureRect(float,float,float,float)>($f3, $f5, $f4, $f6);

        return;
    }

    public void drawTexture(com.android.gallery3d.glrenderer.BasicTexture, float[], int, int, int, int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        float[] r2;
        int i0, i1, i2, i3;
        boolean $z0, $z1, $z2, $z3;
        com.android.gallery3d.glrenderer.GLES11Canvas$GLState $r3, $r4;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        byte $b4;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        r2 := @parameter1: float[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        $z0 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: boolean mBlendEnabled>;

        if $z0 == 0 goto label2;

        $z3 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: boolean isOpaque()>();

        if $z3 == 0 goto label1;

        $f5 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha>;

        $b4 = $f5 cmpg 0.95F;

        if $b4 >= 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        virtualinvoke $r3.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setBlendEnabled(boolean)>($z2);

        $z1 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: boolean bindTexture(com.android.gallery3d.glrenderer.BasicTexture)>(r1);

        if $z1 != 0 goto label4;

        return;

     label4:
        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void setTextureCoords(float[])>(r2);

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        $f0 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha>;

        virtualinvoke $r4.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setTextureAlpha(float)>($f0);

        $f4 = (float) i0;

        $f3 = (float) i1;

        $f2 = (float) i2;

        $f1 = (float) i3;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void textureRect(float,float,float,float)>($f4, $f3, $f2, $f1);

        return;
    }

    private static void convertCoordinate(android.graphics.RectF, android.graphics.RectF, com.android.gallery3d.glrenderer.BasicTexture)
    {
        android.graphics.RectF r0, r1;
        com.android.gallery3d.glrenderer.BasicTexture r2;
        int i0, i1, i2, i3;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35;
        byte $b4, $b5;

        r0 := @parameter0: android.graphics.RectF;

        r1 := @parameter1: android.graphics.RectF;

        r2 := @parameter2: com.android.gallery3d.glrenderer.BasicTexture;

        i0 = virtualinvoke r2.<com.android.gallery3d.glrenderer.BasicTexture: int getWidth()>();

        i1 = virtualinvoke r2.<com.android.gallery3d.glrenderer.BasicTexture: int getHeight()>();

        i2 = virtualinvoke r2.<com.android.gallery3d.glrenderer.BasicTexture: int getTextureWidth()>();

        i3 = virtualinvoke r2.<com.android.gallery3d.glrenderer.BasicTexture: int getTextureHeight()>();

        $f3 = r0.<android.graphics.RectF: float left>;

        $f2 = (float) i2;

        $f4 = $f3 / $f2;

        r0.<android.graphics.RectF: float left> = $f4;

        $f5 = r0.<android.graphics.RectF: float right>;

        $f6 = (float) i2;

        $f8 = $f5 / $f6;

        r0.<android.graphics.RectF: float right> = $f8;

        $f10 = r0.<android.graphics.RectF: float top>;

        $f7 = (float) i3;

        $f9 = $f10 / $f7;

        r0.<android.graphics.RectF: float top> = $f9;

        $f11 = r0.<android.graphics.RectF: float bottom>;

        $f12 = (float) i3;

        $f14 = $f11 / $f12;

        r0.<android.graphics.RectF: float bottom> = $f14;

        $f16 = (float) i0;

        $f13 = (float) i2;

        f0 = $f16 / $f13;

        $f15 = r0.<android.graphics.RectF: float right>;

        $b4 = $f15 cmpl f0;

        if $b4 <= 0 goto label1;

        $f30 = r1.<android.graphics.RectF: float left>;

        $f27 = virtualinvoke r1.<android.graphics.RectF: float width()>();

        $f28 = r0.<android.graphics.RectF: float left>;

        $f33 = f0 - $f28;

        $f34 = $f27 * $f33;

        $f31 = virtualinvoke r0.<android.graphics.RectF: float width()>();

        $f32 = $f34 / $f31;

        $f35 = $f30 + $f32;

        r1.<android.graphics.RectF: float right> = $f35;

        r0.<android.graphics.RectF: float right> = f0;

     label1:
        $f19 = (float) i1;

        $f17 = (float) i3;

        f1 = $f19 / $f17;

        $f18 = r0.<android.graphics.RectF: float bottom>;

        $b5 = $f18 cmpl f1;

        if $b5 <= 0 goto label2;

        $f22 = r1.<android.graphics.RectF: float top>;

        $f20 = virtualinvoke r1.<android.graphics.RectF: float height()>();

        $f21 = r0.<android.graphics.RectF: float top>;

        $f25 = f1 - $f21;

        $f26 = $f20 * $f25;

        $f23 = virtualinvoke r0.<android.graphics.RectF: float height()>();

        $f24 = $f26 / $f23;

        $f29 = $f22 + $f24;

        r1.<android.graphics.RectF: float bottom> = $f29;

        r0.<android.graphics.RectF: float bottom> = f1;

     label2:
        return;
    }

    public void drawMixed(com.android.gallery3d.glrenderer.BasicTexture, int, float, int, int, int, int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, i1, i2, i3, i4;
        float f0, $f1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        $f1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha>;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void drawMixed(com.android.gallery3d.glrenderer.BasicTexture,int,float,int,int,int,int,float)>(r1, i0, f0, i1, i2, i3, i4, $f1);

        return;
    }

    private boolean bindTexture(com.android.gallery3d.glrenderer.BasicTexture)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, $i1;
        boolean $z0;
        com.android.gallery3d.glrenderer.GLES11Canvas$GLState $r2;
        javax.microedition.khronos.opengles.GL11 $r3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        $z0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: boolean onBind(com.android.gallery3d.glrenderer.GLCanvas)>(r0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTarget()>();

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        virtualinvoke $r2.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setTextureTarget(int)>(i0);

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $i1 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getId()>();

        interfaceinvoke $r3.<javax.microedition.khronos.opengles.GL11: void glBindTexture(int,int)>(i0, $i1);

        return 1;
    }

    private void setTextureColor(float, float, float, float)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float f0, f1, f2, f3;
        float[] r1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTextureColor>;

        r1[0] = f0;

        r1[1] = f1;

        r1[2] = f2;

        r1[3] = f3;

        return;
    }

    private void setMixedColor(int, float, float)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        javax.microedition.khronos.opengles.GL11 r1;
        float[] $r2;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $f5 = 1.0F - f0;

        f2 = f1 * $f5;

        $f7 = f1 * f0;

        $f6 = 1.0F - f2;

        f3 = $f7 / $f6;

        $i1 = i0 >>> 24;

        $f8 = (float) $i1;

        $f9 = f3 * $f8;

        f4 = $f9 / 65025.0F;

        $i2 = i0 >>> 16;

        $i3 = $i2 & 255;

        $f10 = (float) $i3;

        $f15 = $f10 * f4;

        $i4 = i0 >>> 8;

        $i5 = $i4 & 255;

        $f11 = (float) $i5;

        $f13 = $f11 * f4;

        $i6 = i0 & 255;

        $f12 = (float) $i6;

        $f14 = $f12 * f4;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void setTextureColor(float,float,float,float)>($f15, $f13, $f14, f2);

        r1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTextureColor>;

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glTexEnvfv(int,int,float[],int)>(8960, 8705, $r2, 0);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glTexEnvf(int,int,float)>(8960, 34161, 34165.0F);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glTexEnvf(int,int,float)>(8960, 34162, 34165.0F);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glTexEnvf(int,int,float)>(8960, 34177, 34166.0F);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glTexEnvf(int,int,float)>(8960, 34193, 768.0F);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glTexEnvf(int,int,float)>(8960, 34185, 34166.0F);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glTexEnvf(int,int,float)>(8960, 34201, 770.0F);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glTexEnvf(int,int,float)>(8960, 34178, 34166.0F);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glTexEnvf(int,int,float)>(8960, 34194, 770.0F);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glTexEnvf(int,int,float)>(8960, 34186, 34166.0F);

        interfaceinvoke r1.<javax.microedition.khronos.opengles.GL11: void glTexEnvf(int,int,float)>(8960, 34202, 770.0F);

        return;
    }

    public void drawMixed(com.android.gallery3d.glrenderer.BasicTexture, int, float, android.graphics.RectF, android.graphics.RectF)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        android.graphics.RectF r2, r3, $r4, $r5, r9, r10;
        byte $b1, $b2, $b3, $b4, $b5;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.gallery3d.glrenderer.GLES11Canvas$GLState $r6, $r7, $r8;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        r2 := @parameter3: android.graphics.RectF;

        r3 := @parameter4: android.graphics.RectF;

        $f2 = virtualinvoke r3.<android.graphics.RectF: float width()>();

        $b1 = $f2 cmpg 0.0F;

        if $b1 <= 0 goto label1;

        $f3 = virtualinvoke r3.<android.graphics.RectF: float height()>();

        $b2 = $f3 cmpg 0.0F;

        if $b2 > 0 goto label2;

     label1:
        return;

     label2:
        $b3 = f0 cmpg 0.01F;

        if $b3 > 0 goto label3;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,android.graphics.RectF,android.graphics.RectF)>(r1, r2, r3);

        return;

     label3:
        $b4 = f0 cmpl 1.0F;

        if $b4 < 0 goto label4;

        $f9 = r3.<android.graphics.RectF: float left>;

        $f8 = r3.<android.graphics.RectF: float top>;

        $f11 = virtualinvoke r3.<android.graphics.RectF: float width()>();

        $f10 = virtualinvoke r3.<android.graphics.RectF: float height()>();

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void fillRect(float,float,float,float,int)>($f9, $f8, $f11, $f10, i0);

        return;

     label4:
        f1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha>;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: android.graphics.RectF mDrawTextureSourceRect>;

        virtualinvoke $r4.<android.graphics.RectF: void set(android.graphics.RectF)>(r2);

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: android.graphics.RectF mDrawTextureTargetRect>;

        virtualinvoke $r5.<android.graphics.RectF: void set(android.graphics.RectF)>(r3);

        r9 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: android.graphics.RectF mDrawTextureSourceRect>;

        r10 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: android.graphics.RectF mDrawTextureTargetRect>;

        $r6 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        $z0 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: boolean mBlendEnabled>;

        if $z0 == 0 goto label6;

        $z3 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: boolean isOpaque()>();

        if $z3 == 0 goto label5;

        $z4 = staticinvoke <com.android.gallery3d.common.Utils: boolean isOpaque(int)>(i0);

        if $z4 == 0 goto label5;

        $b5 = f1 cmpg 0.95F;

        if $b5 >= 0 goto label6;

     label5:
        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        virtualinvoke $r6.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setBlendEnabled(boolean)>($z2);

        $z1 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: boolean bindTexture(com.android.gallery3d.glrenderer.BasicTexture)>(r1);

        if $z1 != 0 goto label8;

        return;

     label8:
        $r7 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        virtualinvoke $r7.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setTexEnvMode(int)>(34160);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void setMixedColor(int,float,float)>(i0, f0, f1);

        staticinvoke <com.android.gallery3d.glrenderer.GLES11Canvas: void convertCoordinate(android.graphics.RectF,android.graphics.RectF,com.android.gallery3d.glrenderer.BasicTexture)>(r9, r10, r1);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void setTextureCoords(android.graphics.RectF)>(r9);

        $f4 = r10.<android.graphics.RectF: float left>;

        $f6 = r10.<android.graphics.RectF: float top>;

        $f5 = virtualinvoke r10.<android.graphics.RectF: float width()>();

        $f7 = virtualinvoke r10.<android.graphics.RectF: float height()>();

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void textureRect(float,float,float,float)>($f4, $f6, $f5, $f7);

        $r8 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        virtualinvoke $r8.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setTexEnvMode(int)>(7681);

        return;
    }

    private void drawMixed(com.android.gallery3d.glrenderer.BasicTexture, int, float, int, int, int, int, float)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, i1, i2, i3, i4;
        float f0, f1, $f2, $f3, $f4, $f5;
        byte $b5, $b6, $b7;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.gallery3d.glrenderer.GLES11Canvas$GLState $r3, $r4, $r5;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        f1 := @parameter7: float;

        $b5 = f0 cmpg 0.01F;

        if $b5 > 0 goto label1;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void drawTexture(com.android.gallery3d.glrenderer.BasicTexture,int,int,int,int,float)>(r1, i1, i2, i3, i4, f1);

        return;

     label1:
        $b6 = f0 cmpl 1.0F;

        if $b6 < 0 goto label2;

        $f5 = (float) i1;

        $f3 = (float) i2;

        $f4 = (float) i3;

        $f2 = (float) i4;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void fillRect(float,float,float,float,int)>($f5, $f3, $f4, $f2, i0);

        return;

     label2:
        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        $z0 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: boolean mBlendEnabled>;

        if $z0 == 0 goto label4;

        $z2 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: boolean isOpaque()>();

        if $z2 == 0 goto label3;

        $z3 = staticinvoke <com.android.gallery3d.common.Utils: boolean isOpaque(int)>(i0);

        if $z3 == 0 goto label3;

        $b7 = f1 cmpg 0.95F;

        if $b7 >= 0 goto label4;

     label3:
        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        virtualinvoke $r3.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setBlendEnabled(boolean)>($z4);

        $z1 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: boolean bindTexture(com.android.gallery3d.glrenderer.BasicTexture)>(r1);

        if $z1 != 0 goto label6;

        return;

     label6:
        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        virtualinvoke $r4.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setTexEnvMode(int)>(34160);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void setMixedColor(int,float,float)>(i0, f0, f1);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void drawBoundTexture(com.android.gallery3d.glrenderer.BasicTexture,int,int,int,int)>(r1, i1, i2, i3, i4);

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$GLState mGLState>;

        virtualinvoke $r5.<com.android.gallery3d.glrenderer.GLES11Canvas$GLState: void setTexEnvMode(int)>(7681);

        return;
    }

    private static boolean isMatrixRotatedOrFlipped(float[])
    {
        float[] r0;
        float $f1, $f2, $f3, $f4, $f5, $f6;
        byte $b0, $b1, $b2, $b3;
        boolean $z0;

        r0 := @parameter0: float[];

        $f1 = r0[4];

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        $b0 = $f2 cmpl 1.0E-5F;

        if $b0 > 0 goto label1;

        $f3 = r0[1];

        $f4 = staticinvoke <java.lang.Math: float abs(float)>($f3);

        $b1 = $f4 cmpl 1.0E-5F;

        if $b1 > 0 goto label1;

        $f5 = r0[0];

        $b2 = $f5 cmpg -1.0E-5F;

        if $b2 < 0 goto label1;

        $f6 = r0[5];

        $b3 = $f6 cmpl 1.0E-5F;

        if $b3 <= 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void clearBuffer(float[])
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float[] r1;
        javax.microedition.khronos.opengles.GL11 $r2, $r3, $r4;
        int $i0;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: float[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 4 goto label1;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $f3 = r1[1];

        $f2 = r1[2];

        $f1 = r1[3];

        $f0 = r1[0];

        interfaceinvoke $r4.<javax.microedition.khronos.opengles.GL11: void glClearColor(float,float,float,float)>($f3, $f2, $f1, $f0);

        goto label2;

     label1:
        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r2.<javax.microedition.khronos.opengles.GL11: void glClearColor(float,float,float,float)>(0.0F, 0.0F, 0.0F, 1.0F);

     label2:
        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r3.<javax.microedition.khronos.opengles.GL11: void glClear(int)>(16384);

        return;
    }

    public void clearBuffer()
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void clearBuffer(float[])>(null);

        return;
    }

    private void setTextureCoords(android.graphics.RectF)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        android.graphics.RectF r1;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: android.graphics.RectF;

        $f3 = r1.<android.graphics.RectF: float left>;

        $f2 = r1.<android.graphics.RectF: float top>;

        $f1 = r1.<android.graphics.RectF: float right>;

        $f0 = r1.<android.graphics.RectF: float bottom>;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void setTextureCoords(float,float,float,float)>($f3, $f2, $f1, $f0);

        return;
    }

    private void setTextureCoords(float, float, float, float)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float f0, f1, f2, f3, $f4, $f5;
        javax.microedition.khronos.opengles.GL11 $r1, $r9, $r10;
        float[] $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r1.<javax.microedition.khronos.opengles.GL11: void glMatrixMode(int)>(5890);

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTextureMatrixValues>;

        $f4 = f2 - f0;

        $r2[0] = $f4;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTextureMatrixValues>;

        $f5 = f3 - f1;

        $r3[5] = $f5;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTextureMatrixValues>;

        $r4[10] = 1.0F;

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTextureMatrixValues>;

        $r5[12] = f0;

        $r6 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTextureMatrixValues>;

        $r6[13] = f1;

        $r7 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTextureMatrixValues>;

        $r7[15] = 1.0F;

        $r9 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $r8 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTextureMatrixValues>;

        interfaceinvoke $r9.<javax.microedition.khronos.opengles.GL11: void glLoadMatrixf(float[],int)>($r8, 0);

        $r10 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r10.<javax.microedition.khronos.opengles.GL11: void glMatrixMode(int)>(5888);

        return;
    }

    private void setTextureCoords(float[])
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float[] r1;
        javax.microedition.khronos.opengles.GL11 $r2, $r3, $r4;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: float[];

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r2.<javax.microedition.khronos.opengles.GL11: void glMatrixMode(int)>(5890);

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r3.<javax.microedition.khronos.opengles.GL11: void glLoadMatrixf(float[],int)>(r1, 0);

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r4.<javax.microedition.khronos.opengles.GL11: void glMatrixMode(int)>(5888);

        return;
    }

    public boolean unloadTexture(com.android.gallery3d.glrenderer.BasicTexture)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        com.android.gallery3d.util.IntArray r2, $r4, $r5;
        java.lang.Throwable r3, $r6;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.util.IntArray mUnboundTextures>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: boolean isLoaded()>();

        if $z0 != 0 goto label3;

        exitmonitor r2;

     label2:
        return 0;

     label3:
        $r5 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.util.IntArray mUnboundTextures>;

        $i0 = r1.<com.android.gallery3d.glrenderer.BasicTexture: int mId>;

        virtualinvoke $r5.<com.android.gallery3d.util.IntArray: void add(int)>($i0);

        exitmonitor r2;

     label4:
        return 1;

     label5:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void deleteBuffer(int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        int i0;
        com.android.gallery3d.util.IntArray r1, $r3, $r4;
        java.lang.Throwable r2, $r5;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.util.IntArray mUnboundTextures>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.util.IntArray mDeleteBuffers>;

        virtualinvoke $r4.<com.android.gallery3d.util.IntArray: void add(int)>(i0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void deleteRecycledResources()
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.util.IntArray r1, r2, $r4, r12;
        java.lang.Throwable r3, $r11;
        int $i0, $i1, $i2, $i3;
        com.android.gallery3d.glrenderer.GLId $r5, $r8;
        javax.microedition.khronos.opengles.GL11 $r6, $r9;
        int[] $r7, $r10;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.util.IntArray mUnboundTextures>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.util.IntArray mUnboundTextures>;

        $i0 = virtualinvoke r2.<com.android.gallery3d.util.IntArray: int size()>();

        if $i0 <= 0 goto label2;

        $r8 = <com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLId mGLId>;

        $r9 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $i3 = virtualinvoke r2.<com.android.gallery3d.util.IntArray: int size()>();

        $r10 = virtualinvoke r2.<com.android.gallery3d.util.IntArray: int[] getInternalArray()>();

        interfaceinvoke $r8.<com.android.gallery3d.glrenderer.GLId: void glDeleteTextures(javax.microedition.khronos.opengles.GL11,int,int[],int)>($r9, $i3, $r10, 0);

        virtualinvoke r2.<com.android.gallery3d.util.IntArray: void clear()>();

     label2:
        r12 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.util.IntArray mDeleteBuffers>;

        $i1 = virtualinvoke r12.<com.android.gallery3d.util.IntArray: int size()>();

        if $i1 <= 0 goto label3;

        $r5 = <com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLId mGLId>;

        $r6 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $i2 = virtualinvoke r12.<com.android.gallery3d.util.IntArray: int size()>();

        $r7 = virtualinvoke r12.<com.android.gallery3d.util.IntArray: int[] getInternalArray()>();

        interfaceinvoke $r5.<com.android.gallery3d.glrenderer.GLId: void glDeleteBuffers(javax.microedition.khronos.opengles.GL11,int,int[],int)>($r6, $i2, $r7, 0);

        virtualinvoke r12.<com.android.gallery3d.util.IntArray: void clear()>();

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r1;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void save()
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void save(int)>(-1);

        return;
    }

    public void save(int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        int i0, $i1, $i2;
        com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState r1;
        float[] $r2, $r4, $r5;
        java.util.ArrayList $r3;
        float $f0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState obtainRestoreConfig()>();

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $f0 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float mAlpha>;

        r1.<com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState: float mAlpha> = $f0;

        goto label2;

     label1:
        r1.<com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState: float mAlpha> = -1.0F;

     label2:
        $i2 = i0 & 2;

        if $i2 == 0 goto label3;

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        $r4 = r1.<com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState: float[] mMatrix>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, 16);

        goto label4;

     label3:
        $r2 = r1.<com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState: float[] mMatrix>;

        $r2[0] = #-InfinityF;

     label4:
        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: java.util.ArrayList mRestoreStack>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void restore()
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState r1;
        java.util.ArrayList $r2, $r3, $r4;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: java.util.ArrayList mRestoreStack>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label1:
        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: java.util.ArrayList mRestoreStack>;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: java.util.ArrayList mRestoreStack>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        r1 = (com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState) $r5;

        virtualinvoke r1.<com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState: void restore(com.android.gallery3d.glrenderer.GLES11Canvas)>(r0);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void freeRestoreConfig(com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState)>(r1);

        return;
    }

    private void freeRestoreConfig(com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState r1, $r2;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState mRecycledRestoreAction>;

        r1.<com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState: com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState mNextFree> = $r2;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState mRecycledRestoreAction> = r1;

        return;
    }

    private com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState obtainRestoreConfig()
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState r1, $r2, $r3, $r4;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState mRecycledRestoreAction>;

        if $r2 == null goto label1;

        r1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState mRecycledRestoreAction>;

        $r4 = r1.<com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState: com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState mNextFree>;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState mRecycledRestoreAction> = $r4;

        return r1;

     label1:
        $r3 = new com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState;

        specialinvoke $r3.<com.android.gallery3d.glrenderer.GLES11Canvas$ConfigState: void <init>(com.android.gallery3d.glrenderer.GLES11Canvas$1)>(null);

        return $r3;
    }

    public void dumpStatisticsAndClear()
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Integer $r3, $r4, $r5, $r6, $r7;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        $r2 = newarray (java.lang.Object)[5];

        $i0 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountDrawMesh>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $i1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountTextureRect>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r4;

        $i2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountTextureOES>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[2] = $r5;

        $i3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountFillRect>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[3] = $r6;

        $i4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountDrawLine>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r2[4] = $r7;

        r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("MESH:%d, TEX_OES:%d, TEX_RECT:%d, FILL_RECT:%d, LINE:%d", $r2);

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountDrawMesh> = 0;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountTextureRect> = 0;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountTextureOES> = 0;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountFillRect> = 0;

        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mCountDrawLine> = 0;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GLCanvasImp", r1);

        return;
    }

    private void saveTransform()
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float[] $r1, $r2;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTempMatrix>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, 16);

        return;
    }

    private void restoreTransform()
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float[] $r1, $r2;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mTempMatrix>;

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, 16);

        return;
    }

    private void setRenderTarget(com.android.gallery3d.glrenderer.RawTexture)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.RawTexture r1, $r4, $r5;
        javax.microedition.khronos.opengles.GL11ExtensionPack r2;
        javax.microedition.khronos.opengles.GL11 $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        int[] $r6, $r8, $r9;
        com.android.gallery3d.glrenderer.GLId $r7;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.RawTexture;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        r2 = (javax.microedition.khronos.opengles.GL11ExtensionPack) $r3;

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.RawTexture mTargetTexture>;

        if $r4 != null goto label1;

        if r1 == null goto label1;

        $r7 = <com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLId mGLId>;

        $r8 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int[] mFrameBuffer>;

        interfaceinvoke $r7.<com.android.gallery3d.glrenderer.GLId: void glGenBuffers(int,int[],int)>(1, $r8, 0);

        $r9 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int[] mFrameBuffer>;

        $i5 = $r9[0];

        interfaceinvoke r2.<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBindFramebufferOES(int,int)>(36160, $i5);

     label1:
        $r5 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.RawTexture mTargetTexture>;

        if $r5 == null goto label2;

        if r1 != null goto label2;

        interfaceinvoke r2.<javax.microedition.khronos.opengles.GL11ExtensionPack: void glBindFramebufferOES(int,int)>(36160, 0);

        $r6 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int[] mFrameBuffer>;

        interfaceinvoke r2.<javax.microedition.khronos.opengles.GL11ExtensionPack: void glDeleteFramebuffersOES(int,int[],int)>(1, $r6, 0);

     label2:
        r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.RawTexture mTargetTexture> = r1;

        if r1 != null goto label3;

        $i4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mScreenWidth>;

        $i3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int mScreenHeight>;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void setSize(int,int)>($i4, $i3);

        goto label5;

     label3:
        $i0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.RawTexture: int getWidth()>();

        $i1 = virtualinvoke r1.<com.android.gallery3d.glrenderer.RawTexture: int getHeight()>();

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void setSize(int,int)>($i0, $i1);

        $z0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.RawTexture: boolean isLoaded()>();

        if $z0 != 0 goto label4;

        virtualinvoke r1.<com.android.gallery3d.glrenderer.RawTexture: void prepare(com.android.gallery3d.glrenderer.GLCanvas)>(r0);

     label4:
        $i2 = virtualinvoke r1.<com.android.gallery3d.glrenderer.RawTexture: int getId()>();

        interfaceinvoke r2.<javax.microedition.khronos.opengles.GL11ExtensionPack: void glFramebufferTexture2DOES(int,int,int,int,int)>(36160, 36064, 3553, $i2, 0);

        staticinvoke <com.android.gallery3d.glrenderer.GLES11Canvas: void checkFramebufferStatus(javax.microedition.khronos.opengles.GL11ExtensionPack)>(r2);

     label5:
        return;
    }

    public void endRenderTarget()
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.RawTexture r1;
        java.util.ArrayList $r2, $r3;
        int $i0, $i1;
        java.lang.Object $r4;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: java.util.ArrayList mTargetStack>;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: java.util.ArrayList mTargetStack>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        r1 = (com.android.gallery3d.glrenderer.RawTexture) $r4;

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void setRenderTarget(com.android.gallery3d.glrenderer.RawTexture)>(r1);

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void restore()>();

        return;
    }

    public void beginRenderTarget(com.android.gallery3d.glrenderer.RawTexture)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.RawTexture r1, $r2;
        java.util.ArrayList $r3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.RawTexture;

        virtualinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void save()>();

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: java.util.ArrayList mTargetStack>;

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.RawTexture mTargetTexture>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: void setRenderTarget(com.android.gallery3d.glrenderer.RawTexture)>(r1);

        return;
    }

    private static void checkFramebufferStatus(javax.microedition.khronos.opengles.GL11ExtensionPack)
    {
        javax.microedition.khronos.opengles.GL11ExtensionPack r0;
        int i0;
        java.lang.String r1, $r6, $r8;
        java.lang.RuntimeException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r7;

        r0 := @parameter0: javax.microedition.khronos.opengles.GL11ExtensionPack;

        i0 = interfaceinvoke r0.<javax.microedition.khronos.opengles.GL11ExtensionPack: int glCheckFramebufferStatusOES(int)>(36160);

        if i0 == 36053 goto label9;

        r1 = "";

        tableswitch(i0)
        {
            case 36054: goto label2;
            case 36055: goto label3;
            case 36056: goto label8;
            case 36057: goto label7;
            case 36058: goto label1;
            case 36059: goto label4;
            case 36060: goto label5;
            case 36061: goto label6;
            default: goto label8;
        };

     label1:
        r1 = "FRAMEBUFFER_FORMATS";

        goto label8;

     label2:
        r1 = "FRAMEBUFFER_ATTACHMENT";

        goto label8;

     label3:
        r1 = "FRAMEBUFFER_MISSING_ATTACHMENT";

        goto label8;

     label4:
        r1 = "FRAMEBUFFER_DRAW_BUFFER";

        goto label8;

     label5:
        r1 = "FRAMEBUFFER_READ_BUFFER";

        goto label8;

     label6:
        r1 = "FRAMEBUFFER_UNSUPPORTED";

        goto label8;

     label7:
        r1 = "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";

     label8:
        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label9:
        return;
    }

    public void setTextureParameters(com.android.gallery3d.glrenderer.BasicTexture)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, i1, i2, $i3, $i4;
        float[] $r2, $r3, $r4, $r5, $r8;
        float $f0, $f1, $f2;
        javax.microedition.khronos.opengles.GL11 $r6, $r7, $r9, $r10, $r11, $r12;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getWidth()>();

        i1 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getHeight()>();

        $r2 = <com.android.gallery3d.glrenderer.GLES11Canvas: float[] sCropRect>;

        $r2[0] = 0.0F;

        $r3 = <com.android.gallery3d.glrenderer.GLES11Canvas: float[] sCropRect>;

        $f0 = (float) i1;

        $r3[1] = $f0;

        $r4 = <com.android.gallery3d.glrenderer.GLES11Canvas: float[] sCropRect>;

        $f1 = (float) i0;

        $r4[2] = $f1;

        $r5 = <com.android.gallery3d.glrenderer.GLES11Canvas: float[] sCropRect>;

        $i3 = neg i1;

        $f2 = (float) $i3;

        $r5[3] = $f2;

        i2 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTarget()>();

        $r6 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $i4 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getId()>();

        interfaceinvoke $r6.<javax.microedition.khronos.opengles.GL11: void glBindTexture(int,int)>(i2, $i4);

        $r7 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $r8 = <com.android.gallery3d.glrenderer.GLES11Canvas: float[] sCropRect>;

        interfaceinvoke $r7.<javax.microedition.khronos.opengles.GL11: void glTexParameterfv(int,int,float[],int)>(i2, 35741, $r8, 0);

        $r10 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r10.<javax.microedition.khronos.opengles.GL11: void glTexParameteri(int,int,int)>(i2, 10242, 33071);

        $r9 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r9.<javax.microedition.khronos.opengles.GL11: void glTexParameteri(int,int,int)>(i2, 10243, 33071);

        $r12 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r12.<javax.microedition.khronos.opengles.GL11: void glTexParameterf(int,int,float)>(i2, 10241, 9729.0F);

        $r11 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r11.<javax.microedition.khronos.opengles.GL11: void glTexParameterf(int,int,float)>(i2, 10240, 9729.0F);

        return;
    }

    public void initializeTextureSize(com.android.gallery3d.glrenderer.BasicTexture, int, int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, i1, i2, i3, i4, $i5;
        javax.microedition.khronos.opengles.GL11 $r2, $r3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTarget()>();

        $r2 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $i5 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getId()>();

        interfaceinvoke $r2.<javax.microedition.khronos.opengles.GL11: void glBindTexture(int,int)>(i2, $i5);

        i3 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTextureWidth()>();

        i4 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTextureHeight()>();

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r3.<javax.microedition.khronos.opengles.GL11: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>(i2, 0, i0, i3, i4, 0, i0, i1, null);

        return;
    }

    public void initializeTexture(com.android.gallery3d.glrenderer.BasicTexture, android.graphics.Bitmap)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        android.graphics.Bitmap r2;
        int i0, $i1;
        javax.microedition.khronos.opengles.GL11 $r3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        r2 := @parameter1: android.graphics.Bitmap;

        i0 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTarget()>();

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $i1 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getId()>();

        interfaceinvoke $r3.<javax.microedition.khronos.opengles.GL11: void glBindTexture(int,int)>(i0, $i1);

        staticinvoke <android.opengl.GLUtils: void texImage2D(int,int,android.graphics.Bitmap,int)>(i0, 0, r2, 0);

        return;
    }

    public void texSubImage2D(com.android.gallery3d.glrenderer.BasicTexture, int, int, android.graphics.Bitmap, int, int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.BasicTexture r1;
        int i0, i1, i2, i3, i4, $i5;
        android.graphics.Bitmap r2;
        javax.microedition.khronos.opengles.GL11 $r3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: com.android.gallery3d.glrenderer.BasicTexture;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Bitmap;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getTarget()>();

        $r3 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $i5 = virtualinvoke r1.<com.android.gallery3d.glrenderer.BasicTexture: int getId()>();

        interfaceinvoke $r3.<javax.microedition.khronos.opengles.GL11: void glBindTexture(int,int)>(i4, $i5);

        staticinvoke <android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap,int,int)>(i4, 0, i0, i1, r2, i2, i3);

        return;
    }

    public int uploadBuffer(java.nio.FloatBuffer)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        java.nio.FloatBuffer r1;
        int $i0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: java.nio.FloatBuffer;

        $i0 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int uploadBuffer(java.nio.Buffer,int)>(r1, 4);

        return $i0;
    }

    public int uploadBuffer(java.nio.ByteBuffer)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        java.nio.ByteBuffer r1;
        int $i0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = specialinvoke r0.<com.android.gallery3d.glrenderer.GLES11Canvas: int uploadBuffer(java.nio.Buffer,int)>(r1, 1);

        return $i0;
    }

    private int uploadBuffer(java.nio.Buffer, int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        java.nio.Buffer r1;
        int i0, i1, $i2, $i3, $i4;
        int[] r2;
        com.android.gallery3d.glrenderer.GLId $r3;
        javax.microedition.khronos.opengles.GL11 $r4, $r5;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: java.nio.Buffer;

        i0 := @parameter1: int;

        r2 = newarray (int)[1];

        $r3 = <com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLId mGLId>;

        $i2 = lengthof r2;

        interfaceinvoke $r3.<com.android.gallery3d.glrenderer.GLId: void glGenBuffers(int,int[],int)>($i2, r2, 0);

        i1 = r2[0];

        $r4 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        interfaceinvoke $r4.<javax.microedition.khronos.opengles.GL11: void glBindBuffer(int,int)>(34962, i1);

        $r5 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: javax.microedition.khronos.opengles.GL11 mGL>;

        $i3 = virtualinvoke r1.<java.nio.Buffer: int capacity()>();

        $i4 = $i3 * i0;

        interfaceinvoke $r5.<javax.microedition.khronos.opengles.GL11: void glBufferData(int,int,java.nio.Buffer,int)>(34962, $i4, r1, 35044);

        return i1;
    }

    public void recoverFromLightCycle()
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        return;
    }

    public void getBounds(android.graphics.Rect, int, int, int, int)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        android.graphics.Rect r1;
        int i0, i1, i2, i3;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        r1 := @parameter0: android.graphics.Rect;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        return;
    }

    public com.android.gallery3d.glrenderer.GLId getGLId()
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        com.android.gallery3d.glrenderer.GLId $r1;

        r0 := @this: com.android.gallery3d.glrenderer.GLES11Canvas;

        $r1 = <com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLId mGLId>;

        return $r1;
    }

    static float[] access$100(com.android.gallery3d.glrenderer.GLES11Canvas)
    {
        com.android.gallery3d.glrenderer.GLES11Canvas r0;
        float[] $r1;

        r0 := @parameter0: com.android.gallery3d.glrenderer.GLES11Canvas;

        $r1 = r0.<com.android.gallery3d.glrenderer.GLES11Canvas: float[] mMatrixValues>;

        return $r1;
    }

    static void <clinit>()
    {
        float[] $r0, $r1;
        com.android.gallery3d.glrenderer.GLES11IdImpl $r2;

        <com.android.gallery3d.glrenderer.GLES11Canvas: int MSCALE_Y> = 5;

        <com.android.gallery3d.glrenderer.GLES11Canvas: int MSCALE_X> = 0;

        <com.android.gallery3d.glrenderer.GLES11Canvas: int MSKEW_Y> = 1;

        <com.android.gallery3d.glrenderer.GLES11Canvas: int MSKEW_X> = 4;

        <com.android.gallery3d.glrenderer.GLES11Canvas: int OFFSET_DRAW_RECT> = 6;

        <com.android.gallery3d.glrenderer.GLES11Canvas: int OFFSET_DRAW_LINE> = 4;

        <com.android.gallery3d.glrenderer.GLES11Canvas: int OFFSET_FILL_RECT> = 0;

        <com.android.gallery3d.glrenderer.GLES11Canvas: float OPAQUE_ALPHA> = 0.95F;

        <com.android.gallery3d.glrenderer.GLES11Canvas: java.lang.String TAG> = "GLCanvasImp";

        $r0 = newarray (float)[20];

        $r0[0] = 0.0F;

        $r0[1] = 0.0F;

        $r0[2] = 1.0F;

        $r0[3] = 0.0F;

        $r0[4] = 0.0F;

        $r0[5] = 1.0F;

        $r0[6] = 1.0F;

        $r0[7] = 1.0F;

        $r0[8] = 0.0F;

        $r0[9] = 0.0F;

        $r0[10] = 1.0F;

        $r0[11] = 1.0F;

        $r0[12] = 0.0F;

        $r0[13] = 0.0F;

        $r0[14] = 0.0F;

        $r0[15] = 1.0F;

        $r0[16] = 1.0F;

        $r0[17] = 1.0F;

        $r0[18] = 1.0F;

        $r0[19] = 0.0F;

        <com.android.gallery3d.glrenderer.GLES11Canvas: float[] BOX_COORDINATES> = $r0;

        $r1 = newarray (float)[4];

        <com.android.gallery3d.glrenderer.GLES11Canvas: float[] sCropRect> = $r1;

        $r2 = new com.android.gallery3d.glrenderer.GLES11IdImpl;

        specialinvoke $r2.<com.android.gallery3d.glrenderer.GLES11IdImpl: void <init>()>();

        <com.android.gallery3d.glrenderer.GLES11Canvas: com.android.gallery3d.glrenderer.GLId mGLId> = $r2;

        return;
    }
}
