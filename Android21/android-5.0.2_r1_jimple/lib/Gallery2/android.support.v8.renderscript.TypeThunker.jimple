class android.support.v8.renderscript.TypeThunker extends android.support.v8.renderscript.Type
{
    android.renderscript.Type mN;
    static java.util.HashMap mMap;

    android.renderscript.Type getNObj()
    {
        android.support.v8.renderscript.TypeThunker r0;
        android.renderscript.Type $r1;

        r0 := @this: android.support.v8.renderscript.TypeThunker;

        $r1 = r0.<android.support.v8.renderscript.TypeThunker: android.renderscript.Type mN>;

        return $r1;
    }

    void internalCalc()
    {
        android.support.v8.renderscript.TypeThunker r0;
        android.renderscript.Type $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: android.support.v8.renderscript.TypeThunker;

        $r1 = r0.<android.support.v8.renderscript.TypeThunker: android.renderscript.Type mN>;

        $i0 = virtualinvoke $r1.<android.renderscript.Type: int getX()>();

        r0.<android.support.v8.renderscript.TypeThunker: int mDimX> = $i0;

        $r2 = r0.<android.support.v8.renderscript.TypeThunker: android.renderscript.Type mN>;

        $i1 = virtualinvoke $r2.<android.renderscript.Type: int getY()>();

        r0.<android.support.v8.renderscript.TypeThunker: int mDimY> = $i1;

        $r3 = r0.<android.support.v8.renderscript.TypeThunker: android.renderscript.Type mN>;

        $i2 = virtualinvoke $r3.<android.renderscript.Type: int getZ()>();

        r0.<android.support.v8.renderscript.TypeThunker: int mDimZ> = $i2;

        $r4 = r0.<android.support.v8.renderscript.TypeThunker: android.renderscript.Type mN>;

        $z0 = virtualinvoke $r4.<android.renderscript.Type: boolean hasFaces()>();

        r0.<android.support.v8.renderscript.TypeThunker: boolean mDimFaces> = $z0;

        $r5 = r0.<android.support.v8.renderscript.TypeThunker: android.renderscript.Type mN>;

        $z1 = virtualinvoke $r5.<android.renderscript.Type: boolean hasMipmaps()>();

        r0.<android.support.v8.renderscript.TypeThunker: boolean mDimMipmaps> = $z1;

        $r6 = r0.<android.support.v8.renderscript.TypeThunker: android.renderscript.Type mN>;

        $i3 = virtualinvoke $r6.<android.renderscript.Type: int getYuv()>();

        r0.<android.support.v8.renderscript.TypeThunker: int mDimYuv> = $i3;

        virtualinvoke r0.<android.support.v8.renderscript.TypeThunker: void calcElementCount()>();

        return;
    }

    void <init>(android.support.v8.renderscript.RenderScript, android.renderscript.Type)
    {
        android.support.v8.renderscript.TypeThunker r0;
        android.support.v8.renderscript.RenderScript r1;
        android.renderscript.Type r2, $r8;
        android.renderscript.RSRuntimeException r3, $r11;
        java.lang.Throwable r4, $r13;
        android.support.v8.renderscript.ElementThunker $r5;
        android.renderscript.Element $r6;
        java.util.HashMap $r7, $r9, r14;
        java.lang.RuntimeException $r12;

        r0 := @this: android.support.v8.renderscript.TypeThunker;

        r1 := @parameter0: android.support.v8.renderscript.RenderScript;

        r2 := @parameter1: android.renderscript.Type;

        specialinvoke r0.<android.support.v8.renderscript.Type: void <init>(int,android.support.v8.renderscript.RenderScript)>(0, r1);

        r0.<android.support.v8.renderscript.TypeThunker: android.renderscript.Type mN> = r2;

     label1:
        virtualinvoke r0.<android.support.v8.renderscript.TypeThunker: void internalCalc()>();

        $r5 = new android.support.v8.renderscript.ElementThunker;

        $r6 = virtualinvoke r2.<android.renderscript.Type: android.renderscript.Element getElement()>();

        specialinvoke $r5.<android.support.v8.renderscript.ElementThunker: void <init>(android.support.v8.renderscript.RenderScript,android.renderscript.Element)>(r1, $r6);

        r0.<android.support.v8.renderscript.TypeThunker: android.support.v8.renderscript.Element mElement> = $r5;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r3 = $r11;

        $r12 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r3);

        throw $r12;

     label4:
        $r7 = <android.support.v8.renderscript.TypeThunker: java.util.HashMap mMap>;

        r14 = $r7;

        entermonitor $r7;

     label5:
        $r9 = <android.support.v8.renderscript.TypeThunker: java.util.HashMap mMap>;

        $r8 = r0.<android.support.v8.renderscript.TypeThunker: android.renderscript.Type mN>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r0);

        exitmonitor r14;

     label6:
        goto label9;

     label7:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r14;

     label8:
        throw r4;

     label9:
        return;

        catch android.renderscript.RSRuntimeException from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    static android.support.v8.renderscript.Type find(android.renderscript.Type)
    {
        android.renderscript.Type r0;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        android.support.v8.renderscript.Type $r3;

        r0 := @parameter0: android.renderscript.Type;

        $r1 = <android.support.v8.renderscript.TypeThunker: java.util.HashMap mMap>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (android.support.v8.renderscript.Type) $r2;

        return $r3;
    }

    static android.support.v8.renderscript.Type create(android.support.v8.renderscript.RenderScript, android.support.v8.renderscript.Element, int, int, int, boolean, boolean, int)
    {
        android.support.v8.renderscript.RenderScript r0;
        android.support.v8.renderscript.Element r1;
        int i0, i1, i2, i3;
        boolean z0, z1;
        android.support.v8.renderscript.ElementThunker r2;
        android.support.v8.renderscript.RenderScriptThunker r3;
        android.renderscript.Type$Builder r4, $r7;
        android.renderscript.Type r5;
        android.support.v8.renderscript.TypeThunker r6, $r10;
        android.renderscript.Element $r8;
        android.renderscript.RenderScript $r9;
        java.lang.RuntimeException $r17;
        android.renderscript.RSRuntimeException $r18, r19;

        r0 := @parameter0: android.support.v8.renderscript.RenderScript;

        r1 := @parameter1: android.support.v8.renderscript.Element;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        i3 := @parameter7: int;

        r2 = (android.support.v8.renderscript.ElementThunker) r1;

        r3 = (android.support.v8.renderscript.RenderScriptThunker) r0;

     label1:
        $r7 = new android.renderscript.Type$Builder;

        $r9 = r3.<android.support.v8.renderscript.RenderScriptThunker: android.renderscript.RenderScript mN>;

        $r8 = r2.<android.support.v8.renderscript.ElementThunker: android.renderscript.Element mN>;

        specialinvoke $r7.<android.renderscript.Type$Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>($r9, $r8);

        r4 = $r7;

        if i0 <= 0 goto label2;

        virtualinvoke r4.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setX(int)>(i0);

     label2:
        if i1 <= 0 goto label3;

        virtualinvoke r4.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setY(int)>(i1);

     label3:
        if i2 <= 0 goto label4;

        virtualinvoke r4.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setZ(int)>(i2);

     label4:
        if z0 == 0 goto label5;

        virtualinvoke r4.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setMipmaps(boolean)>(z0);

     label5:
        if z1 == 0 goto label6;

        virtualinvoke r4.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setFaces(boolean)>(z1);

     label6:
        if i3 <= 0 goto label7;

        virtualinvoke r4.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setYuvFormat(int)>(i3);

     label7:
        r5 = virtualinvoke r4.<android.renderscript.Type$Builder: android.renderscript.Type create()>();

        $r10 = new android.support.v8.renderscript.TypeThunker;

        specialinvoke $r10.<android.support.v8.renderscript.TypeThunker: void <init>(android.support.v8.renderscript.RenderScript,android.renderscript.Type)>(r0, r5);

        r6 = $r10;

        virtualinvoke r6.<android.support.v8.renderscript.TypeThunker: void internalCalc()>();

     label8:
        return r6;

     label9:
        $r18 := @caughtexception;

        r19 = $r18;

        $r17 = staticinvoke <android.support.v8.renderscript.ExceptionThunker: java.lang.RuntimeException convertException(java.lang.RuntimeException)>(r19);

        throw $r17;

        catch android.renderscript.RSRuntimeException from label1 to label8 with label9;
    }

    volatile android.renderscript.BaseObj getNObj()
    {
        android.support.v8.renderscript.TypeThunker r0;
        android.renderscript.Type $r1;

        r0 := @this: android.support.v8.renderscript.TypeThunker;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.TypeThunker: android.renderscript.Type getNObj()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <android.support.v8.renderscript.TypeThunker: java.util.HashMap mMap> = $r0;

        return;
    }
}
