public class com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl extends com.googlecode.mp4parser.authoring.AbstractTrack
{
    com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData;
    com.coremedia.iso.boxes.SampleDescriptionBox sampleDescriptionBox;
    java.util.List subs;

    public java.util.List getSubs()
    {
        com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl r0;
        java.util.List $r1;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl: java.util.List subs>;

        return $r1;
    }

    public void <init>()
    {
        com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl r0;
        com.googlecode.mp4parser.boxes.apple.QuicktimeTextSampleEntry r1, $r5;
        com.googlecode.mp4parser.authoring.TrackMetaData $r2, $r8, $r10, $r11;
        java.util.LinkedList $r3;
        com.coremedia.iso.boxes.SampleDescriptionBox $r4, $r6;
        java.util.Date $r7, $r9;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl;

        specialinvoke r0.<com.googlecode.mp4parser.authoring.AbstractTrack: void <init>()>();

        $r2 = new com.googlecode.mp4parser.authoring.TrackMetaData;

        specialinvoke $r2.<com.googlecode.mp4parser.authoring.TrackMetaData: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl: java.util.List subs> = $r3;

        $r4 = new com.coremedia.iso.boxes.SampleDescriptionBox;

        specialinvoke $r4.<com.coremedia.iso.boxes.SampleDescriptionBox: void <init>()>();

        r0.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl: com.coremedia.iso.boxes.SampleDescriptionBox sampleDescriptionBox> = $r4;

        $r5 = new com.googlecode.mp4parser.boxes.apple.QuicktimeTextSampleEntry;

        specialinvoke $r5.<com.googlecode.mp4parser.boxes.apple.QuicktimeTextSampleEntry: void <init>()>();

        r1 = $r5;

        virtualinvoke r1.<com.googlecode.mp4parser.boxes.apple.QuicktimeTextSampleEntry: void setDataReferenceIndex(int)>(1);

        $r6 = r0.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl: com.coremedia.iso.boxes.SampleDescriptionBox sampleDescriptionBox>;

        virtualinvoke $r6.<com.coremedia.iso.boxes.SampleDescriptionBox: void addBox(com.coremedia.iso.boxes.Box)>(r1);

        $r8 = r0.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData>;

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>()>();

        virtualinvoke $r8.<com.googlecode.mp4parser.authoring.TrackMetaData: void setCreationTime(java.util.Date)>($r7);

        $r10 = r0.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData>;

        $r9 = new java.util.Date;

        specialinvoke $r9.<java.util.Date: void <init>()>();

        virtualinvoke $r10.<com.googlecode.mp4parser.authoring.TrackMetaData: void setModificationTime(java.util.Date)>($r9);

        $r11 = r0.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData>;

        virtualinvoke $r11.<com.googlecode.mp4parser.authoring.TrackMetaData: void setTimescale(long)>(1000L);

        return;
    }

    public java.util.List getSamples()
    {
        com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl r0;
        java.util.LinkedList r1, $r7;
        long l0, l1, $l3;
        java.util.Iterator r2;
        com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl$Line r3;
        java.io.ByteArrayOutputStream r4, $r10;
        java.io.DataOutputStream r5, $r12;
        java.util.List $r8;
        boolean $z0;
        java.lang.Object $r9;
        byte $b2, $b4;
        java.lang.String $r11, $r15;
        int $i5;
        byte[] $r13, $r14, $r17, $r20;
        java.nio.ByteBuffer $r16, $r19;
        java.lang.Error $r18, $r21;
        java.io.IOException $r22;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r1 = $r7;

        l0 = 0L;

        $r8 = r0.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl: java.util.List subs>;

        r2 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl$Line) $r9;

        $l3 = r3.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl$Line: long 'from'>;

        l1 = $l3 - l0;

        $b2 = l1 cmp 0L;

        if $b2 <= 0 goto label2;

        $r20 = newarray (byte)[2];

        $r20[0] = 0;

        $r20[1] = 0;

        $r19 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r20);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r19);

        goto label3;

     label2:
        $b4 = l1 cmp 0L;

        if $b4 >= 0 goto label3;

        $r18 = new java.lang.Error;

        specialinvoke $r18.<java.lang.Error: void <init>(java.lang.String)>("Subtitle display times may not intersect");

        throw $r18;

     label3:
        $r10 = new java.io.ByteArrayOutputStream;

        specialinvoke $r10.<java.io.ByteArrayOutputStream: void <init>()>();

        r4 = $r10;

        $r12 = new java.io.DataOutputStream;

        specialinvoke $r12.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r4);

        r5 = $r12;

     label4:
        $r11 = r3.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl$Line: java.lang.String text>;

        $r13 = virtualinvoke $r11.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $i5 = lengthof $r13;

        virtualinvoke r5.<java.io.DataOutputStream: void writeShort(int)>($i5);

        $r15 = r3.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl$Line: java.lang.String text>;

        $r14 = virtualinvoke $r15.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke r5.<java.io.DataOutputStream: void write(byte[])>($r14);

        virtualinvoke r5.<java.io.DataOutputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r22 := @caughtexception;

        $r21 = new java.lang.Error;

        specialinvoke $r21.<java.lang.Error: void <init>(java.lang.String)>("VM is broken. Does not support UTF-8");

        throw $r21;

     label7:
        $r17 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r16 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r17);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r16);

        l0 = r3.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl$Line: long 'to'>;

        goto label1;

     label8:
        return r1;

        catch java.io.IOException from label4 to label5 with label6;
    }

    public com.coremedia.iso.boxes.SampleDescriptionBox getSampleDescriptionBox()
    {
        com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl r0;
        com.coremedia.iso.boxes.SampleDescriptionBox $r1;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl: com.coremedia.iso.boxes.SampleDescriptionBox sampleDescriptionBox>;

        return $r1;
    }

    public java.util.List getDecodingTimeEntries()
    {
        com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl r0;
        java.util.LinkedList r1, $r4;
        long l0, l1, $l2, $l5, $l6, $l7;
        java.util.Iterator r2;
        com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl$Line r3;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;
        byte $b3, $b4;
        com.coremedia.iso.boxes.TimeToSampleBox$Entry $r7, $r9;
        java.lang.Error $r8;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r1 = $r4;

        l0 = 0L;

        $r5 = r0.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl: java.util.List subs>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl$Line) $r6;

        $l2 = r3.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl$Line: long 'from'>;

        l1 = $l2 - l0;

        $b3 = l1 cmp 0L;

        if $b3 <= 0 goto label2;

        $r9 = new com.coremedia.iso.boxes.TimeToSampleBox$Entry;

        specialinvoke $r9.<com.coremedia.iso.boxes.TimeToSampleBox$Entry: void <init>(long,long)>(1L, l1);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label3;

     label2:
        $b4 = l1 cmp 0L;

        if $b4 >= 0 goto label3;

        $r8 = new java.lang.Error;

        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.String)>("Subtitle display times may not intersect");

        throw $r8;

     label3:
        $r7 = new com.coremedia.iso.boxes.TimeToSampleBox$Entry;

        $l7 = r3.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl$Line: long 'to'>;

        $l5 = r3.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl$Line: long 'from'>;

        $l6 = $l7 - $l5;

        specialinvoke $r7.<com.coremedia.iso.boxes.TimeToSampleBox$Entry: void <init>(long,long)>(1L, $l6);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        l0 = r3.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl$Line: long 'to'>;

        goto label1;

     label4:
        return r1;
    }

    public java.util.List getCompositionTimeEntries()
    {
        com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl r0;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl;

        return null;
    }

    public long[] getSyncSamples()
    {
        com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl r0;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl;

        return null;
    }

    public java.util.List getSampleDependencies()
    {
        com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl r0;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl;

        return null;
    }

    public com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()
    {
        com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl r0;
        com.googlecode.mp4parser.authoring.TrackMetaData $r1;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl;

        $r1 = r0.<com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl: com.googlecode.mp4parser.authoring.TrackMetaData trackMetaData>;

        return $r1;
    }

    public java.lang.String getHandler()
    {
        com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl r0;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl;

        return "text";
    }

    public com.coremedia.iso.boxes.Box getMediaHeaderBox()
    {
        com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl r0;
        com.googlecode.mp4parser.boxes.apple.GenericMediaHeaderAtom r1, $r2;
        com.googlecode.mp4parser.boxes.apple.BaseMediaInfoAtom $r3;
        com.googlecode.mp4parser.boxes.apple.GenericMediaHeaderTextAtom $r4;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl;

        $r2 = new com.googlecode.mp4parser.boxes.apple.GenericMediaHeaderAtom;

        specialinvoke $r2.<com.googlecode.mp4parser.boxes.apple.GenericMediaHeaderAtom: void <init>()>();

        r1 = $r2;

        $r3 = new com.googlecode.mp4parser.boxes.apple.BaseMediaInfoAtom;

        specialinvoke $r3.<com.googlecode.mp4parser.boxes.apple.BaseMediaInfoAtom: void <init>()>();

        virtualinvoke r1.<com.googlecode.mp4parser.boxes.apple.GenericMediaHeaderAtom: void addBox(com.coremedia.iso.boxes.Box)>($r3);

        $r4 = new com.googlecode.mp4parser.boxes.apple.GenericMediaHeaderTextAtom;

        specialinvoke $r4.<com.googlecode.mp4parser.boxes.apple.GenericMediaHeaderTextAtom: void <init>()>();

        virtualinvoke r1.<com.googlecode.mp4parser.boxes.apple.GenericMediaHeaderAtom: void addBox(com.coremedia.iso.boxes.Box)>($r4);

        return r1;
    }

    public com.coremedia.iso.boxes.SubSampleInformationBox getSubsampleInformationBox()
    {
        com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl r0;

        r0 := @this: com.googlecode.mp4parser.authoring.tracks.QuicktimeTextTrackImpl;

        return null;
    }
}
