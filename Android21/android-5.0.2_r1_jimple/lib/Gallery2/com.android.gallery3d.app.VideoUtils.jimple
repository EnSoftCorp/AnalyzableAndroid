public class com.android.gallery3d.app.VideoUtils extends java.lang.Object
{
    private static final java.lang.String LOGTAG;
    private static final int DEFAULT_BUFFER_SIZE;

    public void <init>()
    {
        com.android.gallery3d.app.VideoUtils r0;

        r0 := @this: com.android.gallery3d.app.VideoUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void startMute(java.lang.String, com.android.gallery3d.util.SaveVideoFileInfo) throws java.io.IOException
    {
        java.lang.String r0, $r3;
        com.android.gallery3d.util.SaveVideoFileInfo r1;
        boolean $z0;
        java.io.File $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.android.gallery3d.util.SaveVideoFileInfo;

        $z0 = <com.android.gallery3d.common.ApiHelper: boolean HAS_MEDIA_MUXER>;

        if $z0 == 0 goto label1;

        $r2 = r1.<com.android.gallery3d.util.SaveVideoFileInfo: java.io.File mFile>;

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        staticinvoke <com.android.gallery3d.app.VideoUtils: void genVideoUsingMuxer(java.lang.String,java.lang.String,int,int,boolean,boolean)>(r0, $r3, -1, -1, 0, 1);

        goto label2;

     label1:
        staticinvoke <com.android.gallery3d.app.VideoUtils: void startMuteUsingMp4Parser(java.lang.String,com.android.gallery3d.util.SaveVideoFileInfo)>(r0, r1);

     label2:
        return;
    }

    public static void startTrim(java.io.File, java.io.File, int, int) throws java.io.IOException
    {
        java.io.File r0, r1;
        int i0, i1;
        boolean $z0;
        java.lang.String $r2, $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = <com.android.gallery3d.common.ApiHelper: boolean HAS_MEDIA_MUXER>;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $r3 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        staticinvoke <com.android.gallery3d.app.VideoUtils: void genVideoUsingMuxer(java.lang.String,java.lang.String,int,int,boolean,boolean)>($r2, $r3, i0, i1, 1, 1);

        goto label2;

     label1:
        staticinvoke <com.android.gallery3d.app.VideoUtils: void trimUsingMp4Parser(java.io.File,java.io.File,int,int)>(r0, r1, i0, i1);

     label2:
        return;
    }

    private static void startMuteUsingMp4Parser(java.lang.String, com.android.gallery3d.util.SaveVideoFileInfo) throws java.io.FileNotFoundException, java.io.IOException
    {
        java.lang.String r0, $r14;
        com.android.gallery3d.util.SaveVideoFileInfo r1;
        java.io.File r2, r3, $r9;
        java.io.RandomAccessFile r4, $r10;
        com.googlecode.mp4parser.authoring.Movie r5;
        java.util.List r6;
        java.util.Iterator r7;
        com.googlecode.mp4parser.authoring.Track r8;
        java.nio.channels.FileChannel $r11;
        java.util.LinkedList $r12;
        java.lang.Object $r13;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.android.gallery3d.util.SaveVideoFileInfo;

        r2 = r1.<com.android.gallery3d.util.SaveVideoFileInfo: java.io.File mFile>;

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>(r0);

        r3 = $r9;

        $r10 = new java.io.RandomAccessFile;

        specialinvoke $r10.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r3, "r");

        r4 = $r10;

        $r11 = virtualinvoke r4.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        r5 = staticinvoke <com.googlecode.mp4parser.authoring.container.mp4.MovieCreator: com.googlecode.mp4parser.authoring.Movie build(java.nio.channels.ReadableByteChannel)>($r11);

        r6 = virtualinvoke r5.<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>();

        $r12 = new java.util.LinkedList;

        specialinvoke $r12.<java.util.LinkedList: void <init>()>();

        virtualinvoke r5.<com.googlecode.mp4parser.authoring.Movie: void setTracks(java.util.List)>($r12);

        r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r13 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.googlecode.mp4parser.authoring.Track) $r13;

        $r14 = interfaceinvoke r8.<com.googlecode.mp4parser.authoring.Track: java.lang.String getHandler()>();

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("vide");

        if $z1 == 0 goto label2;

        virtualinvoke r5.<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>(r8);

     label2:
        goto label1;

     label3:
        staticinvoke <com.android.gallery3d.app.VideoUtils: void writeMovieIntoFile(java.io.File,com.googlecode.mp4parser.authoring.Movie)>(r2, r5);

        virtualinvoke r4.<java.io.RandomAccessFile: void close()>();

        return;
    }

    private static void writeMovieIntoFile(java.io.File, com.googlecode.mp4parser.authoring.Movie) throws java.io.IOException
    {
        java.io.File r0;
        com.googlecode.mp4parser.authoring.Movie r1;
        com.coremedia.iso.IsoFile r2;
        java.io.FileOutputStream r3, $r6;
        java.nio.channels.FileChannel r4;
        boolean $z0;
        com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder $r5;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: com.googlecode.mp4parser.authoring.Movie;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<java.io.File: boolean createNewFile()>();

     label1:
        $r5 = new com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder;

        specialinvoke $r5.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: void <init>()>();

        r2 = virtualinvoke $r5.<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)>(r1);

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r0);

        r3 = $r6;

        r4 = virtualinvoke r3.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        virtualinvoke r2.<com.coremedia.iso.IsoFile: void getBox(java.nio.channels.WritableByteChannel)>(r4);

        virtualinvoke r4.<java.nio.channels.FileChannel: void close()>();

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

        return;
    }

    private static void genVideoUsingMuxer(java.lang.String, java.lang.String, int, int, boolean, boolean) throws java.io.IOException
    {
        java.lang.String r0, r1, r6, r23;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i9, $i10, $i11, $i14, $i16, $i21, i22, i25;
        boolean z0, z1, z2, $z4, $z5, $z6;
        android.media.MediaExtractor r2, $r8;
        android.media.MediaMuxer r3, $r10;
        java.util.HashMap r4, $r12;
        android.media.MediaFormat r5;
        java.lang.Throwable r9, $r20;
        android.media.MediaMetadataRetriever $r11, r22;
        android.media.MediaCodec$BufferInfo $r13, r25;
        long $l8, $l12, $l13, $l19;
        java.lang.Integer $r14, $r15, $r17, $r19;
        java.lang.Object $r16;
        byte $b17, b23;
        java.lang.IllegalStateException $r21;
        java.nio.ByteBuffer r24;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $r8 = new android.media.MediaExtractor;

        specialinvoke $r8.<android.media.MediaExtractor: void <init>()>();

        r2 = $r8;

        virtualinvoke r2.<android.media.MediaExtractor: void setDataSource(java.lang.String)>(r0);

        i2 = virtualinvoke r2.<android.media.MediaExtractor: int getTrackCount()>();

        $r10 = new android.media.MediaMuxer;

        specialinvoke $r10.<android.media.MediaMuxer: void <init>(java.lang.String,int)>(r1, 0);

        r3 = $r10;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>(int)>(i2);

        r4 = $r12;

        i3 = -1;

        i4 = 0;

     label01:
        if i4 >= i2 goto label07;

        r5 = virtualinvoke r2.<android.media.MediaExtractor: android.media.MediaFormat getTrackFormat(int)>(i4);

        r6 = virtualinvoke r5.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("mime");

        z2 = 0;

        $z5 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("audio/");

        if $z5 == 0 goto label02;

        if z0 == 0 goto label02;

        z2 = 1;

        goto label03;

     label02:
        $z4 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("video/");

        if $z4 == 0 goto label03;

        if z1 == 0 goto label03;

        z2 = 1;

     label03:
        if z2 == 0 goto label06;

        virtualinvoke r2.<android.media.MediaExtractor: void selectTrack(int)>(i4);

        i5 = virtualinvoke r3.<android.media.MediaMuxer: int addTrack(android.media.MediaFormat)>(r5);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        virtualinvoke r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r19);

        $z6 = virtualinvoke r5.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("max-input-size");

        if $z6 == 0 goto label06;

        i6 = virtualinvoke r5.<android.media.MediaFormat: int getInteger(java.lang.String)>("max-input-size");

        if i6 <= i3 goto label04;

        $i21 = i6;

        goto label05;

     label04:
        $i21 = i3;

     label05:
        i3 = $i21;

     label06:
        i4 = i4 + 1;

        goto label01;

     label07:
        if i3 >= 0 goto label08;

        i3 = 1048576;

     label08:
        $r11 = new android.media.MediaMetadataRetriever;

        specialinvoke $r11.<android.media.MediaMetadataRetriever: void <init>()>();

        r22 = $r11;

        virtualinvoke r22.<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String)>(r0);

        r23 = virtualinvoke r22.<android.media.MediaMetadataRetriever: java.lang.String extractMetadata(int)>(24);

        if r23 == null goto label09;

        i22 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r23);

        if i22 < 0 goto label09;

        virtualinvoke r3.<android.media.MediaMuxer: void setOrientationHint(int)>(i22);

     label09:
        if i0 <= 0 goto label10;

        $i16 = i0 * 1000;

        $l19 = (long) $i16;

        virtualinvoke r2.<android.media.MediaExtractor: void seekTo(long,int)>($l19, 2);

     label10:
        b23 = 0;

        r24 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i3);

        $r13 = new android.media.MediaCodec$BufferInfo;

        specialinvoke $r13.<android.media.MediaCodec$BufferInfo: void <init>()>();

        r25 = $r13;

     label11:
        virtualinvoke r3.<android.media.MediaMuxer: void start()>();

     label12:
        r25.<android.media.MediaCodec$BufferInfo: int offset> = b23;

        $i7 = virtualinvoke r2.<android.media.MediaExtractor: int readSampleData(java.nio.ByteBuffer,int)>(r24, b23);

        r25.<android.media.MediaCodec$BufferInfo: int size> = $i7;

        $i9 = r25.<android.media.MediaCodec$BufferInfo: int size>;

        if $i9 >= 0 goto label13;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("VideoUtils", "Saw input EOS.");

        r25.<android.media.MediaCodec$BufferInfo: int size> = 0;

        goto label15;

     label13:
        $l8 = virtualinvoke r2.<android.media.MediaExtractor: long getSampleTime()>();

        r25.<android.media.MediaCodec$BufferInfo: long presentationTimeUs> = $l8;

        if i1 <= 0 goto label14;

        $l13 = r25.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $i14 = i1 * 1000;

        $l12 = (long) $i14;

        $b17 = $l13 cmp $l12;

        if $b17 <= 0 goto label14;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("VideoUtils", "The current sample is over the trim end time.");

        goto label15;

     label14:
        $i10 = virtualinvoke r2.<android.media.MediaExtractor: int getSampleFlags()>();

        r25.<android.media.MediaCodec$BufferInfo: int flags> = $i10;

        i25 = virtualinvoke r2.<android.media.MediaExtractor: int getSampleTrackIndex()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25);

        $r16 = virtualinvoke r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r15);

        $r14 = (java.lang.Integer) $r16;

        $i11 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        virtualinvoke r3.<android.media.MediaMuxer: void writeSampleData(int,java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)>($i11, r24, r25);

        virtualinvoke r2.<android.media.MediaExtractor: boolean advance()>();

        goto label12;

     label15:
        virtualinvoke r3.<android.media.MediaMuxer: void stop()>();

     label16:
        virtualinvoke r3.<android.media.MediaMuxer: void release()>();

        goto label21;

     label17:
        $r21 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("VideoUtils", "The source video file is malformed");

     label18:
        virtualinvoke r3.<android.media.MediaMuxer: void release()>();

        goto label21;

     label19:
        $r20 := @caughtexception;

        r9 = $r20;

     label20:
        virtualinvoke r3.<android.media.MediaMuxer: void release()>();

        throw r9;

     label21:
        return;

        catch java.lang.IllegalStateException from label11 to label16 with label17;
        catch java.lang.Throwable from label11 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    private static void trimUsingMp4Parser(java.io.File, java.io.File, int, int) throws java.io.FileNotFoundException, java.io.IOException
    {
        java.io.File r0, r1;
        int i0, i1, i5, i6, $i7, $i8, $i9, $i17;
        java.io.RandomAccessFile r2, $r8;
        com.googlecode.mp4parser.authoring.Movie r3;
        java.util.List r4, $r13, $r14;
        double d0, d1, d2, $d3, $d4, $d5;
        boolean z0, $z1, $z2;
        java.util.Iterator r5, r21;
        com.googlecode.mp4parser.authoring.Track r6, r22;
        long l2, l3, l4, $l10, $l11, $l13, $l16;
        com.coremedia.iso.boxes.TimeToSampleBox$Entry r7;
        java.nio.channels.FileChannel $r9;
        java.util.LinkedList $r10;
        com.googlecode.mp4parser.authoring.tracks.CroppedTrack $r11;
        java.lang.Object $r12, $r15, $r19;
        byte $b12, $b14, $b15;
        com.googlecode.mp4parser.authoring.TrackMetaData $r16;
        long[] $r17, $r18;
        java.lang.RuntimeException $r20;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r8 = new java.io.RandomAccessFile;

        specialinvoke $r8.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r0, "r");

        r2 = $r8;

        $r9 = virtualinvoke r2.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        r3 = staticinvoke <com.googlecode.mp4parser.authoring.container.mp4.MovieCreator: com.googlecode.mp4parser.authoring.Movie build(java.nio.channels.ReadableByteChannel)>($r9);

        r4 = virtualinvoke r3.<com.googlecode.mp4parser.authoring.Movie: java.util.List getTracks()>();

        $r10 = new java.util.LinkedList;

        specialinvoke $r10.<java.util.LinkedList: void <init>()>();

        virtualinvoke r3.<com.googlecode.mp4parser.authoring.Movie: void setTracks(java.util.List)>($r10);

        $i8 = i0 / 1000;

        d0 = (double) $i8;

        $i7 = i1 / 1000;

        d1 = (double) $i7;

        z0 = 0;

        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label04;

        $r19 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.googlecode.mp4parser.authoring.Track) $r19;

        $r18 = interfaceinvoke r6.<com.googlecode.mp4parser.authoring.Track: long[] getSyncSamples()>();

        if $r18 == null goto label03;

        $r17 = interfaceinvoke r6.<com.googlecode.mp4parser.authoring.Track: long[] getSyncSamples()>();

        $i17 = lengthof $r17;

        if $i17 <= 0 goto label03;

        if z0 == 0 goto label02;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>("The startTime has already been corrected by another track with SyncSample. Not Supported.");

        throw $r20;

     label02:
        d0 = staticinvoke <com.android.gallery3d.app.VideoUtils: double correctTimeToSyncSample(com.googlecode.mp4parser.authoring.Track,double,boolean)>(r6, d0, 0);

        d1 = staticinvoke <com.android.gallery3d.app.VideoUtils: double correctTimeToSyncSample(com.googlecode.mp4parser.authoring.Track,double,boolean)>(r6, d1, 1);

        z0 = 1;

     label03:
        goto label01;

     label04:
        r21 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r12 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (com.googlecode.mp4parser.authoring.Track) $r12;

        l2 = 0L;

        d2 = 0.0;

        l3 = -1L;

        l4 = -1L;

        i5 = 0;

     label06:
        $r13 = interfaceinvoke r22.<com.googlecode.mp4parser.authoring.Track: java.util.List getDecodingTimeEntries()>();

        $i9 = interfaceinvoke $r13.<java.util.List: int size()>();

        if i5 >= $i9 goto label10;

        $r14 = interfaceinvoke r22.<com.googlecode.mp4parser.authoring.Track: java.util.List getDecodingTimeEntries()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i5);

        r7 = (com.coremedia.iso.boxes.TimeToSampleBox$Entry) $r15;

        i6 = 0;

     label07:
        $l10 = (long) i6;

        $l11 = virtualinvoke r7.<com.coremedia.iso.boxes.TimeToSampleBox$Entry: long getCount()>();

        $b14 = $l10 cmp $l11;

        if $b14 >= 0 goto label09;

        $b15 = d2 cmpg d0;

        if $b15 > 0 goto label08;

        l3 = l2;

     label08:
        $b12 = d2 cmpg d1;

        if $b12 > 0 goto label09;

        l4 = l2;

        $l13 = virtualinvoke r7.<com.coremedia.iso.boxes.TimeToSampleBox$Entry: long getDelta()>();

        $d4 = (double) $l13;

        $r16 = interfaceinvoke r22.<com.googlecode.mp4parser.authoring.Track: com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()>();

        $l16 = virtualinvoke $r16.<com.googlecode.mp4parser.authoring.TrackMetaData: long getTimescale()>();

        $d3 = (double) $l16;

        $d5 = $d4 / $d3;

        d2 = d2 + $d5;

        l2 = l2 + 1L;

        i6 = i6 + 1;

        goto label07;

     label09:
        i5 = i5 + 1;

        goto label06;

     label10:
        $r11 = new com.googlecode.mp4parser.authoring.tracks.CroppedTrack;

        specialinvoke $r11.<com.googlecode.mp4parser.authoring.tracks.CroppedTrack: void <init>(com.googlecode.mp4parser.authoring.Track,long,long)>(r22, l3, l4);

        virtualinvoke r3.<com.googlecode.mp4parser.authoring.Movie: void addTrack(com.googlecode.mp4parser.authoring.Track)>($r11);

        goto label05;

     label11:
        staticinvoke <com.android.gallery3d.app.VideoUtils: void writeMovieIntoFile(java.io.File,com.googlecode.mp4parser.authoring.Movie)>(r1, r3);

        virtualinvoke r2.<java.io.RandomAccessFile: void close()>();

        return;
    }

    private static double correctTimeToSyncSample(com.googlecode.mp4parser.authoring.Track, double, boolean)
    {
        com.googlecode.mp4parser.authoring.Track r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, d7;
        boolean z0;
        double[] r1, r10;
        long l0, $l10, $l11, $l14, $l15, $l16, $l17;
        int i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i13, $i18;
        com.coremedia.iso.boxes.TimeToSampleBox$Entry r2;
        long[] $r3, $r7, $r9;
        java.util.List $r4, $r6;
        byte $b9, $b12;
        java.lang.Object $r5;
        com.googlecode.mp4parser.authoring.TrackMetaData $r8;

        r0 := @parameter0: com.googlecode.mp4parser.authoring.Track;

        d0 := @parameter1: double;

        z0 := @parameter2: boolean;

        $r3 = interfaceinvoke r0.<com.googlecode.mp4parser.authoring.Track: long[] getSyncSamples()>();

        $i5 = lengthof $r3;

        r1 = newarray (double)[$i5];

        l0 = 0L;

        d1 = 0.0;

        i1 = 0;

     label1:
        $r4 = interfaceinvoke r0.<com.googlecode.mp4parser.authoring.Track: java.util.List getDecodingTimeEntries()>();

        $i6 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i1 >= $i6 goto label5;

        $r6 = interfaceinvoke r0.<com.googlecode.mp4parser.authoring.Track: java.util.List getDecodingTimeEntries()>();

        $r5 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (com.coremedia.iso.boxes.TimeToSampleBox$Entry) $r5;

        i2 = 0;

     label2:
        $l11 = (long) i2;

        $l10 = virtualinvoke r2.<com.coremedia.iso.boxes.TimeToSampleBox$Entry: long getCount()>();

        $b12 = $l11 cmp $l10;

        if $b12 >= 0 goto label4;

        $r7 = interfaceinvoke r0.<com.googlecode.mp4parser.authoring.Track: long[] getSyncSamples()>();

        $l14 = l0 + 1L;

        $i13 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>($r7, $l14);

        if $i13 < 0 goto label3;

        $r9 = interfaceinvoke r0.<com.googlecode.mp4parser.authoring.Track: long[] getSyncSamples()>();

        $l17 = l0 + 1L;

        $i18 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>($r9, $l17);

        r1[$i18] = d1;

     label3:
        $l16 = virtualinvoke r2.<com.coremedia.iso.boxes.TimeToSampleBox$Entry: long getDelta()>();

        $d4 = (double) $l16;

        $r8 = interfaceinvoke r0.<com.googlecode.mp4parser.authoring.Track: com.googlecode.mp4parser.authoring.TrackMetaData getTrackMetaData()>();

        $l15 = virtualinvoke $r8.<com.googlecode.mp4parser.authoring.TrackMetaData: long getTimescale()>();

        $d5 = (double) $l15;

        $d6 = $d4 / $d5;

        d1 = d1 + $d6;

        l0 = l0 + 1L;

        i2 = i2 + 1;

        goto label2;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        d7 = 0.0;

        r10 = r1;

        i3 = lengthof r10;

        i4 = 0;

     label6:
        if i4 >= i3 goto label9;

        d2 = r10[i4];

        $b9 = d2 cmpl d0;

        if $b9 <= 0 goto label8;

        if z0 == 0 goto label7;

        return d2;

     label7:
        return d7;

     label8:
        d7 = d2;

        i4 = i4 + 1;

        goto label6;

     label9:
        $i8 = lengthof r1;

        $i7 = $i8 - 1;

        $d3 = r1[$i7];

        return $d3;
    }

    public static void <clinit>()
    {
        <com.android.gallery3d.app.VideoUtils: int DEFAULT_BUFFER_SIZE> = 1048576;

        <com.android.gallery3d.app.VideoUtils: java.lang.String LOGTAG> = "VideoUtils";

        return;
    }
}
