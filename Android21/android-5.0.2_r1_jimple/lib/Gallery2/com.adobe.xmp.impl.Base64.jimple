public class com.adobe.xmp.impl.Base64 extends java.lang.Object
{
    private static final byte INVALID;
    private static final byte WHITESPACE;
    private static final byte EQUAL;
    private static byte[] base64;
    private static byte[] ascii;

    public void <init>()
    {
        com.adobe.xmp.impl.Base64 r0;

        r0 := @this: com.adobe.xmp.impl.Base64;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final byte[] encode(byte[])
    {
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <com.adobe.xmp.impl.Base64: byte[] encode(byte[],int)>(r0, 0);

        return $r1;
    }

    public static final byte[] encode(byte[], int)
    {
        byte[] r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i20, $i27, $i28, $i29, $i31, $i33, $i41, $i42, $i43, $i45, $i47, $i48, $i49, $i50, $i51, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i74, i75, i76, i77, i78, i79;
        byte $b16, $b21, $b22, $b23, $b24, $b30, $b32, $b34, $b35, $b37, $b40, $b44, $b46, $b52, $b53;
        short $s19, $s25, $s26, $s36, $s38, $s39;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i7 = i0 / 4;

        i54 = $i7 * 4;

        if i54 >= 0 goto label1;

        i54 = 0;

     label1:
        $i8 = lengthof r0;

        $i9 = $i8 + 2;

        $i10 = $i9 / 3;

        i1 = $i10 * 4;

        if i54 <= 0 goto label2;

        $i50 = i1 - 1;

        $i51 = $i50 / i54;

        i1 = i1 + $i51;

     label2:
        r1 = newarray (byte)[i1];

        i4 = 0;

        i5 = 0;

        i6 = 0;

     label3:
        $i12 = i5 + 3;

        $i11 = lengthof r0;

        if $i12 > $i11 goto label4;

        i55 = i5 + 1;

        $b34 = r0[i5];

        $s38 = $b34 & 255;

        i2 = $s38 << 16;

        i56 = i55 + 1;

        $b37 = r0[i55];

        $s36 = $b37 & 255;

        $i41 = $s36 << 8;

        i57 = i2 | $i41;

        i5 = i56 + 1;

        $b40 = r0[i56];

        $s39 = $b40 & 255;

        $i43 = $s39 << 0;

        i58 = i57 | $i43;

        $i42 = i58 & 16515072;

        i3 = $i42 >> 18;

        i59 = i4 + 1;

        $r7 = <com.adobe.xmp.impl.Base64: byte[] base64>;

        $b46 = $r7[i3];

        r1[i4] = $b46;

        $i47 = i58 & 258048;

        i60 = $i47 >> 12;

        i61 = i59 + 1;

        $r9 = <com.adobe.xmp.impl.Base64: byte[] base64>;

        $b44 = $r9[i60];

        r1[i59] = $b44;

        $i45 = i58 & 4032;

        i62 = $i45 >> 6;

        i63 = i61 + 1;

        $r8 = <com.adobe.xmp.impl.Base64: byte[] base64>;

        $b52 = $r8[i62];

        r1[i61] = $b52;

        i64 = i58 & 63;

        i4 = i63 + 1;

        $r10 = <com.adobe.xmp.impl.Base64: byte[] base64>;

        $b53 = $r10[i64];

        r1[i63] = $b53;

        i6 = i6 + 4;

        if i4 >= i1 goto label3;

        if i54 <= 0 goto label3;

        $i48 = i6 % i54;

        if $i48 != 0 goto label3;

        $i49 = i4;

        i4 = i4 + 1;

        r1[$i49] = 10;

        goto label3;

     label4:
        $i13 = lengthof r0;

        $i15 = $i13 - i5;

        if $i15 != 2 goto label5;

        $b23 = r0[i5];

        $s26 = $b23 & 255;

        i65 = $s26 << 16;

        $i27 = i5 + 1;

        $b24 = r0[$i27];

        $s25 = $b24 & 255;

        $i28 = $s25 << 8;

        i66 = i65 | $i28;

        $i29 = i66 & 16515072;

        i67 = $i29 >> 18;

        i68 = i4 + 1;

        $r4 = <com.adobe.xmp.impl.Base64: byte[] base64>;

        $b30 = $r4[i67];

        r1[i4] = $b30;

        $i31 = i66 & 258048;

        i69 = $i31 >> 12;

        i70 = i68 + 1;

        $r5 = <com.adobe.xmp.impl.Base64: byte[] base64>;

        $b32 = $r5[i69];

        r1[i68] = $b32;

        $i33 = i66 & 4032;

        i71 = $i33 >> 6;

        i72 = i70 + 1;

        $r6 = <com.adobe.xmp.impl.Base64: byte[] base64>;

        $b35 = $r6[i71];

        r1[i70] = $b35;

        r1[i72] = 61;

        goto label6;

     label5:
        $i14 = lengthof r0;

        $i17 = $i14 - i5;

        if $i17 != 1 goto label6;

        $b16 = r0[i5];

        $s19 = $b16 & 255;

        i74 = $s19 << 16;

        $i18 = i74 & 16515072;

        i75 = $i18 >> 18;

        i76 = i4 + 1;

        $r2 = <com.adobe.xmp.impl.Base64: byte[] base64>;

        $b21 = $r2[i75];

        r1[i4] = $b21;

        $i20 = i74 & 258048;

        i77 = $i20 >> 12;

        i78 = i76 + 1;

        $r3 = <com.adobe.xmp.impl.Base64: byte[] base64>;

        $b22 = $r3[i77];

        r1[i76] = $b22;

        i79 = i78 + 1;

        r1[i78] = 61;

        r1[i79] = 61;

     label6:
        return r1;
    }

    public static final java.lang.String encode(java.lang.String)
    {
        java.lang.String r0, $r1;
        byte[] $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <com.adobe.xmp.impl.Base64: byte[] encode(byte[])>($r2);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r3);

        return $r1;
    }

    public static final byte[] decode(byte[]) throws java.lang.IllegalArgumentException
    {
        byte[] r0, $r1, r3;
        int i0, i1, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i17, $i20, $i21, $i24, $i27, $i28, $i33, $i34, $i35, $i38, $i39, $i40, $i41, $i44, $i47, $i48, $i50, $i52, $i53, $i56, $i57, $i61, $i62, $i63, i64, i65;
        byte b2, $b12, $b15, $b16, $b18, $b19, $b22, $b23, $b25, $b26, $b29, $b30, $b31, $b32, $b36, $b37, $b42, $b43, $b45, $b46, $b49, $b51, $b54, $b55, $b58, $b59, $b60;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: byte[];

        i1 = 0;

        i0 = 0;

     label1:
        $i4 = lengthof r0;

        if i0 >= $i4 goto label4;

        $r1 = <com.adobe.xmp.impl.Base64: byte[] ascii>;

        $b59 = r0[i0];

        b2 = $r1[$b59];

        if b2 < 0 goto label2;

        $i63 = i1;

        i1 = i1 + 1;

        r0[$i63] = b2;

        goto label3;

     label2:
        if b2 != -1 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid base 64 string");

        throw $r2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        if i1 <= 0 goto label5;

        $i61 = i1 - 1;

        $b60 = r0[$i61];

        if $b60 != -3 goto label5;

        i1 = i1 + -1;

        goto label4;

     label5:
        $i5 = i1 * 3;

        $i6 = $i5 / 4;

        r3 = newarray (byte)[$i6];

        i64 = 0;

        i3 = 0;

     label6:
        $i7 = lengthof r3;

        $i8 = $i7 - 2;

        if i3 >= $i8 goto label7;

        $b29 = r0[i64];

        $i33 = $b29 << 2;

        $i38 = $i33 & 255;

        $i34 = i64 + 1;

        $b31 = r0[$i34];

        $b32 = $b31 >>> 4;

        $b37 = $b32 & 3;

        $i35 = $i38 | $b37;

        $b36 = (byte) $i35;

        r3[i3] = $b36;

        $i48 = i3 + 1;

        $i41 = i64 + 1;

        $b42 = r0[$i41];

        $i39 = $b42 << 4;

        $i44 = $i39 & 255;

        $i40 = i64 + 2;

        $b45 = r0[$i40];

        $b46 = $b45 >>> 2;

        $b43 = $b46 & 15;

        $i50 = $i44 | $b43;

        $b49 = (byte) $i50;

        r3[$i48] = $b49;

        $i62 = i3 + 2;

        $i47 = i64 + 2;

        $b54 = r0[$i47];

        $i53 = $b54 << 6;

        $i57 = $i53 & 255;

        $i52 = i64 + 3;

        $b51 = r0[$i52];

        $b58 = $b51 & 63;

        $i56 = $i57 | $b58;

        $b55 = (byte) $i56;

        r3[$i62] = $b55;

        i64 = i64 + 4;

        i3 = i3 + 3;

        goto label6;

     label7:
        $i9 = lengthof r3;

        if i3 >= $i9 goto label8;

        $b22 = r0[i64];

        $i21 = $b22 << 2;

        $i28 = $i21 & 255;

        $i24 = i64 + 1;

        $b23 = r0[$i24];

        $b26 = $b23 >>> 4;

        $b25 = $b26 & 3;

        $i27 = $i28 | $b25;

        $b30 = (byte) $i27;

        r3[i3] = $b30;

     label8:
        i65 = i3 + 1;

        $i10 = lengthof r3;

        if i65 >= $i10 goto label9;

        $i11 = i64 + 1;

        $b12 = r0[$i11];

        $i13 = $b12 << 4;

        $i17 = $i13 & 255;

        $i14 = i64 + 2;

        $b16 = r0[$i14];

        $b15 = $b16 >>> 2;

        $b18 = $b15 & 15;

        $i20 = $i17 | $b18;

        $b19 = (byte) $i20;

        r3[i65] = $b19;

     label9:
        return r3;
    }

    public static final java.lang.String decode(java.lang.String)
    {
        java.lang.String r0, $r1;
        byte[] $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <com.adobe.xmp.impl.Base64: byte[] decode(byte[])>($r2);

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>($r3);

        return $r1;
    }

    static void <clinit>()
    {
        int i0, $i1, i4;
        byte[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        byte $b2, $b3;

        <com.adobe.xmp.impl.Base64: byte EQUAL> = -3;

        <com.adobe.xmp.impl.Base64: byte WHITESPACE> = -2;

        <com.adobe.xmp.impl.Base64: byte INVALID> = -1;

        $r0 = newarray (byte)[64];

        $r0[0] = 65;

        $r0[1] = 66;

        $r0[2] = 67;

        $r0[3] = 68;

        $r0[4] = 69;

        $r0[5] = 70;

        $r0[6] = 71;

        $r0[7] = 72;

        $r0[8] = 73;

        $r0[9] = 74;

        $r0[10] = 75;

        $r0[11] = 76;

        $r0[12] = 77;

        $r0[13] = 78;

        $r0[14] = 79;

        $r0[15] = 80;

        $r0[16] = 81;

        $r0[17] = 82;

        $r0[18] = 83;

        $r0[19] = 84;

        $r0[20] = 85;

        $r0[21] = 86;

        $r0[22] = 87;

        $r0[23] = 88;

        $r0[24] = 89;

        $r0[25] = 90;

        $r0[26] = 97;

        $r0[27] = 98;

        $r0[28] = 99;

        $r0[29] = 100;

        $r0[30] = 101;

        $r0[31] = 102;

        $r0[32] = 103;

        $r0[33] = 104;

        $r0[34] = 105;

        $r0[35] = 106;

        $r0[36] = 107;

        $r0[37] = 108;

        $r0[38] = 109;

        $r0[39] = 110;

        $r0[40] = 111;

        $r0[41] = 112;

        $r0[42] = 113;

        $r0[43] = 114;

        $r0[44] = 115;

        $r0[45] = 116;

        $r0[46] = 117;

        $r0[47] = 118;

        $r0[48] = 119;

        $r0[49] = 120;

        $r0[50] = 121;

        $r0[51] = 122;

        $r0[52] = 48;

        $r0[53] = 49;

        $r0[54] = 50;

        $r0[55] = 51;

        $r0[56] = 52;

        $r0[57] = 53;

        $r0[58] = 54;

        $r0[59] = 55;

        $r0[60] = 56;

        $r0[61] = 57;

        $r0[62] = 43;

        $r0[63] = 47;

        <com.adobe.xmp.impl.Base64: byte[] base64> = $r0;

        $r1 = newarray (byte)[255];

        <com.adobe.xmp.impl.Base64: byte[] ascii> = $r1;

        i0 = 0;

     label1:
        if i0 >= 255 goto label2;

        $r10 = <com.adobe.xmp.impl.Base64: byte[] ascii>;

        $r10[i0] = -1;

        i0 = i0 + 1;

        goto label1;

     label2:
        i4 = 0;

     label3:
        $r2 = <com.adobe.xmp.impl.Base64: byte[] base64>;

        $i1 = lengthof $r2;

        if i4 >= $i1 goto label4;

        $r9 = <com.adobe.xmp.impl.Base64: byte[] ascii>;

        $r8 = <com.adobe.xmp.impl.Base64: byte[] base64>;

        $b3 = $r8[i4];

        $b2 = (byte) i4;

        $r9[$b3] = $b2;

        i4 = i4 + 1;

        goto label3;

     label4:
        $r3 = <com.adobe.xmp.impl.Base64: byte[] ascii>;

        $r3[9] = -2;

        $r4 = <com.adobe.xmp.impl.Base64: byte[] ascii>;

        $r4[10] = -2;

        $r5 = <com.adobe.xmp.impl.Base64: byte[] ascii>;

        $r5[13] = -2;

        $r6 = <com.adobe.xmp.impl.Base64: byte[] ascii>;

        $r6[32] = -2;

        $r7 = <com.adobe.xmp.impl.Base64: byte[] ascii>;

        $r7[61] = -3;

        return;
    }
}
