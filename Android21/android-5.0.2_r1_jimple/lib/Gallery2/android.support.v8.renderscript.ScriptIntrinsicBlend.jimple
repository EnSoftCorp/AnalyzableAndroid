public class android.support.v8.renderscript.ScriptIntrinsicBlend extends android.support.v8.renderscript.ScriptIntrinsic
{

    void <init>(int, android.support.v8.renderscript.RenderScript)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        int i0;
        android.support.v8.renderscript.RenderScript r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        i0 := @parameter0: int;

        r1 := @parameter1: android.support.v8.renderscript.RenderScript;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsic: void <init>(int,android.support.v8.renderscript.RenderScript)>(i0, r1);

        return;
    }

    public static android.support.v8.renderscript.ScriptIntrinsicBlend create(android.support.v8.renderscript.RenderScript, android.support.v8.renderscript.Element)
    {
        android.support.v8.renderscript.RenderScript r0;
        android.support.v8.renderscript.Element r1;
        android.support.v8.renderscript.RenderScriptThunker r2;
        boolean $z0;
        int $i0, i1;
        android.support.v8.renderscript.ScriptIntrinsicBlend $r3;
        android.support.v8.renderscript.ScriptIntrinsicBlendThunker $r4;

        r0 := @parameter0: android.support.v8.renderscript.RenderScript;

        r1 := @parameter1: android.support.v8.renderscript.Element;

        $z0 = <android.support.v8.renderscript.RenderScript: boolean isNative>;

        if $z0 == 0 goto label1;

        r2 = (android.support.v8.renderscript.RenderScriptThunker) r0;

        $r4 = staticinvoke <android.support.v8.renderscript.ScriptIntrinsicBlendThunker: android.support.v8.renderscript.ScriptIntrinsicBlendThunker create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element)>(r0, r1);

        return $r4;

     label1:
        $i0 = virtualinvoke r1.<android.support.v8.renderscript.Element: int getID(android.support.v8.renderscript.RenderScript)>(r0);

        i1 = virtualinvoke r0.<android.support.v8.renderscript.RenderScript: int nScriptIntrinsicCreate(int,int)>(7, $i0);

        $r3 = new android.support.v8.renderscript.ScriptIntrinsicBlend;

        specialinvoke $r3.<android.support.v8.renderscript.ScriptIntrinsicBlend: void <init>(int,android.support.v8.renderscript.RenderScript)>(i1, r0);

        return $r3;
    }

    private void blend(int, android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        int i0;
        android.support.v8.renderscript.Allocation r1, r2;
        android.support.v8.renderscript.Element $r3, $r5, $r6, $r8;
        android.support.v8.renderscript.RenderScript $r4, $r7;
        boolean $z0, $z1;
        android.support.v8.renderscript.RSIllegalArgumentException $r9, $r10;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        i0 := @parameter0: int;

        r1 := @parameter1: android.support.v8.renderscript.Allocation;

        r2 := @parameter2: android.support.v8.renderscript.Allocation;

        $r3 = virtualinvoke r1.<android.support.v8.renderscript.Allocation: android.support.v8.renderscript.Element getElement()>();

        $r4 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.support.v8.renderscript.Element: android.support.v8.renderscript.Element U8_4(android.support.v8.renderscript.RenderScript)>($r4);

        $z0 = virtualinvoke $r3.<android.support.v8.renderscript.Element: boolean isCompatible(android.support.v8.renderscript.Element)>($r5);

        if $z0 != 0 goto label1;

        $r10 = new android.support.v8.renderscript.RSIllegalArgumentException;

        specialinvoke $r10.<android.support.v8.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Input is not of expected format.");

        throw $r10;

     label1:
        $r6 = virtualinvoke r2.<android.support.v8.renderscript.Allocation: android.support.v8.renderscript.Element getElement()>();

        $r7 = r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.RenderScript mRS>;

        $r8 = staticinvoke <android.support.v8.renderscript.Element: android.support.v8.renderscript.Element U8_4(android.support.v8.renderscript.RenderScript)>($r7);

        $z1 = virtualinvoke $r6.<android.support.v8.renderscript.Element: boolean isCompatible(android.support.v8.renderscript.Element)>($r8);

        if $z1 != 0 goto label2;

        $r9 = new android.support.v8.renderscript.RSIllegalArgumentException;

        specialinvoke $r9.<android.support.v8.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Output is not of expected format.");

        throw $r9;

     label2:
        virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void forEach(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.FieldPacker)>(i0, r1, r2, null);

        return;
    }

    public void forEachClear(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation)>(0, r1, r2);

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDClear()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(0, 3, null, null);

        return $r1;
    }

    public void forEachSrc(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation)>(1, r1, r2);

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDSrc()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(1, 3, null, null);

        return $r1;
    }

    public void forEachDst(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDDst()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(2, 3, null, null);

        return $r1;
    }

    public void forEachSrcOver(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation)>(3, r1, r2);

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDSrcOver()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(3, 3, null, null);

        return $r1;
    }

    public void forEachDstOver(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation)>(4, r1, r2);

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDDstOver()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(4, 3, null, null);

        return $r1;
    }

    public void forEachSrcIn(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation)>(5, r1, r2);

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDSrcIn()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(5, 3, null, null);

        return $r1;
    }

    public void forEachDstIn(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation)>(6, r1, r2);

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDDstIn()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(6, 3, null, null);

        return $r1;
    }

    public void forEachSrcOut(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation)>(7, r1, r2);

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDSrcOut()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(7, 3, null, null);

        return $r1;
    }

    public void forEachDstOut(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation)>(8, r1, r2);

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDDstOut()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(8, 3, null, null);

        return $r1;
    }

    public void forEachSrcAtop(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation)>(9, r1, r2);

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDSrcAtop()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(9, 3, null, null);

        return $r1;
    }

    public void forEachDstAtop(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation)>(10, r1, r2);

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDDstAtop()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(10, 3, null, null);

        return $r1;
    }

    public void forEachXor(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation)>(11, r1, r2);

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDXor()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(11, 3, null, null);

        return $r1;
    }

    public void forEachMultiply(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation)>(14, r1, r2);

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDMultiply()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(14, 3, null, null);

        return $r1;
    }

    public void forEachAdd(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation)>(34, r1, r2);

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDAdd()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(34, 3, null, null);

        return $r1;
    }

    public void forEachSubtract(android.support.v8.renderscript.Allocation, android.support.v8.renderscript.Allocation)
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Allocation r1, r2;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        r1 := @parameter0: android.support.v8.renderscript.Allocation;

        r2 := @parameter1: android.support.v8.renderscript.Allocation;

        specialinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: void blend(int,android.support.v8.renderscript.Allocation,android.support.v8.renderscript.Allocation)>(35, r1, r2);

        return;
    }

    public android.support.v8.renderscript.Script$KernelID getKernelIDSubtract()
    {
        android.support.v8.renderscript.ScriptIntrinsicBlend r0;
        android.support.v8.renderscript.Script$KernelID $r1;

        r0 := @this: android.support.v8.renderscript.ScriptIntrinsicBlend;

        $r1 = virtualinvoke r0.<android.support.v8.renderscript.ScriptIntrinsicBlend: android.support.v8.renderscript.Script$KernelID createKernelID(int,int,android.support.v8.renderscript.Element,android.support.v8.renderscript.Element)>(35, 3, null, null);

        return $r1;
    }
}
