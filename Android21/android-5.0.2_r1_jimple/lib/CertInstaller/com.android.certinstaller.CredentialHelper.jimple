class com.android.certinstaller.CredentialHelper extends java.lang.Object
{
    private static final java.lang.String DATA_KEY;
    private static final java.lang.String CERTS_KEY;
    private static final java.lang.String TAG;
    private java.util.HashMap mBundle;
    private java.lang.String mName;
    private int mUid;
    private java.security.PrivateKey mUserKey;
    private java.security.cert.X509Certificate mUserCert;
    private java.util.List mCaCerts;

    void <init>()
    {
        com.android.certinstaller.CredentialHelper r0;
        java.util.HashMap $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.android.certinstaller.CredentialHelper: java.util.HashMap mBundle> = $r1;

        r0.<com.android.certinstaller.CredentialHelper: java.lang.String mName> = "";

        r0.<com.android.certinstaller.CredentialHelper: int mUid> = -1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.certinstaller.CredentialHelper: java.util.List mCaCerts> = $r2;

        return;
    }

    void <init>(android.content.Intent)
    {
        com.android.certinstaller.CredentialHelper r0;
        android.content.Intent r1;
        android.os.Bundle r2;
        java.lang.String r3, r5, $r11, $r24;
        java.util.Iterator r4;
        byte[] r6, $r15;
        java.util.HashMap $r7, $r22;
        java.util.ArrayList $r8;
        int $i0, $i1, $i3;
        java.lang.StringBuilder $r9, $r10, $r12, $r16, $r17, $r19, $r20, $r21;
        java.util.Set $r13;
        boolean $z0;
        java.lang.Object $r14;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<com.android.certinstaller.CredentialHelper: java.util.HashMap mBundle> = $r7;

        r0.<com.android.certinstaller.CredentialHelper: java.lang.String mName> = "";

        r0.<com.android.certinstaller.CredentialHelper: int mUid> = -1;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<com.android.certinstaller.CredentialHelper: java.util.List mCaCerts> = $r8;

        r2 = virtualinvoke r1.<android.content.Intent: android.os.Bundle getExtras()>();

        if r2 != null goto label1;

        return;

     label1:
        r3 = virtualinvoke r2.<android.os.Bundle: java.lang.String getString(java.lang.String)>("name");

        virtualinvoke r2.<android.os.Bundle: void remove(java.lang.String)>("name");

        if r3 == null goto label2;

        r0.<com.android.certinstaller.CredentialHelper: java.lang.String mName> = r3;

     label2:
        $i0 = virtualinvoke r2.<android.os.Bundle: int getInt(java.lang.String,int)>("install_as_uid", -1);

        r0.<com.android.certinstaller.CredentialHelper: int mUid> = $i0;

        virtualinvoke r2.<android.os.Bundle: void remove(java.lang.String)>("install_as_uid");

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("# extras: ");

        $i1 = virtualinvoke r2.<android.os.Bundle: int size()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CredentialHelper", $r11);

        $r13 = virtualinvoke r2.<android.os.Bundle: java.util.Set keySet()>();

        r4 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r14;

        r6 = virtualinvoke r2.<android.os.Bundle: byte[] getByteArray(java.lang.String)>(r5);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        if r6 != null goto label4;

        $i3 = -1;

        goto label5;

     label4:
        $i3 = lengthof r6;

     label5:
        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CredentialHelper", $r24);

        $r22 = r0.<com.android.certinstaller.CredentialHelper: java.util.HashMap mBundle>;

        virtualinvoke $r22.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

        goto label3;

     label6:
        $r15 = virtualinvoke r0.<com.android.certinstaller.CredentialHelper: byte[] getData(java.lang.String)>("CERT");

        specialinvoke r0.<com.android.certinstaller.CredentialHelper: void parseCert(byte[])>($r15);

        return;
    }

    synchronized void onSaveStates(android.os.Bundle)
    {
        com.android.certinstaller.CredentialHelper r0;
        android.os.Bundle r1;
        java.util.ArrayList r2, $r8;
        java.util.Iterator r3;
        java.security.cert.X509Certificate r4, $r10, $r15;
        java.util.HashMap $r5;
        java.lang.String $r6;
        java.security.PrivateKey $r7, $r17;
        java.util.List $r9, $r11;
        int $i0, $i1;
        boolean $z0;
        byte[] $r12, $r13, $r16, $r19;
        java.lang.Object $r14;
        java.security.cert.CertificateEncodingException $r18, r21;
        java.lang.AssertionError $r20;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        r1 := @parameter0: android.os.Bundle;

     label1:
        $r5 = r0.<com.android.certinstaller.CredentialHelper: java.util.HashMap mBundle>;

        virtualinvoke r1.<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>("data", $r5);

        $r6 = r0.<com.android.certinstaller.CredentialHelper: java.lang.String mName>;

        virtualinvoke r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("name", $r6);

        $r7 = r0.<com.android.certinstaller.CredentialHelper: java.security.PrivateKey mUserKey>;

        if $r7 == null goto label2;

        $r17 = r0.<com.android.certinstaller.CredentialHelper: java.security.PrivateKey mUserKey>;

        $r19 = interfaceinvoke $r17.<java.security.PrivateKey: byte[] getEncoded()>();

        virtualinvoke r1.<android.os.Bundle: void putByteArray(java.lang.String,byte[])>("USRPKEY_", $r19);

     label2:
        $r8 = new java.util.ArrayList;

        $r9 = r0.<com.android.certinstaller.CredentialHelper: java.util.List mCaCerts>;

        $i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        $i1 = $i0 + 1;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i1);

        r2 = $r8;

        $r10 = r0.<com.android.certinstaller.CredentialHelper: java.security.cert.X509Certificate mUserCert>;

        if $r10 == null goto label3;

        $r15 = r0.<com.android.certinstaller.CredentialHelper: java.security.cert.X509Certificate mUserCert>;

        $r16 = virtualinvoke $r15.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

     label3:
        $r11 = r0.<com.android.certinstaller.CredentialHelper: java.util.List mCaCerts>;

        r3 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r14 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.security.cert.X509Certificate) $r14;

        $r13 = virtualinvoke r4.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        goto label4;

     label5:
        $r12 = staticinvoke <com.android.certinstaller.Util: byte[] toBytes(java.lang.Object)>(r2);

        virtualinvoke r1.<android.os.Bundle: void putByteArray(java.lang.String,byte[])>("crts", $r12);

     label6:
        goto label8;

     label7:
        $r18 := @caughtexception;

        r21 = $r18;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>(r21);

        throw $r20;

     label8:
        return;

        catch java.security.cert.CertificateEncodingException from label1 to label6 with label7;
    }

    void onRestoreStates(android.os.Bundle)
    {
        com.android.certinstaller.CredentialHelper r0;
        android.os.Bundle r1;
        byte[] r2, r5, $r9;
        java.util.ArrayList r3;
        java.util.Iterator r4;
        java.io.Serializable $r6;
        java.util.HashMap $r7;
        java.lang.String $r8;
        java.lang.Object $r10, $r11;
        boolean $z0;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        r1 := @parameter0: android.os.Bundle;

        $r6 = virtualinvoke r1.<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>("data");

        $r7 = (java.util.HashMap) $r6;

        r0.<com.android.certinstaller.CredentialHelper: java.util.HashMap mBundle> = $r7;

        $r8 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("name");

        r0.<com.android.certinstaller.CredentialHelper: java.lang.String mName> = $r8;

        r2 = virtualinvoke r1.<android.os.Bundle: byte[] getByteArray(java.lang.String)>("USRPKEY_");

        if r2 == null goto label1;

        virtualinvoke r0.<com.android.certinstaller.CredentialHelper: void setPrivateKey(byte[])>(r2);

     label1:
        $r9 = virtualinvoke r1.<android.os.Bundle: byte[] getByteArray(java.lang.String)>("crts");

        $r10 = staticinvoke <com.android.certinstaller.Util: java.lang.Object fromBytes(byte[])>($r9);

        r3 = (java.util.ArrayList) $r10;

        r4 = virtualinvoke r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (byte[]) $r11;

        specialinvoke r0.<com.android.certinstaller.CredentialHelper: void parseCert(byte[])>(r5);

        goto label2;

     label3:
        return;
    }

    java.security.cert.X509Certificate getUserCertificate()
    {
        com.android.certinstaller.CredentialHelper r0;
        java.security.cert.X509Certificate $r1;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        $r1 = r0.<com.android.certinstaller.CredentialHelper: java.security.cert.X509Certificate mUserCert>;

        return $r1;
    }

    private void parseCert(byte[])
    {
        com.android.certinstaller.CredentialHelper r0;
        byte[] r1;
        java.security.cert.CertificateFactory r2;
        java.security.cert.X509Certificate r3;
        java.io.ByteArrayInputStream $r4;
        java.security.cert.Certificate $r5;
        boolean $z0;
        java.util.List $r6;
        java.security.cert.CertificateException $r7, r12;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r10;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        r1 := @parameter0: byte[];

        if r1 != null goto label1;

        return;

     label1:
        r2 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r5 = virtualinvoke r2.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r4);

        r3 = (java.security.cert.X509Certificate) $r5;

        $z0 = specialinvoke r0.<com.android.certinstaller.CredentialHelper: boolean isCa(java.security.cert.X509Certificate)>(r3);

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CredentialHelper", "got a CA cert");

        $r6 = r0.<com.android.certinstaller.CredentialHelper: java.util.List mCaCerts>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label3;

     label2:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CredentialHelper", "got a user cert");

        r0.<com.android.certinstaller.CredentialHelper: java.security.cert.X509Certificate mUserCert> = r3;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r12 = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parseCert(): ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CredentialHelper", $r10);

     label5:
        return;

        catch java.security.cert.CertificateException from label1 to label3 with label4;
    }

    private boolean isCa(java.security.cert.X509Certificate)
    {
        com.android.certinstaller.CredentialHelper r0;
        java.security.cert.X509Certificate r1;
        byte[] r2, r4;
        com.android.org.bouncycastle.asn1.DEROctetString r3;
        com.android.org.bouncycastle.asn1.ASN1Sequence r5;
        com.android.org.bouncycastle.asn1.ASN1InputStream $r6, $r8;
        com.android.org.bouncycastle.asn1.ASN1Primitive $r7, $r9;
        com.android.org.bouncycastle.asn1.x509.BasicConstraints $r10;
        boolean $z0;
        java.io.IOException $r11;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        r1 := @parameter0: java.security.cert.X509Certificate;

     label1:
        r2 = virtualinvoke r1.<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>("2.5.29.19");

        if r2 != null goto label3;

     label2:
        return 0;

     label3:
        $r6 = new com.android.org.bouncycastle.asn1.ASN1InputStream;

        specialinvoke $r6.<com.android.org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>(r2);

        $r7 = virtualinvoke $r6.<com.android.org.bouncycastle.asn1.ASN1InputStream: com.android.org.bouncycastle.asn1.ASN1Primitive readObject()>();

        r3 = (com.android.org.bouncycastle.asn1.DEROctetString) $r7;

        r4 = virtualinvoke r3.<com.android.org.bouncycastle.asn1.DEROctetString: byte[] getOctets()>();

        $r8 = new com.android.org.bouncycastle.asn1.ASN1InputStream;

        specialinvoke $r8.<com.android.org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>(r4);

        $r9 = virtualinvoke $r8.<com.android.org.bouncycastle.asn1.ASN1InputStream: com.android.org.bouncycastle.asn1.ASN1Primitive readObject()>();

        r5 = (com.android.org.bouncycastle.asn1.ASN1Sequence) $r9;

        $r10 = staticinvoke <com.android.org.bouncycastle.asn1.x509.BasicConstraints: com.android.org.bouncycastle.asn1.x509.BasicConstraints getInstance(java.lang.Object)>(r5);

        $z0 = virtualinvoke $r10.<com.android.org.bouncycastle.asn1.x509.BasicConstraints: boolean isCA()>();

     label4:
        return $z0;

     label5:
        $r11 := @caughtexception;

        return 0;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    boolean hasPkcs12KeyStore()
    {
        com.android.certinstaller.CredentialHelper r0;
        java.util.HashMap $r1;
        boolean $z0;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        $r1 = r0.<com.android.certinstaller.CredentialHelper: java.util.HashMap mBundle>;

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>("PKCS12");

        return $z0;
    }

    boolean hasKeyPair()
    {
        com.android.certinstaller.CredentialHelper r0;
        java.util.HashMap $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        $r1 = r0.<com.android.certinstaller.CredentialHelper: java.util.HashMap mBundle>;

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>("KEY");

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.certinstaller.CredentialHelper: java.util.HashMap mBundle>;

        $z1 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>("PKEY");

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    boolean hasUserCertificate()
    {
        com.android.certinstaller.CredentialHelper r0;
        java.security.cert.X509Certificate $r1;
        boolean $z0;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        $r1 = r0.<com.android.certinstaller.CredentialHelper: java.security.cert.X509Certificate mUserCert>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean hasCaCerts()
    {
        com.android.certinstaller.CredentialHelper r0;
        java.util.List $r1;
        boolean $z0, $z1;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        $r1 = r0.<com.android.certinstaller.CredentialHelper: java.util.List mCaCerts>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    boolean hasAnyForSystemInstall()
    {
        com.android.certinstaller.CredentialHelper r0;
        java.security.PrivateKey $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        $r1 = r0.<com.android.certinstaller.CredentialHelper: java.security.PrivateKey mUserKey>;

        if $r1 != null goto label1;

        $z0 = virtualinvoke r0.<com.android.certinstaller.CredentialHelper: boolean hasUserCertificate()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.certinstaller.CredentialHelper: boolean hasCaCerts()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    void setPrivateKey(byte[])
    {
        com.android.certinstaller.CredentialHelper r0;
        byte[] r1;
        java.security.KeyFactory r2;
        java.security.spec.PKCS8EncodedKeySpec $r3;
        java.security.PrivateKey $r4;
        java.security.NoSuchAlgorithmException $r5, r9;
        java.lang.AssertionError $r6, $r8;
        java.security.spec.InvalidKeySpecException $r7, r10;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        r1 := @parameter0: byte[];

     label1:
        r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r3 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke $r3.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r1);

        $r4 = virtualinvoke r2.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r3);

        r0.<com.android.certinstaller.CredentialHelper: java.security.PrivateKey mUserKey> = $r4;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r9 = $r5;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>(r9);

        throw $r6;

     label4:
        $r7 := @caughtexception;

        r10 = $r7;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(r10);

        throw $r8;

     label5:
        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label4;
    }

    boolean containsAnyRawData()
    {
        com.android.certinstaller.CredentialHelper r0;
        java.util.HashMap $r1;
        boolean $z0, $z1;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        $r1 = r0.<com.android.certinstaller.CredentialHelper: java.util.HashMap mBundle>;

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    byte[] getData(java.lang.String)
    {
        com.android.certinstaller.CredentialHelper r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        byte[] $r4;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.certinstaller.CredentialHelper: java.util.HashMap mBundle>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (byte[]) $r3;

        return $r4;
    }

    void putPkcs12Data(byte[])
    {
        com.android.certinstaller.CredentialHelper r0;
        byte[] r1;
        java.util.HashMap $r2;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        r1 := @parameter0: byte[];

        $r2 = r0.<com.android.certinstaller.CredentialHelper: java.util.HashMap mBundle>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("PKCS12", r1);

        return;
    }

    java.lang.CharSequence getDescription(android.content.Context)
    {
        com.android.certinstaller.CredentialHelper r0;
        android.content.Context r1;
        java.lang.StringBuilder r2, $r4, $r16, $r21;
        java.lang.String r3, $r8, $r13, $r15, $r17, $r18;
        int i0;
        java.security.PrivateKey $r5;
        java.security.cert.X509Certificate $r6;
        java.util.List $r7;
        android.text.Spanned $r9;
        java.lang.Object[] $r10;
        java.lang.Integer $r11;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        r1 := @parameter0: android.content.Context;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r2 = $r4;

        r3 = "<br>";

        $r5 = r0.<com.android.certinstaller.CredentialHelper: java.security.PrivateKey mUserKey>;

        if $r5 == null goto label1;

        $r18 = virtualinvoke r1.<android.content.Context: java.lang.String getString(int)>(2131099658);

        $r21 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

     label1:
        $r6 = r0.<com.android.certinstaller.CredentialHelper: java.security.cert.X509Certificate mUserCert>;

        if $r6 == null goto label2;

        $r17 = virtualinvoke r1.<android.content.Context: java.lang.String getString(int)>(2131099659);

        $r16 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

     label2:
        $r7 = r0.<com.android.certinstaller.CredentialHelper: java.util.List mCaCerts>;

        i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i0 <= 0 goto label4;

        if i0 != 1 goto label3;

        $r15 = virtualinvoke r1.<android.content.Context: java.lang.String getString(int)>(2131099660);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        goto label4;

     label3:
        $r10 = newarray (java.lang.Object)[1];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10[0] = $r11;

        $r13 = virtualinvoke r1.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(2131099661, $r10);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

     label4:
        $r8 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <android.text.Html: android.text.Spanned fromHtml(java.lang.String)>($r8);

        return $r9;
    }

    void setName(java.lang.String)
    {
        com.android.certinstaller.CredentialHelper r0;
        java.lang.String r1;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        r1 := @parameter0: java.lang.String;

        r0.<com.android.certinstaller.CredentialHelper: java.lang.String mName> = r1;

        return;
    }

    java.lang.String getName()
    {
        com.android.certinstaller.CredentialHelper r0;
        java.lang.String $r1;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        $r1 = r0.<com.android.certinstaller.CredentialHelper: java.lang.String mName>;

        return $r1;
    }

    void setInstallAsUid(int)
    {
        com.android.certinstaller.CredentialHelper r0;
        int i0;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        i0 := @parameter0: int;

        r0.<com.android.certinstaller.CredentialHelper: int mUid> = i0;

        return;
    }

    boolean isInstallAsUidSet()
    {
        com.android.certinstaller.CredentialHelper r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        $i0 = r0.<com.android.certinstaller.CredentialHelper: int mUid>;

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    android.content.Intent createSystemInstallIntent()
    {
        com.android.certinstaller.CredentialHelper r0;
        android.content.Intent r1, $r3;
        java.security.cert.X509Certificate[] r2, $r17;
        int $i0, $i1;
        java.security.PrivateKey $r6, $r38;
        java.security.cert.X509Certificate $r7, $r26;
        java.util.List $r8, $r15, $r16;
        boolean $z0;
        java.lang.StringBuilder $r9, $r10, $r12, $r21, $r23, $r25, $r29, $r32, $r34;
        java.lang.String $r11, $r14, $r22, $r24, $r33, $r35;
        java.lang.Object[] $r18;
        byte[] $r20, $r30, $r36;
        java.security.cert.Certificate[] $r28;
        java.io.IOException $r39, r44;
        java.lang.AssertionError $r40, $r43;
        java.security.cert.CertificateEncodingException $r41, r45;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("com.android.credentials.INSTALL");

        r1 = $r3;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.settings", "com.android.settings.CredentialStorage");

        $i0 = r0.<com.android.certinstaller.CredentialHelper: int mUid>;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("install_as_uid", $i0);

     label1:
        $r6 = r0.<com.android.certinstaller.CredentialHelper: java.security.PrivateKey mUserKey>;

        if $r6 == null goto label2;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r35 = r0.<com.android.certinstaller.CredentialHelper: java.lang.String mName>;

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("user_private_key_name", $r33);

        $r38 = r0.<com.android.certinstaller.CredentialHelper: java.security.PrivateKey mUserKey>;

        $r36 = interfaceinvoke $r38.<java.security.PrivateKey: byte[] getEncoded()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])>("user_private_key_data", $r36);

     label2:
        $r7 = r0.<com.android.certinstaller.CredentialHelper: java.security.cert.X509Certificate mUserCert>;

        if $r7 == null goto label3;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        $r22 = r0.<com.android.certinstaller.CredentialHelper: java.lang.String mName>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("user_certificate_name", $r24);

        $r28 = newarray (java.security.cert.Certificate)[1];

        $r26 = r0.<com.android.certinstaller.CredentialHelper: java.security.cert.X509Certificate mUserCert>;

        $r28[0] = $r26;

        $r30 = staticinvoke <android.security.Credentials: byte[] convertToPem(java.security.cert.Certificate[])>($r28);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])>("user_certificate_data", $r30);

     label3:
        $r8 = r0.<com.android.certinstaller.CredentialHelper: java.util.List mCaCerts>;

        $z0 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        $r11 = r0.<com.android.certinstaller.CredentialHelper: java.lang.String mName>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("ca_certificates_name", $r14);

        $r15 = r0.<com.android.certinstaller.CredentialHelper: java.util.List mCaCerts>;

        $r16 = r0.<com.android.certinstaller.CredentialHelper: java.util.List mCaCerts>;

        $i1 = interfaceinvoke $r16.<java.util.List: int size()>();

        $r17 = newarray (java.security.cert.X509Certificate)[$i1];

        $r18 = interfaceinvoke $r15.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r17);

        r2 = (java.security.cert.X509Certificate[]) $r18;

        $r20 = staticinvoke <android.security.Credentials: byte[] convertToPem(java.security.cert.Certificate[])>(r2);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])>("ca_certificates_data", $r20);

     label4:
        return r1;

     label5:
        $r39 := @caughtexception;

        r44 = $r39;

        $r43 = new java.lang.AssertionError;

        specialinvoke $r43.<java.lang.AssertionError: void <init>(java.lang.Object)>(r44);

        throw $r43;

     label6:
        $r41 := @caughtexception;

        r45 = $r41;

        $r40 = new java.lang.AssertionError;

        specialinvoke $r40.<java.lang.AssertionError: void <init>(java.lang.Object)>(r45);

        throw $r40;

        catch java.io.IOException from label1 to label4 with label5;
        catch java.security.cert.CertificateEncodingException from label1 to label4 with label6;
    }

    boolean installCaCertsToKeyChain(android.security.IKeyChainService)
    {
        com.android.certinstaller.CredentialHelper r0;
        android.security.IKeyChainService r1;
        java.util.Iterator r2;
        java.security.cert.X509Certificate r3;
        java.security.cert.CertificateEncodingException r4, $r13;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;
        android.os.RemoteException $r7, r15;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;
        java.lang.AssertionError $r12;
        byte[] r14;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        r1 := @parameter0: android.security.IKeyChainService;

        $r5 = r0.<com.android.certinstaller.CredentialHelper: java.util.List mCaCerts>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.security.cert.X509Certificate) $r6;

     label02:
        r14 = virtualinvoke r3.<java.security.cert.X509Certificate: byte[] getEncoded()>();

     label03:
        goto label05;

     label04:
        $r13 := @caughtexception;

        r4 = $r13;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>(r4);

        throw $r12;

     label05:
        if r14 == null goto label09;

     label06:
        interfaceinvoke r1.<android.security.IKeyChainService: void installCaCertificate(byte[])>(r14);

     label07:
        goto label09;

     label08:
        $r7 := @caughtexception;

        r15 = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("installCaCertsToKeyChain(): ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CredentialHelper", $r11);

        return 0;

     label09:
        goto label01;

     label10:
        return 1;

        catch java.security.cert.CertificateEncodingException from label02 to label03 with label04;
        catch android.os.RemoteException from label06 to label07 with label08;
    }

    boolean extractPkcs12(java.lang.String)
    {
        com.android.certinstaller.CredentialHelper r0;
        java.lang.String r1, $r7;
        java.lang.Exception r2, $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        r1 := @parameter0: java.lang.String;

     label1:
        $z0 = specialinvoke r0.<com.android.certinstaller.CredentialHelper: boolean extractPkcs12Internal(java.lang.String)>(r1);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("extractPkcs12(): ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("CredentialHelper", $r7, r2);

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private boolean extractPkcs12Internal(java.lang.String) throws java.lang.Exception
    {
        com.android.certinstaller.CredentialHelper r0;
        java.lang.String r1, r5, $r18, $r20;
        java.security.KeyStore r2;
        java.security.KeyStore$PasswordProtection r3, $r7;
        java.util.Enumeration r4;
        java.security.KeyStore$Entry r6;
        char[] $r8, $r11;
        java.io.ByteArrayInputStream $r9;
        byte[] $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r17, $r19;
        java.lang.Class $r16;
        java.security.KeyStore$PrivateKeyEntry $r21;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("PKCS12");

        $r7 = new java.security.KeyStore$PasswordProtection;

        $r8 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r7.<java.security.KeyStore$PasswordProtection: void <init>(char[])>($r8);

        r3 = $r7;

        $r9 = new java.io.ByteArrayInputStream;

        $r10 = virtualinvoke r0.<com.android.certinstaller.CredentialHelper: byte[] getData(java.lang.String)>("PKCS12");

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r10);

        $r11 = virtualinvoke r3.<java.security.KeyStore$PasswordProtection: char[] getPassword()>();

        virtualinvoke r2.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r9, $r11);

        r4 = virtualinvoke r2.<java.security.KeyStore: java.util.Enumeration aliases()>();

        $z0 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label4;

        $r12 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.lang.String) $r12;

        r6 = virtualinvoke r2.<java.security.KeyStore: java.security.KeyStore$Entry getEntry(java.lang.String,java.security.KeyStore$ProtectionParameter)>(r5, r3);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("extracted alias = ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", entry=");

        $r16 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CredentialHelper", $r18);

        $z2 = r6 instanceof java.security.KeyStore$PrivateKeyEntry;

        if $z2 == 0 goto label3;

        $r20 = r0.<com.android.certinstaller.CredentialHelper: java.lang.String mName>;

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r20);

        if $z3 == 0 goto label2;

        r0.<com.android.certinstaller.CredentialHelper: java.lang.String mName> = r5;

     label2:
        $r21 = (java.security.KeyStore$PrivateKeyEntry) r6;

        $z4 = specialinvoke r0.<com.android.certinstaller.CredentialHelper: boolean installFrom(java.security.KeyStore$PrivateKeyEntry)>($r21);

        return $z4;

     label3:
        goto label1;

     label4:
        return 1;
    }

    private synchronized boolean installFrom(java.security.KeyStore$PrivateKeyEntry)
    {
        com.android.certinstaller.CredentialHelper r0;
        java.security.KeyStore$PrivateKeyEntry r1;
        java.security.cert.Certificate[] r2, r3;
        int i0, i1, $i2, $i4, $i5;
        java.security.cert.Certificate r4, $r7;
        java.security.cert.X509Certificate r5, $r8;
        java.security.PrivateKey $r6;
        java.lang.StringBuilder $r9, $r10, $r12, $r14, $r15, $r18;
        java.lang.String $r11, $r17;
        java.util.ArrayList $r13;
        java.util.List $r16, $r19;
        boolean $z0;

        r0 := @this: com.android.certinstaller.CredentialHelper;

        r1 := @parameter0: java.security.KeyStore$PrivateKeyEntry;

        $r6 = virtualinvoke r1.<java.security.KeyStore$PrivateKeyEntry: java.security.PrivateKey getPrivateKey()>();

        r0.<com.android.certinstaller.CredentialHelper: java.security.PrivateKey mUserKey> = $r6;

        $r7 = virtualinvoke r1.<java.security.KeyStore$PrivateKeyEntry: java.security.cert.Certificate getCertificate()>();

        $r8 = (java.security.cert.X509Certificate) $r7;

        r0.<com.android.certinstaller.CredentialHelper: java.security.cert.X509Certificate mUserCert> = $r8;

        r2 = virtualinvoke r1.<java.security.KeyStore$PrivateKeyEntry: java.security.cert.Certificate[] getCertificateChain()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("# certs extracted = ");

        $i2 = lengthof r2;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CredentialHelper", $r11);

        $r13 = new java.util.ArrayList;

        $i4 = lengthof r2;

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>($i4);

        r0.<com.android.certinstaller.CredentialHelper: java.util.List mCaCerts> = $r13;

        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r3[i1];

        r5 = (java.security.cert.X509Certificate) r4;

        $z0 = specialinvoke r0.<com.android.certinstaller.CredentialHelper: boolean isCa(java.security.cert.X509Certificate)>(r5);

        if $z0 == 0 goto label2;

        $r19 = r0.<com.android.certinstaller.CredentialHelper: java.util.List mCaCerts>;

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>(r5);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("# ca certs extracted = ");

        $r16 = r0.<com.android.certinstaller.CredentialHelper: java.util.List mCaCerts>;

        $i5 = interfaceinvoke $r16.<java.util.List: int size()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CredentialHelper", $r17);

        return 1;
    }

    public static void <clinit>()
    {
        <com.android.certinstaller.CredentialHelper: java.lang.String TAG> = "CredentialHelper";

        <com.android.certinstaller.CredentialHelper: java.lang.String CERTS_KEY> = "crts";

        <com.android.certinstaller.CredentialHelper: java.lang.String DATA_KEY> = "data";

        return;
    }
}
