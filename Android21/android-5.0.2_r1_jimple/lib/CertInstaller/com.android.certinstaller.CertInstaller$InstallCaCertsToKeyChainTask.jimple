class com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask extends android.os.AsyncTask
{
    final com.android.certinstaller.CertInstaller this$0;

    private void <init>(com.android.certinstaller.CertInstaller)
    {
        com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask r0;
        com.android.certinstaller.CertInstaller r1;

        r0 := @this: com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask;

        r1 := @parameter0: com.android.certinstaller.CertInstaller;

        r0.<com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask: com.android.certinstaller.CertInstaller this$0> = r1;

        specialinvoke r0.<android.os.AsyncTask: void <init>()>();

        return;
    }

    protected transient java.lang.Boolean doInBackground(java.lang.Void[])
    {
        com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask r0;
        java.lang.Void[] r1;
        android.security.KeyChain$KeyChainConnection r2;
        java.lang.Boolean r3, $r12;
        java.lang.Throwable r4, $r9;
        com.android.certinstaller.CertInstaller $r5, $r6;
        com.android.certinstaller.CredentialHelper $r7;
        android.security.IKeyChainService $r8;
        boolean $z0;
        java.lang.InterruptedException $r10;
        java.lang.Thread $r11;

        r0 := @this: com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask;

        r1 := @parameter0: java.lang.Void[];

     label1:
        $r5 = r0.<com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask: com.android.certinstaller.CertInstaller this$0>;

        r2 = staticinvoke <android.security.KeyChain: android.security.KeyChain$KeyChainConnection bind(android.content.Context)>($r5);

     label2:
        $r6 = r0.<com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask: com.android.certinstaller.CertInstaller this$0>;

        $r7 = staticinvoke <com.android.certinstaller.CertInstaller: com.android.certinstaller.CredentialHelper access$200(com.android.certinstaller.CertInstaller)>($r6);

        $r8 = virtualinvoke r2.<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()>();

        $z0 = virtualinvoke $r7.<com.android.certinstaller.CredentialHelper: boolean installCaCertsToKeyChain(android.security.IKeyChainService)>($r8);

        r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

     label3:
        virtualinvoke r2.<android.security.KeyChain$KeyChainConnection: void close()>();

     label4:
        return r3;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

     label6:
        virtualinvoke r2.<android.security.KeyChain$KeyChainConnection: void close()>();

        throw r4;

     label7:
        $r10 := @caughtexception;

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r11.<java.lang.Thread: void interrupt()>();

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r12;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
        catch java.lang.InterruptedException from label1 to label4 with label7;
        catch java.lang.InterruptedException from label5 to label7 with label7;
    }

    protected void onPostExecute(java.lang.Boolean)
    {
        com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask r0;
        java.lang.Boolean r1;
        boolean $z0;
        com.android.certinstaller.CertInstaller $r2, $r3;

        r0 := @this: com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask;

        r1 := @parameter0: java.lang.Boolean;

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask: com.android.certinstaller.CertInstaller this$0>;

        virtualinvoke $r3.<com.android.certinstaller.CertInstaller: void setResult(int)>(-1);

     label1:
        $r2 = r0.<com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask: com.android.certinstaller.CertInstaller this$0>;

        virtualinvoke $r2.<com.android.certinstaller.CertInstaller: void finish()>();

        return;
    }

    protected volatile void onPostExecute(java.lang.Object)
    {
        com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask r0;
        java.lang.Object r1;
        java.lang.Boolean $r2;

        r0 := @this: com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Boolean) r1;

        virtualinvoke r0.<com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask: void onPostExecute(java.lang.Boolean)>($r2);

        return;
    }

    protected volatile java.lang.Object doInBackground(java.lang.Object[])
    {
        com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask r0;
        java.lang.Object[] r1;
        java.lang.Void[] $r2;
        java.lang.Boolean $r3;

        r0 := @this: com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask;

        r1 := @parameter0: java.lang.Object[];

        $r2 = (java.lang.Void[]) r1;

        $r3 = virtualinvoke r0.<com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask: java.lang.Boolean doInBackground(java.lang.Void[])>($r2);

        return $r3;
    }

    void <init>(com.android.certinstaller.CertInstaller, com.android.certinstaller.CertInstaller$1)
    {
        com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask r0;
        com.android.certinstaller.CertInstaller r1;
        com.android.certinstaller.CertInstaller$1 r2;

        r0 := @this: com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask;

        r1 := @parameter0: com.android.certinstaller.CertInstaller;

        r2 := @parameter1: com.android.certinstaller.CertInstaller$1;

        specialinvoke r0.<com.android.certinstaller.CertInstaller$InstallCaCertsToKeyChainTask: void <init>(com.android.certinstaller.CertInstaller)>(r1);

        return;
    }
}
