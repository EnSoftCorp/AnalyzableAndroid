class com.android.keychain.KeyChainService$1 extends android.security.IKeyChainService$Stub
{
    private final android.security.KeyStore mKeyStore;
    private final com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore;
    final com.android.keychain.KeyChainService this$0;

    void <init>(com.android.keychain.KeyChainService)
    {
        com.android.keychain.KeyChainService$1 r0;
        com.android.keychain.KeyChainService r1;
        android.security.KeyStore $r2;
        com.android.org.conscrypt.TrustedCertificateStore $r3;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 := @parameter0: com.android.keychain.KeyChainService;

        r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0> = r1;

        specialinvoke r0.<android.security.IKeyChainService$Stub: void <init>()>();

        $r2 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        r0.<com.android.keychain.KeyChainService$1: android.security.KeyStore mKeyStore> = $r2;

        $r3 = new com.android.org.conscrypt.TrustedCertificateStore;

        specialinvoke $r3.<com.android.org.conscrypt.TrustedCertificateStore: void <init>()>();

        r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore> = $r3;

        return;
    }

    public java.lang.String requestPrivateKey(java.lang.String)
    {
        com.android.keychain.KeyChainService$1 r0;
        java.lang.String r1, r2, $r12;
        int i0, i1, i2;
        java.lang.StringBuilder r3, $r4, $r5, $r6, $r9;
        android.security.KeyStore $r7;
        boolean $z0;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.keychain.KeyChainService$1: void checkArgs(java.lang.String)>(r1);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r7 = r0.<com.android.keychain.KeyChainService$1: android.security.KeyStore mKeyStore>;

        $z0 = virtualinvoke $r7.<android.security.KeyStore: boolean grant(java.lang.String,int)>(r2, i0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        i2 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i1, 1000);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r3 = $r9;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public byte[] getCertificate(java.lang.String)
    {
        com.android.keychain.KeyChainService$1 r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2, $r4, $r5;
        android.security.KeyStore $r3;
        byte[] $r7;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.keychain.KeyChainService$1: void checkArgs(java.lang.String)>(r1);

        $r3 = r0.<com.android.keychain.KeyChainService$1: android.security.KeyStore mKeyStore>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r3.<android.security.KeyStore: byte[] get(java.lang.String)>($r6);

        return $r7;
    }

    private void checkArgs(java.lang.String)
    {
        com.android.keychain.KeyChainService$1 r0;
        java.lang.String r1, $r13, $r19, $r21;
        int i0;
        android.security.KeyStore $r2, $r17;
        boolean $z0, $z1;
        com.android.keychain.KeyChainService $r3, $r5;
        com.android.keychain.KeyChainService$DatabaseHelper $r4;
        android.database.sqlite.SQLiteDatabase $r6;
        java.lang.IllegalStateException $r7, $r12;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r14, $r15, $r18;
        android.security.KeyStore$State $r16;
        java.lang.NullPointerException $r20;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("alias == null");

        throw $r20;

     label1:
        $r2 = r0.<com.android.keychain.KeyChainService$1: android.security.KeyStore mKeyStore>;

        $z0 = virtualinvoke $r2.<android.security.KeyStore: boolean isUnlocked()>();

        if $z0 != 0 goto label2;

        $r12 = new java.lang.IllegalStateException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("keystore is ");

        $r17 = r0.<com.android.keychain.KeyChainService$1: android.security.KeyStore mKeyStore>;

        $r16 = virtualinvoke $r17.<android.security.KeyStore: android.security.KeyStore$State state()>();

        $r19 = virtualinvoke $r16.<android.security.KeyStore$State: java.lang.String toString()>();

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw $r12;

     label2:
        i0 = staticinvoke <com.android.keychain.KeyChainService$1: int getCallingUid()>();

        $r5 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        $r3 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        $r4 = $r3.<com.android.keychain.KeyChainService: com.android.keychain.KeyChainService$DatabaseHelper mDatabaseHelper>;

        $r6 = virtualinvoke $r4.<com.android.keychain.KeyChainService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $z1 = staticinvoke <com.android.keychain.KeyChainService: boolean access$000(com.android.keychain.KeyChainService,android.database.sqlite.SQLiteDatabase,int,java.lang.String)>($r5, $r6, i0, r1);

        if $z1 != 0 goto label3;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t have permission to access the requested alias");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label3:
        return;
    }

    public void installCaCertificate(byte[])
    {
        com.android.keychain.KeyChainService$1 r0;
        byte[] r1;
        com.android.org.conscrypt.TrustedCertificateStore r2, $r4, $r5;
        java.lang.Throwable r3, $r12;
        java.security.cert.X509Certificate $r6;
        com.android.keychain.KeyChainService $r7;
        java.io.IOException $r8, r13;
        java.lang.IllegalStateException $r9, $r11;
        java.security.cert.CertificateException $r10, r14;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 := @parameter0: byte[];

        specialinvoke r0.<com.android.keychain.KeyChainService$1: void checkCertInstallerOrSystemCaller()>();

        specialinvoke r0.<com.android.keychain.KeyChainService$1: void checkUserRestriction()>();

     label1:
        $r4 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        $r6 = specialinvoke r0.<com.android.keychain.KeyChainService$1: java.security.cert.X509Certificate parseCertificate(byte[])>(r1);

        virtualinvoke $r5.<com.android.org.conscrypt.TrustedCertificateStore: void installCertificate(java.security.cert.X509Certificate)>($r6);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        goto label9;

     label7:
        $r8 := @caughtexception;

        r13 = $r8;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r13);

        throw $r9;

     label8:
        $r10 := @caughtexception;

        r14 = $r10;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r14);

        throw $r11;

     label9:
        $r7 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        staticinvoke <com.android.keychain.KeyChainService: void access$100(com.android.keychain.KeyChainService)>($r7);

        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.io.IOException from label1 to label6 with label7;
        catch java.security.cert.CertificateException from label1 to label6 with label8;
    }

    public boolean installKeyPair(byte[], byte[], java.lang.String)
    {
        com.android.keychain.KeyChainService$1 r0;
        byte[] r1, r2;
        java.lang.String r3, $r8, $r13, $r17, $r22, $r25;
        java.lang.StringBuilder $r4, $r6, $r7, $r9, $r11, $r12, $r14, $r16, $r18, $r19, $r20, $r23, $r24, $r26, $r27;
        android.security.KeyStore $r5, $r10, $r21;
        boolean $z0, $z1, $z2;
        com.android.keychain.KeyChainService $r15;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.keychain.KeyChainService$1: void checkCertInstallerOrSystemCaller()>();

        $r5 = r0.<com.android.keychain.KeyChainService$1: android.security.KeyStore mKeyStore>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r5.<android.security.KeyStore: boolean importKey(java.lang.String,byte[],int,int)>($r8, r1, -1, 1);

        if $z0 != 0 goto label1;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to import private key ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("KeyChain", $r25);

        return 0;

     label1:
        $r10 = r0.<com.android.keychain.KeyChainService$1: android.security.KeyStore mKeyStore>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke $r10.<android.security.KeyStore: boolean put(java.lang.String,byte[],int,int)>($r13, r2, -1, 1);

        if $z1 != 0 goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to import user certificate ");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("KeyChain", $r17);

        $r21 = r0.<com.android.keychain.KeyChainService$1: android.security.KeyStore mKeyStore>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = virtualinvoke $r21.<android.security.KeyStore: boolean delKey(java.lang.String)>($r22);

        if $z2 != 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("KeyChain", "Failed to delete private key after certificate importing failed");

     label2:
        return 0;

     label3:
        $r15 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        staticinvoke <com.android.keychain.KeyChainService: void access$100(com.android.keychain.KeyChainService)>($r15);

        return 1;
    }

    private java.security.cert.X509Certificate parseCertificate(byte[]) throws java.security.cert.CertificateException
    {
        com.android.keychain.KeyChainService$1 r0;
        byte[] r1;
        java.security.cert.CertificateFactory r2;
        java.io.ByteArrayInputStream $r3;
        java.security.cert.Certificate $r4;
        java.security.cert.X509Certificate $r5;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 := @parameter0: byte[];

        r2 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r4 = virtualinvoke r2.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r3);

        $r5 = (java.security.cert.X509Certificate) $r4;

        return $r5;
    }

    public boolean reset()
    {
        com.android.keychain.KeyChainService$1 r0;
        boolean z0, $z1, $z2, $z3;
        com.android.org.conscrypt.TrustedCertificateStore r1, $r9, $r10;
        java.util.Iterator r2;
        java.lang.String r3;
        java.lang.Throwable r4, $r14;
        com.android.keychain.KeyChainService $r5, $r7, $r13;
        com.android.keychain.KeyChainService$DatabaseHelper $r6;
        android.database.sqlite.SQLiteDatabase $r8;
        java.util.Set $r11;
        java.lang.Object $r12;

        r0 := @this: com.android.keychain.KeyChainService$1;

        specialinvoke r0.<com.android.keychain.KeyChainService$1: void checkSystemCaller()>();

        specialinvoke r0.<com.android.keychain.KeyChainService$1: void checkUserRestriction()>();

        $r7 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        $r5 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        $r6 = $r5.<com.android.keychain.KeyChainService: com.android.keychain.KeyChainService$DatabaseHelper mDatabaseHelper>;

        $r8 = virtualinvoke $r6.<com.android.keychain.KeyChainService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        staticinvoke <com.android.keychain.KeyChainService: void access$200(com.android.keychain.KeyChainService,android.database.sqlite.SQLiteDatabase)>($r7, $r8);

        z0 = 1;

        $r9 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        r1 = $r9;

        entermonitor $r9;

     label1:
        $r10 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        $r11 = virtualinvoke $r10.<com.android.org.conscrypt.TrustedCertificateStore: java.util.Set aliases()>();

        r2 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r12;

        $z3 = staticinvoke <com.android.org.conscrypt.TrustedCertificateStore: boolean isUser(java.lang.String)>(r3);

        if $z3 == 0 goto label3;

        $z2 = specialinvoke r0.<com.android.keychain.KeyChainService$1: boolean deleteCertificateEntry(java.lang.String)>(r3);

        if $z2 != 0 goto label3;

        z0 = 0;

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r1;

     label7:
        throw r4;

     label8:
        $r13 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        staticinvoke <com.android.keychain.KeyChainService: void access$100(com.android.keychain.KeyChainService)>($r13);

        return z0;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean deleteCaCertificate(java.lang.String)
    {
        com.android.keychain.KeyChainService$1 r0;
        java.lang.String r1;
        com.android.org.conscrypt.TrustedCertificateStore r2, $r4;
        java.lang.Throwable r3, $r6;
        com.android.keychain.KeyChainService $r5;
        boolean z1;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.keychain.KeyChainService$1: void checkSystemCaller()>();

        specialinvoke r0.<com.android.keychain.KeyChainService$1: void checkUserRestriction()>();

        $r4 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        z1 = specialinvoke r0.<com.android.keychain.KeyChainService$1: boolean deleteCertificateEntry(java.lang.String)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        $r5 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        staticinvoke <com.android.keychain.KeyChainService: void access$100(com.android.keychain.KeyChainService)>($r5);

        return z1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean deleteCertificateEntry(java.lang.String)
    {
        com.android.keychain.KeyChainService$1 r0;
        java.lang.String r1, $r8, $r13;
        java.io.IOException r2, $r9;
        com.android.org.conscrypt.TrustedCertificateStore $r3;
        java.security.cert.CertificateException $r4, r14;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        virtualinvoke $r3.<com.android.org.conscrypt.TrustedCertificateStore: void deleteCertificateEntry(java.lang.String)>(r1);

     label2:
        return 1;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem removing CA certificate ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("KeyChain", $r13, r2);

        return 0;

     label4:
        $r4 := @caughtexception;

        r14 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem removing CA certificate ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("KeyChain", $r8, r14);

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.security.cert.CertificateException from label1 to label2 with label4;
    }

    private void checkCertInstallerOrSystemCaller()
    {
        com.android.keychain.KeyChainService$1 r0;
        java.lang.String r1;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 = specialinvoke r0.<com.android.keychain.KeyChainService$1: java.lang.String checkCaller(java.lang.String)>("com.android.certinstaller");

        if r1 != null goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.keychain.KeyChainService$1: void checkSystemCaller()>();

        return;
    }

    private void checkSystemCaller()
    {
        com.android.keychain.KeyChainService$1 r0;
        java.lang.String r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 = specialinvoke r0.<com.android.keychain.KeyChainService$1: java.lang.String checkCaller(java.lang.String)>("android.uid.system:1000");

        if r1 == null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r1);

        throw $r2;

     label1:
        return;
    }

    private void checkUserRestriction()
    {
        com.android.keychain.KeyChainService$1 r0;
        android.os.UserManager r1;
        com.android.keychain.KeyChainService $r2;
        java.lang.Object $r3;
        boolean $z0;
        java.lang.SecurityException $r4;

        r0 := @this: com.android.keychain.KeyChainService$1;

        $r2 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        $r3 = virtualinvoke $r2.<com.android.keychain.KeyChainService: java.lang.Object getSystemService(java.lang.String)>("user");

        r1 = (android.os.UserManager) $r3;

        $z0 = virtualinvoke r1.<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>("no_config_credentials");

        if $z0 == 0 goto label1;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("User cannot modify credentials");

        throw $r4;

     label1:
        return;
    }

    private java.lang.String checkCaller(java.lang.String)
    {
        com.android.keychain.KeyChainService$1 r0;
        java.lang.String r1, r2, $r5;
        com.android.keychain.KeyChainService $r3;
        android.content.pm.PackageManager $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        $r4 = virtualinvoke $r3.<com.android.keychain.KeyChainService: android.content.pm.PackageManager getPackageManager()>();

        $i0 = staticinvoke <com.android.keychain.KeyChainService$1: int getCallingUid()>();

        r2 = virtualinvoke $r4.<android.content.pm.PackageManager: java.lang.String getNameForUid(int)>($i0);

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r5 = r2;

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public boolean hasGrant(int, java.lang.String)
    {
        com.android.keychain.KeyChainService$1 r0;
        int i0;
        java.lang.String r1;
        com.android.keychain.KeyChainService $r2, $r4;
        com.android.keychain.KeyChainService$DatabaseHelper $r3;
        android.database.sqlite.SQLiteDatabase $r5;
        boolean $z0;

        r0 := @this: com.android.keychain.KeyChainService$1;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.keychain.KeyChainService$1: void checkSystemCaller()>();

        $r4 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        $r2 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        $r3 = $r2.<com.android.keychain.KeyChainService: com.android.keychain.KeyChainService$DatabaseHelper mDatabaseHelper>;

        $r5 = virtualinvoke $r3.<com.android.keychain.KeyChainService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $z0 = staticinvoke <com.android.keychain.KeyChainService: boolean access$000(com.android.keychain.KeyChainService,android.database.sqlite.SQLiteDatabase,int,java.lang.String)>($r4, $r5, i0, r1);

        return $z0;
    }

    public void setGrant(int, java.lang.String, boolean)
    {
        com.android.keychain.KeyChainService$1 r0;
        int i0;
        java.lang.String r1;
        boolean z0;
        com.android.keychain.KeyChainService $r2, $r4, $r6;
        com.android.keychain.KeyChainService$DatabaseHelper $r3;
        android.database.sqlite.SQLiteDatabase $r5;

        r0 := @this: com.android.keychain.KeyChainService$1;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.keychain.KeyChainService$1: void checkSystemCaller()>();

        $r4 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        $r2 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        $r3 = $r2.<com.android.keychain.KeyChainService: com.android.keychain.KeyChainService$DatabaseHelper mDatabaseHelper>;

        $r5 = virtualinvoke $r3.<com.android.keychain.KeyChainService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        staticinvoke <com.android.keychain.KeyChainService: void access$300(com.android.keychain.KeyChainService,android.database.sqlite.SQLiteDatabase,int,java.lang.String,boolean)>($r4, $r5, i0, r1, z0);

        $r6 = r0.<com.android.keychain.KeyChainService$1: com.android.keychain.KeyChainService this$0>;

        staticinvoke <com.android.keychain.KeyChainService: void access$100(com.android.keychain.KeyChainService)>($r6);

        return;
    }

    private android.content.pm.ParceledListSlice makeAliasesParcelableSynchronised(java.util.Set)
    {
        com.android.keychain.KeyChainService$1 r0;
        java.util.Set r1;
        java.util.ArrayList r2, $r6;
        java.util.Iterator r3;
        java.lang.String r4;
        com.android.internal.util.ParcelableString r5, $r9;
        int $i0;
        boolean $z0;
        android.content.pm.ParceledListSlice $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 := @parameter0: java.util.Set;

        $r6 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i0);

        r2 = $r6;

        r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r8;

        $r9 = new com.android.internal.util.ParcelableString;

        specialinvoke $r9.<com.android.internal.util.ParcelableString: void <init>()>();

        r5 = $r9;

        r5.<com.android.internal.util.ParcelableString: java.lang.String string> = r4;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label1;

     label2:
        $r7 = new android.content.pm.ParceledListSlice;

        specialinvoke $r7.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r2);

        return $r7;
    }

    public android.content.pm.ParceledListSlice getUserCaAliases()
    {
        com.android.keychain.KeyChainService$1 r0;
        com.android.org.conscrypt.TrustedCertificateStore r1, $r4, $r5;
        java.util.Set r2;
        java.lang.Throwable r3, $r7;
        android.content.pm.ParceledListSlice $r6;

        r0 := @this: com.android.keychain.KeyChainService$1;

        $r4 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        r2 = virtualinvoke $r5.<com.android.org.conscrypt.TrustedCertificateStore: java.util.Set userAliases()>();

        $r6 = specialinvoke r0.<com.android.keychain.KeyChainService$1: android.content.pm.ParceledListSlice makeAliasesParcelableSynchronised(java.util.Set)>(r2);

        exitmonitor r1;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.content.pm.ParceledListSlice getSystemCaAliases()
    {
        com.android.keychain.KeyChainService$1 r0;
        com.android.org.conscrypt.TrustedCertificateStore r1, $r4, $r5;
        java.util.Set r2;
        java.lang.Throwable r3, $r7;
        android.content.pm.ParceledListSlice $r6;

        r0 := @this: com.android.keychain.KeyChainService$1;

        $r4 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        r2 = virtualinvoke $r5.<com.android.org.conscrypt.TrustedCertificateStore: java.util.Set allSystemAliases()>();

        $r6 = specialinvoke r0.<com.android.keychain.KeyChainService$1: android.content.pm.ParceledListSlice makeAliasesParcelableSynchronised(java.util.Set)>(r2);

        exitmonitor r1;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean containsCaAlias(java.lang.String)
    {
        com.android.keychain.KeyChainService$1 r0;
        java.lang.String r1;
        com.android.org.conscrypt.TrustedCertificateStore $r2;
        boolean $z0;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        $z0 = virtualinvoke $r2.<com.android.org.conscrypt.TrustedCertificateStore: boolean containsAlias(java.lang.String)>(r1);

        return $z0;
    }

    public byte[] getEncodedCaCertificate(java.lang.String, boolean)
    {
        com.android.keychain.KeyChainService$1 r0;
        java.lang.String r1, $r13, $r19;
        boolean z0;
        com.android.org.conscrypt.TrustedCertificateStore r2, $r6, $r7;
        java.security.cert.X509Certificate r3;
        java.lang.Throwable r5, $r14;
        java.security.cert.Certificate $r8;
        byte[] $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r16, $r17, $r18;
        java.security.cert.CertificateEncodingException $r15;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r6 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        $r8 = virtualinvoke $r7.<com.android.org.conscrypt.TrustedCertificateStore: java.security.cert.Certificate getCertificate(java.lang.String,boolean)>(r1, z0);

        r3 = (java.security.cert.X509Certificate) $r8;

        if r3 != null goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find CA certificate ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeyChain", $r13);

        exitmonitor r2;

     label2:
        return null;

     label3:
        $r9 = virtualinvoke r3.<java.security.cert.X509Certificate: byte[] getEncoded()>();

     label4:
        exitmonitor r2;

     label5:
        return $r9;

     label6:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while encoding CA certificate ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeyChain", $r19);

        exitmonitor r2;

     label7:
        return null;

     label8:
        $r14 := @caughtexception;

        r5 = $r14;

        exitmonitor r2;

     label9:
        throw r5;

        catch java.security.cert.CertificateEncodingException from label3 to label4 with label6;
        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public java.util.List getCaCertificateChainAliases(java.lang.String, boolean)
    {
        com.android.keychain.KeyChainService$1 r0;
        java.lang.String r1, r6, $r20;
        boolean z0;
        com.android.org.conscrypt.TrustedCertificateStore r2, $r8, $r9, $r11, $r14;
        java.security.cert.X509Certificate r3;
        java.util.List r4, $r22;
        java.util.ArrayList r5, $r12;
        int i0, i1, $i2;
        java.lang.Throwable r7, $r21;
        java.security.cert.Certificate $r10, $r15;
        java.lang.Object $r13;
        java.security.cert.CertificateException $r16;
        java.lang.StringBuilder $r17, $r18, $r19;

        r0 := @this: com.android.keychain.KeyChainService$1;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r8 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        r2 = $r8;

        entermonitor $r8;

     label01:
        $r9 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        $r10 = virtualinvoke $r9.<com.android.org.conscrypt.TrustedCertificateStore: java.security.cert.Certificate getCertificate(java.lang.String,boolean)>(r1, z0);

        r3 = (java.security.cert.X509Certificate) $r10;

     label02:
        $r11 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        r4 = virtualinvoke $r11.<com.android.org.conscrypt.TrustedCertificateStore: java.util.List getCertificateChain(java.security.cert.X509Certificate)>(r3);

        $r12 = new java.util.ArrayList;

        $i2 = interfaceinvoke r4.<java.util.List: int size()>();

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>($i2);

        r5 = $r12;

        i0 = interfaceinvoke r4.<java.util.List: int size()>();

        i1 = 0;

     label03:
        if i1 >= i0 goto label05;

        $r14 = r0.<com.android.keychain.KeyChainService$1: com.android.org.conscrypt.TrustedCertificateStore mTrustedCertificateStore>;

        $r13 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r15 = (java.security.cert.Certificate) $r13;

        r6 = virtualinvoke $r14.<com.android.org.conscrypt.TrustedCertificateStore: java.lang.String getCertificateAlias(java.security.cert.Certificate,boolean)>($r15, 1);

        if r6 == null goto label04;

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r6);

     label04:
        i1 = i1 + 1;

        goto label03;

     label05:
        exitmonitor r2;

     label06:
        return r5;

     label07:
        $r16 := @caughtexception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error retrieving cert chain for root ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeyChain", $r20);

        $r22 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r2;

     label08:
        return $r22;

     label09:
        $r21 := @caughtexception;

        r7 = $r21;

        exitmonitor r2;

     label10:
        throw r7;

        catch java.security.cert.CertificateException from label02 to label05 with label07;
        catch java.lang.Throwable from label01 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }
}
