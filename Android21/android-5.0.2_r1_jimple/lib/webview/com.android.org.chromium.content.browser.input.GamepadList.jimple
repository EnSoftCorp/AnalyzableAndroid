public class com.android.org.chromium.content.browser.input.GamepadList extends java.lang.Object
{
    private static final int MAX_GAMEPADS;
    private final java.lang.Object mLock;
    private final com.android.org.chromium.content.browser.input.GamepadDevice[] mGamepadDevices;
    private android.hardware.input.InputManager mInputManager;
    private int mAttachedToWindowCounter;
    private boolean mIsGamepadAccessed;
    private android.hardware.input.InputManager$InputDeviceListener mInputDeviceListener;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        java.lang.Object $r1;
        com.android.org.chromium.content.browser.input.GamepadDevice[] $r2;
        com.android.org.chromium.content.browser.input.GamepadList$1 $r3;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.org.chromium.content.browser.input.GamepadList: java.lang.Object mLock> = $r1;

        $r2 = newarray (com.android.org.chromium.content.browser.input.GamepadDevice)[4];

        r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice[] mGamepadDevices> = $r2;

        $r3 = new com.android.org.chromium.content.browser.input.GamepadList$1;

        specialinvoke $r3.<com.android.org.chromium.content.browser.input.GamepadList$1: void <init>(com.android.org.chromium.content.browser.input.GamepadList)>(r0);

        r0.<com.android.org.chromium.content.browser.input.GamepadList: android.hardware.input.InputManager$InputDeviceListener mInputDeviceListener> = $r3;

        return;
    }

    private void initializeDevices()
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        int[] r1;
        int i0, $i1, $i2;
        android.view.InputDevice r2;
        android.hardware.input.InputManager $r3;
        boolean $z0;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        $r3 = r0.<com.android.org.chromium.content.browser.input.GamepadList: android.hardware.input.InputManager mInputManager>;

        r1 = virtualinvoke $r3.<android.hardware.input.InputManager: int[] getInputDeviceIds()>();

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label3;

        $i2 = r1[i0];

        r2 = staticinvoke <android.view.InputDevice: android.view.InputDevice getDevice(int)>($i2);

        $z0 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: boolean isGamepadDevice(android.view.InputDevice)>(r2);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: boolean registerGamepad(android.view.InputDevice)>(r2);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public static void onAttachedToWindow(android.content.Context)
    {
        android.content.Context r0;
        boolean $z0, $z1, $z2;
        com.android.org.chromium.content.browser.input.GamepadList $r1;
        java.lang.AssertionError $r2;

        r0 := @parameter0: android.content.Context;

        $z0 = <com.android.org.chromium.content.browser.input.GamepadList: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = staticinvoke <com.android.org.chromium.base.ThreadUtils: boolean runningOnUiThread()>();

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: boolean isGamepadSupported()>();

        if $z1 != 0 goto label2;

        return;

     label2:
        $r1 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadList getInstance()>();

        specialinvoke $r1.<com.android.org.chromium.content.browser.input.GamepadList: void attachedToWindow(android.content.Context)>(r0);

        return;
    }

    private void attachedToWindow(android.content.Context)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        android.content.Context r1;
        java.lang.Object r2, $r4, $r6;
        java.lang.Throwable r3, $r9;
        int $i0, $i1;
        android.hardware.input.InputManager $r5, $r8;
        android.hardware.input.InputManager$InputDeviceListener $r7;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        r1 := @parameter0: android.content.Context;

        $i0 = r0.<com.android.org.chromium.content.browser.input.GamepadList: int mAttachedToWindowCounter>;

        $i1 = $i0 + 1;

        r0.<com.android.org.chromium.content.browser.input.GamepadList: int mAttachedToWindowCounter> = $i1;

        if $i0 != 0 goto label6;

        $r4 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("input");

        $r5 = (android.hardware.input.InputManager) $r4;

        r0.<com.android.org.chromium.content.browser.input.GamepadList: android.hardware.input.InputManager mInputManager> = $r5;

        $r6 = r0.<com.android.org.chromium.content.browser.input.GamepadList: java.lang.Object mLock>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: void initializeDevices()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        $r8 = r0.<com.android.org.chromium.content.browser.input.GamepadList: android.hardware.input.InputManager mInputManager>;

        $r7 = r0.<com.android.org.chromium.content.browser.input.GamepadList: android.hardware.input.InputManager$InputDeviceListener mInputDeviceListener>;

        virtualinvoke $r8.<android.hardware.input.InputManager: void registerInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener,android.os.Handler)>($r7, null);

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void onDetachedFromWindow()
    {
        boolean $z0, $z1, $z2;
        com.android.org.chromium.content.browser.input.GamepadList $r0;
        java.lang.AssertionError $r1;

        $z0 = <com.android.org.chromium.content.browser.input.GamepadList: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = staticinvoke <com.android.org.chromium.base.ThreadUtils: boolean runningOnUiThread()>();

        if $z2 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $z1 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: boolean isGamepadSupported()>();

        if $z1 != 0 goto label2;

        return;

     label2:
        $r0 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadList getInstance()>();

        specialinvoke $r0.<com.android.org.chromium.content.browser.input.GamepadList: void detachedFromWindow()>();

        return;
    }

    private void detachedFromWindow()
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        java.lang.Object r1, $r3;
        int i0, $i1, $i2;
        java.lang.Throwable r2, $r7;
        android.hardware.input.InputManager$InputDeviceListener $r4;
        android.hardware.input.InputManager $r5;
        com.android.org.chromium.content.browser.input.GamepadDevice[] $r6;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        $i1 = r0.<com.android.org.chromium.content.browser.input.GamepadList: int mAttachedToWindowCounter>;

        $i2 = $i1 - 1;

        r0.<com.android.org.chromium.content.browser.input.GamepadList: int mAttachedToWindowCounter> = $i2;

        if $i2 != 0 goto label8;

        $r3 = r0.<com.android.org.chromium.content.browser.input.GamepadList: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        i0 = 0;

     label2:
        if i0 >= 4 goto label3;

        $r6 = r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice[] mGamepadDevices>;

        $r6[i0] = null;

        i0 = i0 + 1;

        goto label2;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        $r5 = r0.<com.android.org.chromium.content.browser.input.GamepadList: android.hardware.input.InputManager mInputManager>;

        $r4 = r0.<com.android.org.chromium.content.browser.input.GamepadList: android.hardware.input.InputManager$InputDeviceListener mInputDeviceListener>;

        virtualinvoke $r5.<android.hardware.input.InputManager: void unregisterInputDeviceListener(android.hardware.input.InputManager$InputDeviceListener)>($r4);

        r0.<com.android.org.chromium.content.browser.input.GamepadList: android.hardware.input.InputManager mInputManager> = null;

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void onInputDeviceChangedImpl(int)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        int i0;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        i0 := @parameter0: int;

        return;
    }

    private void onInputDeviceRemovedImpl(int)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        int i0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.org.chromium.content.browser.input.GamepadList: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: void unregisterGamepad(int)>(i0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void onInputDeviceAddedImpl(int)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        int i0;
        android.view.InputDevice r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;
        boolean $z0;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.view.InputDevice: android.view.InputDevice getDevice(int)>(i0);

        $z0 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: boolean isGamepadDevice(android.view.InputDevice)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.org.chromium.content.browser.input.GamepadList: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: boolean registerGamepad(android.view.InputDevice)>(r1);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static com.android.org.chromium.content.browser.input.GamepadList getInstance()
    {
        boolean $z0, $z1;
        com.android.org.chromium.content.browser.input.GamepadList $r0;
        java.lang.AssertionError $r1;

        $z0 = <com.android.org.chromium.content.browser.input.GamepadList: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: boolean isGamepadSupported()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $r0 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList$LazyHolder: com.android.org.chromium.content.browser.input.GamepadList access$300()>();

        return $r0;
    }

    private int getDeviceCount()
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        int i0, i1;
        com.android.org.chromium.content.browser.input.GamepadDevice $r1;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        i0 = 0;

        i1 = 0;

     label1:
        if i1 >= 4 goto label3;

        $r1 = specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice getDevice(int)>(i1);

        if $r1 == null goto label2;

        i0 = i0 + 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return i0;
    }

    private boolean isDeviceConnected(int)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        int i0;
        com.android.org.chromium.content.browser.input.GamepadDevice $r1;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        i0 := @parameter0: int;

        if i0 >= 4 goto label1;

        $r1 = specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice getDevice(int)>(i0);

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private com.android.org.chromium.content.browser.input.GamepadDevice getDeviceById(int)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        int i0, i1, $i2;
        com.android.org.chromium.content.browser.input.GamepadDevice r1;
        com.android.org.chromium.content.browser.input.GamepadDevice[] $r2;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        if i1 >= 4 goto label3;

        $r2 = r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice[] mGamepadDevices>;

        r1 = $r2[i1];

        if r1 == null goto label2;

        $i2 = virtualinvoke r1.<com.android.org.chromium.content.browser.input.GamepadDevice: int getId()>();

        if $i2 != i0 goto label2;

        return r1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private com.android.org.chromium.content.browser.input.GamepadDevice getDevice(int)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        int i0;
        boolean $z0;
        com.android.org.chromium.content.browser.input.GamepadDevice[] $r1;
        com.android.org.chromium.content.browser.input.GamepadDevice $r2;
        java.lang.AssertionError $r3;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        i0 := @parameter0: int;

        $z0 = <com.android.org.chromium.content.browser.input.GamepadList: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        if i0 < 4 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $r1 = r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice[] mGamepadDevices>;

        $r2 = $r1[i0];

        return $r2;
    }

    public static boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        android.view.KeyEvent r0;
        boolean $z0, $z1, $z2;
        com.android.org.chromium.content.browser.input.GamepadList $r1;

        r0 := @parameter0: android.view.KeyEvent;

        $z0 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: boolean isGamepadSupported()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: boolean isGamepadEvent(android.view.KeyEvent)>(r0);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r1 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadList getInstance()>();

        $z2 = specialinvoke $r1.<com.android.org.chromium.content.browser.input.GamepadList: boolean handleKeyEvent(android.view.KeyEvent)>(r0);

        return $z2;
    }

    private boolean handleKeyEvent(android.view.KeyEvent)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        android.view.KeyEvent r1;
        java.lang.Object r2, $r5;
        com.android.org.chromium.content.browser.input.GamepadDevice r3;
        java.lang.Throwable r4, $r6;
        boolean $z0, $z1;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        r1 := @parameter0: android.view.KeyEvent;

        $r5 = r0.<com.android.org.chromium.content.browser.input.GamepadList: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $z0 = r0.<com.android.org.chromium.content.browser.input.GamepadList: boolean mIsGamepadAccessed>;

        if $z0 != 0 goto label3;

        exitmonitor r2;

     label2:
        return 0;

     label3:
        r3 = specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice getGamepadForEvent(android.view.InputEvent)>(r1);

        if r3 != null goto label5;

        exitmonitor r2;

     label4:
        return 0;

     label5:
        $z1 = virtualinvoke r3.<com.android.org.chromium.content.browser.input.GamepadDevice: boolean handleKeyEvent(android.view.KeyEvent)>(r1);

        exitmonitor r2;

     label6:
        return $z1;

     label7:
        $r6 := @caughtexception;

        r4 = $r6;

        exitmonitor r2;

     label8:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public static boolean onGenericMotionEvent(android.view.MotionEvent)
    {
        android.view.MotionEvent r0;
        boolean $z0, $z1, $z2;
        com.android.org.chromium.content.browser.input.GamepadList $r1;

        r0 := @parameter0: android.view.MotionEvent;

        $z0 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: boolean isGamepadSupported()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: boolean isGamepadEvent(android.view.MotionEvent)>(r0);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r1 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadList getInstance()>();

        $z2 = specialinvoke $r1.<com.android.org.chromium.content.browser.input.GamepadList: boolean handleMotionEvent(android.view.MotionEvent)>(r0);

        return $z2;
    }

    private boolean handleMotionEvent(android.view.MotionEvent)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        android.view.MotionEvent r1;
        java.lang.Object r2, $r5;
        com.android.org.chromium.content.browser.input.GamepadDevice r3;
        java.lang.Throwable r4, $r6;
        boolean $z0, $z1;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        r1 := @parameter0: android.view.MotionEvent;

        $r5 = r0.<com.android.org.chromium.content.browser.input.GamepadList: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $z0 = r0.<com.android.org.chromium.content.browser.input.GamepadList: boolean mIsGamepadAccessed>;

        if $z0 != 0 goto label3;

        exitmonitor r2;

     label2:
        return 0;

     label3:
        r3 = specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice getGamepadForEvent(android.view.InputEvent)>(r1);

        if r3 != null goto label5;

        exitmonitor r2;

     label4:
        return 0;

     label5:
        $z1 = virtualinvoke r3.<com.android.org.chromium.content.browser.input.GamepadDevice: boolean handleMotionEvent(android.view.MotionEvent)>(r1);

        exitmonitor r2;

     label6:
        return $z1;

     label7:
        $r6 := @caughtexception;

        r4 = $r6;

        exitmonitor r2;

     label8:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private int getNextAvailableIndex()
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        int i0;
        com.android.org.chromium.content.browser.input.GamepadDevice $r1;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        i0 = 0;

     label1:
        if i0 >= 4 goto label3;

        $r1 = specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice getDevice(int)>(i0);

        if $r1 != null goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    private boolean registerGamepad(android.view.InputDevice)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        android.view.InputDevice r1;
        int i0;
        com.android.org.chromium.content.browser.input.GamepadDevice r2, $r3;
        com.android.org.chromium.content.browser.input.GamepadDevice[] $r4;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        r1 := @parameter0: android.view.InputDevice;

        i0 = specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: int getNextAvailableIndex()>();

        if i0 != -1 goto label1;

        return 0;

     label1:
        $r3 = new com.android.org.chromium.content.browser.input.GamepadDevice;

        specialinvoke $r3.<com.android.org.chromium.content.browser.input.GamepadDevice: void <init>(int,android.view.InputDevice)>(i0, r1);

        r2 = $r3;

        $r4 = r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice[] mGamepadDevices>;

        $r4[i0] = r2;

        return 1;
    }

    private void unregisterGamepad(int)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        int i0, i1;
        com.android.org.chromium.content.browser.input.GamepadDevice r1;
        com.android.org.chromium.content.browser.input.GamepadDevice[] $r2;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice getDeviceById(int)>(i0);

        if r1 != null goto label1;

        return;

     label1:
        i1 = virtualinvoke r1.<com.android.org.chromium.content.browser.input.GamepadDevice: int getIndex()>();

        $r2 = r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice[] mGamepadDevices>;

        $r2[i1] = null;

        return;
    }

    private static boolean isGamepadDevice(android.view.InputDevice)
    {
        android.view.InputDevice r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: android.view.InputDevice;

        $i0 = virtualinvoke r0.<android.view.InputDevice: int getSources()>();

        $i1 = $i0 & 16777232;

        if $i1 != 16777232 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private com.android.org.chromium.content.browser.input.GamepadDevice getGamepadForEvent(android.view.InputEvent)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        android.view.InputEvent r1;
        int $i0;
        com.android.org.chromium.content.browser.input.GamepadDevice $r2;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        r1 := @parameter0: android.view.InputEvent;

        $i0 = virtualinvoke r1.<android.view.InputEvent: int getDeviceId()>();

        $r2 = specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice getDeviceById(int)>($i0);

        return $r2;
    }

    public static boolean isGamepadEvent(android.view.MotionEvent)
    {
        android.view.MotionEvent r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: android.view.MotionEvent;

        $i0 = virtualinvoke r0.<android.view.MotionEvent: int getSource()>();

        $i1 = $i0 & 16777232;

        if $i1 != 16777232 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isGamepadEvent(android.view.KeyEvent)
    {
        android.view.KeyEvent r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: android.view.KeyEvent;

        i0 = virtualinvoke r0.<android.view.KeyEvent: int getKeyCode()>();

        tableswitch(i0)
        {
            case 19: goto label1;
            case 20: goto label1;
            case 21: goto label1;
            case 22: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        $z0 = staticinvoke <android.view.KeyEvent: boolean isGamepadButton(int)>(i0);

        return $z0;
    }

    private static boolean isGamepadSupported()
    {
        int $i0;
        boolean $z0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void updateGamepadData(long)
    {
        long l0;
        boolean $z0;
        com.android.org.chromium.content.browser.input.GamepadList $r0;

        l0 := @parameter0: long;

        $z0 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: boolean isGamepadSupported()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadList getInstance()>();

        specialinvoke $r0.<com.android.org.chromium.content.browser.input.GamepadList: void grabGamepadData(long)>(l0);

        return;
    }

    private void grabGamepadData(long)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        long l0, $l2;
        java.lang.Object r1, $r4;
        int i1;
        com.android.org.chromium.content.browser.input.GamepadDevice r2;
        java.lang.Throwable r3, $r8;
        boolean $z0;
        java.lang.String $r5;
        float[] $r6, $r7;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        l0 := @parameter0: long;

        $r4 = r0.<com.android.org.chromium.content.browser.input.GamepadList: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        i1 = 0;

     label2:
        if i1 >= 4 goto label5;

        r2 = specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice getDevice(int)>(i1);

        if r2 == null goto label3;

        virtualinvoke r2.<com.android.org.chromium.content.browser.input.GamepadDevice: void updateButtonsAndAxesMapping()>();

        $z0 = virtualinvoke r2.<com.android.org.chromium.content.browser.input.GamepadDevice: boolean isStandardGamepad()>();

        $r5 = virtualinvoke r2.<com.android.org.chromium.content.browser.input.GamepadDevice: java.lang.String getName()>();

        $l2 = virtualinvoke r2.<com.android.org.chromium.content.browser.input.GamepadDevice: long getTimestamp()>();

        $r6 = virtualinvoke r2.<com.android.org.chromium.content.browser.input.GamepadDevice: float[] getAxes()>();

        $r7 = virtualinvoke r2.<com.android.org.chromium.content.browser.input.GamepadDevice: float[] getButtons()>();

        specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: void nativeSetGamepadData(long,int,boolean,boolean,java.lang.String,long,float[],float[])>(l0, i1, $z0, 1, $r5, $l2, $r6, $r7);

        goto label4;

     label3:
        specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: void nativeSetGamepadData(long,int,boolean,boolean,java.lang.String,long,float[],float[])>(l0, i1, 0, 0, null, 0L, null, null);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    static void notifyForGamepadsAccess(boolean)
    {
        boolean z0, $z1, $z2;
        com.android.org.chromium.content.browser.input.GamepadList $r0;

        z0 := @parameter0: boolean;

        $z1 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: boolean isGamepadSupported()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        $r0 = staticinvoke <com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadList getInstance()>();

        if z0 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        specialinvoke $r0.<com.android.org.chromium.content.browser.input.GamepadList: void setIsGamepadAccessed(boolean)>($z2);

        return;
    }

    private void setIsGamepadAccessed(boolean)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        boolean z0;
        java.lang.Object r1, $r4;
        int i0;
        com.android.org.chromium.content.browser.input.GamepadDevice r2;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        z0 := @parameter0: boolean;

        $r4 = r0.<com.android.org.chromium.content.browser.input.GamepadList: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        r0.<com.android.org.chromium.content.browser.input.GamepadList: boolean mIsGamepadAccessed> = z0;

        if z0 == 0 goto label5;

        i0 = 0;

     label2:
        if i0 >= 4 goto label5;

        r2 = specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: com.android.org.chromium.content.browser.input.GamepadDevice getDevice(int)>(i0);

        if r2 != null goto label3;

        goto label4;

     label3:
        virtualinvoke r2.<com.android.org.chromium.content.browser.input.GamepadDevice: void clearData()>();

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private native void nativeSetGamepadData(long, int, boolean, boolean, java.lang.String, long, float[], float[]);

    static void access$000(com.android.org.chromium.content.browser.input.GamepadList, int)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        int i0;

        r0 := @parameter0: com.android.org.chromium.content.browser.input.GamepadList;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: void onInputDeviceChangedImpl(int)>(i0);

        return;
    }

    static void access$100(com.android.org.chromium.content.browser.input.GamepadList, int)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        int i0;

        r0 := @parameter0: com.android.org.chromium.content.browser.input.GamepadList;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: void onInputDeviceRemovedImpl(int)>(i0);

        return;
    }

    static void access$200(com.android.org.chromium.content.browser.input.GamepadList, int)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        int i0;

        r0 := @parameter0: com.android.org.chromium.content.browser.input.GamepadList;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: void onInputDeviceAddedImpl(int)>(i0);

        return;
    }

    void <init>(com.android.org.chromium.content.browser.input.GamepadList$1)
    {
        com.android.org.chromium.content.browser.input.GamepadList r0;
        com.android.org.chromium.content.browser.input.GamepadList$1 r1;

        r0 := @this: com.android.org.chromium.content.browser.input.GamepadList;

        r1 := @parameter0: com.android.org.chromium.content.browser.input.GamepadList$1;

        specialinvoke r0.<com.android.org.chromium.content.browser.input.GamepadList: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.android.org.chromium.content.browser.input.GamepadList: int MAX_GAMEPADS> = 4;

        $r0 = class "com/android/org/chromium/content/browser/input/GamepadList";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.android.org.chromium.content.browser.input.GamepadList: boolean $assertionsDisabled> = $z1;

        return;
    }
}
