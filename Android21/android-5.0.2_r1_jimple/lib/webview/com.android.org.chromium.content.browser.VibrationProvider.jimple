class com.android.org.chromium.content.browser.VibrationProvider extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final android.media.AudioManager mAudioManager;
    private final android.os.Vibrator mVibrator;
    private final boolean mHasVibratePermission;

    private static com.android.org.chromium.content.browser.VibrationProvider create(android.content.Context)
    {
        android.content.Context r0;
        com.android.org.chromium.content.browser.VibrationProvider $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = new com.android.org.chromium.content.browser.VibrationProvider;

        specialinvoke $r1.<com.android.org.chromium.content.browser.VibrationProvider: void <init>(android.content.Context)>(r0);

        return $r1;
    }

    private void vibrate(long)
    {
        com.android.org.chromium.content.browser.VibrationProvider r0;
        long l0;
        android.media.AudioManager $r1;
        int $i1;
        boolean $z0;
        android.os.Vibrator $r2;

        r0 := @this: com.android.org.chromium.content.browser.VibrationProvider;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.org.chromium.content.browser.VibrationProvider: android.media.AudioManager mAudioManager>;

        $i1 = virtualinvoke $r1.<android.media.AudioManager: int getRingerMode()>();

        if $i1 == 0 goto label1;

        $z0 = r0.<com.android.org.chromium.content.browser.VibrationProvider: boolean mHasVibratePermission>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.org.chromium.content.browser.VibrationProvider: android.os.Vibrator mVibrator>;

        virtualinvoke $r2.<android.os.Vibrator: void vibrate(long)>(l0);

     label1:
        return;
    }

    private void cancelVibration()
    {
        com.android.org.chromium.content.browser.VibrationProvider r0;
        boolean $z0;
        android.os.Vibrator $r1;

        r0 := @this: com.android.org.chromium.content.browser.VibrationProvider;

        $z0 = r0.<com.android.org.chromium.content.browser.VibrationProvider: boolean mHasVibratePermission>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.org.chromium.content.browser.VibrationProvider: android.os.Vibrator mVibrator>;

        virtualinvoke $r1.<android.os.Vibrator: void cancel()>();

     label1:
        return;
    }

    private void <init>(android.content.Context)
    {
        com.android.org.chromium.content.browser.VibrationProvider r0;
        android.content.Context r1;
        java.lang.Object $r2, $r4;
        android.media.AudioManager $r3;
        android.os.Vibrator $r5;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: com.android.org.chromium.content.browser.VibrationProvider;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r3 = (android.media.AudioManager) $r2;

        r0.<com.android.org.chromium.content.browser.VibrationProvider: android.media.AudioManager mAudioManager> = $r3;

        $r4 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("vibrator");

        $r5 = (android.os.Vibrator) $r4;

        r0.<com.android.org.chromium.content.browser.VibrationProvider: android.os.Vibrator mVibrator> = $r5;

        $i0 = virtualinvoke r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.VIBRATE");

        if $i0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<com.android.org.chromium.content.browser.VibrationProvider: boolean mHasVibratePermission> = $z1;

        $z0 = r0.<com.android.org.chromium.content.browser.VibrationProvider: boolean mHasVibratePermission>;

        if $z0 != 0 goto label3;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("VibrationProvider", "Failed to use vibrate API, requires VIBRATE permission.");

     label3:
        return;
    }

    public static void <clinit>()
    {
        <com.android.org.chromium.content.browser.VibrationProvider: java.lang.String TAG> = "VibrationProvider";

        return;
    }
}
