class com.android.org.chromium.media.AudioManagerAndroid extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static final java.lang.String[] SUPPORTED_AEC_MODELS;
    private static final int DEVICE_DEFAULT;
    private static final int DEVICE_INVALID;
    private static final int DEVICE_SPEAKERPHONE;
    private static final int DEVICE_WIRED_HEADSET;
    private static final int DEVICE_EARPIECE;
    private static final int DEVICE_BLUETOOTH_HEADSET;
    private static final int DEVICE_COUNT;
    private static final java.lang.String[] DEVICE_NAMES;
    private static final java.lang.Integer[] VALID_DEVICES;
    private static final int STATE_BLUETOOTH_SCO_INVALID;
    private static final int STATE_BLUETOOTH_SCO_OFF;
    private static final int STATE_BLUETOOTH_SCO_ON;
    private static final int STATE_BLUETOOTH_SCO_TURNING_ON;
    private static final int STATE_BLUETOOTH_SCO_TURNING_OFF;
    private static final int DEFAULT_SAMPLING_RATE;
    private static final int DEFAULT_FRAME_PER_BUFFER;
    private final android.media.AudioManager mAudioManager;
    private final android.content.Context mContext;
    private final long mNativeAudioManagerAndroid;
    private boolean mHasModifyAudioSettingsPermission;
    private boolean mHasRecordAudioPermission;
    private boolean mHasBluetoothPermission;
    private int mSavedAudioMode;
    private int mBluetoothScoState;
    private boolean mIsInitialized;
    private boolean mSavedIsSpeakerphoneOn;
    private boolean mSavedIsMicrophoneMute;
    private int mRequestedAudioDevice;
    private final com.android.org.chromium.media.AudioManagerAndroid$NonThreadSafe mNonThreadSafe;
    private final java.lang.Object mLock;
    private boolean[] mAudioDevices;
    private final android.content.ContentResolver mContentResolver;
    private android.database.ContentObserver mSettingsObserver;
    private android.os.HandlerThread mSettingsObserverThread;
    private int mCurrentVolume;
    private android.content.BroadcastReceiver mWiredHeadsetReceiver;
    private android.content.BroadcastReceiver mBluetoothHeadsetReceiver;
    private android.content.BroadcastReceiver mBluetoothScoReceiver;

    private static boolean runningOnJellyBeanOrHigher()
    {
        int $i0;
        boolean $z0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean runningOnJellyBeanMR1OrHigher()
    {
        int $i0;
        boolean $z0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 17 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean runningOnJellyBeanMR2OrHigher()
    {
        int $i0;
        boolean $z0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 18 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static com.android.org.chromium.media.AudioManagerAndroid createAudioManagerAndroid(android.content.Context, long)
    {
        android.content.Context r0;
        long l0;
        com.android.org.chromium.media.AudioManagerAndroid $r1;

        r0 := @parameter0: android.content.Context;

        l0 := @parameter1: long;

        $r1 = new com.android.org.chromium.media.AudioManagerAndroid;

        specialinvoke $r1.<com.android.org.chromium.media.AudioManagerAndroid: void <init>(android.content.Context,long)>(r0, l0);

        return $r1;
    }

    private void <init>(android.content.Context, long)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        android.content.Context r1, $r5, $r8;
        long l0;
        com.android.org.chromium.media.AudioManagerAndroid$NonThreadSafe $r2;
        java.lang.Object $r3, $r6;
        boolean[] $r4;
        android.media.AudioManager $r7;
        android.content.ContentResolver $r9;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        r1 := @parameter0: android.content.Context;

        l0 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasModifyAudioSettingsPermission> = 0;

        r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasRecordAudioPermission> = 0;

        r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasBluetoothPermission> = 0;

        r0.<com.android.org.chromium.media.AudioManagerAndroid: int mSavedAudioMode> = -2;

        r0.<com.android.org.chromium.media.AudioManagerAndroid: int mBluetoothScoState> = -1;

        r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mIsInitialized> = 0;

        r0.<com.android.org.chromium.media.AudioManagerAndroid: int mRequestedAudioDevice> = -1;

        $r2 = new com.android.org.chromium.media.AudioManagerAndroid$NonThreadSafe;

        specialinvoke $r2.<com.android.org.chromium.media.AudioManagerAndroid$NonThreadSafe: void <init>()>();

        r0.<com.android.org.chromium.media.AudioManagerAndroid: com.android.org.chromium.media.AudioManagerAndroid$NonThreadSafe mNonThreadSafe> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.org.chromium.media.AudioManagerAndroid: java.lang.Object mLock> = $r3;

        $r4 = newarray (boolean)[4];

        r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean[] mAudioDevices> = $r4;

        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.database.ContentObserver mSettingsObserver> = null;

        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.os.HandlerThread mSettingsObserverThread> = null;

        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.Context mContext> = r1;

        r0.<com.android.org.chromium.media.AudioManagerAndroid: long mNativeAudioManagerAndroid> = l0;

        $r5 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r7 = (android.media.AudioManager) $r6;

        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager> = $r7;

        $r8 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.ContentResolver mContentResolver> = $r9;

        return;
    }

    private void init()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        boolean[] $r1, $r2, $r3;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void checkIfCalledOnValidThread()>();

        $z0 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mIsInitialized>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean hasPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_SETTINGS");

        r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasModifyAudioSettingsPermission> = $z1;

        $z2 = specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean hasPermission(java.lang.String)>("android.permission.RECORD_AUDIO");

        r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasRecordAudioPermission> = $z2;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean[] mAudioDevices>;

        $z3 = specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean hasEarpiece()>();

        $r1[2] = $z3;

        $r2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean[] mAudioDevices>;

        $z4 = specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean hasWiredHeadset()>();

        $r2[1] = $z4;

        $r3 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean[] mAudioDevices>;

        $r3[0] = 1;

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void registerBluetoothIntentsIfNeeded()>();

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void registerForWiredHeadsetIntentBroadcast()>();

        r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mIsInitialized> = 1;

        return;
    }

    private void close()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        boolean $z0;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void checkIfCalledOnValidThread()>();

        $z0 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mIsInitialized>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void stopObservingVolumeChanges()>();

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void unregisterForWiredHeadsetIntentBroadcast()>();

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void unregisterBluetoothIntentsIfNeeded()>();

        r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mIsInitialized> = 0;

        return;
    }

    private void setCommunicationAudioModeOn(boolean)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.SecurityException r1, $r9, $r10, $r11, r12, r13;
        int $i0, $i1, $i2, $i3;
        android.media.AudioManager $r2, $r4, $r5, $r6, $r7;
        java.lang.IllegalStateException $r3, $r8;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasModifyAudioSettingsPermission>;

        if $z1 != 0 goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManagerAndroid", "MODIFY_AUDIO_SETTINGS is missing => client will run with reduced functionality");

        return;

     label01:
        if z0 == 0 goto label10;

        $i2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: int mSavedAudioMode>;

        if $i2 == -2 goto label02;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Audio mode has already been set");

        throw $r8;

     label02:
        $r4 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        $i3 = virtualinvoke $r4.<android.media.AudioManager: int getMode()>();

        r0.<com.android.org.chromium.media.AudioManagerAndroid: int mSavedAudioMode> = $i3;

     label03:
        goto label05;

     label04:
        $r10 := @caughtexception;

        r1 = $r10;

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void logDeviceInfo()>();

        throw r1;

     label05:
        $r5 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        $z4 = virtualinvoke $r5.<android.media.AudioManager: boolean isSpeakerphoneOn()>();

        r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mSavedIsSpeakerphoneOn> = $z4;

        $r6 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        $z5 = virtualinvoke $r6.<android.media.AudioManager: boolean isMicrophoneMute()>();

        r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mSavedIsMicrophoneMute> = $z5;

     label06:
        $r7 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        virtualinvoke $r7.<android.media.AudioManager: void setMode(int)>(3);

     label07:
        goto label09;

     label08:
        $r11 := @caughtexception;

        r12 = $r11;

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void logDeviceInfo()>();

        throw r12;

     label09:
        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void startObservingVolumeChanges()>();

        goto label16;

     label10:
        $i0 = r0.<com.android.org.chromium.media.AudioManagerAndroid: int mSavedAudioMode>;

        if $i0 != -2 goto label11;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Audio mode has not yet been set");

        throw $r3;

     label11:
        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void stopObservingVolumeChanges()>();

        $z2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mSavedIsMicrophoneMute>;

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void setMicrophoneMute(boolean)>($z2);

        $z3 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mSavedIsSpeakerphoneOn>;

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void setSpeakerphoneOn(boolean)>($z3);

     label12:
        $r2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        $i1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: int mSavedAudioMode>;

        virtualinvoke $r2.<android.media.AudioManager: void setMode(int)>($i1);

     label13:
        goto label15;

     label14:
        $r9 := @caughtexception;

        r13 = $r9;

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void logDeviceInfo()>();

        throw r13;

     label15:
        r0.<com.android.org.chromium.media.AudioManagerAndroid: int mSavedAudioMode> = -2;

     label16:
        return;

        catch java.lang.SecurityException from label02 to label03 with label04;
        catch java.lang.SecurityException from label06 to label07 with label08;
        catch java.lang.SecurityException from label12 to label13 with label14;
    }

    private boolean setDevice(java.lang.String)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        java.lang.String r1;
        int i0, $i1, i2;
        java.lang.Object r2, $r8, $r10, $r11, r16;
        java.lang.Throwable r3, r4, $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Integer[] $r5;
        java.lang.Integer $r6;
        boolean[] $r7, $r9, r14;
        java.util.List r15;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mIsInitialized>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $z1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasModifyAudioSettingsPermission>;

        if $z1 == 0 goto label02;

        $z2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasRecordAudioPermission>;

        if $z2 != 0 goto label03;

     label02:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManagerAndroid", "Requires MODIFY_AUDIO_SETTINGS and RECORD_AUDIO");

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManagerAndroid", "Selected device will not be available for recording");

        return 0;

     label03:
        $z3 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z3 == 0 goto label04;

        $i1 = -2;

        goto label05;

     label04:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label05:
        i0 = $i1;

        if i0 != -2 goto label11;

        $r10 = r0.<com.android.org.chromium.media.AudioManagerAndroid: java.lang.Object mLock>;

        r2 = $r10;

        entermonitor $r10;

     label06:
        $r9 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean[] mAudioDevices>;

        $r11 = virtualinvoke $r9.<java.lang.Object: java.lang.Object clone()>();

        r14 = (boolean[]) $r11;

        r0.<com.android.org.chromium.media.AudioManagerAndroid: int mRequestedAudioDevice> = -2;

        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r2;

     label09:
        throw r3;

     label10:
        i2 = staticinvoke <com.android.org.chromium.media.AudioManagerAndroid: int selectDefaultDevice(boolean[])>(r14);

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void setAudioDevice(int)>(i2);

        return 1;

     label11:
        $r5 = <com.android.org.chromium.media.AudioManagerAndroid: java.lang.Integer[] VALID_DEVICES>;

        r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z4 = interfaceinvoke r15.<java.util.List: boolean contains(java.lang.Object)>($r6);

        if $z4 == 0 goto label12;

        $r7 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean[] mAudioDevices>;

        $z5 = $r7[i0];

        if $z5 != 0 goto label13;

     label12:
        return 0;

     label13:
        $r8 = r0.<com.android.org.chromium.media.AudioManagerAndroid: java.lang.Object mLock>;

        r16 = $r8;

        entermonitor $r8;

     label14:
        r0.<com.android.org.chromium.media.AudioManagerAndroid: int mRequestedAudioDevice> = i0;

        exitmonitor r16;

     label15:
        goto label18;

     label16:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r16;

     label17:
        throw r4;

     label18:
        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void setAudioDevice(int)>(i0);

        return 1;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    private com.android.org.chromium.media.AudioManagerAndroid$AudioDeviceName[] getAudioInputDeviceNames()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        java.lang.Object r1, $r3, $r5;
        java.lang.Throwable r2, $r12;
        int i0, i1, $i2;
        boolean $z0, $z1, $z2, $z3;
        boolean[] $r4, r13;
        java.util.ArrayList $r6, r14;
        java.lang.String[] $r7, $r9;
        com.android.org.chromium.media.AudioManagerAndroid$AudioDeviceName $r8;
        java.lang.String $r10, $r11;
        com.android.org.chromium.media.AudioManagerAndroid$AudioDeviceName[] r15;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $z0 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mIsInitialized>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        $z1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasModifyAudioSettingsPermission>;

        if $z1 == 0 goto label02;

        $z2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasRecordAudioPermission>;

        if $z2 != 0 goto label03;

     label02:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManagerAndroid", "Requires MODIFY_AUDIO_SETTINGS and RECORD_AUDIO");

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManagerAndroid", "No audio device will be available for recording");

        return null;

     label03:
        $r3 = r0.<com.android.org.chromium.media.AudioManagerAndroid: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label04:
        $r4 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean[] mAudioDevices>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        r13 = (boolean[]) $r5;

        exitmonitor r1;

     label05:
        goto label08;

     label06:
        $r12 := @caughtexception;

        r2 = $r12;

        exitmonitor r1;

     label07:
        throw r2;

     label08:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r14 = $r6;

        $i2 = staticinvoke <com.android.org.chromium.media.AudioManagerAndroid: int getNumOfAudioDevices(boolean[])>(r13);

        r15 = newarray (com.android.org.chromium.media.AudioManagerAndroid$AudioDeviceName)[$i2];

        i0 = 0;

        i1 = 0;

     label09:
        if i1 >= 4 goto label11;

        $z3 = r13[i1];

        if $z3 == 0 goto label10;

        $r8 = new com.android.org.chromium.media.AudioManagerAndroid$AudioDeviceName;

        $r7 = <com.android.org.chromium.media.AudioManagerAndroid: java.lang.String[] DEVICE_NAMES>;

        $r10 = $r7[i1];

        specialinvoke $r8.<com.android.org.chromium.media.AudioManagerAndroid$AudioDeviceName: void <init>(int,java.lang.String,com.android.org.chromium.media.AudioManagerAndroid$1)>(i1, $r10, null);

        r15[i0] = $r8;

        $r9 = <com.android.org.chromium.media.AudioManagerAndroid: java.lang.String[] DEVICE_NAMES>;

        $r11 = $r9[i1];

        interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>($r11);

        i0 = i0 + 1;

     label10:
        i1 = i1 + 1;

        goto label09;

     label11:
        return r15;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    private int getNativeOutputSampleRate()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        java.lang.String r1;
        boolean $z0;
        android.media.AudioManager $r2;
        int $i0;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $z0 = staticinvoke <com.android.org.chromium.media.AudioManagerAndroid: boolean runningOnJellyBeanMR1OrHigher()>();

        if $z0 == 0 goto label3;

        $r2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        r1 = virtualinvoke $r2.<android.media.AudioManager: java.lang.String getProperty(java.lang.String)>("android.media.property.OUTPUT_SAMPLE_RATE");

        if r1 != null goto label1;

        $i0 = 44100;

        goto label2;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label2:
        return $i0;

     label3:
        return 44100;
    }

    private static int getMinInputFrameSize(int, int)
    {
        int i0, i1, $i3, $i4, $i5;
        byte b2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != 1 goto label1;

        b2 = 16;

        goto label3;

     label1:
        if i1 != 2 goto label2;

        b2 = 12;

        goto label3;

     label2:
        return -1;

     label3:
        $i3 = staticinvoke <android.media.AudioRecord: int getMinBufferSize(int,int,int)>(i0, b2, 2);

        $i4 = $i3 / 2;

        $i5 = $i4 / i1;

        return $i5;
    }

    private static int getMinOutputFrameSize(int, int)
    {
        int i0, i1, $i3, $i4, $i5;
        byte b2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != 1 goto label1;

        b2 = 4;

        goto label3;

     label1:
        if i1 != 2 goto label2;

        b2 = 12;

        goto label3;

     label2:
        return -1;

     label3:
        $i3 = staticinvoke <android.media.AudioTrack: int getMinBufferSize(int,int,int)>(i0, b2, 2);

        $i4 = $i3 / 2;

        $i5 = $i4 / i1;

        return $i5;
    }

    private boolean isAudioLowLatencySupported()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        boolean $z0;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.audio.low_latency");

        return $z0;
    }

    private int getAudioLowLatencyOutputFrameSize()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        java.lang.String r1;
        android.media.AudioManager $r2;
        int $i0;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        r1 = virtualinvoke $r2.<android.media.AudioManager: java.lang.String getProperty(java.lang.String)>("android.media.property.OUTPUT_FRAMES_PER_BUFFER");

        if r1 != null goto label1;

        $i0 = 256;

        goto label2;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label2:
        return $i0;
    }

    private static boolean shouldUseAcousticEchoCanceler()
    {
        java.util.List r0;
        boolean $z0, $z1, $z2;
        java.lang.String[] $r1;
        java.lang.String $r2;

        $z0 = staticinvoke <com.android.org.chromium.media.AudioManagerAndroid: boolean runningOnJellyBeanOrHigher()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = <com.android.org.chromium.media.AudioManagerAndroid: java.lang.String[] SUPPORTED_AEC_MODELS>;

        r0 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r2 = <android.os.Build: java.lang.String MODEL>;

        $z1 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>($r2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $z2 = staticinvoke <android.media.audiofx.AcousticEchoCanceler: boolean isAvailable()>();

        return $z2;
    }

    private void checkIfCalledOnValidThread()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        return;
    }

    private void registerBluetoothIntentsIfNeeded()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        boolean $z0, $z1, $z2;
        boolean[] $r1;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $z0 = specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean hasPermission(java.lang.String)>("android.permission.BLUETOOTH");

        r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasBluetoothPermission> = $z0;

        $z1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasBluetoothPermission>;

        if $z1 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManagerAndroid", "Requires BLUETOOTH permission");

        return;

     label1:
        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean[] mAudioDevices>;

        $z2 = specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean hasBluetoothHeadset()>();

        $r1[3] = $z2;

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void registerForBluetoothHeadsetIntentBroadcast()>();

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void registerForBluetoothScoIntentBroadcast()>();

        return;
    }

    private void unregisterBluetoothIntentsIfNeeded()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        boolean $z0;
        android.media.AudioManager $r1;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $z0 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasBluetoothPermission>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        virtualinvoke $r1.<android.media.AudioManager: void stopBluetoothSco()>();

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void unregisterForBluetoothHeadsetIntentBroadcast()>();

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void unregisterForBluetoothScoIntentBroadcast()>();

     label1:
        return;
    }

    private void setSpeakerphoneOn(boolean)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        boolean z0, z1;
        android.media.AudioManager $r1, $r2;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        z1 = virtualinvoke $r1.<android.media.AudioManager: boolean isSpeakerphoneOn()>();

        if z1 != z0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        virtualinvoke $r2.<android.media.AudioManager: void setSpeakerphoneOn(boolean)>(z0);

        return;
    }

    private void setMicrophoneMute(boolean)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        boolean z0, z1;
        android.media.AudioManager $r1, $r2;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        z1 = virtualinvoke $r1.<android.media.AudioManager: boolean isMicrophoneMute()>();

        if z1 != z0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        virtualinvoke $r2.<android.media.AudioManager: void setMicrophoneMute(boolean)>(z0);

        return;
    }

    private boolean isMicrophoneMute()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        android.media.AudioManager $r1;
        boolean $z0;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        $z0 = virtualinvoke $r1.<android.media.AudioManager: boolean isMicrophoneMute()>();

        return $z0;
    }

    private boolean hasEarpiece()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        boolean $z0;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.telephony");

        return $z0;
    }

    private boolean hasWiredHeadset()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        android.media.AudioManager $r1;
        boolean $z0;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        $z0 = virtualinvoke $r1.<android.media.AudioManager: boolean isWiredHeadsetOn()>();

        return $z0;
    }

    private boolean hasPermission(java.lang.String)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        java.lang.String r1;
        android.content.Context $r2;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.Context mContext>;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $i2 = virtualinvoke $r2.<android.content.Context: int checkPermission(java.lang.String,int,int)>(r1, $i0, $i1);

        if $i2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean hasBluetoothHeadset()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        android.bluetooth.BluetoothManager r1;
        boolean $z0, $z1, $z2, $z3;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.bluetooth.BluetoothAdapter r4;
        int i0;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $z0 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasBluetoothPermission>;

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioManagerAndroid", "hasBluetoothHeadset() requires BLUETOOTH permission");

        return 0;

     label1:
        $z1 = staticinvoke <com.android.org.chromium.media.AudioManagerAndroid: boolean runningOnJellyBeanMR2OrHigher()>();

        if $z1 == 0 goto label2;

        $r2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("bluetooth");

        r1 = (android.bluetooth.BluetoothManager) $r3;

        r4 = virtualinvoke r1.<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothAdapter getAdapter()>();

        goto label3;

     label2:
        r4 = staticinvoke <android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()>();

     label3:
        if r4 != null goto label4;

        return 0;

     label4:
        i0 = virtualinvoke r4.<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)>(1);

        $z2 = virtualinvoke r4.<android.bluetooth.BluetoothAdapter: boolean isEnabled()>();

        if $z2 == 0 goto label5;

        if i0 != 2 goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        return $z3;
    }

    private void registerForWiredHeadsetIntentBroadcast()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        android.content.IntentFilter r1, $r2;
        com.android.org.chromium.media.AudioManagerAndroid$1 $r3;
        android.content.BroadcastReceiver $r4;
        android.content.Context $r5;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r2 = new android.content.IntentFilter;

        specialinvoke $r2.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.HEADSET_PLUG");

        r1 = $r2;

        $r3 = new com.android.org.chromium.media.AudioManagerAndroid$1;

        specialinvoke $r3.<com.android.org.chromium.media.AudioManagerAndroid$1: void <init>(com.android.org.chromium.media.AudioManagerAndroid)>(r0);

        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.BroadcastReceiver mWiredHeadsetReceiver> = $r3;

        $r5 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.Context mContext>;

        $r4 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.BroadcastReceiver mWiredHeadsetReceiver>;

        virtualinvoke $r5.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r4, r1);

        return;
    }

    private void unregisterForWiredHeadsetIntentBroadcast()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        android.content.BroadcastReceiver $r1;
        android.content.Context $r2;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.Context mContext>;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.BroadcastReceiver mWiredHeadsetReceiver>;

        virtualinvoke $r2.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r1);

        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.BroadcastReceiver mWiredHeadsetReceiver> = null;

        return;
    }

    private void registerForBluetoothHeadsetIntentBroadcast()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        android.content.IntentFilter r1, $r2;
        com.android.org.chromium.media.AudioManagerAndroid$2 $r3;
        android.content.BroadcastReceiver $r4;
        android.content.Context $r5;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r2 = new android.content.IntentFilter;

        specialinvoke $r2.<android.content.IntentFilter: void <init>(java.lang.String)>("android.bluetooth.headset.profile.action.CONNECTION_STATE_CHANGED");

        r1 = $r2;

        $r3 = new com.android.org.chromium.media.AudioManagerAndroid$2;

        specialinvoke $r3.<com.android.org.chromium.media.AudioManagerAndroid$2: void <init>(com.android.org.chromium.media.AudioManagerAndroid)>(r0);

        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.BroadcastReceiver mBluetoothHeadsetReceiver> = $r3;

        $r5 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.Context mContext>;

        $r4 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.BroadcastReceiver mBluetoothHeadsetReceiver>;

        virtualinvoke $r5.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r4, r1);

        return;
    }

    private void unregisterForBluetoothHeadsetIntentBroadcast()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        android.content.BroadcastReceiver $r1;
        android.content.Context $r2;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.Context mContext>;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.BroadcastReceiver mBluetoothHeadsetReceiver>;

        virtualinvoke $r2.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r1);

        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.BroadcastReceiver mBluetoothHeadsetReceiver> = null;

        return;
    }

    private void registerForBluetoothScoIntentBroadcast()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        android.content.IntentFilter r1, $r2;
        com.android.org.chromium.media.AudioManagerAndroid$3 $r3;
        android.content.BroadcastReceiver $r4;
        android.content.Context $r5;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r2 = new android.content.IntentFilter;

        specialinvoke $r2.<android.content.IntentFilter: void <init>(java.lang.String)>("android.media.ACTION_SCO_AUDIO_STATE_UPDATED");

        r1 = $r2;

        $r3 = new com.android.org.chromium.media.AudioManagerAndroid$3;

        specialinvoke $r3.<com.android.org.chromium.media.AudioManagerAndroid$3: void <init>(com.android.org.chromium.media.AudioManagerAndroid)>(r0);

        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.BroadcastReceiver mBluetoothScoReceiver> = $r3;

        $r5 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.Context mContext>;

        $r4 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.BroadcastReceiver mBluetoothScoReceiver>;

        virtualinvoke $r5.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r4, r1);

        return;
    }

    private void unregisterForBluetoothScoIntentBroadcast()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        android.content.BroadcastReceiver $r1;
        android.content.Context $r2;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.Context mContext>;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.BroadcastReceiver mBluetoothScoReceiver>;

        virtualinvoke $r2.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r1);

        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.BroadcastReceiver mBluetoothScoReceiver> = null;

        return;
    }

    private void startBluetoothSco()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        boolean $z0, $z1;
        int $i0, $i1;
        android.media.AudioManager $r1, $r2;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $z0 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasBluetoothPermission>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $i0 = r0.<com.android.org.chromium.media.AudioManagerAndroid: int mBluetoothScoState>;

        if $i0 == 1 goto label2;

        $i1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: int mBluetoothScoState>;

        if $i1 != 2 goto label3;

     label2:
        return;

     label3:
        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        $z1 = virtualinvoke $r1.<android.media.AudioManager: boolean isBluetoothScoOn()>();

        if $z1 == 0 goto label4;

        r0.<com.android.org.chromium.media.AudioManagerAndroid: int mBluetoothScoState> = 1;

        return;

     label4:
        r0.<com.android.org.chromium.media.AudioManagerAndroid: int mBluetoothScoState> = 2;

        $r2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        virtualinvoke $r2.<android.media.AudioManager: void startBluetoothSco()>();

        return;
    }

    private void stopBluetoothSco()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        boolean $z0, $z1;
        int $i0, $i1;
        android.media.AudioManager $r1, $r2;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $z0 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean mHasBluetoothPermission>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $i0 = r0.<com.android.org.chromium.media.AudioManagerAndroid: int mBluetoothScoState>;

        if $i0 == 1 goto label2;

        $i1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: int mBluetoothScoState>;

        if $i1 == 2 goto label2;

        return;

     label2:
        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        $z1 = virtualinvoke $r1.<android.media.AudioManager: boolean isBluetoothScoOn()>();

        if $z1 != 0 goto label3;

        staticinvoke <com.android.org.chromium.media.AudioManagerAndroid: void loge(java.lang.String)>("Unable to stop BT SCO since it is already disabled");

        return;

     label3:
        r0.<com.android.org.chromium.media.AudioManagerAndroid: int mBluetoothScoState> = 3;

        $r2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        virtualinvoke $r2.<android.media.AudioManager: void stopBluetoothSco()>();

        return;
    }

    private void setAudioDevice(int)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        int i0;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        i0 := @parameter0: int;

        if i0 != 3 goto label1;

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void startBluetoothSco()>();

        goto label2;

     label1:
        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void stopBluetoothSco()>();

     label2:
        tableswitch(i0)
        {
            case 0: goto label4;
            case 1: goto label5;
            case 2: goto label6;
            case 3: goto label3;
            default: goto label7;
        };

     label3:
        goto label8;

     label4:
        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void setSpeakerphoneOn(boolean)>(1);

        goto label8;

     label5:
        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void setSpeakerphoneOn(boolean)>(0);

        goto label8;

     label6:
        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void setSpeakerphoneOn(boolean)>(0);

        goto label8;

     label7:
        staticinvoke <com.android.org.chromium.media.AudioManagerAndroid: void loge(java.lang.String)>("Invalid audio device selection");

     label8:
        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void reportUpdate()>();

        return;
    }

    private static int selectDefaultDevice(boolean[])
    {
        boolean[] r0;
        boolean $z0, $z1;

        r0 := @parameter0: boolean[];

        $z0 = r0[1];

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r0[3];

        if $z1 == 0 goto label2;

        return 3;

     label2:
        return 0;
    }

    private boolean deviceHasBeenRequested()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r3 = r0.<com.android.org.chromium.media.AudioManagerAndroid: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = r0.<com.android.org.chromium.media.AudioManagerAndroid: int mRequestedAudioDevice>;

        if $i0 == -1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor r1;

     label4:
        return $z0;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void updateDeviceActivation()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        java.lang.Object r1, $r3, $r5;
        java.lang.Throwable r2, $r6;
        boolean[] $r4, r7;
        boolean $z0;
        int i0, i1;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r3 = r0.<com.android.org.chromium.media.AudioManagerAndroid: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        i0 = r0.<com.android.org.chromium.media.AudioManagerAndroid: int mRequestedAudioDevice>;

        $r4 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean[] mAudioDevices>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        r7 = (boolean[]) $r5;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        if i0 != -1 goto label6;

        staticinvoke <com.android.org.chromium.media.AudioManagerAndroid: void loge(java.lang.String)>("Unable to activate device since no device is selected");

        return;

     label6:
        if i0 == -2 goto label7;

        $z0 = r7[i0];

        if $z0 != 0 goto label8;

     label7:
        i1 = staticinvoke <com.android.org.chromium.media.AudioManagerAndroid: int selectDefaultDevice(boolean[])>(r7);

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void setAudioDevice(int)>(i1);

        goto label9;

     label8:
        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void setAudioDevice(int)>(i0);

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static int getNumOfAudioDevices(boolean[])
    {
        boolean[] r0;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: boolean[];

        i0 = 0;

        i1 = 0;

     label1:
        if i1 >= 4 goto label3;

        $z0 = r0[i1];

        if $z0 == 0 goto label2;

        i0 = i0 + 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return i0;
    }

    private void reportUpdate()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        java.lang.Object r1, $r4;
        java.util.ArrayList r2, $r5;
        int i0;
        java.lang.Throwable r3, $r9;
        boolean[] $r6;
        boolean $z0;
        java.lang.String[] $r7;
        java.lang.String $r8;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r4 = r0.<com.android.org.chromium.media.AudioManagerAndroid: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        i0 = 0;

     label2:
        if i0 >= 4 goto label4;

        $r6 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean[] mAudioDevices>;

        $z0 = $r6[i0];

        if $z0 == 0 goto label3;

        $r7 = <com.android.org.chromium.media.AudioManagerAndroid: java.lang.String[] DEVICE_NAMES>;

        $r8 = $r7[i0];

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r8);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r1;

     label7:
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void logDeviceInfo()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r11, $r12, $r13, $r15, $r16, $r18, $r19, $r20, $r22, $r23, $r24, $r26, $r27, $r28, $r30, $r31, $r33, $r34, $r35, $r37, $r38, $r39;
        int $i0;
        java.lang.String $r6, $r10, $r14, $r17, $r21, $r25, $r29, $r32, $r36, $r40;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Android SDK: ");

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Release: ");

        $r6 = <android.os.Build$VERSION: java.lang.String RELEASE>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Brand: ");

        $r10 = <android.os.Build: java.lang.String BRAND>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CPU_ABI: ");

        $r14 = <android.os.Build: java.lang.String CPU_ABI>;

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device: ");

        $r17 = <android.os.Build: java.lang.String DEVICE>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Id: ");

        $r21 = <android.os.Build: java.lang.String ID>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hardware: ");

        $r25 = <android.os.Build: java.lang.String HARDWARE>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Manufacturer: ");

        $r29 = <android.os.Build: java.lang.String MANUFACTURER>;

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r31 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Model: ");

        $r32 = <android.os.Build: java.lang.String MODEL>;

        $r37 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r35 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Product: ");

        $r36 = <android.os.Build: java.lang.String PRODUCT>;

        $r39 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.org.chromium.media.AudioManagerAndroid: void logd(java.lang.String)>($r40);

        return;
    }

    private static void logd(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AudioManagerAndroid", r0);

        return;
    }

    private static void loge(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioManagerAndroid", r0);

        return;
    }

    private void startObservingVolumeChanges()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        android.os.HandlerThread $r1, $r2, $r3, $r6;
        com.android.org.chromium.media.AudioManagerAndroid$4 $r4;
        android.os.Handler $r5;
        android.os.Looper $r7;
        android.database.ContentObserver $r8;
        android.net.Uri $r9;
        android.content.ContentResolver $r10;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.os.HandlerThread mSettingsObserverThread>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new android.os.HandlerThread;

        specialinvoke $r2.<android.os.HandlerThread: void <init>(java.lang.String)>("SettingsObserver");

        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.os.HandlerThread mSettingsObserverThread> = $r2;

        $r3 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.os.HandlerThread mSettingsObserverThread>;

        virtualinvoke $r3.<android.os.HandlerThread: void start()>();

        $r4 = new com.android.org.chromium.media.AudioManagerAndroid$4;

        $r5 = new android.os.Handler;

        $r6 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.os.HandlerThread mSettingsObserverThread>;

        $r7 = virtualinvoke $r6.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>($r7);

        specialinvoke $r4.<com.android.org.chromium.media.AudioManagerAndroid$4: void <init>(com.android.org.chromium.media.AudioManagerAndroid,android.os.Handler)>(r0, $r5);

        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.database.ContentObserver mSettingsObserver> = $r4;

        $r10 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.ContentResolver mContentResolver>;

        $r9 = <android.provider.Settings$System: android.net.Uri CONTENT_URI>;

        $r8 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.database.ContentObserver mSettingsObserver>;

        virtualinvoke $r10.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r9, 1, $r8);

        return;
    }

    private void stopObservingVolumeChanges()
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        java.lang.InterruptedException r1, $r7;
        android.os.HandlerThread $r2, $r5, $r6;
        android.database.ContentObserver $r3;
        android.content.ContentResolver $r4;

        r0 := @this: com.android.org.chromium.media.AudioManagerAndroid;

        $r2 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.os.HandlerThread mSettingsObserverThread>;

        if $r2 != null goto label1;

        return;

     label1:
        $r4 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.content.ContentResolver mContentResolver>;

        $r3 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.database.ContentObserver mSettingsObserver>;

        virtualinvoke $r4.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r3);

        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.database.ContentObserver mSettingsObserver> = null;

        $r5 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.os.HandlerThread mSettingsObserverThread>;

        virtualinvoke $r5.<android.os.HandlerThread: boolean quit()>();

     label2:
        $r6 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.os.HandlerThread mSettingsObserverThread>;

        virtualinvoke $r6.<android.os.HandlerThread: void join()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r1 = $r7;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioManagerAndroid", "Thread.join() exception: ", r1);

     label5:
        r0.<com.android.org.chromium.media.AudioManagerAndroid: android.os.HandlerThread mSettingsObserverThread> = null;

        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    private native void nativeSetMute(long, boolean);

    static java.lang.Object access$100(com.android.org.chromium.media.AudioManagerAndroid)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.org.chromium.media.AudioManagerAndroid;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: java.lang.Object mLock>;

        return $r1;
    }

    static boolean[] access$200(com.android.org.chromium.media.AudioManagerAndroid)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        boolean[] $r1;

        r0 := @parameter0: com.android.org.chromium.media.AudioManagerAndroid;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean[] mAudioDevices>;

        return $r1;
    }

    static boolean access$300(com.android.org.chromium.media.AudioManagerAndroid)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        boolean $z0;

        r0 := @parameter0: com.android.org.chromium.media.AudioManagerAndroid;

        $z0 = specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean hasEarpiece()>();

        return $z0;
    }

    static void access$400(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.org.chromium.media.AudioManagerAndroid: void loge(java.lang.String)>(r0);

        return;
    }

    static boolean access$500(com.android.org.chromium.media.AudioManagerAndroid)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        boolean $z0;

        r0 := @parameter0: com.android.org.chromium.media.AudioManagerAndroid;

        $z0 = specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: boolean deviceHasBeenRequested()>();

        return $z0;
    }

    static void access$600(com.android.org.chromium.media.AudioManagerAndroid)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;

        r0 := @parameter0: com.android.org.chromium.media.AudioManagerAndroid;

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void updateDeviceActivation()>();

        return;
    }

    static int access$702(com.android.org.chromium.media.AudioManagerAndroid, int)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        int i0;

        r0 := @parameter0: com.android.org.chromium.media.AudioManagerAndroid;

        i0 := @parameter1: int;

        r0.<com.android.org.chromium.media.AudioManagerAndroid: int mBluetoothScoState> = i0;

        return i0;
    }

    static android.media.AudioManager access$800(com.android.org.chromium.media.AudioManagerAndroid)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        android.media.AudioManager $r1;

        r0 := @parameter0: com.android.org.chromium.media.AudioManagerAndroid;

        $r1 = r0.<com.android.org.chromium.media.AudioManagerAndroid: android.media.AudioManager mAudioManager>;

        return $r1;
    }

    static long access$900(com.android.org.chromium.media.AudioManagerAndroid)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        long $l0;

        r0 := @parameter0: com.android.org.chromium.media.AudioManagerAndroid;

        $l0 = r0.<com.android.org.chromium.media.AudioManagerAndroid: long mNativeAudioManagerAndroid>;

        return $l0;
    }

    static void access$1000(com.android.org.chromium.media.AudioManagerAndroid, long, boolean)
    {
        com.android.org.chromium.media.AudioManagerAndroid r0;
        long l0;
        boolean z0;

        r0 := @parameter0: com.android.org.chromium.media.AudioManagerAndroid;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.org.chromium.media.AudioManagerAndroid: void nativeSetMute(long,boolean)>(l0, z0);

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;
        java.lang.Integer[] $r2;
        java.lang.Integer $r3, $r4, $r5, $r6;

        <com.android.org.chromium.media.AudioManagerAndroid: int DEFAULT_FRAME_PER_BUFFER> = 256;

        <com.android.org.chromium.media.AudioManagerAndroid: int DEFAULT_SAMPLING_RATE> = 44100;

        <com.android.org.chromium.media.AudioManagerAndroid: int STATE_BLUETOOTH_SCO_TURNING_OFF> = 3;

        <com.android.org.chromium.media.AudioManagerAndroid: int STATE_BLUETOOTH_SCO_TURNING_ON> = 2;

        <com.android.org.chromium.media.AudioManagerAndroid: int STATE_BLUETOOTH_SCO_ON> = 1;

        <com.android.org.chromium.media.AudioManagerAndroid: int STATE_BLUETOOTH_SCO_OFF> = 0;

        <com.android.org.chromium.media.AudioManagerAndroid: int STATE_BLUETOOTH_SCO_INVALID> = -1;

        <com.android.org.chromium.media.AudioManagerAndroid: int DEVICE_COUNT> = 4;

        <com.android.org.chromium.media.AudioManagerAndroid: int DEVICE_BLUETOOTH_HEADSET> = 3;

        <com.android.org.chromium.media.AudioManagerAndroid: int DEVICE_EARPIECE> = 2;

        <com.android.org.chromium.media.AudioManagerAndroid: int DEVICE_WIRED_HEADSET> = 1;

        <com.android.org.chromium.media.AudioManagerAndroid: int DEVICE_SPEAKERPHONE> = 0;

        <com.android.org.chromium.media.AudioManagerAndroid: int DEVICE_INVALID> = -1;

        <com.android.org.chromium.media.AudioManagerAndroid: int DEVICE_DEFAULT> = -2;

        <com.android.org.chromium.media.AudioManagerAndroid: boolean DEBUG> = 0;

        <com.android.org.chromium.media.AudioManagerAndroid: java.lang.String TAG> = "AudioManagerAndroid";

        $r0 = newarray (java.lang.String)[8];

        $r0[0] = "GT-I9300";

        $r0[1] = "GT-I9500";

        $r0[2] = "GT-N7105";

        $r0[3] = "Nexus 4";

        $r0[4] = "Nexus 5";

        $r0[5] = "Nexus 7";

        $r0[6] = "SM-N9005";

        $r0[7] = "SM-T310";

        <com.android.org.chromium.media.AudioManagerAndroid: java.lang.String[] SUPPORTED_AEC_MODELS> = $r0;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "Speakerphone";

        $r1[1] = "Wired headset";

        $r1[2] = "Headset earpiece";

        $r1[3] = "Bluetooth headset";

        <com.android.org.chromium.media.AudioManagerAndroid: java.lang.String[] DEVICE_NAMES> = $r1;

        $r2 = newarray (java.lang.Integer)[4];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r2[2] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r2[3] = $r6;

        <com.android.org.chromium.media.AudioManagerAndroid: java.lang.Integer[] VALID_DEVICES> = $r2;

        return;
    }
}
