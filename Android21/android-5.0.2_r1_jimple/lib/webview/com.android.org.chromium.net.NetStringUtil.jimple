public class com.android.org.chromium.net.NetStringUtil extends java.lang.Object
{

    public void <init>()
    {
        com.android.org.chromium.net.NetStringUtil r0;

        r0 := @this: com.android.org.chromium.net.NetStringUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.String convertToUnicode(java.nio.ByteBuffer, java.lang.String)
    {
        java.nio.ByteBuffer r0;
        java.lang.String r1, $r5;
        java.nio.charset.Charset r2;
        java.nio.charset.CharsetDecoder r3;
        java.nio.CharBuffer $r4;
        java.lang.Exception $r6;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.lang.String;

     label1:
        r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r1);

        r3 = virtualinvoke r2.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r4 = virtualinvoke r3.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>(r0);

        $r5 = virtualinvoke $r4.<java.nio.CharBuffer: java.lang.String toString()>();

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static java.lang.String convertToUnicodeAndNormalize(java.nio.ByteBuffer, java.lang.String)
    {
        java.nio.ByteBuffer r0;
        java.lang.String r1, r2, $r4;
        java.text.Normalizer$Form $r3;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <com.android.org.chromium.net.NetStringUtil: java.lang.String convertToUnicode(java.nio.ByteBuffer,java.lang.String)>(r0, r1);

        if r2 != null goto label1;

        return r2;

     label1:
        $r3 = <java.text.Normalizer$Form: java.text.Normalizer$Form NFC>;

        $r4 = staticinvoke <java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>(r2, $r3);

        return $r4;
    }

    private static java.lang.String convertToUnicodeWithSubstitutions(java.nio.ByteBuffer, java.lang.String)
    {
        java.nio.ByteBuffer r0;
        java.lang.String r1, $r10;
        java.nio.charset.Charset r2;
        java.nio.charset.CharsetDecoder r3;
        java.nio.charset.CodingErrorAction $r4, $r6;
        java.nio.CharBuffer $r9;
        java.lang.Exception $r11;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.lang.String;

     label1:
        r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r1);

        r3 = virtualinvoke r2.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r4 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        virtualinvoke r3.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r4);

        $r6 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        virtualinvoke r3.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r6);

        virtualinvoke r3.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)>("\ufffd");

        $r9 = virtualinvoke r3.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>(r0);

        $r10 = virtualinvoke $r9.<java.nio.CharBuffer: java.lang.String toString()>();

     label2:
        return $r10;

     label3:
        $r11 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
