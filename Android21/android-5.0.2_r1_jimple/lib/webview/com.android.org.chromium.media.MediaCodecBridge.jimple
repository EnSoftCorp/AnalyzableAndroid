class com.android.org.chromium.media.MediaCodecBridge extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final int MEDIA_CODEC_OK;
    private static final int MEDIA_CODEC_DEQUEUE_INPUT_AGAIN_LATER;
    private static final int MEDIA_CODEC_DEQUEUE_OUTPUT_AGAIN_LATER;
    private static final int MEDIA_CODEC_OUTPUT_BUFFERS_CHANGED;
    private static final int MEDIA_CODEC_OUTPUT_FORMAT_CHANGED;
    private static final int MEDIA_CODEC_INPUT_END_OF_STREAM;
    private static final int MEDIA_CODEC_OUTPUT_END_OF_STREAM;
    private static final int MEDIA_CODEC_NO_KEY;
    private static final int MEDIA_CODEC_STOPPED;
    private static final int MEDIA_CODEC_ERROR;
    private static final int MEDIA_CODEC_DECODER;
    private static final int MEDIA_CODEC_ENCODER;
    private static final int MAX_ADAPTIVE_PLAYBACK_WIDTH;
    private static final int MAX_ADAPTIVE_PLAYBACK_HEIGHT;
    private static final long MAX_PRESENTATION_TIMESTAMP_SHIFT_US;
    private java.nio.ByteBuffer[] mInputBuffers;
    private java.nio.ByteBuffer[] mOutputBuffers;
    private android.media.MediaCodec mMediaCodec;
    private android.media.AudioTrack mAudioTrack;
    private boolean mFlushed;
    private long mLastPresentationTimeUs;
    private java.lang.String mMime;
    private boolean mAdaptivePlaybackSupported;
    static final boolean $assertionsDisabled;

    private static com.android.org.chromium.media.MediaCodecBridge$CodecInfo[] getCodecsInfo()
    {
        java.util.HashMap r0, r1, r5, $r6, $r7, $r19;
        int i0, i1, i3, $i4, $i5, $i6, $i7, $i8;
        android.media.MediaCodecInfo r2;
        byte b2, $b9;
        java.lang.String r3, $r14, $r15, $r16;
        java.lang.String[] r4;
        java.util.ArrayList $r8, r20;
        java.util.Collection $r9, $r10;
        java.lang.Object[] $r11;
        com.android.org.chromium.media.MediaCodecBridge$CodecInfo[] $r12, $r13;
        boolean $z2, $z3, $z4;
        com.android.org.chromium.media.MediaCodecBridge$CodecInfo $r17;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0 = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r1 = $r7;

        i0 = staticinvoke <android.media.MediaCodecList: int getCodecCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label9;

        r2 = staticinvoke <android.media.MediaCodecList: android.media.MediaCodecInfo getCodecInfoAt(int)>(i1);

        $z2 = virtualinvoke r2.<android.media.MediaCodecInfo: boolean isEncoder()>();

        if $z2 == 0 goto label2;

        $b9 = 1;

        goto label3;

     label2:
        $b9 = 0;

     label3:
        b2 = $b9;

        r3 = virtualinvoke r2.<android.media.MediaCodecInfo: java.lang.String getName()>();

        r4 = virtualinvoke r2.<android.media.MediaCodecInfo: java.lang.String[] getSupportedTypes()>();

        i3 = 0;

     label4:
        $i8 = lengthof r4;

        if i3 >= $i8 goto label8;

        $z3 = virtualinvoke r2.<android.media.MediaCodecInfo: boolean isEncoder()>();

        if $z3 == 0 goto label5;

        $r19 = r0;

        goto label6;

     label5:
        $r19 = r1;

     label6:
        r5 = $r19;

        $r14 = r4[i3];

        $z4 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r14);

        if $z4 != 0 goto label7;

        $r16 = r4[i3];

        $r17 = new com.android.org.chromium.media.MediaCodecBridge$CodecInfo;

        $r15 = r4[i3];

        specialinvoke $r17.<com.android.org.chromium.media.MediaCodecBridge$CodecInfo: void <init>(java.lang.String,java.lang.String,int,com.android.org.chromium.media.MediaCodecBridge$1)>($r15, r3, b2, null);

        interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17);

     label7:
        i3 = i3 + 1;

        goto label4;

     label8:
        i1 = i1 + 1;

        goto label1;

     label9:
        $r8 = new java.util.ArrayList;

        $i4 = interfaceinvoke r1.<java.util.Map: int size()>();

        $i5 = interfaceinvoke r0.<java.util.Map: int size()>();

        $i6 = $i4 + $i5;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i6);

        r20 = $r8;

        $r9 = interfaceinvoke r0.<java.util.Map: java.util.Collection values()>();

        virtualinvoke r20.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r9);

        $r10 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();

        virtualinvoke r20.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r10);

        $i7 = virtualinvoke r20.<java.util.ArrayList: int size()>();

        $r12 = newarray (com.android.org.chromium.media.MediaCodecBridge$CodecInfo)[$i7];

        $r11 = virtualinvoke r20.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r13 = (com.android.org.chromium.media.MediaCodecBridge$CodecInfo[]) $r11;

        return $r13;
    }

    private static java.lang.String getDecoderNameForMime(java.lang.String)
    {
        java.lang.String r0, $r3, $r4;
        int i0, i1, i2, $i3;
        android.media.MediaCodecInfo r1;
        java.lang.String[] r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.media.MediaCodecList: int getCodecCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r1 = staticinvoke <android.media.MediaCodecList: android.media.MediaCodecInfo getCodecInfoAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.media.MediaCodecInfo: boolean isEncoder()>();

        if $z0 == 0 goto label2;

        goto label5;

     label2:
        r2 = virtualinvoke r1.<android.media.MediaCodecInfo: java.lang.String[] getSupportedTypes()>();

        i2 = 0;

     label3:
        $i3 = lengthof r2;

        if i2 >= $i3 goto label5;

        $r3 = r2[i2];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label4;

        $r4 = virtualinvoke r1.<android.media.MediaCodecInfo: java.lang.String getName()>();

        return $r4;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return null;
    }

    private void <init>(android.media.MediaCodec, java.lang.String, boolean)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        android.media.MediaCodec r1;
        java.lang.String r2;
        boolean z0, $z1;
        java.lang.AssertionError $r3;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        r1 := @parameter0: android.media.MediaCodec;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z1 = <com.android.org.chromium.media.MediaCodecBridge: boolean $assertionsDisabled>;

        if $z1 != 0 goto label1;

        if r1 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec> = r1;

        r0.<com.android.org.chromium.media.MediaCodecBridge: java.lang.String mMime> = r2;

        r0.<com.android.org.chromium.media.MediaCodecBridge: long mLastPresentationTimeUs> = 0L;

        r0.<com.android.org.chromium.media.MediaCodecBridge: boolean mFlushed> = 1;

        r0.<com.android.org.chromium.media.MediaCodecBridge: boolean mAdaptivePlaybackSupported> = z0;

        return;
    }

    private static com.android.org.chromium.media.MediaCodecBridge create(java.lang.String, boolean, int)
    {
        java.lang.String r0, r2, $r7, $r16;
        boolean z0, z1, $z2;
        int i0, $i1, $i2;
        android.media.MediaCodec r1, r3;
        com.android.org.chromium.media.MediaCodecBridge $r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r17;
        java.lang.Exception $r10, r18;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        if z0 == 0 goto label01;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 >= 18 goto label01;

        return null;

     label01:
        r1 = null;

        z1 = 0;

     label02:
        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("video");

        if $z2 == 0 goto label06;

        if z0 == 0 goto label06;

        if i0 != 0 goto label06;

        r2 = staticinvoke <com.android.org.chromium.media.MediaCodecBridge: java.lang.String getDecoderNameForMime(java.lang.String)>(r0);

        if r2 != null goto label04;

     label03:
        return null;

     label04:
        $i1 = <android.os.Build$VERSION: int SDK_INT>;

        if $i1 < 19 goto label05;

        r3 = staticinvoke <android.media.MediaCodec: android.media.MediaCodec createByCodecName(java.lang.String)>(r2);

        z1 = staticinvoke <com.android.org.chromium.media.MediaCodecBridge: boolean codecSupportsAdaptivePlayback(android.media.MediaCodec,java.lang.String)>(r3, r0);

        virtualinvoke r3.<android.media.MediaCodec: void release()>();

     label05:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".secure");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = staticinvoke <android.media.MediaCodec: android.media.MediaCodec createByCodecName(java.lang.String)>($r7);

        goto label08;

     label06:
        if i0 != 1 goto label07;

        r1 = staticinvoke <android.media.MediaCodec: android.media.MediaCodec createEncoderByType(java.lang.String)>(r0);

        goto label08;

     label07:
        r1 = staticinvoke <android.media.MediaCodec: android.media.MediaCodec createDecoderByType(java.lang.String)>(r0);

        z1 = staticinvoke <com.android.org.chromium.media.MediaCodecBridge: boolean codecSupportsAdaptivePlayback(android.media.MediaCodec,java.lang.String)>(r1, r0);

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

        r18 = $r10;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create MediaCodec: ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isSecure: ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", direction: ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecBridge", $r16, r18);

     label10:
        if r1 != null goto label11;

        return null;

     label11:
        $r4 = new com.android.org.chromium.media.MediaCodecBridge;

        specialinvoke $r4.<com.android.org.chromium.media.MediaCodecBridge: void <init>(android.media.MediaCodec,java.lang.String,boolean)>(r1, r0, z1);

        return $r4;

        catch java.lang.Exception from label02 to label03 with label09;
        catch java.lang.Exception from label04 to label08 with label09;
    }

    private void release()
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        java.lang.IllegalStateException r1, $r5;
        android.media.MediaCodec $r2;
        android.media.AudioTrack $r3, $r4;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

     label1:
        $r2 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r2.<android.media.MediaCodec: void release()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecBridge", "Cannot release media codec", r1);

     label4:
        r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec> = null;

        $r3 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        if $r3 == null goto label5;

        $r4 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        virtualinvoke $r4.<android.media.AudioTrack: void release()>();

     label5:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    private boolean start()
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        java.lang.IllegalStateException r1, $r5;
        android.media.MediaCodec $r2, $r3;
        java.nio.ByteBuffer[] $r4;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

     label1:
        $r2 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r2.<android.media.MediaCodec: void start()>();

        $r3 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        $r4 = virtualinvoke $r3.<android.media.MediaCodec: java.nio.ByteBuffer[] getInputBuffers()>();

        r0.<com.android.org.chromium.media.MediaCodecBridge: java.nio.ByteBuffer[] mInputBuffers> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecBridge", "Cannot start the media codec", r1);

        return 0;

     label4:
        return 1;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    private com.android.org.chromium.media.MediaCodecBridge$DequeueInputResult dequeueInputBuffer(long)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        long l0;
        byte b1;
        int i2, i3;
        android.media.MediaCodec $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0;
        com.android.org.chromium.media.MediaCodecBridge$DequeueInputResult $r6;
        java.lang.AssertionError $r7;
        java.lang.Exception $r8, r9;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        l0 := @parameter0: long;

        b1 = 9;

        i2 = -1;

     label1:
        $r1 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        i3 = virtualinvoke $r1.<android.media.MediaCodec: int dequeueInputBuffer(long)>(l0);

        if i3 < 0 goto label2;

        b1 = 0;

        i2 = i3;

        goto label4;

     label2:
        if i3 != -1 goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaCodecBridge", "dequeueInputBuffer: MediaCodec.INFO_TRY_AGAIN_LATER");

        b1 = 1;

        goto label4;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected index_or_status: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaCodecBridge", $r5);

        $z0 = <com.android.org.chromium.media.MediaCodecBridge: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        r9 = $r8;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecBridge", "Failed to dequeue input buffer", r9);

     label6:
        $r6 = new com.android.org.chromium.media.MediaCodecBridge$DequeueInputResult;

        specialinvoke $r6.<com.android.org.chromium.media.MediaCodecBridge$DequeueInputResult: void <init>(int,int,com.android.org.chromium.media.MediaCodecBridge$1)>(b1, i2, null);

        return $r6;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    private int flush()
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        java.lang.IllegalStateException r1, $r6;
        android.media.AudioTrack $r2, $r4, $r5;
        android.media.MediaCodec $r3;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

     label1:
        r0.<com.android.org.chromium.media.MediaCodecBridge: boolean mFlushed> = 1;

        $r2 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        if $r2 == null goto label2;

        $r4 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        virtualinvoke $r4.<android.media.AudioTrack: void pause()>();

        $r5 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        virtualinvoke $r5.<android.media.AudioTrack: void flush()>();

     label2:
        $r3 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r3.<android.media.MediaCodec: void flush()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecBridge", "Failed to flush MediaCodec", r1);

        return 9;

     label5:
        return 0;

        catch java.lang.IllegalStateException from label1 to label3 with label4;
    }

    private void stop()
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        android.media.MediaCodec $r1;
        android.media.AudioTrack $r2, $r3;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        $r1 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r1.<android.media.MediaCodec: void stop()>();

        $r2 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        virtualinvoke $r3.<android.media.AudioTrack: void pause()>();

     label1:
        return;
    }

    private int getOutputHeight()
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        android.media.MediaCodec $r1;
        android.media.MediaFormat $r2;
        int $i0;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        $r1 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        $r2 = virtualinvoke $r1.<android.media.MediaCodec: android.media.MediaFormat getOutputFormat()>();

        $i0 = virtualinvoke $r2.<android.media.MediaFormat: int getInteger(java.lang.String)>("height");

        return $i0;
    }

    private int getOutputWidth()
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        android.media.MediaCodec $r1;
        android.media.MediaFormat $r2;
        int $i0;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        $r1 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        $r2 = virtualinvoke $r1.<android.media.MediaCodec: android.media.MediaFormat getOutputFormat()>();

        $i0 = virtualinvoke $r2.<android.media.MediaFormat: int getInteger(java.lang.String)>("width");

        return $i0;
    }

    private java.nio.ByteBuffer getInputBuffer(int)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        int i0;
        java.nio.ByteBuffer[] $r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.org.chromium.media.MediaCodecBridge: java.nio.ByteBuffer[] mInputBuffers>;

        $r2 = $r1[i0];

        return $r2;
    }

    private java.nio.ByteBuffer getOutputBuffer(int)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        int i0;
        java.nio.ByteBuffer[] $r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.org.chromium.media.MediaCodecBridge: java.nio.ByteBuffer[] mOutputBuffers>;

        $r2 = $r1[i0];

        return $r2;
    }

    private int getInputBuffersCount()
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        java.nio.ByteBuffer[] $r1;
        int $i0;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        $r1 = r0.<com.android.org.chromium.media.MediaCodecBridge: java.nio.ByteBuffer[] mInputBuffers>;

        $i0 = lengthof $r1;

        return $i0;
    }

    private int getOutputBuffersCount()
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        java.nio.ByteBuffer[] $r1, $r2;
        int $i0;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        $r1 = r0.<com.android.org.chromium.media.MediaCodecBridge: java.nio.ByteBuffer[] mOutputBuffers>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.org.chromium.media.MediaCodecBridge: java.nio.ByteBuffer[] mOutputBuffers>;

        $i0 = lengthof $r2;

        goto label2;

     label1:
        $i0 = -1;

     label2:
        return $i0;
    }

    private int getOutputBuffersCapacity()
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        java.nio.ByteBuffer[] $r1, $r2;
        java.nio.ByteBuffer $r3;
        int $i0;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        $r1 = r0.<com.android.org.chromium.media.MediaCodecBridge: java.nio.ByteBuffer[] mOutputBuffers>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.org.chromium.media.MediaCodecBridge: java.nio.ByteBuffer[] mOutputBuffers>;

        $r3 = $r2[0];

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int capacity()>();

        goto label2;

     label1:
        $i0 = -1;

     label2:
        return $i0;
    }

    private boolean getOutputBuffers()
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        java.lang.IllegalStateException r1, $r4;
        android.media.MediaCodec $r2;
        java.nio.ByteBuffer[] $r3;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

     label1:
        $r2 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        $r3 = virtualinvoke $r2.<android.media.MediaCodec: java.nio.ByteBuffer[] getOutputBuffers()>();

        r0.<com.android.org.chromium.media.MediaCodecBridge: java.nio.ByteBuffer[] mOutputBuffers> = $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecBridge", "Cannot get output buffers", r1);

        return 0;

     label4:
        return 1;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    private int queueInputBuffer(int, int, int, long, int)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        int i0, i1, i2, i4;
        long l3;
        java.lang.Exception r1, $r3;
        android.media.MediaCodec $r2;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        l3 := @parameter3: long;

        i4 := @parameter4: int;

        specialinvoke r0.<com.android.org.chromium.media.MediaCodecBridge: void resetLastPresentationTimeIfNeeded(long)>(l3);

     label1:
        $r2 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r2.<android.media.MediaCodec: void queueInputBuffer(int,int,int,long,int)>(i0, i1, i2, l3, i4);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecBridge", "Failed to queue input buffer", r1);

        return 9;

     label4:
        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void setVideoBitrate(int)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        int i0;
        android.os.Bundle r1, $r2;
        android.media.MediaCodec $r3;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        i0 := @parameter0: int;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("video-bitrate", i0);

        $r3 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r3.<android.media.MediaCodec: void setParameters(android.os.Bundle)>(r1);

        return;
    }

    private void requestKeyFrameSoon()
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        android.os.Bundle r1, $r2;
        android.media.MediaCodec $r3;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>("request-sync", 0);

        $r3 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r3.<android.media.MediaCodec: void setParameters(android.os.Bundle)>(r1);

        return;
    }

    private int queueSecureInputBuffer(int, int, byte[], byte[], int[], int[], int, long)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        int i0, i1, i2, $i5, $i6;
        byte[] r1, r2;
        int[] r3, r4;
        long l3;
        android.media.MediaCodec$CryptoInfo r5, $r6;
        android.media.MediaCodec $r7;
        android.media.MediaCodec$CryptoException $r8, r14;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.String $r11;
        java.lang.IllegalStateException $r13, r15;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        r2 := @parameter3: byte[];

        r3 := @parameter4: int[];

        r4 := @parameter5: int[];

        i2 := @parameter6: int;

        l3 := @parameter7: long;

        specialinvoke r0.<com.android.org.chromium.media.MediaCodecBridge: void resetLastPresentationTimeIfNeeded(long)>(l3);

     label1:
        $r6 = new android.media.MediaCodec$CryptoInfo;

        specialinvoke $r6.<android.media.MediaCodec$CryptoInfo: void <init>()>();

        r5 = $r6;

        virtualinvoke r5.<android.media.MediaCodec$CryptoInfo: void set(int,int[],int[],byte[],byte[],int)>(i2, r3, r4, r2, r1, 1);

        $r7 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r7.<android.media.MediaCodec: void queueSecureInputBuffer(int,int,android.media.MediaCodec$CryptoInfo,long,int)>(i0, i1, r5, l3, 0);

     label2:
        goto label6;

     label3:
        $r8 := @caughtexception;

        r14 = $r8;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecBridge", "Failed to queue secure input buffer", r14);

        $i5 = virtualinvoke r14.<android.media.MediaCodec$CryptoException: int getErrorCode()>();

        if $i5 != 1 goto label4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaCodecBridge", "MediaCodec.CryptoException.ERROR_NO_KEY");

        return 7;

     label4:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MediaCodec.CryptoException with error code ");

        $i6 = virtualinvoke r14.<android.media.MediaCodec$CryptoException: int getErrorCode()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaCodecBridge", $r11);

        return 9;

     label5:
        $r13 := @caughtexception;

        r15 = $r13;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecBridge", "Failed to queue secure input buffer", r15);

        return 9;

     label6:
        return 0;

        catch android.media.MediaCodec$CryptoException from label1 to label2 with label3;
        catch java.lang.IllegalStateException from label1 to label2 with label5;
    }

    private void releaseOutputBuffer(int, boolean)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        int i0;
        boolean z0;
        java.lang.IllegalStateException r1, $r3;
        android.media.MediaCodec $r2;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r2.<android.media.MediaCodec: void releaseOutputBuffer(int,boolean)>(i0, z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecBridge", "Failed to release output buffer", r1);

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    private com.android.org.chromium.media.MediaCodecBridge$DequeueOutputResult dequeueOutputBuffer(long)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        long l0, $l4, $l5, $l7, $l9, $l13;
        android.media.MediaCodec$BufferInfo r1, $r2;
        byte b1, $b6;
        int i2, i3, $i10, $i11, $i12;
        android.media.MediaCodec $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        com.android.org.chromium.media.MediaCodecBridge$DequeueOutputResult $r8;
        boolean $z0;
        java.lang.AssertionError $r9;
        java.lang.IllegalStateException $r10, r11;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        l0 := @parameter0: long;

        $r2 = new android.media.MediaCodec$BufferInfo;

        specialinvoke $r2.<android.media.MediaCodec$BufferInfo: void <init>()>();

        r1 = $r2;

        b1 = 9;

        i2 = -1;

     label1:
        $r3 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        i3 = virtualinvoke $r3.<android.media.MediaCodec: int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long)>(r1, l0);

        $l5 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $l4 = r0.<com.android.org.chromium.media.MediaCodecBridge: long mLastPresentationTimeUs>;

        $b6 = $l5 cmp $l4;

        if $b6 >= 0 goto label2;

        $l13 = r0.<com.android.org.chromium.media.MediaCodecBridge: long mLastPresentationTimeUs>;

        r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs> = $l13;

     label2:
        $l7 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        r0.<com.android.org.chromium.media.MediaCodecBridge: long mLastPresentationTimeUs> = $l7;

        if i3 < 0 goto label3;

        b1 = 0;

        i2 = i3;

        goto label7;

     label3:
        if i3 != -3 goto label4;

        b1 = 3;

        goto label7;

     label4:
        if i3 != -2 goto label5;

        b1 = 4;

        goto label7;

     label5:
        if i3 != -1 goto label6;

        b1 = 2;

        goto label7;

     label6:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected index_or_status: ");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaCodecBridge", $r7);

        $z0 = <com.android.org.chromium.media.MediaCodecBridge: boolean $assertionsDisabled>;

        if $z0 != 0 goto label7;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label7:
        goto label9;

     label8:
        $r10 := @caughtexception;

        r11 = $r10;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecBridge", "Failed to dequeue output buffer", r11);

     label9:
        $r8 = new com.android.org.chromium.media.MediaCodecBridge$DequeueOutputResult;

        $i11 = r1.<android.media.MediaCodec$BufferInfo: int flags>;

        $i12 = r1.<android.media.MediaCodec$BufferInfo: int offset>;

        $l9 = r1.<android.media.MediaCodec$BufferInfo: long presentationTimeUs>;

        $i10 = r1.<android.media.MediaCodec$BufferInfo: int size>;

        specialinvoke $r8.<com.android.org.chromium.media.MediaCodecBridge$DequeueOutputResult: void <init>(int,int,int,int,long,int,com.android.org.chromium.media.MediaCodecBridge$1)>(b1, i2, $i11, $i12, $l9, $i10, null);

        return $r8;

        catch java.lang.IllegalStateException from label1 to label7 with label8;
    }

    private boolean configureVideo(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        android.media.MediaFormat r1;
        android.view.Surface r2;
        android.media.MediaCrypto r3;
        int i0;
        java.lang.IllegalStateException r4, $r6;
        boolean $z0;
        android.media.MediaCodec $r5;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        r1 := @parameter0: android.media.MediaFormat;

        r2 := @parameter1: android.view.Surface;

        r3 := @parameter2: android.media.MediaCrypto;

        i0 := @parameter3: int;

     label1:
        $z0 = r0.<com.android.org.chromium.media.MediaCodecBridge: boolean mAdaptivePlaybackSupported>;

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("max-width", 1920);

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("max-height", 1080);

     label2:
        $r5 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r5.<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)>(r1, r2, r3, i0);

     label3:
        return 1;

     label4:
        $r6 := @caughtexception;

        r4 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecBridge", "Cannot configure the video codec", r4);

        return 0;

        catch java.lang.IllegalStateException from label1 to label3 with label4;
    }

    private static android.media.MediaFormat createAudioFormat(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1;
        android.media.MediaFormat $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <android.media.MediaFormat: android.media.MediaFormat createAudioFormat(java.lang.String,int,int)>(r0, i0, i1);

        return $r1;
    }

    private static android.media.MediaFormat createVideoDecoderFormat(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1;
        android.media.MediaFormat $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <android.media.MediaFormat: android.media.MediaFormat createVideoFormat(java.lang.String,int,int)>(r0, i0, i1);

        return $r1;
    }

    private static android.media.MediaFormat createVideoEncoderFormat(java.lang.String, int, int, int, int, int, int)
    {
        java.lang.String r0;
        int i0, i1, i2, i3, i4, i5;
        android.media.MediaFormat r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        r1 = staticinvoke <android.media.MediaFormat: android.media.MediaFormat createVideoFormat(java.lang.String,int,int)>(r0, i0, i1);

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate", i2);

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("frame-rate", i3);

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("i-frame-interval", i4);

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("color-format", i5);

        return r1;
    }

    private boolean isAdaptivePlaybackSupported(int, int)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        int i0, i1;
        boolean $z0, $z1;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<com.android.org.chromium.media.MediaCodecBridge: boolean mAdaptivePlaybackSupported>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        if i0 > 1920 goto label2;

        if i1 > 1080 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static boolean codecSupportsAdaptivePlayback(android.media.MediaCodec, java.lang.String)
    {
        android.media.MediaCodec r0;
        java.lang.String r1;
        android.media.MediaCodecInfo r2;
        android.media.MediaCodecInfo$CodecCapabilities r3;
        int $i0;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r4, r5;

        r0 := @parameter0: android.media.MediaCodec;

        r1 := @parameter1: java.lang.String;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 19 goto label1;

        if r0 != null goto label2;

     label1:
        return 0;

     label2:
        r2 = virtualinvoke r0.<android.media.MediaCodec: android.media.MediaCodecInfo getCodecInfo()>();

        $z0 = virtualinvoke r2.<android.media.MediaCodecInfo: boolean isEncoder()>();

        if $z0 == 0 goto label4;

     label3:
        return 0;

     label4:
        r3 = virtualinvoke r2.<android.media.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities getCapabilitiesForType(java.lang.String)>(r1);

        if r3 == null goto label5;

        $z1 = virtualinvoke r3.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFeatureSupported(java.lang.String)>("adaptive-playback");

        if $z1 == 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;

     label7:
        $r4 := @caughtexception;

        r5 = $r4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecBridge", "Cannot retrieve codec information", r5);

        return 0;

        catch java.lang.IllegalArgumentException from label2 to label3 with label7;
        catch java.lang.IllegalArgumentException from label4 to label6 with label7;
    }

    private static void setCodecSpecificData(android.media.MediaFormat, int, byte[])
    {
        android.media.MediaFormat r0;
        int i0;
        byte[] r1;
        java.lang.String r2;
        java.nio.ByteBuffer $r3;

        r0 := @parameter0: android.media.MediaFormat;

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        r2 = null;

        if i0 != 0 goto label1;

        r2 = "csd-0";

        goto label2;

     label1:
        if i0 != 1 goto label2;

        r2 = "csd-1";

     label2:
        if r2 == null goto label3;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

        virtualinvoke r0.<android.media.MediaFormat: void setByteBuffer(java.lang.String,java.nio.ByteBuffer)>(r2, $r3);

     label3:
        return;
    }

    private static void setFrameHasADTSHeader(android.media.MediaFormat)
    {
        android.media.MediaFormat r0;

        r0 := @parameter0: android.media.MediaFormat;

        virtualinvoke r0.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("is-adts", 1);

        return;
    }

    private boolean configureAudio(android.media.MediaFormat, android.media.MediaCrypto, int, boolean)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        android.media.MediaFormat r1;
        android.media.MediaCrypto r2;
        int i0, i1, i2, i3, i4, $i5;
        boolean z0;
        android.media.MediaCodec $r3;
        android.media.AudioTrack $r4, $r5;
        java.lang.IllegalStateException $r6, r7;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        r1 := @parameter0: android.media.MediaFormat;

        r2 := @parameter1: android.media.MediaCrypto;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

     label1:
        $r3 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.MediaCodec mMediaCodec>;

        virtualinvoke $r3.<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int)>(r1, null, r2, i0);

        if z0 == 0 goto label3;

        i1 = virtualinvoke r1.<android.media.MediaFormat: int getInteger(java.lang.String)>("sample-rate");

        i2 = virtualinvoke r1.<android.media.MediaFormat: int getInteger(java.lang.String)>("channel-count");

        i3 = specialinvoke r0.<com.android.org.chromium.media.MediaCodecBridge: int getAudioFormat(int)>(i2);

        i4 = staticinvoke <android.media.AudioTrack: int getMinBufferSize(int,int,int)>(i1, i3, 2);

        $r4 = new android.media.AudioTrack;

        specialinvoke $r4.<android.media.AudioTrack: void <init>(int,int,int,int,int,int)>(3, i1, i3, 2, i4, 1);

        r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack> = $r4;

        $r5 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        $i5 = virtualinvoke $r5.<android.media.AudioTrack: int getState()>();

        if $i5 != 0 goto label3;

        r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack> = null;

     label2:
        return 0;

     label3:
        return 1;

     label4:
        $r6 := @caughtexception;

        r7 = $r6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecBridge", "Cannot configure the audio codec", r7);

        return 0;

        catch java.lang.IllegalStateException from label1 to label2 with label4;
    }

    private long playOutputBuffer(byte[])
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        byte[] r1;
        int i0, $i1, $i2, $i3, $i4, $i6;
        android.media.AudioTrack $r2, $r3, $r4, $r5, $r12;
        long $l5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11;
        java.lang.String $r10;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        r1 := @parameter0: byte[];

        $r2 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        if $r2 != null goto label1;

        return 0L;

     label1:
        $r3 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        $i1 = virtualinvoke $r3.<android.media.AudioTrack: int getPlayState()>();

        if 3 == $i1 goto label2;

        $r12 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        virtualinvoke $r12.<android.media.AudioTrack: void play()>();

     label2:
        $r4 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        $i2 = lengthof r1;

        i0 = virtualinvoke $r4.<android.media.AudioTrack: int write(byte[],int,int)>(r1, 0, $i2);

        $i3 = lengthof r1;

        if $i3 == i0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to send all data to audio output, expected size: ");

        $i6 = lengthof r1;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", actual size: ");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MediaCodecBridge", $r10);

     label3:
        $r5 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        $i4 = virtualinvoke $r5.<android.media.AudioTrack: int getPlaybackHeadPosition()>();

        $l5 = (long) $i4;

        return $l5;
    }

    private void setVolume(double)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        double d0;
        android.media.AudioTrack $r1, $r2;
        float $f0, $f1;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        d0 := @parameter0: double;

        $r1 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.org.chromium.media.MediaCodecBridge: android.media.AudioTrack mAudioTrack>;

        $f1 = (float) d0;

        $f0 = (float) d0;

        virtualinvoke $r2.<android.media.AudioTrack: int setStereoVolume(float,float)>($f1, $f0);

     label1:
        return;
    }

    private void resetLastPresentationTimeIfNeeded(long)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        long l0, $l1, $l2;
        boolean $z0;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        l0 := @parameter0: long;

        $z0 = r0.<com.android.org.chromium.media.MediaCodecBridge: boolean mFlushed>;

        if $z0 == 0 goto label1;

        $l1 = l0 - 100000L;

        $l2 = staticinvoke <java.lang.Math: long max(long,long)>($l1, 0L);

        r0.<com.android.org.chromium.media.MediaCodecBridge: long mLastPresentationTimeUs> = $l2;

        r0.<com.android.org.chromium.media.MediaCodecBridge: boolean mFlushed> = 0;

     label1:
        return;
    }

    private int getAudioFormat(int)
    {
        com.android.org.chromium.media.MediaCodecBridge r0;
        int i0;

        r0 := @this: com.android.org.chromium.media.MediaCodecBridge;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label6;
            case 4: goto label3;
            case 5: goto label6;
            case 6: goto label4;
            case 7: goto label6;
            case 8: goto label5;
            default: goto label6;
        };

     label1:
        return 4;

     label2:
        return 12;

     label3:
        return 204;

     label4:
        return 252;

     label5:
        return 1020;

     label6:
        return 1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.android.org.chromium.media.MediaCodecBridge: long MAX_PRESENTATION_TIMESTAMP_SHIFT_US> = 100000L;

        <com.android.org.chromium.media.MediaCodecBridge: int MAX_ADAPTIVE_PLAYBACK_HEIGHT> = 1080;

        <com.android.org.chromium.media.MediaCodecBridge: int MAX_ADAPTIVE_PLAYBACK_WIDTH> = 1920;

        <com.android.org.chromium.media.MediaCodecBridge: int MEDIA_CODEC_ENCODER> = 1;

        <com.android.org.chromium.media.MediaCodecBridge: int MEDIA_CODEC_DECODER> = 0;

        <com.android.org.chromium.media.MediaCodecBridge: int MEDIA_CODEC_ERROR> = 9;

        <com.android.org.chromium.media.MediaCodecBridge: int MEDIA_CODEC_STOPPED> = 8;

        <com.android.org.chromium.media.MediaCodecBridge: int MEDIA_CODEC_NO_KEY> = 7;

        <com.android.org.chromium.media.MediaCodecBridge: int MEDIA_CODEC_OUTPUT_END_OF_STREAM> = 6;

        <com.android.org.chromium.media.MediaCodecBridge: int MEDIA_CODEC_INPUT_END_OF_STREAM> = 5;

        <com.android.org.chromium.media.MediaCodecBridge: int MEDIA_CODEC_OUTPUT_FORMAT_CHANGED> = 4;

        <com.android.org.chromium.media.MediaCodecBridge: int MEDIA_CODEC_OUTPUT_BUFFERS_CHANGED> = 3;

        <com.android.org.chromium.media.MediaCodecBridge: int MEDIA_CODEC_DEQUEUE_OUTPUT_AGAIN_LATER> = 2;

        <com.android.org.chromium.media.MediaCodecBridge: int MEDIA_CODEC_DEQUEUE_INPUT_AGAIN_LATER> = 1;

        <com.android.org.chromium.media.MediaCodecBridge: int MEDIA_CODEC_OK> = 0;

        <com.android.org.chromium.media.MediaCodecBridge: java.lang.String TAG> = "MediaCodecBridge";

        $r0 = class "com/android/org/chromium/media/MediaCodecBridge";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.android.org.chromium.media.MediaCodecBridge: boolean $assertionsDisabled> = $z1;

        return;
    }
}
