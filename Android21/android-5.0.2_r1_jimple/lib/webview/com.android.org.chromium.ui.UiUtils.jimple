public class com.android.org.chromium.ui.UiUtils extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final float KEYBOARD_DETECT_BOTTOM_THRESHOLD_DP;
    private static com.android.org.chromium.ui.UiUtils$KeyboardShowingDelegate sKeyboardShowingDelegate;

    private void <init>()
    {
        com.android.org.chromium.ui.UiUtils r0;

        r0 := @this: com.android.org.chromium.ui.UiUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setKeyboardShowingDelegate(com.android.org.chromium.ui.UiUtils$KeyboardShowingDelegate)
    {
        com.android.org.chromium.ui.UiUtils$KeyboardShowingDelegate r0;

        r0 := @parameter0: com.android.org.chromium.ui.UiUtils$KeyboardShowingDelegate;

        <com.android.org.chromium.ui.UiUtils: com.android.org.chromium.ui.UiUtils$KeyboardShowingDelegate sKeyboardShowingDelegate> = r0;

        return;
    }

    public static void showKeyboard(android.view.View)
    {
        android.view.View r0;
        android.view.inputmethod.InputMethodManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;

        r0 := @parameter0: android.view.View;

        $r2 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("input_method");

        r1 = (android.view.inputmethod.InputMethodManager) $r3;

        virtualinvoke r1.<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int)>(r0, 1);

        return;
    }

    public static boolean hideKeyboard(android.view.View)
    {
        android.view.View r0;
        android.view.inputmethod.InputMethodManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.os.IBinder $r4;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        $r2 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("input_method");

        r1 = (android.view.inputmethod.InputMethodManager) $r3;

        $r4 = virtualinvoke r0.<android.view.View: android.os.IBinder getWindowToken()>();

        $z0 = virtualinvoke r1.<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int)>($r4, 0);

        return $z0;
    }

    public static boolean isKeyboardShowing(android.content.Context, android.view.View)
    {
        android.content.Context r0;
        android.view.View r1, r2;
        android.graphics.Rect r3, $r5;
        float f0, f1, $f2;
        com.android.org.chromium.ui.UiUtils$KeyboardShowingDelegate $r4, $r8;
        android.content.res.Resources $r6;
        android.util.DisplayMetrics $r7;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        byte $b4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.view.View;

        $r4 = <com.android.org.chromium.ui.UiUtils: com.android.org.chromium.ui.UiUtils$KeyboardShowingDelegate sKeyboardShowingDelegate>;

        if $r4 == null goto label1;

        $r8 = <com.android.org.chromium.ui.UiUtils: com.android.org.chromium.ui.UiUtils$KeyboardShowingDelegate sKeyboardShowingDelegate>;

        $z1 = interfaceinvoke $r8.<com.android.org.chromium.ui.UiUtils$KeyboardShowingDelegate: boolean disableKeyboardCheck(android.content.Context,android.view.View)>(r0, r1);

        if $z1 == 0 goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r1.<android.view.View: android.view.View getRootView()>();

        if r2 != null goto label2;

        return 0;

     label2:
        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r3 = $r5;

        virtualinvoke r2.<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>(r3);

        $r6 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r7 = virtualinvoke $r6.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        f0 = $r7.<android.util.DisplayMetrics: float density>;

        $i0 = virtualinvoke r2.<android.view.View: int getHeight()>();

        $i1 = virtualinvoke r3.<android.graphics.Rect: int height()>();

        $i2 = $i0 - $i1;

        $i3 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        $f2 = (float) $i3;

        f1 = $f2 / f0;

        $b4 = f1 cmpl 100.0F;

        if $b4 <= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public static int insertBefore(android.view.ViewGroup, android.view.View, android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r2;
        int $i0;

        r0 := @parameter0: android.view.ViewGroup;

        r1 := @parameter1: android.view.View;

        r2 := @parameter2: android.view.View;

        $i0 = staticinvoke <com.android.org.chromium.ui.UiUtils: int insertView(android.view.ViewGroup,android.view.View,android.view.View,boolean)>(r0, r1, r2, 0);

        return $i0;
    }

    public static int insertAfter(android.view.ViewGroup, android.view.View, android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r2;
        int $i0;

        r0 := @parameter0: android.view.ViewGroup;

        r1 := @parameter1: android.view.View;

        r2 := @parameter2: android.view.View;

        $i0 = staticinvoke <com.android.org.chromium.ui.UiUtils: int insertView(android.view.ViewGroup,android.view.View,android.view.View,boolean)>(r0, r1, r2, 1);

        return $i0;
    }

    private static int insertView(android.view.ViewGroup, android.view.View, android.view.View, boolean)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r2;
        boolean z0;
        int i0, i1;

        r0 := @parameter0: android.view.ViewGroup;

        r1 := @parameter1: android.view.View;

        r2 := @parameter2: android.view.View;

        z0 := @parameter3: boolean;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int indexOfChild(android.view.View)>(r1);

        if i0 < 0 goto label1;

        return i0;

     label1:
        i1 = virtualinvoke r0.<android.view.ViewGroup: int indexOfChild(android.view.View)>(r2);

        if i1 >= 0 goto label2;

        return -1;

     label2:
        if z0 == 0 goto label3;

        i1 = i1 + 1;

     label3:
        virtualinvoke r0.<android.view.ViewGroup: void addView(android.view.View,int)>(r1, i1);

        return i1;
    }

    public static android.graphics.Bitmap generateScaledScreenshot(android.view.View, int, android.graphics.Bitmap$Config)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8, $i10, i13, i14;
        android.graphics.Bitmap$Config r1, $r8;
        android.graphics.Bitmap r2, r3, r4, r16;
        boolean z0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15, d16, d17;
        android.graphics.Canvas r5, $r7;
        java.lang.Throwable r6, $r11;
        float $f0, $f1;
        long $l7, $l9, $l11, $l12;
        java.lang.StringBuilder $r9, $r13, $r15;
        java.lang.OutOfMemoryError $r10, r17;
        java.lang.String $r12, $r14;

        r0 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Bitmap$Config;

        r2 = null;

        z0 = virtualinvoke r0.<android.view.View: boolean isDrawingCacheEnabled()>();

     label01:
        staticinvoke <com.android.org.chromium.ui.UiUtils: void prepareViewHierarchyForScreenshot(android.view.View,boolean)>(r0, 1);

        if z0 != 0 goto label02;

        virtualinvoke r0.<android.view.View: void setDrawingCacheEnabled(boolean)>(1);

     label02:
        r3 = virtualinvoke r0.<android.view.View: android.graphics.Bitmap getDrawingCache()>();

        if r3 == null goto label06;

        $i10 = virtualinvoke r3.<android.graphics.Bitmap: int getHeight()>();

        d0 = (double) $i10;

        $i8 = virtualinvoke r3.<android.graphics.Bitmap: int getWidth()>();

        d1 = (double) $i8;

        i1 = (int) d1;

        i2 = (int) d0;

        if i0 <= 0 goto label03;

        $d11 = (double) i0;

        $d12 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d0);

        d2 = $d11 / $d12;

        $d14 = d1 * d2;

        $l12 = staticinvoke <java.lang.Math: long round(double)>($d14);

        i1 = (int) $l12;

        $d13 = d0 * d2;

        $l11 = staticinvoke <java.lang.Math: long round(double)>($d13);

        i2 = (int) $l11;

     label03:
        r4 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>(r3, i1, i2, 1);

        $r8 = virtualinvoke r4.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        if $r8 == r1 goto label04;

        r2 = virtualinvoke r4.<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>(r1, 0);

        virtualinvoke r4.<android.graphics.Bitmap: void recycle()>();

        goto label05;

     label04:
        r2 = r4;

     label05:
        goto label08;

     label06:
        $i3 = virtualinvoke r0.<android.view.View: int getMeasuredHeight()>();

        if $i3 <= 0 goto label08;

        $i5 = virtualinvoke r0.<android.view.View: int getMeasuredWidth()>();

        if $i5 <= 0 goto label08;

        $i4 = virtualinvoke r0.<android.view.View: int getMeasuredHeight()>();

        d15 = (double) $i4;

        $i6 = virtualinvoke r0.<android.view.View: int getMeasuredWidth()>();

        d16 = (double) $i6;

        i13 = (int) d16;

        i14 = (int) d15;

        if i0 <= 0 goto label07;

        $d7 = (double) i0;

        $d9 = staticinvoke <java.lang.Math: double max(double,double)>(d16, d15);

        d17 = $d7 / $d9;

        $d10 = d16 * d17;

        $l7 = staticinvoke <java.lang.Math: long round(double)>($d10);

        i13 = (int) $l7;

        $d8 = d15 * d17;

        $l9 = staticinvoke <java.lang.Math: long round(double)>($d8);

        i14 = (int) $l9;

     label07:
        r16 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(i13, i14, r1);

        $r7 = new android.graphics.Canvas;

        specialinvoke $r7.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r16);

        r5 = $r7;

        $d3 = (double) i13;

        $d5 = $d3 / d16;

        $f1 = (float) $d5;

        $d4 = (double) i14;

        $d6 = $d4 / d15;

        $f0 = (float) $d6;

        virtualinvoke r5.<android.graphics.Canvas: void scale(float,float)>($f1, $f0);

        virtualinvoke r0.<android.view.View: void draw(android.graphics.Canvas)>(r5);

        r2 = r16;

     label08:
        if z0 != 0 goto label09;

        virtualinvoke r0.<android.view.View: void setDrawingCacheEnabled(boolean)>(0);

     label09:
        staticinvoke <com.android.org.chromium.ui.UiUtils: void prepareViewHierarchyForScreenshot(android.view.View,boolean)>(r0, 0);

        goto label16;

     label10:
        $r10 := @caughtexception;

        r17 = $r10;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to capture screenshot and scale it down.");

        $r14 = virtualinvoke r17.<java.lang.OutOfMemoryError: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("UiUtils", $r12);

     label11:
        if z0 != 0 goto label12;

        virtualinvoke r0.<android.view.View: void setDrawingCacheEnabled(boolean)>(0);

     label12:
        staticinvoke <com.android.org.chromium.ui.UiUtils: void prepareViewHierarchyForScreenshot(android.view.View,boolean)>(r0, 0);

        goto label16;

     label13:
        $r11 := @caughtexception;

        r6 = $r11;

     label14:
        if z0 != 0 goto label15;

        virtualinvoke r0.<android.view.View: void setDrawingCacheEnabled(boolean)>(0);

     label15:
        staticinvoke <com.android.org.chromium.ui.UiUtils: void prepareViewHierarchyForScreenshot(android.view.View,boolean)>(r0, 0);

        throw r6;

     label16:
        return r2;

        catch java.lang.OutOfMemoryError from label01 to label08 with label10;
        catch java.lang.Throwable from label01 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private static void prepareViewHierarchyForScreenshot(android.view.View, boolean)
    {
        android.view.View r0, $r2;
        boolean z0, $z1, $z2, $z3;
        android.view.ViewGroup r1;
        int i0, $i1;

        r0 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        $z1 = r0 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label3;

        r1 = (android.view.ViewGroup) r0;

        i0 = 0;

     label1:
        $i1 = virtualinvoke r1.<android.view.ViewGroup: int getChildCount()>();

        if i0 >= $i1 goto label2;

        $r2 = virtualinvoke r1.<android.view.ViewGroup: android.view.View getChildAt(int)>(i0);

        staticinvoke <com.android.org.chromium.ui.UiUtils: void prepareViewHierarchyForScreenshot(android.view.View,boolean)>($r2, z0);

        i0 = i0 + 1;

        goto label1;

     label2:
        goto label6;

     label3:
        $z2 = r0 instanceof android.view.SurfaceView;

        if $z2 == 0 goto label6;

        if z0 != 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        virtualinvoke r0.<android.view.View: void setWillNotDraw(boolean)>($z3);

     label6:
        return;
    }

    public static void <clinit>()
    {
        <com.android.org.chromium.ui.UiUtils: float KEYBOARD_DETECT_BOTTOM_THRESHOLD_DP> = 100.0F;

        <com.android.org.chromium.ui.UiUtils: java.lang.String TAG> = "UiUtils";

        return;
    }
}
