public final class com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset extends com.android.org.chromium.com.google.common.collect.AbstractMultiset implements java.io.Serializable
{
    private final transient java.util.concurrent.ConcurrentMap countMap;
    private transient com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$EntrySet entrySet;
    private static final long serialVersionUID;

    public static com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset create()
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset $r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        $r0 = new com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        specialinvoke $r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: void <init>(java.util.concurrent.ConcurrentMap)>($r1);

        return $r0;
    }

    public static com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset create(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r1;

        r0 := @parameter0: java.lang.Iterable;

        r1 = staticinvoke <com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset create()>();

        staticinvoke <com.android.org.chromium.com.google.common.collect.Iterables: boolean addAll(java.util.Collection,java.lang.Iterable)>(r1, r0);

        return r1;
    }

    public static com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset create(com.android.org.chromium.com.google.common.collect.GenericMapMaker)
    {
        com.android.org.chromium.com.google.common.collect.GenericMapMaker r0;
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset $r1;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @parameter0: com.android.org.chromium.com.google.common.collect.GenericMapMaker;

        $r1 = new com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        $r2 = virtualinvoke r0.<com.android.org.chromium.com.google.common.collect.GenericMapMaker: java.util.concurrent.ConcurrentMap makeMap()>();

        specialinvoke $r1.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: void <init>(java.util.concurrent.ConcurrentMap)>($r2);

        return $r1;
    }

    void <init>(java.util.concurrent.ConcurrentMap)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.util.concurrent.ConcurrentMap r1;
        boolean $z0;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.util.concurrent.ConcurrentMap;

        specialinvoke r0.<com.android.org.chromium.com.google.common.collect.AbstractMultiset: void <init>()>();

        $z0 = interfaceinvoke r1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        staticinvoke <com.android.org.chromium.com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap> = r1;

        return;
    }

    public int count(java.lang.Object)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.lang.Object r1;
        java.util.concurrent.atomic.AtomicInteger r2;
        int $i0;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.lang.Object;

        r2 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.atomic.AtomicInteger safeGet(java.lang.Object)>(r1);

        if r2 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label2:
        return $i0;
    }

    private java.util.concurrent.atomic.AtomicInteger safeGet(java.lang.Object)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.lang.Object r1, $r4;
        java.util.concurrent.ConcurrentMap $r3;
        java.util.concurrent.atomic.AtomicInteger $r5;
        java.lang.NullPointerException $r6;
        java.lang.ClassCastException $r7;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r3 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (java.util.concurrent.atomic.AtomicInteger) $r4;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        return null;

     label4:
        $r7 := @caughtexception;

        return null;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.ClassCastException from label1 to label2 with label4;
    }

    public int size()
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        long l0, $l3;
        java.util.Iterator r1;
        java.util.concurrent.atomic.AtomicInteger r2;
        java.util.concurrent.ConcurrentMap $r3;
        java.util.Collection $r4;
        boolean $z0;
        int $i1, $i2;
        java.lang.Object $r5;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        l0 = 0L;

        $r3 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.concurrent.atomic.AtomicInteger) $r5;

        $i2 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $l3 = (long) $i2;

        l0 = l0 + $l3;

        goto label1;

     label2:
        $i1 = staticinvoke <com.android.org.chromium.com.google.common.primitives.Ints: int saturatedCast(long)>(l0);

        return $i1;
    }

    public java.lang.Object[] toArray()
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.util.List $r1;
        java.lang.Object[] $r2;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        $r1 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.List snapshot()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.lang.Object[] r1, $r3;
        java.util.List $r2;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.lang.Object[];

        $r2 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.List snapshot()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }

    private java.util.List snapshot()
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.util.ArrayList r1;
        java.util.Iterator r2;
        com.android.org.chromium.com.google.common.collect.Multiset$Entry r3;
        java.lang.Object r4, $r6;
        int i0, $i1;
        java.util.Set $r5;
        boolean $z0;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        $i1 = virtualinvoke r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: int size()>();

        r1 = staticinvoke <com.android.org.chromium.com.google.common.collect.Lists: java.util.ArrayList newArrayListWithExpectedSize(int)>($i1);

        $r5 = virtualinvoke r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.org.chromium.com.google.common.collect.Multiset$Entry) $r6;

        r4 = interfaceinvoke r3.<com.android.org.chromium.com.google.common.collect.Multiset$Entry: java.lang.Object getElement()>();

        i0 = interfaceinvoke r3.<com.android.org.chromium.com.google.common.collect.Multiset$Entry: int getCount()>();

     label2:
        if i0 <= 0 goto label3;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);

        i0 = i0 + -1;

        goto label2;

     label3:
        goto label1;

     label4:
        return r1;
    }

    public int add(java.lang.Object, int)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.lang.Object r1, $r7, $r11;
        int i0, i1, i2, $i3;
        java.util.concurrent.atomic.AtomicInteger r2, $r5, $r10, r21;
        java.lang.Object[] $r3;
        boolean $z0, $z1, $z2;
        java.lang.Integer $r4;
        java.util.concurrent.ConcurrentMap $r6, $r8, $r9;
        java.lang.ArithmeticException $r12;
        java.lang.StringBuilder $r13, $r15, $r16, $r17, $r18;
        java.lang.IllegalArgumentException $r14;
        java.lang.String $r19;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 != 0 goto label01;

        $i3 = virtualinvoke r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: int count(java.lang.Object)>(r1);

        return $i3;

     label01:
        if i0 <= 0 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        staticinvoke <com.android.org.chromium.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid occurrences: %s", $r3);

     label04:
        r2 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.atomic.AtomicInteger safeGet(java.lang.Object)>(r1);

        if r2 != null goto label05;

        $r9 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r10 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(i0);

        $r11 = interfaceinvoke $r9.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r10);

        r2 = (java.util.concurrent.atomic.AtomicInteger) $r11;

        if r2 != null goto label05;

        return 0;

     label05:
        i1 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if i1 == 0 goto label10;

     label06:
        i2 = staticinvoke <com.android.org.chromium.com.google.common.math.IntMath: int checkedAdd(int,int)>(i1, i0);

        $z2 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i1, i2);

        if $z2 == 0 goto label08;

     label07:
        return i1;

     label08:
        goto label12;

     label09:
        $r12 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overflow adding ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" occurrences to a count of ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label10:
        $r5 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(i0);

        r21 = $r5;

        $r6 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r21);

        if $r7 == null goto label11;

        $r8 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $z1 = interfaceinvoke $r8.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r21);

        if $z1 == 0 goto label13;

     label11:
        return 0;

     label12:
        goto label05;

     label13:
        goto label04;

        catch java.lang.ArithmeticException from label06 to label07 with label09;
    }

    public int remove(java.lang.Object, int)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.lang.Object r1;
        int i0, i1, i2, $i3, $i4;
        java.util.concurrent.atomic.AtomicInteger r2;
        java.lang.Object[] $r3;
        boolean $z0, $z1;
        java.lang.Integer $r4;
        java.util.concurrent.ConcurrentMap $r5;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        $i4 = virtualinvoke r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: int count(java.lang.Object)>(r1);

        return $i4;

     label1:
        if i0 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        staticinvoke <com.android.org.chromium.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid occurrences: %s", $r3);

        r2 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.atomic.AtomicInteger safeGet(java.lang.Object)>(r1);

        if r2 != null goto label4;

        return 0;

     label4:
        i1 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if i1 == 0 goto label7;

        $i3 = i1 - i0;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i3);

        $z1 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i1, i2);

        if $z1 == 0 goto label6;

        if i2 != 0 goto label5;

        $r5 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r1, r2);

     label5:
        return i1;

     label6:
        goto label8;

     label7:
        return 0;

     label8:
        goto label4;
    }

    public boolean removeExactly(java.lang.Object, int)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.lang.Object r1;
        int i0, i1, i2;
        java.util.concurrent.atomic.AtomicInteger r2;
        java.lang.Object[] $r3;
        boolean $z0, $z1;
        java.lang.Integer $r4;
        java.util.concurrent.ConcurrentMap $r5;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        return 1;

     label1:
        if i0 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        staticinvoke <com.android.org.chromium.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid occurrences: %s", $r3);

        r2 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.atomic.AtomicInteger safeGet(java.lang.Object)>(r1);

        if r2 != null goto label4;

        return 0;

     label4:
        i1 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if i1 >= i0 goto label5;

        return 0;

     label5:
        i2 = i1 - i0;

        $z1 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i1, i2);

        if $z1 == 0 goto label7;

        if i2 != 0 goto label6;

        $r5 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r1, r2);

     label6:
        return 1;

     label7:
        goto label4;
    }

    public int setCount(java.lang.Object, int)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.lang.Object r1, $r7, $r11;
        int i0, i1;
        java.util.concurrent.atomic.AtomicInteger r2, r3, $r5, $r10;
        boolean $z0, $z2;
        java.util.concurrent.ConcurrentMap $r4, $r6, $r8, $r9;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        staticinvoke <com.android.org.chromium.com.google.common.collect.Multisets: void checkNonnegative(int,java.lang.String)>(i0, "count");

     label01:
        r2 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.atomic.AtomicInteger safeGet(java.lang.Object)>(r1);

        if r2 != null goto label03;

        if i0 != 0 goto label02;

        return 0;

     label02:
        $r9 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r10 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(i0);

        $r11 = interfaceinvoke $r9.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r10);

        r2 = (java.util.concurrent.atomic.AtomicInteger) $r11;

        if r2 != null goto label03;

        return 0;

     label03:
        i1 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if i1 != 0 goto label07;

        if i0 != 0 goto label04;

        return 0;

     label04:
        $r5 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(i0);

        r3 = $r5;

        $r6 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r3);

        if $r7 == null goto label05;

        $r8 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $z2 = interfaceinvoke $r8.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        if $z2 == 0 goto label06;

     label05:
        return 0;

     label06:
        goto label10;

     label07:
        $z0 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i1, i0);

        if $z0 == 0 goto label09;

        if i0 != 0 goto label08;

        $r4 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r1, r2);

     label08:
        return i1;

     label09:
        goto label03;

     label10:
        goto label01;
    }

    public boolean setCount(java.lang.Object, int, int)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.lang.Object r1, $r7, $r12;
        int i0, i1, i2;
        java.util.concurrent.atomic.AtomicInteger r2, r3, $r5, $r11;
        boolean $z0, $z2, $z3, $z5;
        java.util.concurrent.ConcurrentMap $r4, $r6, $r8, $r9, $r10;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.android.org.chromium.com.google.common.collect.Multisets: void checkNonnegative(int,java.lang.String)>(i0, "oldCount");

        staticinvoke <com.android.org.chromium.com.google.common.collect.Multisets: void checkNonnegative(int,java.lang.String)>(i1, "newCount");

        r2 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.atomic.AtomicInteger safeGet(java.lang.Object)>(r1);

        if r2 != null goto label05;

        if i0 == 0 goto label01;

        return 0;

     label01:
        if i1 != 0 goto label02;

        return 1;

     label02:
        $r10 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r11 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r11.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(i1);

        $r12 = interfaceinvoke $r10.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r11);

        if $r12 != null goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        return $z5;

     label05:
        i2 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if i2 != i0 goto label12;

        if i2 != 0 goto label10;

        if i1 != 0 goto label06;

        $r9 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        interfaceinvoke $r9.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r1, r2);

        return 1;

     label06:
        $r5 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(i1);

        r3 = $r5;

        $r6 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r3);

        if $r7 == null goto label07;

        $r8 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $z3 = interfaceinvoke $r8.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        if $z3 == 0 goto label08;

     label07:
        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        return $z2;

     label10:
        $z0 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i2, i1);

        if $z0 == 0 goto label12;

        if i1 != 0 goto label11;

        $r4 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(r1, r2);

     label11:
        return 1;

     label12:
        return 0;
    }

    java.util.Set createElementSet()
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.util.Set r1;
        java.util.concurrent.ConcurrentMap $r2;
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$1 $r3;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        $r2 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        r1 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r3 = new com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$1;

        specialinvoke $r3.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$1: void <init>(com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset,java.util.Set)>(r0, r1);

        return $r3;
    }

    public java.util.Set entrySet()
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$EntrySet r1, $r2;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$EntrySet entrySet>;

        if r1 != null goto label1;

        $r2 = new com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$EntrySet;

        specialinvoke $r2.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$EntrySet: void <init>(com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset,com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$1)>(r0, null);

        r1 = $r2;

        r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$EntrySet entrySet> = $r2;

     label1:
        return r1;
    }

    int distinctElements()
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.util.concurrent.ConcurrentMap $r1;
        int $i0;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        $r1 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.util.concurrent.ConcurrentMap $r1;
        boolean $z0;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        $r1 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();

        return $z0;
    }

    java.util.Iterator entryIterator()
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$2 r1, $r2;
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$3 $r3;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        $r2 = new com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$2;

        specialinvoke $r2.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$2: void <init>(com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset)>(r0);

        r1 = $r2;

        $r3 = new com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$3;

        specialinvoke $r3.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$3: void <init>(com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset,java.util.Iterator)>(r0, r1);

        return $r3;
    }

    public void clear()
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        $r1 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: void clear()>();

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.io.ObjectOutputStream r1;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.io.ObjectInputStream r1;
        java.util.concurrent.ConcurrentMap r2;
        java.lang.Object $r3;
        com.android.org.chromium.com.google.common.collect.Serialization$FieldSetter $r4;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r2 = (java.util.concurrent.ConcurrentMap) $r3;

        $r4 = <com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset$FieldSettersHolder: com.android.org.chromium.com.google.common.collect.Serialization$FieldSetter COUNT_MAP_FIELD_SETTER>;

        virtualinvoke $r4.<com.android.org.chromium.com.google.common.collect.Serialization$FieldSetter: void set(java.lang.Object,java.lang.Object)>(r0, r2);

        return;
    }

    public volatile java.lang.String toString()
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.lang.String $r1;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        $r1 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.AbstractMultiset: java.lang.String toString()>();

        return $r1;
    }

    public volatile int hashCode()
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        int $i0;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        $i0 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.AbstractMultiset: int hashCode()>();

        return $i0;
    }

    public volatile boolean equals(java.lang.Object)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.AbstractMultiset: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile java.util.Set elementSet()
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.util.Set $r1;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        $r1 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.AbstractMultiset: java.util.Set elementSet()>();

        return $r1;
    }

    public volatile boolean retainAll(java.util.Collection)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.AbstractMultiset: boolean retainAll(java.util.Collection)>(r1);

        return $z0;
    }

    public volatile boolean removeAll(java.util.Collection)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.AbstractMultiset: boolean removeAll(java.util.Collection)>(r1);

        return $z0;
    }

    public volatile boolean addAll(java.util.Collection)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.AbstractMultiset: boolean addAll(java.util.Collection)>(r1);

        return $z0;
    }

    public volatile boolean remove(java.lang.Object)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.AbstractMultiset: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile boolean add(java.lang.Object)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.AbstractMultiset: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile java.util.Iterator iterator()
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.util.Iterator $r1;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        $r1 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.AbstractMultiset: java.util.Iterator iterator()>();

        return $r1;
    }

    public volatile boolean contains(java.lang.Object)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.android.org.chromium.com.google.common.collect.AbstractMultiset: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    static java.util.concurrent.ConcurrentMap access$100(com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset)
    {
        com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @parameter0: com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset;

        $r1 = r0.<com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: java.util.concurrent.ConcurrentMap countMap>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.org.chromium.com.google.common.collect.ConcurrentHashMultiset: long serialVersionUID> = 1L;

        return;
    }
}
