public abstract class com.android.org.chromium.base.CommandLine extends java.lang.Object
{
    private static final java.util.concurrent.atomic.AtomicReference sCommandLine;
    private static final java.lang.String TAG;
    private static final java.lang.String SWITCH_PREFIX;
    private static final java.lang.String SWITCH_TERMINATOR;
    private static final java.lang.String SWITCH_VALUE_SEPARATOR;
    static final boolean $assertionsDisabled;

    public abstract boolean hasSwitch(java.lang.String);

    public abstract java.lang.String getSwitchValue(java.lang.String);

    public java.lang.String getSwitchValue(java.lang.String, java.lang.String)
    {
        com.android.org.chromium.base.CommandLine r0;
        java.lang.String r1, r2, r3, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.base.CommandLine;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<com.android.org.chromium.base.CommandLine: java.lang.String getSwitchValue(java.lang.String)>(r1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 == 0 goto label1;

        $r4 = r2;

        goto label2;

     label1:
        $r4 = r3;

     label2:
        return $r4;
    }

    public abstract void appendSwitch(java.lang.String);

    public abstract void appendSwitchWithValue(java.lang.String, java.lang.String);

    public abstract void appendSwitchesAndArguments(java.lang.String[]);

    public boolean isNativeImplementation()
    {
        com.android.org.chromium.base.CommandLine r0;

        r0 := @this: com.android.org.chromium.base.CommandLine;

        return 0;
    }

    public static boolean isInitialized()
    {
        java.util.concurrent.atomic.AtomicReference $r0;
        java.lang.Object $r1;
        boolean $z0;

        $r0 = <com.android.org.chromium.base.CommandLine: java.util.concurrent.atomic.AtomicReference sCommandLine>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static com.android.org.chromium.base.CommandLine getInstance()
    {
        com.android.org.chromium.base.CommandLine r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        boolean $z0;
        java.lang.AssertionError $r3;

        $r1 = <com.android.org.chromium.base.CommandLine: java.util.concurrent.atomic.AtomicReference sCommandLine>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r0 = (com.android.org.chromium.base.CommandLine) $r2;

        $z0 = <com.android.org.chromium.base.CommandLine: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        return r0;
    }

    public static void init(java.lang.String[])
    {
        java.lang.String[] r0;
        com.android.org.chromium.base.CommandLine$JavaCommandLine $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new com.android.org.chromium.base.CommandLine$JavaCommandLine;

        specialinvoke $r1.<com.android.org.chromium.base.CommandLine$JavaCommandLine: void <init>(java.lang.String[])>(r0);

        staticinvoke <com.android.org.chromium.base.CommandLine: void setInstance(com.android.org.chromium.base.CommandLine)>($r1);

        return;
    }

    public static void initFromFile(java.lang.String)
    {
        java.lang.String r0;
        char[] r1;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <com.android.org.chromium.base.CommandLine: char[] readUtf8FileFully(java.lang.String,int)>(r0, 8192);

        if r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = staticinvoke <com.android.org.chromium.base.CommandLine: java.lang.String[] tokenizeQuotedAruments(char[])>(r1);

     label2:
        staticinvoke <com.android.org.chromium.base.CommandLine: void init(java.lang.String[])>($r2);

        return;
    }

    public static void reset()
    {
        staticinvoke <com.android.org.chromium.base.CommandLine: void setInstance(com.android.org.chromium.base.CommandLine)>(null);

        return;
    }

    public static java.lang.String[] tokenizeQuotedAruments(char[])
    {
        char[] r0, r3;
        java.util.ArrayList r1, $r4;
        java.lang.StringBuilder r2, $r9, $r10, $r11, $r13;
        char c2, c5, $c8, $c14;
        int i3, i4, $i6, $i9, $i10, $i11, $i12, $i13;
        java.lang.String[] $r5, $r7;
        java.lang.Object[] $r6;
        java.lang.String $r8, $r12, $r15;
        boolean $z2;

        r0 := @parameter0: char[];

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        r2 = null;

        c2 = 0;

        r3 = r0;

        i3 = lengthof r3;

        i4 = 0;

     label01:
        if i4 >= i3 goto label11;

        c5 = r3[i4];

        if c2 != 0 goto label02;

        if c5 == 39 goto label03;

        if c5 == 34 goto label03;

     label02:
        if c5 != c2 goto label07;

     label03:
        if r2 == null goto label04;

        $i10 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        if $i10 <= 0 goto label04;

        $i9 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        $i13 = $i9 - 1;

        $c14 = virtualinvoke r2.<java.lang.StringBuilder: char charAt(int)>($i13);

        if $c14 != 92 goto label04;

        $i11 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        $i12 = $i11 - 1;

        virtualinvoke r2.<java.lang.StringBuilder: void setCharAt(int,char)>($i12, c5);

        goto label10;

     label04:
        if c2 != 0 goto label05;

        $c8 = c5;

        goto label06;

     label05:
        $c8 = 0;

     label06:
        c2 = $c8;

        goto label10;

     label07:
        if c2 != 0 goto label08;

        $z2 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c5);

        if $z2 == 0 goto label08;

        if r2 == null goto label10;

        $r15 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

        r2 = null;

        goto label10;

     label08:
        if r2 != null goto label09;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        r2 = $r13;

     label09:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c5);

     label10:
        i4 = i4 + 1;

        goto label01;

     label11:
        if r2 == null goto label13;

        if c2 == 0 goto label12;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unterminated quoted string: ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CommandLine", $r12);

     label12:
        $r8 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label13:
        $i6 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r5 = newarray (java.lang.String)[$i6];

        $r6 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.String[]) $r6;

        return $r7;
    }

    public static void enableNativeProxy()
    {
        com.android.org.chromium.base.CommandLine$NativeCommandLine $r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        $r1 = <com.android.org.chromium.base.CommandLine: java.util.concurrent.atomic.AtomicReference sCommandLine>;

        $r0 = new com.android.org.chromium.base.CommandLine$NativeCommandLine;

        specialinvoke $r0.<com.android.org.chromium.base.CommandLine$NativeCommandLine: void <init>(com.android.org.chromium.base.CommandLine$1)>(null);

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r0);

        return;
    }

    public static java.lang.String[] getJavaSwitchesOrNull()
    {
        com.android.org.chromium.base.CommandLine r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        boolean $z0, $z1;
        com.android.org.chromium.base.CommandLine$JavaCommandLine $r3;
        java.lang.String[] $r4;
        java.lang.AssertionError $r5;

        $r1 = <com.android.org.chromium.base.CommandLine: java.util.concurrent.atomic.AtomicReference sCommandLine>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r0 = (com.android.org.chromium.base.CommandLine) $r2;

        if r0 == null goto label2;

        $z0 = <com.android.org.chromium.base.CommandLine: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.org.chromium.base.CommandLine: boolean isNativeImplementation()>();

        if $z1 == 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r3 = (com.android.org.chromium.base.CommandLine$JavaCommandLine) r0;

        $r4 = staticinvoke <com.android.org.chromium.base.CommandLine$JavaCommandLine: java.lang.String[] access$100(com.android.org.chromium.base.CommandLine$JavaCommandLine)>($r3);

        return $r4;

     label2:
        return null;
    }

    private static void setInstance(com.android.org.chromium.base.CommandLine)
    {
        com.android.org.chromium.base.CommandLine r0, r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: com.android.org.chromium.base.CommandLine;

        $r2 = <com.android.org.chromium.base.CommandLine: java.util.concurrent.atomic.AtomicReference sCommandLine>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(r0);

        r1 = (com.android.org.chromium.base.CommandLine) $r3;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.org.chromium.base.CommandLine: boolean isNativeImplementation()>();

        if $z0 == 0 goto label1;

        staticinvoke <com.android.org.chromium.base.CommandLine: void nativeReset()>();

     label1:
        return;
    }

    private static char[] readUtf8FileFully(java.lang.String, int)
    {
        java.lang.String r0, $r18;
        int i0, i2, $i5, $i7;
        java.io.InputStreamReader r1, $r10;
        java.io.File r2, $r8;
        long l1, $l4;
        char[] r3, r4, $r11;
        java.io.IOException r5, r7, $r22, $r23, $r24, $r25, $r27, r28, r29;
        java.lang.Throwable r6, $r26;
        byte $b3, $b6;
        java.io.FileInputStream $r9;
        boolean $z0, $z1;
        java.lang.AssertionError $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r19, $r20;
        java.io.FileNotFoundException $r21;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = null;

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>(r0);

        r2 = $r8;

        l1 = virtualinvoke r2.<java.io.File: long length()>();

        $b3 = l1 cmp 0L;

        if $b3 != 0 goto label01;

        return null;

     label01:
        $l4 = (long) i0;

        $b6 = l1 cmp $l4;

        if $b6 <= 0 goto label02;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds limit ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CommandLine", $r18);

        return null;

     label02:
        $i5 = (int) l1;

        r3 = newarray (char)[$i5];

        $r10 = new java.io.InputStreamReader;

        $r9 = new java.io.FileInputStream;

        specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r10.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r9, "UTF-8");

        r1 = $r10;

        i2 = virtualinvoke r1.<java.io.Reader: int read(char[])>(r3);

        $z0 = <com.android.org.chromium.base.CommandLine: boolean $assertionsDisabled>;

        if $z0 != 0 goto label03;

        $z1 = virtualinvoke r1.<java.io.Reader: boolean ready()>();

        if $z1 == 0 goto label03;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label03:
        $i7 = lengthof r3;

        if i2 >= $i7 goto label04;

        $r11 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(r3, 0, i2);

        goto label05;

     label04:
        $r11 = r3;

     label05:
        r4 = $r11;

     label06:
        if r1 == null goto label07;

        virtualinvoke r1.<java.io.Reader: void close()>();

     label07:
        goto label09;

     label08:
        $r25 := @caughtexception;

        r5 = $r25;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CommandLine", "Unable to close file reader.", r5);

     label09:
        return r4;

     label10:
        $r21 := @caughtexception;

     label11:
        if r1 == null goto label12;

        virtualinvoke r1.<java.io.Reader: void close()>();

     label12:
        goto label14;

     label13:
        $r23 := @caughtexception;

        r28 = $r23;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CommandLine", "Unable to close file reader.", r28);

     label14:
        return null;

     label15:
        $r24 := @caughtexception;

     label16:
        if r1 == null goto label17;

        virtualinvoke r1.<java.io.Reader: void close()>();

     label17:
        goto label19;

     label18:
        $r27 := @caughtexception;

        r29 = $r27;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CommandLine", "Unable to close file reader.", r29);

     label19:
        return null;

     label20:
        $r26 := @caughtexception;

        r6 = $r26;

     label21:
        if r1 == null goto label22;

        virtualinvoke r1.<java.io.Reader: void close()>();

     label22:
        goto label24;

     label23:
        $r22 := @caughtexception;

        r7 = $r22;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CommandLine", "Unable to close file reader.", r7);

     label24:
        throw r6;

        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.FileNotFoundException from label02 to label06 with label10;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label02 to label06 with label15;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Throwable from label02 to label06 with label20;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.io.IOException from label21 to label22 with label23;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    private void <init>()
    {
        com.android.org.chromium.base.CommandLine r0;

        r0 := @this: com.android.org.chromium.base.CommandLine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static native void nativeReset();

    private static native boolean nativeHasSwitch(java.lang.String);

    private static native java.lang.String nativeGetSwitchValue(java.lang.String);

    private static native void nativeAppendSwitch(java.lang.String);

    private static native void nativeAppendSwitchWithValue(java.lang.String, java.lang.String);

    private static native void nativeAppendSwitchesAndArguments(java.lang.String[]);

    void <init>(com.android.org.chromium.base.CommandLine$1)
    {
        com.android.org.chromium.base.CommandLine r0;
        com.android.org.chromium.base.CommandLine$1 r1;

        r0 := @this: com.android.org.chromium.base.CommandLine;

        r1 := @parameter0: com.android.org.chromium.base.CommandLine$1;

        specialinvoke r0.<com.android.org.chromium.base.CommandLine: void <init>()>();

        return;
    }

    static boolean access$300(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.android.org.chromium.base.CommandLine: boolean nativeHasSwitch(java.lang.String)>(r0);

        return $z0;
    }

    static java.lang.String access$400(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.android.org.chromium.base.CommandLine: java.lang.String nativeGetSwitchValue(java.lang.String)>(r0);

        return $r1;
    }

    static void access$500(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.org.chromium.base.CommandLine: void nativeAppendSwitch(java.lang.String)>(r0);

        return;
    }

    static void access$600(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.android.org.chromium.base.CommandLine: void nativeAppendSwitchWithValue(java.lang.String,java.lang.String)>(r0, r1);

        return;
    }

    static void access$700(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <com.android.org.chromium.base.CommandLine: void nativeAppendSwitchesAndArguments(java.lang.String[])>(r0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicReference $r1;

        <com.android.org.chromium.base.CommandLine: java.lang.String SWITCH_VALUE_SEPARATOR> = "=";

        <com.android.org.chromium.base.CommandLine: java.lang.String SWITCH_TERMINATOR> = "--";

        <com.android.org.chromium.base.CommandLine: java.lang.String SWITCH_PREFIX> = "--";

        <com.android.org.chromium.base.CommandLine: java.lang.String TAG> = "CommandLine";

        $r0 = class "com/android/org/chromium/base/CommandLine";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.android.org.chromium.base.CommandLine: boolean $assertionsDisabled> = $z1;

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <com.android.org.chromium.base.CommandLine: java.util.concurrent.atomic.AtomicReference sCommandLine> = $r1;

        return;
    }
}
