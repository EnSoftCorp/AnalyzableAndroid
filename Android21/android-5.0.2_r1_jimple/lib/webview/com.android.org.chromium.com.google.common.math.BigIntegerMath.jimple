public final class com.android.org.chromium.com.google.common.math.BigIntegerMath extends java.lang.Object
{
    static final int SQRT2_PRECOMPUTE_THRESHOLD;
    static final java.math.BigInteger SQRT2_PRECOMPUTED_BITS;

    public static boolean isPowerOfTwo(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @parameter0: java.math.BigInteger;

        staticinvoke <com.android.org.chromium.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = virtualinvoke r0.<java.math.BigInteger: int signum()>();

        if $i0 <= 0 goto label1;

        $i1 = virtualinvoke r0.<java.math.BigInteger: int getLowestSetBit()>();

        $i2 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i3 = $i2 - 1;

        if $i1 != $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int log2(java.math.BigInteger, java.math.RoundingMode)
    {
        java.math.BigInteger r0, r2, $r4, $r7, r9;
        java.math.RoundingMode r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.Object $r3;
        int[] $r6;
        boolean $z0, $z1;
        java.lang.AssertionError $r8;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.RoundingMode;

        $r3 = staticinvoke <com.android.org.chromium.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r4 = (java.math.BigInteger) $r3;

        staticinvoke <com.android.org.chromium.com.google.common.math.MathPreconditions: java.math.BigInteger checkPositive(java.lang.String,java.math.BigInteger)>("x", $r4);

        $i2 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        i0 = $i2 - 1;

        $r6 = <com.android.org.chromium.com.google.common.math.BigIntegerMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i3 = virtualinvoke r1.<java.math.RoundingMode: int ordinal()>();

        $i4 = $r6[$i3];

        tableswitch($i4)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label02;
            case 4: goto label03;
            case 5: goto label03;
            case 6: goto label06;
            case 7: goto label06;
            case 8: goto label06;
            default: goto label11;
        };

     label01:
        $z0 = staticinvoke <com.android.org.chromium.com.google.common.math.BigIntegerMath: boolean isPowerOfTwo(java.math.BigInteger)>(r0);

        staticinvoke <com.android.org.chromium.com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z0);

     label02:
        return i0;

     label03:
        $z1 = staticinvoke <com.android.org.chromium.com.google.common.math.BigIntegerMath: boolean isPowerOfTwo(java.math.BigInteger)>(r0);

        if $z1 == 0 goto label04;

        $i12 = i0;

        goto label05;

     label04:
        $i12 = i0 + 1;

     label05:
        return $i12;

     label06:
        if i0 >= 256 goto label08;

        $r7 = <com.android.org.chromium.com.google.common.math.BigIntegerMath: java.math.BigInteger SQRT2_PRECOMPUTED_BITS>;

        $i8 = 256 - i0;

        r2 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>($i8);

        $i11 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r2);

        if $i11 > 0 goto label07;

        return i0;

     label07:
        $i10 = i0 + 1;

        return $i10;

     label08:
        r9 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger pow(int)>(2);

        $i5 = virtualinvoke r9.<java.math.BigInteger: int bitLength()>();

        i1 = $i5 - 1;

        $i7 = 2 * i0;

        $i6 = $i7 + 1;

        if i1 >= $i6 goto label09;

        $i9 = i0;

        goto label10;

     label09:
        $i9 = i0 + 1;

     label10:
        return $i9;

     label11:
        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;
    }

    public static int log10(java.math.BigInteger, java.math.RoundingMode)
    {
        java.math.BigInteger r0, r3, r4, r5, r6, $r10, $r11, r14, r15;
        java.math.RoundingMode r1;
        java.util.ArrayList r2, $r8;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11;
        boolean $z0, $z1, $z2;
        int[] $r9;
        java.lang.Object $r12;
        java.lang.AssertionError $r13;
        long $l10;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.android.org.chromium.com.google.common.math.MathPreconditions: java.math.BigInteger checkPositive(java.lang.String,java.math.BigInteger)>("x", r0);

        $z0 = staticinvoke <com.android.org.chromium.com.google.common.math.BigIntegerMath: boolean fitsInLong(java.math.BigInteger)>(r0);

        if $z0 == 0 goto label01;

        $l10 = virtualinvoke r0.<java.math.BigInteger: long longValue()>();

        $i11 = staticinvoke <com.android.org.chromium.com.google.common.math.LongMath: int log10(long,java.math.RoundingMode)>($l10, r1);

        return $i11;

     label01:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(10);

        r2 = $r8;

        r3 = <java.math.BigInteger: java.math.BigInteger TEN>;

     label02:
        $i2 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r3);

        if $i2 < 0 goto label03;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r3);

        r3 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger pow(int)>(2);

        goto label02;

     label03:
        r4 = <java.math.BigInteger: java.math.BigInteger ONE>;

        i0 = 0;

        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        i1 = $i3 - 1;

     label04:
        if i1 < 0 goto label06;

        $r12 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (java.math.BigInteger) $r12;

        i0 = i0 * 2;

        r6 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r4);

        $i9 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r6);

        if $i9 < 0 goto label05;

        r4 = r6;

        i0 = i0 + 1;

     label05:
        i1 = i1 + -1;

        goto label04;

     label06:
        $r9 = <com.android.org.chromium.com.google.common.math.BigIntegerMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i4 = virtualinvoke r1.<java.math.RoundingMode: int ordinal()>();

        $i5 = $r9[$i4];

        tableswitch($i5)
        {
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label08;
            case 4: goto label09;
            case 5: goto label09;
            case 6: goto label12;
            case 7: goto label12;
            case 8: goto label12;
            default: goto label15;
        };

     label07:
        $z1 = virtualinvoke r4.<java.math.BigInteger: boolean equals(java.lang.Object)>(r0);

        staticinvoke <com.android.org.chromium.com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z1);

     label08:
        return i0;

     label09:
        $z2 = virtualinvoke r4.<java.math.BigInteger: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label10;

        $i8 = i0;

        goto label11;

     label10:
        $i8 = i0 + 1;

     label11:
        return $i8;

     label12:
        r14 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger pow(int)>(2);

        $r10 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(2);

        $r11 = <java.math.BigInteger: java.math.BigInteger TEN>;

        r15 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r11);

        $i7 = virtualinvoke r14.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r15);

        if $i7 > 0 goto label13;

        $i6 = i0;

        goto label14;

     label13:
        $i6 = i0 + 1;

     label14:
        return $i6;

     label15:
        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;
    }

    public static java.math.BigInteger sqrt(java.math.BigInteger, java.math.RoundingMode)
    {
        java.math.BigInteger r0, r2, r3, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14;
        java.math.RoundingMode r1;
        boolean $z0, $z1, $z2;
        int[] $r5;
        int $i0, $i1, $i2;
        java.lang.AssertionError $r12;
        long $l3, $l4;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.RoundingMode;

        staticinvoke <com.android.org.chromium.com.google.common.math.MathPreconditions: java.math.BigInteger checkNonNegative(java.lang.String,java.math.BigInteger)>("x", r0);

        $z0 = staticinvoke <com.android.org.chromium.com.google.common.math.BigIntegerMath: boolean fitsInLong(java.math.BigInteger)>(r0);

        if $z0 == 0 goto label01;

        $l4 = virtualinvoke r0.<java.math.BigInteger: long longValue()>();

        $l3 = staticinvoke <com.android.org.chromium.com.google.common.math.LongMath: long sqrt(long,java.math.RoundingMode)>($l4, r1);

        $r14 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        return $r14;

     label01:
        r2 = staticinvoke <com.android.org.chromium.com.google.common.math.BigIntegerMath: java.math.BigInteger sqrtFloor(java.math.BigInteger)>(r0);

        $r5 = <com.android.org.chromium.com.google.common.math.BigIntegerMath$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i0 = virtualinvoke r1.<java.math.RoundingMode: int ordinal()>();

        $i1 = $r5[$i0];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label04;
            case 6: goto label07;
            case 7: goto label07;
            case 8: goto label07;
            default: goto label10;
        };

     label02:
        $r6 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger pow(int)>(2);

        $z1 = virtualinvoke $r6.<java.math.BigInteger: boolean equals(java.lang.Object)>(r0);

        staticinvoke <com.android.org.chromium.com.google.common.math.MathPreconditions: void checkRoundingUnnecessary(boolean)>($z1);

     label03:
        return r2;

     label04:
        $r9 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger pow(int)>(2);

        $z2 = virtualinvoke $r9.<java.math.BigInteger: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label05;

        $r13 = r2;

        goto label06;

     label05:
        $r11 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r13 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r11);

     label06:
        return $r13;

     label07:
        $r7 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger pow(int)>(2);

        r3 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r2);

        $i2 = virtualinvoke r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r0);

        if $i2 < 0 goto label08;

        $r10 = r2;

        goto label09;

     label08:
        $r8 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $r10 = virtualinvoke r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r8);

     label09:
        return $r10;

     label10:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;
    }

    private static java.math.BigInteger sqrtFloor(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3, $r4, $r5, $r6, $r7, $r8, r9, r10;
        int i0, i1, $i2, $i3, $i4;
        java.math.RoundingMode $r2;
        boolean $z0;

        r0 := @parameter0: java.math.BigInteger;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;

        i0 = staticinvoke <com.android.org.chromium.com.google.common.math.BigIntegerMath: int log2(java.math.BigInteger,java.math.RoundingMode)>(r0, $r2);

        if i0 >= 1023 goto label1;

        r1 = staticinvoke <com.android.org.chromium.com.google.common.math.BigIntegerMath: java.math.BigInteger sqrtApproxWithDoubles(java.math.BigInteger)>(r0);

        goto label2;

     label1:
        $i2 = i0 - 52;

        i1 = $i2 & -2;

        $r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i1);

        $r4 = staticinvoke <com.android.org.chromium.com.google.common.math.BigIntegerMath: java.math.BigInteger sqrtApproxWithDoubles(java.math.BigInteger)>($r3);

        $i3 = i1 >> 1;

        r1 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i3);

     label2:
        $r5 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r1);

        $r6 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r5);

        r9 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>(r9);

        if $z0 == 0 goto label3;

        return r1;

     label3:
        r10 = r9;

        $r7 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r10);

        $r8 = virtualinvoke r10.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r7);

        r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        $i4 = virtualinvoke r9.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r10);

        if $i4 < 0 goto label3;

        return r10;
    }

    private static java.math.BigInteger sqrtApproxWithDoubles(java.math.BigInteger)
    {
        java.math.BigInteger r0, $r2;
        double $d0, $d1;
        java.math.RoundingMode $r1;

        r0 := @parameter0: java.math.BigInteger;

        $d0 = staticinvoke <com.android.org.chromium.com.google.common.math.DoubleUtils: double bigToDouble(java.math.BigInteger)>(r0);

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $r1 = <java.math.RoundingMode: java.math.RoundingMode HALF_EVEN>;

        $r2 = staticinvoke <com.android.org.chromium.com.google.common.math.DoubleMath: java.math.BigInteger roundToBigInteger(double,java.math.RoundingMode)>($d1, $r1);

        return $r2;
    }

    public static java.math.BigInteger divide(java.math.BigInteger, java.math.BigInteger, java.math.RoundingMode)
    {
        java.math.BigInteger r0, r1, $r8;
        java.math.RoundingMode r2;
        java.math.BigDecimal r3, r4, $r5, $r6, $r7;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        r2 := @parameter2: java.math.RoundingMode;

        $r5 = new java.math.BigDecimal;

        specialinvoke $r5.<java.math.BigDecimal: void <init>(java.math.BigInteger)>(r0);

        r3 = $r5;

        $r6 = new java.math.BigDecimal;

        specialinvoke $r6.<java.math.BigDecimal: void <init>(java.math.BigInteger)>(r1);

        r4 = $r6;

        $r7 = virtualinvoke r3.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,java.math.RoundingMode)>(r4, 0, r2);

        $r8 = virtualinvoke $r7.<java.math.BigDecimal: java.math.BigInteger toBigIntegerExact()>();

        return $r8;
    }

    public static java.math.BigInteger factorial(int)
    {
        int i0, i1, i2, i4, i5, i6, i7, i9, i11, $i13, $i14, $i15, $i16, $i17, $i18, $i21, $i26, $i28;
        java.util.ArrayList r0, $r5;
        long l3, l8, l10, $l19, $l20, $l24, $l25, $l29, l30;
        long[] $r1, $r4, $r6, $r13;
        java.math.RoundingMode $r2, $r3, $r7, $r8, $r12;
        java.math.BigInteger $r9, $r10, $r11, $r14, $r15;
        byte $b22, $b23, $b27;

        i0 := @parameter0: int;

        staticinvoke <com.android.org.chromium.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", i0);

        $r1 = <com.android.org.chromium.com.google.common.math.LongMath: long[] FACTORIALS>;

        $i13 = lengthof $r1;

        if i0 >= $i13 goto label1;

        $r13 = <com.android.org.chromium.com.google.common.math.LongMath: long[] FACTORIALS>;

        $l29 = $r13[i0];

        $r15 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l29);

        return $r15;

     label1:
        $r2 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        $i14 = staticinvoke <com.android.org.chromium.com.google.common.math.IntMath: int log2(int,java.math.RoundingMode)>(i0, $r2);

        $i15 = i0 * $i14;

        $r3 = <java.math.RoundingMode: java.math.RoundingMode CEILING>;

        i1 = staticinvoke <com.android.org.chromium.com.google.common.math.IntMath: int divide(int,int,java.math.RoundingMode)>($i15, 64, $r3);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(i1);

        r0 = $r5;

        $r4 = <com.android.org.chromium.com.google.common.math.LongMath: long[] FACTORIALS>;

        i2 = lengthof $r4;

        $r6 = <com.android.org.chromium.com.google.common.math.LongMath: long[] FACTORIALS>;

        $i16 = i2 - 1;

        l3 = $r6[$i16];

        i4 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l3);

        l30 = l3 >> i4;

        $r7 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;

        $i17 = staticinvoke <com.android.org.chromium.com.google.common.math.LongMath: int log2(long,java.math.RoundingMode)>(l30, $r7);

        i5 = $i17 + 1;

        $l20 = (long) i2;

        $r8 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;

        $i21 = staticinvoke <com.android.org.chromium.com.google.common.math.LongMath: int log2(long,java.math.RoundingMode)>($l20, $r8);

        i6 = $i21 + 1;

        $i18 = i6 - 1;

        i7 = 1 << $i18;

        l8 = (long) i2;

     label2:
        $l19 = (long) i0;

        $b22 = l8 cmp $l19;

        if $b22 > 0 goto label5;

        $l24 = (long) i7;

        $l25 = l8 & $l24;

        $b27 = $l25 cmp 0L;

        if $b27 == 0 goto label3;

        i7 = i7 << 1;

        i6 = i6 + 1;

     label3:
        i9 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l8);

        l10 = l8 >> i9;

        i4 = i4 + i9;

        i11 = i6 - i9;

        $i26 = i11 + i5;

        if $i26 < 64 goto label4;

        $r14 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l30);

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        l30 = 1L;

     label4:
        l30 = l30 * l10;

        $r12 = <java.math.RoundingMode: java.math.RoundingMode FLOOR>;

        $i28 = staticinvoke <com.android.org.chromium.com.google.common.math.LongMath: int log2(long,java.math.RoundingMode)>(l30, $r12);

        i5 = $i28 + 1;

        l8 = l8 + 1L;

        goto label2;

     label5:
        $b23 = l30 cmp 1L;

        if $b23 <= 0 goto label6;

        $r11 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l30);

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

     label6:
        $r9 = staticinvoke <com.android.org.chromium.com.google.common.math.BigIntegerMath: java.math.BigInteger listProduct(java.util.List)>(r0);

        $r10 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i4);

        return $r10;
    }

    static java.math.BigInteger listProduct(java.util.List)
    {
        java.util.List r0;
        int $i0;
        java.math.BigInteger $r1;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r1 = staticinvoke <com.android.org.chromium.com.google.common.math.BigIntegerMath: java.math.BigInteger listProduct(java.util.List,int,int)>(r0, 0, $i0);

        return $r1;
    }

    static java.math.BigInteger listProduct(java.util.List, int, int)
    {
        java.util.List r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.math.BigInteger $r1, $r3, $r5, $r6, $r8, $r9, $r12, $r13, $r14, $r15, $r17, $r18, $r19;
        java.lang.Object $r2, $r4, $r7, $r10, $r11, $r16;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = i1 - i0;

        tableswitch($i3)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        $r1 = <java.math.BigInteger: java.math.BigInteger ONE>;

        return $r1;

     label2:
        $r16 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        $r15 = (java.math.BigInteger) $r16;

        return $r15;

     label3:
        $r10 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        $r12 = (java.math.BigInteger) $r10;

        $i6 = i0 + 1;

        $r11 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i6);

        $r14 = (java.math.BigInteger) $r11;

        $r13 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r14);

        return $r13;

     label4:
        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.math.BigInteger) $r2;

        $i4 = i0 + 1;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i4);

        $r5 = (java.math.BigInteger) $r4;

        $r6 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $i5 = i0 + 2;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i5);

        $r8 = (java.math.BigInteger) $r7;

        $r9 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        return $r9;

     label5:
        $i7 = i1 + i0;

        i2 = $i7 >>> 1;

        $r17 = staticinvoke <com.android.org.chromium.com.google.common.math.BigIntegerMath: java.math.BigInteger listProduct(java.util.List,int,int)>(r0, i0, i2);

        $r19 = staticinvoke <com.android.org.chromium.com.google.common.math.BigIntegerMath: java.math.BigInteger listProduct(java.util.List,int,int)>(r0, i2, i1);

        $r18 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r19);

        return $r18;
    }

    public static java.math.BigInteger binomial(int, int)
    {
        int i0, i1, i2, $i5, $i6, $i8, $i10, $i11;
        java.math.BigInteger r0, $r5, $r6, $r8, r9;
        java.lang.Object[] $r1;
        boolean $z0;
        java.lang.Integer $r2, $r3;
        int[] $r4, $r7;
        long $l7, $l9, $l12;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <com.android.org.chromium.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("n", i0);

        staticinvoke <com.android.org.chromium.com.google.common.math.MathPreconditions: int checkNonNegative(java.lang.String,int)>("k", i1);

        if i1 > i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[1] = $r3;

        staticinvoke <com.android.org.chromium.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "k (%s) > n (%s)", $r1);

        $i5 = i0 >> 1;

        if i1 <= $i5 goto label3;

        i1 = i0 - i1;

     label3:
        $r4 = <com.android.org.chromium.com.google.common.math.LongMath: int[] BIGGEST_BINOMIALS>;

        $i6 = lengthof $r4;

        if i1 >= $i6 goto label4;

        $r7 = <com.android.org.chromium.com.google.common.math.LongMath: int[] BIGGEST_BINOMIALS>;

        $i11 = $r7[i1];

        if i0 > $i11 goto label4;

        $l12 = staticinvoke <com.android.org.chromium.com.google.common.math.LongMath: long binomial(int,int)>(i0, i1);

        $r8 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l12);

        return $r8;

     label4:
        r0 = <java.math.BigInteger: java.math.BigInteger ONE>;

        i2 = 0;

     label5:
        if i2 >= i1 goto label6;

        $i8 = i0 - i2;

        $l7 = (long) $i8;

        $r5 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l7);

        r9 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        $i10 = i2 + 1;

        $l9 = (long) $i10;

        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l9);

        r0 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r6);

        i2 = i2 + 1;

        goto label5;

     label6:
        return r0;
    }

    static boolean fitsInLong(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.math.BigInteger;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        if $i0 > 63 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void <init>()
    {
        com.android.org.chromium.com.google.common.math.BigIntegerMath r0;

        r0 := @this: com.android.org.chromium.com.google.common.math.BigIntegerMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0;

        <com.android.org.chromium.com.google.common.math.BigIntegerMath: int SQRT2_PRECOMPUTE_THRESHOLD> = 256;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>("16a09e667f3bcc908b2fb1366ea957d3e3adec17512775099da2f590b0667322a", 16);

        <com.android.org.chromium.com.google.common.math.BigIntegerMath: java.math.BigInteger SQRT2_PRECOMPUTED_BITS> = $r0;

        return;
    }
}
