public class com.android.org.chromium.android_webview.AwSettings extends java.lang.Object
{
    public static final int MIXED_CONTENT_ALWAYS_ALLOW;
    public static final int MIXED_CONTENT_NEVER_ALLOW;
    public static final int MIXED_CONTENT_COMPATIBILITY_MODE;
    private static final java.lang.String TAG;
    private final boolean mHasInternetPermission;
    private com.android.org.chromium.android_webview.AwSettings$ZoomSupportChangeListener mZoomChangeListener;
    private double mDIPScale;
    private final java.lang.Object mAwSettingsLock;
    private com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm mLayoutAlgorithm;
    private int mTextSizePercent;
    private java.lang.String mStandardFontFamily;
    private java.lang.String mFixedFontFamily;
    private java.lang.String mSansSerifFontFamily;
    private java.lang.String mSerifFontFamily;
    private java.lang.String mCursiveFontFamily;
    private java.lang.String mFantasyFontFamily;
    private java.lang.String mDefaultTextEncoding;
    private java.lang.String mUserAgent;
    private int mMinimumFontSize;
    private int mMinimumLogicalFontSize;
    private int mDefaultFontSize;
    private int mDefaultFixedFontSize;
    private boolean mLoadsImagesAutomatically;
    private boolean mImagesEnabled;
    private boolean mJavaScriptEnabled;
    private boolean mAllowUniversalAccessFromFileURLs;
    private boolean mAllowFileAccessFromFileURLs;
    private boolean mJavaScriptCanOpenWindowsAutomatically;
    private boolean mSupportMultipleWindows;
    private android.webkit.WebSettings$PluginState mPluginState;
    private boolean mAppCacheEnabled;
    private boolean mDomStorageEnabled;
    private boolean mDatabaseEnabled;
    private boolean mUseWideViewport;
    private boolean mZeroLayoutHeightDisablesViewportQuirk;
    private boolean mForceZeroLayoutHeight;
    private boolean mLoadWithOverviewMode;
    private boolean mMediaPlaybackRequiresUserGesture;
    private java.lang.String mDefaultVideoPosterURL;
    private float mInitialPageScalePercent;
    private boolean mSpatialNavigationEnabled;
    private boolean mEnableSupportedHardwareAcceleratedFeatures;
    private int mMixedContentMode;
    private boolean mVideoOverlayForEmbeddedVideoEnabled;
    private boolean mAcceptThirdPartyCookies;
    private final boolean mSupportLegacyQuirks;
    private final boolean mPasswordEchoEnabled;
    private boolean mBlockNetworkLoads;
    private boolean mAllowContentUrlAccess;
    private boolean mAllowFileUrlAccess;
    private int mCacheMode;
    private boolean mShouldFocusFirstNode;
    private boolean mGeolocationEnabled;
    private boolean mAutoCompleteEnabled;
    private boolean mFullscreenSupported;
    private boolean mSupportZoom;
    private boolean mBuiltInZoomControls;
    private boolean mDisplayZoomControls;
    private static final java.lang.Object sGlobalContentSettingsLock;
    private static boolean sAppCachePathIsSet;
    private long mNativeAwSettings;
    private final com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler;
    private static final int MINIMUM_FONT_SIZE;
    private static final int MAXIMUM_FONT_SIZE;
    static final boolean $assertionsDisabled;

    public void <init>(android.content.Context, boolean, boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        android.content.Context r1;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object r2, $r4, $r7;
        java.lang.Throwable r3, $r15;
        com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm $r5;
        android.webkit.WebSettings$PluginState $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r8;
        java.lang.String $r9, $r10;
        android.content.pm.PackageManager $r11;
        android.content.ContentResolver $r12;
        float $f0, $f1, $f2;
        android.content.res.Configuration $r13;
        android.content.res.Resources $r14;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        r1 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.chromium.android_webview.AwSettings: double mDIPScale> = 1.0;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock> = $r4;

        $r5 = <com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm: com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm NARROW_COLUMNS>;

        r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm mLayoutAlgorithm> = $r5;

        r0.<com.android.org.chromium.android_webview.AwSettings: int mTextSizePercent> = 100;

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mStandardFontFamily> = "sans-serif";

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mFixedFontFamily> = "monospace";

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mSansSerifFontFamily> = "sans-serif";

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mSerifFontFamily> = "serif";

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mCursiveFontFamily> = "cursive";

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mFantasyFontFamily> = "fantasy";

        r0.<com.android.org.chromium.android_webview.AwSettings: int mMinimumFontSize> = 8;

        r0.<com.android.org.chromium.android_webview.AwSettings: int mMinimumLogicalFontSize> = 8;

        r0.<com.android.org.chromium.android_webview.AwSettings: int mDefaultFontSize> = 16;

        r0.<com.android.org.chromium.android_webview.AwSettings: int mDefaultFixedFontSize> = 13;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mLoadsImagesAutomatically> = 1;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mImagesEnabled> = 1;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mJavaScriptEnabled> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowUniversalAccessFromFileURLs> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowFileAccessFromFileURLs> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mJavaScriptCanOpenWindowsAutomatically> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSupportMultipleWindows> = 0;

        $r6 = <android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState OFF>;

        r0.<com.android.org.chromium.android_webview.AwSettings: android.webkit.WebSettings$PluginState mPluginState> = $r6;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAppCacheEnabled> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mDomStorageEnabled> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mDatabaseEnabled> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mUseWideViewport> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mZeroLayoutHeightDisablesViewportQuirk> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mForceZeroLayoutHeight> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mLoadWithOverviewMode> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mMediaPlaybackRequiresUserGesture> = 1;

        r0.<com.android.org.chromium.android_webview.AwSettings: float mInitialPageScalePercent> = 0.0F;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mEnableSupportedHardwareAcceleratedFeatures> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: int mMixedContentMode> = 1;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mVideoOverlayForEmbeddedVideoEnabled> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowContentUrlAccess> = 1;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowFileUrlAccess> = 1;

        r0.<com.android.org.chromium.android_webview.AwSettings: int mCacheMode> = -1;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mShouldFocusFirstNode> = 1;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mGeolocationEnabled> = 1;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAutoCompleteEnabled> = 1;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mFullscreenSupported> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSupportZoom> = 1;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mBuiltInZoomControls> = 0;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mDisplayZoomControls> = 1;

        r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings> = 0L;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $i2 = virtualinvoke r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.INTERNET", $i0, $i1);

        if $i2 != 0 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        z2 = $z7;

        $r7 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r2 = $r7;

        entermonitor $r7;

     label03:
        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mHasInternetPermission> = z2;

        if z2 != 0 goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mBlockNetworkLoads> = $z6;

        $r8 = new com.android.org.chromium.android_webview.AwSettings$EventHandler;

        specialinvoke $r8.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void <init>(com.android.org.chromium.android_webview.AwSettings)>(r0);

        r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler> = $r8;

        if z0 == 0 goto label06;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowUniversalAccessFromFileURLs> = 1;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowFileAccessFromFileURLs> = 1;

     label06:
        $r10 = staticinvoke <com.android.org.chromium.android_webview.AwResource: java.lang.String getDefaultTextEncoding()>();

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mDefaultTextEncoding> = $r10;

        $r9 = staticinvoke <com.android.org.chromium.android_webview.AwSettings$LazyDefaultUserAgent: java.lang.String access$500()>();

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mUserAgent> = $r9;

        $r11 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z3 = virtualinvoke $r11.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.touchscreen");

        if $z3 != 0 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSpatialNavigationEnabled> = $z4;

        $r12 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i3 = staticinvoke <android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>($r12, "show_password", 1);

        if $i3 != 1 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mPasswordEchoEnabled> = $z5;

        $i4 = r0.<com.android.org.chromium.android_webview.AwSettings: int mTextSizePercent>;

        $f0 = (float) $i4;

        $r14 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r13 = virtualinvoke $r14.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $f2 = $r13.<android.content.res.Configuration: float fontScale>;

        $f1 = $f0 * $f2;

        $i5 = (int) $f1;

        r0.<com.android.org.chromium.android_webview.AwSettings: int mTextSizePercent> = $i5;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSupportLegacyQuirks> = z1;

        exitmonitor r2;

     label11:
        goto label14;

     label12:
        $r15 := @caughtexception;

        r3 = $r15;

        exitmonitor r2;

     label13:
        throw r3;

     label14:
        return;

        catch java.lang.Throwable from label03 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private void nativeAwSettingsGone(long)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        long l0, $l1, $l3;
        boolean $z0;
        byte $b2, $b4;
        java.lang.AssertionError $r1;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        l0 := @parameter0: long;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $l1 = r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $l3 = r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings>;

        $b4 = $l3 cmp l0;

        if $b4 == 0 goto label2;

     label1:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings> = 0L;

        return;
    }

    private double getDIPScaleLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        double $d0;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $d0 = r0.<com.android.org.chromium.android_webview.AwSettings: double mDIPScale>;

        return $d0;
    }

    void setDIPScale(double)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        double d0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        d0 := @parameter0: double;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<com.android.org.chromium.android_webview.AwSettings: double mDIPScale> = d0;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void setZoomListener(com.android.org.chromium.android_webview.AwSettings$ZoomSupportChangeListener)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        com.android.org.chromium.android_webview.AwSettings$ZoomSupportChangeListener r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        r1 := @parameter0: com.android.org.chromium.android_webview.AwSettings$ZoomSupportChangeListener;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$ZoomSupportChangeListener mZoomChangeListener> = r1;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void setWebContents(long)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        long l0, $l1, $l4, $l5, $l6;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        byte $b2, $b3, $b7;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;
        boolean $z0;
        java.lang.AssertionError $r6;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        l0 := @parameter0: long;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $l1 = r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        $l5 = r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings>;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void nativeDestroy(long)>($l5);

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $l6 = r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings>;

        $b7 = $l6 cmp 0L;

        if $b7 == 0 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $b3 = l0 cmp 0L;

        if $b3 == 0 goto label3;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void bindUiThread()>();

        $l4 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: long nativeInit(long)>(l0);

        r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings> = $l4;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void updateEverythingLocked()>();

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void updateEverythingLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        long $l0, $l1;
        byte $b2;
        java.lang.AssertionError $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z4 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z4 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $z1 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $l1 = r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings>;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label2;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $l0 = r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings>;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void nativeUpdateEverythingLocked(long)>($l0);

        $z2 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean supportsDoubleTapZoomLocked()>();

        $z3 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean supportsMultiTouchZoomLocked()>();

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void onGestureZoomSupportChanged(boolean,boolean)>($z2, $z3);

        return;
    }

    public void setBlockNetworkLoads(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.SecurityException $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        if z0 != 0 goto label2;

        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mHasInternetPermission>;

        if $z1 != 0 goto label2;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Permission denied - application missing INTERNET permission");

        throw $r4;

     label2:
        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mBlockNetworkLoads> = z0;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getBlockNetworkLoads()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mBlockNetworkLoads>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setAcceptThirdPartyCookies(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAcceptThirdPartyCookies>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAcceptThirdPartyCookies> = z0;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getAcceptThirdPartyCookies()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAcceptThirdPartyCookies>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setAllowFileAccess(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowFileUrlAccess>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowFileUrlAccess> = z0;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getAllowFileAccess()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowFileUrlAccess>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setAllowContentAccess(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowContentUrlAccess>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowContentUrlAccess> = z0;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getAllowContentAccess()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowContentUrlAccess>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setCacheMode(int)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        int i0, $i1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i1 = r0.<com.android.org.chromium.android_webview.AwSettings: int mCacheMode>;

        if $i1 == i0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: int mCacheMode> = i0;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getCacheMode()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = r0.<com.android.org.chromium.android_webview.AwSettings: int mCacheMode>;

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setShouldFocusFirstNode(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mShouldFocusFirstNode> = z0;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setInitialPageScale(float)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        float f0, $f1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        byte $b0;
        com.android.org.chromium.android_webview.AwSettings$1 $r4;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r5;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        f0 := @parameter0: float;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $f1 = r0.<com.android.org.chromium.android_webview.AwSettings: float mInitialPageScalePercent>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: float mInitialPageScalePercent> = f0;

        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        $r4 = new com.android.org.chromium.android_webview.AwSettings$1;

        specialinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$1: void <init>(com.android.org.chromium.android_webview.AwSettings)>(r0);

        virtualinvoke $r5.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void runOnUiThreadBlockingAndLocked(java.lang.Runnable)>($r4);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private float getInitialPageScalePercentLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        float $f0;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $f0 = r0.<com.android.org.chromium.android_webview.AwSettings: float mInitialPageScalePercent>;

        return $f0;
    }

    void setSpatialNavigationEnabled(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSpatialNavigationEnabled>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSpatialNavigationEnabled> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private boolean getSpatialNavigationLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSpatialNavigationEnabled>;

        return $z1;
    }

    void setEnableSupportedHardwareAcceleratedFeatures(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mEnableSupportedHardwareAcceleratedFeatures>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mEnableSupportedHardwareAcceleratedFeatures> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private boolean getEnableSupportedHardwareAcceleratedFeaturesLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mEnableSupportedHardwareAcceleratedFeatures>;

        return $z1;
    }

    public void setFullscreenSupported(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mFullscreenSupported>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mFullscreenSupported> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private boolean getFullscreenSupportedLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mFullscreenSupported>;

        return $z1;
    }

    public boolean shouldFocusFirstNode()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mShouldFocusFirstNode>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setGeolocationEnabled(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mGeolocationEnabled>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mGeolocationEnabled> = z0;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    boolean getGeolocationEnabled()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mGeolocationEnabled>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setSaveFormData(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        com.android.org.chromium.android_webview.AwSettings$2 $r4;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r5;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAutoCompleteEnabled>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAutoCompleteEnabled> = z0;

        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        $r4 = new com.android.org.chromium.android_webview.AwSettings$2;

        specialinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$2: void <init>(com.android.org.chromium.android_webview.AwSettings)>(r0);

        virtualinvoke $r5.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void runOnUiThreadBlockingAndLocked(java.lang.Runnable)>($r4);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getSaveFormData()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean getSaveFormDataLocked()>();

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getSaveFormDataLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAutoCompleteEnabled>;

        return $z1;
    }

    public static java.lang.String getDefaultUserAgent()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.android.org.chromium.android_webview.AwSettings$LazyDefaultUserAgent: java.lang.String access$500()>();

        return $r0;
    }

    public void setUserAgentString(java.lang.String)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.String r1, r3, $r6, $r7;
        java.lang.Object r2, $r5;
        java.lang.Throwable r4, $r10;
        boolean $z0;
        com.android.org.chromium.android_webview.AwSettings$3 $r8;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r9;
        int $i0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mUserAgent>;

        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        $r6 = staticinvoke <com.android.org.chromium.android_webview.AwSettings$LazyDefaultUserAgent: java.lang.String access$500()>();

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mUserAgent> = $r6;

        goto label4;

     label3:
        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mUserAgent> = r1;

     label4:
        $r7 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mUserAgent>;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label5;

        $r9 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        $r8 = new com.android.org.chromium.android_webview.AwSettings$3;

        specialinvoke $r8.<com.android.org.chromium.android_webview.AwSettings$3: void <init>(com.android.org.chromium.android_webview.AwSettings)>(r0);

        virtualinvoke $r9.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void runOnUiThreadBlockingAndLocked(java.lang.Runnable)>($r8);

     label5:
        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label8:
        throw r4;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.lang.String getUserAgentString()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.String $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String getUserAgentLocked()>();

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.lang.String getUserAgentLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.AssertionError $r3;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mUserAgent>;

        return $r1;
    }

    public void setLoadWithOverviewMode(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        com.android.org.chromium.android_webview.AwSettings$4 $r4;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r5;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mLoadWithOverviewMode>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mLoadWithOverviewMode> = z0;

        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        $r4 = new com.android.org.chromium.android_webview.AwSettings$4;

        specialinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$4: void <init>(com.android.org.chromium.android_webview.AwSettings)>(r0);

        virtualinvoke $r5.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void runOnUiThreadBlockingAndLocked(java.lang.Runnable)>($r4);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getLoadWithOverviewMode()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean getLoadWithOverviewModeLocked()>();

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getLoadWithOverviewModeLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mLoadWithOverviewMode>;

        return $z1;
    }

    public void setTextZoom(int)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        int i0, $i1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i1 = r0.<com.android.org.chromium.android_webview.AwSettings: int mTextSizePercent>;

        if $i1 == i0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: int mTextSizePercent> = i0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getTextZoom()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: int getTextSizePercentLocked()>();

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private int getTextSizePercentLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        int $i0;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $i0 = r0.<com.android.org.chromium.android_webview.AwSettings: int mTextSizePercent>;

        return $i0;
    }

    public void setStandardFontFamily(java.lang.String)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.String r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r6;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        if r1 == null goto label2;

        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mStandardFontFamily>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mStandardFontFamily> = r1;

        $r6 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r6.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.String getStandardFontFamily()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.String $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String getStandardFontFamilyLocked()>();

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.lang.String getStandardFontFamilyLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.AssertionError $r3;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mStandardFontFamily>;

        return $r1;
    }

    public void setFixedFontFamily(java.lang.String)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.String r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r6;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        if r1 == null goto label2;

        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mFixedFontFamily>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mFixedFontFamily> = r1;

        $r6 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r6.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.String getFixedFontFamily()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.String $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String getFixedFontFamilyLocked()>();

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.lang.String getFixedFontFamilyLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.AssertionError $r3;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mFixedFontFamily>;

        return $r1;
    }

    public void setSansSerifFontFamily(java.lang.String)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.String r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r6;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        if r1 == null goto label2;

        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mSansSerifFontFamily>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mSansSerifFontFamily> = r1;

        $r6 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r6.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.String getSansSerifFontFamily()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.String $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String getSansSerifFontFamilyLocked()>();

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.lang.String getSansSerifFontFamilyLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.AssertionError $r3;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mSansSerifFontFamily>;

        return $r1;
    }

    public void setSerifFontFamily(java.lang.String)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.String r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r6;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        if r1 == null goto label2;

        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mSerifFontFamily>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mSerifFontFamily> = r1;

        $r6 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r6.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.String getSerifFontFamily()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.String $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String getSerifFontFamilyLocked()>();

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.lang.String getSerifFontFamilyLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.AssertionError $r3;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mSerifFontFamily>;

        return $r1;
    }

    public void setCursiveFontFamily(java.lang.String)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.String r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r6;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        if r1 == null goto label2;

        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mCursiveFontFamily>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mCursiveFontFamily> = r1;

        $r6 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r6.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.String getCursiveFontFamily()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.String $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String getCursiveFontFamilyLocked()>();

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.lang.String getCursiveFontFamilyLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.AssertionError $r3;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mCursiveFontFamily>;

        return $r1;
    }

    public void setFantasyFontFamily(java.lang.String)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.String r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r6;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        if r1 == null goto label2;

        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mFantasyFontFamily>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mFantasyFontFamily> = r1;

        $r6 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r6.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.String getFantasyFontFamily()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.String $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String getFantasyFontFamilyLocked()>();

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.lang.String getFantasyFontFamilyLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.AssertionError $r3;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mFantasyFontFamily>;

        return $r1;
    }

    public void setMinimumFontSize(int)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        int i0, $i1, i2;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        i2 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: int clipFontSize(int)>(i0);

        $i1 = r0.<com.android.org.chromium.android_webview.AwSettings: int mMinimumFontSize>;

        if $i1 == i2 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: int mMinimumFontSize> = i2;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getMinimumFontSize()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: int getMinimumFontSizeLocked()>();

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private int getMinimumFontSizeLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        int $i0;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $i0 = r0.<com.android.org.chromium.android_webview.AwSettings: int mMinimumFontSize>;

        return $i0;
    }

    public void setMinimumLogicalFontSize(int)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        int i0, $i1, i2;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        i2 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: int clipFontSize(int)>(i0);

        $i1 = r0.<com.android.org.chromium.android_webview.AwSettings: int mMinimumLogicalFontSize>;

        if $i1 == i2 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: int mMinimumLogicalFontSize> = i2;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getMinimumLogicalFontSize()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: int getMinimumLogicalFontSizeLocked()>();

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private int getMinimumLogicalFontSizeLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        int $i0;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $i0 = r0.<com.android.org.chromium.android_webview.AwSettings: int mMinimumLogicalFontSize>;

        return $i0;
    }

    public void setDefaultFontSize(int)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        int i0, $i1, i2;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        i2 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: int clipFontSize(int)>(i0);

        $i1 = r0.<com.android.org.chromium.android_webview.AwSettings: int mDefaultFontSize>;

        if $i1 == i2 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: int mDefaultFontSize> = i2;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getDefaultFontSize()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: int getDefaultFontSizeLocked()>();

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private int getDefaultFontSizeLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        int $i0;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $i0 = r0.<com.android.org.chromium.android_webview.AwSettings: int mDefaultFontSize>;

        return $i0;
    }

    public void setDefaultFixedFontSize(int)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        int i0, $i1, i2;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        i2 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: int clipFontSize(int)>(i0);

        $i1 = r0.<com.android.org.chromium.android_webview.AwSettings: int mDefaultFixedFontSize>;

        if $i1 == i2 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: int mDefaultFixedFontSize> = i2;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getDefaultFixedFontSize()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: int getDefaultFixedFontSizeLocked()>();

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private int getDefaultFixedFontSizeLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        int $i0;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $i0 = r0.<com.android.org.chromium.android_webview.AwSettings: int mDefaultFixedFontSize>;

        return $i0;
    }

    public void setJavaScriptEnabled(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mJavaScriptEnabled>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mJavaScriptEnabled> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setAllowUniversalAccessFromFileURLs(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowUniversalAccessFromFileURLs>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowUniversalAccessFromFileURLs> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setAllowFileAccessFromFileURLs(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowFileAccessFromFileURLs>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowFileAccessFromFileURLs> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setLoadsImagesAutomatically(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mLoadsImagesAutomatically>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mLoadsImagesAutomatically> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getLoadsImagesAutomatically()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean getLoadsImagesAutomaticallyLocked()>();

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getLoadsImagesAutomaticallyLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mLoadsImagesAutomatically>;

        return $z1;
    }

    public void setImagesEnabled(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mImagesEnabled>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mImagesEnabled> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getImagesEnabled()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mImagesEnabled>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getImagesEnabledLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mImagesEnabled>;

        return $z1;
    }

    public boolean getJavaScriptEnabled()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mJavaScriptEnabled>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getJavaScriptEnabledLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mJavaScriptEnabled>;

        return $z1;
    }

    public boolean getAllowUniversalAccessFromFileURLs()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean getAllowUniversalAccessFromFileURLsLocked()>();

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getAllowUniversalAccessFromFileURLsLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowUniversalAccessFromFileURLs>;

        return $z1;
    }

    public boolean getAllowFileAccessFromFileURLs()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean getAllowFileAccessFromFileURLsLocked()>();

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getAllowFileAccessFromFileURLsLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAllowFileAccessFromFileURLs>;

        return $z1;
    }

    public void setPluginsEnabled(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0;
        android.webkit.WebSettings$PluginState $r1;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = <android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState ON>;

        goto label2;

     label1:
        $r1 = <android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState OFF>;

     label2:
        virtualinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void setPluginState(android.webkit.WebSettings$PluginState)>($r1);

        return;
    }

    public void setPluginState(android.webkit.WebSettings$PluginState)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        android.webkit.WebSettings$PluginState r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r6;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        r1 := @parameter0: android.webkit.WebSettings$PluginState;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: android.webkit.WebSettings$PluginState mPluginState>;

        if $r5 == r1 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: android.webkit.WebSettings$PluginState mPluginState> = r1;

        $r6 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r6.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getPluginsEnabled()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        android.webkit.WebSettings$PluginState $r4, $r5;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: android.webkit.WebSettings$PluginState mPluginState>;

        $r4 = <android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState ON>;

        if $r5 != $r4 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor r1;

     label4:
        return $z0;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean getPluginsDisabledLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        android.webkit.WebSettings$PluginState $r1, $r2;
        java.lang.Object $r3;
        java.lang.AssertionError $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r3);

        if $z2 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<com.android.org.chromium.android_webview.AwSettings: android.webkit.WebSettings$PluginState mPluginState>;

        $r1 = <android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState OFF>;

        if $r2 != $r1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public android.webkit.WebSettings$PluginState getPluginState()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        android.webkit.WebSettings$PluginState $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: android.webkit.WebSettings$PluginState mPluginState>;

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setJavaScriptCanOpenWindowsAutomatically(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mJavaScriptCanOpenWindowsAutomatically>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mJavaScriptCanOpenWindowsAutomatically> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getJavaScriptCanOpenWindowsAutomatically()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean getJavaScriptCanOpenWindowsAutomaticallyLocked()>();

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getJavaScriptCanOpenWindowsAutomaticallyLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mJavaScriptCanOpenWindowsAutomatically>;

        return $z1;
    }

    public void setLayoutAlgorithm(com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r6;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        r1 := @parameter0: com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm mLayoutAlgorithm>;

        if $r5 == r1 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm mLayoutAlgorithm> = r1;

        $r6 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r6.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm getLayoutAlgorithm()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm mLayoutAlgorithm>;

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getTextAutosizingEnabledLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm $r1, $r2;
        java.lang.Object $r3;
        java.lang.AssertionError $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r3);

        if $z2 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm mLayoutAlgorithm>;

        $r1 = <com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm: com.android.org.chromium.android_webview.AwSettings$LayoutAlgorithm TEXT_AUTOSIZING>;

        if $r2 != $r1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public void setSupportMultipleWindows(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSupportMultipleWindows>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSupportMultipleWindows> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean supportMultipleWindows()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSupportMultipleWindows>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getSupportMultipleWindowsLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSupportMultipleWindows>;

        return $z1;
    }

    private boolean getSupportLegacyQuirksLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSupportLegacyQuirks>;

        return $z1;
    }

    public void setUseWideViewPort(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mUseWideViewport>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mUseWideViewport> = z0;

        $z2 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean supportsDoubleTapZoomLocked()>();

        $z3 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean supportsMultiTouchZoomLocked()>();

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void onGestureZoomSupportChanged(boolean,boolean)>($z2, $z3);

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getUseWideViewPort()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean getUseWideViewportLocked()>();

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getUseWideViewportLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mUseWideViewport>;

        return $z1;
    }

    public void setZeroLayoutHeightDisablesViewportQuirk(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mZeroLayoutHeightDisablesViewportQuirk>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mZeroLayoutHeightDisablesViewportQuirk> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getZeroLayoutHeightDisablesViewportQuirk()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean getZeroLayoutHeightDisablesViewportQuirkLocked()>();

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getZeroLayoutHeightDisablesViewportQuirkLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mZeroLayoutHeightDisablesViewportQuirk>;

        return $z1;
    }

    public void setForceZeroLayoutHeight(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mForceZeroLayoutHeight>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mForceZeroLayoutHeight> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getForceZeroLayoutHeight()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean getForceZeroLayoutHeightLocked()>();

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getForceZeroLayoutHeightLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mForceZeroLayoutHeight>;

        return $z1;
    }

    private boolean getPasswordEchoEnabledLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mPasswordEchoEnabled>;

        return $z1;
    }

    public void setAppCacheEnabled(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAppCacheEnabled>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAppCacheEnabled> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setAppCachePath(java.lang.String)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.String r1;
        boolean z0, $z1, $z2;
        java.lang.Object r2, $r5, $r6, r10;
        java.lang.Throwable r3, r4, $r8, $r9;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r7;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        r1 := @parameter0: java.lang.String;

        z0 = 0;

        $r5 = <com.android.org.chromium.android_webview.AwSettings: java.lang.Object sGlobalContentSettingsLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $z1 = <com.android.org.chromium.android_webview.AwSettings: boolean sAppCachePathIsSet>;

        if $z1 != 0 goto label02;

        if r1 == null goto label02;

        $z2 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label02;

        <com.android.org.chromium.android_webview.AwSettings: boolean sAppCachePathIsSet> = 1;

        z0 = 1;

     label02:
        exitmonitor r2;

     label03:
        goto label06;

     label04:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label05:
        throw r3;

     label06:
        if z0 == 0 goto label11;

        $r6 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r10 = $r6;

        entermonitor $r6;

     label07:
        $r7 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r7.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

        exitmonitor r10;

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r10;

     label10:
        throw r4;

     label11:
        return;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private boolean getAppCacheEnabledLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3, $r4;
        java.lang.Throwable r2, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r5;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z3 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r4);

        if $z3 != 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mAppCacheEnabled>;

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r3 = <com.android.org.chromium.android_webview.AwSettings: java.lang.Object sGlobalContentSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label3:
        $z2 = <com.android.org.chromium.android_webview.AwSettings: boolean sAppCachePathIsSet>;

        exitmonitor r1;

     label4:
        return $z2;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setDomStorageEnabled(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mDomStorageEnabled>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mDomStorageEnabled> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getDomStorageEnabled()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mDomStorageEnabled>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getDomStorageEnabledLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mDomStorageEnabled>;

        return $z1;
    }

    public void setDatabaseEnabled(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mDatabaseEnabled>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mDatabaseEnabled> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getDatabaseEnabled()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mDatabaseEnabled>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getDatabaseEnabledLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mDatabaseEnabled>;

        return $z1;
    }

    public void setDefaultTextEncodingName(java.lang.String)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.String r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r6;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        if r1 == null goto label2;

        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mDefaultTextEncoding>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mDefaultTextEncoding> = r1;

        $r6 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r6.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.String getDefaultTextEncodingName()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.String $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String getDefaultTextEncodingLocked()>();

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.lang.String getDefaultTextEncodingLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.AssertionError $r3;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mDefaultTextEncoding>;

        return $r1;
    }

    public void setMediaPlaybackRequiresUserGesture(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mMediaPlaybackRequiresUserGesture>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mMediaPlaybackRequiresUserGesture> = z0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getMediaPlaybackRequiresUserGesture()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean getMediaPlaybackRequiresUserGestureLocked()>();

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getMediaPlaybackRequiresUserGestureLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mMediaPlaybackRequiresUserGesture>;

        return $z1;
    }

    public void setDefaultVideoPosterURL(java.lang.String)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.String r1, $r5, $r6, $r8;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r9;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r7;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mDefaultVideoPosterURL>;

        if $r5 == null goto label2;

        $r8 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mDefaultVideoPosterURL>;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

     label2:
        $r6 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mDefaultVideoPosterURL>;

        if $r6 != null goto label4;

        if r1 == null goto label4;

     label3:
        r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mDefaultVideoPosterURL> = r1;

        $r7 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r7.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label7:
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.lang.String getDefaultVideoPosterURL()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.String $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String getDefaultVideoPosterURLLocked()>();

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.lang.String getDefaultVideoPosterURLLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.AssertionError $r3;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.String mDefaultVideoPosterURL>;

        return $r1;
    }

    private void onGestureZoomSupportChanged(boolean, boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, z1;
        com.android.org.chromium.android_webview.AwSettings$5 $r1;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r2 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        $r1 = new com.android.org.chromium.android_webview.AwSettings$5;

        specialinvoke $r1.<com.android.org.chromium.android_webview.AwSettings$5: void <init>(com.android.org.chromium.android_webview.AwSettings,boolean,boolean)>(r0, z0, z1);

        virtualinvoke $r2.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void maybePostOnUiThread(java.lang.Runnable)>($r1);

        return;
    }

    public void setSupportZoom(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSupportZoom>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSupportZoom> = z0;

        $z2 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean supportsDoubleTapZoomLocked()>();

        $z3 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean supportsMultiTouchZoomLocked()>();

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void onGestureZoomSupportChanged(boolean,boolean)>($z2, $z3);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean supportZoom()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSupportZoom>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setBuiltInZoomControls(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mBuiltInZoomControls>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mBuiltInZoomControls> = z0;

        $z2 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean supportsDoubleTapZoomLocked()>();

        $z3 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean supportsMultiTouchZoomLocked()>();

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void onGestureZoomSupportChanged(boolean,boolean)>($z2, $z3);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getBuiltInZoomControls()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mBuiltInZoomControls>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setDisplayZoomControls(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mDisplayZoomControls> = z0;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean getDisplayZoomControls()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mDisplayZoomControls>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setMixedContentMode(int)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        int i0, $i1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i1 = r0.<com.android.org.chromium.android_webview.AwSettings: int mMixedContentMode>;

        if $i1 == i0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: int mMixedContentMode> = i0;

        $r4 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        virtualinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void updateWebkitPreferencesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getMixedContentMode()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = r0.<com.android.org.chromium.android_webview.AwSettings: int mMixedContentMode>;

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getAllowRunningInsecureContentLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        int $i0;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $i0 = r0.<com.android.org.chromium.android_webview.AwSettings: int mMixedContentMode>;

        if $i0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private boolean getAllowDisplayingInsecureContentLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $i0 = r0.<com.android.org.chromium.android_webview.AwSettings: int mMixedContentMode>;

        if $i0 == 0 goto label2;

        $i1 = r0.<com.android.org.chromium.android_webview.AwSettings: int mMixedContentMode>;

        if $i1 != 2 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public void setVideoOverlayForEmbeddedVideoEnabled(boolean)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        com.android.org.chromium.android_webview.AwSettings$6 $r4;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r5;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mVideoOverlayForEmbeddedVideoEnabled>;

        if $z1 == z0 goto label2;

        r0.<com.android.org.chromium.android_webview.AwSettings: boolean mVideoOverlayForEmbeddedVideoEnabled> = z0;

        $r5 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        $r4 = new com.android.org.chromium.android_webview.AwSettings$6;

        specialinvoke $r4.<com.android.org.chromium.android_webview.AwSettings$6: void <init>(com.android.org.chromium.android_webview.AwSettings)>(r0);

        virtualinvoke $r5.<com.android.org.chromium.android_webview.AwSettings$EventHandler: void runOnUiThreadBlockingAndLocked(java.lang.Runnable)>($r4);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean getVideoOverlayForEmbeddedVideoEnabled()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean getVideoOverlayForEmbeddedVideoEnabledLocked()>();

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean getVideoOverlayForEmbeddedVideoEnabledLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z2 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mVideoOverlayForEmbeddedVideoEnabled>;

        return $z1;
    }

    private boolean supportsDoubleTapZoomLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z5 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z5 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSupportZoom>;

        if $z1 == 0 goto label2;

        $z2 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mBuiltInZoomControls>;

        if $z2 == 0 goto label2;

        $z3 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mUseWideViewport>;

        if $z3 == 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    private boolean supportsMultiTouchZoomLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r1;
        java.lang.AssertionError $r2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        $z4 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z4 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mSupportZoom>;

        if $z1 == 0 goto label2;

        $z2 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mBuiltInZoomControls>;

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    boolean supportsMultiTouchZoom()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean supportsMultiTouchZoomLocked()>();

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    boolean shouldDisplayZoomControls()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: boolean supportsMultiTouchZoomLocked()>();

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.org.chromium.android_webview.AwSettings: boolean mDisplayZoomControls>;

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        exitmonitor r1;

     label4:
        return $z2;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private int clipFontSize(int)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        int i0;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        return 1;

     label1:
        if i0 <= 72 goto label2;

        return 72;

     label2:
        return i0;
    }

    private void updateEverything()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void updateEverythingLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void populateWebPreferences(long)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        long l0, $l1, $l2;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        boolean $z0;
        byte $b3;
        java.lang.AssertionError $r4;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        l0 := @parameter0: long;

        $r3 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $l2 = r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings>;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $l1 = r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings>;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void nativePopulateWebPreferencesLocked(long,long)>($l1, l0);

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void updateWebkitPreferencesOnUiThreadLocked()
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        boolean $z0;
        long $l0, $l2;
        byte $b1;
        com.android.org.chromium.android_webview.AwSettings$EventHandler $r1;
        android.os.Handler $r2;
        java.lang.AssertionError $r3;

        r0 := @this: com.android.org.chromium.android_webview.AwSettings;

        $z0 = <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$EventHandler mEventHandler>;

        $r2 = staticinvoke <com.android.org.chromium.android_webview.AwSettings$EventHandler: android.os.Handler access$1200(com.android.org.chromium.android_webview.AwSettings$EventHandler)>($r1);

        if $r2 != null goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        staticinvoke <com.android.org.chromium.base.ThreadUtils: void assertOnUiThread()>();

        $l0 = r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings>;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void nativeUpdateWebkitPreferencesLocked(long)>($l2);

     label2:
        return;
    }

    private native long nativeInit(long);

    private native void nativeDestroy(long);

    private native void nativePopulateWebPreferencesLocked(long, long);

    private native void nativeResetScrollAndScaleState(long);

    private native void nativeUpdateEverythingLocked(long);

    private native void nativeUpdateInitialPageScaleLocked(long);

    private native void nativeUpdateUserAgentLocked(long);

    private native void nativeUpdateWebkitPreferencesLocked(long);

    private static native java.lang.String nativeGetDefaultUserAgent();

    private native void nativeUpdateFormDataPreferencesLocked(long);

    private native void nativeUpdateRendererPreferencesLocked(long);

    static java.lang.String access$000()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <com.android.org.chromium.android_webview.AwSettings: java.lang.String nativeGetDefaultUserAgent()>();

        return $r0;
    }

    static java.lang.Object access$100(com.android.org.chromium.android_webview.AwSettings)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.org.chromium.android_webview.AwSettings;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: java.lang.Object mAwSettingsLock>;

        return $r1;
    }

    static long access$200(com.android.org.chromium.android_webview.AwSettings)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        long $l0;

        r0 := @parameter0: com.android.org.chromium.android_webview.AwSettings;

        $l0 = r0.<com.android.org.chromium.android_webview.AwSettings: long mNativeAwSettings>;

        return $l0;
    }

    static void access$400(com.android.org.chromium.android_webview.AwSettings)
    {
        com.android.org.chromium.android_webview.AwSettings r0;

        r0 := @parameter0: com.android.org.chromium.android_webview.AwSettings;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void updateWebkitPreferencesOnUiThreadLocked()>();

        return;
    }

    static void access$600(com.android.org.chromium.android_webview.AwSettings, long)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        long l0;

        r0 := @parameter0: com.android.org.chromium.android_webview.AwSettings;

        l0 := @parameter1: long;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void nativeUpdateInitialPageScaleLocked(long)>(l0);

        return;
    }

    static void access$700(com.android.org.chromium.android_webview.AwSettings, long)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        long l0;

        r0 := @parameter0: com.android.org.chromium.android_webview.AwSettings;

        l0 := @parameter1: long;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void nativeUpdateFormDataPreferencesLocked(long)>(l0);

        return;
    }

    static void access$800(com.android.org.chromium.android_webview.AwSettings, long)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        long l0;

        r0 := @parameter0: com.android.org.chromium.android_webview.AwSettings;

        l0 := @parameter1: long;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void nativeUpdateUserAgentLocked(long)>(l0);

        return;
    }

    static void access$900(com.android.org.chromium.android_webview.AwSettings, long)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        long l0;

        r0 := @parameter0: com.android.org.chromium.android_webview.AwSettings;

        l0 := @parameter1: long;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void nativeResetScrollAndScaleState(long)>(l0);

        return;
    }

    static com.android.org.chromium.android_webview.AwSettings$ZoomSupportChangeListener access$1000(com.android.org.chromium.android_webview.AwSettings)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        com.android.org.chromium.android_webview.AwSettings$ZoomSupportChangeListener $r1;

        r0 := @parameter0: com.android.org.chromium.android_webview.AwSettings;

        $r1 = r0.<com.android.org.chromium.android_webview.AwSettings: com.android.org.chromium.android_webview.AwSettings$ZoomSupportChangeListener mZoomChangeListener>;

        return $r1;
    }

    static void access$1100(com.android.org.chromium.android_webview.AwSettings, long)
    {
        com.android.org.chromium.android_webview.AwSettings r0;
        long l0;

        r0 := @parameter0: com.android.org.chromium.android_webview.AwSettings;

        l0 := @parameter1: long;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwSettings: void nativeUpdateRendererPreferencesLocked(long)>(l0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.lang.Object $r1;

        <com.android.org.chromium.android_webview.AwSettings: int MAXIMUM_FONT_SIZE> = 72;

        <com.android.org.chromium.android_webview.AwSettings: int MINIMUM_FONT_SIZE> = 1;

        <com.android.org.chromium.android_webview.AwSettings: java.lang.String TAG> = "AwSettings";

        <com.android.org.chromium.android_webview.AwSettings: int MIXED_CONTENT_COMPATIBILITY_MODE> = 2;

        <com.android.org.chromium.android_webview.AwSettings: int MIXED_CONTENT_NEVER_ALLOW> = 1;

        <com.android.org.chromium.android_webview.AwSettings: int MIXED_CONTENT_ALWAYS_ALLOW> = 0;

        $r0 = class "com/android/org/chromium/android_webview/AwSettings";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.android.org.chromium.android_webview.AwSettings: boolean $assertionsDisabled> = $z1;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <com.android.org.chromium.android_webview.AwSettings: java.lang.Object sGlobalContentSettingsLock> = $r1;

        <com.android.org.chromium.android_webview.AwSettings: boolean sAppCachePathIsSet> = 0;

        return;
    }
}
