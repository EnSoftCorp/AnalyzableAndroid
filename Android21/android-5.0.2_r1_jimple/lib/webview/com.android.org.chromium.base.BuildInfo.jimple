public class com.android.org.chromium.base.BuildInfo extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final int MAX_FINGERPRINT_LENGTH;

    private void <init>()
    {
        com.android.org.chromium.base.BuildInfo r0;

        r0 := @this: com.android.org.chromium.base.BuildInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getDevice()
    {
        java.lang.String $r0;

        $r0 = <android.os.Build: java.lang.String DEVICE>;

        return $r0;
    }

    public static java.lang.String getBrand()
    {
        java.lang.String $r0;

        $r0 = <android.os.Build: java.lang.String BRAND>;

        return $r0;
    }

    public static java.lang.String getAndroidBuildId()
    {
        java.lang.String $r0;

        $r0 = <android.os.Build: java.lang.String ID>;

        return $r0;
    }

    public static java.lang.String getAndroidBuildFingerprint()
    {
        java.lang.String $r0, $r1, $r2;
        int $i0, $i1;

        $r1 = <android.os.Build: java.lang.String FINGERPRINT>;

        $r0 = <android.os.Build: java.lang.String FINGERPRINT>;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 128);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        return $r2;
    }

    public static java.lang.String getDeviceModel()
    {
        java.lang.String $r0;

        $r0 = <android.os.Build: java.lang.String MODEL>;

        return $r0;
    }

    public static java.lang.String getPackageVersionCode(android.content.Context)
    {
        android.content.Context r0;
        java.lang.String r1, $r4;
        android.content.pm.PackageManager r2;
        android.content.pm.PackageInfo r3;
        int $i0, $i1;
        android.content.pm.PackageManager$NameNotFoundException $r5;

        r0 := @parameter0: android.content.Context;

        r1 = "versionCode not available.";

     label1:
        r2 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r4 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        r3 = virtualinvoke r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r4, 0);

        r1 = "";

        $i0 = r3.<android.content.pm.PackageInfo: int versionCode>;

        if $i0 <= 0 goto label2;

        $i1 = r3.<android.content.pm.PackageInfo: int versionCode>;

        r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("BuildInfo", r1);

     label4:
        return r1;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public static java.lang.String getPackageVersionName(android.content.Context)
    {
        android.content.Context r0;
        java.lang.String r1, $r4;
        android.content.pm.PackageManager r2;
        android.content.pm.PackageInfo r3;
        android.content.pm.PackageManager$NameNotFoundException $r5;

        r0 := @parameter0: android.content.Context;

        r1 = "versionName not available";

     label1:
        r2 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r4 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        r3 = virtualinvoke r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r4, 0);

        r1 = r3.<android.content.pm.PackageInfo: java.lang.String versionName>;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("BuildInfo", r1);

     label4:
        return r1;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public static java.lang.String getPackageLabel(android.content.Context)
    {
        android.content.Context r0;
        android.content.pm.PackageManager r1;
        android.content.pm.ApplicationInfo r2;
        java.lang.CharSequence r3;
        java.lang.String $r4, $r5;
        android.content.pm.PackageManager$NameNotFoundException $r6;

        r0 := @parameter0: android.content.Context;

     label1:
        r1 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r4 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        r2 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>($r4, 128);

        r3 = virtualinvoke r1.<android.content.pm.PackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>(r2);

        if r3 == null goto label2;

        $r5 = interfaceinvoke r3.<java.lang.CharSequence: java.lang.String toString()>();

        goto label3;

     label2:
        $r5 = "";

     label3:
        return $r5;

     label4:
        $r6 := @caughtexception;

        return "";

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label3 with label4;
    }

    public static java.lang.String getPackageName(android.content.Context)
    {
        android.content.Context r0;
        java.lang.String r1, $r2, $r3;

        r0 := @parameter0: android.content.Context;

        if r0 == null goto label1;

        $r3 = virtualinvoke r0.<android.content.Context: java.lang.String getPackageName()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        r1 = $r3;

        if r1 == null goto label3;

        $r2 = r1;

        goto label4;

     label3:
        $r2 = "";

     label4:
        return $r2;
    }

    public static java.lang.String getBuildType()
    {
        java.lang.String $r0;

        $r0 = <android.os.Build: java.lang.String TYPE>;

        return $r0;
    }

    public static int getSdkInt()
    {
        int $i0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        return $i0;
    }

    public static void <clinit>()
    {
        <com.android.org.chromium.base.BuildInfo: int MAX_FINGERPRINT_LENGTH> = 128;

        <com.android.org.chromium.base.BuildInfo: java.lang.String TAG> = "BuildInfo";

        return;
    }
}
