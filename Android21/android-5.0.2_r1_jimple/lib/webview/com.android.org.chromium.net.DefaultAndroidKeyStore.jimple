public class com.android.org.chromium.net.DefaultAndroidKeyStore extends java.lang.Object implements com.android.org.chromium.net.AndroidKeyStore
{
    private static final java.lang.String TAG;

    public void <init>()
    {
        com.android.org.chromium.net.DefaultAndroidKeyStore r0;

        r0 := @this: com.android.org.chromium.net.DefaultAndroidKeyStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.android.org.chromium.net.AndroidPrivateKey createKey(java.security.PrivateKey)
    {
        com.android.org.chromium.net.DefaultAndroidKeyStore r0;
        java.security.PrivateKey r1;
        com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey $r2;

        r0 := @this: com.android.org.chromium.net.DefaultAndroidKeyStore;

        r1 := @parameter0: java.security.PrivateKey;

        $r2 = new com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey;

        specialinvoke $r2.<com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey: void <init>(java.security.PrivateKey,com.android.org.chromium.net.DefaultAndroidKeyStore)>(r1, r0);

        return $r2;
    }

    public byte[] getRSAKeyModulus(com.android.org.chromium.net.AndroidPrivateKey)
    {
        com.android.org.chromium.net.DefaultAndroidKeyStore r0;
        com.android.org.chromium.net.AndroidPrivateKey r1;
        java.security.PrivateKey r2;
        com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey $r3;
        boolean $z0;
        java.security.interfaces.RSAKey $r4;
        java.math.BigInteger $r5;
        byte[] $r6;

        r0 := @this: com.android.org.chromium.net.DefaultAndroidKeyStore;

        r1 := @parameter0: com.android.org.chromium.net.AndroidPrivateKey;

        $r3 = (com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey) r1;

        r2 = virtualinvoke $r3.<com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey: java.security.PrivateKey getJavaKey()>();

        $z0 = r2 instanceof java.security.interfaces.RSAKey;

        if $z0 == 0 goto label1;

        $r4 = (java.security.interfaces.RSAKey) r2;

        $r5 = interfaceinvoke $r4.<java.security.interfaces.RSAKey: java.math.BigInteger getModulus()>();

        $r6 = virtualinvoke $r5.<java.math.BigInteger: byte[] toByteArray()>();

        return $r6;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AndroidKeyStoreInProcessImpl", "Not a RSAKey instance!");

        return null;
    }

    public byte[] getDSAKeyParamQ(com.android.org.chromium.net.AndroidPrivateKey)
    {
        com.android.org.chromium.net.DefaultAndroidKeyStore r0;
        com.android.org.chromium.net.AndroidPrivateKey r1;
        java.security.PrivateKey r2;
        java.security.interfaces.DSAParams r3;
        com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey $r4;
        boolean $z0;
        java.security.interfaces.DSAKey $r5;
        java.math.BigInteger $r6;
        byte[] $r7;

        r0 := @this: com.android.org.chromium.net.DefaultAndroidKeyStore;

        r1 := @parameter0: com.android.org.chromium.net.AndroidPrivateKey;

        $r4 = (com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey) r1;

        r2 = virtualinvoke $r4.<com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey: java.security.PrivateKey getJavaKey()>();

        $z0 = r2 instanceof java.security.interfaces.DSAKey;

        if $z0 == 0 goto label1;

        $r5 = (java.security.interfaces.DSAKey) r2;

        r3 = interfaceinvoke $r5.<java.security.interfaces.DSAKey: java.security.interfaces.DSAParams getParams()>();

        $r6 = interfaceinvoke r3.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r7 = virtualinvoke $r6.<java.math.BigInteger: byte[] toByteArray()>();

        return $r7;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AndroidKeyStoreInProcessImpl", "Not a DSAKey instance!");

        return null;
    }

    public byte[] getECKeyOrder(com.android.org.chromium.net.AndroidPrivateKey)
    {
        com.android.org.chromium.net.DefaultAndroidKeyStore r0;
        com.android.org.chromium.net.AndroidPrivateKey r1;
        java.security.PrivateKey r2;
        java.security.spec.ECParameterSpec r3;
        com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey $r4;
        boolean $z0;
        java.security.interfaces.ECKey $r5;
        java.math.BigInteger $r6;
        byte[] $r7;

        r0 := @this: com.android.org.chromium.net.DefaultAndroidKeyStore;

        r1 := @parameter0: com.android.org.chromium.net.AndroidPrivateKey;

        $r4 = (com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey) r1;

        r2 = virtualinvoke $r4.<com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey: java.security.PrivateKey getJavaKey()>();

        $z0 = r2 instanceof java.security.interfaces.ECKey;

        if $z0 == 0 goto label1;

        $r5 = (java.security.interfaces.ECKey) r2;

        r3 = interfaceinvoke $r5.<java.security.interfaces.ECKey: java.security.spec.ECParameterSpec getParams()>();

        $r6 = virtualinvoke r3.<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()>();

        $r7 = virtualinvoke $r6.<java.math.BigInteger: byte[] toByteArray()>();

        return $r7;

     label1:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AndroidKeyStoreInProcessImpl", "Not an ECKey instance!");

        return null;
    }

    public byte[] getPrivateKeyEncodedBytes(com.android.org.chromium.net.AndroidPrivateKey)
    {
        com.android.org.chromium.net.DefaultAndroidKeyStore r0;
        com.android.org.chromium.net.AndroidPrivateKey r1;
        java.security.PrivateKey r2;
        com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey $r3;
        byte[] $r4;

        r0 := @this: com.android.org.chromium.net.DefaultAndroidKeyStore;

        r1 := @parameter0: com.android.org.chromium.net.AndroidPrivateKey;

        $r3 = (com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey) r1;

        r2 = virtualinvoke $r3.<com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey: java.security.PrivateKey getJavaKey()>();

        $r4 = interfaceinvoke r2.<java.security.PrivateKey: byte[] getEncoded()>();

        return $r4;
    }

    public byte[] rawSignDigestWithPrivateKey(com.android.org.chromium.net.AndroidPrivateKey, byte[])
    {
        com.android.org.chromium.net.DefaultAndroidKeyStore r0;
        com.android.org.chromium.net.AndroidPrivateKey r1;
        byte[] r2, $r7;
        java.security.PrivateKey r3;
        java.security.Signature r4;
        com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey $r6;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r9, $r12, $r15, $r17, $r18, $r19, $r21;
        java.lang.String $r10, $r11, $r16, $r20;
        java.lang.Exception $r13, r22;
        java.security.NoSuchAlgorithmException $r14;

        r0 := @this: com.android.org.chromium.net.DefaultAndroidKeyStore;

        r1 := @parameter0: com.android.org.chromium.net.AndroidPrivateKey;

        r2 := @parameter1: byte[];

        $r6 = (com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey) r1;

        r3 = virtualinvoke $r6.<com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey: java.security.PrivateKey getJavaKey()>();

        r4 = null;

     label1:
        $z0 = r3 instanceof java.security.interfaces.RSAPrivateKey;

        if $z0 == 0 goto label2;

        r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("NONEwithRSA");

        goto label4;

     label2:
        $z1 = r3 instanceof java.security.interfaces.DSAPrivateKey;

        if $z1 == 0 goto label3;

        r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("NONEwithDSA");

        goto label4;

     label3:
        $z2 = r3 instanceof java.security.interfaces.ECPrivateKey;

        if $z2 == 0 goto label4;

        r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("NONEwithECDSA");

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

     label6:
        if r4 != null goto label7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported private key algorithm: ");

        $r10 = interfaceinvoke r3.<java.security.PrivateKey: java.lang.String getAlgorithm()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStoreInProcessImpl", $r11);

        return null;

     label7:
        virtualinvoke r4.<java.security.Signature: void initSign(java.security.PrivateKey)>(r3);

        virtualinvoke r4.<java.security.Signature: void update(byte[])>(r2);

        $r7 = virtualinvoke r4.<java.security.Signature: byte[] sign()>();

     label8:
        return $r7;

     label9:
        $r13 := @caughtexception;

        r22 = $r13;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while signing message with ");

        $r16 = interfaceinvoke r3.<java.security.PrivateKey: java.lang.String getAlgorithm()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" private key: ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStoreInProcessImpl", $r20);

        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label4 with label5;
        catch java.lang.Exception from label7 to label8 with label9;
    }

    public int getPrivateKeyType(com.android.org.chromium.net.AndroidPrivateKey)
    {
        com.android.org.chromium.net.DefaultAndroidKeyStore r0;
        com.android.org.chromium.net.AndroidPrivateKey r1;
        java.security.PrivateKey r2;
        com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.org.chromium.net.DefaultAndroidKeyStore;

        r1 := @parameter0: com.android.org.chromium.net.AndroidPrivateKey;

        $r3 = (com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey) r1;

        r2 = virtualinvoke $r3.<com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey: java.security.PrivateKey getJavaKey()>();

        $z0 = r2 instanceof java.security.interfaces.RSAPrivateKey;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = r2 instanceof java.security.interfaces.DSAPrivateKey;

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = r2 instanceof java.security.interfaces.ECPrivateKey;

        if $z2 == 0 goto label3;

        return 2;

     label3:
        return 255;
    }

    public long getOpenSSLHandleForPrivateKey(com.android.org.chromium.net.AndroidPrivateKey)
    {
        com.android.org.chromium.net.DefaultAndroidKeyStore r0;
        com.android.org.chromium.net.AndroidPrivateKey r1;
        java.security.PrivateKey r2;
        java.lang.Class r3, $r12, $r20;
        java.lang.Exception r4, r6, $r23, $r30, $r36, r42;
        java.lang.Throwable r5, r7, $r25, $r31;
        com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey $r8;
        boolean $z0, $z1;
        java.lang.Class[] $r9, $r11;
        java.lang.Object[] $r10, $r13;
        java.lang.Number $r14;
        java.lang.Object $r15, r40;
        byte $b0;
        java.lang.StringBuilder $r16, $r18, $r19, $r22, $r24, $r26, $r28, $r29, $r33, $r34, $r35, $r38;
        java.lang.String $r17, $r21, $r27, $r32, $r37;
        java.lang.reflect.Method r39, r41;
        long l1;

        r0 := @this: com.android.org.chromium.net.DefaultAndroidKeyStore;

        r1 := @parameter0: com.android.org.chromium.net.AndroidPrivateKey;

        $r8 = (com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey) r1;

        r2 = virtualinvoke $r8.<com.android.org.chromium.net.DefaultAndroidKeyStore$DefaultAndroidPrivateKey: java.security.PrivateKey getJavaKey()>();

        if r2 != null goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStoreInProcessImpl", "key == null");

        return 0L;

     label01:
        $z0 = r2 instanceof java.security.interfaces.RSAPrivateKey;

        if $z0 != 0 goto label02;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStoreInProcessImpl", "does not implement RSAPrivateKey");

        return 0L;

     label02:
        r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey");

     label03:
        goto label05;

     label04:
        $r23 := @caughtexception;

        r4 = $r23;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find system OpenSSLRSAPrivateKey class: ");

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStoreInProcessImpl", $r27);

        return 0L;

     label05:
        $z1 = virtualinvoke r3.<java.lang.Class: boolean isInstance(java.lang.Object)>(r2);

        if $z1 != 0 goto label06;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Private key is not an OpenSSLRSAPrivateKey instance, its class name is:");

        $r20 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r20.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStoreInProcessImpl", $r21);

        return 0L;

     label06:
        $r9 = newarray (java.lang.Class)[0];

        r39 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getOpenSSLKey", $r9);

        virtualinvoke r39.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label07:
        $r10 = newarray (java.lang.Object)[0];

        r40 = virtualinvoke r39.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r10);

     label08:
        virtualinvoke r39.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

        goto label11;

     label09:
        $r31 := @caughtexception;

        r5 = $r31;

     label10:
        virtualinvoke r39.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

        throw r5;

     label11:
        if r40 != null goto label13;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStoreInProcessImpl", "getOpenSSLKey() returned null");

     label12:
        return 0L;

     label13:
        $r12 = virtualinvoke r40.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = newarray (java.lang.Class)[0];

        r41 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getPkeyContext", $r11);

     label14:
        goto label17;

     label15:
        $r30 := @caughtexception;

        r6 = $r30;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No getPkeyContext() method on OpenSSLKey member:");

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStoreInProcessImpl", $r32);

     label16:
        return 0L;

     label17:
        virtualinvoke r41.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label18:
        $r13 = newarray (java.lang.Object)[0];

        $r15 = virtualinvoke r41.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r40, $r13);

        $r14 = (java.lang.Number) $r15;

        l1 = virtualinvoke $r14.<java.lang.Number: long longValue()>();

     label19:
        virtualinvoke r41.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

        goto label22;

     label20:
        $r25 := @caughtexception;

        r7 = $r25;

     label21:
        virtualinvoke r41.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

        throw r7;

     label22:
        $b0 = l1 cmp 0L;

        if $b0 != 0 goto label23;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStoreInProcessImpl", "getPkeyContext() returned null");

     label23:
        return l1;

     label24:
        $r36 := @caughtexception;

        r42 = $r36;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while trying to retrieve system EVP_PKEY handle: ");

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r42);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStoreInProcessImpl", $r37);

        return 0L;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.Exception from label06 to label12 with label24;
        catch java.lang.Exception from label13 to label16 with label24;
        catch java.lang.Exception from label17 to label23 with label24;
    }

    public void releaseKey(com.android.org.chromium.net.AndroidPrivateKey)
    {
        com.android.org.chromium.net.DefaultAndroidKeyStore r0;
        com.android.org.chromium.net.AndroidPrivateKey r1;

        r0 := @this: com.android.org.chromium.net.DefaultAndroidKeyStore;

        r1 := @parameter0: com.android.org.chromium.net.AndroidPrivateKey;

        return;
    }

    public static void <clinit>()
    {
        <com.android.org.chromium.net.DefaultAndroidKeyStore: java.lang.String TAG> = "AndroidKeyStoreInProcessImpl";

        return;
    }
}
