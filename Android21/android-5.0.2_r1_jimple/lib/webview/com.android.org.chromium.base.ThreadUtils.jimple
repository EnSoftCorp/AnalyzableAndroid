public class com.android.org.chromium.base.ThreadUtils extends java.lang.Object
{
    private static final java.lang.Object sLock;
    private static boolean sWillOverride;
    private static android.os.Handler sUiThreadHandler;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        com.android.org.chromium.base.ThreadUtils r0;

        r0 := @this: com.android.org.chromium.base.ThreadUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setWillOverrideUiThread()
    {
        java.lang.Object r0, $r2;
        java.lang.Throwable r1, $r3;

        $r2 = <com.android.org.chromium.base.ThreadUtils: java.lang.Object sLock>;

        r0 = $r2;

        entermonitor $r2;

     label1:
        <com.android.org.chromium.base.ThreadUtils: boolean sWillOverride> = 1;

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

     label4:
        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void setUiThread(android.os.Looper)
    {
        android.os.Looper r0, $r7, $r12, $r16;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r19;
        android.os.Handler $r4, $r5, $r6, $r11;
        java.lang.RuntimeException $r8;
        java.lang.StringBuilder $r9, $r10, $r13, $r14, $r15, $r17, $r18;
        java.lang.String $r20;

        r0 := @parameter0: android.os.Looper;

        $r3 = <com.android.org.chromium.base.ThreadUtils: java.lang.Object sLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = <com.android.org.chromium.base.ThreadUtils: android.os.Handler sUiThreadHandler>;

        if $r4 == null goto label2;

        $r6 = <com.android.org.chromium.base.ThreadUtils: android.os.Handler sUiThreadHandler>;

        $r7 = virtualinvoke $r6.<android.os.Handler: android.os.Looper getLooper()>();

        if $r7 == r0 goto label2;

        $r8 = new java.lang.RuntimeException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UI thread looper is already set to ");

        $r11 = <com.android.org.chromium.base.ThreadUtils: android.os.Handler sUiThreadHandler>;

        $r12 = virtualinvoke $r11.<android.os.Handler: android.os.Looper getLooper()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (Main thread looper is ");

        $r16 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), cannot set to new looper ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r20);

        throw $r8;

     label2:
        $r5 = new android.os.Handler;

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>(r0);

        <com.android.org.chromium.base.ThreadUtils: android.os.Handler sUiThreadHandler> = $r5;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r19 := @caughtexception;

        r2 = $r19;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static android.os.Handler getUiThreadHandler()
    {
        java.lang.Object r0, $r2;
        java.lang.Throwable r1, $r8;
        android.os.Handler $r3, $r4, $r5;
        boolean $z0;
        android.os.Looper $r6;
        java.lang.RuntimeException $r7;

        $r2 = <com.android.org.chromium.base.ThreadUtils: java.lang.Object sLock>;

        r0 = $r2;

        entermonitor $r2;

     label1:
        $r3 = <com.android.org.chromium.base.ThreadUtils: android.os.Handler sUiThreadHandler>;

        if $r3 != null goto label3;

        $z0 = <com.android.org.chromium.base.ThreadUtils: boolean sWillOverride>;

        if $z0 == 0 goto label2;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Did not yet override the UI thread");

        throw $r7;

     label2:
        $r5 = new android.os.Handler;

        $r6 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>($r6);

        <com.android.org.chromium.base.ThreadUtils: android.os.Handler sUiThreadHandler> = $r5;

     label3:
        $r4 = <com.android.org.chromium.base.ThreadUtils: android.os.Handler sUiThreadHandler>;

        exitmonitor r0;

     label4:
        return $r4;

     label5:
        $r8 := @caughtexception;

        r1 = $r8;

        exitmonitor r0;

     label6:
        throw r1;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void runOnUiThreadBlocking(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        java.util.concurrent.FutureTask r1, $r3;
        java.lang.Exception r2, $r6;
        boolean $z0;
        java.lang.RuntimeException $r7;

        r0 := @parameter0: java.lang.Runnable;

        $z0 = staticinvoke <com.android.org.chromium.base.ThreadUtils: boolean runningOnUiThread()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r0.<java.lang.Runnable: void run()>();

        goto label5;

     label1:
        $r3 = new java.util.concurrent.FutureTask;

        specialinvoke $r3.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r0, null);

        r1 = $r3;

        staticinvoke <com.android.org.chromium.base.ThreadUtils: java.util.concurrent.FutureTask postOnUiThread(java.util.concurrent.FutureTask)>(r1);

     label2:
        virtualinvoke r1.<java.util.concurrent.FutureTask: java.lang.Object get()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Exception occured while waiting for runnable", r2);

        throw $r7;

     label5:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static java.lang.Object runOnUiThreadBlockingNoException(java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable r0;
        java.util.concurrent.ExecutionException r1, $r3;
        java.lang.Object $r2;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.util.concurrent.Callable;

     label1:
        $r2 = staticinvoke <com.android.org.chromium.base.ThreadUtils: java.lang.Object runOnUiThreadBlocking(java.util.concurrent.Callable)>(r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error occured waiting for callable", r1);

        throw $r4;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public static java.lang.Object runOnUiThreadBlocking(java.util.concurrent.Callable) throws java.util.concurrent.ExecutionException
    {
        java.util.concurrent.Callable r0;
        java.util.concurrent.FutureTask r1, $r3;
        java.lang.InterruptedException r2, $r6;
        java.lang.Object $r5;
        java.lang.RuntimeException $r7;

        r0 := @parameter0: java.util.concurrent.Callable;

        $r3 = new java.util.concurrent.FutureTask;

        specialinvoke $r3.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r0);

        r1 = $r3;

        staticinvoke <com.android.org.chromium.base.ThreadUtils: java.util.concurrent.FutureTask runOnUiThread(java.util.concurrent.FutureTask)>(r1);

     label1:
        $r5 = virtualinvoke r1.<java.util.concurrent.FutureTask: java.lang.Object get()>();

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Interrupted waiting for callable", r2);

        throw $r7;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static java.util.concurrent.FutureTask runOnUiThread(java.util.concurrent.FutureTask)
    {
        java.util.concurrent.FutureTask r0;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.FutureTask;

        $z0 = staticinvoke <com.android.org.chromium.base.ThreadUtils: boolean runningOnUiThread()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<java.util.concurrent.FutureTask: void run()>();

        goto label2;

     label1:
        staticinvoke <com.android.org.chromium.base.ThreadUtils: java.util.concurrent.FutureTask postOnUiThread(java.util.concurrent.FutureTask)>(r0);

     label2:
        return r0;
    }

    public static java.util.concurrent.FutureTask runOnUiThread(java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable r0;
        java.util.concurrent.FutureTask $r1, $r2;

        r0 := @parameter0: java.util.concurrent.Callable;

        $r1 = new java.util.concurrent.FutureTask;

        specialinvoke $r1.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r0);

        $r2 = staticinvoke <com.android.org.chromium.base.ThreadUtils: java.util.concurrent.FutureTask runOnUiThread(java.util.concurrent.FutureTask)>($r1);

        return $r2;
    }

    public static void runOnUiThread(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        boolean $z0;
        android.os.Handler $r1;

        r0 := @parameter0: java.lang.Runnable;

        $z0 = staticinvoke <com.android.org.chromium.base.ThreadUtils: boolean runningOnUiThread()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r0.<java.lang.Runnable: void run()>();

        goto label2;

     label1:
        $r1 = staticinvoke <com.android.org.chromium.base.ThreadUtils: android.os.Handler getUiThreadHandler()>();

        virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>(r0);

     label2:
        return;
    }

    public static java.util.concurrent.FutureTask postOnUiThread(java.util.concurrent.FutureTask)
    {
        java.util.concurrent.FutureTask r0;
        android.os.Handler $r1;

        r0 := @parameter0: java.util.concurrent.FutureTask;

        $r1 = staticinvoke <com.android.org.chromium.base.ThreadUtils: android.os.Handler getUiThreadHandler()>();

        virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>(r0);

        return r0;
    }

    public static void postOnUiThread(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        android.os.Handler $r1;

        r0 := @parameter0: java.lang.Runnable;

        $r1 = staticinvoke <com.android.org.chromium.base.ThreadUtils: android.os.Handler getUiThreadHandler()>();

        virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>(r0);

        return;
    }

    public static void postOnUiThreadDelayed(java.lang.Runnable, long)
    {
        java.lang.Runnable r0;
        long l0;
        android.os.Handler $r1;

        r0 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        $r1 = staticinvoke <com.android.org.chromium.base.ThreadUtils: android.os.Handler getUiThreadHandler()>();

        virtualinvoke $r1.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>(r0, l0);

        return;
    }

    public static void assertOnUiThread()
    {
        boolean $z0, $z1;
        java.lang.AssertionError $r0;

        $z0 = <com.android.org.chromium.base.ThreadUtils: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.android.org.chromium.base.ThreadUtils: boolean runningOnUiThread()>();

        if $z1 != 0 goto label1;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label1:
        return;
    }

    public static boolean runningOnUiThread()
    {
        android.os.Handler $r0;
        android.os.Looper $r1, $r2;
        boolean $z0;

        $r0 = staticinvoke <com.android.org.chromium.base.ThreadUtils: android.os.Handler getUiThreadHandler()>();

        $r1 = virtualinvoke $r0.<android.os.Handler: android.os.Looper getLooper()>();

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static android.os.Looper getUiThreadLooper()
    {
        android.os.Handler $r0;
        android.os.Looper $r1;

        $r0 = staticinvoke <com.android.org.chromium.base.ThreadUtils: android.os.Handler getUiThreadHandler()>();

        $r1 = virtualinvoke $r0.<android.os.Handler: android.os.Looper getLooper()>();

        return $r1;
    }

    public static void setThreadPriorityAudio(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.os.Process: void setThreadPriority(int,int)>(i0, -16);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.lang.Object $r1;

        $r0 = class "com/android/org/chromium/base/ThreadUtils";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.android.org.chromium.base.ThreadUtils: boolean $assertionsDisabled> = $z1;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <com.android.org.chromium.base.ThreadUtils: java.lang.Object sLock> = $r1;

        <com.android.org.chromium.base.ThreadUtils: boolean sWillOverride> = 0;

        <com.android.org.chromium.base.ThreadUtils: android.os.Handler sUiThreadHandler> = null;

        return;
    }
}
