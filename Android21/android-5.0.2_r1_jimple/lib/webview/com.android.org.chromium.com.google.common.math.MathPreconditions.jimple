final class com.android.org.chromium.com.google.common.math.MathPreconditions extends java.lang.Object
{

    static int checkPositive(java.lang.String, int)
    {
        java.lang.String r0, $r7;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be > 0");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label1:
        return i0;
    }

    static long checkPositive(java.lang.String, long)
    {
        java.lang.String r0, $r7;
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $b1 = l0 cmp 0L;

        if $b1 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be > 0");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label1:
        return l0;
    }

    static java.math.BigInteger checkPositive(java.lang.String, java.math.BigInteger)
    {
        java.lang.String r0, $r8;
        java.math.BigInteger r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.math.BigInteger;

        $i0 = virtualinvoke r1.<java.math.BigInteger: int signum()>();

        if $i0 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be > 0");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label1:
        return r1;
    }

    static int checkNonNegative(java.lang.String, int)
    {
        java.lang.String r0, $r7;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be >= 0");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label1:
        return i0;
    }

    static long checkNonNegative(java.lang.String, long)
    {
        java.lang.String r0, $r7;
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be >= 0");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label1:
        return l0;
    }

    static java.math.BigInteger checkNonNegative(java.lang.String, java.math.BigInteger)
    {
        java.lang.String r0, $r10;
        java.math.BigInteger r1, $r3;
        java.lang.Object $r2;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.math.BigInteger;

        $r2 = staticinvoke <com.android.org.chromium.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.math.BigInteger) $r2;

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int signum()>();

        if $i0 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must be >= 0");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        return r1;
    }

    static void checkRoundingUnnecessary(boolean)
    {
        boolean z0;
        java.lang.ArithmeticException $r0;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("mode was UNNECESSARY, but rounding was necessary");

        throw $r0;

     label1:
        return;
    }

    static void checkInRange(boolean)
    {
        boolean z0;
        java.lang.ArithmeticException $r0;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("not in range");

        throw $r0;

     label1:
        return;
    }

    static void checkNoOverflow(boolean)
    {
        boolean z0;
        java.lang.ArithmeticException $r0;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("overflow");

        throw $r0;

     label1:
        return;
    }

    private void <init>()
    {
        com.android.org.chromium.com.google.common.math.MathPreconditions r0;

        r0 := @this: com.android.org.chromium.com.google.common.math.MathPreconditions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
