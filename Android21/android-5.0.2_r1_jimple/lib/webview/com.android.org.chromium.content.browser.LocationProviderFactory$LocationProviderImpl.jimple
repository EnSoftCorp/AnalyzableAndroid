class com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl extends java.lang.Object implements android.location.LocationListener, com.android.org.chromium.content.browser.LocationProviderFactory$LocationProvider
{
    private static final java.lang.String TAG;
    private android.content.Context mContext;
    private android.location.LocationManager mLocationManager;
    private boolean mIsRunning;
    static final boolean $assertionsDisabled;

    void <init>(android.content.Context)
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;
        android.content.Context r1;

        r0 := @this: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: android.content.Context mContext> = r1;

        return;
    }

    public void start(boolean)
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;
        boolean z0;

        r0 := @this: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: void unregisterFromLocationUpdates()>();

        specialinvoke r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: void registerForLocationUpdates(boolean)>(z0);

        return;
    }

    public void stop()
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;

        r0 := @this: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        specialinvoke r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: void unregisterFromLocationUpdates()>();

        return;
    }

    public boolean isRunning()
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;
        boolean $z0;

        r0 := @this: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        $z0 = r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: boolean mIsRunning>;

        return $z0;
    }

    public void onLocationChanged(android.location.Location)
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;
        android.location.Location r1;
        boolean $z0;

        r0 := @this: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        r1 := @parameter0: android.location.Location;

        $z0 = r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: boolean mIsRunning>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: void updateNewLocation(android.location.Location)>(r1);

     label1:
        return;
    }

    private void updateNewLocation(android.location.Location)
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;
        android.location.Location r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        long $l0;
        boolean $z0, $z1, $z2, $z3;
        float $f0, $f1, $f2;

        r0 := @this: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        r1 := @parameter0: android.location.Location;

        $d0 = virtualinvoke r1.<android.location.Location: double getLatitude()>();

        $d1 = virtualinvoke r1.<android.location.Location: double getLongitude()>();

        $l0 = virtualinvoke r1.<android.location.Location: long getTime()>();

        $d2 = (double) $l0;

        $d3 = $d2 / 1000.0;

        $z0 = virtualinvoke r1.<android.location.Location: boolean hasAltitude()>();

        $d4 = virtualinvoke r1.<android.location.Location: double getAltitude()>();

        $z1 = virtualinvoke r1.<android.location.Location: boolean hasAccuracy()>();

        $f0 = virtualinvoke r1.<android.location.Location: float getAccuracy()>();

        $d5 = (double) $f0;

        $z2 = virtualinvoke r1.<android.location.Location: boolean hasBearing()>();

        $f1 = virtualinvoke r1.<android.location.Location: float getBearing()>();

        $d6 = (double) $f1;

        $z3 = virtualinvoke r1.<android.location.Location: boolean hasSpeed()>();

        $f2 = virtualinvoke r1.<android.location.Location: float getSpeed()>();

        $d7 = (double) $f2;

        staticinvoke <com.android.org.chromium.content.browser.LocationProviderAdapter: void newLocationAvailable(double,double,double,boolean,double,boolean,double,boolean,double,boolean,double)>($d0, $d1, $d3, $z0, $d4, $z1, $d5, $z2, $d6, $z3, $d7);

        return;
    }

    public void onStatusChanged(java.lang.String, int, android.os.Bundle)
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;
        java.lang.String r1;
        int i0;
        android.os.Bundle r2;

        r0 := @this: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.Bundle;

        return;
    }

    public void onProviderEnabled(java.lang.String)
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;
        java.lang.String r1;

        r0 := @this: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void onProviderDisabled(java.lang.String)
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;
        java.lang.String r1;

        r0 := @this: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        r1 := @parameter0: java.lang.String;

        return;
    }

    private void ensureLocationManagerCreated()
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;
        android.location.LocationManager $r1, $r4, $r5;
        android.content.Context $r2;
        java.lang.Object $r3;

        r0 := @this: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        $r1 = r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: android.location.LocationManager mLocationManager>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("location");

        $r4 = (android.location.LocationManager) $r3;

        r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: android.location.LocationManager mLocationManager> = $r4;

        $r5 = r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: android.location.LocationManager mLocationManager>;

        if $r5 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocationProvider", "Could not get location manager.");

     label2:
        return;
    }

    private void registerForLocationUpdates(boolean)
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;
        boolean z0, $z1, $z2, $z3;
        android.location.Criteria r1, $r2;
        android.location.LocationManager $r3, $r5;
        android.os.Looper $r4, $r6;
        java.lang.AssertionError $r7;
        java.lang.SecurityException $r8;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: void ensureLocationManagerCreated()>();

        $z1 = specialinvoke r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: boolean usePassiveOneShotLocation()>();

        if $z1 == 0 goto label1;

        return;

     label1:
        $z2 = <com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $z3 = r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: boolean mIsRunning>;

        if $z3 == 0 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: boolean mIsRunning> = 1;

     label3:
        $r2 = new android.location.Criteria;

        specialinvoke $r2.<android.location.Criteria: void <init>()>();

        r1 = $r2;

        $r3 = r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: android.location.LocationManager mLocationManager>;

        $r4 = staticinvoke <com.android.org.chromium.base.ThreadUtils: android.os.Looper getUiThreadLooper()>();

        virtualinvoke $r3.<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>(0L, 0.0F, r1, r0, $r4);

        if z0 == 0 goto label4;

        virtualinvoke r1.<android.location.Criteria: void setAccuracy(int)>(1);

        $r5 = r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: android.location.LocationManager mLocationManager>;

        $r6 = staticinvoke <com.android.org.chromium.base.ThreadUtils: android.os.Looper getUiThreadLooper()>();

        virtualinvoke $r5.<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>(0L, 0.0F, r1, r0, $r6);

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocationProvider", "Caught security exception registering for location updates from system. This should only happen in DumpRenderTree.");

        goto label7;

     label6:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocationProvider", "Caught IllegalArgumentException registering for location updates.");

     label7:
        return;

        catch java.lang.SecurityException from label3 to label4 with label5;
        catch java.lang.IllegalArgumentException from label3 to label4 with label6;
    }

    private void unregisterFromLocationUpdates()
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;
        boolean $z0;
        android.location.LocationManager $r1;

        r0 := @this: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        $z0 = r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: boolean mIsRunning>;

        if $z0 == 0 goto label1;

        r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: boolean mIsRunning> = 0;

        $r1 = r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: android.location.LocationManager mLocationManager>;

        virtualinvoke $r1.<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>(r0);

     label1:
        return;
    }

    private boolean usePassiveOneShotLocation()
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;
        android.location.Location r1;
        boolean $z0;
        android.location.LocationManager $r2;
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl$1 $r3;

        r0 := @this: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        $z0 = specialinvoke r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: boolean isOnlyPassiveLocationProviderEnabled()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: android.location.LocationManager mLocationManager>;

        r1 = virtualinvoke $r2.<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>("passive");

        if r1 == null goto label2;

        $r3 = new com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl$1;

        specialinvoke $r3.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl$1: void <init>(com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl,android.location.Location)>(r0, r1);

        staticinvoke <com.android.org.chromium.base.ThreadUtils: void runOnUiThread(java.lang.Runnable)>($r3);

     label2:
        return 1;
    }

    private boolean isOnlyPassiveLocationProviderEnabled()
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;
        java.util.List r1;
        android.location.LocationManager $r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0, $z1;

        r0 := @this: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        $r2 = r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: android.location.LocationManager mLocationManager>;

        r1 = virtualinvoke $r2.<android.location.LocationManager: java.util.List getProviders(boolean)>(1);

        if r1 == null goto label1;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("passive");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static void access$000(com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl, android.location.Location)
    {
        com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl r0;
        android.location.Location r1;

        r0 := @parameter0: com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl;

        r1 := @parameter1: android.location.Location;

        specialinvoke r0.<com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: void updateNewLocation(android.location.Location)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: java.lang.String TAG> = "LocationProvider";

        $r0 = class "com/android/org/chromium/content/browser/LocationProviderFactory";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.android.org.chromium.content.browser.LocationProviderFactory$LocationProviderImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
