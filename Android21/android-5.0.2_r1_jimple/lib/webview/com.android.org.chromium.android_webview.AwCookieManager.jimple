public final class com.android.org.chromium.android_webview.AwCookieManager extends java.lang.Object
{

    public void <init>()
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void removeExpiredCookie()
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        virtualinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: void removeExpiredCookies()>();

        return;
    }

    public void removeAllCookie()
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        virtualinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: void removeAllCookies()>();

        return;
    }

    public void removeSessionCookie()
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        virtualinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: void removeSessionCookies()>();

        return;
    }

    public void setAcceptCookie(boolean)
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;
        boolean z0;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: void nativeSetShouldAcceptCookies(boolean)>(z0);

        return;
    }

    public boolean acceptCookie()
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: boolean nativeGetShouldAcceptCookies()>();

        return $z0;
    }

    public void setCookie(java.lang.String, java.lang.String)
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;
        java.lang.String r1, r2;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: void nativeSetCookieSync(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void removeSessionCookies()
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: void nativeRemoveSessionCookiesSync()>();

        return;
    }

    public void removeAllCookies()
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: void nativeRemoveAllCookiesSync()>();

        return;
    }

    public void setCookie(java.lang.String, java.lang.String, android.webkit.ValueCallback)
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;
        java.lang.String r1, r2;
        android.webkit.ValueCallback r3;
        com.android.org.chromium.android_webview.AwCookieManager$CookieCallback $r5;
        java.lang.IllegalStateException $r6, $r7;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.webkit.ValueCallback;

     label1:
        $r5 = staticinvoke <com.android.org.chromium.android_webview.AwCookieManager$CookieCallback: com.android.org.chromium.android_webview.AwCookieManager$CookieCallback convert(android.webkit.ValueCallback)>(r3);

        specialinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: void nativeSetCookie(java.lang.String,java.lang.String,com.android.org.chromium.android_webview.AwCookieManager$CookieCallback)>(r1, r2, $r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("SetCookie must be called on a thread with a running Looper.");

        throw $r7;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public java.lang.String getCookie(java.lang.String)
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;
        java.lang.String r1, r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        r1 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toString()>();

        r2 = specialinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: java.lang.String nativeGetCookie(java.lang.String)>($r3);

        if r2 == null goto label1;

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r5 = null;

        goto label3;

     label2:
        $r5 = r2;

     label3:
        return $r5;
    }

    public void removeSessionCookies(android.webkit.ValueCallback)
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;
        android.webkit.ValueCallback r1;
        com.android.org.chromium.android_webview.AwCookieManager$CookieCallback $r3;
        java.lang.IllegalStateException $r4, $r5;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        r1 := @parameter0: android.webkit.ValueCallback;

     label1:
        $r3 = staticinvoke <com.android.org.chromium.android_webview.AwCookieManager$CookieCallback: com.android.org.chromium.android_webview.AwCookieManager$CookieCallback convert(android.webkit.ValueCallback)>(r1);

        specialinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: void nativeRemoveSessionCookies(com.android.org.chromium.android_webview.AwCookieManager$CookieCallback)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("removeSessionCookies must be called on a thread with a running Looper.");

        throw $r5;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void removeAllCookies(android.webkit.ValueCallback)
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;
        android.webkit.ValueCallback r1;
        com.android.org.chromium.android_webview.AwCookieManager$CookieCallback $r3;
        java.lang.IllegalStateException $r4, $r5;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        r1 := @parameter0: android.webkit.ValueCallback;

     label1:
        $r3 = staticinvoke <com.android.org.chromium.android_webview.AwCookieManager$CookieCallback: com.android.org.chromium.android_webview.AwCookieManager$CookieCallback convert(android.webkit.ValueCallback)>(r1);

        specialinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: void nativeRemoveAllCookies(com.android.org.chromium.android_webview.AwCookieManager$CookieCallback)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("removeAllCookies must be called on a thread with a running Looper.");

        throw $r5;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public boolean hasCookies()
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: boolean nativeHasCookies()>();

        return $z0;
    }

    public void removeExpiredCookies()
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: void nativeRemoveExpiredCookies()>();

        return;
    }

    public void flushCookieStore()
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: void nativeFlushCookieStore()>();

        return;
    }

    public boolean allowFileSchemeCookies()
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;
        boolean $z0;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        $z0 = specialinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: boolean nativeAllowFileSchemeCookies()>();

        return $z0;
    }

    public void setAcceptFileSchemeCookies(boolean)
    {
        com.android.org.chromium.android_webview.AwCookieManager r0;
        boolean z0;

        r0 := @this: com.android.org.chromium.android_webview.AwCookieManager;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager: void nativeSetAcceptFileSchemeCookies(boolean)>(z0);

        return;
    }

    public static void invokeBooleanCookieCallback(com.android.org.chromium.android_webview.AwCookieManager$CookieCallback, boolean)
    {
        com.android.org.chromium.android_webview.AwCookieManager$CookieCallback r0;
        boolean z0;
        java.lang.Boolean $r1;

        r0 := @parameter0: com.android.org.chromium.android_webview.AwCookieManager$CookieCallback;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke r0.<com.android.org.chromium.android_webview.AwCookieManager$CookieCallback: void onReceiveValue(java.lang.Object)>($r1);

        return;
    }

    private native void nativeSetShouldAcceptCookies(boolean);

    private native boolean nativeGetShouldAcceptCookies();

    private native void nativeSetCookie(java.lang.String, java.lang.String, com.android.org.chromium.android_webview.AwCookieManager$CookieCallback);

    private native void nativeSetCookieSync(java.lang.String, java.lang.String);

    private native java.lang.String nativeGetCookie(java.lang.String);

    private native void nativeRemoveSessionCookies(com.android.org.chromium.android_webview.AwCookieManager$CookieCallback);

    private native void nativeRemoveSessionCookiesSync();

    private native void nativeRemoveAllCookies(com.android.org.chromium.android_webview.AwCookieManager$CookieCallback);

    private native void nativeRemoveAllCookiesSync();

    private native void nativeRemoveExpiredCookies();

    private native void nativeFlushCookieStore();

    private native boolean nativeHasCookies();

    private native boolean nativeAllowFileSchemeCookies();

    private native void nativeSetAcceptFileSchemeCookies(boolean);
}
