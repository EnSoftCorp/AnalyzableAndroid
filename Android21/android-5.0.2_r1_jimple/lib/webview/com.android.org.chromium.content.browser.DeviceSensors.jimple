class com.android.org.chromium.content.browser.DeviceSensors extends java.lang.Object implements android.hardware.SensorEventListener
{
    private static final java.lang.String TAG;
    private java.lang.Thread mThread;
    private android.os.Handler mHandler;
    private final android.content.Context mAppContext;
    private final java.lang.Object mHandlerLock;
    private long mNativePtr;
    private final java.lang.Object mNativePtrLock;
    private float[] mTruncatedRotationVector;
    private com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy mSensorManagerProxy;
    private static com.android.org.chromium.content.browser.DeviceSensors sSingleton;
    private static java.lang.Object sSingletonLock;
    static final int DEVICE_ORIENTATION;
    static final int DEVICE_MOTION;
    static final java.util.Set DEVICE_ORIENTATION_SENSORS;
    static final java.util.Set DEVICE_MOTION_SENSORS;
    final java.util.Set mActiveSensors;
    boolean mDeviceMotionIsActive;
    boolean mDeviceOrientationIsActive;

    protected void <init>(android.content.Context)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        android.content.Context r1, $r5;
        java.lang.Object $r2, $r3;
        java.util.HashSet $r4;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.org.chromium.content.browser.DeviceSensors: java.lang.Object mHandlerLock> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.org.chromium.content.browser.DeviceSensors: java.lang.Object mNativePtrLock> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<com.android.org.chromium.content.browser.DeviceSensors: java.util.Set mActiveSensors> = $r4;

        r0.<com.android.org.chromium.content.browser.DeviceSensors: boolean mDeviceMotionIsActive> = 0;

        r0.<com.android.org.chromium.content.browser.DeviceSensors: boolean mDeviceOrientationIsActive> = 0;

        $r5 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<com.android.org.chromium.content.browser.DeviceSensors: android.content.Context mAppContext> = $r5;

        return;
    }

    public boolean start(long, int, int)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        long l0;
        int i1, i2;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r10;
        java.util.Set $r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        boolean z1;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r3 = r0.<com.android.org.chromium.content.browser.DeviceSensors: java.lang.Object mNativePtrLock>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        lookupswitch(i1)
        {
            case 0: goto label02;
            case 1: goto label03;
            default: goto label04;
        };

     label02:
        $r5 = <com.android.org.chromium.content.browser.DeviceSensors: java.util.Set DEVICE_ORIENTATION_SENSORS>;

        z1 = specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: boolean registerSensors(java.util.Set,int,boolean)>($r5, i2, 1);

        goto label06;

     label03:
        $r4 = <com.android.org.chromium.content.browser.DeviceSensors: java.util.Set DEVICE_MOTION_SENSORS>;

        z1 = specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: boolean registerSensors(java.util.Set,int,boolean)>($r4, i2, 0);

        goto label06;

     label04:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown event type: ");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DeviceMotionAndOrientation", $r9);

        exitmonitor r1;

     label05:
        return 0;

     label06:
        if z1 == 0 goto label07;

        r0.<com.android.org.chromium.content.browser.DeviceSensors: long mNativePtr> = l0;

        specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void setEventTypeActive(int,boolean)>(i1, 1);

     label07:
        exitmonitor r1;

     label08:
        return z1;

     label09:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.Throwable from label01 to label05 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public int getNumberActiveDeviceMotionSensors()
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        java.util.HashSet r1, $r2;
        java.util.Set $r3, $r4, $r5;
        int $i0, $i1, $i2;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        $r2 = new java.util.HashSet;

        $r3 = <com.android.org.chromium.content.browser.DeviceSensors: java.util.Set DEVICE_MOTION_SENSORS>;

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        r1 = $r2;

        $r4 = r0.<com.android.org.chromium.content.browser.DeviceSensors: java.util.Set mActiveSensors>;

        interfaceinvoke r1.<java.util.Set: boolean removeAll(java.util.Collection)>($r4);

        $r5 = <com.android.org.chromium.content.browser.DeviceSensors: java.util.Set DEVICE_MOTION_SENSORS>;

        $i0 = interfaceinvoke $r5.<java.util.Set: int size()>();

        $i1 = interfaceinvoke r1.<java.util.Set: int size()>();

        $i2 = $i0 - $i1;

        return $i2;
    }

    public void stop(int)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        int i0;
        java.util.HashSet r1, r3, $r5, $r7;
        java.lang.Object r2, $r6;
        java.lang.Throwable r4, $r16;
        boolean $z0, $z2, $z3;
        java.util.Set $r8, $r9, $r10, $r11;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.String $r15;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        i0 := @parameter0: int;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r1 = $r5;

        $r6 = r0.<com.android.org.chromium.content.browser.DeviceSensors: java.lang.Object mNativePtrLock>;

        r2 = $r6;

        entermonitor $r6;

     label01:
        lookupswitch(i0)
        {
            case 0: goto label02;
            case 1: goto label03;
            default: goto label04;
        };

     label02:
        $z3 = r0.<com.android.org.chromium.content.browser.DeviceSensors: boolean mDeviceMotionIsActive>;

        if $z3 == 0 goto label06;

        $r11 = <com.android.org.chromium.content.browser.DeviceSensors: java.util.Set DEVICE_MOTION_SENSORS>;

        interfaceinvoke r1.<java.util.Set: boolean addAll(java.util.Collection)>($r11);

        goto label06;

     label03:
        $z0 = r0.<com.android.org.chromium.content.browser.DeviceSensors: boolean mDeviceOrientationIsActive>;

        if $z0 == 0 goto label06;

        $r10 = <com.android.org.chromium.content.browser.DeviceSensors: java.util.Set DEVICE_ORIENTATION_SENSORS>;

        interfaceinvoke r1.<java.util.Set: boolean addAll(java.util.Collection)>($r10);

        goto label06;

     label04:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown event type: ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DeviceMotionAndOrientation", $r15);

        exitmonitor r2;

     label05:
        return;

     label06:
        $r7 = new java.util.HashSet;

        $r8 = r0.<com.android.org.chromium.content.browser.DeviceSensors: java.util.Set mActiveSensors>;

        specialinvoke $r7.<java.util.HashSet: void <init>(java.util.Collection)>($r8);

        r3 = $r7;

        interfaceinvoke r3.<java.util.Set: boolean removeAll(java.util.Collection)>(r1);

        specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void unregisterSensors(java.lang.Iterable)>(r3);

        specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void setEventTypeActive(int,boolean)>(i0, 0);

        $r9 = r0.<com.android.org.chromium.content.browser.DeviceSensors: java.util.Set mActiveSensors>;

        $z2 = interfaceinvoke $r9.<java.util.Set: boolean isEmpty()>();

        if $z2 == 0 goto label07;

        r0.<com.android.org.chromium.content.browser.DeviceSensors: long mNativePtr> = 0L;

     label07:
        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r16 := @caughtexception;

        r4 = $r16;

        exitmonitor r2;

     label10:
        throw r4;

     label11:
        return;

        catch java.lang.Throwable from label01 to label05 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void onAccuracyChanged(android.hardware.Sensor, int)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        android.hardware.Sensor r1;
        int i0;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        r1 := @parameter0: android.hardware.Sensor;

        i0 := @parameter1: int;

        return;
    }

    public void onSensorChanged(android.hardware.SensorEvent)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        android.hardware.SensorEvent r1;
        android.hardware.Sensor $r2;
        int $i0;
        float[] $r3;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        r1 := @parameter0: android.hardware.SensorEvent;

        $r2 = r1.<android.hardware.SensorEvent: android.hardware.Sensor sensor>;

        $i0 = virtualinvoke $r2.<android.hardware.Sensor: int getType()>();

        $r3 = r1.<android.hardware.SensorEvent: float[] values>;

        virtualinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void sensorChanged(int,float[])>($i0, $r3);

        return;
    }

    void sensorChanged(int, float[])
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        int i0, $i1;
        float[] r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        i0 := @parameter0: int;

        r1 := @parameter1: float[];

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 4: goto label3;
            case 10: goto label2;
            case 11: goto label4;
            default: goto label7;
        };

     label1:
        $z3 = r0.<com.android.org.chromium.content.browser.DeviceSensors: boolean mDeviceMotionIsActive>;

        if $z3 == 0 goto label8;

        $f7 = r1[0];

        $d7 = (double) $f7;

        $f6 = r1[1];

        $d8 = (double) $f6;

        $f8 = r1[2];

        $d6 = (double) $f8;

        virtualinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void gotAccelerationIncludingGravity(double,double,double)>($d7, $d8, $d6);

        goto label8;

     label2:
        $z1 = r0.<com.android.org.chromium.content.browser.DeviceSensors: boolean mDeviceMotionIsActive>;

        if $z1 == 0 goto label8;

        $f0 = r1[0];

        $d2 = (double) $f0;

        $f1 = r1[1];

        $d1 = (double) $f1;

        $f2 = r1[2];

        $d0 = (double) $f2;

        virtualinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void gotAcceleration(double,double,double)>($d2, $d1, $d0);

        goto label8;

     label3:
        $z2 = r0.<com.android.org.chromium.content.browser.DeviceSensors: boolean mDeviceMotionIsActive>;

        if $z2 == 0 goto label8;

        $f3 = r1[0];

        $d5 = (double) $f3;

        $f5 = r1[1];

        $d3 = (double) $f5;

        $f4 = r1[2];

        $d4 = (double) $f4;

        virtualinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void gotRotationRate(double,double,double)>($d5, $d3, $d4);

        goto label8;

     label4:
        $z0 = r0.<com.android.org.chromium.content.browser.DeviceSensors: boolean mDeviceOrientationIsActive>;

        if $z0 == 0 goto label8;

        $i1 = lengthof r1;

        if $i1 <= 4 goto label6;

        $r2 = r0.<com.android.org.chromium.content.browser.DeviceSensors: float[] mTruncatedRotationVector>;

        if $r2 != null goto label5;

        $r5 = newarray (float)[4];

        r0.<com.android.org.chromium.content.browser.DeviceSensors: float[] mTruncatedRotationVector> = $r5;

     label5:
        $r3 = r0.<com.android.org.chromium.content.browser.DeviceSensors: float[] mTruncatedRotationVector>;

        staticinvoke <java.lang.System: void arraycopy(float[],int,float[],int,int)>(r1, 0, $r3, 0, 4);

        $r4 = r0.<com.android.org.chromium.content.browser.DeviceSensors: float[] mTruncatedRotationVector>;

        specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void getOrientationFromRotationVector(float[])>($r4);

        goto label8;

     label6:
        specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void getOrientationFromRotationVector(float[])>(r1);

        goto label8;

     label7:
        return;

     label8:
        return;
    }

    public static double[] computeDeviceOrientationFromRotationMatrix(float[], double[])
    {
        float[] r0;
        double[] r1;
        int $i0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28;
        byte $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42;

        r0 := @parameter0: float[];

        r1 := @parameter1: double[];

        $i0 = lengthof r0;

        if $i0 == 9 goto label01;

        return r1;

     label01:
        $f0 = r0[8];

        $b1 = $f0 cmpl 0.0F;

        if $b1 <= 0 goto label02;

        $f22 = r0[1];

        $f23 = neg $f22;

        $d38 = (double) $f23;

        $f24 = r0[4];

        $d32 = (double) $f24;

        $d39 = staticinvoke <java.lang.Math: double atan2(double,double)>($d38, $d32);

        r1[0] = $d39;

        $f26 = r0[7];

        $d36 = (double) $f26;

        $d37 = staticinvoke <java.lang.Math: double asin(double)>($d36);

        r1[1] = $d37;

        $f25 = r0[6];

        $f28 = neg $f25;

        $d41 = (double) $f28;

        $f27 = r0[8];

        $d42 = (double) $f27;

        $d40 = staticinvoke <java.lang.Math: double atan2(double,double)>($d41, $d42);

        r1[2] = $d40;

        goto label12;

     label02:
        $f1 = r0[8];

        $b2 = $f1 cmpg 0.0F;

        if $b2 >= 0 goto label05;

        $f17 = r0[1];

        $d24 = (double) $f17;

        $f16 = r0[4];

        $f15 = neg $f16;

        $d22 = (double) $f15;

        $d23 = staticinvoke <java.lang.Math: double atan2(double,double)>($d24, $d22);

        r1[0] = $d23;

        $f18 = r0[7];

        $d27 = (double) $f18;

        $d26 = staticinvoke <java.lang.Math: double asin(double)>($d27);

        $d25 = neg $d26;

        r1[1] = $d25;

        $d30 = r1[1];

        $d29 = r1[1];

        $b8 = $d29 cmpl 0.0;

        if $b8 < 0 goto label03;

        $d35 = -3.141592653589793;

        goto label04;

     label03:
        $d35 = 3.141592653589793;

     label04:
        $d31 = $d30 + $d35;

        r1[1] = $d31;

        $f19 = r0[6];

        $d33 = (double) $f19;

        $f20 = r0[8];

        $f21 = neg $f20;

        $d28 = (double) $f21;

        $d34 = staticinvoke <java.lang.Math: double atan2(double,double)>($d33, $d28);

        r1[2] = $d34;

        goto label12;

     label05:
        $f2 = r0[6];

        $b3 = $f2 cmpl 0.0F;

        if $b3 <= 0 goto label06;

        $f13 = r0[1];

        $f11 = neg $f13;

        $d19 = (double) $f11;

        $f12 = r0[4];

        $d18 = (double) $f12;

        $d17 = staticinvoke <java.lang.Math: double atan2(double,double)>($d19, $d18);

        r1[0] = $d17;

        $f14 = r0[7];

        $d21 = (double) $f14;

        $d20 = staticinvoke <java.lang.Math: double asin(double)>($d21);

        r1[1] = $d20;

        r1[2] = -1.5707963267948966;

        goto label12;

     label06:
        $f3 = r0[6];

        $b4 = $f3 cmpg 0.0F;

        if $b4 >= 0 goto label09;

        $f8 = r0[1];

        $d8 = (double) $f8;

        $f7 = r0[4];

        $f9 = neg $f7;

        $d7 = (double) $f9;

        $d9 = staticinvoke <java.lang.Math: double atan2(double,double)>($d8, $d7);

        r1[0] = $d9;

        $f10 = r0[7];

        $d12 = (double) $f10;

        $d10 = staticinvoke <java.lang.Math: double asin(double)>($d12);

        $d11 = neg $d10;

        r1[1] = $d11;

        $d13 = r1[1];

        $d15 = r1[1];

        $b7 = $d15 cmpl 0.0;

        if $b7 < 0 goto label07;

        $d16 = -3.141592653589793;

        goto label08;

     label07:
        $d16 = 3.141592653589793;

     label08:
        $d14 = $d13 + $d16;

        r1[1] = $d14;

        r1[2] = -1.5707963267948966;

        goto label12;

     label09:
        $f4 = r0[3];

        $d1 = (double) $f4;

        $f5 = r0[0];

        $d0 = (double) $f5;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d1, $d0);

        r1[0] = $d2;

        $f6 = r0[7];

        $b5 = $f6 cmpl 0.0F;

        if $b5 <= 0 goto label10;

        $d5 = 1.5707963267948966;

        goto label11;

     label10:
        $d5 = -1.5707963267948966;

     label11:
        r1[1] = $d5;

        r1[2] = 0.0;

     label12:
        $d3 = r1[0];

        $b6 = $d3 cmpg 0.0;

        if $b6 >= 0 goto label13;

        $d4 = r1[0];

        $d6 = $d4 + 6.283185307179586;

        r1[0] = $d6;

     label13:
        return r1;
    }

    private void getOrientationFromRotationVector(float[])
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        float[] r1, r2;
        double[] r3;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        r1 := @parameter0: float[];

        r2 = newarray (float)[9];

        staticinvoke <android.hardware.SensorManager: void getRotationMatrixFromVector(float[],float[])>(r2, r1);

        r3 = newarray (double)[3];

        staticinvoke <com.android.org.chromium.content.browser.DeviceSensors: double[] computeDeviceOrientationFromRotationMatrix(float[],double[])>(r2, r3);

        $d0 = r3[0];

        $d1 = staticinvoke <java.lang.Math: double toDegrees(double)>($d0);

        $d2 = r3[1];

        $d3 = staticinvoke <java.lang.Math: double toDegrees(double)>($d2);

        $d4 = r3[2];

        $d5 = staticinvoke <java.lang.Math: double toDegrees(double)>($d4);

        virtualinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void gotOrientation(double,double,double)>($d1, $d3, $d5);

        return;
    }

    private com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy getSensorManagerProxy()
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        android.hardware.SensorManager r1;
        com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy $r2, $r5, $r7;
        com.android.org.chromium.content.browser.DeviceSensors$1 $r3;
        java.lang.Object $r4;
        com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxyImpl $r6;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        $r2 = r0.<com.android.org.chromium.content.browser.DeviceSensors: com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy mSensorManagerProxy>;

        if $r2 == null goto label1;

        $r7 = r0.<com.android.org.chromium.content.browser.DeviceSensors: com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy mSensorManagerProxy>;

        return $r7;

     label1:
        $r3 = new com.android.org.chromium.content.browser.DeviceSensors$1;

        specialinvoke $r3.<com.android.org.chromium.content.browser.DeviceSensors$1: void <init>(com.android.org.chromium.content.browser.DeviceSensors)>(r0);

        $r4 = staticinvoke <com.android.org.chromium.base.ThreadUtils: java.lang.Object runOnUiThreadBlockingNoException(java.util.concurrent.Callable)>($r3);

        r1 = (android.hardware.SensorManager) $r4;

        if r1 == null goto label2;

        $r6 = new com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxyImpl;

        specialinvoke $r6.<com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxyImpl: void <init>(android.hardware.SensorManager)>(r1);

        r0.<com.android.org.chromium.content.browser.DeviceSensors: com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy mSensorManagerProxy> = $r6;

     label2:
        $r5 = r0.<com.android.org.chromium.content.browser.DeviceSensors: com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy mSensorManagerProxy>;

        return $r5;
    }

    void setSensorManagerProxy(com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy r1;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        r1 := @parameter0: com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy;

        r0.<com.android.org.chromium.content.browser.DeviceSensors: com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy mSensorManagerProxy> = r1;

        return;
    }

    private void setEventTypeActive(int, boolean)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        r0.<com.android.org.chromium.content.browser.DeviceSensors: boolean mDeviceOrientationIsActive> = z0;

        return;

     label2:
        r0.<com.android.org.chromium.content.browser.DeviceSensors: boolean mDeviceMotionIsActive> = z0;

        return;

     label3:
        return;
    }

    private boolean registerSensors(java.util.Set, int, boolean)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        java.util.Set r1, $r6, $r8;
        int i0, $i1;
        boolean z0, z1, z2, $z4;
        java.util.HashSet r2, $r5;
        java.util.Iterator r3;
        java.lang.Integer r4;
        java.lang.Object $r7;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        r1 := @parameter0: java.util.Set;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        r2 = $r5;

        $r6 = r0.<com.android.org.chromium.content.browser.DeviceSensors: java.util.Set mActiveSensors>;

        interfaceinvoke r2.<java.util.Set: boolean removeAll(java.util.Collection)>($r6);

        z1 = 0;

        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Integer) $r7;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        z2 = specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: boolean registerForSensorType(int,int)>($i1, i0);

        if z2 != 0 goto label2;

        if z0 == 0 goto label2;

        specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void unregisterSensors(java.lang.Iterable)>(r2);

        return 0;

     label2:
        if z2 == 0 goto label3;

        $r8 = r0.<com.android.org.chromium.content.browser.DeviceSensors: java.util.Set mActiveSensors>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r4);

        z1 = 1;

     label3:
        goto label1;

     label4:
        return z1;
    }

    private void unregisterSensors(java.lang.Iterable)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        java.lang.Iterable r1;
        java.util.Iterator r2;
        java.lang.Integer r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.util.Set $r5, $r7;
        com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy $r6;
        int $i0;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        r1 := @parameter0: java.lang.Iterable;

        r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Integer) $r4;

        $r5 = r0.<com.android.org.chromium.content.browser.DeviceSensors: java.util.Set mActiveSensors>;

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z1 == 0 goto label2;

        $r6 = specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy getSensorManagerProxy()>();

        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r6.<com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy: void unregisterListener(android.hardware.SensorEventListener,int)>(r0, $i0);

        $r7 = r0.<com.android.org.chromium.content.browser.DeviceSensors: java.util.Set mActiveSensors>;

        interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>(r3);

     label2:
        goto label1;

     label3:
        return;
    }

    private boolean registerForSensorType(int, int)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        int i0, i1, i2;
        com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy r1;
        android.os.Handler $r2;
        boolean $z0;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy getSensorManagerProxy()>();

        if r1 != null goto label1;

        return 0;

     label1:
        i2 = 1000 * i1;

        $r2 = specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: android.os.Handler getHandler()>();

        $z0 = interfaceinvoke r1.<com.android.org.chromium.content.browser.DeviceSensors$SensorManagerProxy: boolean registerListener(android.hardware.SensorEventListener,int,int,android.os.Handler)>(r0, i0, i2, $r2);

        return $z0;
    }

    protected void gotOrientation(double, double, double)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        double d0, d1, d2;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        long $l0, $l2;
        byte $b1;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r3 = r0.<com.android.org.chromium.content.browser.DeviceSensors: java.lang.Object mNativePtrLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $l0 = r0.<com.android.org.chromium.content.browser.DeviceSensors: long mNativePtr>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r0.<com.android.org.chromium.content.browser.DeviceSensors: long mNativePtr>;

        specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void nativeGotOrientation(long,double,double,double)>($l2, d0, d1, d2);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void gotAcceleration(double, double, double)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        double d0, d1, d2;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        long $l0, $l2;
        byte $b1;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r3 = r0.<com.android.org.chromium.content.browser.DeviceSensors: java.lang.Object mNativePtrLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $l0 = r0.<com.android.org.chromium.content.browser.DeviceSensors: long mNativePtr>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r0.<com.android.org.chromium.content.browser.DeviceSensors: long mNativePtr>;

        specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void nativeGotAcceleration(long,double,double,double)>($l2, d0, d1, d2);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void gotAccelerationIncludingGravity(double, double, double)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        double d0, d1, d2;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        long $l0, $l2;
        byte $b1;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r3 = r0.<com.android.org.chromium.content.browser.DeviceSensors: java.lang.Object mNativePtrLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $l0 = r0.<com.android.org.chromium.content.browser.DeviceSensors: long mNativePtr>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r0.<com.android.org.chromium.content.browser.DeviceSensors: long mNativePtr>;

        specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void nativeGotAccelerationIncludingGravity(long,double,double,double)>($l2, d0, d1, d2);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void gotRotationRate(double, double, double)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        double d0, d1, d2;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        long $l0, $l2;
        byte $b1;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r3 = r0.<com.android.org.chromium.content.browser.DeviceSensors: java.lang.Object mNativePtrLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $l0 = r0.<com.android.org.chromium.content.browser.DeviceSensors: long mNativePtr>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r0.<com.android.org.chromium.content.browser.DeviceSensors: long mNativePtr>;

        specialinvoke r0.<com.android.org.chromium.content.browser.DeviceSensors: void nativeGotRotationRate(long,double,double,double)>($l2, d0, d1, d2);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private android.os.Handler getHandler()
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        java.lang.Object r1, $r4;
        android.os.HandlerThread r2, $r7;
        java.lang.Throwable r3, $r10;
        android.os.Handler $r5, $r6, $r8;
        android.os.Looper $r9;

        r0 := @this: com.android.org.chromium.content.browser.DeviceSensors;

        $r4 = r0.<com.android.org.chromium.content.browser.DeviceSensors: java.lang.Object mHandlerLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.org.chromium.content.browser.DeviceSensors: android.os.Handler mHandler>;

        if $r5 != null goto label2;

        $r7 = new android.os.HandlerThread;

        specialinvoke $r7.<android.os.HandlerThread: void <init>(java.lang.String)>("DeviceMotionAndOrientation");

        r2 = $r7;

        virtualinvoke r2.<android.os.HandlerThread: void start()>();

        $r8 = new android.os.Handler;

        $r9 = virtualinvoke r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r8.<android.os.Handler: void <init>(android.os.Looper)>($r9);

        r0.<com.android.org.chromium.content.browser.DeviceSensors: android.os.Handler mHandler> = $r8;

     label2:
        $r6 = r0.<com.android.org.chromium.content.browser.DeviceSensors: android.os.Handler mHandler>;

        exitmonitor r1;

     label3:
        return $r6;

     label4:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r1;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    static com.android.org.chromium.content.browser.DeviceSensors getInstance(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        com.android.org.chromium.content.browser.DeviceSensors $r4, $r5, $r6;

        r0 := @parameter0: android.content.Context;

        $r3 = <com.android.org.chromium.content.browser.DeviceSensors: java.lang.Object sSingletonLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = <com.android.org.chromium.content.browser.DeviceSensors: com.android.org.chromium.content.browser.DeviceSensors sSingleton>;

        if $r4 != null goto label2;

        $r6 = new com.android.org.chromium.content.browser.DeviceSensors;

        specialinvoke $r6.<com.android.org.chromium.content.browser.DeviceSensors: void <init>(android.content.Context)>(r0);

        <com.android.org.chromium.content.browser.DeviceSensors: com.android.org.chromium.content.browser.DeviceSensors sSingleton> = $r6;

     label2:
        $r5 = <com.android.org.chromium.content.browser.DeviceSensors: com.android.org.chromium.content.browser.DeviceSensors sSingleton>;

        exitmonitor r1;

     label3:
        return $r5;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private native void nativeGotOrientation(long, double, double, double);

    private native void nativeGotAcceleration(long, double, double, double);

    private native void nativeGotAccelerationIncludingGravity(long, double, double, double);

    private native void nativeGotRotationRate(long, double, double, double);

    static android.content.Context access$000(com.android.org.chromium.content.browser.DeviceSensors)
    {
        com.android.org.chromium.content.browser.DeviceSensors r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.org.chromium.content.browser.DeviceSensors;

        $r1 = r0.<com.android.org.chromium.content.browser.DeviceSensors: android.content.Context mAppContext>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;
        java.lang.Integer[] $r1, $r4;
        java.lang.Integer $r2, $r5, $r6, $r7;
        java.util.HashSet $r3, $r8;

        <com.android.org.chromium.content.browser.DeviceSensors: int DEVICE_MOTION> = 1;

        <com.android.org.chromium.content.browser.DeviceSensors: int DEVICE_ORIENTATION> = 0;

        <com.android.org.chromium.content.browser.DeviceSensors: java.lang.String TAG> = "DeviceMotionAndOrientation";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.android.org.chromium.content.browser.DeviceSensors: java.lang.Object sSingletonLock> = $r0;

        $r1 = newarray (java.lang.Integer)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        $r1[0] = $r2;

        $r3 = staticinvoke <com.android.org.chromium.base.CollectionUtil: java.util.HashSet newHashSet(java.lang.Object[])>($r1);

        <com.android.org.chromium.content.browser.DeviceSensors: java.util.Set DEVICE_ORIENTATION_SENSORS> = $r3;

        $r4 = newarray (java.lang.Integer)[3];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r4[2] = $r7;

        $r8 = staticinvoke <com.android.org.chromium.base.CollectionUtil: java.util.HashSet newHashSet(java.lang.Object[])>($r4);

        <com.android.org.chromium.content.browser.DeviceSensors: java.util.Set DEVICE_MOTION_SENSORS> = $r8;

        return;
    }
}
