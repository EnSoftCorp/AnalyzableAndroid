public class com.android.server.ethernet.EthernetServiceImpl extends android.net.IEthernetManager$Stub
{
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final com.android.server.ethernet.EthernetConfigStore mEthernetConfigStore;
    private final android.os.INetworkManagementService mNMService;
    private final java.util.concurrent.atomic.AtomicBoolean mStarted;
    private android.net.IpConfiguration mIpConfiguration;
    private android.net.ConnectivityManager mCM;
    private android.os.Handler mHandler;
    private android.net.NetworkInfo mNetworkInfo;
    private final com.android.server.ethernet.EthernetNetworkFactory mTracker;

    public void <init>(android.content.Context)
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.content.Context r1;
        android.os.IBinder r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        com.android.server.ethernet.EthernetConfigStore $r4, $r5;
        android.net.IpConfiguration $r6, $r9;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r11;
        com.android.server.ethernet.EthernetNetworkFactory $r12;
        android.os.INetworkManagementService $r13;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.net.IEthernetManager$Stub: void <init>()>();

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.ethernet.EthernetServiceImpl: java.util.concurrent.atomic.AtomicBoolean mStarted> = $r3;

        r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext> = r1;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EthernetServiceImpl", "Creating EthernetConfigStore");

        $r4 = new com.android.server.ethernet.EthernetConfigStore;

        specialinvoke $r4.<com.android.server.ethernet.EthernetConfigStore: void <init>()>();

        r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetConfigStore mEthernetConfigStore> = $r4;

        $r5 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetConfigStore mEthernetConfigStore>;

        $r6 = virtualinvoke $r5.<com.android.server.ethernet.EthernetConfigStore: android.net.IpConfiguration readIpAndProxyConfigurations()>();

        r0.<com.android.server.ethernet.EthernetServiceImpl: android.net.IpConfiguration mIpConfiguration> = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read stored IP configuration: ");

        $r9 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.net.IpConfiguration mIpConfiguration>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EthernetServiceImpl", $r11);

        r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("network_management");

        $r13 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService asInterface(android.os.IBinder)>(r2);

        r0.<com.android.server.ethernet.EthernetServiceImpl: android.os.INetworkManagementService mNMService> = $r13;

        $r12 = new com.android.server.ethernet.EthernetNetworkFactory;

        specialinvoke $r12.<com.android.server.ethernet.EthernetNetworkFactory: void <init>()>();

        r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetNetworkFactory mTracker> = $r12;

        return;
    }

    private void enforceAccessPermission()
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        $r1 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_NETWORK_STATE", "EthernetService");

        return;
    }

    private void enforceChangePermission()
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        $r1 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CHANGE_NETWORK_STATE", "EthernetService");

        return;
    }

    private void enforceConnectivityInternalPermission()
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        $r1 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "ConnectivityService");

        return;
    }

    public void start()
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.os.HandlerThread r1, $r5;
        android.content.Context $r2, $r9;
        java.lang.Object $r3;
        android.net.ConnectivityManager $r4;
        android.os.Handler $r6, $r8;
        android.os.Looper $r7;
        com.android.server.ethernet.EthernetNetworkFactory $r10;
        java.util.concurrent.atomic.AtomicBoolean $r11;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EthernetServiceImpl", "Starting Ethernet service");

        $r2 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r4 = (android.net.ConnectivityManager) $r3;

        r0.<com.android.server.ethernet.EthernetServiceImpl: android.net.ConnectivityManager mCM> = $r4;

        $r5 = new android.os.HandlerThread;

        specialinvoke $r5.<android.os.HandlerThread: void <init>(java.lang.String)>("EthernetServiceThread");

        r1 = $r5;

        virtualinvoke r1.<android.os.HandlerThread: void start()>();

        $r6 = new android.os.Handler;

        $r7 = virtualinvoke r1.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r6.<android.os.Handler: void <init>(android.os.Looper)>($r7);

        r0.<com.android.server.ethernet.EthernetServiceImpl: android.os.Handler mHandler> = $r6;

        $r10 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetNetworkFactory mTracker>;

        $r9 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        $r8 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.os.Handler mHandler>;

        virtualinvoke $r10.<com.android.server.ethernet.EthernetNetworkFactory: void start(android.content.Context,android.os.Handler)>($r9, $r8);

        $r11 = r0.<com.android.server.ethernet.EthernetServiceImpl: java.util.concurrent.atomic.AtomicBoolean mStarted>;

        virtualinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;
    }

    public android.net.IpConfiguration getConfiguration()
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.net.IpConfiguration r1, $r3, $r4, $r5;
        java.lang.Throwable r2, $r6;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        specialinvoke r0.<com.android.server.ethernet.EthernetServiceImpl: void enforceAccessPermission()>();

        $r3 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.net.IpConfiguration mIpConfiguration>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = new android.net.IpConfiguration;

        $r5 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.net.IpConfiguration mIpConfiguration>;

        specialinvoke $r4.<android.net.IpConfiguration: void <init>(android.net.IpConfiguration)>($r5);

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setConfiguration(android.net.IpConfiguration)
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.net.IpConfiguration r1, r2, $r5, $r7, $r8;
        java.lang.Throwable r3, $r13;
        java.util.concurrent.atomic.AtomicBoolean $r4;
        boolean $z0, $z1;
        com.android.server.ethernet.EthernetConfigStore $r6;
        com.android.server.ethernet.EthernetNetworkFactory $r9, $r12;
        android.os.Handler $r10;
        android.content.Context $r11;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        r1 := @parameter0: android.net.IpConfiguration;

        $r4 = r0.<com.android.server.ethernet.EthernetServiceImpl: java.util.concurrent.atomic.AtomicBoolean mStarted>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("EthernetServiceImpl", "System isn\'t ready enough to change ethernet configuration");

     label1:
        specialinvoke r0.<com.android.server.ethernet.EthernetServiceImpl: void enforceChangePermission()>();

        specialinvoke r0.<com.android.server.ethernet.EthernetServiceImpl: void enforceConnectivityInternalPermission()>();

        $r5 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.net.IpConfiguration mIpConfiguration>;

        r2 = $r5;

        entermonitor $r5;

     label2:
        $r6 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetConfigStore mEthernetConfigStore>;

        virtualinvoke $r6.<com.android.server.ethernet.EthernetConfigStore: void writeIpAndProxyConfigurations(android.net.IpConfiguration)>(r1);

        $r7 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.net.IpConfiguration mIpConfiguration>;

        $z1 = virtualinvoke r1.<android.net.IpConfiguration: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label3;

        $r8 = new android.net.IpConfiguration;

        specialinvoke $r8.<android.net.IpConfiguration: void <init>(android.net.IpConfiguration)>(r1);

        r0.<com.android.server.ethernet.EthernetServiceImpl: android.net.IpConfiguration mIpConfiguration> = $r8;

        $r9 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetNetworkFactory mTracker>;

        virtualinvoke $r9.<com.android.server.ethernet.EthernetNetworkFactory: void stop()>();

        $r12 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetNetworkFactory mTracker>;

        $r11 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        $r10 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.os.Handler mHandler>;

        virtualinvoke $r12.<com.android.server.ethernet.EthernetNetworkFactory: void start(android.content.Context,android.os.Handler)>($r11, $r10);

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        r3 = $r13;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        com.android.internal.util.IndentingPrintWriter r4, $r5;
        android.content.Context $r6;
        int $i0, $i1, $i2;
        com.android.server.ethernet.EthernetNetworkFactory $r7;
        android.net.IpConfiguration $r8;
        android.util.PrintWriterPrinter $r9;
        android.os.Handler $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r16;
        java.lang.String $r15;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r5 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r5.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r2, "  ");

        r4 = $r5;

        $r6 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        $i0 = virtualinvoke $r6.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump EthernetService from pid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r15);

        return;

     label1:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Current Ethernet state: ");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r7 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetNetworkFactory mTracker>;

        virtualinvoke $r7.<com.android.server.ethernet.EthernetNetworkFactory: void dump(java.io.FileDescriptor,com.android.internal.util.IndentingPrintWriter,java.lang.String[])>(r1, r4, r3);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Stored Ethernet configuration: ");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r8 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.net.IpConfiguration mIpConfiguration>;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r8);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Handler:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r10 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.os.Handler mHandler>;

        $r9 = new android.util.PrintWriterPrinter;

        specialinvoke $r9.<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>(r4);

        virtualinvoke $r10.<android.os.Handler: void dump(android.util.Printer,java.lang.String)>($r9, "EthernetServiceImpl");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.ethernet.EthernetServiceImpl: java.lang.String TAG> = "EthernetServiceImpl";

        return;
    }
}
