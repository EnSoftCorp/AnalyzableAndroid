public abstract class com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture extends com.google.common.util.concurrent.ForwardingFuture
{
    private final java.util.concurrent.Future delegate;

    protected void <init>(java.util.concurrent.Future)
    {
        com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture r0;
        java.util.concurrent.Future r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture;

        r1 := @parameter0: java.util.concurrent.Future;

        specialinvoke r0.<com.google.common.util.concurrent.ForwardingFuture: void <init>()>();

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.concurrent.Future) $r2;

        r0.<com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture: java.util.concurrent.Future delegate> = $r3;

        return;
    }

    protected final java.util.concurrent.Future delegate()
    {
        com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture r0;
        java.util.concurrent.Future $r1;

        r0 := @this: com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture;

        $r1 = r0.<com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture: java.util.concurrent.Future delegate>;

        return $r1;
    }

    protected volatile java.lang.Object delegate()
    {
        com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture r0;
        java.util.concurrent.Future $r1;

        r0 := @this: com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture;

        $r1 = virtualinvoke r0.<com.google.common.util.concurrent.ForwardingFuture$SimpleForwardingFuture: java.util.concurrent.Future delegate()>();

        return $r1;
    }
}
