public final class com.google.common.collect.ImmutableTable$Builder extends java.lang.Object
{
    private final java.util.List cells;
    private java.util.Comparator rowComparator;
    private java.util.Comparator columnComparator;

    public void <init>()
    {
        com.google.common.collect.ImmutableTable$Builder r0;
        java.util.ArrayList $r1;

        r0 := @this: com.google.common.collect.ImmutableTable$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<com.google.common.collect.ImmutableTable$Builder: java.util.List cells> = $r1;

        return;
    }

    public com.google.common.collect.ImmutableTable$Builder orderRowsBy(java.util.Comparator)
    {
        com.google.common.collect.ImmutableTable$Builder r0;
        java.util.Comparator r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.ImmutableTable$Builder;

        r1 := @parameter0: java.util.Comparator;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.Comparator) $r2;

        r0.<com.google.common.collect.ImmutableTable$Builder: java.util.Comparator rowComparator> = $r3;

        return r0;
    }

    public com.google.common.collect.ImmutableTable$Builder orderColumnsBy(java.util.Comparator)
    {
        com.google.common.collect.ImmutableTable$Builder r0;
        java.util.Comparator r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.ImmutableTable$Builder;

        r1 := @parameter0: java.util.Comparator;

        $r2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.Comparator) $r2;

        r0.<com.google.common.collect.ImmutableTable$Builder: java.util.Comparator columnComparator> = $r3;

        return r0;
    }

    public com.google.common.collect.ImmutableTable$Builder put(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.ImmutableTable$Builder r0;
        java.lang.Object r1, r2, r3;
        java.util.List $r4;
        com.google.common.collect.Table$Cell $r5;

        r0 := @this: com.google.common.collect.ImmutableTable$Builder;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r4 = r0.<com.google.common.collect.ImmutableTable$Builder: java.util.List cells>;

        $r5 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.Table$Cell cellOf(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        return r0;
    }

    public com.google.common.collect.ImmutableTable$Builder put(com.google.common.collect.Table$Cell)
    {
        com.google.common.collect.ImmutableTable$Builder r0;
        com.google.common.collect.Table$Cell r1, r2;
        boolean $z0;
        java.lang.Object $r3, $r4, $r5, $r7, $r9, $r11;
        java.util.List $r13;

        r0 := @this: com.google.common.collect.ImmutableTable$Builder;

        r1 := @parameter0: com.google.common.collect.Table$Cell;

        $z0 = r1 instanceof com.google.common.collect.Tables$ImmutableCell;

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke r1.<com.google.common.collect.Table$Cell: java.lang.Object getRowKey()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r7);

        $r9 = interfaceinvoke r1.<com.google.common.collect.Table$Cell: java.lang.Object getColumnKey()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r9);

        $r11 = interfaceinvoke r1.<com.google.common.collect.Table$Cell: java.lang.Object getValue()>();

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r11);

        r2 = r1;

        $r13 = r0.<com.google.common.collect.ImmutableTable$Builder: java.util.List cells>;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r2);

        goto label2;

     label1:
        $r3 = interfaceinvoke r1.<com.google.common.collect.Table$Cell: java.lang.Object getRowKey()>();

        $r4 = interfaceinvoke r1.<com.google.common.collect.Table$Cell: java.lang.Object getColumnKey()>();

        $r5 = interfaceinvoke r1.<com.google.common.collect.Table$Cell: java.lang.Object getValue()>();

        virtualinvoke r0.<com.google.common.collect.ImmutableTable$Builder: com.google.common.collect.ImmutableTable$Builder put(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r4, $r5);

     label2:
        return r0;
    }

    public com.google.common.collect.ImmutableTable$Builder putAll(com.google.common.collect.Table)
    {
        com.google.common.collect.ImmutableTable$Builder r0;
        com.google.common.collect.Table r1;
        java.util.Iterator r2;
        com.google.common.collect.Table$Cell r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: com.google.common.collect.ImmutableTable$Builder;

        r1 := @parameter0: com.google.common.collect.Table;

        $r4 = interfaceinvoke r1.<com.google.common.collect.Table: java.util.Set cellSet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.google.common.collect.Table$Cell) $r5;

        virtualinvoke r0.<com.google.common.collect.ImmutableTable$Builder: com.google.common.collect.ImmutableTable$Builder put(com.google.common.collect.Table$Cell)>(r3);

        goto label1;

     label2:
        return r0;
    }

    public com.google.common.collect.ImmutableTable build()
    {
        com.google.common.collect.ImmutableTable$Builder r0;
        int i0;
        java.util.List $r1, $r3, $r9;
        com.google.common.collect.SingletonImmutableTable $r2;
        java.lang.Object $r4;
        com.google.common.collect.Table$Cell $r5;
        com.google.common.collect.ImmutableTable $r6;
        java.util.Comparator $r7, $r8;
        com.google.common.collect.RegularImmutableTable $r10;

        r0 := @this: com.google.common.collect.ImmutableTable$Builder;

        $r1 = r0.<com.google.common.collect.ImmutableTable$Builder: java.util.List cells>;

        i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r6 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable of()>();

        return $r6;

     label2:
        $r2 = new com.google.common.collect.SingletonImmutableTable;

        $r3 = r0.<com.google.common.collect.ImmutableTable$Builder: java.util.List cells>;

        $r4 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>($r3);

        $r5 = (com.google.common.collect.Table$Cell) $r4;

        specialinvoke $r2.<com.google.common.collect.SingletonImmutableTable: void <init>(com.google.common.collect.Table$Cell)>($r5);

        return $r2;

     label3:
        $r9 = r0.<com.google.common.collect.ImmutableTable$Builder: java.util.List cells>;

        $r8 = r0.<com.google.common.collect.ImmutableTable$Builder: java.util.Comparator rowComparator>;

        $r7 = r0.<com.google.common.collect.ImmutableTable$Builder: java.util.Comparator columnComparator>;

        $r10 = staticinvoke <com.google.common.collect.RegularImmutableTable: com.google.common.collect.RegularImmutableTable forCells(java.util.List,java.util.Comparator,java.util.Comparator)>($r9, $r8, $r7);

        return $r10;
    }
}
