public final class com.google.common.util.concurrent.Futures extends java.lang.Object
{
    private static final com.google.common.collect.Ordering WITH_STRING_PARAM_FIRST;

    private void <init>()
    {
        com.google.common.util.concurrent.Futures r0;

        r0 := @this: com.google.common.util.concurrent.Futures;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.common.util.concurrent.CheckedFuture makeChecked(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function)
    {
        com.google.common.util.concurrent.ListenableFuture r0, $r4;
        com.google.common.base.Function r1;
        com.google.common.util.concurrent.Futures$MappingCheckedFuture $r2;
        java.lang.Object $r3;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: com.google.common.base.Function;

        $r2 = new com.google.common.util.concurrent.Futures$MappingCheckedFuture;

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r4 = (com.google.common.util.concurrent.ListenableFuture) $r3;

        specialinvoke $r2.<com.google.common.util.concurrent.Futures$MappingCheckedFuture: void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)>($r4, r1);

        return $r2;
    }

    public static com.google.common.util.concurrent.ListenableFuture immediateFuture(java.lang.Object)
    {
        java.lang.Object r0;
        com.google.common.util.concurrent.SettableFuture r1;

        r0 := @parameter0: java.lang.Object;

        r1 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>();

        virtualinvoke r1.<com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>(r0);

        return r1;
    }

    public static com.google.common.util.concurrent.CheckedFuture immediateCheckedFuture(java.lang.Object)
    {
        java.lang.Object r0;
        com.google.common.util.concurrent.SettableFuture r1;
        com.google.common.util.concurrent.Futures$1 $r2;
        com.google.common.util.concurrent.CheckedFuture $r3;

        r0 := @parameter0: java.lang.Object;

        r1 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>();

        virtualinvoke r1.<com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)>(r0);

        $r2 = new com.google.common.util.concurrent.Futures$1;

        specialinvoke $r2.<com.google.common.util.concurrent.Futures$1: void <init>()>();

        $r3 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.CheckedFuture makeChecked(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)>(r1, $r2);

        return $r3;
    }

    public static com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        com.google.common.util.concurrent.SettableFuture r1;

        r0 := @parameter0: java.lang.Throwable;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        r1 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>();

        virtualinvoke r1.<com.google.common.util.concurrent.SettableFuture: boolean setException(java.lang.Throwable)>(r0);

        return r1;
    }

    public static com.google.common.util.concurrent.CheckedFuture immediateFailedCheckedFuture(java.lang.Exception)
    {
        java.lang.Exception r0;
        com.google.common.util.concurrent.ListenableFuture $r2;
        com.google.common.util.concurrent.Futures$2 $r3;
        com.google.common.util.concurrent.CheckedFuture $r4;

        r0 := @parameter0: java.lang.Exception;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture immediateFailedFuture(java.lang.Throwable)>(r0);

        $r3 = new com.google.common.util.concurrent.Futures$2;

        specialinvoke $r3.<com.google.common.util.concurrent.Futures$2: void <init>(java.lang.Exception)>(r0);

        $r4 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.CheckedFuture makeChecked(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function)>($r2, $r3);

        return $r4;
    }

    public static com.google.common.util.concurrent.ListenableFuture chain(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function)
    {
        com.google.common.util.concurrent.ListenableFuture r0, $r3;
        com.google.common.base.Function r1;
        com.google.common.util.concurrent.ListeningExecutorService $r2;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: com.google.common.base.Function;

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService sameThreadExecutor()>();

        $r3 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture chain(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)>(r0, r1, $r2);

        return $r3;
    }

    public static com.google.common.util.concurrent.ListenableFuture chain(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ListenableFuture r0;
        com.google.common.base.Function r1;
        java.util.concurrent.Executor r2;
        com.google.common.util.concurrent.Futures$ChainingListenableFuture r3, $r5;
        com.google.common.util.concurrent.Futures$3 $r6;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: com.google.common.base.Function;

        r2 := @parameter2: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = new com.google.common.util.concurrent.Futures$ChainingListenableFuture;

        $r6 = new com.google.common.util.concurrent.Futures$3;

        specialinvoke $r6.<com.google.common.util.concurrent.Futures$3: void <init>(com.google.common.base.Function)>(r1);

        specialinvoke $r5.<com.google.common.util.concurrent.Futures$ChainingListenableFuture: void <init>(com.google.common.util.concurrent.AsyncFunction,com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.Futures$1)>($r6, r0, null);

        r3 = $r5;

        interfaceinvoke r0.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r3, r2);

        return r3;
    }

    public static com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture, com.google.common.util.concurrent.AsyncFunction)
    {
        com.google.common.util.concurrent.ListenableFuture r0, $r3;
        com.google.common.util.concurrent.AsyncFunction r1;
        com.google.common.util.concurrent.ListeningExecutorService $r2;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: com.google.common.util.concurrent.AsyncFunction;

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService sameThreadExecutor()>();

        $r3 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.AsyncFunction,java.util.concurrent.Executor)>(r0, r1, $r2);

        return $r3;
    }

    public static com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture, com.google.common.util.concurrent.AsyncFunction, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ListenableFuture r0;
        com.google.common.util.concurrent.AsyncFunction r1;
        java.util.concurrent.Executor r2;
        com.google.common.util.concurrent.Futures$ChainingListenableFuture r3, $r4;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: com.google.common.util.concurrent.AsyncFunction;

        r2 := @parameter2: java.util.concurrent.Executor;

        $r4 = new com.google.common.util.concurrent.Futures$ChainingListenableFuture;

        specialinvoke $r4.<com.google.common.util.concurrent.Futures$ChainingListenableFuture: void <init>(com.google.common.util.concurrent.AsyncFunction,com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.Futures$1)>(r1, r0, null);

        r3 = $r4;

        interfaceinvoke r0.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r3, r2);

        return r3;
    }

    public static com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function)
    {
        com.google.common.util.concurrent.ListenableFuture r0, $r3;
        com.google.common.base.Function r1;
        com.google.common.util.concurrent.ListeningExecutorService $r2;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: com.google.common.base.Function;

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService sameThreadExecutor()>();

        $r3 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)>(r0, r1, $r2);

        return $r3;
    }

    public static com.google.common.util.concurrent.ListenableFuture transform(com.google.common.util.concurrent.ListenableFuture, com.google.common.base.Function, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ListenableFuture r0, $r6;
        com.google.common.base.Function r1;
        java.util.concurrent.Executor r2;
        com.google.common.util.concurrent.Futures$4 r3, $r5;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: com.google.common.base.Function;

        r2 := @parameter2: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = new com.google.common.util.concurrent.Futures$4;

        specialinvoke $r5.<com.google.common.util.concurrent.Futures$4: void <init>(com.google.common.base.Function)>(r1);

        r3 = $r5;

        $r6 = staticinvoke <com.google.common.util.concurrent.Futures: com.google.common.util.concurrent.ListenableFuture chain(com.google.common.util.concurrent.ListenableFuture,com.google.common.base.Function,java.util.concurrent.Executor)>(r0, r3, r2);

        return $r6;
    }

    public static java.util.concurrent.Future lazyTransform(java.util.concurrent.Future, com.google.common.base.Function)
    {
        java.util.concurrent.Future r0;
        com.google.common.base.Function r1;
        com.google.common.util.concurrent.Futures$5 $r4;

        r0 := @parameter0: java.util.concurrent.Future;

        r1 := @parameter1: com.google.common.base.Function;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = new com.google.common.util.concurrent.Futures$5;

        specialinvoke $r4.<com.google.common.util.concurrent.Futures$5: void <init>(java.util.concurrent.Future,com.google.common.base.Function)>(r0, r1);

        return $r4;
    }

    public static transient com.google.common.util.concurrent.ListenableFuture allAsList(com.google.common.util.concurrent.ListenableFuture[])
    {
        com.google.common.util.concurrent.ListenableFuture[] r0;
        com.google.common.util.concurrent.Futures$ListFuture $r1;
        com.google.common.collect.ImmutableList $r2;
        com.google.common.util.concurrent.ListeningExecutorService $r3;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture[];

        $r1 = new com.google.common.util.concurrent.Futures$ListFuture;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>(r0);

        $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService sameThreadExecutor()>();

        specialinvoke $r1.<com.google.common.util.concurrent.Futures$ListFuture: void <init>(com.google.common.collect.ImmutableList,boolean,java.util.concurrent.Executor)>($r2, 1, $r3);

        return $r1;
    }

    public static com.google.common.util.concurrent.ListenableFuture allAsList(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        com.google.common.util.concurrent.Futures$ListFuture $r1;
        com.google.common.collect.ImmutableList $r2;
        com.google.common.util.concurrent.ListeningExecutorService $r3;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = new com.google.common.util.concurrent.Futures$ListFuture;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>(r0);

        $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService sameThreadExecutor()>();

        specialinvoke $r1.<com.google.common.util.concurrent.Futures$ListFuture: void <init>(com.google.common.collect.ImmutableList,boolean,java.util.concurrent.Executor)>($r2, 1, $r3);

        return $r1;
    }

    public static transient com.google.common.util.concurrent.ListenableFuture successfulAsList(com.google.common.util.concurrent.ListenableFuture[])
    {
        com.google.common.util.concurrent.ListenableFuture[] r0;
        com.google.common.util.concurrent.Futures$ListFuture $r1;
        com.google.common.collect.ImmutableList $r2;
        com.google.common.util.concurrent.ListeningExecutorService $r3;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture[];

        $r1 = new com.google.common.util.concurrent.Futures$ListFuture;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Object[])>(r0);

        $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService sameThreadExecutor()>();

        specialinvoke $r1.<com.google.common.util.concurrent.Futures$ListFuture: void <init>(com.google.common.collect.ImmutableList,boolean,java.util.concurrent.Executor)>($r2, 0, $r3);

        return $r1;
    }

    public static com.google.common.util.concurrent.ListenableFuture successfulAsList(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        com.google.common.util.concurrent.Futures$ListFuture $r1;
        com.google.common.collect.ImmutableList $r2;
        com.google.common.util.concurrent.ListeningExecutorService $r3;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = new com.google.common.util.concurrent.Futures$ListFuture;

        $r2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>(r0);

        $r3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService sameThreadExecutor()>();

        specialinvoke $r1.<com.google.common.util.concurrent.Futures$ListFuture: void <init>(com.google.common.collect.ImmutableList,boolean,java.util.concurrent.Executor)>($r2, 0, $r3);

        return $r1;
    }

    public static void addCallback(com.google.common.util.concurrent.ListenableFuture, com.google.common.util.concurrent.FutureCallback)
    {
        com.google.common.util.concurrent.ListenableFuture r0;
        com.google.common.util.concurrent.FutureCallback r1;
        com.google.common.util.concurrent.ListeningExecutorService $r2;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: com.google.common.util.concurrent.FutureCallback;

        $r2 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: com.google.common.util.concurrent.ListeningExecutorService sameThreadExecutor()>();

        staticinvoke <com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)>(r0, r1, $r2);

        return;
    }

    public static void addCallback(com.google.common.util.concurrent.ListenableFuture, com.google.common.util.concurrent.FutureCallback, java.util.concurrent.Executor)
    {
        com.google.common.util.concurrent.ListenableFuture r0;
        com.google.common.util.concurrent.FutureCallback r1;
        java.util.concurrent.Executor r2;
        com.google.common.util.concurrent.Futures$6 r3, $r5;

        r0 := @parameter0: com.google.common.util.concurrent.ListenableFuture;

        r1 := @parameter1: com.google.common.util.concurrent.FutureCallback;

        r2 := @parameter2: java.util.concurrent.Executor;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = new com.google.common.util.concurrent.Futures$6;

        specialinvoke $r5.<com.google.common.util.concurrent.Futures$6: void <init>(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback)>(r0, r1);

        r3 = $r5;

        interfaceinvoke r0.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(r3, r2);

        return;
    }

    public static java.lang.Object get(java.util.concurrent.Future, java.lang.Class) throws java.lang.Exception
    {
        java.util.concurrent.Future r0;
        java.lang.Class r1, $r4;
        java.lang.InterruptedException r2, $r10;
        boolean $z0, $z1;
        java.lang.Object[] $r5;
        java.lang.Object $r6;
        java.util.concurrent.ExecutionException $r7, r13;
        java.lang.Throwable $r8;
        java.lang.AssertionError $r9;
        java.lang.Thread $r11;
        java.lang.Exception $r12;

        r0 := @parameter0: java.util.concurrent.Future;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r4 = class "java/lang/RuntimeException";

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Futures.get exception type (%s) must not be a RuntimeException", $r5);

     label3:
        $r6 = interfaceinvoke r0.<java.util.concurrent.Future: java.lang.Object get()>();

     label4:
        return $r6;

     label5:
        $r10 := @caughtexception;

        r2 = $r10;

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r11.<java.lang.Thread: void interrupt()>();

        $r12 = staticinvoke <com.google.common.util.concurrent.Futures: java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable)>(r1, r2);

        throw $r12;

     label6:
        $r7 := @caughtexception;

        r13 = $r7;

        $r8 = virtualinvoke r13.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        staticinvoke <com.google.common.util.concurrent.Futures: void wrapAndThrowExceptionOrError(java.lang.Throwable,java.lang.Class)>($r8, r1);

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

        catch java.lang.InterruptedException from label3 to label4 with label5;
        catch java.util.concurrent.ExecutionException from label3 to label4 with label6;
    }

    public static java.lang.Object get(java.util.concurrent.Future, long, java.util.concurrent.TimeUnit, java.lang.Class) throws java.lang.Exception
    {
        java.util.concurrent.Future r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.lang.Class r2, $r6;
        java.lang.InterruptedException r3, $r13;
        boolean $z0, $z1;
        java.lang.Object[] $r7;
        java.lang.Object $r8;
        java.util.concurrent.ExecutionException $r9, r18;
        java.lang.Throwable $r10;
        java.lang.AssertionError $r11;
        java.lang.Thread $r12;
        java.util.concurrent.TimeoutException $r14, r17;
        java.lang.Exception $r15, $r16;

        r0 := @parameter0: java.util.concurrent.Future;

        l0 := @parameter1: long;

        r1 := @parameter2: java.util.concurrent.TimeUnit;

        r2 := @parameter3: java.lang.Class;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = class "java/lang/RuntimeException";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Futures.get exception type (%s) must not be a RuntimeException", $r7);

     label3:
        $r8 = interfaceinvoke r0.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l0, r1);

     label4:
        return $r8;

     label5:
        $r13 := @caughtexception;

        r3 = $r13;

        $r12 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r12.<java.lang.Thread: void interrupt()>();

        $r15 = staticinvoke <com.google.common.util.concurrent.Futures: java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable)>(r2, r3);

        throw $r15;

     label6:
        $r14 := @caughtexception;

        r17 = $r14;

        $r16 = staticinvoke <com.google.common.util.concurrent.Futures: java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable)>(r2, r17);

        throw $r16;

     label7:
        $r9 := @caughtexception;

        r18 = $r9;

        $r10 = virtualinvoke r18.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        staticinvoke <com.google.common.util.concurrent.Futures: void wrapAndThrowExceptionOrError(java.lang.Throwable,java.lang.Class)>($r10, r2);

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

        catch java.lang.InterruptedException from label3 to label4 with label5;
        catch java.util.concurrent.TimeoutException from label3 to label4 with label6;
        catch java.util.concurrent.ExecutionException from label3 to label4 with label7;
    }

    private static void wrapAndThrowExceptionOrError(java.lang.Throwable, java.lang.Class) throws java.lang.Exception
    {
        java.lang.Throwable r0;
        java.lang.Class r1;
        boolean $z0, $z1;
        java.lang.Exception $r2;
        com.google.common.util.concurrent.UncheckedExecutionException $r3;
        com.google.common.util.concurrent.ExecutionError $r4;
        java.lang.Error $r5;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Class;

        $z0 = r0 instanceof java.lang.Error;

        if $z0 == 0 goto label1;

        $r4 = new com.google.common.util.concurrent.ExecutionError;

        $r5 = (java.lang.Error) r0;

        specialinvoke $r4.<com.google.common.util.concurrent.ExecutionError: void <init>(java.lang.Error)>($r5);

        throw $r4;

     label1:
        $z1 = r0 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label2;

        $r3 = new com.google.common.util.concurrent.UncheckedExecutionException;

        specialinvoke $r3.<com.google.common.util.concurrent.UncheckedExecutionException: void <init>(java.lang.Throwable)>(r0);

        throw $r3;

     label2:
        $r2 = staticinvoke <com.google.common.util.concurrent.Futures: java.lang.Exception newWithCause(java.lang.Class,java.lang.Throwable)>(r1, r0);

        throw $r2;
    }

    public static java.lang.Object getUnchecked(java.util.concurrent.Future)
    {
        java.util.concurrent.Future r0;
        java.util.concurrent.ExecutionException r1, $r4;
        java.lang.Object $r3;
        java.lang.Throwable $r5;
        java.lang.AssertionError $r6;

        r0 := @parameter0: java.util.concurrent.Future;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

     label1:
        $r3 = staticinvoke <com.google.common.util.concurrent.Uninterruptibles: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>(r0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = virtualinvoke r1.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        staticinvoke <com.google.common.util.concurrent.Futures: void wrapAndThrowUnchecked(java.lang.Throwable)>($r5);

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    private static void wrapAndThrowUnchecked(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0;
        com.google.common.util.concurrent.UncheckedExecutionException $r1;
        com.google.common.util.concurrent.ExecutionError $r2;
        java.lang.Error $r3;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof java.lang.Error;

        if $z0 == 0 goto label1;

        $r2 = new com.google.common.util.concurrent.ExecutionError;

        $r3 = (java.lang.Error) r0;

        specialinvoke $r2.<com.google.common.util.concurrent.ExecutionError: void <init>(java.lang.Error)>($r3);

        throw $r2;

     label1:
        $r1 = new com.google.common.util.concurrent.UncheckedExecutionException;

        specialinvoke $r1.<com.google.common.util.concurrent.UncheckedExecutionException: void <init>(java.lang.Throwable)>(r0);

        throw $r1;
    }

    private static java.lang.Exception newWithCause(java.lang.Class, java.lang.Throwable)
    {
        java.lang.Class r0;
        java.lang.Throwable r1, $r15;
        java.util.List r2, $r7;
        java.util.Iterator r3;
        java.lang.reflect.Constructor r4;
        java.lang.Exception r5;
        java.lang.reflect.Constructor[] $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        java.lang.Object $r13, $r16;
        java.lang.String $r14;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Throwable;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $r7 = staticinvoke <com.google.common.util.concurrent.Futures: java.util.List preferringStrings(java.util.List)>(r2);

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.reflect.Constructor) $r13;

        $r16 = staticinvoke <com.google.common.util.concurrent.Futures: java.lang.Object newFromConstructor(java.lang.reflect.Constructor,java.lang.Throwable)>(r4, r1);

        r5 = (java.lang.Exception) $r16;

        if r5 == null goto label3;

        $r15 = virtualinvoke r5.<java.lang.Exception: java.lang.Throwable getCause()>();

        if $r15 != null goto label2;

        virtualinvoke r5.<java.lang.Exception: java.lang.Throwable initCause(java.lang.Throwable)>(r1);

     label2:
        return r5;

     label3:
        goto label1;

     label4:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No appropriate constructor for exception of type ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in response to chained exception");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r14, r1);

        throw $r8;
    }

    private static java.util.List preferringStrings(java.util.List)
    {
        java.util.List r0, $r2;
        com.google.common.collect.Ordering $r1;

        r0 := @parameter0: java.util.List;

        $r1 = <com.google.common.util.concurrent.Futures: com.google.common.collect.Ordering WITH_STRING_PARAM_FIRST>;

        $r2 = virtualinvoke $r1.<com.google.common.collect.Ordering: java.util.List sortedCopy(java.lang.Iterable)>(r0);

        return $r2;
    }

    private static java.lang.Object newFromConstructor(java.lang.reflect.Constructor, java.lang.Throwable)
    {
        java.lang.reflect.Constructor r0;
        java.lang.Throwable r1;
        java.lang.Class[] r2;
        java.lang.Object[] r3;
        int i0, $i1, $i2;
        java.lang.Class r4;
        java.lang.Object $r5;
        boolean $z0, $z1;
        java.lang.String $r6;
        java.lang.InstantiationException $r7;
        java.lang.reflect.InvocationTargetException $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.IllegalAccessException $r10;

        r0 := @parameter0: java.lang.reflect.Constructor;

        r1 := @parameter1: java.lang.Throwable;

        r2 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof r2;

        r3 = newarray (java.lang.Object)[$i1];

        i0 = 0;

     label01:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label05;

        r4 = r2[i0];

        $z0 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/String");

        if $z0 == 0 goto label02;

        $r6 = virtualinvoke r1.<java.lang.Throwable: java.lang.String toString()>();

        r3[i0] = $r6;

        goto label04;

     label02:
        $z1 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Throwable");

        if $z1 == 0 goto label03;

        r3[i0] = r1;

        goto label04;

     label03:
        return null;

     label04:
        i0 = i0 + 1;

        goto label01;

     label05:
        $r5 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r3);

     label06:
        return $r5;

     label07:
        $r9 := @caughtexception;

        return null;

     label08:
        $r7 := @caughtexception;

        return null;

     label09:
        $r10 := @caughtexception;

        return null;

     label10:
        $r8 := @caughtexception;

        return null;

        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.InstantiationException from label05 to label06 with label08;
        catch java.lang.IllegalAccessException from label05 to label06 with label09;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label10;
    }

    static void <clinit>()
    {
        com.google.common.collect.Ordering $r0, $r2, $r3;
        com.google.common.util.concurrent.Futures$7 $r1;

        $r0 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();

        $r1 = new com.google.common.util.concurrent.Futures$7;

        specialinvoke $r1.<com.google.common.util.concurrent.Futures$7: void <init>()>();

        $r2 = virtualinvoke $r0.<com.google.common.collect.Ordering: com.google.common.collect.Ordering onResultOf(com.google.common.base.Function)>($r1);

        $r3 = virtualinvoke $r2.<com.google.common.collect.Ordering: com.google.common.collect.Ordering reverse()>();

        <com.google.common.util.concurrent.Futures: com.google.common.collect.Ordering WITH_STRING_PARAM_FIRST> = $r3;

        return;
    }
}
