public final class com.google.common.hash.BloomFilter extends java.lang.Object implements java.io.Serializable
{
    private final com.google.common.hash.BloomFilterStrategies$BitArray bits;
    private final int numHashFunctions;
    private final com.google.common.hash.Funnel funnel;
    private final com.google.common.hash.BloomFilter$Strategy strategy;
    private static final double LN2;
    private static final double LN2_SQUARED;

    private void <init>(com.google.common.hash.BloomFilterStrategies$BitArray, int, com.google.common.hash.Funnel, com.google.common.hash.BloomFilter$Strategy)
    {
        com.google.common.hash.BloomFilter r0;
        com.google.common.hash.BloomFilterStrategies$BitArray r1, $r5;
        int i0;
        com.google.common.hash.Funnel r2, $r7;
        com.google.common.hash.BloomFilter$Strategy r3;
        java.lang.Object $r4, $r6;
        boolean $z0;

        r0 := @this: com.google.common.hash.BloomFilter;

        r1 := @parameter0: com.google.common.hash.BloomFilterStrategies$BitArray;

        i0 := @parameter1: int;

        r2 := @parameter2: com.google.common.hash.Funnel;

        r3 := @parameter3: com.google.common.hash.BloomFilter$Strategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "numHashFunctions zero or negative");

        $r4 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = (com.google.common.hash.BloomFilterStrategies$BitArray) $r4;

        r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$BitArray bits> = $r5;

        r0.<com.google.common.hash.BloomFilter: int numHashFunctions> = i0;

        $r6 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r7 = (com.google.common.hash.Funnel) $r6;

        r0.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel> = $r7;

        r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy> = r3;

        return;
    }

    public boolean mightContain(java.lang.Object)
    {
        com.google.common.hash.BloomFilter r0;
        java.lang.Object r1;
        com.google.common.hash.BloomFilterStrategies$BitArray $r2;
        int $i0;
        com.google.common.hash.Funnel $r3;
        com.google.common.hash.BloomFilter$Strategy $r4;
        boolean $z0;

        r0 := @this: com.google.common.hash.BloomFilter;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        $r3 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        $i0 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        $r2 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$BitArray bits>;

        $z0 = interfaceinvoke $r4.<com.google.common.hash.BloomFilter$Strategy: boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$BitArray)>(r1, $r3, $i0, $r2);

        return $z0;
    }

    public void put(java.lang.Object)
    {
        com.google.common.hash.BloomFilter r0;
        java.lang.Object r1;
        com.google.common.hash.BloomFilterStrategies$BitArray $r2;
        int $i0;
        com.google.common.hash.Funnel $r3;
        com.google.common.hash.BloomFilter$Strategy $r4;

        r0 := @this: com.google.common.hash.BloomFilter;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        $r3 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        $i0 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        $r2 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$BitArray bits>;

        interfaceinvoke $r4.<com.google.common.hash.BloomFilter$Strategy: void put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$BitArray)>(r1, $r3, $i0, $r2);

        return;
    }

    int getHashCount()
    {
        com.google.common.hash.BloomFilter r0;
        int $i0;

        r0 := @this: com.google.common.hash.BloomFilter;

        $i0 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        return $i0;
    }

    double computeExpectedFalsePositiveRate(int)
    {
        com.google.common.hash.BloomFilter r0;
        int i0, $i1, $i2, $i3, $i4;
        com.google.common.hash.BloomFilterStrategies$BitArray $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;

        r0 := @this: com.google.common.hash.BloomFilter;

        i0 := @parameter0: int;

        $i1 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        $i2 = neg $i1;

        $d0 = (double) $i2;

        $d1 = (double) i0;

        $r1 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$BitArray bits>;

        $i3 = virtualinvoke $r1.<com.google.common.hash.BloomFilterStrategies$BitArray: int size()>();

        $d2 = (double) $i3;

        $d3 = $d1 / $d2;

        $d4 = $d0 * $d3;

        $d5 = staticinvoke <java.lang.Math: double exp(double)>($d4);

        $d7 = 1.0 - $d5;

        $i4 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        $d6 = (double) $i4;

        $d8 = staticinvoke <java.lang.Math: double pow(double,double)>($d7, $d6);

        return $d8;
    }

    public static com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel, int, double)
    {
        com.google.common.hash.Funnel r0;
        int i0, i1, i2;
        double d0;
        byte $b3, $b4;
        boolean $z0, $z1, $z2, $z3;
        com.google.common.hash.BloomFilter $r2;
        com.google.common.hash.BloomFilterStrategies$BitArray $r3;
        com.google.common.hash.BloomFilterStrategies $r4;

        r0 := @parameter0: com.google.common.hash.Funnel;

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        if i0 <= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Expected insertions must be positive");

        $b3 = d0 cmpl 0.0;

        if $b3 <= 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $b4 = d0 cmpg 1.0;

        if $b4 >= 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        $z0 = $z3 & $z1;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "False positive probability in (0.0, 1.0)");

        i1 = staticinvoke <com.google.common.hash.BloomFilter: int optimalNumOfBits(int,double)>(i0, d0);

        i2 = staticinvoke <com.google.common.hash.BloomFilter: int optimalNumOfHashFunctions(int,int)>(i0, i1);

        $r2 = new com.google.common.hash.BloomFilter;

        $r3 = new com.google.common.hash.BloomFilterStrategies$BitArray;

        specialinvoke $r3.<com.google.common.hash.BloomFilterStrategies$BitArray: void <init>(int)>(i1);

        $r4 = <com.google.common.hash.BloomFilterStrategies: com.google.common.hash.BloomFilterStrategies MURMUR128_MITZ_32>;

        specialinvoke $r2.<com.google.common.hash.BloomFilter: void <init>(com.google.common.hash.BloomFilterStrategies$BitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy)>($r3, i2, r0, $r4);

        return $r2;
    }

    public static com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel, int)
    {
        com.google.common.hash.Funnel r0;
        int i0;
        com.google.common.hash.BloomFilter $r1;

        r0 := @parameter0: com.google.common.hash.Funnel;

        i0 := @parameter1: int;

        $r1 = staticinvoke <com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter create(com.google.common.hash.Funnel,int,double)>(r0, i0, 0.03);

        return $r1;
    }

    static int optimalNumOfHashFunctions(int, int)
    {
        int i0, i1, $i2, $i4, $i5;
        double $d0, $d1, $d2;
        long $l3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i1 / i0;

        $d1 = (double) $i2;

        $d0 = <com.google.common.hash.BloomFilter: double LN2>;

        $d2 = $d1 * $d0;

        $l3 = staticinvoke <java.lang.Math: long round(double)>($d2);

        $i4 = (int) $l3;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i4);

        return $i5;
    }

    static int optimalNumOfBits(int, double)
    {
        int i0, $i1, $i2;
        double d0, $d1, $d2, $d3, $d4, $d5;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $i1 = neg i0;

        $d1 = (double) $i1;

        $d2 = staticinvoke <java.lang.Math: double log(double)>(d0);

        $d4 = $d1 * $d2;

        $d3 = <com.google.common.hash.BloomFilter: double LN2_SQUARED>;

        $d5 = $d4 / $d3;

        $i2 = (int) $d5;

        return $i2;
    }

    private java.lang.Object writeReplace()
    {
        com.google.common.hash.BloomFilter r0;
        com.google.common.hash.BloomFilter$SerialForm $r1;

        r0 := @this: com.google.common.hash.BloomFilter;

        $r1 = new com.google.common.hash.BloomFilter$SerialForm;

        specialinvoke $r1.<com.google.common.hash.BloomFilter$SerialForm: void <init>(com.google.common.hash.BloomFilter)>(r0);

        return $r1;
    }

    static com.google.common.hash.BloomFilterStrategies$BitArray access$000(com.google.common.hash.BloomFilter)
    {
        com.google.common.hash.BloomFilter r0;
        com.google.common.hash.BloomFilterStrategies$BitArray $r1;

        r0 := @parameter0: com.google.common.hash.BloomFilter;

        $r1 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilterStrategies$BitArray bits>;

        return $r1;
    }

    static int access$100(com.google.common.hash.BloomFilter)
    {
        com.google.common.hash.BloomFilter r0;
        int $i0;

        r0 := @parameter0: com.google.common.hash.BloomFilter;

        $i0 = r0.<com.google.common.hash.BloomFilter: int numHashFunctions>;

        return $i0;
    }

    static com.google.common.hash.Funnel access$200(com.google.common.hash.BloomFilter)
    {
        com.google.common.hash.BloomFilter r0;
        com.google.common.hash.Funnel $r1;

        r0 := @parameter0: com.google.common.hash.BloomFilter;

        $r1 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.Funnel funnel>;

        return $r1;
    }

    static com.google.common.hash.BloomFilter$Strategy access$300(com.google.common.hash.BloomFilter)
    {
        com.google.common.hash.BloomFilter r0;
        com.google.common.hash.BloomFilter$Strategy $r1;

        r0 := @parameter0: com.google.common.hash.BloomFilter;

        $r1 = r0.<com.google.common.hash.BloomFilter: com.google.common.hash.BloomFilter$Strategy strategy>;

        return $r1;
    }

    void <init>(com.google.common.hash.BloomFilterStrategies$BitArray, int, com.google.common.hash.Funnel, com.google.common.hash.BloomFilter$Strategy, com.google.common.hash.BloomFilter$1)
    {
        com.google.common.hash.BloomFilter r0;
        com.google.common.hash.BloomFilterStrategies$BitArray r1;
        int i0;
        com.google.common.hash.Funnel r2;
        com.google.common.hash.BloomFilter$Strategy r3;
        com.google.common.hash.BloomFilter$1 r4;

        r0 := @this: com.google.common.hash.BloomFilter;

        r1 := @parameter0: com.google.common.hash.BloomFilterStrategies$BitArray;

        i0 := @parameter1: int;

        r2 := @parameter2: com.google.common.hash.Funnel;

        r3 := @parameter3: com.google.common.hash.BloomFilter$Strategy;

        r4 := @parameter4: com.google.common.hash.BloomFilter$1;

        specialinvoke r0.<com.google.common.hash.BloomFilter: void <init>(com.google.common.hash.BloomFilterStrategies$BitArray,int,com.google.common.hash.Funnel,com.google.common.hash.BloomFilter$Strategy)>(r1, i0, r2, r3);

        return;
    }

    static void <clinit>()
    {
        double $d0, $d1, $d2, $d3;

        $d0 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        <com.google.common.hash.BloomFilter: double LN2> = $d0;

        $d2 = <com.google.common.hash.BloomFilter: double LN2>;

        $d1 = <com.google.common.hash.BloomFilter: double LN2>;

        $d3 = $d2 * $d1;

        <com.google.common.hash.BloomFilter: double LN2_SQUARED> = $d3;

        return;
    }
}
