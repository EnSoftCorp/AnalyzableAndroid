final class com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher extends com.google.common.hash.AbstractHasher
{
    final com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream;
    static final int BOTTOM_BYTE;
    final com.google.common.hash.AbstractNonStreamingHashFunction this$0;

    void <init>(com.google.common.hash.AbstractNonStreamingHashFunction, int)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        com.google.common.hash.AbstractNonStreamingHashFunction r1;
        int i0;
        com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream $r2;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        r1 := @parameter0: com.google.common.hash.AbstractNonStreamingHashFunction;

        i0 := @parameter1: int;

        r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction this$0> = r1;

        specialinvoke r0.<com.google.common.hash.AbstractHasher: void <init>()>();

        $r2 = new com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream;

        specialinvoke $r2.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: void <init>(int)>(i0);

        r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream> = $r2;

        return;
    }

    public com.google.common.hash.Hasher putByte(byte)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        byte b0;
        com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream $r1;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        b0 := @parameter0: byte;

        $r1 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream>;

        virtualinvoke $r1.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: void write(int)>(b0);

        return r0;
    }

    public com.google.common.hash.Hasher putBytes(byte[])
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        byte[] r1;
        java.io.IOException r2, $r4;
        com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        r1 := @parameter0: byte[];

     label1:
        $r3 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream>;

        virtualinvoke $r3.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: void write(byte[])>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <com.google.common.base.Throwables: java.lang.RuntimeException propagate(java.lang.Throwable)>(r2);

        throw $r5;

     label4:
        return r0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public com.google.common.hash.Hasher putBytes(byte[], int, int)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        byte[] r1;
        int i0, i1;
        com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream $r2;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream>;

        virtualinvoke $r2.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, i1);

        return r0;
    }

    public com.google.common.hash.Hasher putShort(short)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        short s0, $s1, $s2, $s3;
        com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream $r1, $r2;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        s0 := @parameter0: short;

        $r1 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream>;

        $s1 = s0 & 255;

        virtualinvoke $r1.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: void write(int)>($s1);

        $r2 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream>;

        $s2 = s0 >>> 8;

        $s3 = $s2 & 255;

        virtualinvoke $r2.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: void write(int)>($s3);

        return r0;
    }

    public com.google.common.hash.Hasher putInt(int)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream $r1, $r2, $r3, $r4;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        i0 := @parameter0: int;

        $r1 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream>;

        $i1 = i0 & 255;

        virtualinvoke $r1.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: void write(int)>($i1);

        $r2 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream>;

        $i2 = i0 >>> 8;

        $i3 = $i2 & 255;

        virtualinvoke $r2.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: void write(int)>($i3);

        $r3 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream>;

        $i4 = i0 >>> 16;

        $i5 = $i4 & 255;

        virtualinvoke $r3.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: void write(int)>($i5);

        $r4 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream>;

        $i6 = i0 >>> 24;

        $i7 = $i6 & 255;

        virtualinvoke $r4.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: void write(int)>($i7);

        return r0;
    }

    public com.google.common.hash.Hasher putLong(long)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        long l0, $l2, $l3;
        int i1, $i4;
        byte $b5;
        com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream $r1;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        l0 := @parameter0: long;

        i1 = 0;

     label1:
        if i1 >= 64 goto label2;

        $r1 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream>;

        $l2 = l0 >>> i1;

        $l3 = $l2 & 255L;

        $i4 = (int) $l3;

        $b5 = (byte) $i4;

        virtualinvoke $r1.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: void write(int)>($b5);

        i1 = i1 + 8;

        goto label1;

     label2:
        return r0;
    }

    public com.google.common.hash.Hasher putChar(char)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        char c0, $c1, $c2, $c3;
        com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream $r1, $r2;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        c0 := @parameter0: char;

        $r1 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream>;

        $c1 = c0 & 255;

        virtualinvoke $r1.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: void write(int)>($c1);

        $r2 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream>;

        $c2 = c0 >>> 8;

        $c3 = $c2 & 255;

        virtualinvoke $r2.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: void write(int)>($c3);

        return r0;
    }

    public com.google.common.hash.Hasher putObject(java.lang.Object, com.google.common.hash.Funnel)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        java.lang.Object r1;
        com.google.common.hash.Funnel r2;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.google.common.hash.Funnel;

        interfaceinvoke r2.<com.google.common.hash.Funnel: void funnel(java.lang.Object,com.google.common.hash.Sink)>(r1, r0);

        return r0;
    }

    public com.google.common.hash.HashCode hash()
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream $r1, $r4;
        com.google.common.hash.AbstractNonStreamingHashFunction $r2;
        byte[] $r3;
        int $i0;
        com.google.common.hash.HashCode $r5;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        $r2 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction this$0>;

        $r1 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream>;

        $r3 = virtualinvoke $r1.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: byte[] byteArray()>();

        $r4 = r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream stream>;

        $i0 = virtualinvoke $r4.<com.google.common.hash.AbstractNonStreamingHashFunction$ExposedByteArrayOutputStream: int length()>();

        $r5 = virtualinvoke $r2.<com.google.common.hash.AbstractNonStreamingHashFunction: com.google.common.hash.HashCode hashBytes(byte[],int,int)>($r3, 0, $i0);

        return $r5;
    }

    public volatile com.google.common.hash.Sink putChar(char)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        char c0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.Hasher putChar(char)>(c0);

        return $r1;
    }

    public volatile com.google.common.hash.Sink putLong(long)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        long l0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.Hasher putLong(long)>(l0);

        return $r1;
    }

    public volatile com.google.common.hash.Sink putInt(int)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        int i0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.Hasher putInt(int)>(i0);

        return $r1;
    }

    public volatile com.google.common.hash.Sink putShort(short)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        short s0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        s0 := @parameter0: short;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.Hasher putShort(short)>(s0);

        return $r1;
    }

    public volatile com.google.common.hash.Sink putBytes(byte[], int, int)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        byte[] r1;
        int i0, i1;
        com.google.common.hash.Hasher $r2;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.Hasher putBytes(byte[],int,int)>(r1, i0, i1);

        return $r2;
    }

    public volatile com.google.common.hash.Sink putBytes(byte[])
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        byte[] r1;
        com.google.common.hash.Hasher $r2;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        r1 := @parameter0: byte[];

        $r2 = virtualinvoke r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.Hasher putBytes(byte[])>(r1);

        return $r2;
    }

    public volatile com.google.common.hash.Sink putByte(byte)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher r0;
        byte b0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        b0 := @parameter0: byte;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: com.google.common.hash.Hasher putByte(byte)>(b0);

        return $r1;
    }

    public static void <clinit>()
    {
        <com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: int BOTTOM_BYTE> = 255;

        return;
    }
}
