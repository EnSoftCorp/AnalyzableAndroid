public abstract class com.android.dreams.phototable.PhotoSource extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static final int BUFFER_SIZE;
    private final java.util.LinkedList mImageQueue;
    private final int mMaxQueueSize;
    private final float mMaxCropRatio;
    private final int mBadImageSkipLimit;
    private final com.android.dreams.phototable.PhotoSource mFallbackSource;
    private final java.util.HashMap mImageMap;
    protected final android.content.Context mContext;
    protected final android.content.res.Resources mResources;
    protected final java.util.Random mRNG;
    protected final com.android.dreams.phototable.AlbumSettings mSettings;
    protected final android.content.ContentResolver mResolver;
    protected java.lang.String mSourceName;

    public void <init>(android.content.Context, android.content.SharedPreferences)
    {
        com.android.dreams.phototable.PhotoSource r0;
        android.content.Context r1;
        android.content.SharedPreferences r2;
        com.android.dreams.phototable.StockSource $r3;

        r0 := @this: com.android.dreams.phototable.PhotoSource;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.SharedPreferences;

        $r3 = new com.android.dreams.phototable.StockSource;

        specialinvoke $r3.<com.android.dreams.phototable.StockSource: void <init>(android.content.Context,android.content.SharedPreferences)>(r1, r2);

        specialinvoke r0.<com.android.dreams.phototable.PhotoSource: void <init>(android.content.Context,android.content.SharedPreferences,com.android.dreams.phototable.PhotoSource)>(r1, r2, $r3);

        return;
    }

    public void <init>(android.content.Context, android.content.SharedPreferences, com.android.dreams.phototable.PhotoSource)
    {
        com.android.dreams.phototable.PhotoSource r0, r3;
        android.content.Context r1, $r5;
        android.content.SharedPreferences r2;
        com.android.dreams.phototable.AlbumSettings $r4;
        android.content.ContentResolver $r6;
        android.content.res.Resources $r7, $r9, $r10, $r11;
        java.util.LinkedList $r8;
        int $i0, $i1, $i2;
        float $f0, $f1;
        java.util.HashMap $r12;
        java.util.Random $r13;

        r0 := @this: com.android.dreams.phototable.PhotoSource;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.SharedPreferences;

        r3 := @parameter2: com.android.dreams.phototable.PhotoSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.dreams.phototable.PhotoSource: java.lang.String mSourceName> = "PhotoTable.PhotoSource";

        r0.<com.android.dreams.phototable.PhotoSource: android.content.Context mContext> = r1;

        $r4 = staticinvoke <com.android.dreams.phototable.AlbumSettings: com.android.dreams.phototable.AlbumSettings getAlbumSettings(android.content.SharedPreferences)>(r2);

        r0.<com.android.dreams.phototable.PhotoSource: com.android.dreams.phototable.AlbumSettings mSettings> = $r4;

        $r5 = r0.<com.android.dreams.phototable.PhotoSource: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.dreams.phototable.PhotoSource: android.content.ContentResolver mResolver> = $r6;

        $r7 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        r0.<com.android.dreams.phototable.PhotoSource: android.content.res.Resources mResources> = $r7;

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        r0.<com.android.dreams.phototable.PhotoSource: java.util.LinkedList mImageQueue> = $r8;

        $r9 = r0.<com.android.dreams.phototable.PhotoSource: android.content.res.Resources mResources>;

        $i0 = virtualinvoke $r9.<android.content.res.Resources: int getInteger(int)>(2131230730);

        r0.<com.android.dreams.phototable.PhotoSource: int mMaxQueueSize> = $i0;

        $r10 = r0.<com.android.dreams.phototable.PhotoSource: android.content.res.Resources mResources>;

        $i1 = virtualinvoke $r10.<android.content.res.Resources: int getInteger(int)>(2131230733);

        $f0 = (float) $i1;

        $f1 = $f0 / 1000000.0F;

        r0.<com.android.dreams.phototable.PhotoSource: float mMaxCropRatio> = $f1;

        $r11 = r0.<com.android.dreams.phototable.PhotoSource: android.content.res.Resources mResources>;

        $i2 = virtualinvoke $r11.<android.content.res.Resources: int getInteger(int)>(2131230738);

        r0.<com.android.dreams.phototable.PhotoSource: int mBadImageSkipLimit> = $i2;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        r0.<com.android.dreams.phototable.PhotoSource: java.util.HashMap mImageMap> = $r12;

        $r13 = new java.util.Random;

        specialinvoke $r13.<java.util.Random: void <init>()>();

        r0.<com.android.dreams.phototable.PhotoSource: java.util.Random mRNG> = $r13;

        r0.<com.android.dreams.phototable.PhotoSource: com.android.dreams.phototable.PhotoSource mFallbackSource> = r3;

        return;
    }

    protected void fillQueue()
    {
        com.android.dreams.phototable.PhotoSource r0;
        java.util.LinkedList $r1, $r2, $r4, $r7;
        int $i0, $i1, $i2, $i3;
        java.util.Collection $r3;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: com.android.dreams.phototable.PhotoSource;

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", "filling queue");

        $r2 = r0.<com.android.dreams.phototable.PhotoSource: java.util.LinkedList mImageQueue>;

        $i0 = r0.<com.android.dreams.phototable.PhotoSource: int mMaxQueueSize>;

        $r1 = r0.<com.android.dreams.phototable.PhotoSource: java.util.LinkedList mImageQueue>;

        $i1 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        $i2 = $i0 - $i1;

        $r3 = virtualinvoke r0.<com.android.dreams.phototable.PhotoSource: java.util.Collection findImages(int)>($i2);

        virtualinvoke $r2.<java.util.LinkedList: boolean addAll(java.util.Collection)>($r3);

        $r4 = r0.<com.android.dreams.phototable.PhotoSource: java.util.LinkedList mImageQueue>;

        staticinvoke <java.util.Collections: void shuffle(java.util.List)>($r4);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("queue contains: ");

        $r7 = r0.<com.android.dreams.phototable.PhotoSource: java.util.LinkedList mImageQueue>;

        $i3 = virtualinvoke $r7.<java.util.LinkedList: int size()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" items.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r10);

        return;
    }

    public android.graphics.Bitmap next(android.graphics.BitmapFactory$Options, int, int)
    {
        com.android.dreams.phototable.PhotoSource r0, $r11, $r12;
        android.graphics.BitmapFactory$Options r1;
        int i0, i1, i2, $i3;
        android.graphics.Bitmap r2;
        java.util.LinkedList r3, $r17, $r18, $r19;
        java.lang.Throwable r4, $r22;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        java.lang.Object[] $r13;
        java.util.Collection $r14;
        com.android.dreams.phototable.PhotoSource$ImageData $r15, r23;
        java.lang.Object $r16, $r20;
        boolean $z0;
        java.util.HashMap $r21;

        r0 := @this: com.android.dreams.phototable.PhotoSource;

        r1 := @parameter0: android.graphics.BitmapFactory$Options;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("decoding a picasa resource to ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r10);

        r2 = null;

        i2 = 0;

     label01:
        if r2 != null goto label09;

        $i3 = r0.<com.android.dreams.phototable.PhotoSource: int mBadImageSkipLimit>;

        if i2 >= $i3 goto label09;

        $r18 = r0.<com.android.dreams.phototable.PhotoSource: java.util.LinkedList mImageQueue>;

        r3 = $r18;

        entermonitor $r18;

     label02:
        $r17 = r0.<com.android.dreams.phototable.PhotoSource: java.util.LinkedList mImageQueue>;

        $z0 = virtualinvoke $r17.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        virtualinvoke r0.<com.android.dreams.phototable.PhotoSource: void fillQueue()>();

     label03:
        $r19 = r0.<com.android.dreams.phototable.PhotoSource: java.util.LinkedList mImageQueue>;

        $r20 = virtualinvoke $r19.<java.util.LinkedList: java.lang.Object poll()>();

        r23 = (com.android.dreams.phototable.PhotoSource$ImageData) $r20;

        exitmonitor r3;

     label04:
        goto label07;

     label05:
        $r22 := @caughtexception;

        r4 = $r22;

        exitmonitor r3;

     label06:
        throw r4;

     label07:
        if r23 == null goto label08;

        r2 = virtualinvoke r0.<com.android.dreams.phototable.PhotoSource: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)>(r23, r1, i0, i1);

        $r21 = r0.<com.android.dreams.phototable.PhotoSource: java.util.HashMap mImageMap>;

        virtualinvoke $r21.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r23);

     label08:
        i2 = i2 + 1;

        goto label01;

     label09:
        if r2 != null goto label10;

        $r12 = r0.<com.android.dreams.phototable.PhotoSource: com.android.dreams.phototable.PhotoSource mFallbackSource>;

        if $r12 == null goto label10;

        $r11 = r0.<com.android.dreams.phototable.PhotoSource: com.android.dreams.phototable.PhotoSource mFallbackSource>;

        $r14 = virtualinvoke $r11.<com.android.dreams.phototable.PhotoSource: java.util.Collection findImages(int)>(1);

        $r13 = interfaceinvoke $r14.<java.util.Collection: java.lang.Object[] toArray()>();

        $r16 = $r13[0];

        $r15 = (com.android.dreams.phototable.PhotoSource$ImageData) $r16;

        r2 = virtualinvoke r0.<com.android.dreams.phototable.PhotoSource: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)>($r15, r1, i0, i1);

     label10:
        return r2;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    public android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData, android.graphics.BitmapFactory$Options, int, int)
    {
        com.android.dreams.phototable.PhotoSource r0;
        com.android.dreams.phototable.PhotoSource$ImageData r1;
        android.graphics.BitmapFactory$Options r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, i37, i38;
        java.io.InputStream r3;
        java.io.BufferedInputStream r4, $r13, $r14, $r73;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, f37;
        java.lang.Throwable r5, r7, $r49, $r53, $r57, $r64, $r87, $r90, r96, r98, r100, r102;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r12, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r25, $r26, $r27, $r28, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r39, $r41, $r42, $r43, $r45, $r47, $r50, $r51, $r54, $r55, $r56, $r60, $r62, $r63, $r66, $r67, $r69, $r70, $r72, $r76, $r78, $r80, $r81, $r84, $r85, $r89, $r91, $r92, $r93;
        java.lang.String $r11, $r21, $r23, $r24, $r29, $r33, $r40, $r44, $r46, $r48, $r52, $r58, $r59, $r61, $r65, $r68, $r71, $r82, $r83, $r86, $r88;
        boolean $z0;
        byte $b10, $b11, $b18;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        android.graphics.Matrix $r38, r95;
        java.lang.OutOfMemoryError $r74, r97;
        java.io.IOException $r75, $r77, r101;
        java.io.FileNotFoundException $r79, r99;
        android.graphics.Bitmap r94;

        r0 := @this: com.android.dreams.phototable.PhotoSource;

        r1 := @parameter0: com.android.dreams.phototable.PhotoSource$ImageData;

        r2 := @parameter1: android.graphics.BitmapFactory$Options;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("decoding photo resource to ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r11);

        r3 = virtualinvoke r1.<com.android.dreams.phototable.PhotoSource$ImageData: java.io.InputStream getStream(int)>(i0);

     label01:
        $r13 = new java.io.BufferedInputStream;

        specialinvoke $r13.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r3);

        r4 = $r13;

        virtualinvoke r4.<java.io.BufferedInputStream: void mark(int)>(32768);

        r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        r2.<android.graphics.BitmapFactory$Options: int inSampleSize> = 1;

        $r14 = new java.io.BufferedInputStream;

        specialinvoke $r14.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r4);

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r14, null, r2);

        $i5 = r2.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i6 = r2.<android.graphics.BitmapFactory$Options: int outHeight>;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>($i5, $i6);

        $i8 = r2.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i7 = r2.<android.graphics.BitmapFactory$Options: int outHeight>;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>($i8, $i7);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("I see bounds of ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r16 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r21);

        if i2 == -1 goto label15;

        if i3 == -1 goto label15;

        $f5 = (float) i0;

        $f6 = (float) i2;

        $f8 = $f5 / $f6;

        $f3 = (float) i1;

        $f4 = (float) i3;

        $f9 = $f3 / $f4;

        f0 = staticinvoke <java.lang.Math: float max(float,float)>($f8, $f9);

        $f13 = (float) i0;

        $f7 = (float) i2;

        $f16 = $f13 / $f7;

        $f11 = (float) i1;

        $f12 = (float) i3;

        $f10 = $f11 / $f12;

        f1 = staticinvoke <java.lang.Math: float max(float,float)>($f16, $f10);

        $f14 = f1 / f0;

        $f15 = r0.<com.android.dreams.phototable.PhotoSource: float mMaxCropRatio>;

        $b10 = $f14 cmpg $f15;

        if $b10 >= 0 goto label02;

        $f36 = f1;

        goto label03;

     label02:
        $f36 = f0;

     label03:
        f2 = $f36;

     label04:
        $d0 = (double) f2;

        $b11 = $d0 cmpg 0.5;

        if $b11 >= 0 goto label05;

        $i35 = r2.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        $i36 = $i35 * 2;

        r2.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i36;

        f2 = f2 * 2.0F;

        goto label04;

     label05:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("decoding with inSampleSize ");

        $i9 = r2.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r29);

     label06:
        virtualinvoke r4.<java.io.BufferedInputStream: void reset()>();

     label07:
        goto label09;

     label08:
        $r75 := @caughtexception;

        virtualinvoke r4.<java.io.BufferedInputStream: void close()>();

        r3 = virtualinvoke r1.<com.android.dreams.phototable.PhotoSource$ImageData: java.io.InputStream getStream(int)>(i0);

        $r73 = new java.io.BufferedInputStream;

        specialinvoke $r73.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r3);

        r4 = $r73;

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", "resetting the stream");

     label09:
        r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        r94 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r4, null, r2);

        $i15 = r2.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i14 = r2.<android.graphics.BitmapFactory$Options: int outHeight>;

        i37 = staticinvoke <java.lang.Math: int max(int,int)>($i15, $i14);

        $i13 = r2.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i12 = r2.<android.graphics.BitmapFactory$Options: int outHeight>;

        i38 = staticinvoke <java.lang.Math: int max(int,int)>($i13, $i12);

        if r94 == null goto label13;

        if i37 == -1 goto label13;

        if i38 == -1 goto label13;

        $f20 = (float) i0;

        $f21 = (float) i37;

        $f17 = $f20 / $f21;

        $f22 = (float) i1;

        $f23 = (float) i38;

        $f18 = $f22 / $f23;

        f37 = staticinvoke <java.lang.Math: float max(float,float)>($f17, $f18);

        $f19 = f37 - 1.0F;

        $f24 = staticinvoke <java.lang.Math: float abs(float)>($f19);

        $d1 = (double) $f24;

        $b18 = $d1 cmpl 0.001;

        if $b18 <= 0 goto label10;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("still too big, scaling down by ");

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f37);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r44);

        $i34 = r2.<android.graphics.BitmapFactory$Options: int outWidth>;

        $f35 = (float) $i34;

        $f32 = f37 * $f35;

        $i28 = (int) $f32;

        r2.<android.graphics.BitmapFactory$Options: int outWidth> = $i28;

        $i29 = r2.<android.graphics.BitmapFactory$Options: int outHeight>;

        $f33 = (float) $i29;

        $f34 = f37 * $f33;

        $i30 = (int) $f34;

        r2.<android.graphics.BitmapFactory$Options: int outHeight> = $i30;

        $i31 = r2.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i32 = r2.<android.graphics.BitmapFactory$Options: int outHeight>;

        r94 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>(r94, $i31, $i32, 1);

     label10:
        $i17 = r1.<com.android.dreams.phototable.PhotoSource$ImageData: int orientation>;

        if $i17 == 0 goto label12;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rotated by ");

        $i22 = r1.<com.android.dreams.phototable.PhotoSource$ImageData: int orientation>;

        $r41 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r39 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": fixing");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r40);

        $r38 = new android.graphics.Matrix;

        specialinvoke $r38.<android.graphics.Matrix: void <init>()>();

        r95 = $r38;

        $i21 = r1.<com.android.dreams.phototable.PhotoSource$ImageData: int orientation>;

        $f25 = (float) $i21;

        $i20 = virtualinvoke r94.<android.graphics.Bitmap: int getWidth()>();

        $f30 = (float) $i20;

        $f29 = $f30 / 2.0F;

        $d3 = (double) $f29;

        $d2 = staticinvoke <java.lang.Math: double floor(double)>($d3);

        $f28 = (float) $d2;

        $i23 = virtualinvoke r94.<android.graphics.Bitmap: int getHeight()>();

        $f27 = (float) $i23;

        $f26 = $f27 / 2.0F;

        $d5 = (double) $f26;

        $d4 = staticinvoke <java.lang.Math: double floor(double)>($d5);

        $f31 = (float) $d4;

        virtualinvoke r95.<android.graphics.Matrix: void setRotate(float,float,float)>($f25, $f28, $f31);

        $i26 = r2.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i27 = r2.<android.graphics.BitmapFactory$Options: int outHeight>;

        r94 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>(r94, 0, 0, $i26, $i27, r95, 1);

        $i25 = r1.<com.android.dreams.phototable.PhotoSource$ImageData: int orientation>;

        if $i25 == 90 goto label11;

        $i33 = r1.<com.android.dreams.phototable.PhotoSource$ImageData: int orientation>;

        if $i33 != 270 goto label12;

     label11:
        i4 = r2.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i24 = r2.<android.graphics.BitmapFactory$Options: int outHeight>;

        r2.<android.graphics.BitmapFactory$Options: int outWidth> = $i24;

        r2.<android.graphics.BitmapFactory$Options: int outHeight> = i4;

     label12:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("returning bitmap ");

        $i16 = virtualinvoke r94.<android.graphics.Bitmap: int getWidth()>();

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i19 = virtualinvoke r94.<android.graphics.Bitmap: int getHeight()>();

        $r35 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r33);

        goto label14;

     label13:
        r94 = null;

     label14:
        goto label16;

     label15:
        r94 = null;

     label16:
        if r94 != null goto label19;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stream decoding failed with no error");

        $z0 = r2.<android.graphics.BitmapFactory$Options: boolean mCancel>;

        if $z0 == 0 goto label17;

        $r24 = " due to cancelation.";

        goto label18;

     label17:
        $r24 = ".";

     label18:
        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r23);

     label19:
        if r3 == null goto label20;

        virtualinvoke r3.<java.io.InputStream: void close()>();

     label20:
        goto label39;

     label21:
        $r53 := @caughtexception;

        r96 = $r53;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close fail: ");

        $r46 = virtualinvoke r96.<java.lang.Throwable: java.lang.String toString()>();

        $r47 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r48);

        goto label39;

     label22:
        $r74 := @caughtexception;

        r97 = $r74;

        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();

        $r93 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OUT OF MEMORY: ");

        $r92 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r97);

        $r88 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r88);

        r94 = null;

     label23:
        if r3 == null goto label24;

        virtualinvoke r3.<java.io.InputStream: void close()>();

     label24:
        goto label39;

     label25:
        $r90 := @caughtexception;

        r98 = $r90;

        $r89 = new java.lang.StringBuilder;

        specialinvoke $r89.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close fail: ");

        $r86 = virtualinvoke r98.<java.lang.Throwable: java.lang.String toString()>();

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86);

        $r83 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r83);

        goto label39;

     label26:
        $r79 := @caughtexception;

        r99 = $r79;

        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        $r72 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file not found: ");

        $r70 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r99);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r71);

        r94 = null;

     label27:
        if r3 == null goto label28;

        virtualinvoke r3.<java.io.InputStream: void close()>();

     label28:
        goto label39;

     label29:
        $r57 := @caughtexception;

        r100 = $r57;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close fail: ");

        $r61 = virtualinvoke r100.<java.lang.Throwable: java.lang.String toString()>();

        $r60 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r59 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r59);

        goto label39;

     label30:
        $r77 := @caughtexception;

        r101 = $r77;

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("i/o exception: ");

        $r81 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r101);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r82);

        r94 = null;

     label31:
        if r3 == null goto label32;

        virtualinvoke r3.<java.io.InputStream: void close()>();

     label32:
        goto label39;

     label33:
        $r49 := @caughtexception;

        r102 = $r49;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close fail: ");

        $r52 = virtualinvoke r102.<java.lang.Throwable: java.lang.String toString()>();

        $r66 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r65 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r65);

        goto label39;

     label34:
        $r87 := @caughtexception;

        r5 = $r87;

     label35:
        if r3 == null goto label36;

        virtualinvoke r3.<java.io.InputStream: void close()>();

     label36:
        goto label38;

     label37:
        $r64 := @caughtexception;

        r7 = $r64;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("close fail: ");

        $r68 = virtualinvoke r7.<java.lang.Throwable: java.lang.String toString()>();

        $r67 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        $r58 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.dreams.phototable.PhotoSource: void log(java.lang.String,java.lang.String)>("PhotoTable.PhotoSource", $r58);

     label38:
        throw r5;

     label39:
        return r94;

        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.OutOfMemoryError from label01 to label19 with label22;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.io.FileNotFoundException from label01 to label19 with label26;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.io.IOException from label01 to label19 with label30;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label01 to label19 with label34;
        catch java.lang.Throwable from label22 to label23 with label34;
        catch java.lang.Throwable from label26 to label27 with label34;
        catch java.lang.Throwable from label30 to label31 with label34;
        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.lang.Throwable from label34 to label35 with label34;
    }

    public void setSeed(long)
    {
        com.android.dreams.phototable.PhotoSource r0;
        long l0;
        java.util.Random $r1;

        r0 := @this: com.android.dreams.phototable.PhotoSource;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.dreams.phototable.PhotoSource: java.util.Random mRNG>;

        virtualinvoke $r1.<java.util.Random: void setSeed(long)>(l0);

        return;
    }

    protected static void log(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        return;
    }

    protected int pickRandomStart(int, int)
    {
        com.android.dreams.phototable.PhotoSource r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.Random $r1;

        r0 := @this: com.android.dreams.phototable.PhotoSource;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 < i0 goto label1;

        return -1;

     label1:
        $r1 = r0.<com.android.dreams.phototable.PhotoSource: java.util.Random mRNG>;

        $i2 = virtualinvoke $r1.<java.util.Random: int nextInt()>();

        $i3 = i0 - i1;

        $i4 = $i2 % $i3;

        $i5 = $i4 - 1;

        return $i5;
    }

    public android.graphics.Bitmap naturalNext(android.graphics.Bitmap, android.graphics.BitmapFactory$Options, int, int)
    {
        com.android.dreams.phototable.PhotoSource r0;
        android.graphics.Bitmap r1, r3;
        android.graphics.BitmapFactory$Options r2;
        int i0, i1;
        com.android.dreams.phototable.PhotoSource$ImageData r4, r5;
        java.util.HashMap $r6, $r8;
        java.lang.Object $r7;

        r0 := @this: com.android.dreams.phototable.PhotoSource;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.graphics.BitmapFactory$Options;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 = null;

        $r6 = r0.<com.android.dreams.phototable.PhotoSource: java.util.HashMap mImageMap>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.dreams.phototable.PhotoSource$ImageData) $r7;

        if r4 == null goto label1;

        r5 = virtualinvoke r4.<com.android.dreams.phototable.PhotoSource$ImageData: com.android.dreams.phototable.PhotoSource$ImageData naturalNext()>();

        if r5 == null goto label1;

        r3 = virtualinvoke r0.<com.android.dreams.phototable.PhotoSource: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)>(r5, r2, i0, i1);

        $r8 = r0.<com.android.dreams.phototable.PhotoSource: java.util.HashMap mImageMap>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r5);

     label1:
        return r3;
    }

    public android.graphics.Bitmap naturalPrevious(android.graphics.Bitmap, android.graphics.BitmapFactory$Options, int, int)
    {
        com.android.dreams.phototable.PhotoSource r0;
        android.graphics.Bitmap r1, r3;
        android.graphics.BitmapFactory$Options r2;
        int i0, i1;
        com.android.dreams.phototable.PhotoSource$ImageData r4, r5;
        java.util.HashMap $r6, $r8;
        java.lang.Object $r7;

        r0 := @this: com.android.dreams.phototable.PhotoSource;

        r1 := @parameter0: android.graphics.Bitmap;

        r2 := @parameter1: android.graphics.BitmapFactory$Options;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 = null;

        $r6 = r0.<com.android.dreams.phototable.PhotoSource: java.util.HashMap mImageMap>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.dreams.phototable.PhotoSource$ImageData) $r7;

        if r1 == null goto label1;

        r5 = virtualinvoke r4.<com.android.dreams.phototable.PhotoSource$ImageData: com.android.dreams.phototable.PhotoSource$ImageData naturalPrevious()>();

        if r5 == null goto label1;

        r3 = virtualinvoke r0.<com.android.dreams.phototable.PhotoSource: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)>(r5, r2, i0, i1);

        $r8 = r0.<com.android.dreams.phototable.PhotoSource: java.util.HashMap mImageMap>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r5);

     label1:
        return r3;
    }

    public void donePaging(android.graphics.Bitmap)
    {
        com.android.dreams.phototable.PhotoSource r0;
        android.graphics.Bitmap r1;
        com.android.dreams.phototable.PhotoSource$ImageData r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.dreams.phototable.PhotoSource;

        r1 := @parameter0: android.graphics.Bitmap;

        $r3 = r0.<com.android.dreams.phototable.PhotoSource: java.util.HashMap mImageMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.dreams.phototable.PhotoSource$ImageData) $r4;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.dreams.phototable.PhotoSource$ImageData: void donePaging()>();

     label1:
        return;
    }

    public void recycle(android.graphics.Bitmap)
    {
        com.android.dreams.phototable.PhotoSource r0;
        android.graphics.Bitmap r1;
        java.util.HashMap $r2;

        r0 := @this: com.android.dreams.phototable.PhotoSource;

        r1 := @parameter0: android.graphics.Bitmap;

        if r1 == null goto label1;

        $r2 = r0.<com.android.dreams.phototable.PhotoSource: java.util.HashMap mImageMap>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        virtualinvoke r1.<android.graphics.Bitmap: void recycle()>();

     label1:
        return;
    }

    protected abstract java.io.InputStream getStream(com.android.dreams.phototable.PhotoSource$ImageData, int);

    protected abstract java.util.Collection findImages(int);

    protected abstract com.android.dreams.phototable.PhotoSource$ImageData naturalNext(com.android.dreams.phototable.PhotoSource$ImageData);

    protected abstract com.android.dreams.phototable.PhotoSource$ImageData naturalPrevious(com.android.dreams.phototable.PhotoSource$ImageData);

    protected abstract void donePaging(com.android.dreams.phototable.PhotoSource$ImageData);

    public abstract java.util.Collection findAlbums();

    public static void <clinit>()
    {
        <com.android.dreams.phototable.PhotoSource: int BUFFER_SIZE> = 32768;

        <com.android.dreams.phototable.PhotoSource: boolean DEBUG> = 0;

        <com.android.dreams.phototable.PhotoSource: java.lang.String TAG> = "PhotoTable.PhotoSource";

        return;
    }
}
