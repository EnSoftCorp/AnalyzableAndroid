public class com.android.server.connectivity.Vpn extends java.lang.Object
{
    private static final java.lang.String NETWORKTYPE;
    private static final java.lang.String TAG;
    private static final boolean LOGD;
    private android.content.Context mContext;
    private android.net.NetworkInfo mNetworkInfo;
    private java.lang.String mPackage;
    private int mOwnerUID;
    private java.lang.String mInterface;
    private com.android.server.connectivity.Vpn$Connection mConnection;
    private com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner;
    private android.app.PendingIntent mStatusIntent;
    private volatile boolean mEnableTeardown;
    private final android.net.IConnectivityManager mConnService;
    private final android.os.INetworkManagementService mNetd;
    private com.android.internal.net.VpnConfig mConfig;
    private android.net.NetworkAgent mNetworkAgent;
    private final android.os.Looper mLooper;
    private final android.net.NetworkCapabilities mNetworkCapabilities;
    private java.util.List mVpnUsers;
    private android.content.BroadcastReceiver mUserIntentReceiver;
    private final int mUserHandle;
    private android.net.INetworkManagementEventObserver mObserver;

    public void <init>(android.os.Looper, android.content.Context, android.os.INetworkManagementService, android.net.IConnectivityManager, int)
    {
        com.android.server.connectivity.Vpn r0;
        android.os.Looper r1;
        android.content.Context r2, $r20;
        android.os.INetworkManagementService r3;
        android.net.IConnectivityManager r4;
        int i0, $i1, $i2;
        android.os.RemoteException r5, $r21;
        com.android.server.connectivity.Vpn$3 $r6;
        java.lang.String $r7;
        android.net.INetworkManagementEventObserver $r8;
        android.net.NetworkInfo $r9;
        android.net.NetworkCapabilities $r10, $r11, $r14;
        android.content.IntentFilter $r15, r22;
        com.android.server.connectivity.Vpn$1 $r16;
        android.content.BroadcastReceiver $r17;
        android.os.UserHandle $r18;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: android.os.Looper;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: android.os.INetworkManagementService;

        r4 := @parameter3: android.net.IConnectivityManager;

        i0 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.connectivity.Vpn: boolean mEnableTeardown> = 1;

        r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers> = null;

        r0.<com.android.server.connectivity.Vpn: android.content.BroadcastReceiver mUserIntentReceiver> = null;

        $r6 = new com.android.server.connectivity.Vpn$3;

        specialinvoke $r6.<com.android.server.connectivity.Vpn$3: void <init>(com.android.server.connectivity.Vpn)>(r0);

        r0.<com.android.server.connectivity.Vpn: android.net.INetworkManagementEventObserver mObserver> = $r6;

        r0.<com.android.server.connectivity.Vpn: android.content.Context mContext> = r2;

        r0.<com.android.server.connectivity.Vpn: android.os.INetworkManagementService mNetd> = r3;

        r0.<com.android.server.connectivity.Vpn: android.net.IConnectivityManager mConnService> = r4;

        r0.<com.android.server.connectivity.Vpn: int mUserHandle> = i0;

        r0.<com.android.server.connectivity.Vpn: android.os.Looper mLooper> = r1;

        r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage> = "[Legacy VPN]";

        $r7 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $i1 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        $i2 = specialinvoke r0.<com.android.server.connectivity.Vpn: int getAppUid(java.lang.String,int)>($r7, $i1);

        r0.<com.android.server.connectivity.Vpn: int mOwnerUID> = $i2;

     label1:
        $r8 = r0.<com.android.server.connectivity.Vpn: android.net.INetworkManagementEventObserver mObserver>;

        interfaceinvoke r3.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>($r8);

     label2:
        goto label4;

     label3:
        $r21 := @caughtexception;

        r5 = $r21;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("Vpn", "Problem registering observer", r5);

     label4:
        if i0 != 0 goto label5;

        $r16 = new com.android.server.connectivity.Vpn$1;

        specialinvoke $r16.<com.android.server.connectivity.Vpn$1: void <init>(com.android.server.connectivity.Vpn)>(r0);

        r0.<com.android.server.connectivity.Vpn: android.content.BroadcastReceiver mUserIntentReceiver> = $r16;

        $r15 = new android.content.IntentFilter;

        specialinvoke $r15.<android.content.IntentFilter: void <init>()>();

        r22 = $r15;

        virtualinvoke r22.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        virtualinvoke r22.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        $r20 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r17 = r0.<com.android.server.connectivity.Vpn: android.content.BroadcastReceiver mUserIntentReceiver>;

        $r18 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r20.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r17, $r18, r22, null, null);

     label5:
        $r9 = new android.net.NetworkInfo;

        specialinvoke $r9.<android.net.NetworkInfo: void <init>(int,int,java.lang.String,java.lang.String)>(17, 0, "VPN", "");

        r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo> = $r9;

        $r10 = new android.net.NetworkCapabilities;

        specialinvoke $r10.<android.net.NetworkCapabilities: void <init>()>();

        r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities> = $r10;

        $r11 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        virtualinvoke $r11.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addTransportType(int)>(4);

        $r14 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        virtualinvoke $r14.<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeCapability(int)>(15);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setEnableTeardown(boolean)
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0;

        r0 := @this: com.android.server.connectivity.Vpn;

        z0 := @parameter0: boolean;

        r0.<com.android.server.connectivity.Vpn: boolean mEnableTeardown> = z0;

        return;
    }

    private void updateState(android.net.NetworkInfo$DetailedState, java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkInfo$DetailedState r1;
        java.lang.String r2, $r8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        android.net.NetworkInfo $r9, $r11;
        android.net.NetworkAgent $r10, $r12;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: android.net.NetworkInfo$DetailedState;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setting state=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", reason=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Vpn", $r8);

        $r9 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke $r9.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>(r1, r2, null);

        $r10 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        if $r10 == null goto label1;

        $r12 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        $r11 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke $r12.<android.net.NetworkAgent: void sendNetworkInfo(android.net.NetworkInfo)>($r11);

     label1:
        return;
    }

    public synchronized boolean prepare(java.lang.String, java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1, r2, $r6, $r7, $r12, $r16, $r25, $r27, $r31, $r45;
        long l0, l10, l11;
        java.lang.Throwable r3, r4, r5, $r37, $r40, $r41;
        boolean $z0, $z2, $z3, $z4, $z6;
        com.android.server.connectivity.Vpn$Connection $r8, $r22, $r26;
        com.android.server.connectivity.Vpn$LegacyVpnRunner $r9, $r19;
        int $i1, $i2, $i4, $i5, $i6, $i8;
        android.os.INetworkManagementService $r10, $r18;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r17, $r29, $r30, $r32, $r33, $r34, $r38, $r39, $r42, $r43, $r44;
        android.net.NetworkInfo$DetailedState $r20;
        android.os.Parcel $r21;
        android.os.IBinder $r23;
        android.content.Context $r24;
        java.lang.Exception $r28, $r35, $r36, r47, r48;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 == null goto label07;

        $r27 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r27);

        if $z2 != 0 goto label07;

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("[Legacy VPN]");

        if $z3 != 0 goto label06;

        $z6 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isVpnUserPreConsented(java.lang.String)>(r1);

        if $z6 == 0 goto label06;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        virtualinvoke r0.<com.android.server.connectivity.Vpn: boolean prepare(java.lang.String,java.lang.String)>(null, r1);

     label02:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label05;

     label03:
        $r37 := @caughtexception;

        r3 = $r37;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r3;

     label05:
        return 1;

     label06:
        return 0;

     label07:
        if r2 == null goto label08;

        $r6 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label09;

        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("[Legacy VPN]");

        if $z4 != 0 goto label09;

     label08:
        return 1;

     label09:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        $r7 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        if $r7 == null goto label10;

        r0.<com.android.server.connectivity.Vpn: android.app.PendingIntent mStatusIntent> = null;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentDisconnect()>();

        $r25 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void jniReset(java.lang.String)>($r25);

        r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface> = null;

        r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers> = null;

     label10:
        $r8 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

        if $r8 == null goto label15;

     label11:
        $r22 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

        $r23 = staticinvoke <com.android.server.connectivity.Vpn$Connection: android.os.IBinder access$200(com.android.server.connectivity.Vpn$Connection)>($r22);

        $r21 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        interfaceinvoke $r23.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(16777215, $r21, null, 1);

     label12:
        goto label14;

     label13:
        $r36 := @caughtexception;

     label14:
        $r24 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r26 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

        virtualinvoke $r24.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r26);

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection> = null;

        goto label16;

     label15:
        $r9 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        if $r9 == null goto label16;

        $r19 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        virtualinvoke $r19.<com.android.server.connectivity.Vpn$LegacyVpnRunner: void exit()>();

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner> = null;

     label16:
        l10 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label17:
        $r10 = r0.<com.android.server.connectivity.Vpn: android.os.INetworkManagementService mNetd>;

        $i1 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        interfaceinvoke $r10.<android.os.INetworkManagementService: void denyProtect(int)>($i1);

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l10);

        goto label23;

     label19:
        $r35 := @caughtexception;

        r47 = $r35;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to disallow UID ");

        $i8 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to call protect() ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r47);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("Vpn", $r45);

     label20:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l10);

        goto label23;

     label21:
        $r40 := @caughtexception;

        r4 = $r40;

     label22:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l10);

        throw r4;

     label23:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Switched from ");

        $r12 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vpn", $r16);

        r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage> = r2;

        $i2 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        $i4 = specialinvoke r0.<com.android.server.connectivity.Vpn: int getAppUid(java.lang.String,int)>(r2, $i2);

        r0.<com.android.server.connectivity.Vpn: int mOwnerUID> = $i4;

        l11 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label24:
        $r18 = r0.<com.android.server.connectivity.Vpn: android.os.INetworkManagementService mNetd>;

        $i5 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        interfaceinvoke $r18.<android.os.INetworkManagementService: void allowProtect(int)>($i5);

     label25:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l11);

        goto label30;

     label26:
        $r28 := @caughtexception;

        r48 = $r28;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to allow UID ");

        $i6 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to call protect() ");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r48);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("Vpn", $r31);

     label27:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l11);

        goto label30;

     label28:
        $r41 := @caughtexception;

        r5 = $r41;

     label29:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l11);

        throw r5;

     label30:
        r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig> = null;

        $r20 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState IDLE>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r20, "prepare");

        return 1;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Exception from label11 to label12 with label13;
        catch java.lang.Exception from label17 to label18 with label19;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
        catch java.lang.Exception from label24 to label25 with label26;
        catch java.lang.Throwable from label24 to label25 with label28;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label28 to label29 with label28;
    }

    public void setPackageAuthorization(boolean)
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0, $z1;
        long l0;
        android.app.AppOpsManager r1;
        java.lang.Throwable r2, $r10;
        java.lang.String $r3, $r4, $r5, $r8, $r12, $r14;
        android.content.Context $r6;
        java.lang.Object $r7;
        int $i1;
        byte $b2;
        java.lang.Exception $r9, r16;
        java.lang.StringBuilder $r11, $r13, $r15;

        r0 := @this: com.android.server.connectivity.Vpn;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        $r3 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        if $r3 == null goto label01;

        $r5 = "[Legacy VPN]";

        $r4 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label02;

     label01:
        return;

     label02:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r6 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        r1 = (android.app.AppOpsManager) $r7;

        $i1 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        $r8 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        if z0 == 0 goto label04;

        $b2 = 0;

        goto label05;

     label04:
        $b2 = 1;

     label05:
        virtualinvoke r1.<android.app.AppOpsManager: void setMode(int,int,java.lang.String,int)>(47, $i1, $r8, $b2);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label11;

     label07:
        $r9 := @caughtexception;

        r16 = $r9;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to set app ops for package ");

        $r12 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("Vpn", $r14, r16);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label11;

     label09:
        $r10 := @caughtexception;

        r2 = $r10;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label11:
        return;

        catch java.lang.Exception from label03 to label06 with label07;
        catch java.lang.Throwable from label03 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private boolean isVpnUserPreConsented(java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1;
        android.app.AppOpsManager r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        r2 = (android.app.AppOpsManager) $r4;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = virtualinvoke r2.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String)>(47, $i0, r1);

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int getAppUid(java.lang.String, int)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1, $r4;
        int i0, i1, $i2;
        android.content.pm.PackageManager r2;
        boolean $z0;
        android.content.Context $r5;
        android.content.pm.PackageManager$NameNotFoundException $r6;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r4 = "[Legacy VPN]";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <android.os.Process: int myUid()>();

        return $i2;

     label1:
        $r5 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r2 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label2:
        i1 = virtualinvoke r2.<android.content.pm.PackageManager: int getPackageUid(java.lang.String,int)>(r1, i0);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        i1 = -1;

     label5:
        return i1;

        catch android.content.pm.PackageManager$NameNotFoundException from label2 to label3 with label4;
    }

    public android.net.NetworkInfo getNetworkInfo()
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkInfo $r1;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    private android.net.LinkProperties makeLinkProperties()
    {
        com.android.server.connectivity.Vpn r0;
        boolean z0, z1, $z2, $z6, $z7, $z8, $z10, $z11, $z12, $z13, $z14, $z16;
        android.net.LinkProperties r1, $r7;
        java.util.Iterator r2, r43, r45, r49;
        android.net.LinkAddress r3;
        java.net.InetAddress r4, $r26, $r29, $r40, $r42, r47;
        com.android.internal.net.VpnConfig $r5, $r6, $r9, $r11, $r13, $r17, $r21, $r32, $r34, $r39;
        java.lang.String $r8, $r18, $r19, r46, r50;
        java.util.List $r10, $r12, $r15, $r16, $r20, $r31, $r35, $r38;
        java.lang.StringBuilder $r14, $r22, r48;
        java.lang.Object $r23, $r33, $r36, $r41;
        android.net.RouteInfo $r24, $r30, r44;
        android.net.IpPrefix $r27, $r28, $r37;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r5 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        z0 = $r5.<com.android.internal.net.VpnConfig: boolean allowIPv4>;

        $r6 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        z1 = $r6.<com.android.internal.net.VpnConfig: boolean allowIPv6>;

        $r7 = new android.net.LinkProperties;

        specialinvoke $r7.<android.net.LinkProperties: void <init>()>();

        r1 = $r7;

        $r8 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        virtualinvoke r1.<android.net.LinkProperties: void setInterfaceName(java.lang.String)>($r8);

        $r9 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r10 = $r9.<com.android.internal.net.VpnConfig: java.util.List addresses>;

        if $r10 == null goto label02;

        $r39 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r38 = $r39.<com.android.internal.net.VpnConfig: java.util.List addresses>;

        r2 = interfaceinvoke $r38.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z13 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label02;

        $r41 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.net.LinkAddress) $r41;

        virtualinvoke r1.<android.net.LinkProperties: boolean addLinkAddress(android.net.LinkAddress)>(r3);

        $r40 = virtualinvoke r3.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $z14 = $r40 instanceof java.net.Inet4Address;

        z0 = z0 | $z14;

        $r42 = virtualinvoke r3.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $z16 = $r42 instanceof java.net.Inet6Address;

        z1 = z1 | $z16;

        goto label01;

     label02:
        $r11 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r12 = $r11.<com.android.internal.net.VpnConfig: java.util.List routes>;

        if $r12 == null goto label04;

        $r34 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r35 = $r34.<com.android.internal.net.VpnConfig: java.util.List routes>;

        r43 = interfaceinvoke $r35.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z10 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label04;

        $r36 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        r44 = (android.net.RouteInfo) $r36;

        virtualinvoke r1.<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>(r44);

        $r37 = virtualinvoke r44.<android.net.RouteInfo: android.net.IpPrefix getDestination()>();

        r4 = virtualinvoke $r37.<android.net.IpPrefix: java.net.InetAddress getAddress()>();

        $z12 = r4 instanceof java.net.Inet4Address;

        z0 = z0 | $z12;

        $z11 = r4 instanceof java.net.Inet6Address;

        z1 = z1 | $z11;

        goto label03;

     label04:
        $r13 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r15 = $r13.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        if $r15 == null goto label06;

        $r32 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r31 = $r32.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        r45 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z6 = interfaceinvoke r45.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label06;

        $r33 = interfaceinvoke r45.<java.util.Iterator: java.lang.Object next()>();

        r46 = (java.lang.String) $r33;

        r47 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)>(r46);

        virtualinvoke r1.<android.net.LinkProperties: boolean addDnsServer(java.net.InetAddress)>(r47);

        $z7 = r47 instanceof java.net.Inet4Address;

        z0 = z0 | $z7;

        $z8 = r47 instanceof java.net.Inet6Address;

        z1 = z1 | $z8;

        goto label05;

     label06:
        if z0 != 0 goto label07;

        $r30 = new android.net.RouteInfo;

        $r28 = new android.net.IpPrefix;

        $r29 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        specialinvoke $r28.<android.net.IpPrefix: void <init>(java.net.InetAddress,int)>($r29, 0);

        specialinvoke $r30.<android.net.RouteInfo: void <init>(android.net.IpPrefix,int)>($r28, 7);

        virtualinvoke r1.<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>($r30);

     label07:
        if z1 != 0 goto label08;

        $r24 = new android.net.RouteInfo;

        $r27 = new android.net.IpPrefix;

        $r26 = <java.net.Inet6Address: java.net.InetAddress ANY>;

        specialinvoke $r27.<android.net.IpPrefix: void <init>(java.net.InetAddress,int)>($r26, 0);

        specialinvoke $r24.<android.net.RouteInfo: void <init>(android.net.IpPrefix,int)>($r27, 7);

        virtualinvoke r1.<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>($r24);

     label08:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        r48 = $r14;

        $r17 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r16 = $r17.<com.android.internal.net.VpnConfig: java.util.List searchDomains>;

        if $r16 == null goto label10;

        $r21 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r20 = $r21.<com.android.internal.net.VpnConfig: java.util.List searchDomains>;

        r49 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r23 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        r50 = (java.lang.String) $r23;

        $r22 = virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r50);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label09;

     label10:
        $r19 = virtualinvoke r48.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = virtualinvoke $r19.<java.lang.String: java.lang.String trim()>();

        virtualinvoke r1.<android.net.LinkProperties: void setDomains(java.lang.String)>($r18);

        return r1;
    }

    private void agentConnect()
    {
        com.android.server.connectivity.Vpn r0;
        android.net.LinkProperties r1;
        android.net.NetworkMisc r2, $r11;
        long l0, l5;
        java.lang.Throwable r3, r4, $r28, $r30;
        android.content.pm.UserInfo r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.net.NetworkCapabilities $r6, $r15, $r27;
        android.net.NetworkInfo $r8, $r10, $r14;
        android.net.NetworkInfo$DetailedState $r9;
        com.android.internal.net.VpnConfig $r12;
        com.android.server.connectivity.Vpn$2 $r13;
        android.os.Looper $r16;
        android.content.Context $r17, $r23;
        int $i1, $i2, $i3, $i4;
        android.net.NetworkAgent $r18;
        java.util.List $r19, $r20, r31;
        java.lang.Object[] $r21;
        android.net.UidRange[] $r22, $r25;
        android.os.UserManager $r24;
        java.lang.Object $r26;
        java.util.Iterator r32;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 = specialinvoke r0.<com.android.server.connectivity.Vpn: android.net.LinkProperties makeLinkProperties()>();

        $z0 = virtualinvoke r1.<android.net.LinkProperties: boolean hasIPv4DefaultRoute()>();

        if $z0 != 0 goto label01;

        $z3 = virtualinvoke r1.<android.net.LinkProperties: boolean hasIPv6DefaultRoute()>();

        if $z3 == 0 goto label02;

     label01:
        $r6 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        virtualinvoke $r6.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(12);

        goto label03;

     label02:
        $r27 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        virtualinvoke $r27.<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeCapability(int)>(12);

     label03:
        $r8 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke $r8.<android.net.NetworkInfo: void setIsAvailable(boolean)>(1);

        $r10 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $r9 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        virtualinvoke $r10.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r9, null, null);

        $r11 = new android.net.NetworkMisc;

        specialinvoke $r11.<android.net.NetworkMisc: void <init>()>();

        r2 = $r11;

        $r12 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $z1 = $r12.<com.android.internal.net.VpnConfig: boolean allowBypass>;

        r2.<android.net.NetworkMisc: boolean allowBypass> = $z1;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r13 = new com.android.server.connectivity.Vpn$2;

        $r16 = r0.<com.android.server.connectivity.Vpn: android.os.Looper mLooper>;

        $r17 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r14 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $r15 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities mNetworkCapabilities>;

        specialinvoke $r13.<com.android.server.connectivity.Vpn$2: void <init>(com.android.server.connectivity.Vpn,android.os.Looper,android.content.Context,java.lang.String,android.net.NetworkInfo,android.net.NetworkCapabilities,android.net.LinkProperties,int,android.net.NetworkMisc)>(r0, $r16, $r17, "VPN", $r14, $r15, r1, 0, r2);

        r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent> = $r13;

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label08;

     label06:
        $r30 := @caughtexception;

        r3 = $r30;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r3;

     label08:
        $i2 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void addVpnUserLocked(int)>($i2);

        $i1 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        if $i1 != 0 goto label16;

        l5 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label09:
        $r23 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r24 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r23);

        r31 = virtualinvoke $r24.<android.os.UserManager: java.util.List getUsers()>();

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        goto label13;

     label11:
        $r28 := @caughtexception;

        r4 = $r28;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        throw r4;

     label13:
        r32 = interfaceinvoke r31.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z2 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label16;

        $r26 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r26;

        $z4 = virtualinvoke r5.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z4 == 0 goto label15;

        $i4 = r5.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void addVpnUserLocked(int)>($i4);

     label15:
        goto label14;

     label16:
        $r18 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        $r20 = r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers>;

        $r19 = r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers>;

        $i3 = interfaceinvoke $r19.<java.util.List: int size()>();

        $r22 = newarray (android.net.UidRange)[$i3];

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r22);

        $r25 = (android.net.UidRange[]) $r21;

        virtualinvoke $r18.<android.net.NetworkAgent: void addUidRanges(android.net.UidRange[])>($r25);

        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private void agentDisconnect(android.net.NetworkInfo, android.net.NetworkAgent)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkInfo r1;
        android.net.NetworkAgent r2;
        android.net.NetworkInfo$DetailedState $r3;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: android.net.NetworkInfo;

        r2 := @parameter1: android.net.NetworkAgent;

        virtualinvoke r1.<android.net.NetworkInfo: void setIsAvailable(boolean)>(0);

        $r3 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        virtualinvoke r1.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r3, null, null);

        if r2 == null goto label1;

        virtualinvoke r2.<android.net.NetworkAgent: void sendNetworkInfo(android.net.NetworkInfo)>(r1);

     label1:
        return;
    }

    private void agentDisconnect(android.net.NetworkAgent)
    {
        android.net.NetworkInfo $r0, r3, $r4;
        com.android.server.connectivity.Vpn r1;
        android.net.NetworkAgent r2;

        r1 := @this: com.android.server.connectivity.Vpn;

        r2 := @parameter0: android.net.NetworkAgent;

        $r4 = new android.net.NetworkInfo;

        $r0 = r1.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        specialinvoke $r4.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>($r0);

        r3 = $r4;

        specialinvoke r1.<com.android.server.connectivity.Vpn: void agentDisconnect(android.net.NetworkInfo,android.net.NetworkAgent)>(r3, r2);

        return;
    }

    private void agentDisconnect()
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkInfo $r1, $r3;
        boolean $z0;
        android.net.NetworkAgent $r2;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $z0 = virtualinvoke $r1.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $r2 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentDisconnect(android.net.NetworkInfo,android.net.NetworkAgent)>($r3, $r2);

        r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent> = null;

     label1:
        return;
    }

    public synchronized android.os.ParcelFileDescriptor establish(com.android.internal.net.VpnConfig)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnConfig r1, r86;
        android.os.UserManager r2;
        android.content.Intent r3, $r16;
        long l0, $l10;
        android.content.pm.UserInfo r4;
        android.content.pm.ResolveInfo r5;
        java.lang.Throwable r6, $r69;
        android.net.NetworkAgent r7;
        java.util.List r8, $r27;
        android.os.ParcelFileDescriptor r9;
        java.lang.String r10, $r15, $r18, $r21, $r22, $r26, $r30, $r34, $r38, $r39, $r42, $r43, $r45, $r52, $r60, $r64, $r71, $r73, $r80, $r82, $r84, r87;
        java.lang.StringBuilder r11, $r24, $r35, $r36, $r37, $r40, $r41, $r44, $r49, $r50, $r53, $r55, $r57, $r58, $r61, $r62, $r63, $r65, $r66, $r68, $r74, $r75, $r76, $r79, $r81, $r83;
        java.util.Iterator r12;
        android.net.LinkAddress r13;
        android.content.Context $r14, $r31, $r47;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.SecurityException $r19, $r54, $r59, $r78;
        android.content.pm.IPackageManager $r20;
        android.content.pm.ServiceInfo $r23;
        android.net.NetworkInfo$DetailedState $r25;
        android.os.UserHandle $r28;
        com.android.server.connectivity.Vpn$Connection $r29, r88, r89;
        java.io.FileDescriptor $r32;
        java.util.ArrayList $r33;
        java.lang.IllegalArgumentException $r46;
        java.lang.IllegalStateException $r48, $r67;
        java.lang.Object $r56;
        java.io.IOException $r70, r90;
        java.lang.RuntimeException $r72, r91;
        android.os.RemoteException $r77;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: com.android.internal.net.VpnConfig;

        $r14 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r2 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r14);

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        if $i2 == $i1 goto label01;

        return null;

     label01:
        $r16 = new android.content.Intent;

        specialinvoke $r16.<android.content.Intent: void <init>(java.lang.String)>("android.net.VpnService");

        r3 = $r16;

        $r18 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        $r15 = r1.<com.android.internal.net.VpnConfig: java.lang.String user>;

        virtualinvoke r3.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r18, $r15);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $i3 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        r4 = virtualinvoke r2.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>($i3);

        $z0 = virtualinvoke r4.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z0 != 0 goto label03;

        $z1 = virtualinvoke r2.<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>("no_config_vpn");

        if $z1 == 0 goto label04;

     label03:
        $r19 = new java.lang.SecurityException;

        specialinvoke $r19.<java.lang.SecurityException: void <init>(java.lang.String)>("Restricted users cannot establish VPNs");

        throw $r19;

     label04:
        $r20 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $i4 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        r5 = interfaceinvoke $r20.<android.content.pm.IPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>(r3, null, 0, $i4);

        if r5 != null goto label05;

        $r59 = new java.lang.SecurityException;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find ");

        $r73 = r1.<com.android.internal.net.VpnConfig: java.lang.String user>;

        $r74 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

        $r71 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r59.<java.lang.SecurityException: void <init>(java.lang.String)>($r71);

        throw $r59;

     label05:
        $r22 = "android.permission.BIND_VPN_SERVICE";

        $r23 = r5.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r21 = $r23.<android.content.pm.ServiceInfo: java.lang.String permission>;

        $z2 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z2 != 0 goto label06;

        $r54 = new java.lang.SecurityException;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r64 = r1.<com.android.internal.net.VpnConfig: java.lang.String user>;

        $r63 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r66 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not require ");

        $r65 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.BIND_VPN_SERVICE");

        $r60 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r54.<java.lang.SecurityException: void <init>(java.lang.String)>($r60);

        throw $r54;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label10;

     label07:
        $r77 := @caughtexception;

        $r78 = new java.lang.SecurityException;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find ");

        $r84 = r1.<com.android.internal.net.VpnConfig: java.lang.String user>;

        $r83 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r84);

        $r82 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r78.<java.lang.SecurityException: void <init>(java.lang.String)>($r82);

        throw $r78;

     label08:
        $r69 := @caughtexception;

        r6 = $r69;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r6;

     label10:
        r86 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        r87 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        r88 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

        r7 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent> = null;

        r8 = r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers>;

        $i6 = r1.<com.android.internal.net.VpnConfig: int mtu>;

        $i5 = specialinvoke r0.<com.android.server.connectivity.Vpn: int jniCreate(int)>($i6);

        r9 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>($i5);

     label11:
        $r25 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTING>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r25, "establish");

        $i7 = virtualinvoke r9.<android.os.ParcelFileDescriptor: int getFd()>();

        r10 = specialinvoke r0.<com.android.server.connectivity.Vpn: java.lang.String jniGetName(int)>($i7);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        r11 = $r24;

        $r27 = r1.<com.android.internal.net.VpnConfig: java.util.List addresses>;

        r12 = interfaceinvoke $r27.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z3 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r56 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r13 = (android.net.LinkAddress) $r56;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r57 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r52 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        goto label12;

     label13:
        $r26 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $i9 = specialinvoke r0.<com.android.server.connectivity.Vpn: int jniSetAddresses(java.lang.String,java.lang.String)>(r10, $r26);

        if $i9 >= 1 goto label14;

        $r46 = new java.lang.IllegalArgumentException;

        specialinvoke $r46.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("At least one address must be specified");

        throw $r46;

     label14:
        $r29 = new com.android.server.connectivity.Vpn$Connection;

        specialinvoke $r29.<com.android.server.connectivity.Vpn$Connection: void <init>(com.android.server.connectivity.Vpn,com.android.server.connectivity.Vpn$1)>(r0, null);

        r89 = $r29;

        $r31 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r28 = new android.os.UserHandle;

        $i8 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        specialinvoke $r28.<android.os.UserHandle: void <init>(int)>($i8);

        $z4 = virtualinvoke $r31.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(r3, r89, 1, $r28);

        if $z4 != 0 goto label15;

        $r48 = new java.lang.IllegalStateException;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot bind ");

        $r43 = r1.<com.android.internal.net.VpnConfig: java.lang.String user>;

        $r44 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r45);

        throw $r48;

     label15:
        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection> = r89;

        r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface> = r10;

        $r30 = r0.<com.android.server.connectivity.Vpn: java.lang.String mPackage>;

        r1.<com.android.internal.net.VpnConfig: java.lang.String user> = $r30;

        $r34 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        r1.<com.android.internal.net.VpnConfig: java.lang.String interfaze> = $r34;

        $l10 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r1.<com.android.internal.net.VpnConfig: long startTime> = $l10;

        r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig> = r1;

        $r33 = new java.util.ArrayList;

        specialinvoke $r33.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers> = $r33;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentConnect()>();

        if r88 == null goto label16;

        $r47 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        virtualinvoke $r47.<android.content.Context: void unbindService(android.content.ServiceConnection)>(r88);

     label16:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentDisconnect(android.net.NetworkAgent)>(r7);

        if r87 == null goto label17;

        $z6 = virtualinvoke r87.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z6 != 0 goto label17;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void jniReset(java.lang.String)>(r87);

     label17:
        $r32 = virtualinvoke r9.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $z5 = r1.<com.android.internal.net.VpnConfig: boolean blocking>;

        staticinvoke <libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)>($r32, $z5);

     label18:
        goto label20;

     label19:
        $r70 := @caughtexception;

        r90 = $r70;

        $r67 = new java.lang.IllegalStateException;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r81 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set tunnel\'s fd as blocking=");

        $z7 = r1.<com.android.internal.net.VpnConfig: boolean blocking>;

        $r79 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r67.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r80, r90);

        throw $r67;

     label20:
        goto label22;

     label21:
        $r72 := @caughtexception;

        r91 = $r72;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r9);

        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentDisconnect()>();

        r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig> = r86;

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection> = r88;

        r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers> = r8;

        r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent> = r7;

        r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface> = r87;

        throw r91;

     label22:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Established by ");

        $r39 = r1.<com.android.internal.net.VpnConfig: java.lang.String user>;

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        $r42 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        $r37 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Vpn", $r38);

        return r9;

        catch android.os.RemoteException from label02 to label06 with label07;
        catch java.lang.Throwable from label02 to label06 with label08;
        catch java.lang.Throwable from label07 to label09 with label08;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.lang.RuntimeException from label11 to label20 with label21;
    }

    private boolean isRunningLocked()
    {
        com.android.server.connectivity.Vpn r0;
        java.util.List $r1;
        boolean $z0;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private java.util.SortedSet getAppsUids(java.util.List, int)
    {
        com.android.server.connectivity.Vpn r0;
        java.util.List r1;
        int i0, i1;
        java.util.TreeSet r2, $r5;
        java.util.Iterator r3;
        java.lang.String r4;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Integer $r7;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $r5 = new java.util.TreeSet;

        specialinvoke $r5.<java.util.TreeSet: void <init>()>();

        r2 = $r5;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r6;

        i1 = specialinvoke r0.<com.android.server.connectivity.Vpn: int getAppUid(java.lang.String,int)>(r4, i0);

        if i1 == -1 goto label2;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke r2.<java.util.SortedSet: boolean add(java.lang.Object)>($r7);

     label2:
        goto label1;

     label3:
        return r2;
    }

    private void addVpnUserLocked(int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i8, i9;
        java.util.Iterator r1, r28;
        boolean $z0, $z2, $z6;
        com.android.internal.net.VpnConfig $r2, $r4, $r8, $r18;
        java.util.List $r3, $r5, $r6, $r10, $r12, $r16, $r19, $r20, $r26;
        android.net.UidRange $r7, $r11, $r15, $r21, $r25, r27;
        java.util.SortedSet $r9, $r17;
        java.lang.Object $r13, $r22;
        java.lang.Integer $r14, $r23;
        java.lang.IllegalStateException $r24;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isRunningLocked()>();

        if $z0 != 0 goto label01;

        $r24 = new java.lang.IllegalStateException;

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>("VPN is not active");

        throw $r24;

     label01:
        $r2 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r3 = $r2.<com.android.internal.net.VpnConfig: java.util.List allowedApplications>;

        if $r3 == null goto label07;

        i1 = -1;

        i2 = -1;

        $r18 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r19 = $r18.<com.android.internal.net.VpnConfig: java.util.List allowedApplications>;

        $r17 = specialinvoke r0.<com.android.server.connectivity.Vpn: java.util.SortedSet getAppsUids(java.util.List,int)>($r19, i0);

        r1 = interfaceinvoke $r17.<java.util.SortedSet: java.util.Iterator iterator()>();

     label02:
        $z6 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label05;

        $r22 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r23 = (java.lang.Integer) $r22;

        i3 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        if i1 != -1 goto label03;

        i1 = i3;

        goto label04;

     label03:
        $i7 = i2 + 1;

        if i3 == $i7 goto label04;

        $r26 = r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers>;

        $r25 = new android.net.UidRange;

        specialinvoke $r25.<android.net.UidRange: void <init>(int,int)>(i1, i2);

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>($r25);

        i1 = i3;

     label04:
        i2 = i3;

        goto label02;

     label05:
        if i1 == -1 goto label06;

        $r20 = r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers>;

        $r21 = new android.net.UidRange;

        specialinvoke $r21.<android.net.UidRange: void <init>(int,int)>(i1, i2);

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r21);

     label06:
        goto label14;

     label07:
        $r4 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r5 = $r4.<com.android.internal.net.VpnConfig: java.util.List disallowedApplications>;

        if $r5 == null goto label13;

        r27 = staticinvoke <android.net.UidRange: android.net.UidRange createForUser(int)>(i0);

        i8 = r27.<android.net.UidRange: int start>;

        $r8 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r10 = $r8.<com.android.internal.net.VpnConfig: java.util.List disallowedApplications>;

        $r9 = specialinvoke r0.<com.android.server.connectivity.Vpn: java.util.SortedSet getAppsUids(java.util.List,int)>($r10, i0);

        r28 = interfaceinvoke $r9.<java.util.SortedSet: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r13 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.lang.Integer) $r13;

        i9 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        if i9 != i8 goto label09;

        i8 = i8 + 1;

        goto label10;

     label09:
        $r16 = r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers>;

        $r15 = new android.net.UidRange;

        $i6 = i9 - 1;

        specialinvoke $r15.<android.net.UidRange: void <init>(int,int)>(i8, $i6);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r15);

        i8 = i9 + 1;

     label10:
        goto label08;

     label11:
        $i4 = r27.<android.net.UidRange: int stop>;

        if i8 > $i4 goto label12;

        $r12 = r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers>;

        $r11 = new android.net.UidRange;

        $i5 = r27.<android.net.UidRange: int stop>;

        specialinvoke $r11.<android.net.UidRange: void <init>(int,int)>(i8, $i5);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r11);

     label12:
        goto label14;

     label13:
        $r6 = r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers>;

        $r7 = staticinvoke <android.net.UidRange: android.net.UidRange createForUser(int)>(i0);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

     label14:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void prepareStatusIntent()>();

        return;
    }

    private java.util.List uidRangesForUser(int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0, $i1, $i2, $i3, $i4;
        android.net.UidRange r1, r4;
        java.util.ArrayList r2, $r5;
        java.util.Iterator r3;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.net.UidRange: android.net.UidRange createForUser(int)>(i0);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        $r6 = r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers>;

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.net.UidRange) $r7;

        $i2 = r4.<android.net.UidRange: int start>;

        $i1 = r1.<android.net.UidRange: int start>;

        if $i2 < $i1 goto label2;

        $i4 = r4.<android.net.UidRange: int stop>;

        $i3 = r1.<android.net.UidRange: int stop>;

        if $i4 > $i3 goto label2;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        return r2;
    }

    private void removeVpnUserLocked(int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0, $i1;
        java.util.List r1, $r3;
        boolean $z0;
        android.net.NetworkAgent $r2, $r4;
        android.net.UidRange[] $r5, $r7;
        java.lang.Object[] $r6;
        java.lang.IllegalStateException $r8;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean isRunningLocked()>();

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("VPN is not active");

        throw $r8;

     label1:
        r1 = specialinvoke r0.<com.android.server.connectivity.Vpn: java.util.List uidRangesForUser(int)>(i0);

        $r2 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        if $r2 == null goto label2;

        $r4 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $r5 = newarray (android.net.UidRange)[$i1];

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (android.net.UidRange[]) $r6;

        virtualinvoke $r4.<android.net.NetworkAgent: void removeUidRanges(android.net.UidRange[])>($r7);

     label2:
        $r3 = r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers>;

        interfaceinvoke $r3.<java.util.List: boolean removeAll(java.util.Collection)>(r1);

        r0.<com.android.server.connectivity.Vpn: android.app.PendingIntent mStatusIntent> = null;

        return;
    }

    private void onUserAdded(int)
    {
        com.android.server.connectivity.Vpn r0, r1;
        int i0, $i1;
        android.os.UserManager r2;
        android.content.pm.UserInfo r3;
        java.util.List r4;
        java.lang.Throwable r5, $r14;
        android.content.Context $r7;
        boolean $z0;
        android.net.NetworkAgent $r8, $r9;
        android.net.UidRange[] $r10, $r11;
        java.lang.Object[] $r12;
        java.lang.Exception $r13, r15;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        r1 = r0;

        entermonitor r0;

     label1:
        $r7 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r2 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r7);

        r3 = virtualinvoke r2.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z0 = virtualinvoke r3.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z0 == 0 goto label5;

     label2:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void addVpnUserLocked(int)>(i0);

        $r8 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        if $r8 == null goto label3;

        r4 = specialinvoke r0.<com.android.server.connectivity.Vpn: java.util.List uidRangesForUser(int)>(i0);

        $r9 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        $r10 = newarray (android.net.UidRange)[$i1];

        $r12 = interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r11 = (android.net.UidRange[]) $r12;

        virtualinvoke $r9.<android.net.NetworkAgent: void addUidRanges(android.net.UidRange[])>($r11);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        r15 = $r13;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("Vpn", "Failed to add restricted user to owner", r15);

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r14 := @caughtexception;

        r5 = $r14;

        exitmonitor r1;

     label8:
        throw r5;

     label9:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private void onUserRemoved(int)
    {
        com.android.server.connectivity.Vpn r0, r1;
        int i0;
        android.os.UserManager r2;
        android.content.pm.UserInfo r3;
        java.lang.Exception r4, $r9;
        java.lang.Throwable r5, $r8;
        android.content.Context $r7;
        boolean $z0;

        r0 := @this: com.android.server.connectivity.Vpn;

        i0 := @parameter0: int;

        r1 = r0;

        entermonitor r0;

     label1:
        $r7 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r2 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r7);

        r3 = virtualinvoke r2.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z0 = virtualinvoke r3.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z0 == 0 goto label5;

     label2:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void removeVpnUserLocked(int)>(i0);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        r4 = $r9;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("Vpn", "Failed to remove restricted user to owner", r4);

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r8 := @caughtexception;

        r5 = $r8;

        exitmonitor r1;

     label8:
        throw r5;

     label9:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public com.android.internal.net.VpnConfig getVpnConfig()
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnConfig $r1;

        r0 := @this: com.android.server.connectivity.Vpn;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        return $r1;
    }

    public synchronized void interfaceStatusChanged(java.lang.String, boolean)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1;
        boolean z0;
        android.net.INetworkManagementEventObserver $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        $r3 = r0.<com.android.server.connectivity.Vpn: android.net.INetworkManagementEventObserver mObserver>;

        interfaceinvoke $r3.<android.net.INetworkManagementEventObserver: void interfaceStatusChanged(java.lang.String,boolean)>(r1, z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void enforceControlPermission()
    {
        com.android.server.connectivity.Vpn r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        long l1;
        android.content.pm.PackageManager r1;
        android.content.pm.ApplicationInfo r2, r3;
        java.lang.Throwable r4, $r8;
        android.content.Context $r5;
        java.lang.SecurityException $r6;
        java.lang.Exception $r7;

        r0 := @this: com.android.server.connectivity.Vpn;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i2 != 1000 goto label01;

        return;

     label01:
        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i3);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r5 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r1 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r2 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>("com.android.vpndialogs", 0);

        $i4 = r2.<android.content.pm.ApplicationInfo: int flags>;

        $i5 = $i4 & 1;

        if $i5 == 0 goto label04;

        $i9 = r2.<android.content.pm.ApplicationInfo: int uid>;

        if i0 != $i9 goto label04;

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label04:
        r3 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>("com.android.systemui", 0);

        $i7 = r3.<android.content.pm.ApplicationInfo: int flags>;

        $i6 = $i7 & 1;

        if $i6 == 0 goto label06;

        $i8 = r3.<android.content.pm.ApplicationInfo: int uid>;

        if i0 != $i8 goto label06;

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label11;

     label07:
        $r7 := @caughtexception;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label11;

     label09:
        $r8 := @caughtexception;

        r4 = $r8;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r4;

     label11:
        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Unauthorized Caller");

        throw $r6;

        catch java.lang.Exception from label02 to label03 with label07;
        catch java.lang.Exception from label04 to label05 with label07;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void prepareStatusIntent()
    {
        com.android.server.connectivity.Vpn r0;
        long l0;
        java.lang.Throwable r1, $r4;
        android.content.Context $r2;
        android.app.PendingIntent $r3;

        r0 := @this: com.android.server.connectivity.Vpn;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        $r3 = staticinvoke <com.android.internal.net.VpnConfig: android.app.PendingIntent getIntentForStatusPanel(android.content.Context)>($r2);

        r0.<com.android.server.connectivity.Vpn: android.app.PendingIntent mStatusIntent> = $r3;

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label5;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public synchronized boolean addAddress(java.lang.String, int)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1, $r2, $r4;
        int i0, $i1, $i2;
        boolean z0;
        android.net.NetworkAgent $r3, $r5, $r6;
        android.net.LinkProperties $r7;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        if $i1 != $i2 goto label1;

        $r2 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        if $r3 != null goto label2;

     label1:
        return 0;

     label2:
        $r4 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean jniAddAddress(java.lang.String,java.lang.String,int)>($r4, r1, i0);

        $r5 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        if $r5 == null goto label3;

        $r6 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        $r7 = specialinvoke r0.<com.android.server.connectivity.Vpn: android.net.LinkProperties makeLinkProperties()>();

        virtualinvoke $r6.<android.net.NetworkAgent: void sendLinkProperties(android.net.LinkProperties)>($r7);

     label3:
        return z0;
    }

    public synchronized boolean removeAddress(java.lang.String, int)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1, $r2, $r4;
        int i0, $i1, $i2;
        boolean z0;
        android.net.NetworkAgent $r3, $r5, $r6;
        android.net.LinkProperties $r7;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = r0.<com.android.server.connectivity.Vpn: int mOwnerUID>;

        if $i1 != $i2 goto label1;

        $r2 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        if $r3 != null goto label2;

     label1:
        return 0;

     label2:
        $r4 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        z0 = specialinvoke r0.<com.android.server.connectivity.Vpn: boolean jniDelAddress(java.lang.String,java.lang.String,int)>($r4, r1, i0);

        $r5 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        if $r5 == null goto label3;

        $r6 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkAgent mNetworkAgent>;

        $r7 = specialinvoke r0.<com.android.server.connectivity.Vpn: android.net.LinkProperties makeLinkProperties()>();

        virtualinvoke $r6.<android.net.NetworkAgent: void sendLinkProperties(android.net.LinkProperties)>($r7);

     label3:
        return z0;
    }

    private native int jniCreate(int);

    private native java.lang.String jniGetName(int);

    private native int jniSetAddresses(java.lang.String, java.lang.String);

    private native void jniReset(java.lang.String);

    private native int jniCheck(java.lang.String);

    private native boolean jniAddAddress(java.lang.String, java.lang.String, int);

    private native boolean jniDelAddress(java.lang.String, java.lang.String, int);

    private static android.net.RouteInfo findIPv4DefaultRoute(android.net.LinkProperties)
    {
        android.net.LinkProperties r0;
        java.util.Iterator r1;
        android.net.RouteInfo r2;
        java.util.List $r3;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r4;
        java.lang.Object $r5;
        java.net.InetAddress $r6;

        r0 := @parameter0: android.net.LinkProperties;

        $r3 = virtualinvoke r0.<android.net.LinkProperties: java.util.List getAllRoutes()>();

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.net.RouteInfo) $r5;

        $z1 = virtualinvoke r2.<android.net.RouteInfo: boolean isDefaultRoute()>();

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r2.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        $z2 = $r6 instanceof java.net.Inet4Address;

        if $z2 == 0 goto label2;

        return r2;

     label2:
        goto label1;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to find IPv4 default gateway");

        throw $r4;
    }

    public void startLegacyVpn(com.android.internal.net.VpnProfile, android.security.KeyStore, android.net.LinkProperties)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnProfile r1;
        android.security.KeyStore r2;
        android.net.LinkProperties r3;
        android.os.UserManager r4;
        android.content.pm.UserInfo r5;
        android.net.RouteInfo r6;
        java.lang.String r7, r8, r9, r10, r11, r12, $r19, $r20, $r22, $r23, $r24, $r26, $r27, $r28, $r31, $r32, $r33, $r34, $r35, $r37, $r38, $r41, $r43, $r44, $r46, $r47, $r48, $r50, $r51, $r52, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r62, $r64, $r65, $r66, $r71, $r72, $r74, $r78, $r82, $r86, $r88, $r90;
        byte[] r13, r91, r92;
        java.lang.String[] r14, $r25, $r29, $r36, $r40, $r45, $r49, $r53, $r61, $r67, r93;
        com.android.internal.net.VpnConfig r15, $r30;
        android.content.Context $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i1, $i2;
        java.lang.SecurityException $r17;
        java.net.InetAddress $r18;
        java.lang.IllegalStateException $r21, $r85;
        java.util.List $r39, $r42;
        java.lang.StringBuilder $r63, $r68, $r69, $r70, $r75, $r76, $r77, $r79, $r80, $r81, $r87, $r89;
        java.nio.charset.Charset $r73, $r83, $r84;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: com.android.internal.net.VpnProfile;

        r2 := @parameter1: android.security.KeyStore;

        r3 := @parameter2: android.net.LinkProperties;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        $z0 = virtualinvoke r2.<android.security.KeyStore: boolean isUnlocked()>();

        if $z0 != 0 goto label01;

        $r85 = new java.lang.IllegalStateException;

        specialinvoke $r85.<java.lang.IllegalStateException: void <init>(java.lang.String)>("KeyStore isn\'t unlocked");

        throw $r85;

     label01:
        $r16 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        r4 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r16);

        $i0 = r0.<com.android.server.connectivity.Vpn: int mUserHandle>;

        r5 = virtualinvoke r4.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>($i0);

        $z1 = virtualinvoke r5.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z1 != 0 goto label02;

        $z2 = virtualinvoke r4.<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>("no_config_vpn");

        if $z2 == 0 goto label03;

     label02:
        $r17 = new java.lang.SecurityException;

        specialinvoke $r17.<java.lang.SecurityException: void <init>(java.lang.String)>("Restricted users cannot establish VPNs");

        throw $r17;

     label03:
        r6 = staticinvoke <com.android.server.connectivity.Vpn: android.net.RouteInfo findIPv4DefaultRoute(android.net.LinkProperties)>(r3);

        $r18 = virtualinvoke r6.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        r7 = virtualinvoke $r18.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r8 = virtualinvoke r6.<android.net.RouteInfo: java.lang.String getInterface()>();

        r9 = "";

        r10 = "";

        r11 = "";

        r12 = "";

        $r19 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecUserCert>;

        $z3 = virtualinvoke $r19.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label06;

        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r78 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecUserCert>;

        $r79 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);

        r9 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r89 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        $r90 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecUserCert>;

        $r87 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r90);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        r13 = virtualinvoke r2.<android.security.KeyStore: byte[] get(java.lang.String)>($r88);

        if r13 != null goto label04;

        $r86 = null;

        goto label05;

     label04:
        $r86 = new java.lang.String;

        $r84 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r86.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r13, $r84);

     label05:
        r10 = $r86;

     label06:
        $r20 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecCaCert>;

        $z4 = virtualinvoke $r20.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label09;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        $r71 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecCaCert>;

        $r70 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        r91 = virtualinvoke r2.<android.security.KeyStore: byte[] get(java.lang.String)>($r72);

        if r91 != null goto label07;

        $r82 = null;

        goto label08;

     label07:
        $r82 = new java.lang.String;

        $r83 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r82.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r91, $r83);

     label08:
        r11 = $r82;

     label09:
        $r22 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecServerCert>;

        $z5 = virtualinvoke $r22.<java.lang.String: boolean isEmpty()>();

        if $z5 != 0 goto label12;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        $r64 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecServerCert>;

        $r63 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        r92 = virtualinvoke r2.<android.security.KeyStore: byte[] get(java.lang.String)>($r65);

        if r92 != null goto label10;

        $r74 = null;

        goto label11;

     label10:
        $r74 = new java.lang.String;

        $r73 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r74.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r92, $r73);

     label11:
        r12 = $r74;

     label12:
        if r9 == null goto label13;

        if r10 == null goto label13;

        if r11 == null goto label13;

        if r12 != null goto label14;

     label13:
        $r21 = new java.lang.IllegalStateException;

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot load credentials");

        throw $r21;

     label14:
        r93 = null;

        $i1 = r1.<com.android.internal.net.VpnProfile: int type>;

        tableswitch($i1)
        {
            case 1: goto label15;
            case 2: goto label16;
            case 3: goto label17;
            case 4: goto label18;
            case 5: goto label19;
            default: goto label20;
        };

     label15:
        $r25 = newarray (java.lang.String)[6];

        $r25[0] = r8;

        $r26 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $r25[1] = $r26;

        $r25[2] = "udppsk";

        $r23 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecIdentifier>;

        $r25[3] = $r23;

        $r24 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret>;

        $r25[4] = $r24;

        $r25[5] = "1701";

        r93 = $r25;

        goto label20;

     label16:
        $r67 = newarray (java.lang.String)[8];

        $r67[0] = r8;

        $r66 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $r67[1] = $r66;

        $r67[2] = "udprsa";

        $r67[3] = r9;

        $r67[4] = r10;

        $r67[5] = r11;

        $r67[6] = r12;

        $r67[7] = "1701";

        r93 = $r67;

        goto label20;

     label17:
        $r61 = newarray (java.lang.String)[9];

        $r61[0] = r8;

        $r62 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $r61[1] = $r62;

        $r61[2] = "xauthpsk";

        $r55 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecIdentifier>;

        $r61[3] = $r55;

        $r56 = r1.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret>;

        $r61[4] = $r56;

        $r57 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        $r61[5] = $r57;

        $r58 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        $r61[6] = $r58;

        $r61[7] = "";

        $r61[8] = r7;

        r93 = $r61;

        goto label20;

     label18:
        $r49 = newarray (java.lang.String)[11];

        $r49[0] = r8;

        $r50 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $r49[1] = $r50;

        $r49[2] = "xauthrsa";

        $r49[3] = r9;

        $r49[4] = r10;

        $r49[5] = r11;

        $r49[6] = r12;

        $r59 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        $r49[7] = $r59;

        $r60 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        $r49[8] = $r60;

        $r49[9] = "";

        $r49[10] = r7;

        r93 = $r49;

        goto label20;

     label19:
        $r53 = newarray (java.lang.String)[9];

        $r53[0] = r8;

        $r54 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $r53[1] = $r54;

        $r53[2] = "hybridrsa";

        $r53[3] = r11;

        $r53[4] = r12;

        $r47 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        $r53[5] = $r47;

        $r48 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        $r53[6] = $r48;

        $r53[7] = "";

        $r53[8] = r7;

        r93 = $r53;

     label20:
        r14 = null;

        $i2 = r1.<com.android.internal.net.VpnProfile: int type>;

        tableswitch($i2)
        {
            case 0: goto label21;
            case 1: goto label24;
            case 2: goto label24;
            default: goto label25;
        };

     label21:
        $r29 = newarray (java.lang.String)[20];

        $r29[0] = r8;

        $r29[1] = "pptp";

        $r27 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $r29[2] = $r27;

        $r29[3] = "1723";

        $r29[4] = "name";

        $r28 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        $r29[5] = $r28;

        $r29[6] = "password";

        $r32 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        $r29[7] = $r32;

        $r29[8] = "linkname";

        $r29[9] = "vpn";

        $r29[10] = "refuse-eap";

        $r29[11] = "nodefaultroute";

        $r29[12] = "usepeerdns";

        $r29[13] = "idle";

        $r29[14] = "1800";

        $r29[15] = "mtu";

        $r29[16] = "1400";

        $r29[17] = "mru";

        $r29[18] = "1400";

        $z6 = r1.<com.android.internal.net.VpnProfile: boolean mppe>;

        if $z6 == 0 goto label22;

        $r46 = "+mppe";

        goto label23;

     label22:
        $r46 = "nomppe";

     label23:
        $r29[19] = $r46;

        r14 = $r29;

        goto label25;

     label24:
        $r45 = newarray (java.lang.String)[20];

        $r45[0] = r8;

        $r45[1] = "l2tp";

        $r44 = r1.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $r45[2] = $r44;

        $r45[3] = "1701";

        $r43 = r1.<com.android.internal.net.VpnProfile: java.lang.String l2tpSecret>;

        $r45[4] = $r43;

        $r45[5] = "name";

        $r51 = r1.<com.android.internal.net.VpnProfile: java.lang.String username>;

        $r45[6] = $r51;

        $r45[7] = "password";

        $r52 = r1.<com.android.internal.net.VpnProfile: java.lang.String password>;

        $r45[8] = $r52;

        $r45[9] = "linkname";

        $r45[10] = "vpn";

        $r45[11] = "refuse-eap";

        $r45[12] = "nodefaultroute";

        $r45[13] = "usepeerdns";

        $r45[14] = "idle";

        $r45[15] = "1800";

        $r45[16] = "mtu";

        $r45[17] = "1400";

        $r45[18] = "mru";

        $r45[19] = "1400";

        r14 = $r45;

     label25:
        $r30 = new com.android.internal.net.VpnConfig;

        specialinvoke $r30.<com.android.internal.net.VpnConfig: void <init>()>();

        r15 = $r30;

        r15.<com.android.internal.net.VpnConfig: boolean legacy> = 1;

        $r31 = r1.<com.android.internal.net.VpnProfile: java.lang.String key>;

        r15.<com.android.internal.net.VpnConfig: java.lang.String user> = $r31;

        r15.<com.android.internal.net.VpnConfig: java.lang.String interfaze> = r8;

        $r35 = r1.<com.android.internal.net.VpnProfile: java.lang.String name>;

        r15.<com.android.internal.net.VpnConfig: java.lang.String session> = $r35;

        $r34 = r1.<com.android.internal.net.VpnProfile: java.lang.String routes>;

        virtualinvoke r15.<com.android.internal.net.VpnConfig: void addLegacyRoutes(java.lang.String)>($r34);

        $r33 = r1.<com.android.internal.net.VpnProfile: java.lang.String dnsServers>;

        $z7 = virtualinvoke $r33.<java.lang.String: boolean isEmpty()>();

        if $z7 != 0 goto label26;

        $r41 = r1.<com.android.internal.net.VpnProfile: java.lang.String dnsServers>;

        $r40 = virtualinvoke $r41.<java.lang.String: java.lang.String[] split(java.lang.String)>(" +");

        $r39 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r40);

        r15.<com.android.internal.net.VpnConfig: java.util.List dnsServers> = $r39;

     label26:
        $r38 = r1.<com.android.internal.net.VpnProfile: java.lang.String searchDomains>;

        $z8 = virtualinvoke $r38.<java.lang.String: boolean isEmpty()>();

        if $z8 != 0 goto label27;

        $r37 = r1.<com.android.internal.net.VpnProfile: java.lang.String searchDomains>;

        $r36 = virtualinvoke $r37.<java.lang.String: java.lang.String[] split(java.lang.String)>(" +");

        $r42 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r36);

        r15.<com.android.internal.net.VpnConfig: java.util.List searchDomains> = $r42;

     label27:
        specialinvoke r0.<com.android.server.connectivity.Vpn: void startLegacyVpn(com.android.internal.net.VpnConfig,java.lang.String[],java.lang.String[])>(r15, r93, r14);

        return;
    }

    private synchronized void startLegacyVpn(com.android.internal.net.VpnConfig, java.lang.String[], java.lang.String[])
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnConfig r1;
        java.lang.String[] r2, r3;
        android.net.NetworkInfo$DetailedState $r4;
        com.android.server.connectivity.Vpn$LegacyVpnRunner $r5, $r6;

        r0 := @this: com.android.server.connectivity.Vpn;

        r1 := @parameter0: com.android.internal.net.VpnConfig;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String[];

        virtualinvoke r0.<com.android.server.connectivity.Vpn: void stopLegacyVpn()>();

        virtualinvoke r0.<com.android.server.connectivity.Vpn: boolean prepare(java.lang.String,java.lang.String)>(null, "[Legacy VPN]");

        $r4 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTING>;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>($r4, "startLegacyVpn");

        $r5 = new com.android.server.connectivity.Vpn$LegacyVpnRunner;

        specialinvoke $r5.<com.android.server.connectivity.Vpn$LegacyVpnRunner: void <init>(com.android.server.connectivity.Vpn,com.android.internal.net.VpnConfig,java.lang.String[],java.lang.String[])>(r0, r1, r2, r3);

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner> = $r5;

        $r6 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        virtualinvoke $r6.<com.android.server.connectivity.Vpn$LegacyVpnRunner: void start()>();

        return;
    }

    public synchronized void stopLegacyVpn()
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1;
        java.lang.Throwable r2, $r5;
        com.android.server.connectivity.Vpn$LegacyVpnRunner $r3, $r4;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r3 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        if $r3 == null goto label5;

        $r4 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        virtualinvoke $r4.<com.android.server.connectivity.Vpn$LegacyVpnRunner: void exit()>();

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner> = null;

        r1 = "LegacyVpnRunner";

        entermonitor "LegacyVpnRunner";

     label1:
        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public synchronized com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.LegacyVpnInfo r1, $r3;
        com.android.server.connectivity.Vpn$LegacyVpnRunner $r2;
        com.android.internal.net.VpnConfig $r4;
        java.lang.String $r5;
        android.net.NetworkInfo $r6, $r7;
        int $i0;
        boolean $z0;
        android.app.PendingIntent $r8;

        r0 := @this: com.android.server.connectivity.Vpn;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void enforceControlPermission()>();

        $r2 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = new com.android.internal.net.LegacyVpnInfo;

        specialinvoke $r3.<com.android.internal.net.LegacyVpnInfo: void <init>()>();

        r1 = $r3;

        $r4 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        $r5 = $r4.<com.android.internal.net.VpnConfig: java.lang.String user>;

        r1.<com.android.internal.net.LegacyVpnInfo: java.lang.String key> = $r5;

        $r6 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $i0 = staticinvoke <com.android.internal.net.LegacyVpnInfo: int stateFromNetworkInfo(android.net.NetworkInfo)>($r6);

        r1.<com.android.internal.net.LegacyVpnInfo: int state> = $i0;

        $r7 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        $z0 = virtualinvoke $r7.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label2;

        $r8 = r0.<com.android.server.connectivity.Vpn: android.app.PendingIntent mStatusIntent>;

        r1.<com.android.internal.net.LegacyVpnInfo: android.app.PendingIntent intent> = $r8;

     label2:
        return r1;
    }

    public com.android.internal.net.VpnConfig getLegacyVpnConfig()
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity.Vpn$LegacyVpnRunner $r1;
        com.android.internal.net.VpnConfig $r2;

        r0 := @this: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        return $r2;

     label1:
        return null;
    }

    static void access$000(com.android.server.connectivity.Vpn, int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void onUserAdded(int)>(i0);

        return;
    }

    static void access$100(com.android.server.connectivity.Vpn, int)
    {
        com.android.server.connectivity.Vpn r0;
        int i0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void onUserRemoved(int)>(i0);

        return;
    }

    static com.android.server.connectivity.Vpn$LegacyVpnRunner access$400(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity.Vpn$LegacyVpnRunner $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner>;

        return $r1;
    }

    static java.lang.String access$500(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface>;

        return $r1;
    }

    static int access$600(com.android.server.connectivity.Vpn, java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1;
        int $i0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: java.lang.String;

        $i0 = specialinvoke r0.<com.android.server.connectivity.Vpn: int jniCheck(java.lang.String)>(r1);

        return $i0;
    }

    static android.app.PendingIntent access$702(com.android.server.connectivity.Vpn, android.app.PendingIntent)
    {
        com.android.server.connectivity.Vpn r0;
        android.app.PendingIntent r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: android.app.PendingIntent;

        r0.<com.android.server.connectivity.Vpn: android.app.PendingIntent mStatusIntent> = r1;

        return r1;
    }

    static java.util.List access$802(com.android.server.connectivity.Vpn, java.util.List)
    {
        com.android.server.connectivity.Vpn r0;
        java.util.List r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: java.util.List;

        r0.<com.android.server.connectivity.Vpn: java.util.List mVpnUsers> = r1;

        return r1;
    }

    static java.lang.String access$502(com.android.server.connectivity.Vpn, java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.server.connectivity.Vpn: java.lang.String mInterface> = r1;

        return r1;
    }

    static com.android.server.connectivity.Vpn$Connection access$900(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity.Vpn$Connection $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection>;

        return $r1;
    }

    static android.content.Context access$1000(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.content.Context mContext>;

        return $r1;
    }

    static com.android.server.connectivity.Vpn$Connection access$902(com.android.server.connectivity.Vpn, com.android.server.connectivity.Vpn$Connection)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity.Vpn$Connection r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: com.android.server.connectivity.Vpn$Connection;

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$Connection mConnection> = r1;

        return r1;
    }

    static void access$1100(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentDisconnect()>();

        return;
    }

    static com.android.server.connectivity.Vpn$LegacyVpnRunner access$402(com.android.server.connectivity.Vpn, com.android.server.connectivity.Vpn$LegacyVpnRunner)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.server.connectivity.Vpn$LegacyVpnRunner r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: com.android.server.connectivity.Vpn$LegacyVpnRunner;

        r0.<com.android.server.connectivity.Vpn: com.android.server.connectivity.Vpn$LegacyVpnRunner mLegacyVpnRunner> = r1;

        return r1;
    }

    static boolean access$1200(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $z0 = r0.<com.android.server.connectivity.Vpn: boolean mEnableTeardown>;

        return $z0;
    }

    static android.net.INetworkManagementEventObserver access$1500(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.INetworkManagementEventObserver $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.INetworkManagementEventObserver mObserver>;

        return $r1;
    }

    static com.android.internal.net.VpnConfig access$1602(com.android.server.connectivity.Vpn, com.android.internal.net.VpnConfig)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnConfig r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: com.android.internal.net.VpnConfig;

        r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig> = r1;

        return r1;
    }

    static com.android.internal.net.VpnConfig access$1600(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        com.android.internal.net.VpnConfig $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig mConfig>;

        return $r1;
    }

    static android.net.IConnectivityManager access$1700(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.IConnectivityManager $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.IConnectivityManager mConnService>;

        return $r1;
    }

    static void access$1800(com.android.server.connectivity.Vpn, android.net.NetworkInfo$DetailedState, java.lang.String)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkInfo$DetailedState r1;
        java.lang.String r2;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: android.net.NetworkInfo$DetailedState;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void updateState(android.net.NetworkInfo$DetailedState,java.lang.String)>(r1, r2);

        return;
    }

    static void access$1900(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        specialinvoke r0.<com.android.server.connectivity.Vpn: void agentConnect()>();

        return;
    }

    static android.net.NetworkInfo access$2000(com.android.server.connectivity.Vpn)
    {
        com.android.server.connectivity.Vpn r0;
        android.net.NetworkInfo $r1;

        r0 := @parameter0: com.android.server.connectivity.Vpn;

        $r1 = r0.<com.android.server.connectivity.Vpn: android.net.NetworkInfo mNetworkInfo>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.server.connectivity.Vpn: boolean LOGD> = 1;

        <com.android.server.connectivity.Vpn: java.lang.String TAG> = "Vpn";

        <com.android.server.connectivity.Vpn: java.lang.String NETWORKTYPE> = "VPN";

        return;
    }
}
