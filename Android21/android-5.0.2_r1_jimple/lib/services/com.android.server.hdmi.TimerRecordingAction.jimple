public class com.android.server.hdmi.TimerRecordingAction extends com.android.server.hdmi.HdmiCecFeatureAction
{
    private static final java.lang.String TAG;
    private static final int TIMER_STATUS_TIMEOUT_MS;
    private static final int STATE_WAITING_FOR_TIMER_STATUS;
    private final int mRecorderAddress;
    private final int mSourceType;
    private final byte[] mRecordSource;

    void <init>(com.android.server.hdmi.HdmiCecLocalDevice, int, int, byte[])
    {
        com.android.server.hdmi.TimerRecordingAction r0;
        com.android.server.hdmi.HdmiCecLocalDevice r1;
        int i0, i1;
        byte[] r2;

        r0 := @this: com.android.server.hdmi.TimerRecordingAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        specialinvoke r0.<com.android.server.hdmi.HdmiCecFeatureAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r1);

        r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress> = i0;

        r0.<com.android.server.hdmi.TimerRecordingAction: int mSourceType> = i1;

        r0.<com.android.server.hdmi.TimerRecordingAction: byte[] mRecordSource> = r2;

        return;
    }

    boolean start()
    {
        com.android.server.hdmi.TimerRecordingAction r0;

        r0 := @this: com.android.server.hdmi.TimerRecordingAction;

        specialinvoke r0.<com.android.server.hdmi.TimerRecordingAction: void sendTimerMessage()>();

        return 1;
    }

    private void sendTimerMessage()
    {
        com.android.server.hdmi.TimerRecordingAction r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        byte[] $r1, $r3, $r4;
        com.android.server.hdmi.TimerRecordingAction$1 $r2;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r5;
        com.android.server.hdmi.HdmiCecMessage r6;

        r0 := @this: com.android.server.hdmi.TimerRecordingAction;

        $i0 = r0.<com.android.server.hdmi.TimerRecordingAction: int mSourceType>;

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $i1 = virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: int getSourceAddress()>();

        $i2 = r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress>;

        $r1 = r0.<com.android.server.hdmi.TimerRecordingAction: byte[] mRecordSource>;

        r6 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildSetDigitalTimer(int,int,byte[])>($i1, $i2, $r1);

        goto label5;

     label2:
        $i5 = virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: int getSourceAddress()>();

        $i6 = r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress>;

        $r4 = r0.<com.android.server.hdmi.TimerRecordingAction: byte[] mRecordSource>;

        r6 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildSetAnalogueTimer(int,int,byte[])>($i5, $i6, $r4);

        goto label5;

     label3:
        $i3 = virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: int getSourceAddress()>();

        $i4 = r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress>;

        $r3 = r0.<com.android.server.hdmi.TimerRecordingAction: byte[] mRecordSource>;

        r6 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildSetExternalTimer(int,int,byte[])>($i3, $i4, $r3);

        goto label5;

     label4:
        $r5 = virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        virtualinvoke $r5.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceTimerRecordingResult(int)>(2);

        virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: void finish()>();

        return;

     label5:
        $r2 = new com.android.server.hdmi.TimerRecordingAction$1;

        specialinvoke $r2.<com.android.server.hdmi.TimerRecordingAction$1: void <init>(com.android.server.hdmi.TimerRecordingAction)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: void sendCommand(com.android.server.hdmi.HdmiCecMessage,com.android.server.hdmi.HdmiControlService$SendMessageCallback)>(r6, $r2);

        return;
    }

    boolean processCommand(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.TimerRecordingAction r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.hdmi.TimerRecordingAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $i0 = r0.<com.android.server.hdmi.TimerRecordingAction: int mState>;

        if $i0 == 1 goto label1;

        return 0;

     label1:
        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $i2 = r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress>;

        if $i1 == $i2 goto label2;

        return 0;

     label2:
        $i3 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getOpcode()>();

        lookupswitch($i3)
        {
            case 0: goto label4;
            case 53: goto label3;
            default: goto label5;
        };

     label3:
        $z0 = specialinvoke r0.<com.android.server.hdmi.TimerRecordingAction: boolean handleTimerStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z0;

     label4:
        $z1 = specialinvoke r0.<com.android.server.hdmi.TimerRecordingAction: boolean handleFeatureAbort(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z1;

     label5:
        return 0;
    }

    private boolean handleTimerStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.TimerRecordingAction r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        byte[] r2;
        int $i0, $i1, $i3;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r9, $r10, $r11;
        java.lang.String $r6, $r8, $r12, $r13;

        r0 := @this: com.android.server.hdmi.TimerRecordingAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $i0 = lengthof r2;

        if $i0 == 1 goto label1;

        $i3 = lengthof r2;

        if $i3 != 3 goto label2;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $i1 = staticinvoke <com.android.server.hdmi.TimerRecordingAction: int bytesToInt(byte[])>(r2);

        virtualinvoke $r3.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceTimerRecordingResult(int)>($i1);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received [Timer Status Data]:");

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r2);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("TimerRecordingAction", $r8);

        goto label3;

     label2:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid [Timer Status Data]:");

        $r12 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("TimerRecordingAction", $r13);

     label3:
        virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: void finish()>();

        return 1;
    }

    private boolean handleFeatureAbort(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.TimerRecordingAction r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        byte[] r2;
        short s0, s1;
        byte $b2, $b3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r9;

        r0 := @this: com.android.server.hdmi.TimerRecordingAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $b2 = r2[0];

        s0 = $b2 & 255;

        lookupswitch(s0)
        {
            case 52: goto label1;
            case 151: goto label1;
            case 162: goto label1;
            default: goto label2;
        };

     label1:
        goto label3;

     label2:
        return 0;

     label3:
        $b3 = r2[1];

        s1 = $b3 & 255;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Feature Abort] for ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reason:");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("TimerRecordingAction", $r8);

        $r9 = virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        virtualinvoke $r9.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceTimerRecordingResult(int)>(1);

        virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: void finish()>();

        return 1;
    }

    private static int bytesToInt(byte[])
    {
        byte[] r0;
        int i0, i1, i2, $i3, $i4, $i5, $i8;
        byte $b6;
        short $s7;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @parameter0: byte[];

        $i3 = lengthof r0;

        if $i3 <= 4 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid data size:");

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        i0 = 0;

        i1 = 0;

     label2:
        $i4 = lengthof r0;

        if i1 >= $i4 goto label3;

        $i5 = 3 - i1;

        i2 = $i5 * 8;

        $b6 = r0[i1];

        $s7 = $b6 & 255;

        $i8 = $s7 << i2;

        i0 = i0 | $i8;

        i1 = i1 + 1;

        goto label2;

     label3:
        return i0;
    }

    void handleTimerEvent(int)
    {
        com.android.server.hdmi.TimerRecordingAction r0;
        int i0, $i1, $i2;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: com.android.server.hdmi.TimerRecordingAction;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.hdmi.TimerRecordingAction: int mState>;

        if $i1 == i0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout in invalid state:[Expected:");

        $i2 = r0.<com.android.server.hdmi.TimerRecordingAction: int mState>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Actual:");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("TimerRecordingAction", $r8);

        return;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceTimerRecordingResult(int)>(1);

        virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: void finish()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.hdmi.TimerRecordingAction: int STATE_WAITING_FOR_TIMER_STATUS> = 1;

        <com.android.server.hdmi.TimerRecordingAction: int TIMER_STATUS_TIMEOUT_MS> = 120000;

        <com.android.server.hdmi.TimerRecordingAction: java.lang.String TAG> = "TimerRecordingAction";

        return;
    }
}
