abstract class com.android.server.backup.BackupManagerService$RestoreEngine extends java.lang.Object
{
    static final java.lang.String TAG;
    public static final int SUCCESS;
    public static final int TARGET_FAILURE;
    public static final int TRANSPORT_FAILURE;
    private java.util.concurrent.atomic.AtomicBoolean mRunning;
    private java.util.concurrent.atomic.AtomicInteger mResult;
    final com.android.server.backup.BackupManagerService this$0;

    void <init>(com.android.server.backup.BackupManagerService)
    {
        com.android.server.backup.BackupManagerService$RestoreEngine r0;
        com.android.server.backup.BackupManagerService r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;

        r0 := @this: com.android.server.backup.BackupManagerService$RestoreEngine;

        r1 := @parameter0: com.android.server.backup.BackupManagerService;

        r0.<com.android.server.backup.BackupManagerService$RestoreEngine: com.android.server.backup.BackupManagerService this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.backup.BackupManagerService$RestoreEngine: java.util.concurrent.atomic.AtomicBoolean mRunning> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<com.android.server.backup.BackupManagerService$RestoreEngine: java.util.concurrent.atomic.AtomicInteger mResult> = $r3;

        return;
    }

    public boolean isRunning()
    {
        com.android.server.backup.BackupManagerService$RestoreEngine r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService$RestoreEngine;

        $r1 = r0.<com.android.server.backup.BackupManagerService$RestoreEngine: java.util.concurrent.atomic.AtomicBoolean mRunning>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public void setRunning(boolean)
    {
        com.android.server.backup.BackupManagerService$RestoreEngine r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean r1, $r3, $r4, $r5;
        java.lang.Throwable r2, $r6;

        r0 := @this: com.android.server.backup.BackupManagerService$RestoreEngine;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.backup.BackupManagerService$RestoreEngine: java.util.concurrent.atomic.AtomicBoolean mRunning>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.backup.BackupManagerService$RestoreEngine: java.util.concurrent.atomic.AtomicBoolean mRunning>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        $r5 = r0.<com.android.server.backup.BackupManagerService$RestoreEngine: java.util.concurrent.atomic.AtomicBoolean mRunning>;

        virtualinvoke $r5.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int waitForResult()
    {
        com.android.server.backup.BackupManagerService$RestoreEngine r0;
        java.util.concurrent.atomic.AtomicBoolean r1, $r4, $r5;
        java.lang.Throwable r3, $r6;
        boolean $z0;
        int $i0;
        java.lang.InterruptedException $r7;

        r0 := @this: com.android.server.backup.BackupManagerService$RestoreEngine;

        $r4 = r0.<com.android.server.backup.BackupManagerService$RestoreEngine: java.util.concurrent.atomic.AtomicBoolean mRunning>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService$RestoreEngine: boolean isRunning()>();

        if $z0 == 0 goto label5;

     label2:
        $r5 = r0.<com.android.server.backup.BackupManagerService$RestoreEngine: java.util.concurrent.atomic.AtomicBoolean mRunning>;

        virtualinvoke $r5.<java.lang.Object: void wait()>();

     label3:
        goto label1;

     label4:
        $r7 := @caughtexception;

        goto label1;

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        $i0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService$RestoreEngine: int getResult()>();

        return $i0;

        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int getResult()
    {
        com.android.server.backup.BackupManagerService$RestoreEngine r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService$RestoreEngine;

        $r1 = r0.<com.android.server.backup.BackupManagerService$RestoreEngine: java.util.concurrent.atomic.AtomicInteger mResult>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public void setResult(int)
    {
        com.android.server.backup.BackupManagerService$RestoreEngine r0;
        int i0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: com.android.server.backup.BackupManagerService$RestoreEngine;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.backup.BackupManagerService$RestoreEngine: java.util.concurrent.atomic.AtomicInteger mResult>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(i0);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.backup.BackupManagerService$RestoreEngine: int TRANSPORT_FAILURE> = -3;

        <com.android.server.backup.BackupManagerService$RestoreEngine: int TARGET_FAILURE> = -2;

        <com.android.server.backup.BackupManagerService$RestoreEngine: int SUCCESS> = 0;

        <com.android.server.backup.BackupManagerService$RestoreEngine: java.lang.String TAG> = "RestoreEngine";

        return;
    }
}
