public class com.android.server.NsdService extends android.net.nsd.INsdManager$Stub
{
    private static final java.lang.String TAG;
    private static final java.lang.String MDNS_TAG;
    private static final boolean DBG;
    private android.content.Context mContext;
    private android.content.ContentResolver mContentResolver;
    private com.android.server.NsdService$NsdStateMachine mNsdStateMachine;
    private java.util.HashMap mClients;
    private android.util.SparseArray mIdToClientInfoMap;
    private com.android.internal.util.AsyncChannel mReplyChannel;
    private int INVALID_ID;
    private int mUniqueId;
    private static final int BASE;
    private static final int CMD_TO_STRING_COUNT;
    private static java.lang.String[] sCmdToString;
    private com.android.server.NativeDaemonConnector mNativeConnector;
    private final java.util.concurrent.CountDownLatch mNativeDaemonConnected;

    private static java.lang.String cmdToString(int)
    {
        int i0, $i1, i2;
        java.lang.String[] $r0, $r1;
        java.lang.String $r2;

        i0 := @parameter0: int;

        i2 = i0 - 393216;

        if i2 < 0 goto label1;

        $r0 = <com.android.server.NsdService: java.lang.String[] sCmdToString>;

        $i1 = lengthof $r0;

        if i2 >= $i1 goto label1;

        $r1 = <com.android.server.NsdService: java.lang.String[] sCmdToString>;

        $r2 = $r1[i2];

        return $r2;

     label1:
        return null;
    }

    private java.lang.String unescape(java.lang.String)
    {
        com.android.server.NsdService r0;
        java.lang.String r1, $r4, $r9, $r13;
        java.lang.StringBuilder r2, $r3, $r6, $r7, $r8, $r10, $r11, $r12;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i15, $i16, $i17;
        char c1, $c11, $c14;

        r0 := @this: com.android.server.NsdService;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i2);

        r2 = $r3;

        i0 = 0;

     label1:
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 >= $i3 goto label5;

        c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        if c1 != 92 goto label4;

        i0 = i0 + 1;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 < $i4 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected end of escape sequence in: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NsdService", $r13);

        goto label5;

     label2:
        c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        if c1 == 46 goto label4;

        if c1 == 92 goto label4;

        $i5 = i0 + 2;

        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i5 < $i6 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected end of escape sequence in: ");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NsdService", $r9);

        goto label5;

     label3:
        $i7 = c1 - 48;

        $i8 = $i7 * 100;

        $i9 = i0 + 1;

        $c11 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i9);

        $i10 = $c11 - 48;

        $i13 = $i10 * 10;

        $i15 = $i8 + $i13;

        $i12 = i0 + 2;

        $c14 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i12);

        $i17 = $c14 - 48;

        $i16 = $i15 + $i17;

        c1 = (char) $i16;

        i0 = i0 + 2;

     label4:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        i0 = i0 + 1;

        goto label1;

     label5:
        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private void <init>(android.content.Context)
    {
        com.android.server.NsdService r0;
        android.content.Context r1;
        java.lang.Thread r2, $r12;
        java.util.HashMap $r3;
        android.util.SparseArray $r4;
        com.android.internal.util.AsyncChannel $r5;
        java.util.concurrent.CountDownLatch $r6;
        android.content.ContentResolver $r7;
        com.android.server.NativeDaemonConnector $r8, $r13;
        com.android.server.NsdService$NativeCallbackReceiver $r9;
        com.android.server.NsdService$NsdStateMachine $r10, $r11;

        r0 := @this: com.android.server.NsdService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.net.nsd.INsdManager$Stub: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.NsdService: java.util.HashMap mClients> = $r3;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.NsdService: android.util.SparseArray mIdToClientInfoMap> = $r4;

        $r5 = new com.android.internal.util.AsyncChannel;

        specialinvoke $r5.<com.android.internal.util.AsyncChannel: void <init>()>();

        r0.<com.android.server.NsdService: com.android.internal.util.AsyncChannel mReplyChannel> = $r5;

        r0.<com.android.server.NsdService: int INVALID_ID> = 0;

        r0.<com.android.server.NsdService: int mUniqueId> = 1;

        $r6 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r6.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<com.android.server.NsdService: java.util.concurrent.CountDownLatch mNativeDaemonConnected> = $r6;

        r0.<com.android.server.NsdService: android.content.Context mContext> = r1;

        $r7 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.NsdService: android.content.ContentResolver mContentResolver> = $r7;

        $r8 = new com.android.server.NativeDaemonConnector;

        $r9 = new com.android.server.NsdService$NativeCallbackReceiver;

        specialinvoke $r9.<com.android.server.NsdService$NativeCallbackReceiver: void <init>(com.android.server.NsdService)>(r0);

        specialinvoke $r8.<com.android.server.NativeDaemonConnector: void <init>(com.android.server.INativeDaemonConnectorCallbacks,java.lang.String,int,java.lang.String,int,android.os.PowerManager$WakeLock)>($r9, "mdns", 10, "mDnsConnector", 25, null);

        r0.<com.android.server.NsdService: com.android.server.NativeDaemonConnector mNativeConnector> = $r8;

        $r10 = new com.android.server.NsdService$NsdStateMachine;

        specialinvoke $r10.<com.android.server.NsdService$NsdStateMachine: void <init>(com.android.server.NsdService,java.lang.String)>(r0, "NsdService");

        r0.<com.android.server.NsdService: com.android.server.NsdService$NsdStateMachine mNsdStateMachine> = $r10;

        $r11 = r0.<com.android.server.NsdService: com.android.server.NsdService$NsdStateMachine mNsdStateMachine>;

        virtualinvoke $r11.<com.android.server.NsdService$NsdStateMachine: void start()>();

        $r12 = new java.lang.Thread;

        $r13 = r0.<com.android.server.NsdService: com.android.server.NativeDaemonConnector mNativeConnector>;

        specialinvoke $r12.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r13, "mDnsConnector");

        r2 = $r12;

        virtualinvoke r2.<java.lang.Thread: void start()>();

        return;
    }

    public static com.android.server.NsdService create(android.content.Context) throws java.lang.InterruptedException
    {
        android.content.Context r0;
        com.android.server.NsdService r1, $r2;
        java.util.concurrent.CountDownLatch $r3;

        r0 := @parameter0: android.content.Context;

        $r2 = new com.android.server.NsdService;

        specialinvoke $r2.<com.android.server.NsdService: void <init>(android.content.Context)>(r0);

        r1 = $r2;

        $r3 = r1.<com.android.server.NsdService: java.util.concurrent.CountDownLatch mNativeDaemonConnected>;

        virtualinvoke $r3.<java.util.concurrent.CountDownLatch: void await()>();

        return r1;
    }

    public android.os.Messenger getMessenger()
    {
        com.android.server.NsdService r0;
        android.content.Context $r1;
        android.os.Messenger $r2;
        com.android.server.NsdService$NsdStateMachine $r3;
        android.os.Handler $r4;

        r0 := @this: com.android.server.NsdService;

        $r1 = r0.<com.android.server.NsdService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERNET", "NsdService");

        $r2 = new android.os.Messenger;

        $r3 = r0.<com.android.server.NsdService: com.android.server.NsdService$NsdStateMachine mNsdStateMachine>;

        $r4 = virtualinvoke $r3.<com.android.server.NsdService$NsdStateMachine: android.os.Handler getHandler()>();

        specialinvoke $r2.<android.os.Messenger: void <init>(android.os.Handler)>($r4);

        return $r2;
    }

    public void setEnabled(boolean)
    {
        com.android.server.NsdService r0;
        boolean z0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        com.android.server.NsdService$NsdStateMachine $r3, $r4;
        byte $b0;

        r0 := @this: com.android.server.NsdService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.NsdService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NsdService");

        $r2 = r0.<com.android.server.NsdService: android.content.ContentResolver mContentResolver>;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r2, "nsd_on", $b0);

        if z0 == 0 goto label3;

        $r4 = r0.<com.android.server.NsdService: com.android.server.NsdService$NsdStateMachine mNsdStateMachine>;

        virtualinvoke $r4.<com.android.server.NsdService$NsdStateMachine: void sendMessage(int)>(393240);

        goto label4;

     label3:
        $r3 = r0.<com.android.server.NsdService: com.android.server.NsdService$NsdStateMachine mNsdStateMachine>;

        virtualinvoke $r3.<com.android.server.NsdService$NsdStateMachine: void sendMessage(int)>(393241);

     label4:
        return;
    }

    private void sendNsdStateChangeBroadcast(boolean)
    {
        com.android.server.NsdService r0;
        boolean z0;
        android.content.Intent r1, $r2;
        android.os.UserHandle $r5;
        android.content.Context $r6;

        r0 := @this: com.android.server.NsdService;

        z0 := @parameter0: boolean;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.net.nsd.STATE_CHANGED");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        if z0 == 0 goto label1;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("nsd_state", 2);

        goto label2;

     label1:
        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("nsd_state", 1);

     label2:
        $r6 = r0.<com.android.server.NsdService: android.content.Context mContext>;

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r6.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r5);

        return;
    }

    private boolean isNsdEnabled()
    {
        com.android.server.NsdService r0;
        boolean z0, $z1;
        android.content.ContentResolver $r1;
        int $i0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.NsdService;

        $r1 = r0.<com.android.server.NsdService: android.content.ContentResolver mContentResolver>;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r1, "nsd_on", 1);

        if $i0 != 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Network service discovery enabled ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NsdService", $r5);

        return z0;
    }

    private int getUniqueId()
    {
        com.android.server.NsdService r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.android.server.NsdService;

        $i0 = r0.<com.android.server.NsdService: int mUniqueId>;

        $i1 = $i0 + 1;

        r0.<com.android.server.NsdService: int mUniqueId> = $i1;

        $i2 = r0.<com.android.server.NsdService: int INVALID_ID>;

        if $i1 != $i2 goto label1;

        $i4 = r0.<com.android.server.NsdService: int mUniqueId>;

        $i5 = $i4 + 1;

        r0.<com.android.server.NsdService: int mUniqueId> = $i5;

        return $i5;

     label1:
        $i3 = r0.<com.android.server.NsdService: int mUniqueId>;

        return $i3;
    }

    private boolean startMDnsDaemon()
    {
        com.android.server.NsdService r0;
        com.android.server.NativeDaemonConnectorException r1, $r5;
        java.lang.Object[] $r2;
        com.android.server.NativeDaemonConnector $r3;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: com.android.server.NsdService;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NsdService", "startMDnsDaemon");

     label1:
        $r3 = r0.<com.android.server.NsdService: com.android.server.NativeDaemonConnector mNativeConnector>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "start-service";

        virtualinvoke $r3.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("mdnssd", $r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to start daemon");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NsdService", $r9);

        return 0;

     label4:
        return 1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    private boolean stopMDnsDaemon()
    {
        com.android.server.NsdService r0;
        com.android.server.NativeDaemonConnectorException r1, $r5;
        java.lang.Object[] $r2;
        com.android.server.NativeDaemonConnector $r3;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: com.android.server.NsdService;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NsdService", "stopMDnsDaemon");

     label1:
        $r3 = r0.<com.android.server.NsdService: com.android.server.NativeDaemonConnector mNativeConnector>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "stop-service";

        virtualinvoke $r3.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("mdnssd", $r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to start daemon");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NsdService", $r9);

        return 0;

     label4:
        return 1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    private boolean registerService(int, android.net.nsd.NsdServiceInfo)
    {
        com.android.server.NsdService r0;
        int i0, $i2;
        android.net.nsd.NsdServiceInfo r1;
        com.android.server.NativeDaemonConnector$Command r2, $r14;
        java.util.Map r3;
        java.util.Iterator r4;
        java.lang.String r5, $r12, $r16, $r17, $r24, $r29, $r36, $r37;
        byte[] r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r31, $r32, $r33, $r34, $r38, $r39;
        java.lang.Object[] $r13, $r26;
        java.lang.Integer $r15, $r18;
        java.util.Set $r19;
        boolean $z0;
        java.lang.Object $r20, $r21;
        com.android.server.NativeDaemonConnector $r22;
        java.util.Locale $r27;
        com.android.server.NativeDaemonConnectorException $r28, r41;
        java.io.UnsupportedEncodingException $r35, r40;

        r0 := @this: com.android.server.NsdService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.nsd.NsdServiceInfo;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("registerService: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NsdService", $r12);

     label01:
        $r14 = new com.android.server.NativeDaemonConnector$Command;

        $r13 = newarray (java.lang.Object)[5];

        $r13[0] = "register";

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r13[1] = $r15;

        $r16 = virtualinvoke r1.<android.net.nsd.NsdServiceInfo: java.lang.String getServiceName()>();

        $r13[2] = $r16;

        $r17 = virtualinvoke r1.<android.net.nsd.NsdServiceInfo: java.lang.String getServiceType()>();

        $r13[3] = $r17;

        $i2 = virtualinvoke r1.<android.net.nsd.NsdServiceInfo: int getPort()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r13[4] = $r18;

        specialinvoke $r14.<com.android.server.NativeDaemonConnector$Command: void <init>(java.lang.String,java.lang.Object[])>("mdnssd", $r13);

        r2 = $r14;

        r3 = virtualinvoke r1.<android.net.nsd.NsdServiceInfo: java.util.Map getAttributes()>();

        $r19 = interfaceinvoke r3.<java.util.Map: java.util.Set keySet()>();

        r4 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r20 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r20;

     label03:
        $r21 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (byte[]) $r21;

        $r27 = <java.util.Locale: java.util.Locale US>;

        $r26 = newarray (java.lang.Object)[2];

        $r26[0] = r5;

        if r6 == null goto label04;

        $r29 = new java.lang.String;

        specialinvoke $r29.<java.lang.String: void <init>(byte[],java.lang.String)>(r6, "UTF_8");

        goto label05;

     label04:
        $r29 = "";

     label05:
        $r26[1] = $r29;

        $r24 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r27, "%s=%s", $r26);

        virtualinvoke r2.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>($r24);

     label06:
        goto label08;

     label07:
        $r35 := @caughtexception;

        r40 = $r35;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to encode txtRecord ");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r40);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NsdService", $r37);

     label08:
        goto label02;

     label09:
        $r22 = r0.<com.android.server.NsdService: com.android.server.NativeDaemonConnector mNativeConnector>;

        virtualinvoke $r22.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(com.android.server.NativeDaemonConnector$Command)>(r2);

     label10:
        goto label12;

     label11:
        $r28 := @caughtexception;

        r41 = $r28;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to execute registerService ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41);

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NsdService", $r36);

        return 0;

     label12:
        return 1;

        catch java.io.UnsupportedEncodingException from label03 to label06 with label07;
        catch com.android.server.NativeDaemonConnectorException from label01 to label10 with label11;
    }

    private boolean unregisterService(int)
    {
        com.android.server.NsdService r0;
        int i0;
        com.android.server.NativeDaemonConnectorException r1, $r10;
        java.lang.StringBuilder $r2, $r3, $r4, $r11, $r12, $r13;
        java.lang.String $r5, $r14;
        java.lang.Object[] $r6;
        com.android.server.NativeDaemonConnector $r7;
        java.lang.Integer $r8;

        r0 := @this: com.android.server.NsdService;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unregisterService: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NsdService", $r5);

     label1:
        $r7 = r0.<com.android.server.NsdService: com.android.server.NativeDaemonConnector mNativeConnector>;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "stop-register";

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[1] = $r8;

        virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("mdnssd", $r6);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r1 = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to execute unregisterService ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NsdService", $r14);

        return 0;

     label4:
        return 1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    private boolean updateService(int, android.net.nsd.DnsSdTxtRecord)
    {
        com.android.server.NsdService r0;
        int i0, $i2;
        android.net.nsd.DnsSdTxtRecord r1;
        com.android.server.NativeDaemonConnectorException r2, $r14;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r16, $r17, $r18;
        java.lang.String $r8, $r19;
        java.lang.Object[] $r9;
        com.android.server.NativeDaemonConnector $r10;
        java.lang.Integer $r11, $r12;
        byte[] $r13;

        r0 := @this: com.android.server.NsdService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.nsd.DnsSdTxtRecord;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateService: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NsdService", $r8);

     label1:
        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $r10 = r0.<com.android.server.NsdService: com.android.server.NativeDaemonConnector mNativeConnector>;

        $r9 = newarray (java.lang.Object)[4];

        $r9[0] = "update";

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[1] = $r11;

        $i2 = virtualinvoke r1.<android.net.nsd.DnsSdTxtRecord: int size()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r9[2] = $r12;

        $r13 = virtualinvoke r1.<android.net.nsd.DnsSdTxtRecord: byte[] getRawData()>();

        $r9[3] = $r13;

        virtualinvoke $r10.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("mdnssd", $r9);

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

        r2 = $r14;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to updateServices ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NsdService", $r19);

        return 0;

     label6:
        return 1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label5;
        catch com.android.server.NativeDaemonConnectorException from label3 to label4 with label5;
    }

    private boolean discoverServices(int, java.lang.String)
    {
        com.android.server.NsdService r0;
        int i0;
        java.lang.String r1, $r8, $r16;
        com.android.server.NativeDaemonConnectorException r2, $r14;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r13, $r15, $r17;
        java.lang.Object[] $r9;
        com.android.server.NativeDaemonConnector $r10;
        java.lang.Integer $r12;

        r0 := @this: com.android.server.NsdService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("discoverServices: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NsdService", $r8);

     label1:
        $r10 = r0.<com.android.server.NsdService: com.android.server.NativeDaemonConnector mNativeConnector>;

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = "discover";

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[1] = $r12;

        $r9[2] = r1;

        virtualinvoke $r10.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("mdnssd", $r9);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        r2 = $r14;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to discoverServices ");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NsdService", $r16);

        return 0;

     label4:
        return 1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    private boolean stopServiceDiscovery(int)
    {
        com.android.server.NsdService r0;
        int i0;
        com.android.server.NativeDaemonConnectorException r1, $r10;
        java.lang.StringBuilder $r2, $r3, $r4, $r11, $r12, $r13;
        java.lang.String $r5, $r14;
        java.lang.Object[] $r6;
        com.android.server.NativeDaemonConnector $r7;
        java.lang.Integer $r8;

        r0 := @this: com.android.server.NsdService;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopServiceDiscovery: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NsdService", $r5);

     label1:
        $r7 = r0.<com.android.server.NsdService: com.android.server.NativeDaemonConnector mNativeConnector>;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "stop-discover";

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[1] = $r8;

        virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("mdnssd", $r6);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r1 = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to stopServiceDiscovery ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NsdService", $r14);

        return 0;

     label4:
        return 1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    private boolean resolveService(int, android.net.nsd.NsdServiceInfo)
    {
        com.android.server.NsdService r0;
        int i0;
        android.net.nsd.NsdServiceInfo r1;
        com.android.server.NativeDaemonConnectorException r2, $r16;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r15, $r17, $r19;
        java.lang.String $r8, $r12, $r14, $r18;
        java.lang.Object[] $r9;
        com.android.server.NativeDaemonConnector $r10;
        java.lang.Integer $r11;

        r0 := @this: com.android.server.NsdService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.nsd.NsdServiceInfo;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resolveService: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NsdService", $r8);

     label1:
        $r10 = r0.<com.android.server.NsdService: com.android.server.NativeDaemonConnector mNativeConnector>;

        $r9 = newarray (java.lang.Object)[5];

        $r9[0] = "resolve";

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[1] = $r11;

        $r12 = virtualinvoke r1.<android.net.nsd.NsdServiceInfo: java.lang.String getServiceName()>();

        $r9[2] = $r12;

        $r14 = virtualinvoke r1.<android.net.nsd.NsdServiceInfo: java.lang.String getServiceType()>();

        $r9[3] = $r14;

        $r9[4] = "local.";

        virtualinvoke $r10.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("mdnssd", $r9);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        r2 = $r16;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resolveService ");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NsdService", $r18);

        return 0;

     label4:
        return 1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    private boolean stopResolveService(int)
    {
        com.android.server.NsdService r0;
        int i0;
        com.android.server.NativeDaemonConnectorException r1, $r10;
        java.lang.StringBuilder $r2, $r3, $r4, $r11, $r12, $r13;
        java.lang.String $r5, $r14;
        java.lang.Object[] $r6;
        com.android.server.NativeDaemonConnector $r7;
        java.lang.Integer $r8;

        r0 := @this: com.android.server.NsdService;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopResolveService: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NsdService", $r5);

     label1:
        $r7 = r0.<com.android.server.NsdService: com.android.server.NativeDaemonConnector mNativeConnector>;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "stop-resolve";

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[1] = $r8;

        virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("mdnssd", $r6);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r1 = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to stop resolve ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NsdService", $r14);

        return 0;

     label4:
        return 1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    private boolean getAddrInfo(int, java.lang.String)
    {
        com.android.server.NsdService r0;
        int i0;
        java.lang.String r1, $r6, $r14;
        com.android.server.NativeDaemonConnectorException r2, $r12;
        java.lang.StringBuilder $r3, $r4, $r5, $r11, $r13, $r15;
        java.lang.Object[] $r7;
        com.android.server.NativeDaemonConnector $r8;
        java.lang.Integer $r9;

        r0 := @this: com.android.server.NsdService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAdddrInfo: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NsdService", $r6);

     label1:
        $r8 = r0.<com.android.server.NsdService: com.android.server.NativeDaemonConnector mNativeConnector>;

        $r7 = newarray (java.lang.Object)[3];

        $r7[0] = "getaddrinfo";

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[1] = $r9;

        $r7[2] = r1;

        virtualinvoke $r8.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("mdnssd", $r7);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        r2 = $r12;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to getAddrInfo ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NsdService", $r14);

        return 0;

     label4:
        return 1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    private boolean stopGetAddrInfo(int)
    {
        com.android.server.NsdService r0;
        int i0;
        com.android.server.NativeDaemonConnectorException r1, $r10;
        java.lang.StringBuilder $r2, $r3, $r4, $r11, $r12, $r13;
        java.lang.String $r5, $r14;
        java.lang.Object[] $r6;
        com.android.server.NativeDaemonConnector $r7;
        java.lang.Integer $r8;

        r0 := @this: com.android.server.NsdService;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopGetAdddrInfo: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NsdService", $r5);

     label1:
        $r7 = r0.<com.android.server.NsdService: com.android.server.NativeDaemonConnector mNativeConnector>;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "stop-getaddrinfo";

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[1] = $r8;

        virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("mdnssd", $r6);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r1 = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to stopGetAddrInfo ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NsdService", $r14);

        return 0;

     label4:
        return 1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.NsdService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.util.Iterator r4;
        com.android.server.NsdService$ClientInfo r5;
        android.content.Context $r6;
        int $i0, $i1, $i2;
        java.util.HashMap $r7;
        java.util.Collection $r8;
        boolean $z0;
        com.android.server.NsdService$NsdStateMachine $r9;
        java.lang.Object $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r16;
        java.lang.String $r15;

        r0 := @this: com.android.server.NsdService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r6 = r0.<com.android.server.NsdService: android.content.Context mContext>;

        $i0 = virtualinvoke $r6.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump ServiceDiscoverService from from pid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        return;

     label1:
        $r7 = r0.<com.android.server.NsdService: java.util.HashMap mClients>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Collection values()>();

        r4 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.NsdService$ClientInfo) $r10;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Client Info");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>(r5);

        goto label2;

     label3:
        $r9 = r0.<com.android.server.NsdService: com.android.server.NsdService$NsdStateMachine mNsdStateMachine>;

        virtualinvoke $r9.<com.android.server.NsdService$NsdStateMachine: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        return;
    }

    private android.os.Message obtainMessage(android.os.Message)
    {
        com.android.server.NsdService r0;
        android.os.Message r1, r2;
        int $i0;

        r0 := @this: com.android.server.NsdService;

        r1 := @parameter0: android.os.Message;

        r2 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        $i0 = r1.<android.os.Message: int arg2>;

        r2.<android.os.Message: int arg2> = $i0;

        return r2;
    }

    private void replyToMessage(android.os.Message, int)
    {
        com.android.server.NsdService r0;
        android.os.Message r1, r2;
        int i0;
        android.os.Messenger $r3;
        com.android.internal.util.AsyncChannel $r4;

        r0 := @this: com.android.server.NsdService;

        r1 := @parameter0: android.os.Message;

        i0 := @parameter1: int;

        $r3 = r1.<android.os.Message: android.os.Messenger replyTo>;

        if $r3 != null goto label1;

        return;

     label1:
        r2 = specialinvoke r0.<com.android.server.NsdService: android.os.Message obtainMessage(android.os.Message)>(r1);

        r2.<android.os.Message: int what> = i0;

        $r4 = r0.<com.android.server.NsdService: com.android.internal.util.AsyncChannel mReplyChannel>;

        virtualinvoke $r4.<com.android.internal.util.AsyncChannel: void replyToMessage(android.os.Message,android.os.Message)>(r1, r2);

        return;
    }

    private void replyToMessage(android.os.Message, int, int)
    {
        com.android.server.NsdService r0;
        android.os.Message r1, r2;
        int i0, i1;
        android.os.Messenger $r3;
        com.android.internal.util.AsyncChannel $r4;

        r0 := @this: com.android.server.NsdService;

        r1 := @parameter0: android.os.Message;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r1.<android.os.Message: android.os.Messenger replyTo>;

        if $r3 != null goto label1;

        return;

     label1:
        r2 = specialinvoke r0.<com.android.server.NsdService: android.os.Message obtainMessage(android.os.Message)>(r1);

        r2.<android.os.Message: int what> = i0;

        r2.<android.os.Message: int arg1> = i1;

        $r4 = r0.<com.android.server.NsdService: com.android.internal.util.AsyncChannel mReplyChannel>;

        virtualinvoke $r4.<com.android.internal.util.AsyncChannel: void replyToMessage(android.os.Message,android.os.Message)>(r1, r2);

        return;
    }

    private void replyToMessage(android.os.Message, int, java.lang.Object)
    {
        com.android.server.NsdService r0;
        android.os.Message r1, r3;
        int i0;
        java.lang.Object r2;
        android.os.Messenger $r4;
        com.android.internal.util.AsyncChannel $r5;

        r0 := @this: com.android.server.NsdService;

        r1 := @parameter0: android.os.Message;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r4 = r1.<android.os.Message: android.os.Messenger replyTo>;

        if $r4 != null goto label1;

        return;

     label1:
        r3 = specialinvoke r0.<com.android.server.NsdService: android.os.Message obtainMessage(android.os.Message)>(r1);

        r3.<android.os.Message: int what> = i0;

        r3.<android.os.Message: java.lang.Object obj> = r2;

        $r5 = r0.<com.android.server.NsdService: com.android.internal.util.AsyncChannel mReplyChannel>;

        virtualinvoke $r5.<com.android.internal.util.AsyncChannel: void replyToMessage(android.os.Message,android.os.Message)>(r1, r3);

        return;
    }

    static java.lang.String access$000(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.android.server.NsdService: java.lang.String cmdToString(int)>(i0);

        return $r0;
    }

    static boolean access$100(com.android.server.NsdService)
    {
        com.android.server.NsdService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.NsdService;

        $z0 = specialinvoke r0.<com.android.server.NsdService: boolean isNsdEnabled()>();

        return $z0;
    }

    static com.android.server.NsdService$NsdStateMachine access$200(com.android.server.NsdService)
    {
        com.android.server.NsdService r0;
        com.android.server.NsdService$NsdStateMachine $r1;

        r0 := @parameter0: com.android.server.NsdService;

        $r1 = r0.<com.android.server.NsdService: com.android.server.NsdService$NsdStateMachine mNsdStateMachine>;

        return $r1;
    }

    static android.content.Context access$300(com.android.server.NsdService)
    {
        com.android.server.NsdService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.NsdService;

        $r1 = r0.<com.android.server.NsdService: android.content.Context mContext>;

        return $r1;
    }

    static java.util.HashMap access$500(com.android.server.NsdService)
    {
        com.android.server.NsdService r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.NsdService;

        $r1 = r0.<com.android.server.NsdService: java.util.HashMap mClients>;

        return $r1;
    }

    static boolean access$700(com.android.server.NsdService)
    {
        com.android.server.NsdService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.NsdService;

        $z0 = specialinvoke r0.<com.android.server.NsdService: boolean stopMDnsDaemon()>();

        return $z0;
    }

    static void access$800(com.android.server.NsdService, android.os.Message, int, int)
    {
        com.android.server.NsdService r0;
        android.os.Message r1;
        int i0, i1;

        r0 := @parameter0: com.android.server.NsdService;

        r1 := @parameter1: android.os.Message;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.android.server.NsdService: void replyToMessage(android.os.Message,int,int)>(r1, i0, i1);

        return;
    }

    static void access$900(com.android.server.NsdService, boolean)
    {
        com.android.server.NsdService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.NsdService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.NsdService: void sendNsdStateChangeBroadcast(boolean)>(z0);

        return;
    }

    static boolean access$1200(com.android.server.NsdService)
    {
        com.android.server.NsdService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.NsdService;

        $z0 = specialinvoke r0.<com.android.server.NsdService: boolean startMDnsDaemon()>();

        return $z0;
    }

    static android.util.SparseArray access$1500(com.android.server.NsdService)
    {
        com.android.server.NsdService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.NsdService;

        $r1 = r0.<com.android.server.NsdService: android.util.SparseArray mIdToClientInfoMap>;

        return $r1;
    }

    static int access$1800(com.android.server.NsdService)
    {
        com.android.server.NsdService r0;
        int $i0;

        r0 := @parameter0: com.android.server.NsdService;

        $i0 = specialinvoke r0.<com.android.server.NsdService: int getUniqueId()>();

        return $i0;
    }

    static boolean access$1900(com.android.server.NsdService, int, java.lang.String)
    {
        com.android.server.NsdService r0;
        int i0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.NsdService;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.NsdService: boolean discoverServices(int,java.lang.String)>(i0, r1);

        return $z0;
    }

    static void access$2000(com.android.server.NsdService, android.os.Message, int, java.lang.Object)
    {
        com.android.server.NsdService r0;
        android.os.Message r1;
        int i0;
        java.lang.Object r2;

        r0 := @parameter0: com.android.server.NsdService;

        r1 := @parameter1: android.os.Message;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.Object;

        specialinvoke r0.<com.android.server.NsdService: void replyToMessage(android.os.Message,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    static boolean access$2100(com.android.server.NsdService, int)
    {
        com.android.server.NsdService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.NsdService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.NsdService: boolean stopServiceDiscovery(int)>(i0);

        return $z0;
    }

    static void access$2200(com.android.server.NsdService, android.os.Message, int)
    {
        com.android.server.NsdService r0;
        android.os.Message r1;
        int i0;

        r0 := @parameter0: com.android.server.NsdService;

        r1 := @parameter1: android.os.Message;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.NsdService: void replyToMessage(android.os.Message,int)>(r1, i0);

        return;
    }

    static boolean access$2300(com.android.server.NsdService, int, android.net.nsd.NsdServiceInfo)
    {
        com.android.server.NsdService r0;
        int i0;
        android.net.nsd.NsdServiceInfo r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.NsdService;

        i0 := @parameter1: int;

        r1 := @parameter2: android.net.nsd.NsdServiceInfo;

        $z0 = specialinvoke r0.<com.android.server.NsdService: boolean registerService(int,android.net.nsd.NsdServiceInfo)>(i0, r1);

        return $z0;
    }

    static boolean access$2400(com.android.server.NsdService, int)
    {
        com.android.server.NsdService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.NsdService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.NsdService: boolean unregisterService(int)>(i0);

        return $z0;
    }

    static boolean access$2600(com.android.server.NsdService, int, android.net.nsd.NsdServiceInfo)
    {
        com.android.server.NsdService r0;
        int i0;
        android.net.nsd.NsdServiceInfo r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.NsdService;

        i0 := @parameter1: int;

        r1 := @parameter2: android.net.nsd.NsdServiceInfo;

        $z0 = specialinvoke r0.<com.android.server.NsdService: boolean resolveService(int,android.net.nsd.NsdServiceInfo)>(i0, r1);

        return $z0;
    }

    static java.lang.String access$2900(com.android.server.NsdService, java.lang.String)
    {
        com.android.server.NsdService r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: com.android.server.NsdService;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.NsdService: java.lang.String unescape(java.lang.String)>(r1);

        return $r2;
    }

    static boolean access$3000(com.android.server.NsdService, int)
    {
        com.android.server.NsdService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.NsdService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.NsdService: boolean stopResolveService(int)>(i0);

        return $z0;
    }

    static boolean access$3100(com.android.server.NsdService, int, java.lang.String)
    {
        com.android.server.NsdService r0;
        int i0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.NsdService;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.NsdService: boolean getAddrInfo(int,java.lang.String)>(i0, r1);

        return $z0;
    }

    static boolean access$3200(com.android.server.NsdService, int)
    {
        com.android.server.NsdService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.NsdService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.NsdService: boolean stopGetAddrInfo(int)>(i0);

        return $z0;
    }

    static java.util.concurrent.CountDownLatch access$3300(com.android.server.NsdService)
    {
        com.android.server.NsdService r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @parameter0: com.android.server.NsdService;

        $r1 = r0.<com.android.server.NsdService: java.util.concurrent.CountDownLatch mNativeDaemonConnected>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1, $r2, $r3, $r4, $r5;

        <com.android.server.NsdService: int CMD_TO_STRING_COUNT> = 19;

        <com.android.server.NsdService: int BASE> = 393216;

        <com.android.server.NsdService: boolean DBG> = 1;

        <com.android.server.NsdService: java.lang.String MDNS_TAG> = "mDnsConnector";

        <com.android.server.NsdService: java.lang.String TAG> = "NsdService";

        $r0 = newarray (java.lang.String)[19];

        <com.android.server.NsdService: java.lang.String[] sCmdToString> = $r0;

        $r1 = <com.android.server.NsdService: java.lang.String[] sCmdToString>;

        $r1[1] = "DISCOVER";

        $r2 = <com.android.server.NsdService: java.lang.String[] sCmdToString>;

        $r2[6] = "STOP-DISCOVER";

        $r3 = <com.android.server.NsdService: java.lang.String[] sCmdToString>;

        $r3[9] = "REGISTER";

        $r4 = <com.android.server.NsdService: java.lang.String[] sCmdToString>;

        $r4[12] = "UNREGISTER";

        $r5 = <com.android.server.NsdService: java.lang.String[] sCmdToString>;

        $r5[18] = "RESOLVE";

        return;
    }
}
