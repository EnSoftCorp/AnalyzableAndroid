final class com.android.server.hdmi.HdmiCecController extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final byte[] EMPTY_BODY;
    private static final int NUM_LOGICAL_ADDRESS;
    private final com.android.internal.util.Predicate mRemoteDeviceAddressPredicate;
    private final com.android.internal.util.Predicate mSystemAudioAddressPredicate;
    private android.os.Handler mIoHandler;
    private android.os.Handler mControlHandler;
    private volatile long mNativePtr;
    private final com.android.server.hdmi.HdmiControlService mService;
    private final android.util.SparseArray mLocalDevices;

    private void <init>(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiCecController r0;
        com.android.server.hdmi.HdmiControlService r1;
        com.android.server.hdmi.HdmiCecController$1 $r2;
        com.android.server.hdmi.HdmiCecController$2 $r3;
        android.util.SparseArray $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        r1 := @parameter0: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.android.server.hdmi.HdmiCecController$1;

        specialinvoke $r2.<com.android.server.hdmi.HdmiCecController$1: void <init>(com.android.server.hdmi.HdmiCecController)>(r0);

        r0.<com.android.server.hdmi.HdmiCecController: com.android.internal.util.Predicate mRemoteDeviceAddressPredicate> = $r2;

        $r3 = new com.android.server.hdmi.HdmiCecController$2;

        specialinvoke $r3.<com.android.server.hdmi.HdmiCecController$2: void <init>(com.android.server.hdmi.HdmiCecController)>(r0);

        r0.<com.android.server.hdmi.HdmiCecController: com.android.internal.util.Predicate mSystemAudioAddressPredicate> = $r3;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.hdmi.HdmiCecController: android.util.SparseArray mLocalDevices> = $r4;

        r0.<com.android.server.hdmi.HdmiCecController: com.android.server.hdmi.HdmiControlService mService> = r1;

        return;
    }

    static com.android.server.hdmi.HdmiCecController create(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecController r1, $r2;
        long l0;
        android.os.Looper $r3;
        android.os.MessageQueue $r4;
        byte $b1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r2 = new com.android.server.hdmi.HdmiCecController;

        specialinvoke $r2.<com.android.server.hdmi.HdmiCecController: void <init>(com.android.server.hdmi.HdmiControlService)>(r0);

        r1 = $r2;

        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.os.Looper getServiceLooper()>();

        $r4 = virtualinvoke $r3.<android.os.Looper: android.os.MessageQueue getQueue()>();

        l0 = staticinvoke <com.android.server.hdmi.HdmiCecController: long nativeInit(com.android.server.hdmi.HdmiCecController,android.os.MessageQueue)>(r1, $r4);

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        return null;

     label1:
        specialinvoke r1.<com.android.server.hdmi.HdmiCecController: void init(long)>(l0);

        return r1;
    }

    private void init(long)
    {
        com.android.server.hdmi.HdmiCecController r0;
        long l0;
        android.os.Handler $r1, $r4;
        com.android.server.hdmi.HdmiControlService $r2, $r5;
        android.os.Looper $r3, $r6;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        l0 := @parameter0: long;

        $r1 = new android.os.Handler;

        $r2 = r0.<com.android.server.hdmi.HdmiCecController: com.android.server.hdmi.HdmiControlService mService>;

        $r3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: android.os.Looper getServiceLooper()>();

        specialinvoke $r1.<android.os.Handler: void <init>(android.os.Looper)>($r3);

        r0.<com.android.server.hdmi.HdmiCecController: android.os.Handler mIoHandler> = $r1;

        $r4 = new android.os.Handler;

        $r5 = r0.<com.android.server.hdmi.HdmiCecController: com.android.server.hdmi.HdmiControlService mService>;

        $r6 = virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: android.os.Looper getServiceLooper()>();

        specialinvoke $r4.<android.os.Handler: void <init>(android.os.Looper)>($r6);

        r0.<com.android.server.hdmi.HdmiCecController: android.os.Handler mControlHandler> = $r4;

        r0.<com.android.server.hdmi.HdmiCecController: long mNativePtr> = l0;

        return;
    }

    void addLocalDevice(int, com.android.server.hdmi.HdmiCecLocalDevice)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0;
        com.android.server.hdmi.HdmiCecLocalDevice r1;
        android.util.SparseArray $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.hdmi.HdmiCecLocalDevice;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecController: android.util.SparseArray mLocalDevices>;

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1);

        return;
    }

    void allocateLogicalAddress(int, int, com.android.server.hdmi.HdmiCecController$AllocateAddressCallback)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0, i1;
        com.android.server.hdmi.HdmiCecController$AllocateAddressCallback r1;
        com.android.server.hdmi.HdmiCecController$3 $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.android.server.hdmi.HdmiCecController$AllocateAddressCallback;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $r2 = new com.android.server.hdmi.HdmiCecController$3;

        specialinvoke $r2.<com.android.server.hdmi.HdmiCecController$3: void <init>(com.android.server.hdmi.HdmiCecController,int,int,com.android.server.hdmi.HdmiCecController$AllocateAddressCallback)>(r0, i0, i1, r1);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void runOnIoThread(java.lang.Runnable)>($r2);

        return;
    }

    private void handleAllocateLogicalAddress(int, int, com.android.server.hdmi.HdmiCecController$AllocateAddressCallback)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, i12, i13;
        com.android.server.hdmi.HdmiCecController$AllocateAddressCallback r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3, $r4, $r5;
        com.android.server.hdmi.HdmiCecController$4 $r6;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.android.server.hdmi.HdmiCecController$AllocateAddressCallback;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnIoThread()>();

        i2 = i1;

        if i1 != 15 goto label03;

        i3 = 0;

     label01:
        if i3 >= 16 goto label03;

        $i11 = staticinvoke <com.android.server.hdmi.HdmiUtils: int getTypeFromAddress(int)>(i3);

        if i0 != $i11 goto label02;

        i2 = i3;

        goto label03;

     label02:
        i3 = i3 + 1;

        goto label01;

     label03:
        i12 = 15;

        i4 = 0;

     label04:
        if i4 >= 16 goto label09;

        $i8 = i2 + i4;

        i5 = $i8 % 16;

        if i5 == 15 goto label08;

        $i10 = staticinvoke <com.android.server.hdmi.HdmiUtils: int getTypeFromAddress(int)>(i5);

        if i0 != $i10 goto label08;

        i6 = 0;

        i7 = 0;

     label05:
        if i7 >= 3 goto label07;

        $z0 = specialinvoke r0.<com.android.server.hdmi.HdmiCecController: boolean sendPollMessage(int,int,int)>(i5, i5, 1);

        if $z0 != 0 goto label06;

        i6 = i6 + 1;

     label06:
        i7 = i7 + 1;

        goto label05;

     label07:
        $i9 = i6 * 2;

        if $i9 <= 3 goto label08;

        i12 = i5;

        goto label09;

     label08:
        i4 = i4 + 1;

        goto label04;

     label09:
        i13 = i12;

        $r2 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[1] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i13);

        $r2[2] = $r5;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("New logical address for device [%d]: [preferred:%d, assigned:%d]", $r2);

        if r1 == null goto label10;

        $r6 = new com.android.server.hdmi.HdmiCecController$4;

        specialinvoke $r6.<com.android.server.hdmi.HdmiCecController$4: void <init>(com.android.server.hdmi.HdmiCecController,com.android.server.hdmi.HdmiCecController$AllocateAddressCallback,int,int)>(r0, r1, i0, i13);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void runOnServiceThread(java.lang.Runnable)>($r6);

     label10:
        return;
    }

    private static byte[] buildBody(int, byte[])
    {
        int i0, $i1, $i2, $i4;
        byte[] r0, r1;
        byte $b3;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        $i1 = lengthof r0;

        $i2 = $i1 + 1;

        r1 = newarray (byte)[$i2];

        $b3 = (byte) i0;

        r1[0] = $b3;

        $i4 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r0, 0, r1, 1, $i4);

        return r1;
    }

    android.hardware.hdmi.HdmiPortInfo[] getPortInfos()
    {
        com.android.server.hdmi.HdmiCecController r0;
        long $l0;
        android.hardware.hdmi.HdmiPortInfo[] $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        $l0 = r0.<com.android.server.hdmi.HdmiCecController: long mNativePtr>;

        $r1 = staticinvoke <com.android.server.hdmi.HdmiCecController: android.hardware.hdmi.HdmiPortInfo[] nativeGetPortInfos(long)>($l0);

        return $r1;
    }

    com.android.server.hdmi.HdmiCecLocalDevice getLocalDevice(int)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        com.android.server.hdmi.HdmiCecLocalDevice $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.hdmi.HdmiCecController: android.util.SparseArray mLocalDevices>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r3 = (com.android.server.hdmi.HdmiCecLocalDevice) $r2;

        return $r3;
    }

    int addLogicalAddress(int)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0, $i2;
        boolean $z0;
        long $l1;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $z0 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean isValidAddress(int)>(i0);

        if $z0 == 0 goto label1;

        $l1 = r0.<com.android.server.hdmi.HdmiCecController: long mNativePtr>;

        $i2 = staticinvoke <com.android.server.hdmi.HdmiCecController: int nativeAddLogicalAddress(long,int)>($l1, i0);

        return $i2;

     label1:
        return -1;
    }

    void clearLogicalAddress()
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0, $i1;
        android.util.SparseArray $r1, $r2;
        long $l2;
        java.lang.Object $r3;
        com.android.server.hdmi.HdmiCecLocalDevice $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        i0 = 0;

     label1:
        $r1 = r0.<com.android.server.hdmi.HdmiCecController: android.util.SparseArray mLocalDevices>;

        $i1 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        if i0 >= $i1 goto label2;

        $r2 = r0.<com.android.server.hdmi.HdmiCecController: android.util.SparseArray mLocalDevices>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        $r4 = (com.android.server.hdmi.HdmiCecLocalDevice) $r3;

        virtualinvoke $r4.<com.android.server.hdmi.HdmiCecLocalDevice: void clearAddress()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        $l2 = r0.<com.android.server.hdmi.HdmiCecController: long mNativePtr>;

        staticinvoke <com.android.server.hdmi.HdmiCecController: void nativeClearLogicalAddress(long)>($l2);

        return;
    }

    void clearLocalDevices()
    {
        com.android.server.hdmi.HdmiCecController r0;
        android.util.SparseArray $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecController: android.util.SparseArray mLocalDevices>;

        virtualinvoke $r1.<android.util.SparseArray: void clear()>();

        return;
    }

    int getPhysicalAddress()
    {
        com.android.server.hdmi.HdmiCecController r0;
        long $l0;
        int $i1;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $l0 = r0.<com.android.server.hdmi.HdmiCecController: long mNativePtr>;

        $i1 = staticinvoke <com.android.server.hdmi.HdmiCecController: int nativeGetPhysicalAddress(long)>($l0);

        return $i1;
    }

    int getVersion()
    {
        com.android.server.hdmi.HdmiCecController r0;
        long $l0;
        int $i1;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $l0 = r0.<com.android.server.hdmi.HdmiCecController: long mNativePtr>;

        $i1 = staticinvoke <com.android.server.hdmi.HdmiCecController: int nativeGetVersion(long)>($l0);

        return $i1;
    }

    int getVendorId()
    {
        com.android.server.hdmi.HdmiCecController r0;
        long $l0;
        int $i1;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $l0 = r0.<com.android.server.hdmi.HdmiCecController: long mNativePtr>;

        $i1 = staticinvoke <com.android.server.hdmi.HdmiCecController: int nativeGetVendorId(long)>($l0);

        return $i1;
    }

    void setOption(int, int)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0, i1;
        long $l2;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $l2 = r0.<com.android.server.hdmi.HdmiCecController: long mNativePtr>;

        staticinvoke <com.android.server.hdmi.HdmiCecController: void nativeSetOption(long,int,int)>($l2, i0, i1);

        return;
    }

    void setAudioReturnChannel(boolean)
    {
        com.android.server.hdmi.HdmiCecController r0;
        boolean z0;
        long $l0;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $l0 = r0.<com.android.server.hdmi.HdmiCecController: long mNativePtr>;

        staticinvoke <com.android.server.hdmi.HdmiCecController: void nativeSetAudioReturnChannel(long,boolean)>($l0, z0);

        return;
    }

    boolean isConnected(int)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $l1 = r0.<com.android.server.hdmi.HdmiCecController: long mNativePtr>;

        $z0 = staticinvoke <com.android.server.hdmi.HdmiCecController: boolean nativeIsConnected(long,int)>($l1, i0);

        return $z0;
    }

    void pollDevices(com.android.server.hdmi.HdmiControlService$DevicePollingCallback, int, int, int)
    {
        com.android.server.hdmi.HdmiCecController r0;
        com.android.server.hdmi.HdmiControlService$DevicePollingCallback r1;
        int i0, i1, i2;
        java.util.List r2;
        java.util.ArrayList r3, $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        r1 := @parameter0: com.android.server.hdmi.HdmiControlService$DevicePollingCallback;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        r2 = specialinvoke r0.<com.android.server.hdmi.HdmiCecController: java.util.List pickPollCandidates(int)>(i1);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r3 = $r4;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void runDevicePolling(int,java.util.List,int,com.android.server.hdmi.HdmiControlService$DevicePollingCallback,java.util.List)>(i0, r2, i2, r1, r3);

        return;
    }

    java.util.List getLocalDeviceList()
    {
        com.android.server.hdmi.HdmiCecController r0;
        android.util.SparseArray $r1;
        java.util.List $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecController: android.util.SparseArray mLocalDevices>;

        $r2 = staticinvoke <com.android.server.hdmi.HdmiUtils: java.util.List sparseArrayToList(android.util.SparseArray)>($r1);

        return $r2;
    }

    private java.util.List pickPollCandidates(int)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0, i1, i2, i3, i4;
        java.util.LinkedList r1, $r2;
        java.lang.Integer $r3, $r4, $r5, $r6;
        boolean $z0, $z1;
        com.android.internal.util.Predicate r7;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter0: int;

        i1 = i0 & 3;

        lookupswitch(i1)
        {
            case 1: goto label02;
            case 2: goto label01;
            default: goto label02;
        };

     label01:
        r7 = r0.<com.android.server.hdmi.HdmiCecController: com.android.internal.util.Predicate mSystemAudioAddressPredicate>;

        goto label03;

     label02:
        r7 = r0.<com.android.server.hdmi.HdmiCecController: com.android.internal.util.Predicate mRemoteDeviceAddressPredicate>;

     label03:
        i2 = i0 & 196608;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r1 = $r2;

        lookupswitch(i2)
        {
            case 65536: goto label04;
            case 131072: goto label08;
            default: goto label08;
        };

     label04:
        i3 = 0;

     label05:
        if i3 > 14 goto label07;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $z0 = interfaceinvoke r7.<com.android.internal.util.Predicate: boolean apply(java.lang.Object)>($r3);

        if $z0 == 0 goto label06;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        virtualinvoke r1.<java.util.LinkedList: boolean add(java.lang.Object)>($r4);

     label06:
        i3 = i3 + 1;

        goto label05;

     label07:
        goto label11;

     label08:
        i4 = 14;

     label09:
        if i4 < 0 goto label11;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $z1 = interfaceinvoke r7.<com.android.internal.util.Predicate: boolean apply(java.lang.Object)>($r5);

        if $z1 == 0 goto label10;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        virtualinvoke r1.<java.util.LinkedList: boolean add(java.lang.Object)>($r6);

     label10:
        i4 = i4 + -1;

        goto label09;

     label11:
        return r1;
    }

    private boolean isAllocatedLocalDeviceAddress(int)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0, i1, $i2;
        android.util.SparseArray $r1, $r2;
        java.lang.Object $r3;
        com.android.server.hdmi.HdmiCecLocalDevice $r4;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        i1 = 0;

     label1:
        $r1 = r0.<com.android.server.hdmi.HdmiCecController: android.util.SparseArray mLocalDevices>;

        $i2 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        if i1 >= $i2 goto label3;

        $r2 = r0.<com.android.server.hdmi.HdmiCecController: android.util.SparseArray mLocalDevices>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r4 = (com.android.server.hdmi.HdmiCecLocalDevice) $r3;

        $z0 = virtualinvoke $r4.<com.android.server.hdmi.HdmiCecLocalDevice: boolean isAddressOf(int)>(i0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void runDevicePolling(int, java.util.List, int, com.android.server.hdmi.HdmiControlService$DevicePollingCallback, java.util.List)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0, i1;
        java.util.List r1, r3;
        com.android.server.hdmi.HdmiControlService$DevicePollingCallback r2;
        java.lang.Integer r4;
        boolean $z0;
        java.lang.Object $r5;
        com.android.server.hdmi.HdmiCecController$5 $r6;
        java.lang.Object[] $r7;
        java.lang.String $r8;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        i1 := @parameter2: int;

        r2 := @parameter3: com.android.server.hdmi.HdmiControlService$DevicePollingCallback;

        r3 := @parameter4: java.util.List;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        if r2 == null goto label1;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        $r7[0] = $r8;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("[P]:AllocatedAddress=%s", $r7);

        interfaceinvoke r2.<com.android.server.hdmi.HdmiControlService$DevicePollingCallback: void onPollingFinished(java.util.List)>(r3);

     label1:
        return;

     label2:
        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(0);

        r4 = (java.lang.Integer) $r5;

        $r6 = new com.android.server.hdmi.HdmiCecController$5;

        specialinvoke $r6.<com.android.server.hdmi.HdmiCecController$5: void <init>(com.android.server.hdmi.HdmiCecController,int,java.lang.Integer,int,java.util.List,java.util.List,com.android.server.hdmi.HdmiControlService$DevicePollingCallback)>(r0, i0, r4, i1, r3, r1, r2);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void runOnIoThread(java.lang.Runnable)>($r6);

        return;
    }

    private boolean sendPollMessage(int, int, int)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0, i1, i2, i3, $i5;
        byte[] $r1;
        long $l4;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnIoThread()>();

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        $l4 = r0.<com.android.server.hdmi.HdmiCecController: long mNativePtr>;

        $r1 = <com.android.server.hdmi.HdmiCecController: byte[] EMPTY_BODY>;

        $i5 = staticinvoke <com.android.server.hdmi.HdmiCecController: int nativeSendCecCommand(long,int,int,byte[])>($l4, i0, i1, $r1);

        if $i5 != 0 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void assertRunOnIoThread()
    {
        com.android.server.hdmi.HdmiCecController r0;
        android.os.Looper $r1, $r3;
        android.os.Handler $r2;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecController: android.os.Handler mIoHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Looper getLooper()>();

        if $r1 == $r3 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should run on io thread.");

        throw $r4;

     label1:
        return;
    }

    private void assertRunOnServiceThread()
    {
        com.android.server.hdmi.HdmiCecController r0;
        android.os.Looper $r1, $r3;
        android.os.Handler $r2;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecController: android.os.Handler mControlHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Looper getLooper()>();

        if $r1 == $r3 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should run on service thread.");

        throw $r4;

     label1:
        return;
    }

    private void runOnIoThread(java.lang.Runnable)
    {
        com.android.server.hdmi.HdmiCecController r0;
        java.lang.Runnable r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<com.android.server.hdmi.HdmiCecController: android.os.Handler mIoHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>(r1);

        return;
    }

    private void runOnServiceThread(java.lang.Runnable)
    {
        com.android.server.hdmi.HdmiCecController r0;
        java.lang.Runnable r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<com.android.server.hdmi.HdmiCecController: android.os.Handler mControlHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>(r1);

        return;
    }

    private boolean isAcceptableAddress(int)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter0: int;

        if i0 != 15 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.hdmi.HdmiCecController: boolean isAllocatedLocalDeviceAddress(int)>(i0);

        return $z0;
    }

    private void onReceiveCommand(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecController r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int $i0;
        boolean $z0, $z1;
        com.android.server.hdmi.HdmiControlService $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getDestination()>();

        $z0 = specialinvoke r0.<com.android.server.hdmi.HdmiCecController: boolean isAcceptableAddress(int)>($i0);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.hdmi.HdmiCecController: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean handleCecCommand(com.android.server.hdmi.HdmiCecMessage)>(r1);

        if $z1 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecController: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 0);

        return;
    }

    void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage, int)
    {
        com.android.server.hdmi.HdmiCecController r0;
        com.android.server.hdmi.HdmiCecMessage r1, $r2;
        int i0, i1, i2, i3;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getDestination()>();

        i2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        if i1 == 15 goto label1;

        if i2 != 15 goto label2;

     label1:
        return;

     label2:
        i3 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getOpcode()>();

        if i3 != 0 goto label3;

        return;

     label3:
        $r2 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildFeatureAbortCommand(int,int,int,int)>(i1, i2, i3, i0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecController: void sendCommand(com.android.server.hdmi.HdmiCecMessage)>($r2);

        return;
    }

    void sendCommand(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecController r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecController: void sendCommand(com.android.server.hdmi.HdmiCecMessage,com.android.server.hdmi.HdmiControlService$SendMessageCallback)>(r1, null);

        return;
    }

    void sendCommand(com.android.server.hdmi.HdmiCecMessage, com.android.server.hdmi.HdmiControlService$SendMessageCallback)
    {
        com.android.server.hdmi.HdmiCecController r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService$SendMessageCallback r2;
        com.android.server.hdmi.HdmiCecController$6 $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        r2 := @parameter1: com.android.server.hdmi.HdmiControlService$SendMessageCallback;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $r3 = new com.android.server.hdmi.HdmiCecController$6;

        specialinvoke $r3.<com.android.server.hdmi.HdmiCecController$6: void <init>(com.android.server.hdmi.HdmiCecController,com.android.server.hdmi.HdmiCecMessage,com.android.server.hdmi.HdmiControlService$SendMessageCallback)>(r0, r1, r2);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void runOnIoThread(java.lang.Runnable)>($r3);

        return;
    }

    private void handleIncomingCecCommand(int, int, byte[])
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0, i1;
        byte[] r1;
        com.android.server.hdmi.HdmiCecMessage r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        java.lang.Object[] $r7;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        r2 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage of(int,int,byte[])>(i0, i1, r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[R]:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>($r6, $r7);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void onReceiveCommand(com.android.server.hdmi.HdmiCecMessage)>(r2);

        return;
    }

    private void handleHotplug(int, boolean)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0;
        boolean z0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        java.lang.Boolean $r3;
        com.android.server.hdmi.HdmiControlService $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void assertRunOnServiceThread()>();

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r1[1] = $r3;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Hotplug event:[port:%d, connected:%b]", $r1);

        $r4 = r0.<com.android.server.hdmi.HdmiCecController: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: void onHotplug(int,boolean)>(i0, z0);

        return;
    }

    void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.hdmi.HdmiCecController r0;
        com.android.internal.util.IndentingPrintWriter r1;
        int i0, $i1;
        android.util.SparseArray $r2, $r8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r9;
        com.android.server.hdmi.HdmiCecLocalDevice $r10;

        r0 := @this: com.android.server.hdmi.HdmiCecController;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        i0 = 0;

     label1:
        $r2 = r0.<com.android.server.hdmi.HdmiCecController: android.util.SparseArray mLocalDevices>;

        $i1 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if i0 >= $i1 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HdmiCecLocalDevice #");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r7);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r8 = r0.<com.android.server.hdmi.HdmiCecController: android.util.SparseArray mLocalDevices>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        $r10 = (com.android.server.hdmi.HdmiCecLocalDevice) $r9;

        virtualinvoke $r10.<com.android.server.hdmi.HdmiCecLocalDevice: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private static native long nativeInit(com.android.server.hdmi.HdmiCecController, android.os.MessageQueue);

    private static native int nativeSendCecCommand(long, int, int, byte[]);

    private static native int nativeAddLogicalAddress(long, int);

    private static native void nativeClearLogicalAddress(long);

    private static native int nativeGetPhysicalAddress(long);

    private static native int nativeGetVersion(long);

    private static native int nativeGetVendorId(long);

    private static native android.hardware.hdmi.HdmiPortInfo[] nativeGetPortInfos(long);

    private static native void nativeSetOption(long, int, int);

    private static native void nativeSetAudioReturnChannel(long, boolean);

    private static native boolean nativeIsConnected(long, int);

    static boolean access$000(com.android.server.hdmi.HdmiCecController, int)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.hdmi.HdmiCecController: boolean isAllocatedLocalDeviceAddress(int)>(i0);

        return $z0;
    }

    static void access$100(com.android.server.hdmi.HdmiCecController, int, int, com.android.server.hdmi.HdmiCecController$AllocateAddressCallback)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0, i1;
        com.android.server.hdmi.HdmiCecController$AllocateAddressCallback r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: com.android.server.hdmi.HdmiCecController$AllocateAddressCallback;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void handleAllocateLogicalAddress(int,int,com.android.server.hdmi.HdmiCecController$AllocateAddressCallback)>(i0, i1, r1);

        return;
    }

    static boolean access$200(com.android.server.hdmi.HdmiCecController, int, int, int)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0, i1, i2;
        boolean $z0;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = specialinvoke r0.<com.android.server.hdmi.HdmiCecController: boolean sendPollMessage(int,int,int)>(i0, i1, i2);

        return $z0;
    }

    static void access$300(com.android.server.hdmi.HdmiCecController, int, java.util.List, int, com.android.server.hdmi.HdmiControlService$DevicePollingCallback, java.util.List)
    {
        com.android.server.hdmi.HdmiCecController r0;
        int i0, i1;
        java.util.List r1, r3;
        com.android.server.hdmi.HdmiControlService$DevicePollingCallback r2;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecController;

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.List;

        i1 := @parameter3: int;

        r2 := @parameter4: com.android.server.hdmi.HdmiControlService$DevicePollingCallback;

        r3 := @parameter5: java.util.List;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void runDevicePolling(int,java.util.List,int,com.android.server.hdmi.HdmiControlService$DevicePollingCallback,java.util.List)>(i0, r1, i1, r2, r3);

        return;
    }

    static void access$400(com.android.server.hdmi.HdmiCecController, java.lang.Runnable)
    {
        com.android.server.hdmi.HdmiCecController r0;
        java.lang.Runnable r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecController;

        r1 := @parameter1: java.lang.Runnable;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecController: void runOnServiceThread(java.lang.Runnable)>(r1);

        return;
    }

    static byte[] access$500(int, byte[])
    {
        int i0;
        byte[] r0, $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        $r1 = staticinvoke <com.android.server.hdmi.HdmiCecController: byte[] buildBody(int,byte[])>(i0, r0);

        return $r1;
    }

    static long access$600(com.android.server.hdmi.HdmiCecController)
    {
        com.android.server.hdmi.HdmiCecController r0;
        long $l0;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecController;

        $l0 = r0.<com.android.server.hdmi.HdmiCecController: long mNativePtr>;

        return $l0;
    }

    static int access$700(long, int, int, byte[])
    {
        long l0;
        int i1, i2, $i3;
        byte[] r0;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r0 := @parameter3: byte[];

        $i3 = staticinvoke <com.android.server.hdmi.HdmiCecController: int nativeSendCecCommand(long,int,int,byte[])>(l0, i1, i2, r0);

        return $i3;
    }

    static void <clinit>()
    {
        byte[] $r0;

        <com.android.server.hdmi.HdmiCecController: int NUM_LOGICAL_ADDRESS> = 16;

        <com.android.server.hdmi.HdmiCecController: java.lang.String TAG> = "HdmiCecController";

        $r0 = <libcore.util.EmptyArray: byte[] BYTE>;

        <com.android.server.hdmi.HdmiCecController: byte[] EMPTY_BODY> = $r0;

        return;
    }
}
