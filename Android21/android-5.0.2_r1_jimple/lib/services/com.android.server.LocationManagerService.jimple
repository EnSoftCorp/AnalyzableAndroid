public class com.android.server.LocationManagerService extends android.location.ILocationManager$Stub
{
    private static final java.lang.String TAG;
    public static final boolean D;
    private static final java.lang.String WAKELOCK_KEY;
    private static final int RESOLUTION_LEVEL_NONE;
    private static final int RESOLUTION_LEVEL_COARSE;
    private static final int RESOLUTION_LEVEL_FINE;
    private static final java.lang.String ACCESS_MOCK_LOCATION;
    private static final java.lang.String ACCESS_LOCATION_EXTRA_COMMANDS;
    private static final java.lang.String INSTALL_LOCATION_PROVIDER;
    private static final java.lang.String NETWORK_LOCATION_SERVICE_ACTION;
    private static final java.lang.String FUSED_LOCATION_SERVICE_ACTION;
    private static final int MSG_LOCATION_CHANGED;
    private static final long NANOS_PER_MILLI;
    private static final long HIGH_POWER_INTERVAL_MS;
    private static final int MAX_PROVIDER_SCHEDULING_JITTER_MS;
    private static final android.location.LocationRequest DEFAULT_LOCATION_REQUEST;
    private final android.content.Context mContext;
    private final android.app.AppOpsManager mAppOps;
    private final java.lang.Object mLock;
    private com.android.server.location.LocationFudger mLocationFudger;
    private com.android.server.location.GeofenceManager mGeofenceManager;
    private android.content.pm.PackageManager mPackageManager;
    private android.os.PowerManager mPowerManager;
    private android.os.UserManager mUserManager;
    private com.android.server.location.GeocoderProxy mGeocodeProvider;
    private android.location.IGpsStatusProvider mGpsStatusProvider;
    private android.location.INetInitiatedListener mNetInitiatedListener;
    private com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler;
    private com.android.server.location.PassiveProvider mPassiveProvider;
    private com.android.server.location.LocationBlacklist mBlacklist;
    private com.android.server.location.GpsMeasurementsProvider mGpsMeasurementsProvider;
    private com.android.server.location.GpsNavigationMessageProvider mGpsNavigationMessageProvider;
    private final java.util.Set mEnabledProviders;
    private final java.util.Set mDisabledProviders;
    private final java.util.HashMap mMockProviders;
    private final java.util.HashMap mReceivers;
    private final java.util.ArrayList mProviders;
    private final java.util.HashMap mRealProviders;
    private final java.util.HashMap mProvidersByName;
    private final java.util.HashMap mRecordsByProvider;
    private final com.android.server.location.LocationRequestStatistics mRequestStatistics;
    private final java.util.HashMap mLastLocation;
    private final java.util.HashMap mLastLocationCoarseInterval;
    private final java.util.ArrayList mProxyProviders;
    private int mCurrentUserId;
    private int[] mCurrentUserProfiles;
    private final com.android.internal.content.PackageMonitor mPackageMonitor;

    public void <init>(android.content.Context)
    {
        com.android.server.LocationManagerService r0;
        android.content.Context r1;
        java.lang.Object $r2, $r16;
        java.util.HashSet $r3, $r4;
        java.util.HashMap $r5, $r6, $r8, $r9, $r10, $r12, $r13;
        java.util.ArrayList $r7, $r14;
        com.android.server.location.LocationRequestStatistics $r11;
        int[] $r15;
        com.android.server.LocationManagerService$4 $r17;
        boolean $z0;
        android.app.AppOpsManager $r18;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.location.ILocationManager$Stub: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.lang.Object mLock> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName> = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider> = $r10;

        $r11 = new com.android.server.location.LocationRequestStatistics;

        specialinvoke $r11.<com.android.server.location.LocationRequestStatistics: void <init>()>();

        r0.<com.android.server.LocationManagerService: com.android.server.location.LocationRequestStatistics mRequestStatistics> = $r11;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation> = $r12;

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval> = $r13;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.LocationManagerService: java.util.ArrayList mProxyProviders> = $r14;

        r0.<com.android.server.LocationManagerService: int mCurrentUserId> = 0;

        $r15 = newarray (int)[1];

        $r15[0] = 0;

        r0.<com.android.server.LocationManagerService: int[] mCurrentUserProfiles> = $r15;

        $r17 = new com.android.server.LocationManagerService$4;

        specialinvoke $r17.<com.android.server.LocationManagerService$4: void <init>(com.android.server.LocationManagerService)>(r0);

        r0.<com.android.server.LocationManagerService: com.android.internal.content.PackageMonitor mPackageMonitor> = $r17;

        r0.<com.android.server.LocationManagerService: android.content.Context mContext> = r1;

        $r16 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r18 = (android.app.AppOpsManager) $r16;

        r0.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps> = $r18;

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", "Constructed");

     label1:
        return;
    }

    public void systemRunning()
    {
        com.android.server.LocationManagerService r0;
        java.lang.Object r1, $r4, $r8, $r25;
        com.android.server.LocationManagerService$1 r2, $r24;
        java.lang.Throwable r3, $r43;
        boolean $z0;
        android.content.Context $r5, $r7, $r16, $r17, $r21, $r26, $r28, $r34, $r37;
        android.content.pm.PackageManager $r6;
        android.os.PowerManager $r9;
        com.android.server.LocationManagerService$LocationWorkerHandler $r10, $r14, $r18, $r30, $r35, $r41;
        com.android.internal.os.BackgroundThread $r11;
        android.os.Looper $r12, $r38;
        com.android.server.location.LocationFudger $r13;
        com.android.server.location.LocationBlacklist $r15, $r20, $r22;
        com.android.server.location.GeofenceManager $r19;
        android.app.AppOpsManager $r23;
        int $i0;
        android.os.UserManager $r27;
        com.android.server.LocationManagerService$2 $r29;
        android.content.ContentResolver $r31;
        android.net.Uri $r32;
        com.android.internal.content.PackageMonitor $r33;
        com.android.server.LocationManagerService$3 $r36;
        android.content.IntentFilter $r39, r44;
        android.os.UserHandle $r42;

        r0 := @this: com.android.server.LocationManagerService;

        $r4 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", "systemReady()");

     label2:
        $r5 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.LocationManagerService: android.content.pm.PackageManager mPackageManager> = $r6;

        $r7 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r9 = (android.os.PowerManager) $r8;

        r0.<com.android.server.LocationManagerService: android.os.PowerManager mPowerManager> = $r9;

        $r10 = new com.android.server.LocationManagerService$LocationWorkerHandler;

        $r11 = staticinvoke <com.android.internal.os.BackgroundThread: com.android.internal.os.BackgroundThread get()>();

        $r12 = virtualinvoke $r11.<com.android.internal.os.BackgroundThread: android.os.Looper getLooper()>();

        specialinvoke $r10.<com.android.server.LocationManagerService$LocationWorkerHandler: void <init>(com.android.server.LocationManagerService,android.os.Looper)>(r0, $r12);

        r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler> = $r10;

        $r13 = new com.android.server.location.LocationFudger;

        $r16 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r14 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        specialinvoke $r13.<com.android.server.location.LocationFudger: void <init>(android.content.Context,android.os.Handler)>($r16, $r14);

        r0.<com.android.server.LocationManagerService: com.android.server.location.LocationFudger mLocationFudger> = $r13;

        $r15 = new com.android.server.location.LocationBlacklist;

        $r17 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r18 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        specialinvoke $r15.<com.android.server.location.LocationBlacklist: void <init>(android.content.Context,android.os.Handler)>($r17, $r18);

        r0.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist> = $r15;

        $r20 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        virtualinvoke $r20.<com.android.server.location.LocationBlacklist: void init()>();

        $r19 = new com.android.server.location.GeofenceManager;

        $r21 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r22 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        specialinvoke $r19.<com.android.server.location.GeofenceManager: void <init>(android.content.Context,com.android.server.location.LocationBlacklist)>($r21, $r22);

        r0.<com.android.server.LocationManagerService: com.android.server.location.GeofenceManager mGeofenceManager> = $r19;

        $r24 = new com.android.server.LocationManagerService$1;

        specialinvoke $r24.<com.android.server.LocationManagerService$1: void <init>(com.android.server.LocationManagerService)>(r0);

        r2 = $r24;

        $r23 = r0.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r23.<android.app.AppOpsManager: void startWatchingMode(int,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)>(0, null, r2);

        $r26 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r25 = virtualinvoke $r26.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r27 = (android.os.UserManager) $r25;

        r0.<com.android.server.LocationManagerService: android.os.UserManager mUserManager> = $r27;

        $i0 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        virtualinvoke r0.<com.android.server.LocationManagerService: void updateUserProfiles(int)>($i0);

        specialinvoke r0.<com.android.server.LocationManagerService: void loadProvidersLocked()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r43 := @caughtexception;

        r3 = $r43;

        exitmonitor r1;

     label5:
        throw r3;

     label6:
        $r28 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r31 = virtualinvoke $r28.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r32 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("location_providers_allowed");

        $r29 = new com.android.server.LocationManagerService$2;

        $r30 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        specialinvoke $r29.<com.android.server.LocationManagerService$2: void <init>(com.android.server.LocationManagerService,android.os.Handler)>(r0, $r30);

        virtualinvoke $r31.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r32, 1, $r29, -1);

        $r33 = r0.<com.android.server.LocationManagerService: com.android.internal.content.PackageMonitor mPackageMonitor>;

        $r34 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r35 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r38 = virtualinvoke $r35.<com.android.server.LocationManagerService$LocationWorkerHandler: android.os.Looper getLooper()>();

        virtualinvoke $r33.<com.android.internal.content.PackageMonitor: void register(android.content.Context,android.os.Looper,boolean)>($r34, $r38, 1);

        $r39 = new android.content.IntentFilter;

        specialinvoke $r39.<android.content.IntentFilter: void <init>()>();

        r44 = $r39;

        virtualinvoke r44.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_SWITCHED");

        virtualinvoke r44.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.MANAGED_PROFILE_ADDED");

        virtualinvoke r44.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.MANAGED_PROFILE_REMOVED");

        $r37 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r36 = new com.android.server.LocationManagerService$3;

        specialinvoke $r36.<com.android.server.LocationManagerService$3: void <init>(com.android.server.LocationManagerService)>(r0);

        $r42 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r41 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r37.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r36, $r42, r44, null, $r41);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void updateUserProfiles(int)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1, $i2, $i3, $i4;
        java.util.List r1;
        java.lang.Object r2, $r5, $r9;
        java.lang.Throwable r3, $r11;
        android.os.UserManager $r4;
        int[] $r6, $r7, $r8;
        android.content.pm.UserInfo $r10;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.LocationManagerService: android.os.UserManager mUserManager>;

        r1 = virtualinvoke $r4.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        $r5 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $r6 = newarray (int)[$i2];

        r0.<com.android.server.LocationManagerService: int[] mCurrentUserProfiles> = $r6;

        i1 = 0;

     label2:
        $r7 = r0.<com.android.server.LocationManagerService: int[] mCurrentUserProfiles>;

        $i3 = lengthof $r7;

        if i1 >= $i3 goto label3;

        $r8 = r0.<com.android.server.LocationManagerService: int[] mCurrentUserProfiles>;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r10 = (android.content.pm.UserInfo) $r9;

        $i4 = $r10.<android.content.pm.UserInfo: int id>;

        $r8[i1] = $i4;

        i1 = i1 + 1;

        goto label2;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean isCurrentProfile(int)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        int[] $r4, $r5;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        i1 = 0;

     label2:
        $r4 = r0.<com.android.server.LocationManagerService: int[] mCurrentUserProfiles>;

        $i2 = lengthof $r4;

        if i1 >= $i2 goto label5;

        $r5 = r0.<com.android.server.LocationManagerService: int[] mCurrentUserProfiles>;

        $i3 = $r5[i1];

        if $i3 != i0 goto label4;

        exitmonitor r1;

     label3:
        return 1;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        exitmonitor r1;

     label6:
        return 0;

     label7:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private void ensureFallbackFusedProviderPresentLocked(java.util.ArrayList)
    {
        com.android.server.LocationManagerService r0;
        java.util.ArrayList r1, r4;
        android.content.pm.PackageManager r2;
        java.lang.String r3, r8, $r26, $r30, $r36, $r37, $r41, $r46, $r51;
        java.util.List r5;
        java.util.Iterator r6;
        android.content.pm.ResolveInfo r7;
        android.content.pm.PackageInfo r9;
        android.content.Context $r10, $r11, $r12;
        int $i0, $i2, $i3, $i4, i11;
        android.content.Intent $r13;
        java.lang.IllegalStateException $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.content.pm.ServiceInfo $r15, $r18, $r19, $r24;
        java.lang.Object $r16;
        android.content.pm.Signature[] $r17;
        android.os.Bundle $r20, $r21;
        java.lang.StringBuilder $r22, $r23, $r25, $r28, $r29, $r31, $r32, $r33, $r34, $r35, $r38, $r39, $r40, $r42, $r43, $r44, $r45, $r48, $r49, $r50, $r52, $r53, $r54;
        android.content.pm.ApplicationInfo $r27;
        android.content.pm.PackageManager$NameNotFoundException $r47;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.util.ArrayList;

        $r10 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        r2 = virtualinvoke $r10.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r11 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        r3 = virtualinvoke $r11.<android.content.Context: java.lang.String getPackageName()>();

        $r12 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        r4 = staticinvoke <com.android.server.ServiceWatcher: java.util.ArrayList getSignatureSets(android.content.Context,java.util.List)>($r12, r1);

        $r13 = new android.content.Intent;

        specialinvoke $r13.<android.content.Intent: void <init>(java.lang.String)>("com.android.location.service.FusedLocationProvider");

        $i0 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        r5 = virtualinvoke r2.<android.content.pm.PackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)>($r13, 128, $i0);

        r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r16 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.content.pm.ResolveInfo) $r16;

        $r15 = r7.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        r8 = $r15.<android.content.pm.ServiceInfo: java.lang.String packageName>;

     label02:
        r9 = virtualinvoke r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r8, 64);

        $r17 = r9.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        $z1 = staticinvoke <com.android.server.ServiceWatcher: boolean isSignatureMatch(android.content.pm.Signature[],java.util.List)>($r17, r4);

        if $z1 != 0 goto label04;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resolves service ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("com.android.location.service.FusedLocationProvider");

        $r45 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but has wrong signature, ignoring");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r46);

     label03:
        goto label01;

     label04:
        goto label06;

     label05:
        $r47 := @caughtexception;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("missing package: ");

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r51 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocationManagerService", $r51);

        goto label01;

     label06:
        $r18 = r7.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r20 = $r18.<android.content.pm.ServiceInfo: android.os.Bundle metaData>;

        if $r20 != null goto label07;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found fused provider without metadata: ");

        $r40 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r41);

        goto label01;

     label07:
        $r19 = r7.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r21 = $r19.<android.content.pm.ServiceInfo: android.os.Bundle metaData>;

        i11 = virtualinvoke $r21.<android.os.Bundle: int getInt(java.lang.String,int)>("serviceVersion", -1);

        if i11 != 0 goto label11;

        $r24 = r7.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r27 = $r24.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r27.<android.content.pm.ApplicationInfo: int flags>;

        $i2 = $i4 & 1;

        if $i2 != 0 goto label08;

        $z5 = <com.android.server.LocationManagerService: boolean D>;

        if $z5 == 0 goto label01;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fallback candidate not in /system: ");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r37);

        goto label01;

     label08:
        $i3 = virtualinvoke r2.<android.content.pm.PackageManager: int checkSignatures(java.lang.String,java.lang.String)>(r3, r8);

        if $i3 == 0 goto label09;

        $z4 = <com.android.server.LocationManagerService: boolean D>;

        if $z4 == 0 goto label01;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fallback candidate not signed the same as system: ");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r36);

        goto label01;

     label09:
        $z3 = <com.android.server.LocationManagerService: boolean D>;

        if $z3 == 0 goto label10;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found fallback provider: ");

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r30);

     label10:
        return;

     label11:
        $z2 = <com.android.server.LocationManagerService: boolean D>;

        if $z2 == 0 goto label12;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fallback candidate not version 0: ");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r26);

     label12:
        goto label01;

     label13:
        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to find a fused location provider that is in the system partition with version 0 and signed with the platform certificate. Such a package is needed to provide a default fused location provider in the event that no other fused location provider has been installed or is currently available. For example, coreOnly boot mode when decrypting the data partition. The fallback must also be marked coreApp=\"true\" in the manifest");

        throw $r14;

        catch android.content.pm.PackageManager$NameNotFoundException from label02 to label03 with label05;
    }

    private void loadProvidersLocked()
    {
        com.android.server.LocationManagerService r0;
        com.android.server.location.PassiveProvider r1, $r17;
        com.android.server.location.GpsLocationProvider r2, $r20;
        android.content.res.Resources r3;
        java.util.ArrayList r4, $r26, $r69, $r71;
        java.lang.String[] r5, r11, r13, r86;
        com.android.server.location.LocationProviderProxy r6, r7;
        com.android.server.location.FlpHardwareProvider r8;
        com.android.server.location.FusedProxy r9;
        com.android.server.location.ActivityRecognitionProxy r10;
        int i0, i1, $i9, $i10;
        java.lang.String r12, r15, $r18, $r39, $r40, $r41, $r45, $r46, $r47, $r48, $r49, $r53, $r54, $r61, $r67, $r77, $r79;
        com.android.internal.location.ProviderProperties r14, $r44;
        java.util.Set $r16, $r68;
        com.android.server.LocationManagerService$LocationWorkerHandler $r19, $r27, $r29, $r34, $r37, $r55, $r62;
        android.os.Looper $r21;
        android.content.Context $r22, $r24, $r28, $r30, $r32, $r35, $r56, $r60, $r64, $r66;
        com.android.server.location.GpsMeasurementsProvider $r23;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.android.server.location.GpsNavigationMessageProvider $r25;
        java.lang.IllegalStateException $r31;
        com.android.server.location.GeocoderProxy $r33, $r36;
        android.location.IGpsGeofenceHardware $r38;
        java.util.HashMap $r42, $r73, $r75, $r82;
        java.lang.Object $r43;
        java.lang.IllegalArgumentException $r50;
        java.lang.StringBuilder $r51, $r52, $r58, $r59, $r78, $r80, $r81;
        android.hardware.location.ActivityRecognitionHardware $r57;
        android.hardware.location.IFusedLocationHardware $r63;
        android.location.IFusedGeofenceHardware $r65;
        java.util.List $r70;
        android.location.IGpsStatusProvider $r76;
        android.location.INetInitiatedListener $r83;
        com.android.server.location.GeofenceProxy r85;

        r0 := @this: com.android.server.LocationManagerService;

        $r17 = new com.android.server.location.PassiveProvider;

        specialinvoke $r17.<com.android.server.location.PassiveProvider: void <init>(android.location.ILocationManager)>(r0);

        r1 = $r17;

        specialinvoke r0.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(r1);

        $r16 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $r18 = virtualinvoke r1.<com.android.server.location.PassiveProvider: java.lang.String getName()>();

        interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>($r18);

        r0.<com.android.server.LocationManagerService: com.android.server.location.PassiveProvider mPassiveProvider> = r1;

        $r20 = new com.android.server.location.GpsLocationProvider;

        $r22 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r19 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r21 = virtualinvoke $r19.<com.android.server.LocationManagerService$LocationWorkerHandler: android.os.Looper getLooper()>();

        specialinvoke $r20.<com.android.server.location.GpsLocationProvider: void <init>(android.content.Context,android.location.ILocationManager,android.os.Looper)>($r22, r0, $r21);

        r2 = $r20;

        $z1 = staticinvoke <com.android.server.location.GpsLocationProvider: boolean isSupported()>();

        if $z1 == 0 goto label01;

        $r76 = virtualinvoke r2.<com.android.server.location.GpsLocationProvider: android.location.IGpsStatusProvider getGpsStatusProvider()>();

        r0.<com.android.server.LocationManagerService: android.location.IGpsStatusProvider mGpsStatusProvider> = $r76;

        $r83 = virtualinvoke r2.<com.android.server.location.GpsLocationProvider: android.location.INetInitiatedListener getNetInitiatedListener()>();

        r0.<com.android.server.LocationManagerService: android.location.INetInitiatedListener mNetInitiatedListener> = $r83;

        specialinvoke r0.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(r2);

        $r82 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders>;

        virtualinvoke $r82.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("gps", r2);

     label01:
        $r23 = virtualinvoke r2.<com.android.server.location.GpsLocationProvider: com.android.server.location.GpsMeasurementsProvider getGpsMeasurementsProvider()>();

        r0.<com.android.server.LocationManagerService: com.android.server.location.GpsMeasurementsProvider mGpsMeasurementsProvider> = $r23;

        $r25 = virtualinvoke r2.<com.android.server.location.GpsLocationProvider: com.android.server.location.GpsNavigationMessageProvider getGpsNavigationMessageProvider()>();

        r0.<com.android.server.LocationManagerService: com.android.server.location.GpsNavigationMessageProvider mGpsNavigationMessageProvider> = $r25;

        $r24 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        r3 = virtualinvoke $r24.<android.content.Context: android.content.res.Resources getResources()>();

        $r26 = new java.util.ArrayList;

        specialinvoke $r26.<java.util.ArrayList: void <init>()>();

        r4 = $r26;

        r5 = virtualinvoke r3.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236006);

        $z2 = <com.android.server.LocationManagerService: boolean D>;

        if $z2 == 0 goto label02;

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("certificates for location providers pulled from: ");

        $r79 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r5);

        $r78 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r79);

        $r77 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r77);

     label02:
        if r5 == null goto label03;

        $r70 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r5);

        virtualinvoke r4.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r70);

     label03:
        specialinvoke r0.<com.android.server.LocationManagerService: void ensureFallbackFusedProviderPresentLocked(java.util.ArrayList)>(r4);

        $r28 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r27 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        r6 = staticinvoke <com.android.server.location.LocationProviderProxy: com.android.server.location.LocationProviderProxy createAndBind(android.content.Context,java.lang.String,java.lang.String,int,int,int,android.os.Handler)>($r28, "network", "com.android.location.service.v3.NetworkLocationProvider", 17956921, 17039392, 17236006, $r27);

        if r6 == null goto label04;

        $r73 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders>;

        virtualinvoke $r73.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("network", r6);

        $r71 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProxyProviders>;

        virtualinvoke $r71.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        specialinvoke r0.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(r6);

        goto label05;

     label04:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocationManagerService", "no network location provider found");

     label05:
        $r30 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r29 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        r7 = staticinvoke <com.android.server.location.LocationProviderProxy: com.android.server.location.LocationProviderProxy createAndBind(android.content.Context,java.lang.String,java.lang.String,int,int,int,android.os.Handler)>($r30, "fused", "com.android.location.service.FusedLocationProvider", 17956922, 17039393, 17236006, $r29);

        if r7 == null goto label06;

        specialinvoke r0.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(r7);

        $r69 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProxyProviders>;

        virtualinvoke $r69.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

        $r68 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $r67 = virtualinvoke r7.<com.android.server.location.LocationProviderProxy: java.lang.String getName()>();

        interfaceinvoke $r68.<java.util.Set: boolean add(java.lang.Object)>($r67);

        $r75 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders>;

        virtualinvoke $r75.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("fused", r7);

        goto label07;

     label06:
        $r31 = new java.lang.IllegalStateException;

        specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Location service needs a fused location provider");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "no fused location provider found", $r31);

     label07:
        $r32 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r34 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r33 = staticinvoke <com.android.server.location.GeocoderProxy: com.android.server.location.GeocoderProxy createAndBind(android.content.Context,int,int,int,android.os.Handler)>($r32, 17956924, 17039395, 17236006, $r34);

        r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider> = $r33;

        $r36 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r36 != null goto label08;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "no geocoder provider found");

     label08:
        $z3 = staticinvoke <com.android.server.location.FlpHardwareProvider: boolean isSupported()>();

        if $z3 == 0 goto label10;

        $r66 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        r8 = staticinvoke <com.android.server.location.FlpHardwareProvider: com.android.server.location.FlpHardwareProvider getInstance(android.content.Context)>($r66);

        $r64 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r62 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r63 = virtualinvoke r8.<com.android.server.location.FlpHardwareProvider: android.hardware.location.IFusedLocationHardware getLocationHardware()>();

        r9 = staticinvoke <com.android.server.location.FusedProxy: com.android.server.location.FusedProxy createAndBind(android.content.Context,android.os.Handler,android.hardware.location.IFusedLocationHardware,int,int,int)>($r64, $r62, $r63, 17956923, 17039394, 17236006);

        if r9 != null goto label09;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "Unable to bind FusedProxy.");

     label09:
        goto label11;

     label10:
        r8 = null;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "FLP HAL not supported");

     label11:
        $r35 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r37 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r38 = virtualinvoke r2.<com.android.server.location.GpsLocationProvider: android.location.IGpsGeofenceHardware getGpsGeofenceProxy()>();

        if r8 == null goto label12;

        $r65 = virtualinvoke r8.<com.android.server.location.FlpHardwareProvider: android.location.IFusedGeofenceHardware getGeofenceHardware()>();

        goto label13;

     label12:
        $r65 = null;

     label13:
        r85 = staticinvoke <com.android.server.location.GeofenceProxy: com.android.server.location.GeofenceProxy createAndBind(android.content.Context,int,int,int,android.os.Handler,android.location.IGpsGeofenceHardware,android.location.IFusedGeofenceHardware)>($r35, 17956925, 17039396, 17236006, $r37, $r38, $r65);

        if r85 != null goto label14;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "Unable to bind FLP Geofence proxy.");

     label14:
        $z4 = staticinvoke <android.hardware.location.ActivityRecognitionHardware: boolean isSupported()>();

        if $z4 == 0 goto label16;

        $r56 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r55 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r60 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r57 = staticinvoke <android.hardware.location.ActivityRecognitionHardware: android.hardware.location.ActivityRecognitionHardware getInstance(android.content.Context)>($r60);

        r10 = staticinvoke <com.android.server.location.ActivityRecognitionProxy: com.android.server.location.ActivityRecognitionProxy createAndBind(android.content.Context,android.os.Handler,android.hardware.location.ActivityRecognitionHardware,int,int,int)>($r56, $r55, $r57, 17956926, 17039397, 17236006);

        if r10 != null goto label15;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "Unable to bind ActivityRecognitionProxy.");

     label15:
        goto label17;

     label16:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "Hardware Activity-Recognition not supported.");

     label17:
        r86 = virtualinvoke r3.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236007);

        r11 = r86;

        i0 = lengthof r11;

        i1 = 0;

     label18:
        if i1 >= i0 goto label20;

        r12 = r11[i1];

        r13 = virtualinvoke r12.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r39 = r13[0];

        r15 = virtualinvoke $r39.<java.lang.String: java.lang.String trim()>();

        $r42 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r43 = virtualinvoke $r42.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r15);

        if $r43 == null goto label19;

        $r50 = new java.lang.IllegalArgumentException;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r59 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" already exists");

        $r61 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r50.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r61);

        throw $r50;

     label19:
        $r44 = new com.android.internal.location.ProviderProperties;

        $r45 = r13[1];

        $z5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r45);

        $r40 = r13[2];

        $z6 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r40);

        $r41 = r13[3];

        $z9 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r41);

        $r48 = r13[4];

        $z10 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r48);

        $r49 = r13[5];

        $z7 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r49);

        $r46 = r13[6];

        $z8 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r46);

        $r47 = r13[7];

        $z11 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r47);

        $r53 = r13[8];

        $i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r53);

        $r54 = r13[9];

        $i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r54);

        specialinvoke $r44.<com.android.internal.location.ProviderProperties: void <init>(boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>($z5, $z6, $z9, $z10, $z7, $z8, $z11, $i10, $i9);

        r14 = $r44;

        specialinvoke r0.<com.android.server.LocationManagerService: void addTestProviderLocked(java.lang.String,com.android.internal.location.ProviderProperties)>(r15, r14);

        i1 = i1 + 1;

        goto label18;

     label20:
        return;
    }

    private void switchUser(int)
    {
        com.android.server.LocationManagerService r0;
        int i0, $i1;
        java.lang.Object r1, $r7, $r12;
        java.util.Iterator r2;
        com.android.server.location.LocationProviderInterface r3;
        java.lang.Throwable r4, $r13;
        com.android.server.location.LocationBlacklist $r5;
        com.android.server.LocationManagerService$LocationWorkerHandler $r6;
        java.util.HashMap $r8, $r9;
        java.util.ArrayList $r10;
        boolean $z0;
        java.lang.String $r11;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        if $i1 != i0 goto label1;

        return;

     label1:
        $r5 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        virtualinvoke $r5.<com.android.server.location.LocationBlacklist: void switchUser(int)>(i0);

        $r6 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r6.<com.android.server.LocationManagerService$LocationWorkerHandler: void removeMessages(int)>(1);

        $r7 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r1 = $r7;

        entermonitor $r7;

     label2:
        $r8 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r8.<java.util.HashMap: void clear()>();

        $r9 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r9.<java.util.HashMap: void clear()>();

        $r10 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        r2 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.location.LocationProviderInterface) $r12;

        $r11 = interfaceinvoke r3.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean)>($r11, 0);

        goto label3;

     label4:
        r0.<com.android.server.LocationManagerService: int mCurrentUserId> = i0;

        virtualinvoke r0.<com.android.server.LocationManagerService: void updateUserProfiles(int)>(i0);

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r1;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void locationCallbackFinished(android.location.ILocationListener)
    {
        com.android.server.LocationManagerService r0;
        android.location.ILocationListener r1;
        java.lang.Object r2, $r8, $r10;
        android.os.IBinder r3;
        com.android.server.LocationManagerService$Receiver r4, r5;
        long l0;
        java.lang.Throwable r6, r7, $r12, $r13;
        java.util.HashMap $r9;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.ILocationListener;

        $r8 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r2 = $r8;

        entermonitor $r8;

     label01:
        r3 = interfaceinvoke r1.<android.location.ILocationListener: android.os.IBinder asBinder()>();

        $r9 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (com.android.server.LocationManagerService$Receiver) $r10;

        if r4 == null goto label06;

        r5 = r4;

        entermonitor r4;

     label02:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        staticinvoke <com.android.server.LocationManagerService$Receiver: void access$1500(com.android.server.LocationManagerService$Receiver)>(r4);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r5;

     label03:
        goto label06;

     label04:
        $r12 := @caughtexception;

        r6 = $r12;

        exitmonitor r5;

     label05:
        throw r6;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r13 := @caughtexception;

        r7 = $r13;

        exitmonitor r2;

     label09:
        throw r7;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private void addProviderLocked(com.android.server.location.LocationProviderInterface)
    {
        com.android.server.LocationManagerService r0;
        com.android.server.location.LocationProviderInterface r1;
        java.util.ArrayList $r2;
        java.util.HashMap $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: com.android.server.location.LocationProviderInterface;

        $r2 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r4 = interfaceinvoke r1.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1);

        return;
    }

    private void removeProviderLocked(com.android.server.location.LocationProviderInterface)
    {
        com.android.server.LocationManagerService r0;
        com.android.server.location.LocationProviderInterface r1;
        java.util.ArrayList $r2;
        java.util.HashMap $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: com.android.server.location.LocationProviderInterface;

        interfaceinvoke r1.<com.android.server.location.LocationProviderInterface: void disable()>();

        $r2 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r3 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r4 = interfaceinvoke r1.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        return;
    }

    private boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1;
        android.content.ContentResolver r2;
        java.util.Set $r3, $r4;
        boolean $z0, $z1, $z2;
        android.content.Context $r5;
        int $i0;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r4 = r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $r5 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        r2 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        $z2 = staticinvoke <android.provider.Settings$Secure: boolean isLocationProviderEnabledForUser(android.content.ContentResolver,java.lang.String,int)>(r2, r1, $i0);

        return $z2;
    }

    private boolean isAllowedByUserSettingsLocked(java.lang.String, int)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1;
        int i0, $i1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z0 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isCurrentProfile(int)>($i1);

        if $z0 != 0 goto label1;

        $z2 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isUidALocationProvider(int)>(i0);

        if $z2 != 0 goto label1;

        return 0;

     label1:
        $z1 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(r1);

        return $z1;
    }

    private java.lang.String getResolutionPermission(int)
    {
        com.android.server.LocationManagerService r0;
        int i0;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 1: goto label2;
            case 2: goto label1;
            default: goto label3;
        };

     label1:
        return "android.permission.ACCESS_FINE_LOCATION";

     label2:
        return "android.permission.ACCESS_COARSE_LOCATION";

     label3:
        return null;
    }

    private int getAllowedResolutionLevel(int, int)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1, $i2, $i3;
        android.content.Context $r1, $r2;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.ACCESS_FINE_LOCATION", i0, i1);

        if $i2 != 0 goto label1;

        return 2;

     label1:
        $r2 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r2.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.ACCESS_COARSE_LOCATION", i0, i1);

        if $i3 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private int getCallerAllowedResolutionLevel()
    {
        com.android.server.LocationManagerService r0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.LocationManagerService;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = specialinvoke r0.<com.android.server.LocationManagerService: int getAllowedResolutionLevel(int,int)>($i0, $i1);

        return $i2;
    }

    private void checkResolutionLevelIsSufficientForGeofenceUse(int)
    {
        com.android.server.LocationManagerService r0;
        int i0;
        java.lang.SecurityException $r1;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        if i0 >= 2 goto label1;

        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Geofence usage requires ACCESS_FINE_LOCATION permission");

        throw $r1;

     label1:
        return;
    }

    private int getMinimumResolutionLevelForProviderUse(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r4, $r5, $r6, $r7;
        com.android.server.location.LocationProviderInterface r2;
        com.android.internal.location.ProviderProperties r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.HashMap $r8;
        java.lang.Object $r9;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        $r4 = "gps";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r5 = "passive";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 2;

     label2:
        $r6 = "network";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 != 0 goto label3;

        $r7 = "fused";

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label4;

     label3:
        return 1;

     label4:
        $r8 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.location.LocationProviderInterface) $r9;

        if r2 == null goto label7;

        r3 = interfaceinvoke r2.<com.android.server.location.LocationProviderInterface: com.android.internal.location.ProviderProperties getProperties()>();

        if r3 == null goto label7;

        $z4 = r3.<com.android.internal.location.ProviderProperties: boolean mRequiresSatellite>;

        if $z4 == 0 goto label5;

        return 2;

     label5:
        $z6 = r3.<com.android.internal.location.ProviderProperties: boolean mRequiresNetwork>;

        if $z6 != 0 goto label6;

        $z5 = r3.<com.android.internal.location.ProviderProperties: boolean mRequiresCell>;

        if $z5 == 0 goto label7;

     label6:
        return 1;

     label7:
        return 2;
    }

    private void checkResolutionLevelIsSufficientForProviderUse(int, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1;
        java.lang.String r1, $r8, $r16, $r21;
        java.lang.SecurityException $r2, $r9, $r15;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 = specialinvoke r0.<com.android.server.LocationManagerService: int getMinimumResolutionLevelForProviderUse(java.lang.String)>(r1);

        if i0 >= i1 goto label4;

        lookupswitch(i1)
        {
            case 1: goto label2;
            case 2: goto label1;
            default: goto label3;
        };

     label1:
        $r2 = new java.lang.SecurityException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" location provider ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requires ACCESS_FINE_LOCATION permission.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label2:
        $r9 = new java.lang.SecurityException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" location provider ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requires ACCESS_COARSE_LOCATION or ACCESS_FINE_LOCATION permission.");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>($r16);

        throw $r9;

     label3:
        $r15 = new java.lang.SecurityException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Insufficient permission for \"");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" location provider.");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.SecurityException: void <init>(java.lang.String)>($r21);

        throw $r15;

     label4:
        return;
    }

    private void checkDeviceStatsAllowed()
    {
        com.android.server.LocationManagerService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.UPDATE_DEVICE_STATS", null);

        return;
    }

    private void checkUpdateAppOpsAllowed()
    {
        com.android.server.LocationManagerService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.UPDATE_APP_OPS_STATS", null);

        return;
    }

    public static int resolutionLevelToOp(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 != 1 goto label1;

        return 0;

     label1:
        return 1;

     label2:
        return -1;
    }

    boolean reportLocationAccessNoThrow(int, java.lang.String, int)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1, i2, $i3;
        java.lang.String r1;
        android.app.AppOpsManager $r2;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 = staticinvoke <com.android.server.LocationManagerService: int resolutionLevelToOp(int)>(i1);

        if i2 < 0 goto label1;

        $r2 = r0.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps>;

        $i3 = virtualinvoke $r2.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String)>(i2, i0, r1);

        if $i3 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    boolean checkLocationAccess(int, java.lang.String, int)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1, i2, $i3;
        java.lang.String r1;
        android.app.AppOpsManager $r2;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 = staticinvoke <com.android.server.LocationManagerService: int resolutionLevelToOp(int)>(i1);

        if i2 < 0 goto label1;

        $r2 = r0.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps>;

        $i3 = virtualinvoke $r2.<android.app.AppOpsManager: int checkOp(int,int,java.lang.String)>(i2, i0, r1);

        if $i3 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public java.util.List getAllProviders()
    {
        com.android.server.LocationManagerService r0;
        java.util.ArrayList r1, $r8, $r9, $r10;
        java.lang.Object r2, $r7, $r15;
        java.util.Iterator r3;
        com.android.server.location.LocationProviderInterface r4;
        java.lang.String r5, $r14, $r16;
        java.lang.Throwable r6, $r17;
        int $i0;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r11, $r12, $r13;

        r0 := @this: com.android.server.LocationManagerService;

        $r7 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r2 = $r7;

        entermonitor $r7;

     label1:
        $r8 = new java.util.ArrayList;

        $r9 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        $i0 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i0);

        r1 = $r8;

        $r10 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        r3 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.location.LocationProviderInterface) $r15;

        r5 = interfaceinvoke r4.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $r16 = "fused";

        $z2 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z2 == 0 goto label3;

        goto label2;

     label3:
        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        goto label2;

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r17 := @caughtexception;

        r6 = $r17;

        exitmonitor r2;

     label7:
        throw r6;

     label8:
        $z1 = <com.android.server.LocationManagerService: boolean D>;

        if $z1 == 0 goto label9;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAllProviders()=");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r14);

     label9:
        return r1;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.util.List getProviders(android.location.Criteria, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.Criteria r1;
        boolean z0, $z1, $z2, $z3, $z4, $z6;
        int i0, i1, $i3, $i5;
        java.util.ArrayList r2, $r10, $r11, $r12;
        long l2;
        java.lang.Object r3, $r9, $r18;
        java.util.Iterator r4;
        com.android.server.location.LocationProviderInterface r5;
        java.lang.String r6, $r16, $r17;
        java.lang.Throwable r7, r8, $r20, $r21;
        java.lang.StringBuilder $r13, $r14, $r15;
        com.android.internal.location.ProviderProperties $r19;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.Criteria;

        z0 := @parameter1: boolean;

        i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r9 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r3 = $r9;

        entermonitor $r9;

     label02:
        $r11 = new java.util.ArrayList;

        $r10 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        $i3 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i3);

        r2 = $r11;

        $r12 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        r4 = virtualinvoke $r12.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.location.LocationProviderInterface) $r18;

        r6 = interfaceinvoke r5.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $r17 = "fused";

        $z3 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z3 == 0 goto label04;

        goto label03;

     label04:
        $i5 = specialinvoke r0.<com.android.server.LocationManagerService: int getMinimumResolutionLevelForProviderUse(java.lang.String)>(r6);

        if i0 < $i5 goto label07;

        if z0 == 0 goto label05;

        $z6 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByUserSettingsLocked(java.lang.String,int)>(r6, i1);

        if $z6 != 0 goto label05;

        goto label03;

     label05:
        if r1 == null goto label06;

        $r19 = interfaceinvoke r5.<com.android.server.location.LocationProviderInterface: com.android.internal.location.ProviderProperties getProperties()>();

        $z4 = staticinvoke <android.location.LocationProvider: boolean propertiesMeetCriteria(java.lang.String,com.android.internal.location.ProviderProperties,android.location.Criteria)>(r6, $r19, r1);

        if $z4 != 0 goto label06;

        goto label03;

     label06:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

     label07:
        goto label03;

     label08:
        exitmonitor r3;

     label09:
        goto label12;

     label10:
        $r21 := @caughtexception;

        r7 = $r21;

        exitmonitor r3;

     label11:
        throw r7;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        goto label15;

     label13:
        $r20 := @caughtexception;

        r8 = $r20;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r8;

     label15:
        $z2 = <com.android.server.LocationManagerService: boolean D>;

        if $z2 == 0 goto label16;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getProviders()=");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r16);

     label16:
        return r2;

        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public java.lang.String getBestProvider(android.location.Criteria, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.Criteria r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List r2, r28;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r25, $r26;
        java.lang.String $r10, $r18, $r24, r27, r29;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.Criteria;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)>(r1, z0);

        $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        r27 = specialinvoke r0.<com.android.server.LocationManagerService: java.lang.String pickBest(java.util.List)>(r2);

        $z5 = <com.android.server.LocationManagerService: boolean D>;

        if $z5 == 0 goto label1;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getBestProvider(");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r24);

     label1:
        return r27;

     label2:
        r28 = virtualinvoke r0.<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)>(null, z0);

        $z2 = interfaceinvoke r28.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label4;

        r29 = specialinvoke r0.<com.android.server.LocationManagerService: java.lang.String pickBest(java.util.List)>(r28);

        $z4 = <com.android.server.LocationManagerService: boolean D>;

        if $z4 == 0 goto label3;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getBestProvider(");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r18);

     label3:
        return r29;

     label4:
        $z3 = <com.android.server.LocationManagerService: boolean D>;

        if $z3 == 0 goto label5;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getBestProvider(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(null);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r10);

     label5:
        return null;
    }

    private java.lang.String pickBest(java.util.List)
    {
        com.android.server.LocationManagerService r0;
        java.util.List r1;
        boolean $z0, $z1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>("gps");

        if $z0 == 0 goto label1;

        return "gps";

     label1:
        $z1 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>("network");

        if $z1 == 0 goto label2;

        return "network";

     label2:
        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public boolean providerMeetsCriteria(java.lang.String, android.location.Criteria)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r6, $r14, $r19;
        android.location.Criteria r2;
        com.android.server.location.LocationProviderInterface r3;
        boolean z0, $z1;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        com.android.internal.location.ProviderProperties $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r17, $r18, $r20;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.location.Criteria;

        $r4 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.location.LocationProviderInterface) $r5;

        if r3 != null goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider=");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r16;

     label1:
        $r6 = interfaceinvoke r3.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $r7 = interfaceinvoke r3.<com.android.server.location.LocationProviderInterface: com.android.internal.location.ProviderProperties getProperties()>();

        z0 = staticinvoke <android.location.LocationProvider: boolean propertiesMeetCriteria(java.lang.String,com.android.internal.location.ProviderProperties,android.location.Criteria)>($r6, $r7, r2);

        $z1 = <com.android.server.LocationManagerService: boolean D>;

        if $z1 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("providerMeetsCriteria(");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")=");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r14);

     label2:
        return z0;
    }

    private void updateProvidersLocked()
    {
        com.android.server.LocationManagerService r0;
        boolean z0, z1, z2;
        int i0, $i1;
        com.android.server.location.LocationProviderInterface r1;
        java.lang.String r2;
        java.util.ArrayList $r3, $r10;
        android.content.Intent $r4, $r7;
        android.content.Context $r5, $r8;
        android.os.UserHandle $r6, $r9;
        java.lang.Object $r11;
        java.util.HashMap $r12, $r13;

        r0 := @this: com.android.server.LocationManagerService;

        z0 = 0;

        $r3 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i0 = $i1 - 1;

     label1:
        if i0 < 0 goto label4;

        $r10 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.location.LocationProviderInterface) $r11;

        z1 = interfaceinvoke r1.<com.android.server.location.LocationProviderInterface: boolean isEnabled()>();

        r2 = interfaceinvoke r1.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        z2 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(r2);

        if z1 == 0 goto label2;

        if z2 != 0 goto label2;

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean)>(r2, 0);

        $r13 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r13.<java.util.HashMap: void clear()>();

        $r12 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r12.<java.util.HashMap: void clear()>();

        z0 = 1;

        goto label3;

     label2:
        if z1 != 0 goto label3;

        if z2 == 0 goto label3;

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean)>(r2, 1);

        z0 = 1;

     label3:
        i0 = i0 + -1;

        goto label1;

     label4:
        if z0 == 0 goto label5;

        $r5 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.location.PROVIDERS_CHANGED");

        $r6 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r5.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r4, $r6);

        $r8 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(java.lang.String)>("android.location.MODE_CHANGED");

        $r9 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r8.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r7, $r9);

     label5:
        return;
    }

    private void updateProviderListenersLocked(java.lang.String, boolean)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1;
        boolean z0, $z1, $z2;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        com.android.server.location.LocationProviderInterface r2;
        java.util.ArrayList r3, r4, $r16;
        com.android.server.LocationManagerService$UpdateRecord r5;
        java.util.HashMap $r6, $r8;
        java.lang.Object $r7, $r9, $r10, $r13;
        com.android.server.LocationManagerService$Receiver $r11, $r12, $r14, $r15;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 = 0;

        $r6 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.location.LocationProviderInterface) $r7;

        if r2 != null goto label01;

        return;

     label01:
        r3 = null;

        $r8 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.ArrayList) $r9;

        if r4 == null goto label06;

        i1 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        i2 = 0;

     label02:
        if i2 >= i1 goto label06;

        $r13 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r5 = (com.android.server.LocationManagerService$UpdateRecord) $r13;

        $r12 = r5.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i5 = $r12.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i5);

        $z1 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isCurrentProfile(int)>($i4);

        if $z1 == 0 goto label05;

        $r14 = r5.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $z2 = virtualinvoke $r14.<com.android.server.LocationManagerService$Receiver: boolean callProviderEnabledLocked(java.lang.String,boolean)>(r1, z0);

        if $z2 != 0 goto label04;

        if r3 != null goto label03;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r3 = $r16;

     label03:
        $r15 = r5.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

     label04:
        i0 = i0 + 1;

     label05:
        i2 = i2 + 1;

        goto label02;

     label06:
        if r3 == null goto label08;

        $i3 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        i6 = $i3 - 1;

     label07:
        if i6 < 0 goto label08;

        $r10 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        $r11 = (com.android.server.LocationManagerService$Receiver) $r10;

        specialinvoke r0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>($r11);

        i6 = i6 + -1;

        goto label07;

     label08:
        if z0 == 0 goto label09;

        interfaceinvoke r2.<com.android.server.location.LocationProviderInterface: void enable()>();

        if i0 <= 0 goto label10;

        specialinvoke r0.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>(r1);

        goto label10;

     label09:
        interfaceinvoke r2.<com.android.server.location.LocationProviderInterface: void disable()>();

     label10:
        return;
    }

    private void applyRequirementsLocked(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r22, $r29, $r35, $r43;
        com.android.server.location.LocationProviderInterface r2;
        java.util.ArrayList r3;
        android.os.WorkSource r4, $r15, $r25, $r31, $r33, $r36;
        com.android.internal.location.ProviderRequest r5, $r16;
        java.util.Iterator r6, r44;
        com.android.server.LocationManagerService$UpdateRecord r7, r9;
        android.location.LocationRequest r8, r10;
        java.util.HashMap $r11, $r13;
        java.lang.Object $r12, $r14, $r23, $r38;
        boolean $z0, $z1, $z2, $z3, $z4, $z7, $z8;
        java.lang.StringBuilder $r17, $r18, $r19, $r20, $r21;
        long $l1, $l2, $l3, $l4, $l12, $l15, $l17, l18;
        com.android.server.LocationManagerService$Receiver $r24, $r26, $r27, $r28, $r30, $r32, $r34, $r37, $r39, $r40, $r42;
        int $i5, $i6, $i8, $i9, $i10, $i11, $i13, $i14;
        byte $b7, $b16;
        java.util.List $r41;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        $r11 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.location.LocationProviderInterface) $r12;

        if r2 != null goto label1;

        return;

     label1:
        $r13 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r14 = virtualinvoke $r13.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.ArrayList) $r14;

        $r15 = new android.os.WorkSource;

        specialinvoke $r15.<android.os.WorkSource: void <init>()>();

        r4 = $r15;

        $r16 = new com.android.internal.location.ProviderRequest;

        specialinvoke $r16.<com.android.internal.location.ProviderRequest: void <init>()>();

        r5 = $r16;

        if r3 == null goto label8;

        r6 = virtualinvoke r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r38 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.android.server.LocationManagerService$UpdateRecord) $r38;

        $r37 = r7.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i10 = $r37.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $i11 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i10);

        $z7 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isCurrentProfile(int)>($i11);

        if $z7 == 0 goto label3;

        $r40 = r7.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i14 = $r40.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $r39 = r7.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r43 = $r39.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $r42 = r7.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i13 = $r42.<com.android.server.LocationManagerService$Receiver: int mAllowedResolutionLevel>;

        $z8 = virtualinvoke r0.<com.android.server.LocationManagerService: boolean checkLocationAccess(int,java.lang.String,int)>($i14, $r43, $i13);

        if $z8 == 0 goto label3;

        r8 = r7.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $r41 = r5.<com.android.internal.location.ProviderRequest: java.util.List locationRequests>;

        interfaceinvoke $r41.<java.util.List: boolean add(java.lang.Object)>(r8);

        $l12 = virtualinvoke r8.<android.location.LocationRequest: long getInterval()>();

        $l15 = r5.<com.android.internal.location.ProviderRequest: long interval>;

        $b16 = $l12 cmp $l15;

        if $b16 >= 0 goto label3;

        r5.<com.android.internal.location.ProviderRequest: boolean reportLocation> = 1;

        $l17 = virtualinvoke r8.<android.location.LocationRequest: long getInterval()>();

        r5.<com.android.internal.location.ProviderRequest: long interval> = $l17;

     label3:
        goto label2;

     label4:
        $z2 = r5.<com.android.internal.location.ProviderRequest: boolean reportLocation>;

        if $z2 == 0 goto label8;

        $l1 = r5.<com.android.internal.location.ProviderRequest: long interval>;

        $l3 = $l1 + 1000L;

        $l2 = $l3 * 3L;

        l18 = $l2 / 2L;

        r44 = virtualinvoke r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label5:
        $z3 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r23 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.android.server.LocationManagerService$UpdateRecord) $r23;

        $r24 = r9.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i5 = $r24.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $i6 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i5);

        $z4 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isCurrentProfile(int)>($i6);

        if $z4 == 0 goto label7;

        r10 = r9.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $l4 = virtualinvoke r10.<android.location.LocationRequest: long getInterval()>();

        $b7 = $l4 cmp l18;

        if $b7 > 0 goto label7;

        $r27 = r9.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r25 = $r27.<com.android.server.LocationManagerService$Receiver: android.os.WorkSource mWorkSource>;

        if $r25 == null goto label6;

        $r32 = r9.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r31 = $r32.<com.android.server.LocationManagerService$Receiver: android.os.WorkSource mWorkSource>;

        $i9 = virtualinvoke $r31.<android.os.WorkSource: int size()>();

        if $i9 <= 0 goto label6;

        $r30 = r9.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r36 = $r30.<com.android.server.LocationManagerService$Receiver: android.os.WorkSource mWorkSource>;

        $r35 = virtualinvoke $r36.<android.os.WorkSource: java.lang.String getName(int)>(0);

        if $r35 == null goto label6;

        $r34 = r9.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r33 = $r34.<com.android.server.LocationManagerService$Receiver: android.os.WorkSource mWorkSource>;

        virtualinvoke r4.<android.os.WorkSource: boolean add(android.os.WorkSource)>($r33);

        goto label7;

     label6:
        $r26 = r9.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $i8 = $r26.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $r28 = r9.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r29 = $r28.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        virtualinvoke r4.<android.os.WorkSource: boolean add(int,java.lang.String)>($i8, $r29);

     label7:
        goto label5;

     label8:
        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label9;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider request: ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r22);

     label9:
        interfaceinvoke r2.<com.android.server.location.LocationProviderInterface: void setRequest(com.android.internal.location.ProviderRequest,android.os.WorkSource)>(r5, r4);

        return;
    }

    private com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener, int, int, java.lang.String, android.os.WorkSource, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.ILocationListener r1, $r13;
        int i0, i1;
        java.lang.String r2;
        android.os.WorkSource r3;
        boolean z0;
        android.os.IBinder r4, $r12;
        com.android.server.LocationManagerService$Receiver r5, $r9;
        android.os.RemoteException r6, $r14;
        java.util.HashMap $r7, $r10;
        java.lang.Object $r8;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.ILocationListener;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: android.os.WorkSource;

        z0 := @parameter5: boolean;

        r4 = interfaceinvoke r1.<android.location.ILocationListener: android.os.IBinder asBinder()>();

        $r7 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (com.android.server.LocationManagerService$Receiver) $r8;

        if r5 != null goto label4;

        $r9 = new com.android.server.LocationManagerService$Receiver;

        specialinvoke $r9.<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(r0, r1, null, i0, i1, r2, r3, z0);

        r5 = $r9;

        $r10 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

     label1:
        $r13 = virtualinvoke r5.<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>();

        $r12 = interfaceinvoke $r13.<android.location.ILocationListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r12.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r5, 0);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        r6 = $r14;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "linkToDeath failed:", r6);

        return null;

     label4:
        return r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent, int, int, java.lang.String, android.os.WorkSource, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.app.PendingIntent r1;
        int i0, i1;
        java.lang.String r2;
        android.os.WorkSource r3;
        boolean z0;
        com.android.server.LocationManagerService$Receiver r4, $r7;
        java.util.HashMap $r5, $r8;
        java.lang.Object $r6;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.app.PendingIntent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: android.os.WorkSource;

        z0 := @parameter5: boolean;

        $r5 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.LocationManagerService$Receiver) $r6;

        if r4 != null goto label1;

        $r7 = new com.android.server.LocationManagerService$Receiver;

        specialinvoke $r7.<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(r0, null, r1, i0, i1, r2, r3, z0);

        r4 = $r7;

        $r8 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

     label1:
        return r4;
    }

    private android.location.LocationRequest createSanitizedRequest(android.location.LocationRequest, int)
    {
        com.android.server.LocationManagerService r0;
        android.location.LocationRequest r1, r2, $r3;
        int i0, $i5;
        long $l1, $l2, $l4, $l6, $l8;
        byte $b3, $b7, $b9;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.LocationRequest;

        i0 := @parameter1: int;

        $r3 = new android.location.LocationRequest;

        specialinvoke $r3.<android.location.LocationRequest: void <init>(android.location.LocationRequest)>(r1);

        r2 = $r3;

        if i0 >= 2 goto label5;

        $i5 = virtualinvoke r2.<android.location.LocationRequest: int getQuality()>();

        lookupswitch($i5)
        {
            case 100: goto label1;
            case 203: goto label2;
            default: goto label3;
        };

     label1:
        virtualinvoke r2.<android.location.LocationRequest: android.location.LocationRequest setQuality(int)>(102);

        goto label3;

     label2:
        virtualinvoke r2.<android.location.LocationRequest: android.location.LocationRequest setQuality(int)>(201);

     label3:
        $l6 = virtualinvoke r2.<android.location.LocationRequest: long getInterval()>();

        $b7 = $l6 cmp 600000L;

        if $b7 >= 0 goto label4;

        virtualinvoke r2.<android.location.LocationRequest: android.location.LocationRequest setInterval(long)>(600000L);

     label4:
        $l8 = virtualinvoke r2.<android.location.LocationRequest: long getFastestInterval()>();

        $b9 = $l8 cmp 600000L;

        if $b9 >= 0 goto label5;

        virtualinvoke r2.<android.location.LocationRequest: android.location.LocationRequest setFastestInterval(long)>(600000L);

     label5:
        $l1 = virtualinvoke r2.<android.location.LocationRequest: long getFastestInterval()>();

        $l2 = virtualinvoke r2.<android.location.LocationRequest: long getInterval()>();

        $b3 = $l1 cmp $l2;

        if $b3 <= 0 goto label6;

        $l4 = virtualinvoke r1.<android.location.LocationRequest: long getInterval()>();

        virtualinvoke r1.<android.location.LocationRequest: android.location.LocationRequest setFastestInterval(long)>($l4);

     label6:
        return r2;
    }

    private void checkPackageName(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, r4, $r10, $r14, $r20;
        int i0, i1, i2;
        java.lang.String[] r2, r3;
        android.content.pm.PackageManager $r5;
        java.lang.SecurityException $r6, $r11, $r17;
        java.lang.StringBuilder $r7, $r8, $r9, $r12, $r13, $r15, $r16, $r18, $r19;
        boolean $z0;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r17 = new java.lang.SecurityException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid package name: ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.SecurityException: void <init>(java.lang.String)>($r20);

        throw $r17;

     label1:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r5 = r0.<com.android.server.LocationManagerService: android.content.pm.PackageManager mPackageManager>;

        r2 = virtualinvoke $r5.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        if r2 != null goto label2;

        $r11 = new java.lang.SecurityException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid UID ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label2:
        r3 = r2;

        i1 = lengthof r3;

        i2 = 0;

     label3:
        if i2 >= i1 goto label5;

        r4 = r3[i2];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label4;

        return;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        $r6 = new java.lang.SecurityException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid package name: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw $r6;
    }

    private void checkPendingIntent(android.app.PendingIntent)
    {
        com.android.server.LocationManagerService r0;
        android.app.PendingIntent r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.app.PendingIntent;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid pending intent: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        return;
    }

    private com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener, android.app.PendingIntent, int, int, java.lang.String, android.os.WorkSource, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.ILocationListener r1;
        android.app.PendingIntent r2;
        int i0, i1;
        java.lang.String r3;
        android.os.WorkSource r4;
        boolean z0;
        com.android.server.LocationManagerService$Receiver $r5, $r6;
        java.lang.IllegalArgumentException $r7, $r8;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.ILocationListener;

        r2 := @parameter1: android.app.PendingIntent;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: android.os.WorkSource;

        z0 := @parameter6: boolean;

        if r2 != null goto label1;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("need either listener or intent");

        throw $r8;

     label1:
        if r2 == null goto label2;

        if r1 == null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot register both listener and intent");

        throw $r7;

     label2:
        if r2 == null goto label3;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkPendingIntent(android.app.PendingIntent)>(r2);

        $r6 = specialinvoke r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(r2, i0, i1, r3, r4, z0);

        return $r6;

     label3:
        $r5 = specialinvoke r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,int,int,java.lang.String,android.os.WorkSource,boolean)>(r1, i0, i1, r3, r4, z0);

        return $r5;
    }

    public void requestLocationUpdates(android.location.LocationRequest, android.location.ILocationListener, android.app.PendingIntent, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.LocationRequest r1, r6;
        android.location.ILocationListener r2;
        android.app.PendingIntent r3;
        java.lang.String r4, $r11;
        int i0, i1, i2, $i4;
        android.os.WorkSource r5;
        boolean z0;
        long l3;
        java.lang.Object r7, $r12;
        com.android.server.LocationManagerService$Receiver r8;
        java.lang.Throwable r9, r10, $r13, $r14;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.LocationRequest;

        r2 := @parameter1: android.location.ILocationListener;

        r3 := @parameter2: android.app.PendingIntent;

        r4 := @parameter3: java.lang.String;

        if r1 != null goto label01;

        r1 = <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST>;

     label01:
        specialinvoke r0.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(r4);

        i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        $r11 = virtualinvoke r1.<android.location.LocationRequest: java.lang.String getProvider()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(i0, $r11);

        r5 = virtualinvoke r1.<android.location.LocationRequest: android.os.WorkSource getWorkSource()>();

        if r5 == null goto label02;

        $i4 = virtualinvoke r5.<android.os.WorkSource: int size()>();

        if $i4 <= 0 goto label02;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkDeviceStatsAllowed()>();

     label02:
        z0 = virtualinvoke r1.<android.location.LocationRequest: boolean getHideFromAppOps()>();

        if z0 == 0 goto label03;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkUpdateAppOpsAllowed()>();

     label03:
        r6 = specialinvoke r0.<com.android.server.LocationManagerService: android.location.LocationRequest createSanitizedRequest(android.location.LocationRequest,int)>(r1, i0);

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        virtualinvoke r0.<com.android.server.LocationManagerService: boolean checkLocationAccess(int,java.lang.String,int)>(i2, r4, i0);

        $r12 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r7 = $r12;

        entermonitor $r12;

     label05:
        r8 = specialinvoke r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(r2, r3, i1, i2, r4, r5, z0);

        specialinvoke r0.<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(android.location.LocationRequest,com.android.server.LocationManagerService$Receiver,int,int,java.lang.String)>(r6, r8, i1, i2, r4);

        exitmonitor r7;

     label06:
        goto label09;

     label07:
        $r13 := @caughtexception;

        r9 = $r13;

        exitmonitor r7;

     label08:
        throw r9;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        goto label12;

     label10:
        $r14 := @caughtexception;

        r10 = $r14;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw r10;

     label12:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void requestLocationUpdatesLocked(android.location.LocationRequest, com.android.server.LocationManagerService$Receiver, int, int, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.LocationRequest r1;
        com.android.server.LocationManagerService$Receiver r2;
        int i0, i1, $i2;
        java.lang.String r3, r4, $r18, $r20, $r32;
        com.android.server.location.LocationProviderInterface r5;
        com.android.server.LocationManagerService$UpdateRecord r6, r7, $r10;
        boolean z0, $z1;
        java.util.HashMap $r8, $r12;
        java.lang.Object $r9, $r11;
        java.lang.StringBuilder $r13, $r15, $r16, $r17, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;
        java.lang.IllegalArgumentException $r14, $r31;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.LocationRequest;

        r2 := @parameter1: com.android.server.LocationManagerService$Receiver;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        if r1 != null goto label1;

        r1 = <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST>;

     label1:
        r4 = virtualinvoke r1.<android.location.LocationRequest: java.lang.String getProvider()>();

        if r4 != null goto label2;

        $r31 = new java.lang.IllegalArgumentException;

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider name must not be null");

        throw $r31;

     label2:
        $z1 = <com.android.server.LocationManagerService: boolean D>;

        if $z1 == 0 goto label3;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("request ");

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r2);

        $r20 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r32);

     label3:
        $r8 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (com.android.server.location.LocationProviderInterface) $r9;

        if r5 != null goto label4;

        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider doesn\'t exist: ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label4:
        $r10 = new com.android.server.LocationManagerService$UpdateRecord;

        specialinvoke $r10.<com.android.server.LocationManagerService$UpdateRecord: void <init>(com.android.server.LocationManagerService,java.lang.String,android.location.LocationRequest,com.android.server.LocationManagerService$Receiver)>(r0, r4, r1, r2);

        r6 = $r10;

        $r12 = r2.<com.android.server.LocationManagerService$Receiver: java.util.HashMap mUpdateRecords>;

        $r11 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r6);

        r7 = (com.android.server.LocationManagerService$UpdateRecord) $r11;

        if r7 == null goto label5;

        virtualinvoke r7.<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked(boolean)>(0);

     label5:
        z0 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByUserSettingsLocked(java.lang.String,int)>(r4, i1);

        if z0 == 0 goto label6;

        specialinvoke r0.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>(r4);

        goto label7;

     label6:
        virtualinvoke r2.<com.android.server.LocationManagerService$Receiver: boolean callProviderEnabledLocked(java.lang.String,boolean)>(r4, 0);

     label7:
        virtualinvoke r2.<com.android.server.LocationManagerService$Receiver: void updateMonitoring(boolean)>(1);

        return;
    }

    public void removeUpdates(android.location.ILocationListener, android.app.PendingIntent, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.ILocationListener r1;
        android.app.PendingIntent r2;
        java.lang.String r3;
        int i0, i1;
        java.lang.Object r4, $r8;
        com.android.server.LocationManagerService$Receiver r5;
        long l2;
        java.lang.Throwable r6, r7, $r9, $r10;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.ILocationListener;

        r2 := @parameter1: android.app.PendingIntent;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(r3);

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r8 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r4 = $r8;

        entermonitor $r8;

     label01:
        r5 = specialinvoke r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)>(r1, r2, i0, i1, r3, null, 0);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        specialinvoke r0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>(r5);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        goto label06;

     label04:
        $r10 := @caughtexception;

        r6 = $r10;

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r6;

     label06:
        exitmonitor r4;

     label07:
        goto label10;

     label08:
        $r9 := @caughtexception;

        r7 = $r9;

        exitmonitor r4;

     label09:
        throw r7;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)
    {
        com.android.server.LocationManagerService r0;
        com.android.server.LocationManagerService$Receiver r1, r2;
        java.lang.Throwable r3, $r20;
        java.util.Iterator r4, r25;
        com.android.server.LocationManagerService$UpdateRecord r5;
        boolean $z0, $z1, $z2, $z3, $z5;
        java.lang.Object $r6, $r8, $r10, $r13;
        java.util.HashMap $r7, r24;
        java.util.HashSet $r9, r23;
        java.util.Collection $r11;
        java.util.Set $r12;
        android.os.IBinder $r14;
        android.location.ILocationListener $r15;
        java.lang.StringBuilder $r17, $r18, $r21;
        java.lang.String $r19, $r22, r26;
        int $i0;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: com.android.server.LocationManagerService$Receiver;

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label01;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("remove ");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        $r19 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("LocationManagerService", $r22);

     label01:
        $r7 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r6 = r1.<com.android.server.LocationManagerService$Receiver: java.lang.Object mKey>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r6);

        if $r8 == null goto label06;

        $z5 = virtualinvoke r1.<com.android.server.LocationManagerService$Receiver: boolean isListener()>();

        if $z5 == 0 goto label06;

        $r15 = virtualinvoke r1.<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>();

        $r14 = interfaceinvoke $r15.<android.location.ILocationListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r14.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r1, 0);

        r2 = r1;

        entermonitor r1;

     label02:
        virtualinvoke r1.<com.android.server.LocationManagerService$Receiver: void clearPendingBroadcastsLocked()>();

        exitmonitor r2;

     label03:
        goto label06;

     label04:
        $r20 := @caughtexception;

        r3 = $r20;

        exitmonitor r2;

     label05:
        throw r3;

     label06:
        virtualinvoke r1.<com.android.server.LocationManagerService$Receiver: void updateMonitoring(boolean)>(0);

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        r23 = $r9;

        r24 = r1.<com.android.server.LocationManagerService$Receiver: java.util.HashMap mUpdateRecords>;

        if r24 == null goto label09;

        $r11 = virtualinvoke r24.<java.util.HashMap: java.util.Collection values()>();

        r4 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.LocationManagerService$UpdateRecord) $r13;

        virtualinvoke r5.<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked(boolean)>(0);

        goto label07;

     label08:
        $r12 = virtualinvoke r24.<java.util.HashMap: java.util.Set keySet()>();

        virtualinvoke r23.<java.util.HashSet: boolean addAll(java.util.Collection)>($r12);

     label09:
        r25 = virtualinvoke r23.<java.util.HashSet: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r10 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.lang.String) $r10;

        $z2 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(r26);

        if $z2 != 0 goto label11;

        goto label10;

     label11:
        specialinvoke r0.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>(r26);

        goto label10;

     label12:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
    }

    private void applyAllProviderRequirementsLocked()
    {
        com.android.server.LocationManagerService r0;
        java.util.Iterator r1;
        com.android.server.location.LocationProviderInterface r2;
        java.util.ArrayList $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.String $r5, $r6;

        r0 := @this: com.android.server.LocationManagerService;

        $r3 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.location.LocationProviderInterface) $r4;

        $r5 = interfaceinvoke r2.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $z1 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>($r5);

        if $z1 != 0 goto label2;

        goto label1;

     label2:
        $r6 = interfaceinvoke r2.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>($r6);

        goto label1;

     label3:
        return;
    }

    public android.location.Location getLastLocation(android.location.LocationRequest, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.LocationRequest r1;
        java.lang.String r2, r3, $r8, $r25, $r26, $r32;
        int i0, i1;
        long l2;
        com.android.server.location.LocationProviderInterface r4;
        android.location.Location r5, $r15, $r16, $r19, r36, r37, r38;
        java.lang.Throwable r6, r7, $r31, $r34;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.android.server.location.LocationBlacklist $r9;
        java.lang.Object $r10, $r12, $r13, $r20, r35;
        java.util.HashMap $r11, $r14, $r18;
        com.android.server.location.LocationFudger $r17;
        java.lang.StringBuilder $r21, $r22, $r23, $r24, $r27, $r28, $r29, $r30, $r33;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.LocationRequest;

        r2 := @parameter1: java.lang.String;

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label01;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getLastLocation: ");

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r32);

     label01:
        if r1 != null goto label02;

        r1 = <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST>;

     label02:
        i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(r2);

        $r8 = virtualinvoke r1.<android.location.LocationRequest: java.lang.String getProvider()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(i0, $r8);

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r9 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        $z1 = virtualinvoke $r9.<com.android.server.location.LocationBlacklist: boolean isBlacklisted(java.lang.String)>(r2);

        if $z1 == 0 goto label05;

        $z5 = <com.android.server.LocationManagerService: boolean D>;

        if $z5 == 0 goto label04;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not returning last loc for blacklisted app: ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r26);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return null;

     label05:
        $z2 = virtualinvoke r0.<com.android.server.LocationManagerService: boolean reportLocationAccessNoThrow(int,java.lang.String,int)>(i1, r2, i0);

        if $z2 != 0 goto label07;

        $z4 = <com.android.server.LocationManagerService: boolean D>;

        if $z4 == 0 goto label06;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not returning last loc for no op app: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r25);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return null;

     label07:
        $r10 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r35 = $r10;

        entermonitor $r10;

     label08:
        r3 = virtualinvoke r1.<android.location.LocationRequest: java.lang.String getProvider()>();

        if r3 != null goto label09;

        r3 = "fused";

     label09:
        $r11 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (com.android.server.location.LocationProviderInterface) $r12;

        if r4 != null goto label11;

        exitmonitor r35;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return null;

     label11:
        $z3 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByUserSettingsLocked(java.lang.String,int)>(r3, i1);

        if $z3 != 0 goto label13;

        exitmonitor r35;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return null;

     label13:
        if i0 >= 2 goto label14;

        $r18 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        $r20 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        r36 = (android.location.Location) $r20;

        goto label15;

     label14:
        $r14 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        $r13 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        r36 = (android.location.Location) $r13;

     label15:
        if r36 != null goto label17;

        exitmonitor r35;

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return null;

     label17:
        if i0 >= 2 goto label20;

        r37 = virtualinvoke r36.<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>("noGPSLocation");

        if r37 == null goto label19;

        $r16 = new android.location.Location;

        $r17 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationFudger mLocationFudger>;

        $r19 = virtualinvoke $r17.<com.android.server.location.LocationFudger: android.location.Location getOrCreate(android.location.Location)>(r37);

        specialinvoke $r16.<android.location.Location: void <init>(android.location.Location)>($r19);

        r5 = $r16;

        exitmonitor r35;

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r5;

     label19:
        goto label22;

     label20:
        $r15 = new android.location.Location;

        specialinvoke $r15.<android.location.Location: void <init>(android.location.Location)>(r36);

        r38 = $r15;

        exitmonitor r35;

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r38;

     label22:
        exitmonitor r35;

     label23:
        goto label26;

     label24:
        $r31 := @caughtexception;

        r6 = $r31;

        exitmonitor r35;

     label25:
        throw r6;

     label26:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return null;

     label27:
        $r34 := @caughtexception;

        r7 = $r34;

     label28:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r7;

        catch java.lang.Throwable from label08 to label10 with label24;
        catch java.lang.Throwable from label11 to label12 with label24;
        catch java.lang.Throwable from label13 to label16 with label24;
        catch java.lang.Throwable from label17 to label18 with label24;
        catch java.lang.Throwable from label19 to label21 with label24;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
        catch java.lang.Throwable from label03 to label04 with label27;
        catch java.lang.Throwable from label05 to label06 with label27;
        catch java.lang.Throwable from label07 to label10 with label27;
        catch java.lang.Throwable from label11 to label12 with label27;
        catch java.lang.Throwable from label13 to label16 with label27;
        catch java.lang.Throwable from label17 to label18 with label27;
        catch java.lang.Throwable from label19 to label21 with label27;
        catch java.lang.Throwable from label22 to label26 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
    }

    public void requestGeofence(android.location.LocationRequest, android.location.Geofence, android.app.PendingIntent, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.LocationRequest r1, r5;
        android.location.Geofence r2;
        android.app.PendingIntent r3;
        java.lang.String r4, $r7, $r16;
        int i0, i1, $i3;
        long l2;
        java.lang.Throwable r6, $r17;
        boolean $z0;
        com.android.server.location.GeofenceManager $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.LocationRequest;

        r2 := @parameter1: android.location.Geofence;

        r3 := @parameter2: android.app.PendingIntent;

        r4 := @parameter3: java.lang.String;

        if r1 != null goto label1;

        r1 = <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST>;

     label1:
        i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForGeofenceUse(int)>(i0);

        specialinvoke r0.<com.android.server.LocationManagerService: void checkPendingIntent(android.app.PendingIntent)>(r3);

        specialinvoke r0.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(r4);

        $r7 = virtualinvoke r1.<android.location.LocationRequest: java.lang.String getProvider()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(i0, $r7);

        r5 = specialinvoke r0.<com.android.server.LocationManagerService: android.location.LocationRequest createSanitizedRequest(android.location.LocationRequest,int)>(r1, i0);

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestGeofence: ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r16);

     label2:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        if $i3 == 0 goto label3;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", "proximity alerts are currently available only to the primary user");

        return;

     label3:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label4:
        $r8 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeofenceManager mGeofenceManager>;

        virtualinvoke $r8.<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,int,int,java.lang.String)>(r5, r2, r3, i0, i1, r4);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        goto label8;

     label6:
        $r17 := @caughtexception;

        r6 = $r17;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r6;

     label8:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void removeGeofence(android.location.Geofence, android.app.PendingIntent, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.Geofence r1;
        android.app.PendingIntent r2;
        java.lang.String r3, $r10;
        long l0;
        java.lang.Throwable r4, $r12;
        int $i1;
        boolean $z0;
        com.android.server.location.GeofenceManager $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.Geofence;

        r2 := @parameter1: android.app.PendingIntent;

        r3 := @parameter2: java.lang.String;

        $i1 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForGeofenceUse(int)>($i1);

        specialinvoke r0.<com.android.server.LocationManagerService: void checkPendingIntent(android.app.PendingIntent)>(r2);

        specialinvoke r0.<com.android.server.LocationManagerService: void checkPackageName(java.lang.String)>(r3);

        $z0 = <com.android.server.LocationManagerService: boolean D>;

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeGeofence: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r10);

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeofenceManager mGeofenceManager>;

        virtualinvoke $r5.<com.android.server.location.GeofenceManager: void removeFence(android.location.Geofence,android.app.PendingIntent)>(r1, r2);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label6;

     label4:
        $r12 := @caughtexception;

        r4 = $r12;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean addGpsStatusListener(android.location.IGpsStatusListener, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.IGpsStatusListener r1;
        java.lang.String r2;
        int i0, i1;
        long l2;
        boolean z0, $z1;
        java.lang.Throwable r3, $r6;
        android.location.IGpsStatusProvider $r4, $r5;
        android.os.RemoteException $r7, r8;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.IGpsStatusListener;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.LocationManagerService: android.location.IGpsStatusProvider mGpsStatusProvider>;

        if $r4 != null goto label01;

        return 0;

     label01:
        i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(i0, "gps");

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $z1 = virtualinvoke r0.<com.android.server.LocationManagerService: boolean checkLocationAccess(int,java.lang.String,int)>(i1, r2, i0);

        if $z1 != 0 goto label04;

        z0 = 0;

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return z0;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        goto label07;

     label05:
        $r6 := @caughtexception;

        r3 = $r6;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r3;

     label07:
        $r5 = r0.<com.android.server.LocationManagerService: android.location.IGpsStatusProvider mGpsStatusProvider>;

        interfaceinvoke $r5.<android.location.IGpsStatusProvider: void addGpsStatusListener(android.location.IGpsStatusListener)>(r1);

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

        r8 = $r7;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "mGpsStatusProvider.addGpsStatusListener failed", r8);

        return 0;

     label10:
        return 1;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch android.os.RemoteException from label07 to label08 with label09;
    }

    public void removeGpsStatusListener(android.location.IGpsStatusListener)
    {
        com.android.server.LocationManagerService r0;
        android.location.IGpsStatusListener r1;
        java.lang.Object r2, $r5;
        java.lang.Exception r3, $r7;
        java.lang.Throwable r4, $r8;
        android.location.IGpsStatusProvider $r6;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.IGpsStatusListener;

        $r5 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.LocationManagerService: android.location.IGpsStatusProvider mGpsStatusProvider>;

        interfaceinvoke $r6.<android.location.IGpsStatusProvider: void removeGpsStatusListener(android.location.IGpsStatusListener)>(r1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "mGpsStatusProvider.removeGpsStatusListener failed", r3);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean addGpsMeasurementsListener(android.location.IGpsMeasurementsListener, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.IGpsMeasurementsListener r1;
        java.lang.String r2;
        int i0, i1;
        long l2;
        boolean z0, $z1;
        java.lang.Throwable r3, $r5;
        com.android.server.location.GpsMeasurementsProvider $r4;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.IGpsMeasurementsListener;

        r2 := @parameter1: java.lang.String;

        i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(i0, "gps");

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        z0 = virtualinvoke r0.<com.android.server.LocationManagerService: boolean checkLocationAccess(int,java.lang.String,int)>(i1, r2, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r3;

     label5:
        if z0 != 0 goto label6;

        return 0;

     label6:
        $r4 = r0.<com.android.server.LocationManagerService: com.android.server.location.GpsMeasurementsProvider mGpsMeasurementsProvider>;

        $z1 = virtualinvoke $r4.<com.android.server.location.GpsMeasurementsProvider: boolean addListener(android.os.IInterface)>(r1);

        return $z1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean removeGpsMeasurementsListener(android.location.IGpsMeasurementsListener)
    {
        com.android.server.LocationManagerService r0;
        android.location.IGpsMeasurementsListener r1;
        com.android.server.location.GpsMeasurementsProvider $r2;
        boolean $z0;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.IGpsMeasurementsListener;

        $r2 = r0.<com.android.server.LocationManagerService: com.android.server.location.GpsMeasurementsProvider mGpsMeasurementsProvider>;

        $z0 = virtualinvoke $r2.<com.android.server.location.GpsMeasurementsProvider: boolean removeListener(android.os.IInterface)>(r1);

        return $z0;
    }

    public boolean addGpsNavigationMessageListener(android.location.IGpsNavigationMessageListener, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        android.location.IGpsNavigationMessageListener r1;
        java.lang.String r2;
        int i0, i1;
        long l2;
        boolean z0, $z1;
        java.lang.Throwable r3, $r5;
        com.android.server.location.GpsNavigationMessageProvider $r4;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.IGpsNavigationMessageListener;

        r2 := @parameter1: java.lang.String;

        i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>(i0, "gps");

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        z0 = virtualinvoke r0.<com.android.server.LocationManagerService: boolean checkLocationAccess(int,java.lang.String,int)>(i1, r2, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r3;

     label5:
        if z0 != 0 goto label6;

        return 0;

     label6:
        $r4 = r0.<com.android.server.LocationManagerService: com.android.server.location.GpsNavigationMessageProvider mGpsNavigationMessageProvider>;

        $z1 = virtualinvoke $r4.<com.android.server.location.GpsNavigationMessageProvider: boolean addListener(android.os.IInterface)>(r1);

        return $z1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean removeGpsNavigationMessageListener(android.location.IGpsNavigationMessageListener)
    {
        com.android.server.LocationManagerService r0;
        android.location.IGpsNavigationMessageListener r1;
        com.android.server.location.GpsNavigationMessageProvider $r2;
        boolean $z0;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.IGpsNavigationMessageListener;

        $r2 = r0.<com.android.server.LocationManagerService: com.android.server.location.GpsNavigationMessageProvider mGpsNavigationMessageProvider>;

        $z0 = virtualinvoke $r2.<com.android.server.location.GpsNavigationMessageProvider: boolean removeListener(android.os.IInterface)>(r1);

        return $z0;
    }

    public boolean sendExtraCommand(java.lang.String, java.lang.String, android.os.Bundle)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, r2;
        android.os.Bundle r3;
        java.lang.Object r4, $r8, $r10;
        com.android.server.location.LocationProviderInterface r5;
        java.lang.Throwable r6, $r13;
        int $i0, $i1;
        android.content.Context $r7;
        java.util.HashMap $r9;
        boolean $z0;
        java.lang.NullPointerException $r11;
        java.lang.SecurityException $r12;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        if r1 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>()>();

        throw $r11;

     label1:
        $i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>($i0, r1);

        $r7 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r7.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.ACCESS_LOCATION_EXTRA_COMMANDS");

        if $i1 == 0 goto label2;

        $r12 = new java.lang.SecurityException;

        specialinvoke $r12.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_LOCATION_EXTRA_COMMANDS permission");

        throw $r12;

     label2:
        $r8 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r4 = $r8;

        entermonitor $r8;

     label3:
        $r9 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (com.android.server.location.LocationProviderInterface) $r10;

        if r5 != null goto label5;

        exitmonitor r4;

     label4:
        return 0;

     label5:
        $z0 = interfaceinvoke r5.<com.android.server.location.LocationProviderInterface: boolean sendExtraCommand(java.lang.String,android.os.Bundle)>(r2, r3);

        exitmonitor r4;

     label6:
        return $z0;

     label7:
        $r13 := @caughtexception;

        r6 = $r13;

        exitmonitor r4;

     label8:
        throw r6;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public boolean sendNiResponse(int, int)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1, $i2, $i3;
        android.location.INetInitiatedListener $r2;
        boolean $z0;
        java.lang.SecurityException $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = staticinvoke <android.os.Process: int myUid()>();

        if $i2 == $i3 goto label1;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("calling sendNiResponse from outside of the system is not allowed");

        throw $r3;

     label1:
        $r2 = r0.<com.android.server.LocationManagerService: android.location.INetInitiatedListener mNetInitiatedListener>;

        $z0 = interfaceinvoke $r2.<android.location.INetInitiatedListener: boolean sendNiResponse(int,int)>(i0, i1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocationManagerService", "RemoteException in LocationManagerService.sendNiResponse");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1;
        com.android.server.location.LocationProviderInterface r2;
        java.lang.Object r3, $r6, $r7, $r9;
        java.lang.Throwable r4, $r11;
        java.util.HashMap $r5, $r8;
        int $i0;
        com.android.internal.location.ProviderProperties $r10;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r6 != null goto label1;

        return null;

     label1:
        $i0 = specialinvoke r0.<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()>();

        specialinvoke r0.<com.android.server.LocationManagerService: void checkResolutionLevelIsSufficientForProviderUse(int,java.lang.String)>($i0, r1);

        $r7 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r3 = $r7;

        entermonitor $r7;

     label2:
        $r8 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.location.LocationProviderInterface) $r9;

        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r3;

     label5:
        throw r4;

     label6:
        if r2 != null goto label7;

        return null;

     label7:
        $r10 = interfaceinvoke r2.<com.android.server.location.LocationProviderInterface: com.android.internal.location.ProviderProperties getProperties()>();

        return $r10;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean isProviderEnabled(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r6;
        int i0;
        long l1;
        java.lang.Object r2, $r7, $r9;
        com.android.server.location.LocationProviderInterface r3;
        boolean z0, $z1, z2;
        java.lang.Throwable r4, r5, $r10, $r11;
        java.util.HashMap $r8;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        $r6 = "fused";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label01;

        return 0;

     label01:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r7 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r2 = $r7;

        entermonitor $r7;

     label03:
        $r8 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.location.LocationProviderInterface) $r9;

        if r3 != null goto label05;

        z0 = 0;

        exitmonitor r2;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z0;

     label05:
        z2 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByUserSettingsLocked(java.lang.String,int)>(r1, i0);

        exitmonitor r2;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z2;

     label07:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label08:
        throw r4;

     label09:
        $r11 := @caughtexception;

        r5 = $r11;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r5;

        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label02 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label10 with label09;
    }

    private boolean isUidALocationProvider(int)
    {
        com.android.server.LocationManagerService r0;
        int i0;
        java.util.Iterator r1;
        com.android.server.location.LocationProviderProxy r2;
        com.android.server.location.GeocoderProxy $r3, $r7;
        java.util.ArrayList $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5;
        java.lang.String $r6, $r8;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        if i0 != 1000 goto label1;

        return 1;

     label1:
        $r3 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r3 == null goto label2;

        $r7 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        $r8 = virtualinvoke $r7.<com.android.server.location.GeocoderProxy: java.lang.String getConnectedPackageName()>();

        $z2 = specialinvoke r0.<com.android.server.LocationManagerService: boolean doesUidHavePackage(int,java.lang.String)>(i0, $r8);

        if $z2 == 0 goto label2;

        return 1;

     label2:
        $r4 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProxyProviders>;

        r1 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.location.LocationProviderProxy) $r5;

        $r6 = virtualinvoke r2.<com.android.server.location.LocationProviderProxy: java.lang.String getConnectedPackageName()>();

        $z1 = specialinvoke r0.<com.android.server.LocationManagerService: boolean doesUidHavePackage(int,java.lang.String)>(i0, $r6);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        goto label3;

     label5:
        return 0;
    }

    private void checkCallerIsProvider()
    {
        com.android.server.LocationManagerService r0;
        android.content.Context $r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.SecurityException $r2;

        r0 := @this: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INSTALL_LOCATION_PROVIDER");

        if $i0 != 0 goto label1;

        return;

     label1:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isUidALocationProvider(int)>($i1);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("need INSTALL_LOCATION_PROVIDER permission, or UID of a currently bound location provider");

        throw $r2;
    }

    private boolean doesUidHavePackage(int, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1, i2;
        java.lang.String r1, r4;
        java.lang.String[] r2, r3;
        android.content.pm.PackageManager $r5;
        boolean $z0;

        r0 := @this: com.android.server.LocationManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        return 0;

     label1:
        $r5 = r0.<com.android.server.LocationManagerService: android.content.pm.PackageManager mPackageManager>;

        r2 = virtualinvoke $r5.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        if r2 != null goto label2;

        return 0;

     label2:
        r3 = r2;

        i1 = lengthof r3;

        i2 = 0;

     label3:
        if i2 >= i1 goto label5;

        r4 = r3[i2];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return 0;
    }

    public void reportLocation(android.location.Location, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.Location r1;
        boolean z0, $z1;
        android.os.Message r2;
        com.android.server.LocationManagerService$LocationWorkerHandler $r3, $r4, $r5;
        byte $b0;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.Location;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkCallerIsProvider()>();

        $z1 = virtualinvoke r1.<android.location.Location: boolean isComplete()>();

        if $z1 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropping incomplete location: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r9);

        return;

     label1:
        $r3 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r3.<com.android.server.LocationManagerService$LocationWorkerHandler: void removeMessages(int,java.lang.Object)>(1, r1);

        $r4 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        r2 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r4, 1, r1);

        if z0 == 0 goto label2;

        $b0 = 1;

        goto label3;

     label2:
        $b0 = 0;

     label3:
        r2.<android.os.Message: int arg1> = $b0;

        $r5 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r5.<com.android.server.LocationManagerService$LocationWorkerHandler: boolean sendMessageAtFrontOfQueue(android.os.Message)>(r2);

        return;
    }

    private static boolean shouldBroadcastSafe(android.location.Location, android.location.Location, com.android.server.LocationManagerService$UpdateRecord, long)
    {
        android.location.Location r0, r1;
        com.android.server.LocationManagerService$UpdateRecord r2;
        long l0, l1, l2, $l3, $l4, $l5, $l7, $l11;
        double d0, $d1;
        android.location.LocationRequest $r3, $r4, $r5, $r6;
        byte $b6, $b8, $b10, $b12;
        float $f0, $f1;
        int $i9;

        r0 := @parameter0: android.location.Location;

        r1 := @parameter1: android.location.Location;

        r2 := @parameter2: com.android.server.LocationManagerService$UpdateRecord;

        l0 := @parameter3: long;

        if r1 != null goto label1;

        return 1;

     label1:
        $r3 = r2.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        l1 = virtualinvoke $r3.<android.location.LocationRequest: long getFastestInterval()>();

        $l3 = virtualinvoke r0.<android.location.Location: long getElapsedRealtimeNanos()>();

        $l4 = virtualinvoke r1.<android.location.Location: long getElapsedRealtimeNanos()>();

        $l5 = $l3 - $l4;

        l2 = $l5 / 1000000L;

        $l7 = l1 - 100L;

        $b6 = l2 cmp $l7;

        if $b6 >= 0 goto label2;

        return 0;

     label2:
        $r4 = r2.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $f0 = virtualinvoke $r4.<android.location.LocationRequest: float getSmallestDisplacement()>();

        d0 = (double) $f0;

        $b8 = d0 cmpl 0.0;

        if $b8 <= 0 goto label3;

        $f1 = virtualinvoke r0.<android.location.Location: float distanceTo(android.location.Location)>(r1);

        $d1 = (double) $f1;

        $b12 = $d1 cmpg d0;

        if $b12 > 0 goto label3;

        return 0;

     label3:
        $r5 = r2.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $i9 = virtualinvoke $r5.<android.location.LocationRequest: int getNumUpdates()>();

        if $i9 > 0 goto label4;

        return 0;

     label4:
        $r6 = r2.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $l11 = virtualinvoke $r6.<android.location.LocationRequest: long getExpireAt()>();

        $b10 = $l11 cmp l0;

        if $b10 >= 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    private void handleLocationChangedLocked(android.location.Location, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.Location r1, r4, r5, r6, r8, r15, $r48, $r65, $r73, r75, r76, r77, r78;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        long l0, l1, l2, $l6, $l7, $l14, l20;
        java.lang.String r2, $r16, $r30, $r32, $r37, $r41, $r46, $r50, $r53, $r55, $r58, $r68, $r70;
        com.android.server.location.LocationProviderInterface r3;
        java.util.ArrayList r7, r10, r12, $r33, $r34;
        android.os.Bundle r9, $r25;
        int i3, i4, $i8, $i9, $i10, $i12, $i13, $i15, $i18, $i19;
        java.util.Iterator r11, r79, r81;
        com.android.server.LocationManagerService$Receiver r13, r80;
        com.android.server.LocationManagerService$UpdateRecord r14, r82;
        java.util.HashMap $r17, $r18, $r20, $r23, $r64, $r74;
        java.lang.Object $r19, $r21, $r22, $r24, $r26, $r27, $r28;
        byte $b5, $b11, $b16, $b17;
        com.android.server.location.LocationBlacklist $r29;
        android.location.LocationRequest $r31, $r35, $r44;
        java.lang.StringBuilder $r36, $r38, $r39, $r40, $r42, $r43, $r45, $r47, $r49, $r51, $r52, $r54, $r56, $r57, $r59, $r60, $r61, $r62, $r63, $r66, $r67, $r69, $r71;
        com.android.server.location.LocationFudger $r72;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.Location;

        z0 := @parameter1: boolean;

        $z2 = <com.android.server.LocationManagerService: boolean D>;

        if $z2 == 0 goto label01;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("incoming location: ");

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r68 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r68);

     label01:
        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        if z0 == 0 goto label02;

        $r16 = "passive";

        goto label03;

     label02:
        $r16 = virtualinvoke r1.<android.location.Location: java.lang.String getProvider()>();

     label03:
        r2 = $r16;

        $r18 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r19 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (com.android.server.location.LocationProviderInterface) $r19;

        if r3 != null goto label04;

        return;

     label04:
        r4 = virtualinvoke r1.<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>("noGPSLocation");

        $r17 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        $r22 = virtualinvoke $r17.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (android.location.Location) $r22;

        if r5 != null goto label05;

        $r65 = new android.location.Location;

        specialinvoke $r65.<android.location.Location: void <init>(java.lang.String)>(r2);

        r5 = $r65;

        $r64 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r64.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5);

        goto label06;

     label05:
        r75 = virtualinvoke r5.<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>("noGPSLocation");

        if r4 != null goto label06;

        if r75 == null goto label06;

        virtualinvoke r1.<android.location.Location: void setExtraLocation(java.lang.String,android.location.Location)>("noGPSLocation", r75);

     label06:
        virtualinvoke r5.<android.location.Location: void set(android.location.Location)>(r1);

        $r20 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        $r21 = virtualinvoke $r20.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r6 = (android.location.Location) $r21;

        if r6 != null goto label07;

        $r73 = new android.location.Location;

        specialinvoke $r73.<android.location.Location: void <init>(android.location.Location)>(r1);

        r6 = $r73;

        $r74 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r74.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r6);

     label07:
        $l6 = virtualinvoke r1.<android.location.Location: long getElapsedRealtimeNanos()>();

        $l7 = virtualinvoke r6.<android.location.Location: long getElapsedRealtimeNanos()>();

        l1 = $l6 - $l7;

        $b5 = l1 cmp 600000000000L;

        if $b5 <= 0 goto label08;

        virtualinvoke r6.<android.location.Location: void set(android.location.Location)>(r1);

     label08:
        r76 = virtualinvoke r6.<android.location.Location: android.location.Location getExtraLocation(java.lang.String)>("noGPSLocation");

        $r23 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r24 = virtualinvoke $r23.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r7 = (java.util.ArrayList) $r24;

        if r7 == null goto label09;

        $i8 = virtualinvoke r7.<java.util.ArrayList: int size()>();

        if $i8 != 0 goto label10;

     label09:
        return;

     label10:
        r8 = null;

        if r76 == null goto label11;

        $r72 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationFudger mLocationFudger>;

        r8 = virtualinvoke $r72.<com.android.server.location.LocationFudger: android.location.Location getOrCreate(android.location.Location)>(r76);

     label11:
        l2 = interfaceinvoke r3.<com.android.server.location.LocationProviderInterface: long getStatusUpdateTime()>();

        $r25 = new android.os.Bundle;

        specialinvoke $r25.<android.os.Bundle: void <init>()>();

        r9 = $r25;

        i3 = interfaceinvoke r3.<com.android.server.location.LocationProviderInterface: int getStatus(android.os.Bundle)>(r9);

        r10 = null;

        r12 = null;

        r11 = virtualinvoke r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z3 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label30;

        $r27 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.android.server.LocationManagerService$UpdateRecord) $r27;

        r13 = r14.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        z1 = 0;

        $i9 = r13.<com.android.server.LocationManagerService$Receiver: int mUid>;

        i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i9);

        $z6 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isCurrentProfile(int)>(i4);

        if $z6 != 0 goto label13;

        $i18 = r13.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $z16 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isUidALocationProvider(int)>($i18);

        if $z16 != 0 goto label13;

        $z15 = <com.android.server.LocationManagerService: boolean D>;

        if $z15 == 0 goto label12;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skipping loc update for background user ");

        $r62 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r61 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (current user: ");

        $i19 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        $r60 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r59 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", app: ");

        $r58 = r13.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $r57 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r71 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r70 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r70);

        goto label12;

     label13:
        $r29 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        $r30 = r13.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $z8 = virtualinvoke $r29.<com.android.server.location.LocationBlacklist: boolean isBlacklisted(java.lang.String)>($r30);

        if $z8 == 0 goto label14;

        $z14 = <com.android.server.LocationManagerService: boolean D>;

        if $z14 == 0 goto label12;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skipping loc update for blacklisted app: ");

        $r50 = r13.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $r56 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r55);

        goto label12;

     label14:
        $i13 = r13.<com.android.server.LocationManagerService$Receiver: int mUid>;

        $r32 = r13.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $i12 = r13.<com.android.server.LocationManagerService$Receiver: int mAllowedResolutionLevel>;

        $z7 = virtualinvoke r0.<com.android.server.LocationManagerService: boolean reportLocationAccessNoThrow(int,java.lang.String,int)>($i13, $r32, $i12);

        if $z7 != 0 goto label15;

        $z13 = <com.android.server.LocationManagerService: boolean D>;

        if $z13 == 0 goto label12;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skipping loc update for no op app: ");

        $r46 = r13.<com.android.server.LocationManagerService$Receiver: java.lang.String mPackageName>;

        $r52 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r53);

        goto label12;

     label15:
        $i10 = r13.<com.android.server.LocationManagerService$Receiver: int mAllowedResolutionLevel>;

        if $i10 >= 2 goto label16;

        r77 = r8;

        goto label17;

     label16:
        r77 = r5;

     label17:
        if r77 == null goto label22;

        r15 = r14.<com.android.server.LocationManagerService$UpdateRecord: android.location.Location mLastFixBroadcast>;

        if r15 == null goto label18;

        $z12 = staticinvoke <com.android.server.LocationManagerService: boolean shouldBroadcastSafe(android.location.Location,android.location.Location,com.android.server.LocationManagerService$UpdateRecord,long)>(r77, r15, r14, l0);

        if $z12 == 0 goto label22;

     label18:
        if r15 != null goto label19;

        $r48 = new android.location.Location;

        specialinvoke $r48.<android.location.Location: void <init>(android.location.Location)>(r77);

        r78 = $r48;

        r14.<com.android.server.LocationManagerService$UpdateRecord: android.location.Location mLastFixBroadcast> = r78;

        goto label20;

     label19:
        virtualinvoke r15.<android.location.Location: void set(android.location.Location)>(r77);

     label20:
        $z11 = virtualinvoke r13.<com.android.server.LocationManagerService$Receiver: boolean callLocationChangedLocked(android.location.Location)>(r77);

        if $z11 != 0 goto label21;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoteException calling onLocationChanged on ");

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r41);

        z1 = 1;

     label21:
        $r44 = r14.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        virtualinvoke $r44.<android.location.LocationRequest: void decrementNumUpdates()>();

     label22:
        l20 = r14.<com.android.server.LocationManagerService$UpdateRecord: long mLastStatusBroadcast>;

        $b11 = l2 cmp l20;

        if $b11 <= 0 goto label24;

        $b16 = l20 cmp 0L;

        if $b16 != 0 goto label23;

        if i3 == 2 goto label24;

     label23:
        r14.<com.android.server.LocationManagerService$UpdateRecord: long mLastStatusBroadcast> = l2;

        $z10 = virtualinvoke r13.<com.android.server.LocationManagerService$Receiver: boolean callStatusChangedLocked(java.lang.String,int,android.os.Bundle)>(r2, i3, r9);

        if $z10 != 0 goto label24;

        z1 = 1;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoteException calling onStatusChanged on ");

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r37);

     label24:
        $r31 = r14.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $i15 = virtualinvoke $r31.<android.location.LocationRequest: int getNumUpdates()>();

        if $i15 <= 0 goto label25;

        $r35 = r14.<com.android.server.LocationManagerService$UpdateRecord: android.location.LocationRequest mRequest>;

        $l14 = virtualinvoke $r35.<android.location.LocationRequest: long getExpireAt()>();

        $b17 = $l14 cmp l0;

        if $b17 >= 0 goto label27;

     label25:
        if r12 != null goto label26;

        $r34 = new java.util.ArrayList;

        specialinvoke $r34.<java.util.ArrayList: void <init>()>();

        r12 = $r34;

     label26:
        virtualinvoke r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r14);

     label27:
        if z1 == 0 goto label29;

        if r10 != null goto label28;

        $r33 = new java.util.ArrayList;

        specialinvoke $r33.<java.util.ArrayList: void <init>()>();

        r10 = $r33;

     label28:
        $z9 = virtualinvoke r10.<java.util.ArrayList: boolean contains(java.lang.Object)>(r13);

        if $z9 != 0 goto label29;

        virtualinvoke r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r13);

     label29:
        goto label12;

     label30:
        if r10 == null goto label32;

        r79 = virtualinvoke r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label31:
        $z5 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label32;

        $r28 = interfaceinvoke r79.<java.util.Iterator: java.lang.Object next()>();

        r80 = (com.android.server.LocationManagerService$Receiver) $r28;

        specialinvoke r0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>(r80);

        goto label31;

     label32:
        if r12 == null goto label35;

        r81 = virtualinvoke r12.<java.util.ArrayList: java.util.Iterator iterator()>();

     label33:
        $z4 = interfaceinvoke r81.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label34;

        $r26 = interfaceinvoke r81.<java.util.Iterator: java.lang.Object next()>();

        r82 = (com.android.server.LocationManagerService$UpdateRecord) $r26;

        virtualinvoke r82.<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked(boolean)>(1);

        goto label33;

     label34:
        specialinvoke r0.<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)>(r2);

     label35:
        return;
    }

    private boolean isMockProvider(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        java.util.HashMap $r5;
        boolean $z0;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $z0 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void handleLocationChanged(android.location.Location, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.Location r1, r2, $r6;
        boolean z0, $z1, $z2, $z3;
        java.lang.String r3;
        java.lang.Object r4, $r7;
        java.lang.Throwable r5, $r9;
        com.android.server.location.PassiveProvider $r8;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: android.location.Location;

        z0 := @parameter1: boolean;

        $r6 = new android.location.Location;

        specialinvoke $r6.<android.location.Location: void <init>(android.location.Location)>(r1);

        r2 = $r6;

        r3 = virtualinvoke r2.<android.location.Location: java.lang.String getProvider()>();

        $z1 = virtualinvoke r2.<android.location.Location: boolean isFromMockProvider()>();

        if $z1 != 0 goto label1;

        $z3 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isMockProvider(java.lang.String)>(r3);

        if $z3 == 0 goto label1;

        virtualinvoke r2.<android.location.Location: void setIsFromMockProvider(boolean)>(1);

     label1:
        $r7 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r4 = $r7;

        entermonitor $r7;

     label2:
        $z2 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(r3);

        if $z2 == 0 goto label4;

        if z0 != 0 goto label3;

        $r8 = r0.<com.android.server.LocationManagerService: com.android.server.location.PassiveProvider mPassiveProvider>;

        virtualinvoke $r8.<com.android.server.location.PassiveProvider: void updateLocation(android.location.Location)>(r2);

     label3:
        specialinvoke r0.<com.android.server.LocationManagerService: void handleLocationChangedLocked(android.location.Location,boolean)>(r2, z0);

     label4:
        exitmonitor r4;

     label5:
        goto label8;

     label6:
        $r9 := @caughtexception;

        r5 = $r9;

        exitmonitor r4;

     label7:
        throw r5;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean geocoderIsPresent()
    {
        com.android.server.LocationManagerService r0;
        com.android.server.location.GeocoderProxy $r1;
        boolean $z0;

        r0 := @this: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getFromLocation(double, double, int, android.location.GeocoderParams, java.util.List)
    {
        com.android.server.LocationManagerService r0;
        double d0, d1;
        int i0;
        android.location.GeocoderParams r1;
        java.util.List r2;
        com.android.server.location.GeocoderProxy $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.LocationManagerService;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        r1 := @parameter3: android.location.GeocoderParams;

        r2 := @parameter4: java.util.List;

        $r3 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r3 == null goto label1;

        $r4 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        $r5 = virtualinvoke $r4.<com.android.server.location.GeocoderProxy: java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)>(d0, d1, i0, r1, r2);

        return $r5;

     label1:
        return null;
    }

    public java.lang.String getFromLocationName(java.lang.String, double, double, double, double, int, android.location.GeocoderParams, java.util.List)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r6;
        double d0, d1, d2, d3;
        int i0;
        android.location.GeocoderParams r2;
        java.util.List r3;
        com.android.server.location.GeocoderProxy $r4, $r5;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        i0 := @parameter5: int;

        r2 := @parameter6: android.location.GeocoderParams;

        r3 := @parameter7: java.util.List;

        $r4 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        if $r4 == null goto label1;

        $r5 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy mGeocodeProvider>;

        $r6 = virtualinvoke $r5.<com.android.server.location.GeocoderProxy: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)>(r1, d0, d1, d2, d3, i0, r2, r3);

        return $r6;

     label1:
        return null;
    }

    private void checkMockPermissionsSafe()
    {
        com.android.server.LocationManagerService r0;
        boolean z0, $z1;
        android.content.Context $r1, $r3;
        android.content.ContentResolver $r2;
        int $i0, $i1;
        java.lang.SecurityException $r4, $r5;

        r0 := @this: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "mock_location", 0);

        if $i0 != 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        if z0 != 0 goto label3;

        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_MOCK_LOCATION secure setting");

        throw $r5;

     label3:
        $r3 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.ACCESS_MOCK_LOCATION");

        if $i1 == 0 goto label4;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_MOCK_LOCATION permission");

        throw $r4;

     label4:
        return;
    }

    public void addTestProvider(java.lang.String, com.android.internal.location.ProviderProperties)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r6, $r8, $r11, $r12;
        com.android.internal.location.ProviderProperties r2;
        long l0;
        java.lang.Object r3, $r7, $r10;
        com.android.server.location.LocationProviderInterface r4;
        java.lang.Throwable r5, $r14;
        boolean $z0, $z1, $z2, $z3;
        java.util.HashMap $r9;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.location.ProviderProperties;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r6 = "passive";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot mock the passive location provider");

        throw $r13;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r7 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r3 = $r7;

        entermonitor $r7;

     label2:
        $r8 = "gps";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label3;

        $r11 = "network";

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 != 0 goto label3;

        $r12 = "fused";

        $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label4;

     label3:
        $r9 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.location.LocationProviderInterface) $r10;

        if r4 == null goto label4;

        specialinvoke r0.<com.android.server.LocationManagerService: void removeProviderLocked(com.android.server.location.LocationProviderInterface)>(r4);

     label4:
        specialinvoke r0.<com.android.server.LocationManagerService: void addTestProviderLocked(java.lang.String,com.android.internal.location.ProviderProperties)>(r1, r2);

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        exitmonitor r3;

     label5:
        goto label8;

     label6:
        $r14 := @caughtexception;

        r5 = $r14;

        exitmonitor r3;

     label7:
        throw r5;

     label8:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void addTestProviderLocked(java.lang.String, com.android.internal.location.ProviderProperties)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r18;
        com.android.internal.location.ProviderProperties r2;
        com.android.server.location.MockProvider r3, $r6;
        java.util.HashMap $r4, $r7, $r9, $r11;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.location.ProviderProperties;

        $r4 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r5 == null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" already exists");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label1:
        $r6 = new com.android.server.location.MockProvider;

        specialinvoke $r6.<com.android.server.location.MockProvider: void <init>(java.lang.String,android.location.ILocationManager,com.android.internal.location.ProviderProperties)>(r1, r0, r2);

        r3 = $r6;

        specialinvoke r0.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(r3);

        $r7 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        $r9 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, null);

        $r11 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, null);

        return;
    }

    public void removeTestProvider(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r22;
        java.lang.Object r2, $r6, $r8, $r10, $r14;
        com.android.server.location.MockProvider r3;
        long l0;
        com.android.server.location.LocationProviderInterface r4, $r11;
        java.lang.Throwable r5, $r24;
        java.util.HashMap $r7, $r9, $r12, $r13, $r15;
        java.lang.StringBuilder $r18, $r20, $r21, $r23;
        java.lang.IllegalArgumentException $r19;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r6 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        virtualinvoke r0.<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String)>(r1);

        virtualinvoke r0.<com.android.server.LocationManagerService: void clearTestProviderLocation(java.lang.String)>(r1);

        virtualinvoke r0.<com.android.server.LocationManagerService: void clearTestProviderStatus(java.lang.String)>(r1);

        $r7 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (com.android.server.location.MockProvider) $r8;

        if r3 != null goto label2;

        $r19 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r19;

     label2:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r9 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (com.android.server.location.LocationProviderInterface) $r10;

        specialinvoke r0.<com.android.server.LocationManagerService: void removeProviderLocked(com.android.server.location.LocationProviderInterface)>($r11);

        $r12 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRealProviders>;

        $r14 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.location.LocationProviderInterface) $r14;

        if r4 == null goto label3;

        specialinvoke r0.<com.android.server.LocationManagerService: void addProviderLocked(com.android.server.location.LocationProviderInterface)>(r4);

     label3:
        $r13 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, null);

        $r15 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, null);

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r24 := @caughtexception;

        r5 = $r24;

        exitmonitor r2;

     label6:
        throw r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setTestProviderLocation(java.lang.String, android.location.Location)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r15;
        android.location.Location r2;
        java.lang.Object r3, $r6, $r8;
        com.android.server.location.MockProvider r4;
        long l0;
        java.lang.Throwable r5, $r14;
        java.util.HashMap $r7;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.location.Location;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r6 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.location.MockProvider) $r8;

        if r4 != null goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label2:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        virtualinvoke r4.<com.android.server.location.MockProvider: void setLocation(android.location.Location)>(r2);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r14 := @caughtexception;

        r5 = $r14;

        exitmonitor r3;

     label5:
        throw r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void clearTestProviderLocation(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r13;
        java.lang.Object r2, $r5, $r7;
        com.android.server.location.MockProvider r3;
        java.lang.Throwable r4, $r14;
        java.util.HashMap $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r5 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.location.MockProvider) $r7;

        if r3 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label2:
        virtualinvoke r3.<com.android.server.location.MockProvider: void clearLocation()>();

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r2;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setTestProviderEnabled(java.lang.String, boolean)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r18;
        boolean z0;
        java.lang.Object r2, $r5, $r7;
        com.android.server.location.MockProvider r3;
        long l0;
        java.lang.Throwable r4, $r17;
        java.util.HashMap $r6;
        java.util.Set $r8, $r9, $r10, $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r16;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r5 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.location.MockProvider) $r7;

        if r3 != null goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r12;

     label2:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if z0 == 0 goto label3;

        virtualinvoke r3.<com.android.server.location.MockProvider: void enable()>();

        $r10 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r11 = r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        interfaceinvoke $r11.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        goto label4;

     label3:
        virtualinvoke r3.<com.android.server.location.MockProvider: void disable()>();

        $r8 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        interfaceinvoke $r8.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        $r9 = r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>(r1);

     label4:
        specialinvoke r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r17 := @caughtexception;

        r4 = $r17;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void clearTestProviderEnabled(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r14;
        java.lang.Object r2, $r5, $r7;
        com.android.server.location.MockProvider r3;
        long l0;
        java.lang.Throwable r4, $r16;
        java.util.HashMap $r6;
        java.util.Set $r8, $r9;
        java.lang.StringBuilder $r10, $r12, $r13, $r15;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r5 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.location.MockProvider) $r7;

        if r3 != null goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label2:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r8 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        interfaceinvoke $r8.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        $r9 = r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        interfaceinvoke $r9.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r16 := @caughtexception;

        r4 = $r16;

        exitmonitor r2;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setTestProviderStatus(java.lang.String, int, android.os.Bundle, long)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r15;
        int i0;
        android.os.Bundle r2;
        long l1;
        java.lang.Object r3, $r6, $r8;
        com.android.server.location.MockProvider r4;
        java.lang.Throwable r5, $r14;
        java.util.HashMap $r7;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.Bundle;

        l1 := @parameter3: long;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r6 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.location.MockProvider) $r8;

        if r4 != null goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label2:
        virtualinvoke r4.<com.android.server.location.MockProvider: void setStatus(int,android.os.Bundle,long)>(i0, r2, l1);

        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r14 := @caughtexception;

        r5 = $r14;

        exitmonitor r3;

     label5:
        throw r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void clearTestProviderStatus(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1, $r13;
        java.lang.Object r2, $r5, $r7;
        com.android.server.location.MockProvider r3;
        java.lang.Throwable r4, $r14;
        java.util.HashMap $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r5 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.location.MockProvider) $r7;

        if r3 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label2:
        virtualinvoke r3.<com.android.server.location.MockProvider: void clearStatus()>();

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r2;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void log(java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LocationManagerService", 2);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("LocationManagerService", r1);

     label1:
        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.LocationManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.Object r4, $r11, $r33, $r46, $r49, $r52, $r55, $r62, $r67, $r68, $r71, $r72, $r74, $r77, $r79, $r80, $r96, $r99, $r104, $r109, $r112;
        java.util.Iterator r5, r7, r121, r123, r127, r131, r135, r137, r139, r141;
        com.android.server.LocationManagerService$Receiver r6;
        com.android.server.LocationManagerService$UpdateRecord r8;
        java.lang.Throwable r9, $r120;
        android.content.Context $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.HashMap $r12, $r14, $r18, $r20, $r22, $r29, $r48;
        java.util.Collection $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.util.Set $r15, $r17, $r19, $r21, $r24, $r26, $r45, $r54, $r60;
        com.android.server.location.LocationRequestStatistics $r16;
        com.android.server.location.GeofenceManager $r23;
        com.android.server.location.LocationBlacklist $r28;
        java.util.ArrayList $r30, $r111;
        com.android.server.location.LocationFudger $r31;
        java.lang.StringBuilder $r32, $r35, $r36, $r39, $r40, $r43, $r44, $r50, $r51, $r56, $r57, $r59, $r61, $r63, $r64, $r66, $r69, $r70, $r75, $r76, $r78, $r81, $r83, $r84, $r85, $r86, $r87, $r89, $r90, $r92, $r93, $r94, $r97, $r98, $r102, $r103, $r105, $r106, $r107, $r113, $r114, $r115, $r116, $r117, $r118;
        java.lang.String $r34, $r37, $r38, $r41, $r42, $r47, $r58, $r65, $r73, $r82, $r88, $r91, $r95, $r100, $r101, $r108, $r110, $r119, r129, r133, r136, r138;
        com.android.server.location.MockProvider $r53;
        java.util.Map$Entry r122, r124, r128, r132, r140;
        com.android.server.location.LocationRequestStatistics$PackageProviderKey r125;
        com.android.server.location.LocationRequestStatistics$PackageStatistics r126;
        android.location.Location r130, r134;
        com.android.server.location.LocationProviderInterface r142;
        com.android.server.location.LocationProviderProxy r143;

        r0 := @this: com.android.server.LocationManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r10 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r10.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label01;

        $r107 = new java.lang.StringBuilder;

        specialinvoke $r107.<java.lang.StringBuilder: void <init>()>();

        $r115 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump LocationManagerService from from pid=");

        $i5 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r119);

        return;

     label01:
        $r11 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        r4 = $r11;

        entermonitor $r11;

     label02:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Current Location Manager state:");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Location Listeners:");

        $r12 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        $r13 = virtualinvoke $r12.<java.util.HashMap: java.util.Collection values()>();

        r5 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r104 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.android.server.LocationManagerService$Receiver) $r104;

        $r103 = new java.lang.StringBuilder;

        specialinvoke $r103.<java.lang.StringBuilder: void <init>()>();

        $r106 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r105 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r108 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r108);

        goto label03;

     label04:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Active Records by Provider:");

        $r14 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r15 = virtualinvoke $r14.<java.util.HashMap: java.util.Set entrySet()>();

        r121 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r121.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r99 = interfaceinvoke r121.<java.util.Iterator: java.lang.Object next()>();

        r122 = (java.util.Map$Entry) $r99;

        $r98 = new java.lang.StringBuilder;

        specialinvoke $r98.<java.lang.StringBuilder: void <init>()>();

        $r97 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r96 = interfaceinvoke r122.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r95 = (java.lang.String) $r96;

        $r94 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r95);

        $r93 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r110 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r110);

        $r109 = interfaceinvoke r122.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r111 = (java.util.ArrayList) $r109;

        r7 = virtualinvoke $r111.<java.util.ArrayList: java.util.Iterator iterator()>();

     label06:
        $z11 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label07;

        $r112 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.android.server.LocationManagerService$UpdateRecord) $r112;

        $r114 = new java.lang.StringBuilder;

        specialinvoke $r114.<java.lang.StringBuilder: void <init>()>();

        $r113 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      ");

        $r102 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r101 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r101);

        goto label06;

     label07:
        goto label05;

     label08:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Historical Records by Provider:");

        $r16 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationRequestStatistics mRequestStatistics>;

        $r18 = $r16.<com.android.server.location.LocationRequestStatistics: java.util.HashMap statistics>;

        $r17 = virtualinvoke $r18.<java.util.HashMap: java.util.Set entrySet()>();

        r123 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke r123.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r79 = interfaceinvoke r123.<java.util.Iterator: java.lang.Object next()>();

        r124 = (java.util.Map$Entry) $r79;

        $r80 = interfaceinvoke r124.<java.util.Map$Entry: java.lang.Object getKey()>();

        r125 = (com.android.server.location.LocationRequestStatistics$PackageProviderKey) $r80;

        $r77 = interfaceinvoke r124.<java.util.Map$Entry: java.lang.Object getValue()>();

        r126 = (com.android.server.location.LocationRequestStatistics$PackageStatistics) $r77;

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r92 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r91 = r125.<com.android.server.location.LocationRequestStatistics$PackageProviderKey: java.lang.String packageName>;

        $r90 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r91);

        $r89 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r88 = r125.<com.android.server.location.LocationRequestStatistics$PackageProviderKey: java.lang.String providerName>;

        $r87 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r88);

        $r86 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r85 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r126);

        $r100 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r100);

        goto label09;

     label10:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Last Known Locations:");

        $r20 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocation>;

        $r19 = virtualinvoke $r20.<java.util.HashMap: java.util.Set entrySet()>();

        r127 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke r127.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r74 = interfaceinvoke r127.<java.util.Iterator: java.lang.Object next()>();

        r128 = (java.util.Map$Entry) $r74;

        $r71 = interfaceinvoke r128.<java.util.Map$Entry: java.lang.Object getKey()>();

        r129 = (java.lang.String) $r71;

        $r72 = interfaceinvoke r128.<java.util.Map$Entry: java.lang.Object getValue()>();

        r130 = (android.location.Location) $r72;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r83 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r129);

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r81 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r130);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r82);

        goto label11;

     label12:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Last Known Locations Coarse Intervals:");

        $r22 = r0.<com.android.server.LocationManagerService: java.util.HashMap mLastLocationCoarseInterval>;

        $r21 = virtualinvoke $r22.<java.util.HashMap: java.util.Set entrySet()>();

        r131 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z4 = interfaceinvoke r131.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label14;

        $r68 = interfaceinvoke r131.<java.util.Iterator: java.lang.Object next()>();

        r132 = (java.util.Map$Entry) $r68;

        $r67 = interfaceinvoke r132.<java.util.Map$Entry: java.lang.Object getKey()>();

        r133 = (java.lang.String) $r67;

        $r62 = interfaceinvoke r132.<java.util.Map$Entry: java.lang.Object getValue()>();

        r134 = (android.location.Location) $r62;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r63 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r133);

        $r75 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r134);

        $r73 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r73);

        goto label13;

     label14:
        $r23 = r0.<com.android.server.LocationManagerService: com.android.server.location.GeofenceManager mGeofenceManager>;

        virtualinvoke $r23.<com.android.server.location.GeofenceManager: void dump(java.io.PrintWriter)>(r2);

        $r24 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $i2 = interfaceinvoke $r24.<java.util.Set: int size()>();

        if $i2 <= 0 goto label16;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Enabled Providers:");

        $r60 = r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        r135 = interfaceinvoke $r60.<java.util.Set: java.util.Iterator iterator()>();

     label15:
        $z10 = interfaceinvoke r135.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label16;

        $r55 = interfaceinvoke r135.<java.util.Iterator: java.lang.Object next()>();

        r136 = (java.lang.String) $r55;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r66 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r136);

        $r65 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r65);

        goto label15;

     label16:
        $r26 = r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        $i1 = interfaceinvoke $r26.<java.util.Set: int size()>();

        if $i1 <= 0 goto label18;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Disabled Providers:");

        $r54 = r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        r137 = interfaceinvoke $r54.<java.util.Set: java.util.Iterator iterator()>();

     label17:
        $z9 = interfaceinvoke r137.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label18;

        $r49 = interfaceinvoke r137.<java.util.Iterator: java.lang.Object next()>();

        r138 = (java.lang.String) $r49;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r59 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r138);

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r58);

        goto label17;

     label18:
        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("  ");

        $r28 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationBlacklist mBlacklist>;

        virtualinvoke $r28.<com.android.server.location.LocationBlacklist: void dump(java.io.PrintWriter)>(r2);

        $r29 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $i3 = virtualinvoke $r29.<java.util.HashMap: int size()>();

        if $i3 <= 0 goto label20;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  Mock Providers:");

        $r48 = r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r45 = virtualinvoke $r48.<java.util.HashMap: java.util.Set entrySet()>();

        r139 = interfaceinvoke $r45.<java.util.Set: java.util.Iterator iterator()>();

     label19:
        $z7 = interfaceinvoke r139.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label20;

        $r46 = interfaceinvoke r139.<java.util.Iterator: java.lang.Object next()>();

        r140 = (java.util.Map$Entry) $r46;

        $r52 = interfaceinvoke r140.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r53 = (com.android.server.location.MockProvider) $r52;

        virtualinvoke $r53.<com.android.server.location.MockProvider: void dump(java.io.PrintWriter,java.lang.String)>(r2, "      ");

        goto label19;

     label20:
        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("  fudger: ");

        $r31 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationFudger mLocationFudger>;

        virtualinvoke $r31.<com.android.server.location.LocationFudger: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        $i4 = lengthof r3;

        if $i4 <= 0 goto label22;

        $r47 = "short";

        $r41 = r3[0];

        $z8 = virtualinvoke $r47.<java.lang.String: boolean equals(java.lang.Object)>($r41);

        if $z8 == 0 goto label22;

        exitmonitor r4;

     label21:
        return;

     label22:
        $r30 = r0.<com.android.server.LocationManagerService: java.util.ArrayList mProviders>;

        r141 = virtualinvoke $r30.<java.util.ArrayList: java.util.Iterator iterator()>();

     label23:
        $z5 = interfaceinvoke r141.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label25;

        $r33 = interfaceinvoke r141.<java.util.Iterator: java.lang.Object next()>();

        r142 = (com.android.server.location.LocationProviderInterface) $r33;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r37 = interfaceinvoke r142.<com.android.server.location.LocationProviderInterface: java.lang.String getName()>();

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Internal State");

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r34);

        $z6 = r142 instanceof com.android.server.location.LocationProviderProxy;

        if $z6 == 0 goto label24;

        r143 = (com.android.server.location.LocationProviderProxy) r142;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r38 = virtualinvoke r143.<com.android.server.location.LocationProviderProxy: java.lang.String getConnectedPackageName()>();

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r42);

     label24:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(":");

        interfaceinvoke r142.<com.android.server.location.LocationProviderInterface: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        goto label23;

     label25:
        exitmonitor r4;

     label26:
        goto label29;

     label27:
        $r120 := @caughtexception;

        r9 = $r120;

        exitmonitor r4;

     label28:
        throw r9;

     label29:
        return;

        catch java.lang.Throwable from label02 to label21 with label27;
        catch java.lang.Throwable from label22 to label26 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
    }

    static java.lang.Object access$000(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static java.util.HashMap access$100(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: java.util.HashMap mReceivers>;

        return $r1;
    }

    static void access$200(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;

        r0 := @parameter0: com.android.server.LocationManagerService;

        specialinvoke r0.<com.android.server.LocationManagerService: void applyAllProviderRequirementsLocked()>();

        return;
    }

    static void access$300(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;

        r0 := @parameter0: com.android.server.LocationManagerService;

        specialinvoke r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        return;
    }

    static void access$400(com.android.server.LocationManagerService, int)
    {
        com.android.server.LocationManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.LocationManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.LocationManagerService: void switchUser(int)>(i0);

        return;
    }

    static int access$500(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        int $i0;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $i0 = r0.<com.android.server.LocationManagerService: int mCurrentUserId>;

        return $i0;
    }

    static int access$600(com.android.server.LocationManagerService, int, int)
    {
        com.android.server.LocationManagerService r0;
        int i0, i1, $i2;

        r0 := @parameter0: com.android.server.LocationManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = specialinvoke r0.<com.android.server.LocationManagerService: int getAllowedResolutionLevel(int,int)>(i0, i1);

        return $i2;
    }

    static android.os.PowerManager access$700(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        android.os.PowerManager $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: android.os.PowerManager mPowerManager>;

        return $r1;
    }

    static boolean access$800(com.android.server.LocationManagerService, java.lang.String)
    {
        com.android.server.LocationManagerService r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.LocationManagerService;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)>(r1);

        return $z0;
    }

    static java.util.HashMap access$900(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: java.util.HashMap mProvidersByName>;

        return $r1;
    }

    static android.content.Context access$1000(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        return $r1;
    }

    static android.app.AppOpsManager access$1100(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        android.app.AppOpsManager $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: android.app.AppOpsManager mAppOps>;

        return $r1;
    }

    static com.android.server.LocationManagerService$LocationWorkerHandler access$1200(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        com.android.server.LocationManagerService$LocationWorkerHandler $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        return $r1;
    }

    static java.lang.String access$1300(com.android.server.LocationManagerService, int)
    {
        com.android.server.LocationManagerService r0;
        int i0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.LocationManagerService: java.lang.String getResolutionPermission(int)>(i0);

        return $r1;
    }

    static void access$1400(com.android.server.LocationManagerService, com.android.server.LocationManagerService$Receiver)
    {
        com.android.server.LocationManagerService r0;
        com.android.server.LocationManagerService$Receiver r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        r1 := @parameter1: com.android.server.LocationManagerService$Receiver;

        specialinvoke r0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>(r1);

        return;
    }

    static java.util.HashMap access$1600(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        return $r1;
    }

    static com.android.server.location.LocationRequestStatistics access$1700(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService r0;
        com.android.server.location.LocationRequestStatistics $r1;

        r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 = r0.<com.android.server.LocationManagerService: com.android.server.location.LocationRequestStatistics mRequestStatistics>;

        return $r1;
    }

    static void access$1800(com.android.server.LocationManagerService, android.location.Location, boolean)
    {
        com.android.server.LocationManagerService r0;
        android.location.Location r1;
        boolean z0;

        r0 := @parameter0: com.android.server.LocationManagerService;

        r1 := @parameter1: android.location.Location;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.LocationManagerService: void handleLocationChanged(android.location.Location,boolean)>(r1, z0);

        return;
    }

    static void <clinit>()
    {
        boolean $z0;
        android.location.LocationRequest $r0;

        <com.android.server.LocationManagerService: int MAX_PROVIDER_SCHEDULING_JITTER_MS> = 100;

        <com.android.server.LocationManagerService: long HIGH_POWER_INTERVAL_MS> = 300000L;

        <com.android.server.LocationManagerService: long NANOS_PER_MILLI> = 1000000L;

        <com.android.server.LocationManagerService: int MSG_LOCATION_CHANGED> = 1;

        <com.android.server.LocationManagerService: java.lang.String FUSED_LOCATION_SERVICE_ACTION> = "com.android.location.service.FusedLocationProvider";

        <com.android.server.LocationManagerService: java.lang.String NETWORK_LOCATION_SERVICE_ACTION> = "com.android.location.service.v3.NetworkLocationProvider";

        <com.android.server.LocationManagerService: java.lang.String INSTALL_LOCATION_PROVIDER> = "android.permission.INSTALL_LOCATION_PROVIDER";

        <com.android.server.LocationManagerService: java.lang.String ACCESS_LOCATION_EXTRA_COMMANDS> = "android.permission.ACCESS_LOCATION_EXTRA_COMMANDS";

        <com.android.server.LocationManagerService: java.lang.String ACCESS_MOCK_LOCATION> = "android.permission.ACCESS_MOCK_LOCATION";

        <com.android.server.LocationManagerService: int RESOLUTION_LEVEL_FINE> = 2;

        <com.android.server.LocationManagerService: int RESOLUTION_LEVEL_COARSE> = 1;

        <com.android.server.LocationManagerService: int RESOLUTION_LEVEL_NONE> = 0;

        <com.android.server.LocationManagerService: java.lang.String WAKELOCK_KEY> = "LocationManagerService";

        <com.android.server.LocationManagerService: java.lang.String TAG> = "LocationManagerService";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LocationManagerService", 3);

        <com.android.server.LocationManagerService: boolean D> = $z0;

        $r0 = new android.location.LocationRequest;

        specialinvoke $r0.<android.location.LocationRequest: void <init>()>();

        <com.android.server.LocationManagerService: android.location.LocationRequest DEFAULT_LOCATION_REQUEST> = $r0;

        return;
    }
}
