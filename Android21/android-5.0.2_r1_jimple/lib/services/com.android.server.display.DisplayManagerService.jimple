public final class com.android.server.display.DisplayManagerService extends com.android.server.SystemService
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static final java.lang.String FORCE_WIFI_DISPLAY_ENABLE;
    private static final long WAIT_FOR_DEFAULT_DISPLAY_TIMEOUT;
    private static final int MSG_REGISTER_DEFAULT_DISPLAY_ADAPTER;
    private static final int MSG_REGISTER_ADDITIONAL_DISPLAY_ADAPTERS;
    private static final int MSG_DELIVER_DISPLAY_EVENT;
    private static final int MSG_REQUEST_TRAVERSAL;
    private static final int MSG_UPDATE_VIEWPORT;
    private final android.content.Context mContext;
    private final com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler;
    private final android.os.Handler mUiHandler;
    private final com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener;
    private android.view.WindowManagerInternal mWindowManagerInternal;
    private android.hardware.input.InputManagerInternal mInputManagerInternal;
    private android.media.projection.IMediaProjectionManager mProjectionService;
    private final com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot;
    public boolean mSafeMode;
    public boolean mOnlyCore;
    private final boolean mSingleDisplayDemoMode;
    public final android.util.SparseArray mCallbacks;
    private final java.util.ArrayList mDisplayAdapters;
    private final java.util.ArrayList mDisplayDevices;
    private final android.util.SparseArray mLogicalDisplays;
    private int mNextNonDefaultDisplayId;
    private final java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners;
    private com.android.server.display.DisplayPowerController mDisplayPowerController;
    private int mGlobalDisplayState;
    private boolean mPendingTraversal;
    private com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter;
    private int mWifiDisplayScanRequestCount;
    private com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter;
    private final android.hardware.display.DisplayViewport mDefaultViewport;
    private final android.hardware.display.DisplayViewport mExternalTouchViewport;
    private final com.android.server.display.PersistentDataStore mPersistentDataStore;
    private final java.util.ArrayList mTempCallbacks;
    private final android.view.DisplayInfo mTempDisplayInfo;
    private final android.hardware.display.DisplayViewport mTempDefaultViewport;
    private final android.hardware.display.DisplayViewport mTempExternalTouchViewport;
    private final java.util.ArrayList mTempDisplayStateWorkQueue;

    public void <init>(android.content.Context)
    {
        com.android.server.display.DisplayManagerService r0;
        android.content.Context r1;
        com.android.server.display.DisplayManagerService$SyncRoot $r2;
        android.util.SparseArray $r3, $r6;
        java.util.ArrayList $r4, $r5, $r11, $r15;
        java.util.concurrent.CopyOnWriteArrayList $r7;
        android.hardware.display.DisplayViewport $r8, $r9, $r13, $r14;
        com.android.server.display.PersistentDataStore $r10;
        android.view.DisplayInfo $r12;
        com.android.server.DisplayThread $r16;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r17;
        android.os.Handler $r18;
        android.os.Looper $r19;
        boolean $z0;
        com.android.server.display.DisplayManagerService$DisplayAdapterListener $r20;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        $r2 = new com.android.server.display.DisplayManagerService$SyncRoot;

        specialinvoke $r2.<com.android.server.display.DisplayManagerService$SyncRoot: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot> = $r2;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayAdapters> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices> = $r5;

        $r6 = new android.util.SparseArray;

        specialinvoke $r6.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays> = $r6;

        r0.<com.android.server.display.DisplayManagerService: int mNextNonDefaultDisplayId> = 1;

        $r7 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r7.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners> = $r7;

        r0.<com.android.server.display.DisplayManagerService: int mGlobalDisplayState> = 0;

        $r8 = new android.hardware.display.DisplayViewport;

        specialinvoke $r8.<android.hardware.display.DisplayViewport: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mDefaultViewport> = $r8;

        $r9 = new android.hardware.display.DisplayViewport;

        specialinvoke $r9.<android.hardware.display.DisplayViewport: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mExternalTouchViewport> = $r9;

        $r10 = new com.android.server.display.PersistentDataStore;

        specialinvoke $r10.<com.android.server.display.PersistentDataStore: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore> = $r10;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks> = $r11;

        $r12 = new android.view.DisplayInfo;

        specialinvoke $r12.<android.view.DisplayInfo: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.view.DisplayInfo mTempDisplayInfo> = $r12;

        $r13 = new android.hardware.display.DisplayViewport;

        specialinvoke $r13.<android.hardware.display.DisplayViewport: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mTempDefaultViewport> = $r13;

        $r14 = new android.hardware.display.DisplayViewport;

        specialinvoke $r14.<android.hardware.display.DisplayViewport: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mTempExternalTouchViewport> = $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue> = $r15;

        r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext> = r1;

        $r17 = new com.android.server.display.DisplayManagerService$DisplayManagerHandler;

        $r16 = staticinvoke <com.android.server.DisplayThread: com.android.server.DisplayThread get()>();

        $r19 = virtualinvoke $r16.<com.android.server.DisplayThread: android.os.Looper getLooper()>();

        specialinvoke $r17.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: void <init>(com.android.server.display.DisplayManagerService,android.os.Looper)>(r0, $r19);

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler> = $r17;

        $r18 = staticinvoke <com.android.server.UiThread: android.os.Handler getHandler()>();

        r0.<com.android.server.display.DisplayManagerService: android.os.Handler mUiHandler> = $r18;

        $r20 = new com.android.server.display.DisplayManagerService$DisplayAdapterListener;

        specialinvoke $r20.<com.android.server.display.DisplayManagerService$DisplayAdapterListener: void <init>(com.android.server.display.DisplayManagerService,com.android.server.display.DisplayManagerService$1)>(r0, null);

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener> = $r20;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.demo.singledisplay", 0);

        r0.<com.android.server.display.DisplayManagerService: boolean mSingleDisplayDemoMode> = $z0;

        return;
    }

    public void onStart()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r1;
        com.android.server.display.DisplayManagerService$BinderService $r2;
        com.android.server.display.DisplayManagerService$LocalService $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r1.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendEmptyMessage(int)>(1);

        $r2 = new com.android.server.display.DisplayManagerService$BinderService;

        specialinvoke $r2.<com.android.server.display.DisplayManagerService$BinderService: void <init>(com.android.server.display.DisplayManagerService,com.android.server.display.DisplayManagerService$1)>(r0, null);

        virtualinvoke r0.<com.android.server.display.DisplayManagerService: void publishBinderService(java.lang.String,android.os.IBinder,boolean)>("display", $r2, 1);

        $r3 = new com.android.server.display.DisplayManagerService$LocalService;

        specialinvoke $r3.<com.android.server.display.DisplayManagerService$LocalService: void <init>(com.android.server.display.DisplayManagerService,com.android.server.display.DisplayManagerService$1)>(r0, null);

        virtualinvoke r0.<com.android.server.display.DisplayManagerService: void publishLocalService(java.lang.Class,java.lang.Object)>(class "android/hardware/display/DisplayManagerInternal", $r3);

        return;
    }

    public void onBootPhase(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r4, $r8;
        long l1, l2, $l3, $l4;
        java.lang.Throwable r3, $r9;
        android.util.SparseArray $r5;
        java.lang.Object $r6;
        byte $b5;
        java.lang.RuntimeException $r7;
        java.lang.InterruptedException $r10;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        if i0 != 100 goto label11;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l1 = $l3 + 10000L;

     label02:
        $r5 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(0);

        if $r6 != null goto label07;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l2 = l1 - $l4;

        $b5 = l2 cmp 0L;

        if $b5 > 0 goto label03;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Timeout waiting for default display to be initialized.");

        throw $r7;

     label03:
        $r8 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        virtualinvoke $r8.<java.lang.Object: void wait(long)>(l2);

     label04:
        goto label06;

     label05:
        $r10 := @caughtexception;

     label06:
        goto label02;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r1;

     label10:
        throw r3;

     label11:
        return;

        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void windowManagerAndInputReady()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r3;
        java.lang.Throwable r2, $r8;
        java.lang.Object $r4, $r6;
        android.view.WindowManagerInternal $r5;
        android.hardware.input.InputManagerInternal $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "android/view/WindowManagerInternal");

        $r5 = (android.view.WindowManagerInternal) $r4;

        r0.<com.android.server.display.DisplayManagerService: android.view.WindowManagerInternal mWindowManagerInternal> = $r5;

        $r6 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "android/hardware/input/InputManagerInternal");

        $r7 = (android.hardware.input.InputManagerInternal) $r6;

        r0.<com.android.server.display.DisplayManagerService: android.hardware.input.InputManagerInternal mInputManagerInternal> = $r7;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void systemReady(boolean, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0, z1;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r4;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<com.android.server.display.DisplayManagerService: boolean mSafeMode> = z0;

        r0.<com.android.server.display.DisplayManagerService: boolean mOnlyCore> = z1;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r4.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendEmptyMessage(int)>(2);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void registerDisplayTransactionListenerInternal(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.DisplayManagerInternal$DisplayTransactionListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.hardware.display.DisplayManagerInternal$DisplayTransactionListener;

        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners>;

        virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void unregisterDisplayTransactionListenerInternal(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.DisplayManagerInternal$DisplayTransactionListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.hardware.display.DisplayManagerInternal$DisplayTransactionListener;

        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners>;

        virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private void setDisplayInfoOverrideFromWindowManagerInternal(int, android.view.DisplayInfo)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        android.view.DisplayInfo r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2, $r5;
        com.android.server.display.LogicalDisplay r3;
        java.lang.Throwable r4, $r8;
        android.util.SparseArray $r6;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.DisplayInfo;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.display.LogicalDisplay) $r7;

        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<com.android.server.display.LogicalDisplay: boolean setDisplayInfoOverrideFromWindowManagerLocked(android.view.DisplayInfo)>(r1);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void sendDisplayEventLocked(int,int)>(i0, 2);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r2;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void performTraversalInTransactionFromWindowManagerInternal()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r3;
        java.lang.Throwable r2, $r6;
        boolean $z0, $z1;
        java.util.concurrent.CopyOnWriteArrayList $r4;
        java.lang.Object $r5;
        java.util.Iterator r7;
        android.hardware.display.DisplayManagerInternal$DisplayTransactionListener r8;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal>;

        if $z0 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal> = 0;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void performTraversalInTransactionLocked()>();

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        $r4 = r0.<com.android.server.display.DisplayManagerService: java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners>;

        r7 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label8:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r5 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (android.hardware.display.DisplayManagerInternal$DisplayTransactionListener) $r5;

        interfaceinvoke r8.<android.hardware.display.DisplayManagerInternal$DisplayTransactionListener: void onDisplayTransaction()>();

        goto label8;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void requestGlobalDisplayStateInternal(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, $i1, $i2, i3;
        java.util.ArrayList r1, $r6, $r8, $r9, $r10, $r14, $r16;
        com.android.server.display.DisplayManagerService$SyncRoot r2, $r7;
        java.lang.Throwable r3, r4, r5, $r13, $r15, $r17;
        java.lang.Runnable $r11;
        java.lang.Object $r12;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        $r6 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue>;

        r1 = $r6;

        entermonitor $r6;

     label01:
        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r2 = $r7;

        entermonitor $r7;

     label02:
        $i1 = r0.<com.android.server.display.DisplayManagerService: int mGlobalDisplayState>;

        if $i1 == i0 goto label03;

        r0.<com.android.server.display.DisplayManagerService: int mGlobalDisplayState> = i0;

        $r14 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue>;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void updateGlobalDisplayStateLocked(java.util.List)>($r14);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

     label03:
        exitmonitor r2;

     label04:
        goto label07;

     label05:
        $r17 := @caughtexception;

        r3 = $r17;

        exitmonitor r2;

     label06:
        throw r3;

     label07:
        i3 = 0;

     label08:
        $r8 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue>;

        $i2 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if i3 >= $i2 goto label09;

        $r10 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue>;

        $r12 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r11 = (java.lang.Runnable) $r12;

        interfaceinvoke $r11.<java.lang.Runnable: void run()>();

        i3 = i3 + 1;

        goto label08;

     label09:
        $r9 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue>;

        virtualinvoke $r9.<java.util.ArrayList: void clear()>();

        goto label12;

     label10:
        $r13 := @caughtexception;

        r4 = $r13;

     label11:
        $r16 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue>;

        virtualinvoke $r16.<java.util.ArrayList: void clear()>();

        throw r4;

     label12:
        exitmonitor r1;

     label13:
        goto label16;

     label14:
        $r15 := @caughtexception;

        r5 = $r15;

        exitmonitor r1;

     label15:
        throw r5;

     label16:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    private android.view.DisplayInfo getDisplayInfoInternal(int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r5;
        com.android.server.display.LogicalDisplay r2;
        android.view.DisplayInfo r3;
        java.lang.Throwable r4, $r8;
        android.util.SparseArray $r6;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.display.LogicalDisplay) $r7;

        if r2 == null goto label3;

        r3 = virtualinvoke r2.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        $z0 = virtualinvoke r3.<android.view.DisplayInfo: boolean hasAccess(int)>(i1);

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        exitmonitor r1;

     label4:
        return null;

     label5:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r1;

     label6:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private int[] getDisplayIdsInternal(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, i2, i3, $i4, $i5;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r6;
        int[] r2;
        com.android.server.display.LogicalDisplay r3;
        android.view.DisplayInfo r4;
        java.lang.Throwable r5, $r11;
        android.util.SparseArray $r7, $r8, $r10;
        java.lang.Object $r9;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i1 = virtualinvoke $r7.<android.util.SparseArray: int size()>();

        r2 = newarray (int)[i1];

        i2 = 0;

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        $r8 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r3 = (com.android.server.display.LogicalDisplay) $r9;

        r4 = virtualinvoke r3.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        $z0 = virtualinvoke r4.<android.view.DisplayInfo: boolean hasAccess(int)>(i0);

        if $z0 == 0 goto label3;

        $i4 = i2;

        i2 = i2 + 1;

        $r10 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $i5 = virtualinvoke $r10.<android.util.SparseArray: int keyAt(int)>(i3);

        r2[$i4] = $i5;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        if i2 == i1 goto label5;

        r2 = staticinvoke <java.util.Arrays: int[] copyOfRange(int[],int,int)>(r2, 0, i2);

     label5:
        exitmonitor r1;

     label6:
        return r2;

     label7:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r1;

     label8:
        throw r5;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private void registerCallbackInternal(android.hardware.display.IDisplayManagerCallback, int)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.IDisplayManagerCallback r1;
        int i0;
        com.android.server.display.DisplayManagerService$SyncRoot r2, $r6;
        com.android.server.display.DisplayManagerService$CallbackRecord r3, $r9;
        android.os.IBinder r4;
        java.lang.Throwable r5, $r13;
        android.util.SparseArray $r7, $r10;
        java.lang.Object $r8;
        java.lang.SecurityException $r11;
        android.os.RemoteException $r12, r15;
        java.lang.RuntimeException $r14;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.hardware.display.IDisplayManagerCallback;

        i0 := @parameter1: int;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r2 = $r6;

        entermonitor $r6;

     label01:
        $r7 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r8 == null goto label02;

        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("The calling process has already registered an IDisplayManagerCallback.");

        throw $r11;

     label02:
        $r9 = new com.android.server.display.DisplayManagerService$CallbackRecord;

        specialinvoke $r9.<com.android.server.display.DisplayManagerService$CallbackRecord: void <init>(com.android.server.display.DisplayManagerService,int,android.hardware.display.IDisplayManagerCallback)>(r0, i0, r1);

        r3 = $r9;

     label03:
        r4 = interfaceinvoke r1.<android.hardware.display.IDisplayManagerCallback: android.os.IBinder asBinder()>();

        interfaceinvoke r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0);

     label04:
        goto label06;

     label05:
        $r12 := @caughtexception;

        r15 = $r12;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r15);

        throw $r14;

     label06:
        $r10 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r3);

        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r13 := @caughtexception;

        r5 = $r13;

        exitmonitor r2;

     label09:
        throw r5;

     label10:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private void onCallbackDied(com.android.server.display.DisplayManagerService$CallbackRecord)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$CallbackRecord r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2, $r4;
        java.lang.Throwable r3, $r6;
        int $i0;
        android.util.SparseArray $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayManagerService$CallbackRecord;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $i0 = r1.<com.android.server.display.DisplayManagerService$CallbackRecord: int mPid>;

        virtualinvoke $r5.<android.util.SparseArray: void remove(int)>($i0);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void stopWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void startWifiDisplayScanInternal(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r4;
        com.android.server.display.DisplayManagerService$CallbackRecord r2;
        java.lang.Throwable r3, $r8;
        android.util.SparseArray $r5;
        java.lang.Object $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.display.DisplayManagerService$CallbackRecord) $r6;

        if r2 != null goto label2;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The calling process has not registered an IDisplayManagerCallback.");

        throw $r7;

     label2:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void startWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)>(r2);

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r1;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void startWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$CallbackRecord r1;
        boolean $z0;
        int $i0, $i1;
        com.android.server.display.WifiDisplayAdapter $r2, $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayManagerService$CallbackRecord;

        $z0 = r1.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested>;

        if $z0 != 0 goto label1;

        r1.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested> = 1;

        $i0 = r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount>;

        $i1 = $i0 + 1;

        r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount> = $i1;

        if $i0 != 0 goto label1;

        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r3.<com.android.server.display.WifiDisplayAdapter: void requestStartScanLocked()>();

     label1:
        return;
    }

    private void stopWifiDisplayScanInternal(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r4;
        com.android.server.display.DisplayManagerService$CallbackRecord r2;
        java.lang.Throwable r3, $r8;
        android.util.SparseArray $r5;
        java.lang.Object $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.display.DisplayManagerService$CallbackRecord) $r6;

        if r2 != null goto label2;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The calling process has not registered an IDisplayManagerCallback.");

        throw $r7;

     label2:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void stopWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)>(r2);

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r1;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void stopWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$CallbackRecord r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        com.android.server.display.WifiDisplayAdapter $r6, $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayManagerService$CallbackRecord;

        $z0 = r1.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested>;

        if $z0 == 0 goto label2;

        r1.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested> = 0;

        $i0 = r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount>;

        $i1 = $i0 - 1;

        r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount> = $i1;

        if $i1 != 0 goto label1;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r6 == null goto label2;

        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r7.<com.android.server.display.WifiDisplayAdapter: void requestStopScanLocked()>();

        goto label2;

     label1:
        $i2 = r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount>;

        if $i2 >= 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mWifiDisplayScanRequestCount became negative: ");

        $i3 = r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DisplayManagerService", $r5);

        r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount> = 0;

     label2:
        return;
    }

    private void connectWifiDisplayInternal(java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        java.lang.String r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2, $r4;
        java.lang.Throwable r3, $r7;
        com.android.server.display.WifiDisplayAdapter $r5, $r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r5 == null goto label2;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r6.<com.android.server.display.WifiDisplayAdapter: void requestConnectLocked(java.lang.String)>(r1);

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void pauseWifiDisplayInternal()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r3;
        java.lang.Throwable r2, $r6;
        com.android.server.display.WifiDisplayAdapter $r4, $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r4 == null goto label2;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r5.<com.android.server.display.WifiDisplayAdapter: void requestPauseLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void resumeWifiDisplayInternal()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r3;
        java.lang.Throwable r2, $r6;
        com.android.server.display.WifiDisplayAdapter $r4, $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r4 == null goto label2;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r5.<com.android.server.display.WifiDisplayAdapter: void requestResumeLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void disconnectWifiDisplayInternal()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r3;
        java.lang.Throwable r2, $r6;
        com.android.server.display.WifiDisplayAdapter $r4, $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r4 == null goto label2;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r5.<com.android.server.display.WifiDisplayAdapter: void requestDisconnectLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void renameWifiDisplayInternal(java.lang.String, java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        java.lang.String r1, r2;
        com.android.server.display.DisplayManagerService$SyncRoot r3, $r5;
        java.lang.Throwable r4, $r8;
        com.android.server.display.WifiDisplayAdapter $r6, $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r6 == null goto label2;

        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r7.<com.android.server.display.WifiDisplayAdapter: void requestRenameLocked(java.lang.String,java.lang.String)>(r1, r2);

     label2:
        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r3;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void forgetWifiDisplayInternal(java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        java.lang.String r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2, $r4;
        java.lang.Throwable r3, $r7;
        com.android.server.display.WifiDisplayAdapter $r5, $r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r5 == null goto label2;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r6.<com.android.server.display.WifiDisplayAdapter: void requestForgetLocked(java.lang.String)>(r1);

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private android.hardware.display.WifiDisplayStatus getWifiDisplayStatusInternal()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r3;
        java.lang.Throwable r2, $r8;
        com.android.server.display.WifiDisplayAdapter $r4, $r6;
        android.hardware.display.WifiDisplayStatus $r5, $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r4 == null goto label3;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        $r7 = virtualinvoke $r6.<com.android.server.display.WifiDisplayAdapter: android.hardware.display.WifiDisplayStatus getWifiDisplayStatusLocked()>();

        exitmonitor r1;

     label2:
        return $r7;

     label3:
        $r5 = new android.hardware.display.WifiDisplayStatus;

        specialinvoke $r5.<android.hardware.display.WifiDisplayStatus: void <init>()>();

        exitmonitor r1;

     label4:
        return $r5;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private int createVirtualDisplayInternal(android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, int, java.lang.String, java.lang.String, int, int, int, android.view.Surface, int)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.IVirtualDisplayCallback r1;
        android.media.projection.IMediaProjection r2;
        int i0, i1, i2, i3, i4, $i6;
        java.lang.String r3, r4;
        android.view.Surface r5;
        com.android.server.display.DisplayManagerService$SyncRoot r6, $r10;
        com.android.server.display.DisplayDevice r7;
        com.android.server.display.LogicalDisplay r8;
        java.lang.Throwable r9, $r16;
        com.android.server.display.VirtualDisplayAdapter $r11, $r12, $r13;
        android.os.IBinder $r15;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        r2 := @parameter1: android.media.projection.IMediaProjection;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        i3 := @parameter7: int;

        r5 := @parameter8: android.view.Surface;

        i4 := @parameter9: int;

        $r10 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r6 = $r10;

        entermonitor $r10;

     label01:
        $r12 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        if $r12 != null goto label03;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", "Rejecting request to create private virtual display because the virtual display adapter is not available.");

        exitmonitor r6;

     label02:
        return -1;

     label03:
        $r11 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        r7 = virtualinvoke $r11.<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int)>(r1, r2, i0, r3, r4, i1, i2, i3, r5, i4);

        if r7 != null goto label05;

        exitmonitor r6;

     label04:
        return -1;

     label05:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)>(r7);

        r8 = specialinvoke r0.<com.android.server.display.DisplayManagerService: com.android.server.display.LogicalDisplay findLogicalDisplayForDeviceLocked(com.android.server.display.DisplayDevice)>(r7);

        if r8 == null goto label07;

        $i6 = virtualinvoke r8.<com.android.server.display.LogicalDisplay: int getDisplayIdLocked()>();

        exitmonitor r6;

     label06:
        return $i6;

     label07:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", "Rejecting request to create virtual display because the logical display was not created.");

        $r13 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        $r15 = interfaceinvoke r1.<android.hardware.display.IVirtualDisplayCallback: android.os.IBinder asBinder()>();

        virtualinvoke $r13.<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice releaseVirtualDisplayLocked(android.os.IBinder)>($r15);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)>(r7);

        exitmonitor r6;

     label08:
        goto label11;

     label09:
        $r16 := @caughtexception;

        r9 = $r16;

        exitmonitor r6;

     label10:
        throw r9;

     label11:
        return -1;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void resizeVirtualDisplayInternal(android.os.IBinder, int, int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        android.os.IBinder r1;
        int i0, i1, i2;
        com.android.server.display.DisplayManagerService$SyncRoot r2, $r4;
        java.lang.Throwable r3, $r7;
        com.android.server.display.VirtualDisplayAdapter $r5, $r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        if $r5 != null goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        virtualinvoke $r6.<com.android.server.display.VirtualDisplayAdapter: void resizeVirtualDisplayLocked(android.os.IBinder,int,int,int)>(r1, i0, i1, i2);

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void setVirtualDisplaySurfaceInternal(android.os.IBinder, android.view.Surface)
    {
        com.android.server.display.DisplayManagerService r0;
        android.os.IBinder r1;
        android.view.Surface r2;
        com.android.server.display.DisplayManagerService$SyncRoot r3, $r5;
        java.lang.Throwable r4, $r8;
        com.android.server.display.VirtualDisplayAdapter $r6, $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.Surface;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        if $r6 != null goto label3;

        exitmonitor r3;

     label2:
        return;

     label3:
        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        virtualinvoke $r7.<com.android.server.display.VirtualDisplayAdapter: void setVirtualDisplaySurfaceLocked(android.os.IBinder,android.view.Surface)>(r1, r2);

        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r3;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void releaseVirtualDisplayInternal(android.os.IBinder)
    {
        com.android.server.display.DisplayManagerService r0;
        android.os.IBinder r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2, $r5;
        com.android.server.display.DisplayDevice r3;
        java.lang.Throwable r4, $r8;
        com.android.server.display.VirtualDisplayAdapter $r6, $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        if $r6 != null goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        r3 = virtualinvoke $r7.<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice releaseVirtualDisplayLocked(android.os.IBinder)>(r1);

        if r3 == null goto label4;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)>(r3);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void registerDefaultDisplayAdapter()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r3, $r8;
        java.lang.Throwable r2, $r9;
        com.android.server.display.LocalDisplayAdapter $r4;
        com.android.server.display.DisplayManagerService$DisplayAdapterListener $r5;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r6;
        android.content.Context $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = new com.android.server.display.LocalDisplayAdapter;

        $r8 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        $r7 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener>;

        specialinvoke $r4.<com.android.server.display.LocalDisplayAdapter: void <init>(com.android.server.display.DisplayManagerService$SyncRoot,android.content.Context,android.os.Handler,com.android.server.display.DisplayAdapter$Listener)>($r8, $r7, $r6, $r5);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)>($r4);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void registerAdditionalDisplayAdapters()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.server.display.DisplayManagerService: boolean shouldRegisterNonEssentialDisplayAdaptersLocked()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerOverlayDisplayAdapterLocked()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerWifiDisplayAdapterLocked()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerVirtualDisplayAdapterLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void registerOverlayDisplayAdapterLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.OverlayDisplayAdapter $r1;
        android.os.Handler $r2;
        com.android.server.display.DisplayManagerService$DisplayAdapterListener $r3;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r4;
        android.content.Context $r5;
        com.android.server.display.DisplayManagerService$SyncRoot $r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = new com.android.server.display.OverlayDisplayAdapter;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        $r5 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener>;

        $r2 = r0.<com.android.server.display.DisplayManagerService: android.os.Handler mUiHandler>;

        specialinvoke $r1.<com.android.server.display.OverlayDisplayAdapter: void <init>(com.android.server.display.DisplayManagerService$SyncRoot,android.content.Context,android.os.Handler,com.android.server.display.DisplayAdapter$Listener,android.os.Handler)>($r6, $r5, $r4, $r3, $r2);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)>($r1);

        return;
    }

    private void registerWifiDisplayAdapterLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        android.content.Context $r1, $r7;
        android.content.res.Resources $r2;
        boolean $z0;
        com.android.server.display.WifiDisplayAdapter $r3, $r9;
        com.android.server.display.PersistentDataStore $r4;
        com.android.server.display.DisplayManagerService$DisplayAdapterListener $r5;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r6;
        com.android.server.display.DisplayManagerService$SyncRoot $r8;
        int $i0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17956959);

        if $z0 != 0 goto label1;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.debug.wfd.enable", -1);

        if $i0 != 1 goto label2;

     label1:
        $r3 = new com.android.server.display.WifiDisplayAdapter;

        $r8 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        $r7 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener>;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        specialinvoke $r3.<com.android.server.display.WifiDisplayAdapter: void <init>(com.android.server.display.DisplayManagerService$SyncRoot,android.content.Context,android.os.Handler,com.android.server.display.DisplayAdapter$Listener,com.android.server.display.PersistentDataStore)>($r8, $r7, $r6, $r5, $r4);

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter> = $r3;

        $r9 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)>($r9);

     label2:
        return;
    }

    private void registerVirtualDisplayAdapterLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.VirtualDisplayAdapter $r1, $r6;
        com.android.server.display.DisplayManagerService$DisplayAdapterListener $r2;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r3;
        android.content.Context $r4;
        com.android.server.display.DisplayManagerService$SyncRoot $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = new com.android.server.display.VirtualDisplayAdapter;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        $r4 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener>;

        specialinvoke $r1.<com.android.server.display.VirtualDisplayAdapter: void <init>(com.android.server.display.DisplayManagerService$SyncRoot,android.content.Context,android.os.Handler,com.android.server.display.DisplayAdapter$Listener)>($r5, $r4, $r3, $r2);

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter> = $r1;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)>($r6);

        return;
    }

    private boolean shouldRegisterNonEssentialDisplayAdaptersLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $z0 = r0.<com.android.server.display.DisplayManagerService: boolean mSafeMode>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.server.display.DisplayManagerService: boolean mOnlyCore>;

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayAdapter r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayAdapter;

        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayAdapters>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        virtualinvoke r1.<com.android.server.display.DisplayAdapter: void registerLocked()>();

        return;
    }

    private void handleDisplayDeviceAdded(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        java.lang.Runnable r2;
        java.util.ArrayList $r3, $r9;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r7, $r10, $r11, $r12;
        com.android.server.display.DisplayDeviceInfo $r6, $r13;
        java.lang.String $r8, $r14;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        $r3 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $z0 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add already added display device: ");

        $r13 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r14);

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display device added: ");

        $r6 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayManagerService", $r8);

        $r9 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void addLogicalDisplayLocked(com.android.server.display.DisplayDevice)>(r1);

        r2 = specialinvoke r0.<com.android.server.display.DisplayManagerService: java.lang.Runnable updateDisplayStateLocked(com.android.server.display.DisplayDevice)>(r1);

        if r2 == null goto label2;

        interfaceinvoke r2.<java.lang.Runnable: void run()>();

     label2:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

        return;
    }

    private void handleDisplayDeviceChanged(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2, $r4;
        java.lang.Throwable r3, $r16;
        java.util.ArrayList $r5;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r7, $r9, $r11, $r13, $r15;
        com.android.server.display.DisplayDeviceInfo $r8, $r12;
        java.lang.String $r10, $r14;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $z0 = virtualinvoke $r5.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to change non-existent display device: ");

        $r12 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r14);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display device changed: ");

        $r8 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayManagerService", $r10);

        virtualinvoke r1.<com.android.server.display.DisplayDevice: void applyPendingDisplayDeviceInfoChangesLocked()>();

        $z1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: boolean updateLogicalDisplaysLocked()>();

        if $z1 == 0 goto label4;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r16 := @caughtexception;

        r3 = $r16;

        exitmonitor r2;

     label7:
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void handleDisplayDeviceRemoved(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        java.util.ArrayList $r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r6, $r8, $r9, $r12;
        com.android.server.display.DisplayDeviceInfo $r5, $r10;
        java.lang.String $r7, $r11;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to remove non-existent display device: ");

        $r10 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r11);

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display device removed: ");

        $r5 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayManagerService", $r7);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: boolean updateLogicalDisplaysLocked()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

        return;
    }

    private void updateGlobalDisplayStateLocked(java.util.List)
    {
        com.android.server.display.DisplayManagerService r0;
        java.util.List r1;
        int i0, i1;
        com.android.server.display.DisplayDevice r2;
        java.lang.Runnable r3;
        java.util.ArrayList $r4, $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: java.util.List;

        $r4 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r5 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.display.DisplayDevice) $r6;

        r3 = specialinvoke r0.<com.android.server.display.DisplayManagerService: java.lang.Runnable updateDisplayStateLocked(com.android.server.display.DisplayDevice)>(r2);

        if r3 == null goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private java.lang.Runnable updateDisplayStateLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayDeviceInfo r2;
        int $i0, $i1, $i2;
        java.lang.Runnable $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        r2 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $i0 = r2.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i1 = $i0 & 32;

        if $i1 != 0 goto label1;

        $i2 = r0.<com.android.server.display.DisplayManagerService: int mGlobalDisplayState>;

        $r3 = virtualinvoke r1.<com.android.server.display.DisplayDevice: java.lang.Runnable requestDisplayStateLocked(int)>($i2);

        return $r3;

     label1:
        return null;
    }

    private void addLogicalDisplayLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayDeviceInfo r2;
        boolean z0, $z1, $z2, $z3;
        int i0, i1, $i2, $i3;
        com.android.server.display.LogicalDisplay r3, $r4;
        java.util.ArrayList $r5;
        android.util.SparseArray $r6, $r17;
        java.lang.StringBuilder $r7, $r9, $r11, $r12, $r13, $r14, $r18, $r19, $r20;
        com.android.server.display.DisplayManagerService$SyncRoot $r8;
        java.lang.String $r10, $r15, $r21;
        java.lang.Object $r16;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        r2 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $i2 = r2.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        if z0 == 0 goto label3;

        $r17 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r16 = virtualinvoke $r17.<android.util.SparseArray: java.lang.Object get(int)>(0);

        if $r16 == null goto label3;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring attempt to add a second default display: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r21);

        z0 = 0;

     label3:
        if z0 != 0 goto label4;

        $z2 = r0.<com.android.server.display.DisplayManagerService: boolean mSingleDisplayDemoMode>;

        if $z2 == 0 goto label4;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not creating a logical display for a secondary display  because single display demo mode is enabled: ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayManagerService", $r15);

        return;

     label4:
        i0 = specialinvoke r0.<com.android.server.display.DisplayManagerService: int assignDisplayIdLocked(boolean)>(z0);

        i1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: int assignLayerStackLocked(int)>(i0);

        $r4 = new com.android.server.display.LogicalDisplay;

        specialinvoke $r4.<com.android.server.display.LogicalDisplay: void <init>(int,int,com.android.server.display.DisplayDevice)>(i0, i1, r1);

        r3 = $r4;

        $r5 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        virtualinvoke r3.<com.android.server.display.LogicalDisplay: void updateLocked(java.util.List)>($r5);

        $z1 = virtualinvoke r3.<com.android.server.display.LogicalDisplay: boolean isValidLocked()>();

        if $z1 != 0 goto label5;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring display device because the logical display created from it was not considered valid: ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r10);

        return;

     label5:
        $r6 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r3);

        if z0 == 0 goto label6;

        $r8 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        virtualinvoke $r8.<java.lang.Object: void notifyAll()>();

     label6:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void sendDisplayEventLocked(int,int)>(i0, 1);

        return;
    }

    private int assignDisplayIdLocked(boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0;
        int $i0, $i1;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = r0.<com.android.server.display.DisplayManagerService: int mNextNonDefaultDisplayId>;

        $i1 = $i0 + 1;

        r0.<com.android.server.display.DisplayManagerService: int mNextNonDefaultDisplayId> = $i1;

     label2:
        return $i0;
    }

    private int assignLayerStackLocked(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        return i0;
    }

    private boolean updateLogicalDisplaysLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0, $z1, $z2;
        int i0, i1, $i2;
        com.android.server.display.LogicalDisplay r1;
        android.util.SparseArray $r2, $r3, $r4, $r11;
        java.lang.Object $r5;
        android.view.DisplayInfo $r6, $r7, $r9, $r10;
        java.util.ArrayList $r8;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z0 = 0;

        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

     label1:
        $i2 = i0;

        i0 = i0 + -1;

        if $i2 <= 0 goto label4;

        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i1 = virtualinvoke $r3.<android.util.SparseArray: int keyAt(int)>(i0);

        $r4 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        r1 = (com.android.server.display.LogicalDisplay) $r5;

        $r6 = r0.<com.android.server.display.DisplayManagerService: android.view.DisplayInfo mTempDisplayInfo>;

        $r7 = virtualinvoke r1.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        virtualinvoke $r6.<android.view.DisplayInfo: void copyFrom(android.view.DisplayInfo)>($r7);

        $r8 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        virtualinvoke r1.<com.android.server.display.LogicalDisplay: void updateLocked(java.util.List)>($r8);

        $z1 = virtualinvoke r1.<com.android.server.display.LogicalDisplay: boolean isValidLocked()>();

        if $z1 != 0 goto label2;

        $r11 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        virtualinvoke $r11.<android.util.SparseArray: void removeAt(int)>(i0);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void sendDisplayEventLocked(int,int)>(i1, 3);

        z0 = 1;

        goto label3;

     label2:
        $r10 = r0.<com.android.server.display.DisplayManagerService: android.view.DisplayInfo mTempDisplayInfo>;

        $r9 = virtualinvoke r1.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        $z2 = virtualinvoke $r10.<android.view.DisplayInfo: boolean equals(android.view.DisplayInfo)>($r9);

        if $z2 != 0 goto label3;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void sendDisplayEventLocked(int,int)>(i1, 2);

        z0 = 1;

     label3:
        goto label1;

     label4:
        return z0;
    }

    private void performTraversalInTransactionLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;
        com.android.server.display.DisplayDevice r1;
        java.util.ArrayList $r2, $r5;
        android.hardware.input.InputManagerInternal $r3;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r4;
        java.lang.Object $r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void clearViewportsLocked()>();

        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r1 = (com.android.server.display.DisplayDevice) $r6;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void configureDisplayInTransactionLocked(com.android.server.display.DisplayDevice)>(r1);

        virtualinvoke r1.<com.android.server.display.DisplayDevice: void performTraversalInTransactionLocked()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r0.<com.android.server.display.DisplayManagerService: android.hardware.input.InputManagerInternal mInputManagerInternal>;

        if $r3 == null goto label3;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r4.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendEmptyMessage(int)>(5);

     label3:
        return;
    }

    private void setDisplayPropertiesInternal(int, boolean, float, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        boolean z0, z1, $z2;
        float f0, $f1;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r4;
        com.android.server.display.LogicalDisplay r2;
        java.lang.Throwable r3, $r7;
        android.util.SparseArray $r5;
        java.lang.Object $r6;
        byte $b1;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        f0 := @parameter2: float;

        z1 := @parameter3: boolean;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.display.LogicalDisplay) $r6;

        if r2 != null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $z2 = virtualinvoke r2.<com.android.server.display.LogicalDisplay: boolean hasContentLocked()>();

        if $z2 == z0 goto label4;

        virtualinvoke r2.<com.android.server.display.LogicalDisplay: void setHasContentLocked(boolean)>(z0);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(z1);

     label4:
        $f1 = virtualinvoke r2.<com.android.server.display.LogicalDisplay: float getRequestedRefreshRateLocked()>();

        $b1 = $f1 cmpl f0;

        if $b1 == 0 goto label5;

        virtualinvoke r2.<com.android.server.display.LogicalDisplay: void setRequestedRefreshRateLocked(float)>(f0);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(z1);

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private void clearViewportsLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.DisplayViewport $r1, $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mDefaultViewport>;

        $r1.<android.hardware.display.DisplayViewport: boolean valid> = 0;

        $r2 = r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mExternalTouchViewport>;

        $r2.<android.hardware.display.DisplayViewport: boolean valid> = 0;

        return;
    }

    private void configureDisplayInTransactionLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayDeviceInfo r2, $r9;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        com.android.server.display.LogicalDisplay r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.hardware.display.DisplayViewport $r4, $r5, $r6, $r7;
        java.lang.StringBuilder $r8, $r10, $r12;
        java.lang.String $r11;
        android.util.SparseArray $r13;
        java.lang.Object $r14;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        r2 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $i0 = r2.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i1 = $i0 & 128;

        if $i1 == 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        z0 = $z5;

        r3 = specialinvoke r0.<com.android.server.display.DisplayManagerService: com.android.server.display.LogicalDisplay findLogicalDisplayForDeviceLocked(com.android.server.display.DisplayDevice)>(r1);

        if z0 != 0 goto label4;

        if r3 == null goto label3;

        $z4 = virtualinvoke r3.<com.android.server.display.LogicalDisplay: boolean hasContentLocked()>();

        if $z4 != 0 goto label3;

        r3 = null;

     label3:
        if r3 != null goto label4;

        $r13 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r14 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object get(int)>(0);

        r3 = (com.android.server.display.LogicalDisplay) $r14;

     label4:
        if r3 != null goto label5;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing logical display to use for physical display device: ");

        $r9 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r11);

        return;

     label5:
        $i2 = r2.<com.android.server.display.DisplayDeviceInfo: int state>;

        if $i2 != 1 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        virtualinvoke r3.<com.android.server.display.LogicalDisplay: void configureDisplayInTransactionLocked(com.android.server.display.DisplayDevice,boolean)>(r1, $z3);

        $r4 = r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mDefaultViewport>;

        $z1 = $r4.<android.hardware.display.DisplayViewport: boolean valid>;

        if $z1 != 0 goto label8;

        $i5 = r2.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i4 = $i5 & 1;

        if $i4 == 0 goto label8;

        $r7 = r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mDefaultViewport>;

        staticinvoke <com.android.server.display.DisplayManagerService: void setViewportLocked(android.hardware.display.DisplayViewport,com.android.server.display.LogicalDisplay,com.android.server.display.DisplayDevice)>($r7, r3, r1);

     label8:
        $r5 = r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mExternalTouchViewport>;

        $z2 = $r5.<android.hardware.display.DisplayViewport: boolean valid>;

        if $z2 != 0 goto label9;

        $i3 = r2.<com.android.server.display.DisplayDeviceInfo: int touch>;

        if $i3 != 2 goto label9;

        $r6 = r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mExternalTouchViewport>;

        staticinvoke <com.android.server.display.DisplayManagerService: void setViewportLocked(android.hardware.display.DisplayViewport,com.android.server.display.LogicalDisplay,com.android.server.display.DisplayDevice)>($r6, r3, r1);

     label9:
        return;
    }

    private static void setViewportLocked(android.hardware.display.DisplayViewport, com.android.server.display.LogicalDisplay, com.android.server.display.DisplayDevice)
    {
        android.hardware.display.DisplayViewport r0;
        com.android.server.display.LogicalDisplay r1;
        com.android.server.display.DisplayDevice r2;
        int $i0;

        r0 := @parameter0: android.hardware.display.DisplayViewport;

        r1 := @parameter1: com.android.server.display.LogicalDisplay;

        r2 := @parameter2: com.android.server.display.DisplayDevice;

        r0.<android.hardware.display.DisplayViewport: boolean valid> = 1;

        $i0 = virtualinvoke r1.<com.android.server.display.LogicalDisplay: int getDisplayIdLocked()>();

        r0.<android.hardware.display.DisplayViewport: int displayId> = $i0;

        virtualinvoke r2.<com.android.server.display.DisplayDevice: void populateViewportLocked(android.hardware.display.DisplayViewport)>(r0);

        return;
    }

    private com.android.server.display.LogicalDisplay findLogicalDisplayForDeviceLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1, $r6;
        int i0, i1;
        com.android.server.display.LogicalDisplay r2;
        android.util.SparseArray $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r2 = (com.android.server.display.LogicalDisplay) $r5;

        $r6 = virtualinvoke r2.<com.android.server.display.LogicalDisplay: com.android.server.display.DisplayDevice getPrimaryDisplayDeviceLocked()>();

        if $r6 != r1 goto label2;

        return r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private void sendDisplayEventLocked(int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;
        android.os.Message r1;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r2, $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        r1 = virtualinvoke $r2.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: android.os.Message obtainMessage(int,int,int)>(3, i0, i1);

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r3.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    private void scheduleTraversalLocked(boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0, $z1;
        android.view.WindowManagerInternal $r1;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal>;

        if $z1 != 0 goto label1;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.view.WindowManagerInternal mWindowManagerInternal>;

        if $r1 == null goto label1;

        r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal> = 1;

        if z0 != 0 goto label1;

        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r2.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendEmptyMessage(int)>(4);

     label1:
        return;
    }

    private void deliverDisplayEvent(int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, i2, i3, i4;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r3;
        java.lang.Throwable r2, $r13;
        android.util.SparseArray $r4, $r11;
        java.util.ArrayList $r5, $r6, $r7, $r10;
        java.lang.Object $r8, $r12;
        com.android.server.display.DisplayManagerService$CallbackRecord $r9;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        i2 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        $r5 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks>;

        virtualinvoke $r5.<java.util.ArrayList: void clear()>();

        i3 = 0;

     label2:
        if i3 >= i2 goto label3;

        $r10 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks>;

        $r11 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r12 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        i3 = i3 + 1;

        goto label2;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        r2 = $r13;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        i4 = 0;

     label8:
        if i4 >= i2 goto label9;

        $r7 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r9 = (com.android.server.display.DisplayManagerService$CallbackRecord) $r8;

        virtualinvoke $r9.<com.android.server.display.DisplayManagerService$CallbackRecord: void notifyDisplayEventAsync(int,int)>(i0, i1);

        i4 = i4 + 1;

        goto label8;

     label9:
        $r6 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks>;

        virtualinvoke $r6.<java.util.ArrayList: void clear()>();

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private android.media.projection.IMediaProjectionManager getProjectionService()
    {
        com.android.server.display.DisplayManagerService r0;
        android.os.IBinder r1;
        android.media.projection.IMediaProjectionManager $r2, $r3, $r4;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r2 = r0.<com.android.server.display.DisplayManagerService: android.media.projection.IMediaProjectionManager mProjectionService>;

        if $r2 != null goto label1;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("media_projection");

        $r4 = staticinvoke <android.media.projection.IMediaProjectionManager$Stub: android.media.projection.IMediaProjectionManager asInterface(android.os.IBinder)>(r1);

        r0.<com.android.server.display.DisplayManagerService: android.media.projection.IMediaProjectionManager mProjectionService> = $r4;

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService: android.media.projection.IMediaProjectionManager mProjectionService>;

        return $r3;
    }

    private void dumpInternal(java.io.PrintWriter)
    {
        com.android.server.display.DisplayManagerService r0;
        java.io.PrintWriter r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2, $r8;
        com.android.internal.util.IndentingPrintWriter r3, $r51;
        java.util.Iterator r4, r104;
        com.android.server.display.DisplayAdapter r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10;
        com.android.server.display.LogicalDisplay r6;
        java.lang.Throwable r7, $r100;
        java.lang.StringBuilder $r9, $r10, $r11, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r25, $r27, $r29, $r31, $r32, $r33, $r34, $r37, $r38, $r39, $r40, $r42, $r44, $r46, $r47, $r49, $r50, $r54, $r56, $r58, $r59, $r60, $r61, $r62, $r65, $r66, $r71, $r72, $r73, $r74, $r75, $r80, $r82, $r83, $r86, $r87, $r88, $r89, $r92, $r93, $r96, $r98, $r99, $r102;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String $r12, $r15, $r21, $r24, $r26, $r28, $r36, $r41, $r43, $r45, $r53, $r57, $r68, $r70, $r81, $r84, $r95, $r101, $r103;
        android.hardware.display.DisplayViewport $r30, $r35;
        java.util.ArrayList $r48, $r52, $r55, $r63;
        android.util.SparseArray $r64, $r69, $r78, $r79, $r90;
        com.android.server.display.DisplayPowerController $r67, $r76;
        java.lang.Object $r77, $r85, $r91, $r94;
        com.android.server.display.DisplayDeviceInfo $r97;
        com.android.server.display.DisplayDevice r105;
        com.android.server.display.DisplayManagerService$CallbackRecord r106;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("DISPLAY MANAGER (dumpsys display)");

        $r8 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        r2 = $r8;

        entermonitor $r8;

     label01:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mOnlyCode=");

        $z0 = r0.<com.android.server.display.DisplayManagerService: boolean mOnlyCore>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSafeMode=");

        $z1 = r0.<com.android.server.display.DisplayManagerService: boolean mSafeMode>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingTraversal=");

        $z2 = r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r21);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mGlobalDisplayState=");

        $i1 = r0.<com.android.server.display.DisplayManagerService: int mGlobalDisplayState>;

        $r24 = staticinvoke <android.view.Display: java.lang.String stateToString(int)>($i1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r26);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mNextNonDefaultDisplayId=");

        $i2 = r0.<com.android.server.display.DisplayManagerService: int mNextNonDefaultDisplayId>;

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r28);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDefaultViewport=");

        $r30 = r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mDefaultViewport>;

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r36);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mExternalTouchViewport=");

        $r35 = r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mExternalTouchViewport>;

        $r40 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r41);

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSingleDisplayDemoMode=");

        $z3 = r0.<com.android.server.display.DisplayManagerService: boolean mSingleDisplayDemoMode>;

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r43);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWifiDisplayScanRequestCount=");

        $i3 = r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount>;

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r45);

        $r51 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r51.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r1, "    ");

        r3 = $r51;

        virtualinvoke r3.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display Adapters: size=");

        $r48 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayAdapters>;

        $i4 = virtualinvoke $r48.<java.util.ArrayList: int size()>();

        $r54 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r53);

        $r52 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayAdapters>;

        r4 = virtualinvoke $r52.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z4 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label03;

        $r94 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.display.DisplayAdapter) $r94;

        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        $r92 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r103 = virtualinvoke r5.<com.android.server.display.DisplayAdapter: java.lang.String getName()>();

        $r102 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r103);

        $r101 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r101);

        virtualinvoke r5.<com.android.server.display.DisplayAdapter: void dumpLocked(java.io.PrintWriter)>(r3);

        goto label02;

     label03:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display Devices: size=");

        $r55 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $i5 = virtualinvoke $r55.<java.util.ArrayList: int size()>();

        $r56 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r57);

        $r63 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        r104 = virtualinvoke $r63.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke r104.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label05;

        $r85 = interfaceinvoke r104.<java.util.Iterator: java.lang.Object next()>();

        r105 = (com.android.server.display.DisplayDevice) $r85;

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r98 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r97 = virtualinvoke r105.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r96 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r97);

        $r95 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r95);

        virtualinvoke r105.<com.android.server.display.DisplayDevice: void dumpLocked(java.io.PrintWriter)>(r3);

        goto label04;

     label05:
        $r64 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i7 = virtualinvoke $r64.<android.util.SparseArray: int size()>();

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Logical Displays: size=");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r70 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r70);

        i8 = 0;

     label06:
        if i8 >= i7 goto label07;

        $r79 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i0 = virtualinvoke $r79.<android.util.SparseArray: int keyAt(int)>(i8);

        $r90 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r91 = virtualinvoke $r90.<android.util.SparseArray: java.lang.Object valueAt(int)>(i8);

        r6 = (com.android.server.display.LogicalDisplay) $r91;

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Display ");

        $r86 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r84 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r84);

        virtualinvoke r6.<com.android.server.display.LogicalDisplay: void dumpLocked(java.io.PrintWriter)>(r3);

        i8 = i8 + 1;

        goto label06;

     label07:
        $r69 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        i9 = virtualinvoke $r69.<android.util.SparseArray: int size()>();

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Callbacks: size=");

        $r65 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r68 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r68);

        i10 = 0;

     label08:
        if i10 >= i9 goto label09;

        $r78 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r77 = virtualinvoke $r78.<android.util.SparseArray: java.lang.Object valueAt(int)>(i10);

        r106 = (com.android.server.display.DisplayManagerService$CallbackRecord) $r77;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r72 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r75 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r74 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": mPid=");

        $i6 = r106.<com.android.server.display.DisplayManagerService$CallbackRecord: int mPid>;

        $r83 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r82 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mWifiDisplayScanRequested=");

        $z6 = r106.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested>;

        $r80 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r81);

        i10 = i10 + 1;

        goto label08;

     label09:
        $r67 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        if $r67 == null goto label10;

        $r76 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        virtualinvoke $r76.<com.android.server.display.DisplayPowerController: void dump(java.io.PrintWriter)>(r1);

     label10:
        exitmonitor r2;

     label11:
        goto label14;

     label12:
        $r100 := @caughtexception;

        r7 = $r100;

        exitmonitor r2;

     label13:
        throw r7;

     label14:
        return;

        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    static void access$300(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDefaultDisplayAdapter()>();

        return;
    }

    static void access$400(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerAdditionalDisplayAdapters()>();

        return;
    }

    static void access$500(com.android.server.display.DisplayManagerService, int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void deliverDisplayEvent(int,int)>(i0, i1);

        return;
    }

    static android.view.WindowManagerInternal access$600(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.view.WindowManagerInternal $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.view.WindowManagerInternal mWindowManagerInternal>;

        return $r1;
    }

    static com.android.server.display.DisplayManagerService$SyncRoot access$700(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        return $r1;
    }

    static android.hardware.display.DisplayViewport access$800(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.DisplayViewport $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mDefaultViewport>;

        return $r1;
    }

    static android.hardware.display.DisplayViewport access$900(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.DisplayViewport $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mTempDefaultViewport>;

        return $r1;
    }

    static android.hardware.display.DisplayViewport access$1000(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.DisplayViewport $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mExternalTouchViewport>;

        return $r1;
    }

    static android.hardware.display.DisplayViewport access$1100(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.DisplayViewport $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport mTempExternalTouchViewport>;

        return $r1;
    }

    static android.hardware.input.InputManagerInternal access$1200(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.input.InputManagerInternal $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.hardware.input.InputManagerInternal mInputManagerInternal>;

        return $r1;
    }

    static void access$1300(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: com.android.server.display.DisplayDevice;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAdded(com.android.server.display.DisplayDevice)>(r1);

        return;
    }

    static void access$1400(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: com.android.server.display.DisplayDevice;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceChanged(com.android.server.display.DisplayDevice)>(r1);

        return;
    }

    static void access$1500(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: com.android.server.display.DisplayDevice;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemoved(com.android.server.display.DisplayDevice)>(r1);

        return;
    }

    static void access$1600(com.android.server.display.DisplayManagerService, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(z0);

        return;
    }

    static void access$1700(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayManagerService$CallbackRecord)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$CallbackRecord r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: com.android.server.display.DisplayManagerService$CallbackRecord;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void onCallbackDied(com.android.server.display.DisplayManagerService$CallbackRecord)>(r1);

        return;
    }

    static android.view.DisplayInfo access$1800(com.android.server.display.DisplayManagerService, int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;
        android.view.DisplayInfo $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.view.DisplayInfo getDisplayInfoInternal(int,int)>(i0, i1);

        return $r1;
    }

    static int[] access$1900(com.android.server.display.DisplayManagerService, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        int[] $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: int[] getDisplayIdsInternal(int)>(i0);

        return $r1;
    }

    static void access$2000(com.android.server.display.DisplayManagerService, android.hardware.display.IDisplayManagerCallback, int)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.IDisplayManagerCallback r1;
        int i0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.hardware.display.IDisplayManagerCallback;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerCallbackInternal(android.hardware.display.IDisplayManagerCallback,int)>(r1, i0);

        return;
    }

    static android.content.Context access$2100(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        return $r1;
    }

    static void access$2200(com.android.server.display.DisplayManagerService, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void startWifiDisplayScanInternal(int)>(i0);

        return;
    }

    static void access$2300(com.android.server.display.DisplayManagerService, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void stopWifiDisplayScanInternal(int)>(i0);

        return;
    }

    static void access$2400(com.android.server.display.DisplayManagerService, java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void connectWifiDisplayInternal(java.lang.String)>(r1);

        return;
    }

    static void access$2500(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void disconnectWifiDisplayInternal()>();

        return;
    }

    static void access$2600(com.android.server.display.DisplayManagerService, java.lang.String, java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void renameWifiDisplayInternal(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static void access$2700(com.android.server.display.DisplayManagerService, java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void forgetWifiDisplayInternal(java.lang.String)>(r1);

        return;
    }

    static void access$2800(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void pauseWifiDisplayInternal()>();

        return;
    }

    static void access$2900(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void resumeWifiDisplayInternal()>();

        return;
    }

    static android.hardware.display.WifiDisplayStatus access$3000(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.WifiDisplayStatus $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.hardware.display.WifiDisplayStatus getWifiDisplayStatusInternal()>();

        return $r1;
    }

    static android.media.projection.IMediaProjectionManager access$3100(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.media.projection.IMediaProjectionManager $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.media.projection.IMediaProjectionManager getProjectionService()>();

        return $r1;
    }

    static int access$3200(com.android.server.display.DisplayManagerService, android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, int, java.lang.String, java.lang.String, int, int, int, android.view.Surface, int)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.IVirtualDisplayCallback r1;
        android.media.projection.IMediaProjection r2;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.String r3, r4;
        android.view.Surface r5;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.hardware.display.IVirtualDisplayCallback;

        r2 := @parameter2: android.media.projection.IMediaProjection;

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String;

        i1 := @parameter6: int;

        i2 := @parameter7: int;

        i3 := @parameter8: int;

        r5 := @parameter9: android.view.Surface;

        i4 := @parameter10: int;

        $i5 = specialinvoke r0.<com.android.server.display.DisplayManagerService: int createVirtualDisplayInternal(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int)>(r1, r2, i0, r3, r4, i1, i2, i3, r5, i4);

        return $i5;
    }

    static void access$3300(com.android.server.display.DisplayManagerService, android.os.IBinder, int, int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        android.os.IBinder r1;
        int i0, i1, i2;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.os.IBinder;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void resizeVirtualDisplayInternal(android.os.IBinder,int,int,int)>(r1, i0, i1, i2);

        return;
    }

    static void access$3400(com.android.server.display.DisplayManagerService, android.os.IBinder, android.view.Surface)
    {
        com.android.server.display.DisplayManagerService r0;
        android.os.IBinder r1;
        android.view.Surface r2;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.os.IBinder;

        r2 := @parameter2: android.view.Surface;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void setVirtualDisplaySurfaceInternal(android.os.IBinder,android.view.Surface)>(r1, r2);

        return;
    }

    static void access$3500(com.android.server.display.DisplayManagerService, android.os.IBinder)
    {
        com.android.server.display.DisplayManagerService r0;
        android.os.IBinder r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.os.IBinder;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void releaseVirtualDisplayInternal(android.os.IBinder)>(r1);

        return;
    }

    static void access$3600(com.android.server.display.DisplayManagerService, java.io.PrintWriter)
    {
        com.android.server.display.DisplayManagerService r0;
        java.io.PrintWriter r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void dumpInternal(java.io.PrintWriter)>(r1);

        return;
    }

    static void access$3700(com.android.server.display.DisplayManagerService, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void requestGlobalDisplayStateInternal(int)>(i0);

        return;
    }

    static com.android.server.display.DisplayPowerController access$3802(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayPowerController r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: com.android.server.display.DisplayPowerController;

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController> = r1;

        return r1;
    }

    static com.android.server.display.DisplayPowerController access$3800(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayPowerController $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        return $r1;
    }

    static void access$3900(com.android.server.display.DisplayManagerService, android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.DisplayManagerInternal$DisplayTransactionListener r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.hardware.display.DisplayManagerInternal$DisplayTransactionListener;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayTransactionListenerInternal(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)>(r1);

        return;
    }

    static void access$4000(com.android.server.display.DisplayManagerService, android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.DisplayManagerInternal$DisplayTransactionListener r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.hardware.display.DisplayManagerInternal$DisplayTransactionListener;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void unregisterDisplayTransactionListenerInternal(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)>(r1);

        return;
    }

    static void access$4100(com.android.server.display.DisplayManagerService, int, android.view.DisplayInfo)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        android.view.DisplayInfo r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.DisplayInfo;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void setDisplayInfoOverrideFromWindowManagerInternal(int,android.view.DisplayInfo)>(i0, r1);

        return;
    }

    static void access$4200(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void performTraversalInTransactionFromWindowManagerInternal()>();

        return;
    }

    static void access$4300(com.android.server.display.DisplayManagerService, int, boolean, float, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        boolean z0, z1;
        float f0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        f0 := @parameter3: float;

        z1 := @parameter4: boolean;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void setDisplayPropertiesInternal(int,boolean,float,boolean)>(i0, z0, f0, z1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.display.DisplayManagerService: int MSG_UPDATE_VIEWPORT> = 5;

        <com.android.server.display.DisplayManagerService: int MSG_REQUEST_TRAVERSAL> = 4;

        <com.android.server.display.DisplayManagerService: int MSG_DELIVER_DISPLAY_EVENT> = 3;

        <com.android.server.display.DisplayManagerService: int MSG_REGISTER_ADDITIONAL_DISPLAY_ADAPTERS> = 2;

        <com.android.server.display.DisplayManagerService: int MSG_REGISTER_DEFAULT_DISPLAY_ADAPTER> = 1;

        <com.android.server.display.DisplayManagerService: long WAIT_FOR_DEFAULT_DISPLAY_TIMEOUT> = 10000L;

        <com.android.server.display.DisplayManagerService: java.lang.String FORCE_WIFI_DISPLAY_ENABLE> = "persist.debug.wfd.enable";

        <com.android.server.display.DisplayManagerService: boolean DEBUG> = 0;

        <com.android.server.display.DisplayManagerService: java.lang.String TAG> = "DisplayManagerService";

        return;
    }
}
