abstract class com.android.server.hdmi.HdmiCecLocalDevice extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final int MSG_DISABLE_DEVICE_TIMEOUT;
    private static final int MSG_USER_CONTROL_RELEASE_TIMEOUT;
    private static final int DEVICE_CLEANUP_TIMEOUT;
    private static final int FOLLOWER_SAFETY_TIMEOUT;
    protected final com.android.server.hdmi.HdmiControlService mService;
    protected final int mDeviceType;
    protected int mAddress;
    protected int mPreferredAddress;
    protected android.hardware.hdmi.HdmiDeviceInfo mDeviceInfo;
    protected int mLastKeycode;
    protected int mLastKeyRepeatCount;
    protected final com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource mActiveSource;
    private int mActiveRoutingPath;
    protected final com.android.server.hdmi.HdmiCecMessageCache mCecMessageCache;
    protected final java.lang.Object mLock;
    private final java.util.LinkedList mActions;
    private final android.os.Handler mHandler;
    protected com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback mPendingActionClearedCallback;

    protected void <init>(com.android.server.hdmi.HdmiControlService, int)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiControlService r1;
        int i0;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r2;
        com.android.server.hdmi.HdmiCecMessageCache $r3;
        java.util.LinkedList $r4;
        com.android.server.hdmi.HdmiCecLocalDevice$1 $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mLastKeycode> = -1;

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mLastKeyRepeatCount> = 0;

        $r2 = new com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource;

        specialinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: void <init>()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource mActiveSource> = $r2;

        $r3 = new com.android.server.hdmi.HdmiCecMessageCache;

        specialinvoke $r3.<com.android.server.hdmi.HdmiCecMessageCache: void <init>()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiCecMessageCache mCecMessageCache> = $r3;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.util.LinkedList mActions> = $r4;

        $r5 = new com.android.server.hdmi.HdmiCecLocalDevice$1;

        specialinvoke $r5.<com.android.server.hdmi.HdmiCecLocalDevice$1: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r0);

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: android.os.Handler mHandler> = $r5;

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService> = r1;

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mDeviceType> = i0;

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress> = 15;

        $r6 = virtualinvoke r1.<com.android.server.hdmi.HdmiControlService: java.lang.Object getServiceLock()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.lang.Object mLock> = $r6;

        return;
    }

    static com.android.server.hdmi.HdmiCecLocalDevice create(com.android.server.hdmi.HdmiControlService, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback $r1;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r2;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter1: int;

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 4: goto label2;
            default: goto label3;
        };

     label1:
        $r2 = new com.android.server.hdmi.HdmiCecLocalDeviceTv;

        specialinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void <init>(com.android.server.hdmi.HdmiControlService)>(r0);

        return $r2;

     label2:
        $r1 = new com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        specialinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void <init>(com.android.server.hdmi.HdmiControlService)>(r0);

        return $r1;

     label3:
        return null;
    }

    void init()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $i0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: int getPreferredAddress()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mPreferredAddress> = $i0;

        return;
    }

    protected abstract void onAddressAllocated(int, int);

    protected abstract int getPreferredAddress();

    protected abstract void setPreferredAddress(int);

    boolean dispatchMessage(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int i0, $i1;
        com.android.server.hdmi.HdmiCecMessageCache $r2;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getDestination()>();

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress>;

        if i0 == $i1 goto label1;

        if i0 == 15 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiCecMessageCache mCecMessageCache>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiCecMessageCache: void cacheMessage(com.android.server.hdmi.HdmiCecMessage)>(r1);

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean onMessage(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z0;
    }

    protected final boolean onMessage(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $z0 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean dispatchMessageToAction(com.android.server.hdmi.HdmiCecMessage)>(r1);

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getOpcode()>();

        lookupswitch($i0)
        {
            case 4: goto label20;
            case 10: goto label34;
            case 13: goto label19;
            case 15: goto label30;
            case 53: goto label33;
            case 54: goto label18;
            case 67: goto label31;
            case 68: goto label21;
            case 69: goto label22;
            case 70: goto label07;
            case 71: goto label29;
            case 114: goto label15;
            case 122: goto label17;
            case 126: goto label16;
            case 128: goto label11;
            case 129: goto label12;
            case 130: goto label02;
            case 131: goto label06;
            case 132: goto label10;
            case 133: goto label04;
            case 134: goto label23;
            case 137: goto label27;
            case 140: goto label08;
            case 141: goto label25;
            case 142: goto label26;
            case 143: goto label24;
            case 144: goto label32;
            case 145: goto label05;
            case 157: goto label03;
            case 159: goto label09;
            case 160: goto label28;
            case 192: goto label13;
            case 197: goto label14;
            default: goto label35;
        };

     label02:
        $z18 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleActiveSource(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z18;

     label03:
        $z5 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleInactiveSource(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z5;

     label04:
        $z13 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleRequestActiveSource(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z13;

     label05:
        $z6 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleGetMenuLanguage(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z6;

     label06:
        $z15 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleGivePhysicalAddress()>();

        return $z15;

     label07:
        $z23 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleGiveOsdName(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z23;

     label08:
        $z11 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleGiveDeviceVendorId()>();

        return $z11;

     label09:
        $z4 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleGetCecVersion(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z4;

     label10:
        $z16 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleReportPhysicalAddress(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z16;

     label11:
        $z20 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleRoutingChange(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z20;

     label12:
        $z17 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleRoutingInformation(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z17;

     label13:
        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleInitiateArc(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z2;

     label14:
        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleTerminateArc(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z1;

     label15:
        $z21 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleSetSystemAudioMode(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z21;

     label16:
        $z19 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleSystemAudioModeStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z19;

     label17:
        $z22 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleReportAudioStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z22;

     label18:
        $z27 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleStandby(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z27;

     label19:
        $z29 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleTextViewOn(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z29;

     label20:
        $z33 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleImageViewOn(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z33;

     label21:
        $z25 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleUserControlPressed(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z25;

     label22:
        $z26 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleUserControlReleased()>();

        return $z26;

     label23:
        $z14 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleSetStreamPath(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z14;

     label24:
        $z8 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleGiveDevicePowerStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z8;

     label25:
        $z10 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleMenuRequest(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z10;

     label26:
        $z9 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleMenuStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z9;

     label27:
        $z12 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleVendorCommand(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z12;

     label28:
        $z3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleVendorCommandWithId(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z3;

     label29:
        $z24 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleSetOsdName(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z24;

     label30:
        $z32 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleRecordTvScreen(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z32;

     label31:
        $z28 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleTimerClearedStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z28;

     label32:
        $z7 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleReportPowerStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z7;

     label33:
        $z31 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleTimerStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z31;

     label34:
        $z30 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleRecordStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z30;

     label35:
        return 0;
    }

    private boolean dispatchMessageToAction(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        java.util.Iterator r2;
        com.android.server.hdmi.HdmiCecFeatureAction r3;
        java.util.LinkedList $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.util.LinkedList mActions>;

        r2 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.hdmi.HdmiCecFeatureAction) $r5;

        $z1 = virtualinvoke r3.<com.android.server.hdmi.HdmiCecFeatureAction: boolean processCommand(com.android.server.hdmi.HdmiCecMessage)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    protected boolean handleGivePhysicalAddress()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int i0, $i1, $i2;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService $r2, $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        i0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $i2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress>;

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mDeviceType>;

        r1 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildReportPhysicalAddressCommand(int,int,int)>($i2, i0, $i1);

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return 1;
    }

    protected boolean handleGiveDeviceVendorId()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int i0, $i1;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService $r2, $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        i0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: int getVendorId()>();

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress>;

        r1 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildDeviceVendorIdCommand(int,int)>($i1, i0);

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return 1;
    }

    protected boolean handleGetCecVersion(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1, r2;
        int i0, $i1, $i2;
        com.android.server.hdmi.HdmiControlService $r3, $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        i0 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: int getCecVersion()>();

        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getDestination()>();

        $i2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        r2 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildCecVersion(int,int,int)>($i1, $i2, i0);

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>(r2);

        return 1;
    }

    protected boolean handleActiveSource(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleInactiveSource(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleRequestActiveSource(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleGetMenuLanguage(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only TV can handle <Get Menu Language>:");

        $r4 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDevice", $r6);

        return 0;
    }

    protected boolean handleGiveOsdName(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1, r2;
        int $i0, $i1;
        android.hardware.hdmi.HdmiDeviceInfo $r3, $r7;
        java.lang.String $r4, $r8, $r10;
        java.lang.StringBuilder $r5, $r6, $r9;
        com.android.server.hdmi.HdmiControlService $r11;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress>;

        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: android.hardware.hdmi.HdmiDeviceInfo mDeviceInfo>;

        $r4 = virtualinvoke $r3.<android.hardware.hdmi.HdmiDeviceInfo: java.lang.String getDisplayName()>();

        r2 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildSetOsdNameCommand(int,int,java.lang.String)>($i0, $i1, $r4);

        if r2 == null goto label1;

        $r11 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r11.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>(r2);

        goto label2;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to build <Get Osd Name>:");

        $r7 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: android.hardware.hdmi.HdmiDeviceInfo mDeviceInfo>;

        $r8 = virtualinvoke $r7.<android.hardware.hdmi.HdmiDeviceInfo: java.lang.String getDisplayName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDevice", $r10);

     label2:
        return 1;
    }

    protected boolean handleRoutingChange(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleRoutingInformation(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleReportPhysicalAddress(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleSystemAudioModeStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleSetSystemAudioMode(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleTerminateArc(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleInitiateArc(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleReportAudioStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleStandby(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean isControlEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: boolean isProhibitMode()>();

        if $z1 != 0 goto label1;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $z2 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: boolean isPowerOnOrTransient()>();

        if $z2 == 0 goto label1;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: void standby()>();

        return 1;

     label1:
        return 0;
    }

    protected boolean handleUserControlPressed(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        long l0;
        byte[] r2;
        int i1, i2, $i4, $i5, $i6, $i7;
        android.os.Handler $r3, $r6, $r8;
        com.android.server.hdmi.HdmiControlService $r4, $r5, $r9, $r10;
        boolean $z0, $z1, $z3, $z4;
        byte $b3;
        android.os.Message $r7;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: void removeMessages(int)>(2);

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: boolean isPowerOnOrTransient()>();

        if $z0 == 0 goto label1;

        $z4 = staticinvoke <com.android.server.hdmi.HdmiCecLocalDevice: boolean isPowerOffOrToggleCommand(com.android.server.hdmi.HdmiCecMessage)>(r1);

        if $z4 == 0 goto label1;

        $r10 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r10.<com.android.server.hdmi.HdmiControlService: void standby()>();

        return 1;

     label1:
        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: boolean isPowerStandbyOrTransient()>();

        if $z1 == 0 goto label2;

        $z3 = staticinvoke <com.android.server.hdmi.HdmiCecLocalDevice: boolean isPowerOnOrToggleCommand(com.android.server.hdmi.HdmiCecMessage)>(r1);

        if $z3 == 0 goto label2;

        $r9 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r9.<com.android.server.hdmi.HdmiControlService: void wakeUp()>();

        return 1;

     label2:
        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $b3 = r2[0];

        i1 = staticinvoke <com.android.server.hdmi.HdmiCecKeycode: int cecKeyToAndroidKey(int)>($b3);

        i2 = 0;

        $i4 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mLastKeycode>;

        if $i4 == -1 goto label4;

        $i5 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mLastKeycode>;

        if i1 != $i5 goto label3;

        $i6 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mLastKeyRepeatCount>;

        i2 = $i6 + 1;

        goto label4;

     label3:
        $i7 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mLastKeycode>;

        staticinvoke <com.android.server.hdmi.HdmiCecLocalDevice: void injectKeyEvent(long,int,int,int)>(l0, 1, $i7, 0);

     label4:
        r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mLastKeycode> = i1;

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mLastKeyRepeatCount> = i2;

        if i1 == -1 goto label5;

        staticinvoke <com.android.server.hdmi.HdmiCecLocalDevice: void injectKeyEvent(long,int,int,int)>(l0, 0, i1, i2);

        $r8 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: android.os.Handler mHandler>;

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: android.os.Handler mHandler>;

        $r7 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>($r6, 2);

        virtualinvoke $r8.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r7, 550L);

        return 1;

     label5:
        return 0;
    }

    protected boolean handleUserControlReleased()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        long l0;
        android.os.Handler $r1;
        int $i1, $i2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(2);

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mLastKeyRepeatCount> = 0;

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mLastKeycode>;

        if $i1 == -1 goto label1;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $i2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mLastKeycode>;

        staticinvoke <com.android.server.hdmi.HdmiCecLocalDevice: void injectKeyEvent(long,int,int,int)>(l0, 1, $i2, 0);

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mLastKeycode> = -1;

        return 1;

     label1:
        return 0;
    }

    static void injectKeyEvent(long, int, int, int)
    {
        long l0;
        int i1, i2, i3;
        android.view.KeyEvent r0;
        android.hardware.input.InputManager $r1;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r0 = staticinvoke <android.view.KeyEvent: android.view.KeyEvent obtain(long,long,int,int,int,int,int,int,int,int,java.lang.String)>(l0, l0, i1, i2, i3, 0, -1, 0, 8, 33554433, null);

        $r1 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()>();

        virtualinvoke $r1.<android.hardware.input.InputManager: boolean injectInputEvent(android.view.InputEvent,int)>(r0, 0);

        virtualinvoke r0.<android.view.KeyEvent: void recycle()>();

        return;
    }

    static boolean isPowerOnOrToggleCommand(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecMessage r0;
        byte[] r1;
        int $i0;
        byte $b1, $b2, $b3;
        boolean $z0;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $i0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecMessage: int getOpcode()>();

        if $i0 != 68 goto label2;

        $b1 = r1[0];

        if $b1 == 64 goto label1;

        $b2 = r1[0];

        if $b2 == 109 goto label1;

        $b3 = r1[0];

        if $b3 != 107 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static boolean isPowerOffOrToggleCommand(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecMessage r0;
        byte[] r1;
        int $i0;
        byte $b1, $b2, $b3;
        boolean $z0;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $i0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecMessage: int getOpcode()>();

        if $i0 != 68 goto label2;

        $b1 = r1[0];

        if $b1 == 64 goto label1;

        $b2 = r1[0];

        if $b2 == 108 goto label1;

        $b3 = r1[0];

        if $b3 != 107 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected boolean handleTextViewOn(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleImageViewOn(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleSetStreamPath(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleGiveDevicePowerStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1, $r4;
        com.android.server.hdmi.HdmiControlService $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress>;

        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: int getPowerStatus()>();

        $r4 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildReportPowerStatus(int,int,int)>($i0, $i1, $i2);

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r4);

        return 1;
    }

    protected boolean handleMenuRequest(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1, $r3;
        com.android.server.hdmi.HdmiControlService $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress>;

        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $r3 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildReportMenuStatus(int,int,int)>($i0, $i1, 0);

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r3);

        return 1;
    }

    protected boolean handleMenuStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleVendorCommand(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService $r2, $r4;
        int $i0, $i1;
        byte[] $r3;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mDeviceType>;

        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $r3 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean invokeVendorCommandListeners(int,int,byte[],boolean)>($i0, $i1, $r3, 0);

        if $z0 != 0 goto label1;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 1);

     label1:
        return 1;
    }

    protected boolean handleVendorCommandWithId(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        byte[] r2;
        int i0, $i1, $i2, $i4, $i6, $i7;
        com.android.server.hdmi.HdmiControlService $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int threeBytesToInt(byte[])>(r2);

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: int getVendorId()>();

        if i0 != $i1 goto label1;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $i6 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mDeviceType>;

        $i7 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $z0 = virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: boolean invokeVendorCommandListeners(int,int,byte[],boolean)>($i6, $i7, r2, 1);

        if $z0 != 0 goto label3;

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 1);

        goto label3;

     label1:
        $i2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getDestination()>();

        if $i2 == 15 goto label2;

        $i4 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        if $i4 == 15 goto label2;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("HdmiCecLocalDevice", "Wrong direct vendor command. Replying with <Feature Abort>");

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 0);

        goto label3;

     label2:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("HdmiCecLocalDevice", "Wrong broadcast vendor command. Ignoring");

     label3:
        return 1;
    }

    protected void sendStandby(int)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter0: int;

        return;
    }

    protected boolean handleSetOsdName(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 1;
    }

    protected boolean handleRecordTvScreen(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 2);

        return 1;
    }

    protected boolean handleTimerClearedStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleReportPowerStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleTimerStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    protected boolean handleRecordStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    final void handleAddressAllocated(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int i0, i1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mPreferredAddress> = i0;

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress> = i0;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void onAddressAllocated(int,int)>(i0, i1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void setPreferredAddress(int)>(i0);

        return;
    }

    int getType()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mDeviceType>;

        return $i0;
    }

    android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        android.hardware.hdmi.HdmiDeviceInfo $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: android.hardware.hdmi.HdmiDeviceInfo mDeviceInfo>;

        return $r1;
    }

    void setDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        android.hardware.hdmi.HdmiDeviceInfo r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: android.hardware.hdmi.HdmiDeviceInfo mDeviceInfo> = r1;

        return;
    }

    boolean isAddressOf(int)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress>;

        if i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void clearAddress()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress> = 15;

        return;
    }

    void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecFeatureAction r1;
        java.util.LinkedList $r2;
        com.android.server.hdmi.HdmiControlService $r3;
        boolean $z1;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecFeatureAction;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.util.LinkedList mActions>;

        virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: boolean isPowerStandbyOrTransient()>();

        if $z1 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not ready to start action. Queued for deferred start:");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiCecLocalDevice", $r7);

        return;

     label1:
        virtualinvoke r1.<com.android.server.hdmi.HdmiCecFeatureAction: boolean start()>();

        return;
    }

    void startQueuedActions()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        java.util.Iterator r1;
        com.android.server.hdmi.HdmiCecFeatureAction r2;
        java.util.LinkedList $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.util.LinkedList mActions>;

        r1 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.hdmi.HdmiCecFeatureAction) $r4;

        $z1 = virtualinvoke r2.<com.android.server.hdmi.HdmiCecFeatureAction: boolean started()>();

        if $z1 != 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting queued action:");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiCecLocalDevice", $r8);

        virtualinvoke r2.<com.android.server.hdmi.HdmiCecFeatureAction: boolean start()>();

     label2:
        goto label1;

     label3:
        return;
    }

    boolean hasAction(java.lang.Class)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        java.lang.Class r1, $r6;
        java.util.Iterator r2;
        com.android.server.hdmi.HdmiCecFeatureAction r3;
        java.util.LinkedList $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: java.lang.Class;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.util.LinkedList mActions>;

        r2 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.hdmi.HdmiCecFeatureAction) $r5;

        $r6 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    java.util.List getActions(java.lang.Class)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        java.lang.Class r1, $r7;
        java.util.List r2;
        java.util.Iterator r3;
        com.android.server.hdmi.HdmiCecFeatureAction r4;
        java.util.LinkedList $r5;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6;
        java.util.ArrayList $r8;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: java.lang.Class;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.util.LinkedList mActions>;

        r3 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.hdmi.HdmiCecFeatureAction) $r6;

        $r7 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $z2 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label2;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = $r8;

     label2:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

     label3:
        goto label1;

     label4:
        return r2;
    }

    void removeAction(com.android.server.hdmi.HdmiCecFeatureAction)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecFeatureAction r1;
        java.util.LinkedList $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecFeatureAction;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        virtualinvoke r1.<com.android.server.hdmi.HdmiCecFeatureAction: void finish(boolean)>(0);

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.util.LinkedList mActions>;

        virtualinvoke $r2.<java.util.LinkedList: boolean remove(java.lang.Object)>(r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void checkIfPendingActionsCleared()>();

        return;
    }

    void removeAction(java.lang.Class)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        java.lang.Class r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: java.lang.Class;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void removeActionExcept(java.lang.Class,com.android.server.hdmi.HdmiCecFeatureAction)>(r1, null);

        return;
    }

    void removeActionExcept(java.lang.Class, com.android.server.hdmi.HdmiCecFeatureAction)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        java.lang.Class r1, $r7;
        com.android.server.hdmi.HdmiCecFeatureAction r2, r4;
        java.util.Iterator r3;
        java.util.LinkedList $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: com.android.server.hdmi.HdmiCecFeatureAction;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.util.LinkedList mActions>;

        r3 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.hdmi.HdmiCecFeatureAction) $r6;

        if r4 == r2 goto label2;

        $r7 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        virtualinvoke r4.<com.android.server.hdmi.HdmiCecFeatureAction: void finish(boolean)>(0);

        interfaceinvoke r3.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void checkIfPendingActionsCleared()>();

        return;
    }

    protected void checkIfPendingActionsCleared()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback r1, $r3;
        java.util.LinkedList $r2;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.util.LinkedList mActions>;

        $z0 = virtualinvoke $r2.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback mPendingActionClearedCallback>;

        if $r3 == null goto label1;

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback mPendingActionClearedCallback>;

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback mPendingActionClearedCallback> = null;

        interfaceinvoke r1.<com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback: void onCleared(com.android.server.hdmi.HdmiCecLocalDevice)>(r0);

     label1:
        return;
    }

    protected void assertRunOnServiceThread()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        android.os.Looper $r1, $r3;
        com.android.server.hdmi.HdmiControlService $r2;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $r3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: android.os.Looper getServiceLooper()>();

        if $r1 == $r3 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should run on service thread.");

        throw $r4;

     label1:
        return;
    }

    void onHotplug(int, boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return;
    }

    final com.android.server.hdmi.HdmiControlService getService()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiControlService $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        return $r1;
    }

    final boolean isConnectedToArcPort(int)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int i0;
        com.android.server.hdmi.HdmiControlService $r1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isConnectedToArcPort(int)>(i0);

        return $z0;
    }

    com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource mActiveSource>;

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void setActiveSource(com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource r1;
        int $i0, $i1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource;

        $i1 = r1.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int logicalAddress>;

        $i0 = r1.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int physicalAddress>;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void setActiveSource(int,int)>($i1, $i0);

        return;
    }

    void setActiveSource(android.hardware.hdmi.HdmiDeviceInfo)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        int $i0, $i1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        $i0 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $i1 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void setActiveSource(int,int)>($i0, $i1);

        return;
    }

    void setActiveSource(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int i0, i1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r4, $r5;
        com.android.server.hdmi.HdmiControlService $r6;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource mActiveSource>;

        $r4.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int logicalAddress> = i0;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource mActiveSource>;

        $r5.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int physicalAddress> = i1;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: void setLastInputForMhl(int)>(-1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    int getActivePath()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mActiveRoutingPath>;

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void setActivePath(int)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int i0, $i1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.server.hdmi.HdmiControlService $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mActiveRoutingPath> = i0;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: int pathToPortId(int)>(i0);

        virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: void setActivePortId(int)>($i1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    int getActivePortId()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        int $i0, $i1;
        com.android.server.hdmi.HdmiControlService $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mActiveRoutingPath>;

        $i1 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: int pathToPortId(int)>($i0);

        exitmonitor r1;

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void setActivePortId(int)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int i0, $i1;
        com.android.server.hdmi.HdmiControlService $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: int portIdToPath(int)>(i0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void setActivePath(int)>($i1);

        return;
    }

    com.android.server.hdmi.HdmiCecMessageCache getCecMessageCache()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.server.hdmi.HdmiCecMessageCache $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiCecMessageCache mCecMessageCache>;

        return $r1;
    }

    int pathToPortId(int)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int i0, $i1;
        com.android.server.hdmi.HdmiControlService $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: int pathToPortId(int)>(i0);

        return $i1;
    }

    protected void onStandby(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        z0 := @parameter0: boolean;

        return;
    }

    protected void disableDevice(boolean, com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        boolean z0;
        com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback r1;
        com.android.server.hdmi.HdmiCecLocalDevice$2 $r2;
        android.os.Handler $r3, $r4;
        android.os.Message $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback;

        $r2 = new com.android.server.hdmi.HdmiCecLocalDevice$2;

        specialinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDevice$2: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback)>(r0, r1);

        r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback mPendingActionClearedCallback> = $r2;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: android.os.Handler mHandler>;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: android.os.Handler mHandler>;

        $r5 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>($r3, 1);

        virtualinvoke $r4.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r5, 5000L);

        return;
    }

    private void handleDisableDeviceTimeout()
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        java.util.Iterator r1;
        com.android.server.hdmi.HdmiCecFeatureAction r2;
        java.util.LinkedList $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void assertRunOnServiceThread()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: java.util.LinkedList mActions>;

        r1 = virtualinvoke $r3.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.hdmi.HdmiCecFeatureAction) $r4;

        virtualinvoke r2.<com.android.server.hdmi.HdmiCecFeatureAction: void finish(boolean)>(0);

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return;
    }

    protected void sendKeyEvent(int, boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDevice", "sendKeyEvent not implemented");

        return;
    }

    void sendUserControlPressedAndReleased(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        int i0, i1, $i2, $i3;
        com.android.server.hdmi.HdmiControlService $r1, $r3;
        com.android.server.hdmi.HdmiCecMessage $r2, $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress>;

        $r2 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildUserControlPressed(int,int,int)>($i2, i0, i1);

        virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r2);

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiControlService mService>;

        $i3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress>;

        $r4 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildUserControlReleased(int,int)>($i3, i0);

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r4);

        return;
    }

    protected void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r16, $r18, $r19, $r20, $r21;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r5, $r9, $r14, $r17, $r24, $r26;
        android.hardware.hdmi.HdmiDeviceInfo $r15;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r22;
        java.lang.Object[] $r23;
        java.lang.Integer $r25;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevice;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDeviceType: ");

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mDeviceType>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mAddress: ");

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mPreferredAddress: ");

        $i2 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mPreferredAddress>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r14);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDeviceInfo: ");

        $r15 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: android.hardware.hdmi.HdmiDeviceInfo mDeviceInfo>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r17);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mActiveSource: ");

        $r22 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource mActiveSource>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r24);

        $r23 = newarray (java.lang.Object)[1];

        $i3 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: int mActiveRoutingPath>;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r23[0] = $r25;

        $r26 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("mActiveRoutingPath: 0x%04x", $r23);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r26);

        return;
    }

    static void access$000(com.android.server.hdmi.HdmiCecLocalDevice)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecLocalDevice;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void handleDisableDeviceTimeout()>();

        return;
    }

    static android.os.Handler access$100(com.android.server.hdmi.HdmiCecLocalDevice)
    {
        com.android.server.hdmi.HdmiCecLocalDevice r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecLocalDevice;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevice: android.os.Handler mHandler>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.server.hdmi.HdmiCecLocalDevice: int FOLLOWER_SAFETY_TIMEOUT> = 550;

        <com.android.server.hdmi.HdmiCecLocalDevice: int DEVICE_CLEANUP_TIMEOUT> = 5000;

        <com.android.server.hdmi.HdmiCecLocalDevice: int MSG_USER_CONTROL_RELEASE_TIMEOUT> = 2;

        <com.android.server.hdmi.HdmiCecLocalDevice: int MSG_DISABLE_DEVICE_TIMEOUT> = 1;

        <com.android.server.hdmi.HdmiCecLocalDevice: java.lang.String TAG> = "HdmiCecLocalDevice";

        return;
    }
}
