final class com.android.server.input.PersistentDataStore$InputDeviceState extends java.lang.Object
{
    private static final java.lang.String[] CALIBRATION_NAME;
    private android.hardware.input.TouchCalibration[] mTouchCalibration;
    private java.lang.String mCurrentKeyboardLayout;
    private java.util.ArrayList mKeyboardLayouts;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        com.android.server.input.PersistentDataStore$InputDeviceState r0;
        android.hardware.input.TouchCalibration[] $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.input.PersistentDataStore$InputDeviceState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (android.hardware.input.TouchCalibration)[4];

        r0.<com.android.server.input.PersistentDataStore$InputDeviceState: android.hardware.input.TouchCalibration[] mTouchCalibration> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts> = $r2;

        return;
    }

    public android.hardware.input.TouchCalibration getTouchCalibration(int)
    {
        com.android.server.input.PersistentDataStore$InputDeviceState r0;
        int i0;
        java.lang.ArrayIndexOutOfBoundsException r1, $r4;
        android.hardware.input.TouchCalibration[] $r2;
        android.hardware.input.TouchCalibration $r3;

        r0 := @this: com.android.server.input.PersistentDataStore$InputDeviceState;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: android.hardware.input.TouchCalibration[] mTouchCalibration>;

        $r3 = $r2[i0];

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", "Cannot get touch calibration.", r1);

        return null;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public boolean setTouchCalibration(int, android.hardware.input.TouchCalibration)
    {
        com.android.server.input.PersistentDataStore$InputDeviceState r0;
        int i0;
        android.hardware.input.TouchCalibration r1, $r4;
        java.lang.ArrayIndexOutOfBoundsException r2, $r6;
        android.hardware.input.TouchCalibration[] $r3, $r5;
        boolean $z0;

        r0 := @this: com.android.server.input.PersistentDataStore$InputDeviceState;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.input.TouchCalibration;

     label1:
        $r3 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: android.hardware.input.TouchCalibration[] mTouchCalibration>;

        $r4 = $r3[i0];

        $z0 = virtualinvoke r1.<android.hardware.input.TouchCalibration: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label3;

        $r5 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: android.hardware.input.TouchCalibration[] mTouchCalibration>;

        $r5[i0] = r1;

     label2:
        return 1;

     label3:
        return 0;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", "Cannot set touch calibration.", r2);

        return 0;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label4;
    }

    public java.lang.String getCurrentKeyboardLayout()
    {
        com.android.server.input.PersistentDataStore$InputDeviceState r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.input.PersistentDataStore$InputDeviceState;

        $r1 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout>;

        return $r1;
    }

    public boolean setCurrentKeyboardLayout(java.lang.String)
    {
        com.android.server.input.PersistentDataStore$InputDeviceState r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.input.PersistentDataStore$InputDeviceState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout>;

        $z0 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<com.android.server.input.PersistentDataStore$InputDeviceState: boolean addKeyboardLayout(java.lang.String)>(r1);

        r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout> = r1;

        return 1;
    }

    public java.lang.String[] getKeyboardLayouts()
    {
        com.android.server.input.PersistentDataStore$InputDeviceState r0;
        java.util.ArrayList $r1, $r2, $r3;
        boolean $z0;
        int $i0;
        java.lang.String[] $r4, $r6, $r8, $r9;
        java.lang.Object[] $r5, $r7;

        r0 := @this: com.android.server.input.PersistentDataStore$InputDeviceState;

        $r1 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        $z0 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r7 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] emptyArray(java.lang.Class)>(class "java/lang/String");

        $r8 = (java.lang.String[]) $r7;

        $r9 = (java.lang.String[]) $r8;

        return $r9;

     label1:
        $r3 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        $r2 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $r4 = newarray (java.lang.String)[$i0];

        $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        return $r6;
    }

    public boolean addKeyboardLayout(java.lang.String)
    {
        com.android.server.input.PersistentDataStore$InputDeviceState r0;
        java.lang.String r1, $r4;
        int i0, $i1, $i2;
        java.util.ArrayList $r2, $r3;

        r0 := @this: com.android.server.input.PersistentDataStore$InputDeviceState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>($r2, r1);

        if i0 < 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        $i1 = neg i0;

        $i2 = $i1 - 1;

        virtualinvoke $r3.<java.util.ArrayList: void add(int,java.lang.Object)>($i2, r1);

        $r4 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout>;

        if $r4 != null goto label2;

        r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout> = r1;

     label2:
        return 1;
    }

    public boolean removeKeyboardLayout(java.lang.String)
    {
        com.android.server.input.PersistentDataStore$InputDeviceState r0;
        java.lang.String r1;
        int i0;
        java.util.ArrayList $r2, $r3;

        r0 := @this: com.android.server.input.PersistentDataStore$InputDeviceState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>($r2, r1);

        if i0 >= 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        virtualinvoke $r3.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        specialinvoke r0.<com.android.server.input.PersistentDataStore$InputDeviceState: void updateCurrentKeyboardLayoutIfRemoved(java.lang.String,int)>(r1, i0);

        return 1;
    }

    private void updateCurrentKeyboardLayoutIfRemoved(java.lang.String, int)
    {
        com.android.server.input.PersistentDataStore$InputDeviceState r0;
        java.lang.String r1, $r2, $r7;
        int i0, i1, $i2;
        boolean $z0, $z1;
        java.util.ArrayList $r3, $r4, $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.server.input.PersistentDataStore$InputDeviceState;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout>;

        $z0 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z0 == 0 goto label3;

        $r3 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        i1 = i0;

        $r4 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        $i2 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i1 != $i2 goto label1;

        i1 = 0;

     label1:
        $r5 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r7 = (java.lang.String) $r6;

        r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout> = $r7;

        goto label3;

     label2:
        r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout> = null;

     label3:
        return;
    }

    public boolean switchKeyboardLayout(int)
    {
        com.android.server.input.PersistentDataStore$InputDeviceState r0;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        java.util.ArrayList $r1, $r3, $r4;
        java.lang.String $r2, $r6;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.AssertionError $r7;

        r0 := @this: com.android.server.input.PersistentDataStore$InputDeviceState;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i1 >= 2 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        $r2 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout>;

        i2 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>($r3, $r2);

        $z0 = <com.android.server.input.PersistentDataStore$InputDeviceState: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i2 >= 0 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        if i0 <= 0 goto label3;

        $i5 = i2 + 1;

        i6 = $i5 % i1;

        goto label4;

     label3:
        $i3 = i2 + i1;

        $i4 = $i3 - 1;

        i6 = $i4 % i1;

     label4:
        $r4 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        $r6 = (java.lang.String) $r5;

        r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout> = $r6;

        return 1;
    }

    public boolean removeUninstalledKeyboardLayouts(java.util.Set)
    {
        com.android.server.input.PersistentDataStore$InputDeviceState r0;
        java.util.Set r1;
        boolean z0, $z1;
        int i0, $i1;
        java.lang.String r2, $r9;
        java.util.ArrayList $r3, $r4, $r10;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: com.android.server.input.PersistentDataStore$InputDeviceState;

        r1 := @parameter0: java.util.Set;

        z0 = 0;

        $r3 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

     label1:
        $i1 = i0;

        i0 = i0 + -1;

        if $i1 <= 0 goto label3;

        $r4 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r2 = (java.lang.String) $r5;

        $z1 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z1 != 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing uninstalled keyboard layout ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("InputManager", $r9);

        $r10 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        virtualinvoke $r10.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        specialinvoke r0.<com.android.server.input.PersistentDataStore$InputDeviceState: void updateCurrentKeyboardLayoutIfRemoved(java.lang.String,int)>(r2, i0);

        z0 = 1;

     label2:
        goto label1;

     label3:
        return z0;
    }

    public void loadFromXml(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.input.PersistentDataStore$InputDeviceState r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7;
        java.lang.String r2, r3, r5, r6, $r8, $r11, $r13, $r14, $r20, $r24, $r27, r35, r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.ArrayList $r7, $r9, $r10, $r30, $r31;
        java.lang.Object $r12;
        android.hardware.input.TouchCalibration $r15, $r16, $r19;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        android.hardware.input.TouchCalibration[] $r17, $r18, $r21;
        java.lang.String[] $r22, $r23;
        org.xmlpull.v1.XmlPullParserException $r25, $r26, $r28, $r29, $r32, $r34;
        java.lang.IllegalArgumentException $r33;
        float[] r37;

        r0 := @this: com.android.server.input.PersistentDataStore$InputDeviceState;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label01:
        $z0 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r1, i0);

        if $z0 == 0 goto label21;

        $r13 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("keyboard-layout");

        if $z2 == 0 goto label06;

        r2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "descriptor");

        if r2 != null goto label02;

        $r32 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r32.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Missing descriptor attribute on keyboard-layout.");

        throw $r32;

     label02:
        r3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "current");

        $r30 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        $z8 = virtualinvoke $r30.<java.util.ArrayList: boolean contains(java.lang.Object)>(r2);

        if $z8 == 0 goto label03;

        $r29 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r29.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Found duplicate keyboard layout.");

        throw $r29;

     label03:
        $r31 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        virtualinvoke $r31.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        if r3 == null goto label05;

        $z7 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z7 == 0 goto label05;

        $r27 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout>;

        if $r27 == null goto label04;

        $r28 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r28.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Found multiple current keyboard layouts.");

        throw $r28;

     label04:
        r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout> = r2;

     label05:
        goto label01;

     label06:
        $r14 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("calibration");

        if $z3 == 0 goto label01;

        r35 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "format");

        r36 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "rotation");

        i1 = -1;

        if r35 != null goto label07;

        $r25 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r25.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Missing format attribute on calibration.");

        throw $r25;

     label07:
        $z4 = virtualinvoke r35.<java.lang.String: boolean equals(java.lang.Object)>("affine");

        if $z4 != 0 goto label08;

        $r26 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r26.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Unsupported format for calibration.");

        throw $r26;

     label08:
        if r36 == null goto label12;

     label09:
        i1 = staticinvoke <com.android.server.input.PersistentDataStore$InputDeviceState: int stringToSurfaceRotation(java.lang.String)>(r36);

     label10:
        goto label12;

     label11:
        $r33 := @caughtexception;

        $r34 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r34.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Unsupported rotation for calibration.");

        throw $r34;

     label12:
        $r15 = <android.hardware.input.TouchCalibration: android.hardware.input.TouchCalibration IDENTITY>;

        r37 = virtualinvoke $r15.<android.hardware.input.TouchCalibration: float[] getAffineTransform()>();

        i2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label13:
        $z5 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r1, i2);

        if $z5 == 0 goto label17;

        $r20 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        r5 = virtualinvoke $r20.<java.lang.String: java.lang.String toLowerCase()>();

        r6 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        i3 = 0;

     label14:
        $i6 = lengthof r37;

        if i3 >= $i6 goto label16;

        $r23 = <com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String[] CALIBRATION_NAME>;

        $i5 = lengthof $r23;

        if i3 >= $i5 goto label16;

        $r22 = <com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String[] CALIBRATION_NAME>;

        $r24 = $r22[i3];

        $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z6 == 0 goto label15;

        $f12 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r6);

        r37[i3] = $f12;

        goto label16;

     label15:
        i3 = i3 + 1;

        goto label14;

     label16:
        goto label13;

     label17:
        if i1 != -1 goto label19;

        i7 = 0;

     label18:
        $r18 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: android.hardware.input.TouchCalibration[] mTouchCalibration>;

        $i4 = lengthof $r18;

        if i7 >= $i4 goto label20;

        $r21 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: android.hardware.input.TouchCalibration[] mTouchCalibration>;

        $r19 = new android.hardware.input.TouchCalibration;

        $f9 = r37[0];

        $f8 = r37[1];

        $f11 = r37[2];

        $f10 = r37[3];

        $f7 = r37[4];

        $f6 = r37[5];

        specialinvoke $r19.<android.hardware.input.TouchCalibration: void <init>(float,float,float,float,float,float)>($f9, $f8, $f11, $f10, $f7, $f6);

        $r21[i7] = $r19;

        i7 = i7 + 1;

        goto label18;

     label19:
        $r17 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: android.hardware.input.TouchCalibration[] mTouchCalibration>;

        $r16 = new android.hardware.input.TouchCalibration;

        $f5 = r37[0];

        $f4 = r37[1];

        $f1 = r37[2];

        $f0 = r37[3];

        $f3 = r37[4];

        $f2 = r37[5];

        specialinvoke $r16.<android.hardware.input.TouchCalibration: void <init>(float,float,float,float,float,float)>($f5, $f4, $f1, $f0, $f3, $f2);

        $r17[i1] = $r16;

     label20:
        goto label01;

     label21:
        $r7 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r7);

        $r8 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout>;

        if $r8 != null goto label22;

        $r9 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        $z1 = virtualinvoke $r9.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label22;

        $r10 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        $r12 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r11 = (java.lang.String) $r12;

        r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout> = $r11;

     label22:
        return;

        catch java.lang.IllegalArgumentException from label09 to label10 with label11;
    }

    public void saveToXml(org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        com.android.server.input.PersistentDataStore$InputDeviceState r0;
        org.xmlpull.v1.XmlSerializer r1;
        java.util.Iterator r2;
        java.lang.String r3, $r16, $r20, $r21, $r29, r30;
        float[] r4;
        int i0, $i1, $i2, $i3, i4;
        java.util.ArrayList $r5;
        boolean $z0, $z1;
        android.hardware.input.TouchCalibration[] $r6, $r7, $r9;
        android.hardware.input.TouchCalibration $r8, $r10;
        java.lang.String[] $r15, $r17, $r22;
        float $f0;
        java.lang.Object $r26;

        r0 := @this: com.android.server.input.PersistentDataStore$InputDeviceState;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        $r5 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.util.ArrayList mKeyboardLayouts>;

        r2 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r26 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r26;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "keyboard-layout");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "descriptor", r3);

        $r29 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String mCurrentKeyboardLayout>;

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z1 == 0 goto label2;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "current", "true");

     label2:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "keyboard-layout");

        goto label1;

     label3:
        i4 = 0;

     label4:
        $r6 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: android.hardware.input.TouchCalibration[] mTouchCalibration>;

        $i1 = lengthof $r6;

        if i4 >= $i1 goto label8;

        $r7 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: android.hardware.input.TouchCalibration[] mTouchCalibration>;

        $r8 = $r7[i4];

        if $r8 == null goto label7;

        r30 = staticinvoke <com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String surfaceRotationToString(int)>(i4);

        $r9 = r0.<com.android.server.input.PersistentDataStore$InputDeviceState: android.hardware.input.TouchCalibration[] mTouchCalibration>;

        $r10 = $r9[i4];

        r4 = virtualinvoke $r10.<android.hardware.input.TouchCalibration: float[] getAffineTransform()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "calibration");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "format", "affine");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "rotation", r30);

        i0 = 0;

     label5:
        $i2 = lengthof r4;

        if i0 >= $i2 goto label6;

        $r15 = <com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String[] CALIBRATION_NAME>;

        $i3 = lengthof $r15;

        if i0 >= $i3 goto label6;

        $r17 = <com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String[] CALIBRATION_NAME>;

        $r16 = $r17[i0];

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, $r16);

        $f0 = r4[i0];

        $r20 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>($r20);

        $r22 = <com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String[] CALIBRATION_NAME>;

        $r21 = $r22[i0];

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, $r21);

        i0 = i0 + 1;

        goto label5;

     label6:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "calibration");

     label7:
        i4 = i4 + 1;

        goto label4;

     label8:
        return;
    }

    private static java.lang.String surfaceRotationToString(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        return "0";

     label2:
        return "90";

     label3:
        return "180";

     label4:
        return "270";

     label5:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported surface rotation value");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    private static int stringToSurfaceRotation(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r10;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @parameter0: java.lang.String;

        $r1 = "0";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = "90";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r3 = "180";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

        return 2;

     label3:
        $r4 = "270";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label4;

        return 3;

     label4:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported surface rotation string \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;
    }

    void <init>(com.android.server.input.PersistentDataStore$1)
    {
        com.android.server.input.PersistentDataStore$InputDeviceState r0;
        com.android.server.input.PersistentDataStore$1 r1;

        r0 := @this: com.android.server.input.PersistentDataStore$InputDeviceState;

        r1 := @parameter0: com.android.server.input.PersistentDataStore$1;

        specialinvoke r0.<com.android.server.input.PersistentDataStore$InputDeviceState: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.lang.String[] $r1;

        $r0 = class "com/android/server/input/PersistentDataStore";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.android.server.input.PersistentDataStore$InputDeviceState: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (java.lang.String)[6];

        $r1[0] = "x_scale";

        $r1[1] = "x_ymix";

        $r1[2] = "x_offset";

        $r1[3] = "y_xmix";

        $r1[4] = "y_scale";

        $r1[5] = "y_offset";

        <com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String[] CALIBRATION_NAME> = $r1;

        return;
    }
}
