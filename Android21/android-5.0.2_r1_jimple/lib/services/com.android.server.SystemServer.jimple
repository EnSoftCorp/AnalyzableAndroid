public final class com.android.server.SystemServer extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final java.lang.String ENCRYPTING_STATE;
    private static final java.lang.String ENCRYPTED_STATE;
    private static final long SNAPSHOT_INTERVAL;
    private static final long EARLIEST_SUPPORTED_TIME;
    private static final java.lang.String BACKUP_MANAGER_SERVICE_CLASS;
    private static final java.lang.String APPWIDGET_SERVICE_CLASS;
    private static final java.lang.String VOICE_RECOGNITION_MANAGER_SERVICE_CLASS;
    private static final java.lang.String PRINT_MANAGER_SERVICE_CLASS;
    private static final java.lang.String USB_SERVICE_CLASS;
    private static final java.lang.String WIFI_SERVICE_CLASS;
    private static final java.lang.String WIFI_P2P_SERVICE_CLASS;
    private static final java.lang.String ETHERNET_SERVICE_CLASS;
    private static final java.lang.String JOB_SCHEDULER_SERVICE_CLASS;
    private static final java.lang.String PERSISTENT_DATA_BLOCK_PROP;
    private final int mFactoryTestMode;
    private java.util.Timer mProfilerSnapshotTimer;
    private android.content.Context mSystemContext;
    private com.android.server.SystemServiceManager mSystemServiceManager;
    private com.android.server.pm.Installer mInstaller;
    private com.android.server.power.PowerManagerService mPowerManagerService;
    private com.android.server.am.ActivityManagerService mActivityManagerService;
    private com.android.server.display.DisplayManagerService mDisplayManagerService;
    private com.android.server.pm.PackageManagerService mPackageManagerService;
    private android.content.pm.PackageManager mPackageManager;
    private android.content.ContentResolver mContentResolver;
    private boolean mOnlyCore;
    private boolean mFirstBoot;

    private static native void nativeInit();

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        com.android.server.SystemServer $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new com.android.server.SystemServer;

        specialinvoke $r1.<com.android.server.SystemServer: void <init>()>();

        specialinvoke $r1.<com.android.server.SystemServer: void run()>();

        return;
    }

    public void <init>()
    {
        com.android.server.SystemServer r0;
        int $i0;

        r0 := @this: com.android.server.SystemServer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = staticinvoke <android.os.FactoryTest: int getMode()>();

        r0.<com.android.server.SystemServer: int mFactoryTestMode> = $i0;

        return;
    }

    private void run()
    {
        com.android.server.SystemServer r0;
        java.lang.Throwable r1, $r13;
        long $l0, $l3;
        byte $b1;
        dalvik.system.VMRuntime $r2, $r4, $r5;
        java.lang.String $r3;
        boolean $z0, $z1;
        com.android.server.SystemServiceManager $r6, $r7;
        android.content.Context $r8;
        java.lang.RuntimeException $r9;
        java.util.Timer $r10, $r11;
        com.android.server.SystemServer$1 $r12;

        r0 := @this: com.android.server.SystemServer;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b1 = $l0 cmp 86400000L;

        if $b1 >= 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemServer", "System clock is before 1970; setting to 1970.");

        staticinvoke <android.os.SystemClock: boolean setCurrentTimeMillis(long)>(86400000L);

     label1:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Entered the Android system server!");

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(3010, $l3);

        $r2 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r3 = virtualinvoke $r2.<dalvik.system.VMRuntime: java.lang.String vmLibrary()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.dalvik.vm.lib.2", $r3);

        $z0 = staticinvoke <com.android.internal.os.SamplingProfilerIntegration: boolean isEnabled()>();

        if $z0 == 0 goto label2;

        staticinvoke <com.android.internal.os.SamplingProfilerIntegration: void start()>();

        $r10 = new java.util.Timer;

        specialinvoke $r10.<java.util.Timer: void <init>()>();

        r0.<com.android.server.SystemServer: java.util.Timer mProfilerSnapshotTimer> = $r10;

        $r11 = r0.<com.android.server.SystemServer: java.util.Timer mProfilerSnapshotTimer>;

        $r12 = new com.android.server.SystemServer$1;

        specialinvoke $r12.<com.android.server.SystemServer$1: void <init>(com.android.server.SystemServer)>(r0);

        virtualinvoke $r11.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>($r12, 3600000L, 3600000L);

     label2:
        $r4 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r4.<dalvik.system.VMRuntime: void clearGrowthLimit()>();

        $r5 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r5.<dalvik.system.VMRuntime: float setTargetHeapUtilization(float)>(0.8F);

        staticinvoke <android.os.Build: void ensureFingerprintProperty()>();

        staticinvoke <android.os.Environment: void setUserRequired(boolean)>(1);

        staticinvoke <com.android.internal.os.BinderInternal: void disableBackgroundScheduling(boolean)>(1);

        staticinvoke <android.os.Process: void setThreadPriority(int)>(-2);

        staticinvoke <android.os.Process: void setCanSelfBackground(boolean)>(0);

        staticinvoke <android.os.Looper: void prepareMainLooper()>();

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("android_servers");

        staticinvoke <com.android.server.SystemServer: void nativeInit()>();

        specialinvoke r0.<com.android.server.SystemServer: void performPendingShutdown()>();

        specialinvoke r0.<com.android.server.SystemServer: void createSystemContext()>();

        $r6 = new com.android.server.SystemServiceManager;

        $r8 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        specialinvoke $r6.<com.android.server.SystemServiceManager: void <init>(android.content.Context)>($r8);

        r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager> = $r6;

        $r7 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "com/android/server/SystemServiceManager", $r7);

     label3:
        specialinvoke r0.<com.android.server.SystemServer: void startBootstrapServices()>();

        specialinvoke r0.<com.android.server.SystemServer: void startCoreServices()>();

        specialinvoke r0.<com.android.server.SystemServer: void startOtherServices()>();

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        r1 = $r13;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("System", "******************************************");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("System", "************ Failure starting system services", r1);

        throw r1;

     label6:
        $z1 = staticinvoke <android.os.StrictMode: boolean conditionallyEnableDebugLogging()>();

        if $z1 == 0 goto label7;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Enabled StrictMode for system server main thread.");

     label7:
        staticinvoke <android.os.Looper: void loop()>();

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Main thread loop unexpectedly exited");

        throw $r9;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void reportWtf(java.lang.String, java.lang.Throwable)
    {
        com.android.server.SystemServer r0;
        java.lang.String r1, $r6;
        java.lang.Throwable r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: com.android.server.SystemServer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemServer", "***********************************************");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BOOT FAILURE ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemServer", $r6, r2);

        return;
    }

    private void performPendingShutdown()
    {
        com.android.server.SystemServer r0;
        java.lang.String r1, r2;
        boolean z0, $z1;
        int $i0, $i2, $i3;
        char $c1;

        r0 := @this: com.android.server.SystemServer;

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("sys.shutdown.requested", "");

        if r1 == null goto label5;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label5;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c1 != 49 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 <= 1 goto label3;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i3);

        goto label4;

     label3:
        r2 = null;

     label4:
        staticinvoke <com.android.server.power.ShutdownThread: void rebootOrShutdown(boolean,java.lang.String)>(z0, r2);

     label5:
        return;
    }

    private void createSystemContext()
    {
        com.android.server.SystemServer r0;
        android.app.ActivityThread r1;
        android.app.ContextImpl $r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.SystemServer;

        r1 = staticinvoke <android.app.ActivityThread: android.app.ActivityThread systemMain()>();

        $r2 = virtualinvoke r1.<android.app.ActivityThread: android.app.ContextImpl getSystemContext()>();

        r0.<com.android.server.SystemServer: android.content.Context mSystemContext> = $r2;

        $r3 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        virtualinvoke $r3.<android.content.Context: void setTheme(int)>(16974143);

        return;
    }

    private void startBootstrapServices()
    {
        com.android.server.SystemServer r0;
        java.lang.String r1, $r19, $r20;
        com.android.server.SystemServiceManager $r2, $r5, $r9, $r11, $r15, $r18;
        com.android.server.SystemService $r3, $r6, $r12, $r17;
        com.android.server.pm.Installer $r4, $r21;
        com.android.server.am.ActivityManagerService$Lifecycle $r7;
        com.android.server.am.ActivityManagerService $r8, $r10, $r14, $r27;
        com.android.server.power.PowerManagerService $r13;
        com.android.server.display.DisplayManagerService $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0;
        com.android.server.pm.PackageManagerService $r22, $r24;
        android.content.Context $r23, $r25, $r29;
        android.content.pm.PackageManager $r26;
        com.android.server.pm.UserManagerService $r28;

        r0 := @this: com.android.server.SystemServer;

        $r2 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        $r3 = virtualinvoke $r2.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/pm/Installer");

        $r4 = (com.android.server.pm.Installer) $r3;

        r0.<com.android.server.SystemServer: com.android.server.pm.Installer mInstaller> = $r4;

        $r5 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        $r6 = virtualinvoke $r5.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/am/ActivityManagerService$Lifecycle");

        $r7 = (com.android.server.am.ActivityManagerService$Lifecycle) $r6;

        $r8 = virtualinvoke $r7.<com.android.server.am.ActivityManagerService$Lifecycle: com.android.server.am.ActivityManagerService getService()>();

        r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService> = $r8;

        $r10 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r9 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r10.<com.android.server.am.ActivityManagerService: void setSystemServiceManager(com.android.server.SystemServiceManager)>($r9);

        $r11 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        $r12 = virtualinvoke $r11.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/power/PowerManagerService");

        $r13 = (com.android.server.power.PowerManagerService) $r12;

        r0.<com.android.server.SystemServer: com.android.server.power.PowerManagerService mPowerManagerService> = $r13;

        $r14 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r14.<com.android.server.am.ActivityManagerService: void initPowerManagement()>();

        $r15 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        $r17 = virtualinvoke $r15.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/display/DisplayManagerService");

        $r16 = (com.android.server.display.DisplayManagerService) $r17;

        r0.<com.android.server.SystemServer: com.android.server.display.DisplayManagerService mDisplayManagerService> = $r16;

        $r18 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r18.<com.android.server.SystemServiceManager: void startBootPhase(int)>(100);

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("vold.decrypt");

        $r19 = "trigger_restart_min_framework";

        $z0 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemServer", "Detected encryption in progress - only parsing core apps");

        r0.<com.android.server.SystemServer: boolean mOnlyCore> = 1;

        goto label2;

     label1:
        $r20 = "1";

        $z1 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SystemServer", "Device encrypted - only parsing core apps");

        r0.<com.android.server.SystemServer: boolean mOnlyCore> = 1;

     label2:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Package Manager");

        $r23 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        $r21 = r0.<com.android.server.SystemServer: com.android.server.pm.Installer mInstaller>;

        $i0 = r0.<com.android.server.SystemServer: int mFactoryTestMode>;

        if $i0 == 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        $z2 = r0.<com.android.server.SystemServer: boolean mOnlyCore>;

        $r22 = staticinvoke <com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService main(android.content.Context,com.android.server.pm.Installer,boolean,boolean)>($r23, $r21, $z4, $z2);

        r0.<com.android.server.SystemServer: com.android.server.pm.PackageManagerService mPackageManagerService> = $r22;

        $r24 = r0.<com.android.server.SystemServer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $z3 = virtualinvoke $r24.<com.android.server.pm.PackageManagerService: boolean isFirstBoot()>();

        r0.<com.android.server.SystemServer: boolean mFirstBoot> = $z3;

        $r25 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        $r26 = virtualinvoke $r25.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager> = $r26;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "User Service");

        $r28 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("user", $r28);

        $r29 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        staticinvoke <com.android.server.AttributeCache: void init(android.content.Context)>($r29);

        $r27 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r27.<com.android.server.am.ActivityManagerService: void setSystemProcess()>();

        return;
    }

    private void startCoreServices()
    {
        com.android.server.SystemServer r0;
        com.android.server.SystemServiceManager $r1, $r3, $r5, $r10;
        com.android.server.am.ActivityManagerService $r7;
        java.lang.Object $r8;
        android.app.usage.UsageStatsManagerInternal $r9;

        r0 := @this: com.android.server.SystemServer;

        $r1 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r1.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/lights/LightsService");

        $r3 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r3.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/BatteryService");

        $r5 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r5.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/usage/UsageStatsService");

        $r7 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r8 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "android/app/usage/UsageStatsManagerInternal");

        $r9 = (android.app.usage.UsageStatsManagerInternal) $r8;

        virtualinvoke $r7.<com.android.server.am.ActivityManagerService: void setUsageStatsManager(android.app.usage.UsageStatsManagerInternal)>($r9);

        $r10 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r10.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/webkit/WebViewUpdateService");

        return;
    }

    private void startOtherServices()
    {
        com.android.server.SystemServer r0;
        android.content.Context r1;
        com.android.server.accounts.AccountManagerService r2, $r57;
        com.android.server.content.ContentService r3;
        com.android.server.VibratorService r4, $r61;
        android.app.IAlarmManager r5;
        com.android.server.MountService r6, $r170, r256;
        com.android.server.NetworkManagementService r7, r35;
        com.android.server.net.NetworkStatsService r8, r34, $r149;
        com.android.server.net.NetworkPolicyManagerService r9, r33, $r147;
        com.android.server.ConnectivityService r10, r32, $r142;
        com.android.server.NetworkScoreService r11, r39, $r136;
        com.android.server.wm.WindowManagerService r12;
        com.android.server.NetworkTimeUpdateService r13, r42, $r125;
        com.android.server.input.InputManagerService r14, r45, $r62;
        com.android.server.CommonTimeManagementService r15, r41, $r113;
        com.android.server.TelephonyRegistry r16, r44, $r55;
        android.media.AudioService r17, r49, $r129;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, z29;
        com.android.server.InputMethodManagerService r18, r37, $r171;
        java.lang.Throwable r19, r25, r29, r30, $r157, $r158, $r159, $r160, $r161, $r162, $r163, $r173, $r175, $r176, $r177, $r178, $r179, $r180, $r181, $r182, $r183, $r184, $r185, $r186, $r187, $r189, $r190, $r191, $r192, $r193, $r194, $r195, $r196, $r197, $r198, $r199, $r200, $r201, $r202, $r203, $r204, $r205, $r206, $r207, $r208, r214, r215, r216, r217, r218, r219, r220, r221, r222, r223, r224, r225, r226, r228, r229, r230, r231, r233, r234, r235, r236, r237, r238, r239, r241, r242, r243, r244, r245, r246, r247, r248, r249, r251, r252, r254, r255;
        com.android.server.CountryDetectorService r20, r43, $r138;
        com.android.server.TextServicesManagerService r21, r40, $r143;
        com.android.server.wallpaper.WallpaperManagerService r22, r38, $r141;
        com.android.server.LocationManagerService r23, r36, $r139;
        com.android.server.media.MediaRouterService r24, r48, $r104;
        com.android.server.LockSettingsService r26, $r164;
        com.android.server.AssetAtlasService r27, r46, $r115;
        android.view.WindowManager r28;
        android.util.DisplayMetrics r31, $r85;
        com.android.server.statusbar.StatusBarManagerService r47, $r146, r213;
        com.android.server.MmsServiceBroker r50, r250;
        java.lang.String $r51, $r130, $r131, $r165, $r168, $r169;
        com.android.server.EntropyMixer $r52;
        android.content.ContentResolver $r53;
        com.android.server.os.SchedulingPolicyService $r54;
        com.android.server.am.ActivityManagerService $r56, $r63, $r67, $r75, $r92, $r93, $r94, $r148;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.os.IBinder $r58, $r87, $r151;
        com.android.server.ConsumerIrService $r59, r209;
        com.android.server.SystemServiceManager $r60, $r82, $r83, $r84, $r86, $r88, $r96, $r100, $r102, $r103, $r105, $r106, $r107, $r108, $r109, $r114, $r116, $r117, $r118, $r120, $r121, $r122, $r124, $r132, $r144, $r150, $r153, $r154, $r156, $r166, $r167;
        android.content.pm.PackageManager $r64, $r98, $r110, $r111, $r119, $r123, $r126, $r127, $r134, $r155;
        com.android.server.display.DisplayManagerService $r65, $r90;
        com.android.server.wm.InputMonitor $r66;
        java.lang.CharSequence $r68;
        android.content.res.Resources $r69, $r76, $r128;
        android.app.IActivityManager $r70;
        com.android.server.pm.PackageManagerService $r71, $r79;
        com.android.server.BluetoothManagerService $r72, r211;
        android.view.Display $r73;
        java.lang.Object $r74;
        com.android.internal.app.IAppOpsService $r77;
        com.android.server.power.PowerManagerService $r78;
        dalvik.system.VMRuntime $r80, $r95;
        com.android.server.SystemService $r81;
        com.android.server.DropBoxManagerService $r89;
        com.android.server.SystemServer$2 $r91;
        com.android.server.DiskStatsService $r97;
        com.android.server.SamplingProfilerService $r99;
        java.io.File $r101;
        com.android.server.CertBlacklister $r112;
        com.android.server.WiredAccessoryManager $r133;
        com.android.server.SerialService $r135, r240;
        com.android.server.UpdateLockService $r137;
        com.android.server.search.SearchManagerService $r140;
        com.android.server.clipboard.ClipboardService $r145;
        android.os.IPowerManager $r152;
        com.android.server.accessibility.AccessibilityManagerService $r172;
        android.os.RemoteException $r174;
        java.lang.RuntimeException $r188, r212;
        com.android.server.Watchdog r210;
        com.android.server.NsdService r227;
        android.app.INotificationManager r232;
        android.content.res.Configuration r253;

        r0 := @this: com.android.server.SystemServer;

        r1 = r0.<com.android.server.SystemServer: android.content.Context mSystemContext>;

        r2 = null;

        r3 = null;

        r4 = null;

        r5 = null;

        r6 = null;

        r7 = null;

        r8 = null;

        r9 = null;

        r10 = null;

        r11 = null;

        r12 = null;

        r13 = null;

        r15 = null;

        r14 = null;

        r16 = null;

        r17 = null;

        z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.disable_storage", 0);

        z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.disable_media", 0);

        z2 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.disable_bluetooth", 0);

        staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.disable_telephony", 0);

        z4 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.disable_location", 0);

        z3 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.disable_systemui", 0);

        z6 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.disable_noncore", 0);

        z5 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("config.disable_network", 0);

        $r51 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.kernel.qemu");

        z7 = virtualinvoke $r51.<java.lang.String: boolean equals(java.lang.Object)>("1");

     label001:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Reading configuration...");

        staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Scheduling Policy");

        $r54 = new com.android.server.os.SchedulingPolicyService;

        specialinvoke $r54.<com.android.server.os.SchedulingPolicyService: void <init>()>();

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("scheduling_policy", $r54);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Telephony Registry");

        $r55 = new com.android.server.TelephonyRegistry;

        specialinvoke $r55.<com.android.server.TelephonyRegistry: void <init>(android.content.Context)>(r1);

        r16 = $r55;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("telephony.registry", r16);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Entropy Mixer");

        $r52 = new com.android.server.EntropyMixer;

        specialinvoke $r52.<com.android.server.EntropyMixer: void <init>(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("entropy", $r52);

        $r53 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.SystemServer: android.content.ContentResolver mContentResolver> = $r53;

     label002:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Account Manager");

        $r57 = new com.android.server.accounts.AccountManagerService;

        specialinvoke $r57.<com.android.server.accounts.AccountManagerService: void <init>(android.content.Context)>(r1);

        r2 = $r57;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("account", r2);

     label003:
        goto label005;

     label004:
        $r196 := @caughtexception;

        r19 = $r196;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemServer", "Failure starting Account Manager", r19);

     label005:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Content Manager");

        $i0 = r0.<com.android.server.SystemServer: int mFactoryTestMode>;

        if $i0 != 1 goto label006;

        $z25 = 1;

        goto label007;

     label006:
        $z25 = 0;

     label007:
        r3 = staticinvoke <com.android.server.content.ContentService: com.android.server.content.ContentService main(android.content.Context,boolean)>(r1, $z25);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "System Content Providers");

        $r56 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r56.<com.android.server.am.ActivityManagerService: void installSystemProviders()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Vibrator Service");

        $r61 = new com.android.server.VibratorService;

        specialinvoke $r61.<com.android.server.VibratorService: void <init>(android.content.Context)>(r1);

        r4 = $r61;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("vibrator", r4);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Consumer IR Service");

        $r59 = new com.android.server.ConsumerIrService;

        specialinvoke $r59.<com.android.server.ConsumerIrService: void <init>(android.content.Context)>(r1);

        r209 = $r59;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("consumer_ir", r209);

        $r60 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r60.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/AlarmManagerService");

        $r58 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("alarm");

        r5 = staticinvoke <android.app.IAlarmManager$Stub: android.app.IAlarmManager asInterface(android.os.IBinder)>($r58);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Init Watchdog");

        r210 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        $r63 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke r210.<com.android.server.Watchdog: void init(android.content.Context,com.android.server.am.ActivityManagerService)>(r1, $r63);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Input Manager");

        $r62 = new com.android.server.input.InputManagerService;

        specialinvoke $r62.<com.android.server.input.InputManagerService: void <init>(android.content.Context)>(r1);

        r14 = $r62;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Window Manager");

        $i1 = r0.<com.android.server.SystemServer: int mFactoryTestMode>;

        if $i1 == 1 goto label008;

        $z26 = 1;

        goto label009;

     label008:
        $z26 = 0;

     label009:
        $z8 = r0.<com.android.server.SystemServer: boolean mFirstBoot>;

        if $z8 != 0 goto label010;

        $z24 = 1;

        goto label011;

     label010:
        $z24 = 0;

     label011:
        $z9 = r0.<com.android.server.SystemServer: boolean mOnlyCore>;

        r12 = staticinvoke <com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService main(android.content.Context,com.android.server.input.InputManagerService,boolean,boolean,boolean)>(r1, r14, $z26, $z24, $z9);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("window", r12);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("input", r14);

        $r67 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r67.<com.android.server.am.ActivityManagerService: void setWindowManager(com.android.server.wm.WindowManagerService)>(r12);

        $r66 = virtualinvoke r12.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor getInputMonitor()>();

        virtualinvoke r14.<com.android.server.input.InputManagerService: void setWindowManagerCallbacks(com.android.server.input.InputManagerService$WindowManagerCallbacks)>($r66);

        virtualinvoke r14.<com.android.server.input.InputManagerService: void start()>();

        $r65 = r0.<com.android.server.SystemServer: com.android.server.display.DisplayManagerService mDisplayManagerService>;

        virtualinvoke $r65.<com.android.server.display.DisplayManagerService: void windowManagerAndInputReady()>();

        if z7 == 0 goto label012;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "No Bluetooh Service (emulator)");

        goto label016;

     label012:
        $i2 = r0.<com.android.server.SystemServer: int mFactoryTestMode>;

        if $i2 != 1 goto label013;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "No Bluetooth Service (factory test)");

        goto label016;

     label013:
        $r64 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z10 = virtualinvoke $r64.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.bluetooth");

        if $z10 != 0 goto label014;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "No Bluetooth Service (Bluetooth Hardware Not Present)");

        goto label016;

     label014:
        if z2 == 0 goto label015;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Bluetooth Service disabled by config");

        goto label016;

     label015:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Bluetooth Manager Service");

        $r72 = new com.android.server.BluetoothManagerService;

        specialinvoke $r72.<com.android.server.BluetoothManagerService: void <init>(android.content.Context)>(r1);

        r211 = $r72;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("bluetooth_manager", r211);

     label016:
        goto label018;

     label017:
        $r188 := @caughtexception;

        r212 = $r188;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("System", "******************************************");

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("System", "************ Failure starting core service", r212);

     label018:
        r213 = null;

        r18 = null;

        r22 = null;

        r23 = null;

        r20 = null;

        r21 = null;

        r26 = null;

        r27 = null;

        r24 = null;

        $i5 = r0.<com.android.server.SystemServer: int mFactoryTestMode>;

        if $i5 == 1 goto label025;

     label019:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Input Method Service");

        $r171 = new com.android.server.InputMethodManagerService;

        specialinvoke $r171.<com.android.server.InputMethodManagerService: void <init>(android.content.Context,com.android.server.wm.WindowManagerService)>(r1, r12);

        r18 = $r171;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("input_method", r18);

     label020:
        goto label022;

     label021:
        $r161 := @caughtexception;

        r25 = $r161;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Input Manager Service", r25);

     label022:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Accessibility Manager");

        $r172 = new com.android.server.accessibility.AccessibilityManagerService;

        specialinvoke $r172.<com.android.server.accessibility.AccessibilityManagerService: void <init>(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("accessibility", $r172);

     label023:
        goto label025;

     label024:
        $r163 := @caughtexception;

        r214 = $r163;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Accessibility Manager", r214);

     label025:
        virtualinvoke r12.<com.android.server.wm.WindowManagerService: void displayReady()>();

     label026:
        goto label028;

     label027:
        $r189 := @caughtexception;

        r215 = $r189;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making display ready", r215);

     label028:
        $i4 = r0.<com.android.server.SystemServer: int mFactoryTestMode>;

        if $i4 == 1 goto label032;

        if z1 != 0 goto label032;

        $r168 = "0";

        $r169 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("system_init.startmountservice");

        $z28 = virtualinvoke $r168.<java.lang.String: boolean equals(java.lang.Object)>($r169);

        if $z28 != 0 goto label032;

     label029:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Mount Service");

        $r170 = new com.android.server.MountService;

        specialinvoke $r170.<com.android.server.MountService: void <init>(android.content.Context)>(r1);

        r6 = $r170;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("mount", r6);

     label030:
        goto label032;

     label031:
        $r193 := @caughtexception;

        r216 = $r193;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Mount Service", r216);

     label032:
        $r71 = r0.<com.android.server.SystemServer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        virtualinvoke $r71.<com.android.server.pm.PackageManagerService: void performBootDexOpt()>();

     label033:
        goto label035;

     label034:
        $r203 := @caughtexception;

        r217 = $r203;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("performing boot dexopt", r217);

     label035:
        $r70 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r69 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r68 = virtualinvoke $r69.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040519);

        interfaceinvoke $r70.<android.app.IActivityManager: void showBootMessage(java.lang.CharSequence,boolean)>($r68, 0);

     label036:
        goto label038;

     label037:
        $r174 := @caughtexception;

     label038:
        $i3 = r0.<com.android.server.SystemServer: int mFactoryTestMode>;

        if $i3 == 1 goto label158;

        if z6 != 0 goto label044;

     label039:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "LockSettingsService");

        $r164 = new com.android.server.LockSettingsService;

        specialinvoke $r164.<com.android.server.LockSettingsService: void <init>(android.content.Context)>(r1);

        r26 = $r164;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("lock_settings", r26);

     label040:
        goto label042;

     label041:
        $r185 := @caughtexception;

        r218 = $r185;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting LockSettingsService service", r218);

     label042:
        $r165 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.frp.pst");

        $z27 = virtualinvoke $r165.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z27 != 0 goto label043;

        $r167 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r167.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/PersistentDataBlockService");

     label043:
        $r166 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r166.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/devicepolicy/DevicePolicyManagerService$Lifecycle");

     label044:
        if z3 != 0 goto label048;

     label045:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Status Bar");

        $r146 = new com.android.server.statusbar.StatusBarManagerService;

        specialinvoke $r146.<com.android.server.statusbar.StatusBarManagerService: void <init>(android.content.Context,com.android.server.wm.WindowManagerService)>(r1, r12);

        r213 = $r146;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("statusbar", r213);

     label046:
        goto label048;

     label047:
        $r180 := @caughtexception;

        r219 = $r180;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting StatusBarManagerService", r219);

     label048:
        if z6 != 0 goto label052;

     label049:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Clipboard Service");

        $r145 = new com.android.server.clipboard.ClipboardService;

        specialinvoke $r145.<com.android.server.clipboard.ClipboardService: void <init>(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("clipboard", $r145);

     label050:
        goto label052;

     label051:
        $r204 := @caughtexception;

        r220 = $r204;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Clipboard Service", r220);

     label052:
        if z5 != 0 goto label056;

     label053:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "NetworkManagement Service");

        r7 = staticinvoke <com.android.server.NetworkManagementService: com.android.server.NetworkManagementService create(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("network_management", r7);

     label054:
        goto label056;

     label055:
        $r208 := @caughtexception;

        r221 = $r208;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting NetworkManagement Service", r221);

     label056:
        if z6 != 0 goto label060;

     label057:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Text Service Manager Service");

        $r143 = new com.android.server.TextServicesManagerService;

        specialinvoke $r143.<com.android.server.TextServicesManagerService: void <init>(android.content.Context)>(r1);

        r21 = $r143;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("textservices", r21);

     label058:
        goto label060;

     label059:
        $r159 := @caughtexception;

        r222 = $r159;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Text Service Manager Service", r222);

     label060:
        if z5 != 0 goto label077;

     label061:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Network Score Service");

        $r136 = new com.android.server.NetworkScoreService;

        specialinvoke $r136.<com.android.server.NetworkScoreService: void <init>(android.content.Context)>(r1);

        r11 = $r136;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("network_score", r11);

     label062:
        goto label064;

     label063:
        $r173 := @caughtexception;

        r223 = $r173;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Network Score Service", r223);

     label064:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "NetworkStats Service");

        $r149 = new com.android.server.net.NetworkStatsService;

        specialinvoke $r149.<com.android.server.net.NetworkStatsService: void <init>(android.content.Context,android.os.INetworkManagementService,android.app.IAlarmManager)>(r1, r7, r5);

        r8 = $r149;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("netstats", r8);

     label065:
        goto label067;

     label066:
        $r207 := @caughtexception;

        r224 = $r207;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting NetworkStats Service", r224);

     label067:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "NetworkPolicy Service");

        $r147 = new com.android.server.net.NetworkPolicyManagerService;

        $r148 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r151 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("power");

        $r152 = (android.os.IPowerManager) $r151;

        specialinvoke $r147.<com.android.server.net.NetworkPolicyManagerService: void <init>(android.content.Context,android.app.IActivityManager,android.os.IPowerManager,android.net.INetworkStatsService,android.os.INetworkManagementService)>(r1, $r148, $r152, r8, r7);

        r9 = $r147;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("netpolicy", r9);

     label068:
        goto label070;

     label069:
        $r202 := @caughtexception;

        r225 = $r202;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting NetworkPolicy Service", r225);

     label070:
        $r150 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r150.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.wifi.p2p.WifiP2pService");

        $r154 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r154.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.wifi.WifiService");

        $r153 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r153.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.wifi.WifiScanningService");

        $r156 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r156.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.wifi.RttService");

        $r155 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z23 = virtualinvoke $r155.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.ethernet");

        if $z23 == 0 goto label071;

        $r144 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r144.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.ethernet.EthernetService");

     label071:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Connectivity Service");

        $r142 = new com.android.server.ConnectivityService;

        specialinvoke $r142.<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager)>(r1, r7, r8, r9);

        r10 = $r142;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("connectivity", r10);

        virtualinvoke r8.<com.android.server.net.NetworkStatsService: void bindConnectivityManager(android.net.IConnectivityManager)>(r10);

        virtualinvoke r9.<com.android.server.net.NetworkPolicyManagerService: void bindConnectivityManager(android.net.IConnectivityManager)>(r10);

     label072:
        goto label074;

     label073:
        $r205 := @caughtexception;

        r226 = $r205;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Connectivity Service", r226);

     label074:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Network Service Discovery Service");

        r227 = staticinvoke <com.android.server.NsdService: com.android.server.NsdService create(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("servicediscovery", r227);

     label075:
        goto label077;

     label076:
        $r184 := @caughtexception;

        r228 = $r184;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Service Discovery Service", r228);

     label077:
        if z6 != 0 goto label081;

     label078:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "UpdateLock Service");

        $r137 = new com.android.server.UpdateLockService;

        specialinvoke $r137.<com.android.server.UpdateLockService: void <init>(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("updatelock", $r137);

     label079:
        goto label081;

     label080:
        $r179 := @caughtexception;

        r229 = $r179;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting UpdateLockService", r229);

     label081:
        if r6 == null goto label082;

        $z22 = r0.<com.android.server.SystemServer: boolean mOnlyCore>;

        if $z22 != 0 goto label082;

        virtualinvoke r6.<com.android.server.MountService: void waitForAsecScan()>();

     label082:
        if r2 == null goto label083;

        virtualinvoke r2.<com.android.server.accounts.AccountManagerService: void systemReady()>();

     label083:
        goto label085;

     label084:
        $r175 := @caughtexception;

        r230 = $r175;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Account Manager Service ready", r230);

     label085:
        if r3 == null goto label086;

        virtualinvoke r3.<com.android.server.content.ContentService: void systemReady()>();

     label086:
        goto label088;

     label087:
        $r201 := @caughtexception;

        r231 = $r201;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Content Service ready", r231);

     label088:
        $r86 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r86.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/notification/NotificationManagerService");

        $r87 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("notification");

        r232 = staticinvoke <android.app.INotificationManager$Stub: android.app.INotificationManager asInterface(android.os.IBinder)>($r87);

        virtualinvoke r9.<com.android.server.net.NetworkPolicyManagerService: void bindNotificationManager(android.app.INotificationManager)>(r232);

        $r88 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r88.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/storage/DeviceStorageMonitorService");

        if z4 != 0 goto label095;

     label089:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Location Manager");

        $r139 = new com.android.server.LocationManagerService;

        specialinvoke $r139.<com.android.server.LocationManagerService: void <init>(android.content.Context)>(r1);

        r23 = $r139;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("location", r23);

     label090:
        goto label092;

     label091:
        $r160 := @caughtexception;

        r233 = $r160;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Location Manager", r233);

     label092:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Country Detector");

        $r138 = new com.android.server.CountryDetectorService;

        specialinvoke $r138.<com.android.server.CountryDetectorService: void <init>(android.content.Context)>(r1);

        r20 = $r138;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("country_detector", r20);

     label093:
        goto label095;

     label094:
        $r190 := @caughtexception;

        r234 = $r190;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Country Detector", r234);

     label095:
        if z6 != 0 goto label099;

     label096:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Search Service");

        $r140 = new com.android.server.search.SearchManagerService;

        specialinvoke $r140.<com.android.server.search.SearchManagerService: void <init>(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("search", $r140);

     label097:
        goto label099;

     label098:
        $r158 := @caughtexception;

        r235 = $r158;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Search Service", r235);

     label099:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "DropBox Service");

        $r89 = new com.android.server.DropBoxManagerService;

        $r101 = new java.io.File;

        specialinvoke $r101.<java.io.File: void <init>(java.lang.String)>("/data/system/dropbox");

        specialinvoke $r89.<com.android.server.DropBoxManagerService: void <init>(android.content.Context,java.io.File)>(r1, $r101);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("dropbox", $r89);

     label100:
        goto label102;

     label101:
        $r181 := @caughtexception;

        r236 = $r181;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting DropBoxManagerService", r236);

     label102:
        if z6 != 0 goto label106;

        $r128 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z19 = virtualinvoke $r128.<android.content.res.Resources: boolean getBoolean(int)>(17956920);

        if $z19 == 0 goto label106;

     label103:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Wallpaper Service");

        $r141 = new com.android.server.wallpaper.WallpaperManagerService;

        specialinvoke $r141.<com.android.server.wallpaper.WallpaperManagerService: void <init>(android.content.Context)>(r1);

        r22 = $r141;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("wallpaper", r22);

     label104:
        goto label106;

     label105:
        $r206 := @caughtexception;

        r237 = $r206;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Wallpaper Service", r237);

     label106:
        if z0 != 0 goto label110;

        $r131 = "0";

        $r130 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("system_init.startaudioservice");

        $z20 = virtualinvoke $r131.<java.lang.String: boolean equals(java.lang.Object)>($r130);

        if $z20 != 0 goto label110;

     label107:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Audio Service");

        $r129 = new android.media.AudioService;

        specialinvoke $r129.<android.media.AudioService: void <init>(android.content.Context)>(r1);

        r17 = $r129;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("audio", r17);

     label108:
        goto label110;

     label109:
        $r199 := @caughtexception;

        r238 = $r199;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting Audio Service", r238);

     label110:
        if z6 != 0 goto label111;

        $r132 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r132.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/DockObserver");

     label111:
        if z0 != 0 goto label115;

     label112:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Wired Accessory Manager");

        $r133 = new com.android.server.WiredAccessoryManager;

        specialinvoke $r133.<com.android.server.WiredAccessoryManager: void <init>(android.content.Context,com.android.server.input.InputManagerService)>(r1, r14);

        virtualinvoke r14.<com.android.server.input.InputManagerService: void setWiredAccessoryCallbacks(com.android.server.input.InputManagerService$WiredAccessoryCallbacks)>($r133);

     label113:
        goto label115;

     label114:
        $r194 := @caughtexception;

        r239 = $r194;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting WiredAccessoryManager", r239);

     label115:
        if z6 != 0 goto label120;

        $r119 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z15 = virtualinvoke $r119.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.usb.host");

        if $z15 != 0 goto label116;

        $r134 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z21 = virtualinvoke $r134.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.usb.accessory");

        if $z21 == 0 goto label117;

     label116:
        $r120 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r120.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.usb.UsbService$Lifecycle");

     label117:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Serial Service");

        $r135 = new com.android.server.SerialService;

        specialinvoke $r135.<com.android.server.SerialService: void <init>(android.content.Context)>(r1);

        r240 = $r135;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("serial", r240);

     label118:
        goto label120;

     label119:
        $r157 := @caughtexception;

        r241 = $r157;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemServer", "Failure starting SerialService", r241);

     label120:
        $r100 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r100.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/twilight/TwilightService");

        $r103 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r103.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/UiModeManagerService");

        $r102 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r102.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/job/JobSchedulerService");

        if z6 != 0 goto label123;

        $r126 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z18 = virtualinvoke $r126.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.backup");

        if $z18 == 0 goto label121;

        $r122 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r122.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.backup.BackupManagerService$Lifecycle");

     label121:
        $r127 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z16 = virtualinvoke $r127.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.app_widgets");

        if $z16 == 0 goto label122;

        $r121 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r121.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.appwidget.AppWidgetService");

     label122:
        $r123 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z17 = virtualinvoke $r123.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.voice_recognizers");

        if $z17 == 0 goto label123;

        $r124 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r124.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.voiceinteraction.VoiceInteractionManagerService");

     label123:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "DiskStats Service");

        $r97 = new com.android.server.DiskStatsService;

        specialinvoke $r97.<com.android.server.DiskStatsService: void <init>(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("diskstats", $r97);

     label124:
        goto label126;

     label125:
        $r186 := @caughtexception;

        r242 = $r186;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting DiskStats Service", r242);

     label126:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "SamplingProfiler Service");

        $r99 = new com.android.server.SamplingProfilerService;

        specialinvoke $r99.<com.android.server.SamplingProfilerService: void <init>(android.content.Context)>(r1);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("samplingprofiler", $r99);

     label127:
        goto label129;

     label128:
        $r182 := @caughtexception;

        r243 = $r182;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting SamplingProfiler Service", r243);

     label129:
        if z5 != 0 goto label133;

     label130:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "NetworkTimeUpdateService");

        $r125 = new com.android.server.NetworkTimeUpdateService;

        specialinvoke $r125.<com.android.server.NetworkTimeUpdateService: void <init>(android.content.Context)>(r1);

        r13 = $r125;

     label131:
        goto label133;

     label132:
        $r187 := @caughtexception;

        r244 = $r187;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting NetworkTimeUpdate service", r244);

     label133:
        if z0 != 0 goto label137;

     label134:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "CommonTimeManagementService");

        $r113 = new com.android.server.CommonTimeManagementService;

        specialinvoke $r113.<com.android.server.CommonTimeManagementService: void <init>(android.content.Context)>(r1);

        r15 = $r113;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("commontime_management", r15);

     label135:
        goto label137;

     label136:
        $r178 := @caughtexception;

        r245 = $r178;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting CommonTimeManagementService service", r245);

     label137:
        if z5 != 0 goto label141;

     label138:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "CertBlacklister");

        $r112 = new com.android.server.CertBlacklister;

        specialinvoke $r112.<com.android.server.CertBlacklister: void <init>(android.content.Context)>(r1);

     label139:
        goto label141;

     label140:
        $r176 := @caughtexception;

        r246 = $r176;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting CertBlacklister", r246);

     label141:
        if z6 != 0 goto label142;

        $r114 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r114.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/dreams/DreamManagerService");

     label142:
        if z6 != 0 goto label146;

     label143:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Assets Atlas Service");

        $r115 = new com.android.server.AssetAtlasService;

        specialinvoke $r115.<com.android.server.AssetAtlasService: void <init>(android.content.Context)>(r1);

        r27 = $r115;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("assetatlas", r27);

     label144:
        goto label146;

     label145:
        $r177 := @caughtexception;

        r247 = $r177;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting AssetAtlasService", r247);

     label146:
        $r98 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z12 = virtualinvoke $r98.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.print");

        if $z12 == 0 goto label147;

        $r116 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r116.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)>("com.android.server.print.PrintManagerService");

     label147:
        $r109 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r109.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/restrictions/RestrictionsManagerService");

        $r108 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r108.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/media/MediaSessionService");

        $r111 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z14 = virtualinvoke $r111.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.hdmi.cec");

        if $z14 == 0 goto label148;

        $r118 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r118.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/hdmi/HdmiControlService");

     label148:
        $r110 = r0.<com.android.server.SystemServer: android.content.pm.PackageManager mPackageManager>;

        $z13 = virtualinvoke $r110.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.live_tv");

        if $z13 == 0 goto label149;

        $r117 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r117.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/tv/TvInputManagerService");

     label149:
        if z6 != 0 goto label157;

     label150:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "Media Router Service");

        $r104 = new com.android.server.media.MediaRouterService;

        specialinvoke $r104.<com.android.server.media.MediaRouterService: void <init>(android.content.Context)>(r1);

        r24 = $r104;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("media_router", r24);

     label151:
        goto label153;

     label152:
        $r200 := @caughtexception;

        r248 = $r200;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting MediaRouterService", r248);

     label153:
        $r107 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r107.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/trust/TrustManagerService");

        $r106 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r106.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/fingerprint/FingerprintService");

     label154:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("SystemServer", "BackgroundDexOptService");

        staticinvoke <com.android.server.pm.BackgroundDexOptService: void schedule(android.content.Context)>(r1);

     label155:
        goto label157;

     label156:
        $r183 := @caughtexception;

        r249 = $r183;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("starting BackgroundDexOptService", r249);

     label157:
        $r105 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r105.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/pm/LauncherAppsService");

     label158:
        if z6 != 0 goto label159;

        $r96 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r96.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/media/projection/MediaProjectionManagerService");

     label159:
        z29 = virtualinvoke r12.<com.android.server.wm.WindowManagerService: boolean detectSafeMode()>();

        if z29 == 0 goto label160;

        $r94 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r94.<com.android.server.am.ActivityManagerService: void enterSafeMode()>();

        $r95 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r95.<dalvik.system.VMRuntime: void disableJitCompilation()>();

        goto label161;

     label160:
        $r80 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r80.<dalvik.system.VMRuntime: void startJitCompilation()>();

     label161:
        $r82 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        $r81 = virtualinvoke $r82.<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)>(class "com/android/server/MmsServiceBroker");

        r250 = (com.android.server.MmsServiceBroker) $r81;

     label162:
        virtualinvoke r4.<com.android.server.VibratorService: void systemReady()>();

     label163:
        goto label165;

     label164:
        $r197 := @caughtexception;

        r30 = $r197;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Vibrator Service ready", r30);

     label165:
        if r26 == null goto label169;

     label166:
        virtualinvoke r26.<com.android.server.LockSettingsService: void systemReady()>();

     label167:
        goto label169;

     label168:
        $r162 := @caughtexception;

        r251 = $r162;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Lock Settings Service ready", r251);

     label169:
        $r84 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r84.<com.android.server.SystemServiceManager: void startBootPhase(int)>(480);

        $r83 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        virtualinvoke $r83.<com.android.server.SystemServiceManager: void startBootPhase(int)>(500);

     label170:
        virtualinvoke r12.<com.android.server.wm.WindowManagerService: void systemReady()>();

     label171:
        goto label173;

     label172:
        $r192 := @caughtexception;

        r252 = $r192;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Window Manager Service ready", r252);

     label173:
        if z29 == 0 goto label174;

        $r93 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        virtualinvoke $r93.<com.android.server.am.ActivityManagerService: void showSafeModeOverlay()>();

     label174:
        r253 = virtualinvoke r12.<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfiguration()>();

        $r85 = new android.util.DisplayMetrics;

        specialinvoke $r85.<android.util.DisplayMetrics: void <init>()>();

        r31 = $r85;

        $r74 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r28 = (android.view.WindowManager) $r74;

        $r73 = interfaceinvoke r28.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        virtualinvoke $r73.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>(r31);

        $r76 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        virtualinvoke $r76.<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>(r253, r31);

     label175:
        $r78 = r0.<com.android.server.SystemServer: com.android.server.power.PowerManagerService mPowerManagerService>;

        $r75 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r77 = virtualinvoke $r75.<com.android.server.am.ActivityManagerService: com.android.internal.app.IAppOpsService getAppOpsService()>();

        virtualinvoke $r78.<com.android.server.power.PowerManagerService: void systemReady(com.android.internal.app.IAppOpsService)>($r77);

     label176:
        goto label178;

     label177:
        $r195 := @caughtexception;

        r29 = $r195;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Power Manager Service ready", r29);

     label178:
        $r79 = r0.<com.android.server.SystemServer: com.android.server.pm.PackageManagerService mPackageManagerService>;

        virtualinvoke $r79.<com.android.server.pm.PackageManagerService: void systemReady()>();

     label179:
        goto label181;

     label180:
        $r198 := @caughtexception;

        r254 = $r198;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Package Manager Service ready", r254);

     label181:
        $r90 = r0.<com.android.server.SystemServer: com.android.server.display.DisplayManagerService mDisplayManagerService>;

        $z11 = r0.<com.android.server.SystemServer: boolean mOnlyCore>;

        virtualinvoke $r90.<com.android.server.display.DisplayManagerService: void systemReady(boolean,boolean)>(z29, $z11);

     label182:
        goto label184;

     label183:
        $r191 := @caughtexception;

        r255 = $r191;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>("making Display Manager Service ready", r255);

     label184:
        r256 = r6;

        r35 = r7;

        r34 = r8;

        r33 = r9;

        r32 = r10;

        r39 = r11;

        r38 = r22;

        r37 = r18;

        r36 = r23;

        r43 = r20;

        r42 = r13;

        r41 = r15;

        r40 = r21;

        r47 = r213;

        r46 = r27;

        r45 = r14;

        r44 = r16;

        r48 = r24;

        r49 = r17;

        r50 = r250;

        $r92 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r91 = new com.android.server.SystemServer$2;

        specialinvoke $r91.<com.android.server.SystemServer$2: void <init>(com.android.server.SystemServer,android.content.Context,com.android.server.MountService,com.android.server.NetworkScoreService,com.android.server.NetworkManagementService,com.android.server.net.NetworkStatsService,com.android.server.net.NetworkPolicyManagerService,com.android.server.ConnectivityService,android.media.AudioService,com.android.server.wallpaper.WallpaperManagerService,com.android.server.InputMethodManagerService,com.android.server.statusbar.StatusBarManagerService,com.android.server.LocationManagerService,com.android.server.CountryDetectorService,com.android.server.NetworkTimeUpdateService,com.android.server.CommonTimeManagementService,com.android.server.TextServicesManagerService,com.android.server.AssetAtlasService,com.android.server.input.InputManagerService,com.android.server.TelephonyRegistry,com.android.server.media.MediaRouterService,com.android.server.MmsServiceBroker)>(r0, r1, r256, r39, r35, r34, r33, r32, r49, r38, r37, r47, r36, r43, r42, r41, r40, r46, r45, r44, r48, r50);

        virtualinvoke $r92.<com.android.server.am.ActivityManagerService: void systemReady(java.lang.Runnable)>($r91);

        return;

        catch java.lang.Throwable from label002 to label003 with label004;
        catch java.lang.RuntimeException from label001 to label016 with label017;
        catch java.lang.Throwable from label019 to label020 with label021;
        catch java.lang.Throwable from label022 to label023 with label024;
        catch java.lang.Throwable from label025 to label026 with label027;
        catch java.lang.Throwable from label029 to label030 with label031;
        catch java.lang.Throwable from label032 to label033 with label034;
        catch android.os.RemoteException from label035 to label036 with label037;
        catch java.lang.Throwable from label039 to label040 with label041;
        catch java.lang.Throwable from label045 to label046 with label047;
        catch java.lang.Throwable from label049 to label050 with label051;
        catch java.lang.Throwable from label053 to label054 with label055;
        catch java.lang.Throwable from label057 to label058 with label059;
        catch java.lang.Throwable from label061 to label062 with label063;
        catch java.lang.Throwable from label064 to label065 with label066;
        catch java.lang.Throwable from label067 to label068 with label069;
        catch java.lang.Throwable from label071 to label072 with label073;
        catch java.lang.Throwable from label074 to label075 with label076;
        catch java.lang.Throwable from label078 to label079 with label080;
        catch java.lang.Throwable from label082 to label083 with label084;
        catch java.lang.Throwable from label085 to label086 with label087;
        catch java.lang.Throwable from label089 to label090 with label091;
        catch java.lang.Throwable from label092 to label093 with label094;
        catch java.lang.Throwable from label096 to label097 with label098;
        catch java.lang.Throwable from label099 to label100 with label101;
        catch java.lang.Throwable from label103 to label104 with label105;
        catch java.lang.Throwable from label107 to label108 with label109;
        catch java.lang.Throwable from label112 to label113 with label114;
        catch java.lang.Throwable from label117 to label118 with label119;
        catch java.lang.Throwable from label123 to label124 with label125;
        catch java.lang.Throwable from label126 to label127 with label128;
        catch java.lang.Throwable from label130 to label131 with label132;
        catch java.lang.Throwable from label134 to label135 with label136;
        catch java.lang.Throwable from label138 to label139 with label140;
        catch java.lang.Throwable from label143 to label144 with label145;
        catch java.lang.Throwable from label150 to label151 with label152;
        catch java.lang.Throwable from label154 to label155 with label156;
        catch java.lang.Throwable from label162 to label163 with label164;
        catch java.lang.Throwable from label166 to label167 with label168;
        catch java.lang.Throwable from label170 to label171 with label172;
        catch java.lang.Throwable from label175 to label176 with label177;
        catch java.lang.Throwable from label178 to label179 with label180;
        catch java.lang.Throwable from label181 to label182 with label183;
    }

    static final void startSystemUi(android.content.Context)
    {
        android.content.Context r0;
        android.content.Intent r1, $r2;
        android.content.ComponentName $r3;
        android.os.UserHandle $r5;

        r0 := @parameter0: android.content.Context;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        r1 = $r2;

        $r3 = new android.content.ComponentName;

        specialinvoke $r3.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("com.android.systemui", "com.android.systemui.SystemUIService");

        virtualinvoke r1.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r3);

        $r5 = <android.os.UserHandle: android.os.UserHandle OWNER>;

        virtualinvoke r0.<android.content.Context: android.content.ComponentName startServiceAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r5);

        return;
    }

    static com.android.server.SystemServiceManager access$000(com.android.server.SystemServer)
    {
        com.android.server.SystemServer r0;
        com.android.server.SystemServiceManager $r1;

        r0 := @parameter0: com.android.server.SystemServer;

        $r1 = r0.<com.android.server.SystemServer: com.android.server.SystemServiceManager mSystemServiceManager>;

        return $r1;
    }

    static com.android.server.am.ActivityManagerService access$100(com.android.server.SystemServer)
    {
        com.android.server.SystemServer r0;
        com.android.server.am.ActivityManagerService $r1;

        r0 := @parameter0: com.android.server.SystemServer;

        $r1 = r0.<com.android.server.SystemServer: com.android.server.am.ActivityManagerService mActivityManagerService>;

        return $r1;
    }

    static void access$200(com.android.server.SystemServer, java.lang.String, java.lang.Throwable)
    {
        com.android.server.SystemServer r0;
        java.lang.String r1;
        java.lang.Throwable r2;

        r0 := @parameter0: com.android.server.SystemServer;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        specialinvoke r0.<com.android.server.SystemServer: void reportWtf(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.SystemServer: java.lang.String PERSISTENT_DATA_BLOCK_PROP> = "ro.frp.pst";

        <com.android.server.SystemServer: java.lang.String JOB_SCHEDULER_SERVICE_CLASS> = "com.android.server.job.JobSchedulerService";

        <com.android.server.SystemServer: java.lang.String ETHERNET_SERVICE_CLASS> = "com.android.server.ethernet.EthernetService";

        <com.android.server.SystemServer: java.lang.String WIFI_P2P_SERVICE_CLASS> = "com.android.server.wifi.p2p.WifiP2pService";

        <com.android.server.SystemServer: java.lang.String WIFI_SERVICE_CLASS> = "com.android.server.wifi.WifiService";

        <com.android.server.SystemServer: java.lang.String USB_SERVICE_CLASS> = "com.android.server.usb.UsbService$Lifecycle";

        <com.android.server.SystemServer: java.lang.String PRINT_MANAGER_SERVICE_CLASS> = "com.android.server.print.PrintManagerService";

        <com.android.server.SystemServer: java.lang.String VOICE_RECOGNITION_MANAGER_SERVICE_CLASS> = "com.android.server.voiceinteraction.VoiceInteractionManagerService";

        <com.android.server.SystemServer: java.lang.String APPWIDGET_SERVICE_CLASS> = "com.android.server.appwidget.AppWidgetService";

        <com.android.server.SystemServer: java.lang.String BACKUP_MANAGER_SERVICE_CLASS> = "com.android.server.backup.BackupManagerService$Lifecycle";

        <com.android.server.SystemServer: long EARLIEST_SUPPORTED_TIME> = 86400000L;

        <com.android.server.SystemServer: long SNAPSHOT_INTERVAL> = 3600000L;

        <com.android.server.SystemServer: java.lang.String ENCRYPTED_STATE> = "1";

        <com.android.server.SystemServer: java.lang.String ENCRYPTING_STATE> = "trigger_restart_min_framework";

        <com.android.server.SystemServer: java.lang.String TAG> = "SystemServer";

        return;
    }
}
