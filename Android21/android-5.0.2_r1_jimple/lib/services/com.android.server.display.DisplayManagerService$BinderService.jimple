final class com.android.server.display.DisplayManagerService$BinderService extends android.hardware.display.IDisplayManager$Stub
{
    final com.android.server.display.DisplayManagerService this$0;

    private void <init>(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        com.android.server.display.DisplayManagerService r1;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: com.android.server.display.DisplayManagerService;

        r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0> = r1;

        specialinvoke r0.<android.hardware.display.IDisplayManager$Stub: void <init>()>();

        return;
    }

    public android.view.DisplayInfo getDisplayInfo(int)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0, i1;
        long l2;
        android.view.DisplayInfo r1;
        java.lang.Throwable r2, $r4;
        com.android.server.display.DisplayManagerService $r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r1 = staticinvoke <com.android.server.display.DisplayManagerService: android.view.DisplayInfo access$1800(com.android.server.display.DisplayManagerService,int,int)>($r3, i0, i1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r1;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int[] getDisplayIds()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0;
        long l1;
        int[] r1;
        java.lang.Throwable r2, $r4;
        com.android.server.display.DisplayManagerService $r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r1 = staticinvoke <com.android.server.display.DisplayManagerService: int[] access$1900(com.android.server.display.DisplayManagerService,int)>($r3, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r1;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void registerCallback(android.hardware.display.IDisplayManagerCallback)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        android.hardware.display.IDisplayManagerCallback r1;
        int i0;
        long l1;
        java.lang.Throwable r2, $r5;
        com.android.server.display.DisplayManagerService $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: android.hardware.display.IDisplayManagerCallback;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r4;

     label1:
        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2000(com.android.server.display.DisplayManagerService,android.hardware.display.IDisplayManagerCallback,int)>($r3, r1, i0);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void startWifiDisplayScan()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0;
        long l1;
        java.lang.Throwable r1, $r5;
        com.android.server.display.DisplayManagerService $r2, $r4;
        android.content.Context $r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$2100(com.android.server.display.DisplayManagerService)>($r2);

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to start wifi display scans");

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2200(com.android.server.display.DisplayManagerService,int)>($r4, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label5;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void stopWifiDisplayScan()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0;
        long l1;
        java.lang.Throwable r1, $r5;
        com.android.server.display.DisplayManagerService $r2, $r4;
        android.content.Context $r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$2100(com.android.server.display.DisplayManagerService)>($r2);

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to stop wifi display scans");

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2300(com.android.server.display.DisplayManagerService,int)>($r4, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label5;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void connectWifiDisplay(java.lang.String)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        java.lang.String r1;
        long l0;
        java.lang.Throwable r2, $r7;
        com.android.server.display.DisplayManagerService $r3, $r5;
        android.content.Context $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("address must not be null");

        throw $r6;

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r4 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$2100(com.android.server.display.DisplayManagerService)>($r3);

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to connect to a wifi display");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2400(com.android.server.display.DisplayManagerService,java.lang.String)>($r5, r1);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label6;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void disconnectWifiDisplay()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        java.lang.Throwable r1, $r3;
        com.android.server.display.DisplayManagerService $r2;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2500(com.android.server.display.DisplayManagerService)>($r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label5;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void renameWifiDisplay(java.lang.String, java.lang.String)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        java.lang.String r1, r2;
        long l0;
        java.lang.Throwable r3, $r8;
        com.android.server.display.DisplayManagerService $r4, $r6;
        android.content.Context $r5;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("address must not be null");

        throw $r7;

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r5 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$2100(com.android.server.display.DisplayManagerService)>($r4);

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to rename to a wifi display");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r6 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2600(com.android.server.display.DisplayManagerService,java.lang.String,java.lang.String)>($r6, r1, r2);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label6;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void forgetWifiDisplay(java.lang.String)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        java.lang.String r1;
        long l0;
        java.lang.Throwable r2, $r7;
        com.android.server.display.DisplayManagerService $r3, $r5;
        android.content.Context $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("address must not be null");

        throw $r6;

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r4 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$2100(com.android.server.display.DisplayManagerService)>($r3);

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to forget to a wifi display");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2700(com.android.server.display.DisplayManagerService,java.lang.String)>($r5, r1);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label6;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void pauseWifiDisplay()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        java.lang.Throwable r1, $r5;
        com.android.server.display.DisplayManagerService $r2, $r4;
        android.content.Context $r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$2100(com.android.server.display.DisplayManagerService)>($r2);

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to pause a wifi display session");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2800(com.android.server.display.DisplayManagerService)>($r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label5;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void resumeWifiDisplay()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        java.lang.Throwable r1, $r5;
        com.android.server.display.DisplayManagerService $r2, $r4;
        android.content.Context $r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$2100(com.android.server.display.DisplayManagerService)>($r2);

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to resume a wifi display session");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2900(com.android.server.display.DisplayManagerService)>($r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label5;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        android.hardware.display.WifiDisplayStatus r1;
        java.lang.Throwable r2, $r4;
        com.android.server.display.DisplayManagerService $r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r1 = staticinvoke <com.android.server.display.DisplayManagerService: android.hardware.display.WifiDisplayStatus access$3000(com.android.server.display.DisplayManagerService)>($r3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r1;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, java.lang.String, java.lang.String, int, int, int, android.view.Surface, int)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        android.hardware.display.IVirtualDisplayCallback r1;
        android.media.projection.IMediaProjection r2;
        java.lang.String r3, r4;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        android.view.Surface r5;
        java.lang.Throwable r7, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r8, $r15, $r18;
        com.android.server.display.DisplayManagerService $r9, $r13;
        java.lang.SecurityException $r10, $r11, $r14, $r19, $r20;
        android.media.projection.IMediaProjectionManager $r12;
        android.os.RemoteException $r17;
        long l10;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        r2 := @parameter1: android.media.projection.IMediaProjection;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        r5 := @parameter7: android.view.Surface;

        i3 := @parameter8: int;

        i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = specialinvoke r0.<com.android.server.display.DisplayManagerService$BinderService: boolean validatePackageName(int,java.lang.String)>(i4, r3);

        if $z1 != 0 goto label01;

        $r19 = new java.lang.SecurityException;

        specialinvoke $r19.<java.lang.SecurityException: void <init>(java.lang.String)>("packageName must match the calling uid");

        throw $r19;

     label01:
        if r1 != null goto label02;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("appToken must not be null");

        throw $r18;

     label02:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z0 == 0 goto label03;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name must be non-null and non-empty");

        throw $r15;

     label03:
        if i0 <= 0 goto label04;

        if i1 <= 0 goto label04;

        if i2 > 0 goto label05;

     label04:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width, height, and densityDpi must be greater than 0");

        throw $r8;

     label05:
        $i6 = i3 & 1;

        if $i6 == 0 goto label06;

        i3 = i3 | 16;

     label06:
        $i8 = i3 & 8;

        if $i8 == 0 goto label07;

        i3 = i3 & -17;

     label07:
        if r2 == null goto label12;

     label08:
        $r13 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r12 = staticinvoke <com.android.server.display.DisplayManagerService: android.media.projection.IMediaProjectionManager access$3100(com.android.server.display.DisplayManagerService)>($r13);

        $z4 = interfaceinvoke $r12.<android.media.projection.IMediaProjectionManager: boolean isValidMediaProjection(android.media.projection.IMediaProjection)>(r2);

        if $z4 != 0 goto label09;

        $r14 = new java.lang.SecurityException;

        specialinvoke $r14.<java.lang.SecurityException: void <init>(java.lang.String)>("Invalid media projection");

        throw $r14;

     label09:
        i3 = interfaceinvoke r2.<android.media.projection.IMediaProjection: int applyVirtualDisplayFlags(int)>(i3);

     label10:
        goto label12;

     label11:
        $r17 := @caughtexception;

        $r20 = new java.lang.SecurityException;

        specialinvoke $r20.<java.lang.SecurityException: void <init>(java.lang.String)>("unable to validate media projection or flags");

        throw $r20;

     label12:
        if i4 == 1000 goto label13;

        $i9 = i3 & 16;

        if $i9 == 0 goto label13;

        $z3 = specialinvoke r0.<com.android.server.display.DisplayManagerService$BinderService: boolean canProjectVideo(android.media.projection.IMediaProjection)>(r2);

        if $z3 != 0 goto label13;

        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires CAPTURE_VIDEO_OUTPUT or CAPTURE_SECURE_VIDEO_OUTPUT permission, or an appropriate MediaProjection token in order to create a screen sharing virtual display.");

        throw $r11;

     label13:
        $i7 = i3 & 4;

        if $i7 == 0 goto label14;

        $z2 = specialinvoke r0.<com.android.server.display.DisplayManagerService$BinderService: boolean canProjectSecureVideo(android.media.projection.IMediaProjection)>(r2);

        if $z2 != 0 goto label14;

        $r10 = new java.lang.SecurityException;

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires CAPTURE_SECURE_VIDEO_OUTPUT or an appropriate MediaProjection token to create a secure virtual display.");

        throw $r10;

     label14:
        l10 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label15:
        $r9 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        i5 = staticinvoke <com.android.server.display.DisplayManagerService: int access$3200(com.android.server.display.DisplayManagerService,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int)>($r9, r1, r2, i4, r3, r4, i0, i1, i2, r5, i3);

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l10);

        return i5;

     label17:
        $r16 := @caughtexception;

        r7 = $r16;

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l10);

        throw r7;

        catch android.os.RemoteException from label08 to label10 with label11;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public void resizeVirtualDisplay(android.hardware.display.IVirtualDisplayCallback, int, int, int)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        android.hardware.display.IVirtualDisplayCallback r1;
        int i0, i1, i2;
        long l3;
        java.lang.Throwable r2, $r5;
        com.android.server.display.DisplayManagerService $r3;
        android.os.IBinder $r4;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r4 = interfaceinvoke r1.<android.hardware.display.IVirtualDisplayCallback: android.os.IBinder asBinder()>();

        staticinvoke <com.android.server.display.DisplayManagerService: void access$3300(com.android.server.display.DisplayManagerService,android.os.IBinder,int,int,int)>($r3, $r4, i0, i1, i2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setVirtualDisplaySurface(android.hardware.display.IVirtualDisplayCallback, android.view.Surface)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        android.hardware.display.IVirtualDisplayCallback r1;
        android.view.Surface r2;
        long l0;
        java.lang.Throwable r3, $r6;
        com.android.server.display.DisplayManagerService $r4;
        android.os.IBinder $r5;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        r2 := @parameter1: android.view.Surface;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r5 = interfaceinvoke r1.<android.hardware.display.IVirtualDisplayCallback: android.os.IBinder asBinder()>();

        staticinvoke <com.android.server.display.DisplayManagerService: void access$3400(com.android.server.display.DisplayManagerService,android.os.IBinder,android.view.Surface)>($r4, $r5, r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        android.hardware.display.IVirtualDisplayCallback r1;
        long l0;
        java.lang.Throwable r2, $r5;
        com.android.server.display.DisplayManagerService $r3;
        android.os.IBinder $r4;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r4 = interfaceinvoke r1.<android.hardware.display.IVirtualDisplayCallback: android.os.IBinder asBinder()>();

        staticinvoke <com.android.server.display.DisplayManagerService: void access$3500(com.android.server.display.DisplayManagerService,android.os.IBinder)>($r3, $r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        long l0;
        java.lang.Throwable r4, $r16;
        com.android.server.display.DisplayManagerService $r5, $r12, $r15;
        android.content.Context $r6, $r14;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        int $i1, $i2, $i3;
        java.lang.String $r13;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r5 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r6 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$2100(com.android.server.display.DisplayManagerService)>($r5);

        if $r6 == null goto label1;

        $r12 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r14 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$2100(com.android.server.display.DisplayManagerService)>($r12);

        $i3 = virtualinvoke $r14.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i3 == 0 goto label2;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump DisplayManager from from pid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        return;

     label2:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r15 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$3600(com.android.server.display.DisplayManagerService,java.io.PrintWriter)>($r15, r2);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label7;

     label5:
        $r16 := @caughtexception;

        r4 = $r16;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean validatePackageName(int, java.lang.String)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0, i1, i2;
        java.lang.String r1, r4;
        java.lang.String[] r2, r3;
        com.android.server.display.DisplayManagerService $r5;
        android.content.Context $r6;
        android.content.pm.PackageManager $r7;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label3;

        $r5 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r6 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$2100(com.android.server.display.DisplayManagerService)>($r5);

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r2 = virtualinvoke $r7.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        if r2 == null goto label3;

        r3 = r2;

        i1 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r4 = r3[i2];

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean canProjectVideo(android.media.projection.IMediaProjection)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        android.media.projection.IMediaProjection r1;
        android.os.RemoteException r2, $r5;
        com.android.server.display.DisplayManagerService $r3;
        android.content.Context $r4;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: android.media.projection.IMediaProjection;

        if r1 == null goto label5;

     label1:
        $z1 = interfaceinvoke r1.<android.media.projection.IMediaProjection: boolean canProjectVideo()>();

        if $z1 == 0 goto label3;

     label2:
        return 1;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManagerService", "Unable to query projection service for permissions", r2);

     label5:
        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r4 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$2100(com.android.server.display.DisplayManagerService)>($r3);

        $i0 = virtualinvoke $r4.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.CAPTURE_VIDEO_OUTPUT");

        if $i0 != 0 goto label6;

        return 1;

     label6:
        $z0 = specialinvoke r0.<com.android.server.display.DisplayManagerService$BinderService: boolean canProjectSecureVideo(android.media.projection.IMediaProjection)>(r1);

        return $z0;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private boolean canProjectSecureVideo(android.media.projection.IMediaProjection)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        android.media.projection.IMediaProjection r1;
        android.os.RemoteException r2, $r5;
        com.android.server.display.DisplayManagerService $r3;
        android.content.Context $r4;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: android.media.projection.IMediaProjection;

        if r1 == null goto label5;

     label1:
        $z1 = interfaceinvoke r1.<android.media.projection.IMediaProjection: boolean canProjectSecureVideo()>();

        if $z1 == 0 goto label3;

     label2:
        return 1;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManagerService", "Unable to query projection service for permissions", r2);

     label5:
        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r4 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$2100(com.android.server.display.DisplayManagerService)>($r3);

        $i0 = virtualinvoke $r4.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.CAPTURE_SECURE_VIDEO_OUTPUT");

        if $i0 != 0 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        return $z0;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    void <init>(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayManagerService$1)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        com.android.server.display.DisplayManagerService r1;
        com.android.server.display.DisplayManagerService$1 r2;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: com.android.server.display.DisplayManagerService;

        r2 := @parameter1: com.android.server.display.DisplayManagerService$1;

        specialinvoke r0.<com.android.server.display.DisplayManagerService$BinderService: void <init>(com.android.server.display.DisplayManagerService)>(r1);

        return;
    }
}
