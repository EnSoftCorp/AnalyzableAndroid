abstract class com.android.server.hdmi.SystemAudioAction extends com.android.server.hdmi.HdmiCecFeatureAction
{
    private static final java.lang.String TAG;
    private static final int STATE_CHECK_ROUTING_IN_PRGRESS;
    private static final int STATE_WAIT_FOR_SET_SYSTEM_AUDIO_MODE;
    private static final int MAX_SEND_RETRY_COUNT;
    private static final int ON_TIMEOUT_MS;
    private static final int OFF_TIMEOUT_MS;
    protected final int mAvrLogicalAddress;
    protected boolean mTargetAudioStatus;
    private final android.hardware.hdmi.IHdmiControlCallback mCallback;
    private int mSendRetryCount;

    void <init>(com.android.server.hdmi.HdmiCecLocalDevice, int, boolean, android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.SystemAudioAction r0;
        com.android.server.hdmi.HdmiCecLocalDevice r1;
        int i0;
        boolean z0;
        android.hardware.hdmi.IHdmiControlCallback r2;

        r0 := @this: com.android.server.hdmi.SystemAudioAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r2 := @parameter3: android.hardware.hdmi.IHdmiControlCallback;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecFeatureAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r1);

        r0.<com.android.server.hdmi.SystemAudioAction: int mSendRetryCount> = 0;

        staticinvoke <com.android.server.hdmi.HdmiUtils: void verifyAddressType(int,int)>(i0, 5);

        r0.<com.android.server.hdmi.SystemAudioAction: int mAvrLogicalAddress> = i0;

        r0.<com.android.server.hdmi.SystemAudioAction: boolean mTargetAudioStatus> = z0;

        r0.<com.android.server.hdmi.SystemAudioAction: android.hardware.hdmi.IHdmiControlCallback mCallback> = r2;

        return;
    }

    protected void sendSystemAudioModeRequest()
    {
        com.android.server.hdmi.SystemAudioAction r0;
        java.util.List r1;
        com.android.server.hdmi.RoutingControlAction r2;
        boolean $z0;
        java.lang.Object $r3;
        com.android.server.hdmi.SystemAudioAction$1 $r4;

        r0 := @this: com.android.server.hdmi.SystemAudioAction;

        r1 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: java.util.List getActions(java.lang.Class)>(class "com/android/server/hdmi/RoutingControlAction");

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        r0.<com.android.server.hdmi.SystemAudioAction: int mState> = 1;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (com.android.server.hdmi.RoutingControlAction) $r3;

        $r4 = new com.android.server.hdmi.SystemAudioAction$1;

        specialinvoke $r4.<com.android.server.hdmi.SystemAudioAction$1: void <init>(com.android.server.hdmi.SystemAudioAction)>(r0);

        virtualinvoke r2.<com.android.server.hdmi.RoutingControlAction: void addOnFinishedCallback(com.android.server.hdmi.HdmiCecFeatureAction,java.lang.Runnable)>(r0, $r4);

        return;

     label1:
        specialinvoke r0.<com.android.server.hdmi.SystemAudioAction: void sendSystemAudioModeRequestInternal()>();

        return;
    }

    private void sendSystemAudioModeRequestInternal()
    {
        com.android.server.hdmi.SystemAudioAction r0;
        int i0, $i1, $i2, $i3;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r2;
        android.hardware.hdmi.HdmiDeviceInfo $r3;
        boolean $z0, $z1;
        com.android.server.hdmi.SystemAudioAction$2 $r4;
        short $s4;

        r0 := @this: com.android.server.hdmi.SystemAudioAction;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $r3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        i0 = virtualinvoke $r3.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $i1 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: int getSourceAddress()>();

        $i2 = r0.<com.android.server.hdmi.SystemAudioAction: int mAvrLogicalAddress>;

        $z0 = r0.<com.android.server.hdmi.SystemAudioAction: boolean mTargetAudioStatus>;

        r1 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildSystemAudioModeRequest(int,int,int,boolean)>($i1, $i2, i0, $z0);

        $r4 = new com.android.server.hdmi.SystemAudioAction$2;

        specialinvoke $r4.<com.android.server.hdmi.SystemAudioAction$2: void <init>(com.android.server.hdmi.SystemAudioAction)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void sendCommand(com.android.server.hdmi.HdmiCecMessage,com.android.server.hdmi.HdmiControlService$SendMessageCallback)>(r1, $r4);

        r0.<com.android.server.hdmi.SystemAudioAction: int mState> = 2;

        $i3 = r0.<com.android.server.hdmi.SystemAudioAction: int mState>;

        $z1 = r0.<com.android.server.hdmi.SystemAudioAction: boolean mTargetAudioStatus>;

        if $z1 == 0 goto label1;

        $s4 = 5000;

        goto label2;

     label1:
        $s4 = 2000;

     label2:
        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void addTimer(int,int)>($i3, $s4);

        return;
    }

    private void handleSendSystemAudioModeRequestTimeout()
    {
        com.android.server.hdmi.SystemAudioAction r0;
        boolean $z0;
        java.lang.Object[] $r1;
        int $i0, $i1;

        r0 := @this: com.android.server.hdmi.SystemAudioAction;

        $z0 = r0.<com.android.server.hdmi.SystemAudioAction: boolean mTargetAudioStatus>;

        if $z0 == 0 goto label1;

        $i0 = r0.<com.android.server.hdmi.SystemAudioAction: int mSendRetryCount>;

        $i1 = $i0 + 1;

        r0.<com.android.server.hdmi.SystemAudioAction: int mSendRetryCount> = $i1;

        if $i0 < 2 goto label2;

     label1:
        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("[T]:wait for <Set System Audio Mode>.", $r1);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void setSystemAudioMode(boolean)>(0);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void finishWithCallback(int)>(1);

        return;

     label2:
        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void sendSystemAudioModeRequest()>();

        return;
    }

    protected void setSystemAudioMode(boolean)
    {
        com.android.server.hdmi.SystemAudioAction r0;
        boolean z0;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r1;

        r0 := @this: com.android.server.hdmi.SystemAudioAction;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setSystemAudioMode(boolean,boolean)>(z0, 1);

        return;
    }

    final boolean processCommand(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.SystemAudioAction r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        boolean z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.lang.Object[] $r6, $r8;
        byte[] $r7;
        short $s4;
        byte $b5;

        r0 := @this: com.android.server.hdmi.SystemAudioAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $i0 = r0.<com.android.server.hdmi.SystemAudioAction: int mState>;

        lookupswitch($i0)
        {
            case 2: goto label1;
            default: goto label6;
        };

     label1:
        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getOpcode()>();

        if $i1 != 0 goto label2;

        $r7 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $b5 = $r7[0];

        $s4 = $b5 & 255;

        if $s4 != 112 goto label2;

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Failed to start system audio mode request.", $r8);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void setSystemAudioMode(boolean)>(0);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void finishWithCallback(int)>(5);

        return 1;

     label2:
        $i2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getOpcode()>();

        if $i2 != 114 goto label3;

        $i3 = r0.<com.android.server.hdmi.SystemAudioAction: int mAvrLogicalAddress>;

        $z1 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean checkCommandSource(com.android.server.hdmi.HdmiCecMessage,int,java.lang.String)>(r1, $i3, "SystemAudioAction");

        if $z1 != 0 goto label4;

     label3:
        return 0;

     label4:
        z0 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean parseCommandParamSystemAudioStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        $z2 = r0.<com.android.server.hdmi.SystemAudioAction: boolean mTargetAudioStatus>;

        if z0 != $z2 goto label5;

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void setSystemAudioMode(boolean)>(z0);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void startAudioStatusAction()>();

        return 1;

     label5:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected system audio mode request:");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>($r5, $r6);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void finishWithCallback(int)>(5);

        return 0;

     label6:
        return 0;
    }

    protected void startAudioStatusAction()
    {
        com.android.server.hdmi.SystemAudioAction r0;
        com.android.server.hdmi.SystemAudioStatusAction $r1;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r2;
        android.hardware.hdmi.IHdmiControlCallback $r3;
        int $i0;

        r0 := @this: com.android.server.hdmi.SystemAudioAction;

        $r1 = new com.android.server.hdmi.SystemAudioStatusAction;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $i0 = r0.<com.android.server.hdmi.SystemAudioAction: int mAvrLogicalAddress>;

        $r3 = r0.<com.android.server.hdmi.SystemAudioAction: android.hardware.hdmi.IHdmiControlCallback mCallback>;

        specialinvoke $r1.<com.android.server.hdmi.SystemAudioStatusAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int,android.hardware.hdmi.IHdmiControlCallback)>($r2, $i0, $r3);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r1);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void finish()>();

        return;
    }

    protected void removeSystemAudioActionInProgress()
    {
        com.android.server.hdmi.SystemAudioAction r0;

        r0 := @this: com.android.server.hdmi.SystemAudioAction;

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void removeActionExcept(java.lang.Class,com.android.server.hdmi.HdmiCecFeatureAction)>(class "com/android/server/hdmi/SystemAudioActionFromTv", r0);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void removeActionExcept(java.lang.Class,com.android.server.hdmi.HdmiCecFeatureAction)>(class "com/android/server/hdmi/SystemAudioActionFromAvr", r0);

        return;
    }

    final void handleTimerEvent(int)
    {
        com.android.server.hdmi.SystemAudioAction r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.hdmi.SystemAudioAction;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.hdmi.SystemAudioAction: int mState>;

        if $i1 == i0 goto label1;

        return;

     label1:
        $i2 = r0.<com.android.server.hdmi.SystemAudioAction: int mState>;

        lookupswitch($i2)
        {
            case 2: goto label2;
            default: goto label3;
        };

     label2:
        specialinvoke r0.<com.android.server.hdmi.SystemAudioAction: void handleSendSystemAudioModeRequestTimeout()>();

        return;

     label3:
        return;
    }

    protected void finishWithCallback(int)
    {
        com.android.server.hdmi.SystemAudioAction r0;
        int i0;
        android.os.RemoteException r1, $r4;
        android.hardware.hdmi.IHdmiControlCallback $r2, $r3;

        r0 := @this: com.android.server.hdmi.SystemAudioAction;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.hdmi.SystemAudioAction: android.hardware.hdmi.IHdmiControlCallback mCallback>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<com.android.server.hdmi.SystemAudioAction: android.hardware.hdmi.IHdmiControlCallback mCallback>;

        interfaceinvoke $r3.<android.hardware.hdmi.IHdmiControlCallback: void onComplete(int)>(i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemAudioAction", "Failed to invoke callback.", r1);

     label4:
        virtualinvoke r0.<com.android.server.hdmi.SystemAudioAction: void finish()>();

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void access$000(com.android.server.hdmi.SystemAudioAction)
    {
        com.android.server.hdmi.SystemAudioAction r0;

        r0 := @parameter0: com.android.server.hdmi.SystemAudioAction;

        specialinvoke r0.<com.android.server.hdmi.SystemAudioAction: void sendSystemAudioModeRequestInternal()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.hdmi.SystemAudioAction: int OFF_TIMEOUT_MS> = 2000;

        <com.android.server.hdmi.SystemAudioAction: int ON_TIMEOUT_MS> = 5000;

        <com.android.server.hdmi.SystemAudioAction: int MAX_SEND_RETRY_COUNT> = 2;

        <com.android.server.hdmi.SystemAudioAction: int STATE_WAIT_FOR_SET_SYSTEM_AUDIO_MODE> = 2;

        <com.android.server.hdmi.SystemAudioAction: int STATE_CHECK_ROUTING_IN_PRGRESS> = 1;

        <com.android.server.hdmi.SystemAudioAction: java.lang.String TAG> = "SystemAudioAction";

        return;
    }
}
