class com.android.server.accessibility.DisplayAdjustmentUtils extends java.lang.Object
{
    private static final java.lang.String LOG_TAG;
    private static final float[] GRAYSCALE_MATRIX;
    private static final float[] INVERSION_MATRIX_VALUE_ONLY;
    private static final int DEFAULT_DISPLAY_DALTONIZER;

    void <init>()
    {
        com.android.server.accessibility.DisplayAdjustmentUtils r0;

        r0 := @this: com.android.server.accessibility.DisplayAdjustmentUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean hasAdjustments(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, $i1, $i2;
        android.content.ContentResolver r1;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "accessibility_display_inversion_enabled", 0, i0);

        if $i1 == 0 goto label1;

        return 1;

     label1:
        $i2 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "accessibility_display_daltonizer_enabled", 0, i0);

        if $i2 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static void applyAdjustments(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, i1, $i2, $i3;
        android.content.ContentResolver r1;
        float[] r2, $r3, $r4;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r2 = null;

        $i2 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "accessibility_display_inversion_enabled", 0, i0);

        if $i2 == 0 goto label1;

        $r4 = <com.android.server.accessibility.DisplayAdjustmentUtils: float[] INVERSION_MATRIX_VALUE_ONLY>;

        r2 = staticinvoke <com.android.server.accessibility.DisplayAdjustmentUtils: float[] multiply(float[],float[])>(r2, $r4);

     label1:
        $i3 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "accessibility_display_daltonizer_enabled", 0, i0);

        if $i3 == 0 goto label4;

        i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "accessibility_display_daltonizer", 12, i0);

        if i1 != 0 goto label2;

        $r3 = <com.android.server.accessibility.DisplayAdjustmentUtils: float[] GRAYSCALE_MATRIX>;

        r2 = staticinvoke <com.android.server.accessibility.DisplayAdjustmentUtils: float[] multiply(float[],float[])>(r2, $r3);

        staticinvoke <com.android.server.accessibility.DisplayAdjustmentUtils: void setDaltonizerMode(int)>(-1);

        goto label3;

     label2:
        staticinvoke <com.android.server.accessibility.DisplayAdjustmentUtils: void setDaltonizerMode(int)>(i1);

     label3:
        goto label5;

     label4:
        staticinvoke <com.android.server.accessibility.DisplayAdjustmentUtils: void setDaltonizerMode(int)>(-1);

     label5:
        staticinvoke <com.android.server.accessibility.DisplayAdjustmentUtils: void setColorTransform(float[])>(r2);

        return;
    }

    private static float[] multiply(float[], float[])
    {
        float[] r0, r1, r2;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        if r0 != null goto label1;

        return r1;

     label1:
        r2 = newarray (float)[16];

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>(r2, 0, r0, 0, r1, 0);

        return r2;
    }

    private static void setDaltonizerMode(int)
    {
        int i0;
        android.os.IBinder r0;
        android.os.Parcel r1;
        android.os.RemoteException $r2, r4;
        java.lang.String $r3;

        i0 := @parameter0: int;

     label1:
        r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("SurfaceFlinger");

        if r0 == null goto label2;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.ui.ISurfaceComposer");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        interfaceinvoke r0.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1014, r1, null, 0);

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r4 = $r2;

        $r3 = <com.android.server.accessibility.DisplayAdjustmentUtils: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, "Failed to set Daltonizer mode", r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static void setColorTransform(float[])
    {
        float[] r0;
        android.os.IBinder r1;
        android.os.Parcel r2;
        int i0;
        float $f0;
        android.os.RemoteException $r3, r5;
        java.lang.String $r4;

        r0 := @parameter0: float[];

     label1:
        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("SurfaceFlinger");

        if r1 == null goto label6;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.ui.ISurfaceComposer");

        if r0 == null goto label4;

        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(1);

        i0 = 0;

     label2:
        if i0 >= 16 goto label3;

        $f0 = r0[i0];

        virtualinvoke r2.<android.os.Parcel: void writeFloat(float)>($f0);

        i0 = i0 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(0);

     label5:
        interfaceinvoke r1.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1015, r2, null, 0);

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

        r5 = $r3;

        $r4 = <com.android.server.accessibility.DisplayAdjustmentUtils: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Failed to set color transform", r5);

     label8:
        return;

        catch android.os.RemoteException from label1 to label6 with label7;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        float[] $r2, $r3;

        <com.android.server.accessibility.DisplayAdjustmentUtils: int DEFAULT_DISPLAY_DALTONIZER> = 12;

        $r0 = class "com/android/server/accessibility/DisplayAdjustmentUtils";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.accessibility.DisplayAdjustmentUtils: java.lang.String LOG_TAG> = $r1;

        $r2 = newarray (float)[16];

        $r2[0] = 0.2126F;

        $r2[1] = 0.2126F;

        $r2[2] = 0.2126F;

        $r2[3] = 0.0F;

        $r2[4] = 0.7152F;

        $r2[5] = 0.7152F;

        $r2[6] = 0.7152F;

        $r2[7] = 0.0F;

        $r2[8] = 0.0722F;

        $r2[9] = 0.0722F;

        $r2[10] = 0.0722F;

        $r2[11] = 0.0F;

        $r2[12] = 0.0F;

        $r2[13] = 0.0F;

        $r2[14] = 0.0F;

        $r2[15] = 1.0F;

        <com.android.server.accessibility.DisplayAdjustmentUtils: float[] GRAYSCALE_MATRIX> = $r2;

        $r3 = newarray (float)[16];

        $r3[0] = 0.0F;

        $r3[1] = -0.5F;

        $r3[2] = -0.5F;

        $r3[3] = 0.0F;

        $r3[4] = -0.5F;

        $r3[5] = 0.0F;

        $r3[6] = -0.5F;

        $r3[7] = 0.0F;

        $r3[8] = -0.5F;

        $r3[9] = -0.5F;

        $r3[10] = 0.0F;

        $r3[11] = 0.0F;

        $r3[12] = 1.0F;

        $r3[13] = 1.0F;

        $r3[14] = 1.0F;

        $r3[15] = 1.0F;

        <com.android.server.accessibility.DisplayAdjustmentUtils: float[] INVERSION_MATRIX_VALUE_ONLY> = $r3;

        return;
    }
}
