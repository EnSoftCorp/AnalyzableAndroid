final class com.android.server.hdmi.HdmiLogger extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final long ERROR_LOG_DURATTION_MILLIS;
    private static final boolean DEBUG;
    private static final java.lang.ThreadLocal sLogger;
    private final java.util.HashMap mWarningTimingCache;
    private final java.util.HashMap mErrorTimingCache;

    private void <init>()
    {
        com.android.server.hdmi.HdmiLogger r0;
        java.util.HashMap $r1, $r2;

        r0 := @this: com.android.server.hdmi.HdmiLogger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.hdmi.HdmiLogger: java.util.HashMap mWarningTimingCache> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.hdmi.HdmiLogger: java.util.HashMap mErrorTimingCache> = $r2;

        return;
    }

    static final transient void warning(java.lang.String, java.lang.Object[])
    {
        java.lang.String r0, $r3;
        java.lang.Object[] r1;
        com.android.server.hdmi.HdmiLogger $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <com.android.server.hdmi.HdmiLogger: com.android.server.hdmi.HdmiLogger getLogger()>();

        $r3 = staticinvoke <com.android.server.hdmi.HdmiLogger: java.lang.String toLogString(java.lang.String,java.lang.Object[])>(r0, r1);

        specialinvoke $r2.<com.android.server.hdmi.HdmiLogger: void warningInternal(java.lang.String)>($r3);

        return;
    }

    private void warningInternal(java.lang.String)
    {
        com.android.server.hdmi.HdmiLogger r0;
        java.lang.String r1, r2;
        java.util.HashMap $r3;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiLogger;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.hdmi.HdmiLogger: java.util.HashMap mWarningTimingCache>;

        r2 = staticinvoke <com.android.server.hdmi.HdmiLogger: java.lang.String updateLog(java.util.HashMap,java.lang.String)>($r3, r1);

        $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HDMI", r2);

     label1:
        return;
    }

    static final transient void error(java.lang.String, java.lang.Object[])
    {
        java.lang.String r0, $r3;
        java.lang.Object[] r1;
        com.android.server.hdmi.HdmiLogger $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <com.android.server.hdmi.HdmiLogger: com.android.server.hdmi.HdmiLogger getLogger()>();

        $r3 = staticinvoke <com.android.server.hdmi.HdmiLogger: java.lang.String toLogString(java.lang.String,java.lang.Object[])>(r0, r1);

        specialinvoke $r2.<com.android.server.hdmi.HdmiLogger: void errorInternal(java.lang.String)>($r3);

        return;
    }

    private void errorInternal(java.lang.String)
    {
        com.android.server.hdmi.HdmiLogger r0;
        java.lang.String r1, r2;
        java.util.HashMap $r3;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiLogger;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.hdmi.HdmiLogger: java.util.HashMap mErrorTimingCache>;

        r2 = staticinvoke <com.android.server.hdmi.HdmiLogger: java.lang.String updateLog(java.util.HashMap,java.lang.String)>($r3, r1);

        $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("HDMI", r2);

     label1:
        return;
    }

    static final transient void debug(java.lang.String, java.lang.Object[])
    {
        java.lang.String r0, $r3;
        java.lang.Object[] r1;
        com.android.server.hdmi.HdmiLogger $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <com.android.server.hdmi.HdmiLogger: com.android.server.hdmi.HdmiLogger getLogger()>();

        $r3 = staticinvoke <com.android.server.hdmi.HdmiLogger: java.lang.String toLogString(java.lang.String,java.lang.Object[])>(r0, r1);

        specialinvoke $r2.<com.android.server.hdmi.HdmiLogger: void debugInternal(java.lang.String)>($r3);

        return;
    }

    private void debugInternal(java.lang.String)
    {
        com.android.server.hdmi.HdmiLogger r0;
        java.lang.String r1;

        r0 := @this: com.android.server.hdmi.HdmiLogger;

        r1 := @parameter0: java.lang.String;

        return;
    }

    private static final java.lang.String toLogString(java.lang.String, java.lang.Object[])
    {
        java.lang.String r0, $r2;
        java.lang.Object[] r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, r1);

        return $r2;

     label1:
        return r0;
    }

    private static com.android.server.hdmi.HdmiLogger getLogger()
    {
        com.android.server.hdmi.HdmiLogger r0, $r3;
        java.lang.ThreadLocal $r1, $r4;
        java.lang.Object $r2;

        $r1 = <com.android.server.hdmi.HdmiLogger: java.lang.ThreadLocal sLogger>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        r0 = (com.android.server.hdmi.HdmiLogger) $r2;

        if r0 != null goto label1;

        $r3 = new com.android.server.hdmi.HdmiLogger;

        specialinvoke $r3.<com.android.server.hdmi.HdmiLogger: void <init>()>();

        r0 = $r3;

        $r4 = <com.android.server.hdmi.HdmiLogger: java.lang.ThreadLocal sLogger>;

        virtualinvoke $r4.<java.lang.ThreadLocal: void set(java.lang.Object)>(r0);

     label1:
        return r0;
    }

    private static java.lang.String updateLog(java.util.HashMap, java.lang.String)
    {
        java.util.HashMap r0;
        java.lang.String r1, r3;
        long l0;
        android.util.Pair r2, $r5;
        java.lang.Object $r4;
        boolean $z0;
        java.lang.Long $r6;
        java.lang.Integer $r7;

        r0 := @parameter0: java.util.HashMap;

        r1 := @parameter1: java.lang.String;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4 = virtualinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.util.Pair) $r4;

        $z0 = staticinvoke <com.android.server.hdmi.HdmiLogger: boolean shouldLogNow(android.util.Pair,long)>(r2, l0);

        if $z0 == 0 goto label1;

        r3 = staticinvoke <com.android.server.hdmi.HdmiLogger: java.lang.String buildMessage(java.lang.String,android.util.Pair)>(r1, r2);

        $r5 = new android.util.Pair;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r5.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r6, $r7);

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        return r3;

     label1:
        staticinvoke <com.android.server.hdmi.HdmiLogger: void increaseLogCount(java.util.HashMap,java.lang.String)>(r0, r1);

        return "";
    }

    private static java.lang.String buildMessage(java.lang.String, android.util.Pair)
    {
        java.lang.String r0, $r9;
        android.util.Pair r1;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r8;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.util.Pair;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        if r1 != null goto label1;

        $i0 = 1;

        goto label2;

     label1:
        $r4 = r1.<android.util.Pair: java.lang.Object second>;

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

     label2:
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private static void increaseLogCount(java.util.HashMap, java.lang.String)
    {
        java.util.HashMap r0;
        java.lang.String r1;
        android.util.Pair r2, $r4;
        java.lang.Object $r3, $r5, $r7;
        java.lang.Integer $r6, $r8;
        int $i0, $i1;

        r0 := @parameter0: java.util.HashMap;

        r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.util.Pair) $r3;

        if r2 == null goto label1;

        $r4 = new android.util.Pair;

        $r7 = r2.<android.util.Pair: java.lang.Object first>;

        $r5 = r2.<android.util.Pair: java.lang.Object second>;

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $i1 = $i0 + 1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r4.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r7, $r8);

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return;
    }

    private static boolean shouldLogNow(android.util.Pair, long)
    {
        android.util.Pair r0;
        long l0, $l1, $l2;
        java.lang.Object $r1;
        java.lang.Long $r2;
        byte $b3;
        boolean $z0;

        r0 := @parameter0: android.util.Pair;

        l0 := @parameter1: long;

        if r0 == null goto label1;

        $r1 = r0.<android.util.Pair: java.lang.Object first>;

        $r2 = (java.lang.Long) $r1;

        $l1 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        $l2 = l0 - $l1;

        $b3 = $l2 cmp 20000L;

        if $b3 <= 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0;

        <com.android.server.hdmi.HdmiLogger: boolean DEBUG> = 0;

        <com.android.server.hdmi.HdmiLogger: long ERROR_LOG_DURATTION_MILLIS> = 20000L;

        <com.android.server.hdmi.HdmiLogger: java.lang.String TAG> = "HDMI";

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <com.android.server.hdmi.HdmiLogger: java.lang.ThreadLocal sLogger> = $r0;

        return;
    }
}
