public final class com.android.server.power.PowerManagerService extends com.android.server.SystemService implements com.android.server.Watchdog$Monitor
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static final boolean DEBUG_SPEW;
    private static final int MSG_USER_ACTIVITY_TIMEOUT;
    private static final int MSG_SANDMAN;
    private static final int DIRTY_WAKE_LOCKS;
    private static final int DIRTY_WAKEFULNESS;
    private static final int DIRTY_USER_ACTIVITY;
    private static final int DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED;
    private static final int DIRTY_BOOT_COMPLETED;
    private static final int DIRTY_SETTINGS;
    private static final int DIRTY_IS_POWERED;
    private static final int DIRTY_STAY_ON;
    private static final int DIRTY_BATTERY_STATE;
    private static final int DIRTY_PROXIMITY_POSITIVE;
    private static final int DIRTY_DOCK_STATE;
    private static final int WAKEFULNESS_ASLEEP;
    private static final int WAKEFULNESS_AWAKE;
    private static final int WAKEFULNESS_DREAMING;
    private static final int WAKEFULNESS_DOZING;
    private static final int WAKE_LOCK_CPU;
    private static final int WAKE_LOCK_SCREEN_BRIGHT;
    private static final int WAKE_LOCK_SCREEN_DIM;
    private static final int WAKE_LOCK_BUTTON_BRIGHT;
    private static final int WAKE_LOCK_PROXIMITY_SCREEN_OFF;
    private static final int WAKE_LOCK_STAY_AWAKE;
    private static final int WAKE_LOCK_DOZE;
    private static final int USER_ACTIVITY_SCREEN_BRIGHT;
    private static final int USER_ACTIVITY_SCREEN_DIM;
    private static final int USER_ACTIVITY_SCREEN_DREAM;
    private static final int DEFAULT_SCREEN_OFF_TIMEOUT;
    private static final int DEFAULT_SLEEP_TIMEOUT;
    private static final int POWER_HINT_INTERACTION;
    private static final int POWER_HINT_LOW_POWER;
    private final android.content.Context mContext;
    private final com.android.server.ServiceThread mHandlerThread;
    private final com.android.server.power.PowerManagerService$PowerManagerHandler mHandler;
    private com.android.server.lights.LightsManager mLightsManager;
    private android.os.BatteryManagerInternal mBatteryManagerInternal;
    private android.hardware.display.DisplayManagerInternal mDisplayManagerInternal;
    private com.android.internal.app.IBatteryStats mBatteryStats;
    private com.android.internal.app.IAppOpsService mAppOps;
    private android.view.WindowManagerPolicy mPolicy;
    private com.android.server.power.Notifier mNotifier;
    private com.android.server.power.WirelessChargerDetector mWirelessChargerDetector;
    private com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver;
    private android.service.dreams.DreamManagerInternal mDreamManager;
    private com.android.server.lights.Light mAttentionLight;
    private final java.lang.Object mLock;
    private int mDirty;
    private int mWakefulness;
    private boolean mSandmanSummoned;
    private boolean mSandmanScheduled;
    private final java.util.ArrayList mSuspendBlockers;
    private final java.util.ArrayList mWakeLocks;
    private int mWakeLockSummary;
    private boolean mInteractive;
    private boolean mInteractiveChanging;
    private boolean mRequestWaitForNegativeProximity;
    private long mLastWakeTime;
    private long mLastSleepTime;
    private long mLastUserActivityTime;
    private long mLastUserActivityTimeNoChangeLights;
    private long mLastInteractivePowerHintTime;
    private int mUserActivitySummary;
    private final android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest;
    private boolean mDisplayReady;
    private final com.android.server.power.SuspendBlocker mWakeLockSuspendBlocker;
    private boolean mHoldingWakeLockSuspendBlocker;
    private final com.android.server.power.SuspendBlocker mDisplaySuspendBlocker;
    private boolean mHoldingDisplaySuspendBlocker;
    private boolean mSystemReady;
    private boolean mBootCompleted;
    private boolean mHalAutoSuspendModeEnabled;
    private boolean mHalInteractiveModeEnabled;
    private boolean mIsPowered;
    private int mPlugType;
    private int mBatteryLevel;
    private int mBatteryLevelWhenDreamStarted;
    private int mDockState;
    private boolean mDecoupleHalAutoSuspendModeFromDisplayConfig;
    private boolean mDecoupleHalInteractiveModeFromDisplayConfig;
    private boolean mWakeUpWhenPluggedOrUnpluggedConfig;
    private boolean mSuspendWhenScreenOffDueToProximityConfig;
    private boolean mDreamsSupportedConfig;
    private boolean mDreamsEnabledByDefaultConfig;
    private boolean mDreamsActivatedOnSleepByDefaultConfig;
    private boolean mDreamsActivatedOnDockByDefaultConfig;
    private boolean mDreamsEnabledOnBatteryConfig;
    private int mDreamsBatteryLevelMinimumWhenPoweredConfig;
    private int mDreamsBatteryLevelMinimumWhenNotPoweredConfig;
    private int mDreamsBatteryLevelDrainCutoffConfig;
    private boolean mDreamsEnabledSetting;
    private boolean mDreamsActivateOnSleepSetting;
    private boolean mDreamsActivateOnDockSetting;
    private boolean mDozeAfterScreenOffConfig;
    private int mMinimumScreenOffTimeoutConfig;
    private int mMaximumScreenDimDurationConfig;
    private float mMaximumScreenDimRatioConfig;
    private int mScreenOffTimeoutSetting;
    private int mSleepTimeoutSetting;
    private int mMaximumScreenOffTimeoutFromDeviceAdmin;
    private int mStayOnWhilePluggedInSetting;
    private boolean mStayOn;
    private boolean mProximityPositive;
    private int mScreenBrightnessSettingMinimum;
    private int mScreenBrightnessSettingMaximum;
    private int mScreenBrightnessSettingDefault;
    private int mScreenBrightnessSetting;
    private float mScreenAutoBrightnessAdjustmentSetting;
    private int mScreenBrightnessModeSetting;
    private int mScreenBrightnessOverrideFromWindowManager;
    private long mUserActivityTimeoutOverrideFromWindowManager;
    private int mTemporaryScreenBrightnessSettingOverride;
    private float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride;
    private int mDozeScreenStateOverrideFromDreamManager;
    private int mDozeScreenBrightnessOverrideFromDreamManager;
    private long mLastWarningAboutUserActivityPermission;
    private boolean mLowPowerModeEnabled;
    private boolean mLowPowerModeSetting;
    private boolean mAutoLowPowerModeConfigured;
    private boolean mAutoLowPowerModeSnoozing;
    private boolean mBatteryLevelLow;
    private final java.util.ArrayList mLowPowerModeListeners;
    private final android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mDisplayPowerCallbacks;

    private native void nativeInit();

    private static native void nativeAcquireSuspendBlocker(java.lang.String);

    private static native void nativeReleaseSuspendBlocker(java.lang.String);

    private static native void nativeSetInteractive(boolean);

    private static native void nativeSetAutoSuspend(boolean);

    private static native void nativeSendPowerHint(int, int);

    public void <init>(android.content.Context)
    {
        com.android.server.power.PowerManagerService r0;
        android.content.Context r1;
        java.lang.Object r2, $r4, $r15;
        java.lang.Throwable r3, $r19;
        java.util.ArrayList $r5, $r6, $r8;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r7;
        com.android.server.power.PowerManagerService$2 $r9;
        com.android.server.ServiceThread $r10, $r11, $r13;
        com.android.server.power.PowerManagerService$PowerManagerHandler $r12;
        android.os.Looper $r14;
        com.android.server.power.SuspendBlocker $r16, $r17, $r18;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mSuspendBlockers> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks> = $r6;

        $r7 = new android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        specialinvoke $r7.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: void <init>()>();

        r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest> = $r7;

        r0.<com.android.server.power.PowerManagerService: int mDockState> = 0;

        r0.<com.android.server.power.PowerManagerService: int mMaximumScreenOffTimeoutFromDeviceAdmin> = 2147483647;

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessOverrideFromWindowManager> = -1;

        r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager> = -1L;

        r0.<com.android.server.power.PowerManagerService: int mTemporaryScreenBrightnessSettingOverride> = -1;

        r0.<com.android.server.power.PowerManagerService: float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride> = #NaNF;

        r0.<com.android.server.power.PowerManagerService: int mDozeScreenStateOverrideFromDreamManager> = 0;

        r0.<com.android.server.power.PowerManagerService: int mDozeScreenBrightnessOverrideFromDreamManager> = -1;

        r0.<com.android.server.power.PowerManagerService: long mLastWarningAboutUserActivityPermission> = -9223372036854775808L;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mLowPowerModeListeners> = $r8;

        $r9 = new com.android.server.power.PowerManagerService$2;

        specialinvoke $r9.<com.android.server.power.PowerManagerService$2: void <init>(com.android.server.power.PowerManagerService)>(r0);

        r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mDisplayPowerCallbacks> = $r9;

        r0.<com.android.server.power.PowerManagerService: android.content.Context mContext> = r1;

        $r10 = new com.android.server.ServiceThread;

        specialinvoke $r10.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>("PowerManagerService", -4, 0);

        r0.<com.android.server.power.PowerManagerService: com.android.server.ServiceThread mHandlerThread> = $r10;

        $r11 = r0.<com.android.server.power.PowerManagerService: com.android.server.ServiceThread mHandlerThread>;

        virtualinvoke $r11.<com.android.server.ServiceThread: void start()>();

        $r12 = new com.android.server.power.PowerManagerService$PowerManagerHandler;

        $r13 = r0.<com.android.server.power.PowerManagerService: com.android.server.ServiceThread mHandlerThread>;

        $r14 = virtualinvoke $r13.<com.android.server.ServiceThread: android.os.Looper getLooper()>();

        specialinvoke $r12.<com.android.server.power.PowerManagerService$PowerManagerHandler: void <init>(com.android.server.power.PowerManagerService,android.os.Looper)>(r0, $r14);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler> = $r12;

        $r15 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r2 = $r15;

        entermonitor $r15;

     label1:
        $r17 = specialinvoke r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker createSuspendBlockerLocked(java.lang.String)>("PowerManagerService.WakeLocks");

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mWakeLockSuspendBlocker> = $r17;

        $r16 = specialinvoke r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker createSuspendBlockerLocked(java.lang.String)>("PowerManagerService.Display");

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker> = $r16;

        $r18 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        interfaceinvoke $r18.<com.android.server.power.SuspendBlocker: void acquire()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker> = 1;

        r0.<com.android.server.power.PowerManagerService: boolean mHalAutoSuspendModeEnabled> = 0;

        r0.<com.android.server.power.PowerManagerService: boolean mHalInteractiveModeEnabled> = 1;

        r0.<com.android.server.power.PowerManagerService: int mWakefulness> = 1;

        r0.<com.android.server.power.PowerManagerService: boolean mInteractive> = 1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void nativeInit()>();

        staticinvoke <com.android.server.power.PowerManagerService: void nativeSetAutoSuspend(boolean)>(0);

        staticinvoke <com.android.server.power.PowerManagerService: void nativeSetInteractive(boolean)>(1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r19 := @caughtexception;

        r3 = $r19;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void onStart()
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$BinderService $r1;
        com.android.server.power.PowerManagerService$LocalService $r2;
        com.android.server.Watchdog $r3, $r4;
        com.android.server.power.PowerManagerService$PowerManagerHandler $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r1 = new com.android.server.power.PowerManagerService$BinderService;

        specialinvoke $r1.<com.android.server.power.PowerManagerService$BinderService: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        virtualinvoke r0.<com.android.server.power.PowerManagerService: void publishBinderService(java.lang.String,android.os.IBinder)>("power", $r1);

        $r2 = new com.android.server.power.PowerManagerService$LocalService;

        specialinvoke $r2.<com.android.server.power.PowerManagerService$LocalService: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        virtualinvoke r0.<com.android.server.power.PowerManagerService: void publishLocalService(java.lang.Class,java.lang.Object)>(class "android/os/PowerManagerInternal", $r2);

        $r3 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r3.<com.android.server.Watchdog: void addMonitor(com.android.server.Watchdog$Monitor)>(r0);

        $r4 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        $r5 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r4.<com.android.server.Watchdog: void addThread(android.os.Handler)>($r5);

        return;
    }

    public void onBootPhase(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i2, $i3;
        java.lang.Object r1, $r3;
        long l1;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        if i0 != 1000 goto label2;

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted> = 1;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i3 = $i2 | 16;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i3;

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l1, 0, 0, 1000);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void systemReady(com.android.internal.app.IAppOpsService)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.internal.app.IAppOpsService r1, $r27;
        java.lang.Object r2, $r8, $r9, $r11, $r13, $r15, $r18, $r34;
        android.os.PowerManager r3;
        android.hardware.SystemSensorManager r4, $r20;
        android.content.IntentFilter r5, $r41, $r45, $r56, $r59, r87, r88, r89;
        android.content.ContentResolver r6;
        java.lang.Throwable r7, $r84;
        android.service.dreams.DreamManagerInternal $r10;
        android.hardware.display.DisplayManagerInternal $r12, $r44;
        android.view.WindowManagerPolicy $r14, $r32;
        android.content.Context $r16, $r22, $r25, $r48, $r51, $r54, $r57, $r67;
        android.os.BatteryManagerInternal $r17;
        int $i0, $i1, $i2, $i3, $i4;
        com.android.server.power.PowerManagerService$PowerManagerHandler $r19, $r33, $r35, $r38, $r47, $r50, $r53, $r65;
        android.os.Looper $r21, $r26;
        com.android.server.power.Notifier $r23;
        com.android.internal.app.IBatteryStats $r24, $r28;
        com.android.server.power.WirelessChargerDetector $r29;
        com.android.server.power.SuspendBlocker $r30, $r31;
        com.android.server.power.PowerManagerService$SettingsObserver $r36, $r62, $r64, $r69, $r71, $r73, $r75, $r76, $r78, $r80, $r82, $r85;
        com.android.server.lights.Light $r37;
        com.android.server.lights.LightsManager $r39, $r40;
        com.android.server.power.PowerManagerService$BatteryReceiver $r42;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r43;
        com.android.server.power.PowerManagerService$DreamReceiver $r52;
        com.android.server.power.PowerManagerService$UserSwitchedReceiver $r55;
        com.android.server.power.PowerManagerService$DockReceiver $r58;
        android.net.Uri $r61, $r63, $r68, $r70, $r72, $r74, $r77, $r79, $r81, $r83, $r86;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.internal.app.IAppOpsService;

        $r8 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r2 = $r8;

        entermonitor $r8;

     label1:
        r0.<com.android.server.power.PowerManagerService: boolean mSystemReady> = 1;

        r0.<com.android.server.power.PowerManagerService: com.android.internal.app.IAppOpsService mAppOps> = r1;

        $r9 = virtualinvoke r0.<com.android.server.power.PowerManagerService: java.lang.Object getLocalService(java.lang.Class)>(class "android/service/dreams/DreamManagerInternal");

        $r10 = (android.service.dreams.DreamManagerInternal) $r9;

        r0.<com.android.server.power.PowerManagerService: android.service.dreams.DreamManagerInternal mDreamManager> = $r10;

        $r11 = virtualinvoke r0.<com.android.server.power.PowerManagerService: java.lang.Object getLocalService(java.lang.Class)>(class "android/hardware/display/DisplayManagerInternal");

        $r12 = (android.hardware.display.DisplayManagerInternal) $r11;

        r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal> = $r12;

        $r13 = virtualinvoke r0.<com.android.server.power.PowerManagerService: java.lang.Object getLocalService(java.lang.Class)>(class "android/view/WindowManagerPolicy");

        $r14 = (android.view.WindowManagerPolicy) $r13;

        r0.<com.android.server.power.PowerManagerService: android.view.WindowManagerPolicy mPolicy> = $r14;

        $r15 = virtualinvoke r0.<com.android.server.power.PowerManagerService: java.lang.Object getLocalService(java.lang.Class)>(class "android/os/BatteryManagerInternal");

        $r17 = (android.os.BatteryManagerInternal) $r15;

        r0.<com.android.server.power.PowerManagerService: android.os.BatteryManagerInternal mBatteryManagerInternal> = $r17;

        $r16 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r18 = virtualinvoke $r16.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r3 = (android.os.PowerManager) $r18;

        $i0 = virtualinvoke r3.<android.os.PowerManager: int getMinimumScreenBrightnessSetting()>();

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingMinimum> = $i0;

        $i2 = virtualinvoke r3.<android.os.PowerManager: int getMaximumScreenBrightnessSetting()>();

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingMaximum> = $i2;

        $i1 = virtualinvoke r3.<android.os.PowerManager: int getDefaultScreenBrightnessSetting()>();

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingDefault> = $i1;

        $r20 = new android.hardware.SystemSensorManager;

        $r22 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r19 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        $r21 = virtualinvoke $r19.<com.android.server.power.PowerManagerService$PowerManagerHandler: android.os.Looper getLooper()>();

        specialinvoke $r20.<android.hardware.SystemSensorManager: void <init>(android.content.Context,android.os.Looper)>($r22, $r21);

        r4 = $r20;

        $r24 = staticinvoke <com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>();

        r0.<com.android.server.power.PowerManagerService: com.android.internal.app.IBatteryStats mBatteryStats> = $r24;

        $r23 = new com.android.server.power.Notifier;

        $r26 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r25 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r28 = r0.<com.android.server.power.PowerManagerService: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r27 = r0.<com.android.server.power.PowerManagerService: com.android.internal.app.IAppOpsService mAppOps>;

        $r31 = specialinvoke r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker createSuspendBlockerLocked(java.lang.String)>("PowerManagerService.Broadcasts");

        $r32 = r0.<com.android.server.power.PowerManagerService: android.view.WindowManagerPolicy mPolicy>;

        specialinvoke $r23.<com.android.server.power.Notifier: void <init>(android.os.Looper,android.content.Context,com.android.internal.app.IBatteryStats,com.android.internal.app.IAppOpsService,com.android.server.power.SuspendBlocker,android.view.WindowManagerPolicy)>($r26, $r25, $r28, $r27, $r31, $r32);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier> = $r23;

        $r29 = new com.android.server.power.WirelessChargerDetector;

        $r30 = specialinvoke r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker createSuspendBlockerLocked(java.lang.String)>("PowerManagerService.WirelessChargerDetector");

        $r35 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        specialinvoke $r29.<com.android.server.power.WirelessChargerDetector: void <init>(android.hardware.SensorManager,com.android.server.power.SuspendBlocker,android.os.Handler)>(r4, $r30, $r35);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.WirelessChargerDetector mWirelessChargerDetector> = $r29;

        $r36 = new com.android.server.power.PowerManagerService$SettingsObserver;

        $r33 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        specialinvoke $r36.<com.android.server.power.PowerManagerService$SettingsObserver: void <init>(com.android.server.power.PowerManagerService,android.os.Handler)>(r0, $r33);

        r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver> = $r36;

        $r34 = virtualinvoke r0.<com.android.server.power.PowerManagerService: java.lang.Object getLocalService(java.lang.Class)>(class "com/android/server/lights/LightsManager");

        $r39 = (com.android.server.lights.LightsManager) $r34;

        r0.<com.android.server.power.PowerManagerService: com.android.server.lights.LightsManager mLightsManager> = $r39;

        $r40 = r0.<com.android.server.power.PowerManagerService: com.android.server.lights.LightsManager mLightsManager>;

        $r37 = virtualinvoke $r40.<com.android.server.lights.LightsManager: com.android.server.lights.Light getLight(int)>(5);

        r0.<com.android.server.power.PowerManagerService: com.android.server.lights.Light mAttentionLight> = $r37;

        $r44 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $r43 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mDisplayPowerCallbacks>;

        $r38 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r44.<android.hardware.display.DisplayManagerInternal: void initPowerManagement(android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks,android.os.Handler,android.hardware.SensorManager)>($r43, $r38, r4);

        $r41 = new android.content.IntentFilter;

        specialinvoke $r41.<android.content.IntentFilter: void <init>()>();

        r5 = $r41;

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.BATTERY_CHANGED");

        virtualinvoke r5.<android.content.IntentFilter: void setPriority(int)>(1000);

        $r48 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r42 = new com.android.server.power.PowerManagerService$BatteryReceiver;

        specialinvoke $r42.<com.android.server.power.PowerManagerService$BatteryReceiver: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        $r47 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r48.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r42, r5, null, $r47);

        $r45 = new android.content.IntentFilter;

        specialinvoke $r45.<android.content.IntentFilter: void <init>()>();

        r87 = $r45;

        virtualinvoke r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DREAMING_STARTED");

        virtualinvoke r87.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DREAMING_STOPPED");

        $r51 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r52 = new com.android.server.power.PowerManagerService$DreamReceiver;

        specialinvoke $r52.<com.android.server.power.PowerManagerService$DreamReceiver: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        $r50 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r51.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r52, r87, null, $r50);

        $r56 = new android.content.IntentFilter;

        specialinvoke $r56.<android.content.IntentFilter: void <init>()>();

        r88 = $r56;

        virtualinvoke r88.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_SWITCHED");

        $r54 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r55 = new com.android.server.power.PowerManagerService$UserSwitchedReceiver;

        specialinvoke $r55.<com.android.server.power.PowerManagerService$UserSwitchedReceiver: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        $r53 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r54.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r55, r88, null, $r53);

        $r59 = new android.content.IntentFilter;

        specialinvoke $r59.<android.content.IntentFilter: void <init>()>();

        r89 = $r59;

        virtualinvoke r89.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.DOCK_EVENT");

        $r57 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r58 = new com.android.server.power.PowerManagerService$DockReceiver;

        specialinvoke $r58.<com.android.server.power.PowerManagerService$DockReceiver: void <init>(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$1)>(r0, null);

        $r65 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r57.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r58, r89, null, $r65);

        $r67 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        r6 = virtualinvoke $r67.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r61 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("screensaver_enabled");

        $r62 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r6.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r61, 0, $r62, -1);

        $r63 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("screensaver_activate_on_sleep");

        $r64 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r6.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r63, 0, $r64, -1);

        $r72 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("screensaver_activate_on_dock");

        $r73 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r6.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r72, 0, $r73, -1);

        $r74 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("screen_off_timeout");

        $r75 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r6.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r74, 0, $r75, -1);

        $r68 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("sleep_timeout");

        $r69 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r6.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r68, 0, $r69, -1);

        $r70 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("stay_on_while_plugged_in");

        $r71 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r6.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r70, 0, $r71, -1);

        $r81 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("screen_brightness");

        $r80 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r6.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r81, 0, $r80, -1);

        $r83 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("screen_brightness_mode");

        $r82 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r6.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r83, 0, $r82, -1);

        $r77 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("screen_auto_brightness_adj");

        $r76 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r6.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r77, 0, $r76, -1);

        $r79 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("low_power");

        $r78 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r6.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r79, 0, $r78, -1);

        $r86 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("low_power_trigger_level");

        $r85 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$SettingsObserver mSettingsObserver>;

        virtualinvoke r6.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r86, 0, $r85, -1);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void readConfigurationLocked()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateSettingsLocked()>();

        $i4 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i3 = $i4 | 256;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i3;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r84 := @caughtexception;

        r7 = $r84;

        exitmonitor r2;

     label4:
        throw r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void readConfigurationLocked()
    {
        com.android.server.power.PowerManagerService r0;
        android.content.res.Resources r1;
        android.content.Context $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17956953);

        r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalAutoSuspendModeFromDisplayConfig> = $z0;

        $z1 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17956954);

        r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalInteractiveModeFromDisplayConfig> = $z1;

        $z2 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17956897);

        r0.<com.android.server.power.PowerManagerService: boolean mWakeUpWhenPluggedOrUnpluggedConfig> = $z2;

        $z3 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17956907);

        r0.<com.android.server.power.PowerManagerService: boolean mSuspendWhenScreenOffDueToProximityConfig> = $z3;

        $z4 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17956947);

        r0.<com.android.server.power.PowerManagerService: boolean mDreamsSupportedConfig> = $z4;

        $z5 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17956948);

        r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledByDefaultConfig> = $z5;

        $z6 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17956950);

        r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnSleepByDefaultConfig> = $z6;

        $z7 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17956949);

        r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnDockByDefaultConfig> = $z7;

        $z8 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17956951);

        r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledOnBatteryConfig> = $z8;

        $i0 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694823);

        r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenPoweredConfig> = $i0;

        $i1 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694824);

        r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenNotPoweredConfig> = $i1;

        $i2 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694825);

        r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelDrainCutoffConfig> = $i2;

        $z9 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17956952);

        r0.<com.android.server.power.PowerManagerService: boolean mDozeAfterScreenOffConfig> = $z9;

        $i3 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694826);

        r0.<com.android.server.power.PowerManagerService: int mMinimumScreenOffTimeoutConfig> = $i3;

        $i4 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694827);

        r0.<com.android.server.power.PowerManagerService: int mMaximumScreenDimDurationConfig> = $i4;

        $f0 = virtualinvoke r1.<android.content.res.Resources: float getFraction(int,int,int)>(18022401, 1, 1);

        r0.<com.android.server.power.PowerManagerService: float mMaximumScreenDimRatioConfig> = $f0;

        return;
    }

    private void updateSettingsLocked()
    {
        com.android.server.power.PowerManagerService r0;
        android.content.ContentResolver r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15;
        float f0, $f1, $f2;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        android.content.Context $r2;
        byte $b11, $b16, $b17, $b18;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledByDefaultConfig>;

        if $z2 == 0 goto label01;

        $b18 = 1;

        goto label02;

     label01:
        $b18 = 0;

     label02:
        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screensaver_enabled", $b18, -2);

        if $i1 == 0 goto label03;

        $z11 = 1;

        goto label04;

     label03:
        $z11 = 0;

     label04:
        r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledSetting> = $z11;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnSleepByDefaultConfig>;

        if $z3 == 0 goto label05;

        $b16 = 1;

        goto label06;

     label05:
        $b16 = 0;

     label06:
        $i2 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screensaver_activate_on_sleep", $b16, -2);

        if $i2 == 0 goto label07;

        $z9 = 1;

        goto label08;

     label07:
        $z9 = 0;

     label08:
        r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnSleepSetting> = $z9;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnDockByDefaultConfig>;

        if $z4 == 0 goto label09;

        $b17 = 1;

        goto label10;

     label09:
        $b17 = 0;

     label10:
        $i3 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screensaver_activate_on_dock", $b17, -2);

        if $i3 == 0 goto label11;

        $z10 = 1;

        goto label12;

     label11:
        $z10 = 0;

     label12:
        r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnDockSetting> = $z10;

        $i4 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screen_off_timeout", 15000, -2);

        r0.<com.android.server.power.PowerManagerService: int mScreenOffTimeoutSetting> = $i4;

        $i5 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "sleep_timeout", -1, -2);

        r0.<com.android.server.power.PowerManagerService: int mSleepTimeoutSetting> = $i5;

        $i7 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "stay_on_while_plugged_in", 1);

        r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting> = $i7;

        i0 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSetting>;

        $i6 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingDefault>;

        $i9 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screen_brightness", $i6, -2);

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSetting> = $i9;

        $i8 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSetting>;

        if i0 == $i8 goto label13;

        r0.<com.android.server.power.PowerManagerService: int mTemporaryScreenBrightnessSettingOverride> = -1;

     label13:
        f0 = r0.<com.android.server.power.PowerManagerService: float mScreenAutoBrightnessAdjustmentSetting>;

        $f2 = staticinvoke <android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>(r1, "screen_auto_brightness_adj", 0.0F, -2);

        r0.<com.android.server.power.PowerManagerService: float mScreenAutoBrightnessAdjustmentSetting> = $f2;

        $f1 = r0.<com.android.server.power.PowerManagerService: float mScreenAutoBrightnessAdjustmentSetting>;

        $b11 = f0 cmpl $f1;

        if $b11 == 0 goto label14;

        r0.<com.android.server.power.PowerManagerService: float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride> = #NaNF;

     label14:
        $i10 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "screen_brightness_mode", 0, -2);

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessModeSetting> = $i10;

        $i13 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "low_power", 0);

        if $i13 == 0 goto label15;

        $z7 = 1;

        goto label16;

     label15:
        $z7 = 0;

     label16:
        z0 = $z7;

        $i12 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "low_power_trigger_level", 0);

        if $i12 == 0 goto label17;

        $z8 = 1;

        goto label18;

     label17:
        $z8 = 0;

     label18:
        z1 = $z8;

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mLowPowerModeSetting>;

        if z0 != $z5 goto label19;

        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mAutoLowPowerModeConfigured>;

        if z1 == $z6 goto label20;

     label19:
        r0.<com.android.server.power.PowerManagerService: boolean mLowPowerModeSetting> = z0;

        r0.<com.android.server.power.PowerManagerService: boolean mAutoLowPowerModeConfigured> = z1;

        virtualinvoke r0.<com.android.server.power.PowerManagerService: void updateLowPowerModeLocked()>();

     label20:
        $i14 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i15 = $i14 | 32;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i15;

        return;
    }

    void updateLowPowerModeLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z7, $z8, $z9, $z10, $z11, $z12;
        android.os.Handler $r1;
        com.android.server.power.PowerManagerService$1 $r2;
        byte $b0;
        android.content.Context $r3;
        android.content.ContentResolver $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z2 == 0 goto label1;

        $z12 = r0.<com.android.server.power.PowerManagerService: boolean mLowPowerModeSetting>;

        if $z12 == 0 goto label1;

        $r3 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r4, "low_power", 0);

        r0.<com.android.server.power.PowerManagerService: boolean mLowPowerModeSetting> = 0;

     label1:
        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z3 != 0 goto label2;

        $z8 = r0.<com.android.server.power.PowerManagerService: boolean mAutoLowPowerModeConfigured>;

        if $z8 == 0 goto label2;

        $z9 = r0.<com.android.server.power.PowerManagerService: boolean mAutoLowPowerModeSnoozing>;

        if $z9 != 0 goto label2;

        $z10 = r0.<com.android.server.power.PowerManagerService: boolean mBatteryLevelLow>;

        if $z10 == 0 goto label2;

        $z11 = 1;

        goto label3;

     label2:
        $z11 = 0;

     label3:
        z0 = $z11;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mLowPowerModeSetting>;

        if $z4 != 0 goto label4;

        if z0 == 0 goto label5;

     label4:
        $z7 = 1;

        goto label6;

     label5:
        $z7 = 0;

     label6:
        z1 = $z7;

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mLowPowerModeEnabled>;

        if $z5 == z1 goto label9;

        r0.<com.android.server.power.PowerManagerService: boolean mLowPowerModeEnabled> = z1;

        if z1 == 0 goto label7;

        $b0 = 1;

        goto label8;

     label7:
        $b0 = 0;

     label8:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void powerHintInternal(int,int)>(5, $b0);

        $r1 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        $r2 = new com.android.server.power.PowerManagerService$1;

        specialinvoke $r2.<com.android.server.power.PowerManagerService$1: void <init>(com.android.server.power.PowerManagerService,boolean)>(r0, z1);

        virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

     label9:
        return;
    }

    private void handleSettingsChangedLocked()
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @this: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateSettingsLocked()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        return;
    }

    private void acquireWakeLockInternal(android.os.IBinder, int, java.lang.String, java.lang.String, android.os.WorkSource, java.lang.String, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.String r2, r3, r5;
        android.os.WorkSource r4;
        java.lang.Object r6, $r10, $r14;
        com.android.server.power.PowerManagerService$WakeLock r7, $r11;
        boolean z0, $z2;
        java.lang.Throwable r9, $r15;
        java.util.ArrayList $r12, $r13;
        java.lang.IllegalArgumentException $r16;
        android.os.RemoteException $r17;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.os.WorkSource;

        r5 := @parameter5: java.lang.String;

        i1 := @parameter6: int;

        i2 := @parameter7: int;

        $r10 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r6 = $r10;

        entermonitor $r10;

     label01:
        i3 = specialinvoke r0.<com.android.server.power.PowerManagerService: int findWakeLockIndexLocked(android.os.IBinder)>(r1);

        if i3 < 0 goto label03;

        $r13 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r14 = virtualinvoke $r13.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.power.PowerManagerService$WakeLock) $r14;

        $z2 = virtualinvoke r7.<com.android.server.power.PowerManagerService$WakeLock: boolean hasSameProperties(int,java.lang.String,android.os.WorkSource,int,int)>(i0, r2, r4, i1, i2);

        if $z2 != 0 goto label02;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockChangingLocked(com.android.server.power.PowerManagerService$WakeLock,int,java.lang.String,java.lang.String,int,int,android.os.WorkSource,java.lang.String)>(r7, i0, r2, r3, i1, i2, r4, r5);

        virtualinvoke r7.<com.android.server.power.PowerManagerService$WakeLock: void updateProperties(int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)>(i0, r2, r3, r4, r5, i1, i2);

     label02:
        z0 = 0;

        goto label08;

     label03:
        $r11 = new com.android.server.power.PowerManagerService$WakeLock;

        specialinvoke $r11.<com.android.server.power.PowerManagerService$WakeLock: void <init>(com.android.server.power.PowerManagerService,android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)>(r0, r1, i0, r2, r3, r4, r5, i1, i2);

        r7 = $r11;

     label04:
        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r7, 0);

     label05:
        goto label07;

     label06:
        $r17 := @caughtexception;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wake lock is already dead.");

        throw $r16;

     label07:
        $r12 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

        z0 = 1;

     label08:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void applyWakeLockFlagsOnAcquireLocked(com.android.server.power.PowerManagerService$WakeLock,int)>(r7, i1);

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i4 = $i5 | 1;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i4;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        if z0 == 0 goto label09;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockAcquiredLocked(com.android.server.power.PowerManagerService$WakeLock)>(r7);

     label09:
        exitmonitor r6;

     label10:
        goto label13;

     label11:
        $r15 := @caughtexception;

        r9 = $r15;

        exitmonitor r6;

     label12:
        throw r9;

     label13:
        return;

        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private static boolean isScreenLock(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService$WakeLock r0;
        int $i0, $i1;

        r0 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $i0 = r0.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i1 = $i0 & 65535;

        lookupswitch($i1)
        {
            case 6: goto label1;
            case 10: goto label1;
            case 26: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    private void applyWakeLockFlagsOnAcquireLocked(com.android.server.power.PowerManagerService$WakeLock, int)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        int i0, $i1, $i2;
        boolean $z0;
        long $l3;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        i0 := @parameter1: int;

        $i1 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i2 = $i1 & 268435456;

        if $i2 == 0 goto label1;

        $z0 = staticinvoke <com.android.server.power.PowerManagerService: boolean isScreenLock(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        if $z0 == 0 goto label1;

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long,int)>($l3, i0);

     label1:
        return;
    }

    private void releaseWakeLockInternal(android.os.IBinder, int)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1, $r8;
        int i0, i1, $i2;
        java.lang.Object r2, $r5, $r7;
        com.android.server.power.PowerManagerService$WakeLock r3;
        java.lang.Throwable r4, $r9;
        java.util.ArrayList $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        $r5 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        i1 = specialinvoke r0.<com.android.server.power.PowerManagerService: int findWakeLockIndexLocked(android.os.IBinder)>(r1);

        if i1 >= 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.power.PowerManagerService$WakeLock) $r7;

        $i2 = i0 & 1;

        if $i2 == 0 goto label4;

        r0.<com.android.server.power.PowerManagerService: boolean mRequestWaitForNegativeProximity> = 1;

     label4:
        $r8 = r3.<com.android.server.power.PowerManagerService$WakeLock: android.os.IBinder mLock>;

        interfaceinvoke $r8.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void removeWakeLockLocked(com.android.server.power.PowerManagerService$WakeLock,int)>(r3, i1);

        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void handleWakeLockDeath(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        java.lang.Object r2, $r4;
        int i0;
        java.lang.Throwable r3, $r6;
        java.util.ArrayList $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $r4 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        i0 = virtualinvoke $r5.<java.util.ArrayList: int indexOf(java.lang.Object)>(r1);

        if i0 >= 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void removeWakeLockLocked(com.android.server.power.PowerManagerService$WakeLock,int)>(r1, i0);

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void removeWakeLockLocked(com.android.server.power.PowerManagerService$WakeLock, int)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        int i0, $i1, $i2;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockReleasedLocked(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void applyWakeLockFlagsOnReleaseLocked(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        $i1 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i2 = $i1 | 1;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        return;
    }

    private void applyWakeLockFlagsOnReleaseLocked(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        int $i0, $i1, $i3;
        boolean $z0;
        long $l2;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $i0 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i1 = $i0 & 536870912;

        if $i1 == 0 goto label1;

        $z0 = staticinvoke <com.android.server.power.PowerManagerService: boolean isScreenLock(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        if $z0 == 0 goto label1;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $i3 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>($l2, 0, 1, $i3);

     label1:
        return;
    }

    private void updateWakeLockWorkSourceInternal(android.os.IBinder, android.os.WorkSource, java.lang.String, int)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        android.os.WorkSource r2;
        java.lang.String r3, $r10, $r11, $r19;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object r4, $r7, $r9;
        com.android.server.power.PowerManagerService$WakeLock r5;
        java.lang.Throwable r6, $r18;
        java.util.ArrayList $r8;
        boolean $z0;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r17;
        java.lang.IllegalArgumentException $r13;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.os.WorkSource;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $r7 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r4 = $r7;

        entermonitor $r7;

     label1:
        i1 = specialinvoke r0.<com.android.server.power.PowerManagerService: int findWakeLockIndexLocked(android.os.IBinder)>(r1);

        if i1 >= 0 goto label2;

        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wake lock not active: ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from uid ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label2:
        $r8 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r5 = (com.android.server.power.PowerManagerService$WakeLock) $r9;

        $z0 = virtualinvoke r5.<com.android.server.power.PowerManagerService$WakeLock: boolean hasSameWorkSource(android.os.WorkSource)>(r2);

        if $z0 != 0 goto label3;

        $i4 = r5.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $r11 = r5.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mTag>;

        $r10 = r5.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mPackageName>;

        $i3 = r5.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        $i2 = r5.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerPid>;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void notifyWakeLockChangingLocked(com.android.server.power.PowerManagerService$WakeLock,int,java.lang.String,java.lang.String,int,int,android.os.WorkSource,java.lang.String)>(r5, $i4, $r11, $r10, $i3, $i2, r2, r3);

        r5.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mHistoryTag> = r3;

        virtualinvoke r5.<com.android.server.power.PowerManagerService$WakeLock: void updateWorkSource(android.os.WorkSource)>(r2);

     label3:
        exitmonitor r4;

     label4:
        goto label7;

     label5:
        $r18 := @caughtexception;

        r6 = $r18;

        exitmonitor r4;

     label6:
        throw r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private int findWakeLockIndexLocked(android.os.IBinder)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1, $r6;
        int i0, i1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;
        com.android.server.power.PowerManagerService$WakeLock $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.power.PowerManagerService$WakeLock) $r4;

        $r6 = $r5.<com.android.server.power.PowerManagerService$WakeLock: android.os.IBinder mLock>;

        if $r6 != r1 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private void notifyWakeLockAcquiredLocked(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        boolean $z0;
        java.lang.String $r2, $r4, $r5;
        android.os.WorkSource $r3;
        int $i0, $i1, $i2;
        com.android.server.power.Notifier $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label1;

        r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedAcquired> = 1;

        $r6 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $i2 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $r5 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mTag>;

        $r4 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mPackageName>;

        $i1 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        $i0 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerPid>;

        $r3 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        $r2 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mHistoryTag>;

        virtualinvoke $r6.<com.android.server.power.Notifier: void onWakeLockAcquired(int,java.lang.String,java.lang.String,int,int,android.os.WorkSource,java.lang.String)>($i2, $r5, $r4, $i1, $i0, $r3, $r2);

     label1:
        return;
    }

    private void notifyWakeLockChangingLocked(com.android.server.power.PowerManagerService$WakeLock, int, java.lang.String, java.lang.String, int, int, android.os.WorkSource, java.lang.String)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.String r2, r3, r5, $r6, $r8, $r9;
        android.os.WorkSource r4, $r7;
        boolean $z0, $z1;
        com.android.server.power.Notifier $r10;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r4 := @parameter6: android.os.WorkSource;

        r5 := @parameter7: java.lang.String;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label1;

        $z1 = r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedAcquired>;

        if $z1 == 0 goto label1;

        $r10 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $i5 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $r9 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mTag>;

        $r8 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mPackageName>;

        $i4 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        $i3 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerPid>;

        $r7 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        $r6 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mHistoryTag>;

        virtualinvoke $r10.<com.android.server.power.Notifier: void onWakeLockChanging(int,java.lang.String,java.lang.String,int,int,android.os.WorkSource,java.lang.String,int,java.lang.String,java.lang.String,int,int,android.os.WorkSource,java.lang.String)>($i5, $r9, $r8, $i4, $i3, $r7, $r6, i0, r2, r3, i1, i2, r4, r5);

     label1:
        return;
    }

    private void notifyWakeLockReleasedLocked(com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r4, $r5;
        android.os.WorkSource $r3;
        int $i0, $i1, $i2;
        com.android.server.power.Notifier $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: com.android.server.power.PowerManagerService$WakeLock;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label1;

        $z1 = r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedAcquired>;

        if $z1 == 0 goto label1;

        r1.<com.android.server.power.PowerManagerService$WakeLock: boolean mNotifiedAcquired> = 0;

        $r6 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $i2 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $r5 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mTag>;

        $r4 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mPackageName>;

        $i1 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerUid>;

        $i0 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mOwnerPid>;

        $r3 = r1.<com.android.server.power.PowerManagerService$WakeLock: android.os.WorkSource mWorkSource>;

        $r2 = r1.<com.android.server.power.PowerManagerService$WakeLock: java.lang.String mHistoryTag>;

        virtualinvoke $r6.<com.android.server.power.Notifier: void onWakeLockReleased(int,java.lang.String,java.lang.String,int,int,android.os.WorkSource,java.lang.String)>($i2, $r5, $r4, $i1, $i0, $r3, $r2);

     label1:
        return;
    }

    private boolean isWakeLockLevelSupportedInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        boolean $z0, $z1, $z2;
        android.hardware.display.DisplayManagerInternal $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        lookupswitch(i0)
        {
            case 1: goto label02;
            case 6: goto label02;
            case 10: goto label02;
            case 26: goto label02;
            case 32: goto label04;
            case 64: goto label02;
            default: goto label08;
        };

     label02:
        exitmonitor r1;

     label03:
        return 1;

     label04:
        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label05;

        $r4 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $z1 = virtualinvoke $r4.<android.hardware.display.DisplayManagerInternal: boolean isProximitySensorAvailable()>();

        if $z1 == 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        exitmonitor r1;

     label07:
        return $z2;

     label08:
        exitmonitor r1;

     label09:
        return 0;

     label10:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label11:
        throw r2;

        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.lang.Throwable from label04 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void userActivityFromNative(long, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void userActivityInternal(long,int,int,int)>(l0, i1, i2, 1000);

        return;
    }

    private void userActivityInternal(long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, i3;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l0, i1, i2, i3);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private boolean userActivityNoUpdateLocked(long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l4, $l6, $l8, $l13, $l17, $l19;
        int i1, i2, i3, $i10, $i11, $i12, $i14, $i15, $i18, $i21, $i23;
        boolean z0, $z1, $z2, z3, z4;
        java.lang.Throwable r1, $r3;
        byte $b5, $b7, $b9, $b16, $b20, $b22;
        com.android.server.power.Notifier $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $l4 = r0.<com.android.server.power.PowerManagerService: long mLastSleepTime>;

        $b5 = l0 cmp $l4;

        if $b5 < 0 goto label01;

        $l6 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b7 = l0 cmp $l6;

        if $b7 < 0 goto label01;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z1 == 0 goto label01;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z2 != 0 goto label02;

     label01:
        return 0;

     label02:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, "userActivity");

     label03:
        $l8 = r0.<com.android.server.power.PowerManagerService: long mLastInteractivePowerHintTime>;

        $b9 = l0 cmp $l8;

        if $b9 <= 0 goto label04;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void powerHintInternal(int,int)>(2, 0);

        r0.<com.android.server.power.PowerManagerService: long mLastInteractivePowerHintTime> = l0;

     label04:
        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r2.<com.android.server.power.Notifier: void onUserActivity(int,int)>(i1, i3);

        $i10 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i10 == 0 goto label05;

        $i12 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i12 == 3 goto label05;

        $i11 = i2 & 2;

        if $i11 == 0 goto label07;

     label05:
        z0 = 0;

     label06:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        return z0;

     label07:
        $i14 = i2 & 1;

        if $i14 == 0 goto label09;

        $l17 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights>;

        $b20 = l0 cmp $l17;

        if $b20 <= 0 goto label11;

        $l19 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $b22 = l0 cmp $l19;

        if $b22 <= 0 goto label11;

        r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights> = l0;

        $i21 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i23 = $i21 | 4;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i23;

        z3 = 1;

     label08:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        return z3;

     label09:
        $l13 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $b16 = l0 cmp $l13;

        if $b16 <= 0 goto label11;

        r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime> = l0;

        $i15 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i18 = $i15 | 4;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i18;

        z4 = 1;

     label10:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        return z4;

     label11:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        goto label14;

     label12:
        $r3 := @caughtexception;

        r1 = $r3;

     label13:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw r1;

     label14:
        return 0;

        catch java.lang.Throwable from label03 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private void wakeUpInternal(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long,int)>(l0, i1);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private boolean wakeUpNoUpdateLocked(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l2;
        int i1, $i4, $i5, $i7, $i8;
        java.lang.Throwable r1, $r15;
        byte $b3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r16;
        java.lang.String $r6, $r11, $r17;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l2 = r0.<com.android.server.power.PowerManagerService: long mLastSleepTime>;

        $b3 = l0 cmp $l2;

        if $b3 < 0 goto label01;

        $i4 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i4 == 1 goto label01;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 == 0 goto label01;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, "wakeUp");

     label03:
        $i5 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        tableswitch($i5)
        {
            case 0: goto label04;
            case 1: goto label07;
            case 2: goto label05;
            case 3: goto label06;
            default: goto label07;
        };

     label04:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waking up from sleep (uid ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r6);

        goto label07;

     label05:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waking up from dream (uid ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r17);

        goto label07;

     label06:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waking up from dozing (uid ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r11);

     label07:
        r0.<com.android.server.power.PowerManagerService: long mLastWakeTime> = l0;

        $i8 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i7 = $i8 | 2;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i7;

        r0.<com.android.server.power.PowerManagerService: int mWakefulness> = 1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setInteractiveStateLocked(boolean,int)>(1, 0);

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l0, 0, 0, i1);

     label08:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        goto label11;

     label09:
        $r15 := @caughtexception;

        r1 = $r15;

     label10:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw r1;

     label11:
        return 1;

        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void goToSleepInternal(long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, i3;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean goToSleepNoUpdateLocked(long,int,int,int)>(l0, i1, i2, i3);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private boolean goToSleepNoUpdateLocked(long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l7;
        int i1, i2, i3, i4, i5, i6, $i9, $i10, $i12, $i13, $i14, $i16, $i17;
        com.android.server.power.PowerManagerService$WakeLock r1;
        java.lang.Throwable r2, $r33;
        byte $b8;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r10, $r12, $r13, $r14, $r15, $r17, $r19, $r20, $r21, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r31, $r34, $r35, $r36;
        java.lang.String $r7, $r16, $r18, $r23, $r30, $r32;
        java.util.ArrayList $r8, $r9;
        java.lang.Object $r11;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $l7 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b8 = l0 cmp $l7;

        if $b8 < 0 goto label01;

        $i9 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i9 == 0 goto label01;

        $i10 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i10 == 3 goto label01;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 == 0 goto label01;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, "goToSleep");

     label03:
        tableswitch(i1)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label07;
            case 5: goto label08;
            default: goto label09;
        };

     label04:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Going to sleep due to device administration policy (uid ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r7);

        goto label10;

     label05:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Going to sleep due to screen timeout (uid ");

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r30);

        goto label10;

     label06:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Going to sleep due to lid switch (uid ");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r23);

        goto label10;

     label07:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Going to sleep due to power button (uid ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r18);

        goto label10;

     label08:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Going to sleep due to HDMI standby (uid ");

        $r12 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r16);

        goto label10;

     label09:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Going to sleep by application request (uid ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r32 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r32);

        i1 = 0;

     label10:
        r0.<com.android.server.power.PowerManagerService: long mLastSleepTime> = l0;

        $i13 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i12 = $i13 | 2;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i12;

        r0.<com.android.server.power.PowerManagerService: int mWakefulness> = 3;

        r0.<com.android.server.power.PowerManagerService: boolean mSandmanSummoned> = 1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setInteractiveStateLocked(boolean,int)>(0, i1);

        i4 = 0;

        $r8 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        i5 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        i6 = 0;

     label11:
        if i6 >= i5 goto label14;

        $r9 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r11 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        r1 = (com.android.server.power.PowerManagerService$WakeLock) $r11;

        $i17 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i16 = $i17 & 65535;

        lookupswitch($i16)
        {
            case 6: goto label12;
            case 10: goto label12;
            case 26: goto label12;
            default: goto label13;
        };

     label12:
        i4 = i4 + 1;

     label13:
        i6 = i6 + 1;

        goto label11;

     label14:
        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(2724, i4);

        $i14 = i2 & 1;

        if $i14 == 0 goto label15;

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean reallyGoToSleepNoUpdateLocked(long,int)>(l0, i3);

     label15:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        goto label18;

     label16:
        $r33 := @caughtexception;

        r2 = $r33;

     label17:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw r2;

     label18:
        return 1;

        catch java.lang.Throwable from label03 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    private void napInternal(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean napNoUpdateLocked(long,int)>(l0, i1);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private boolean napNoUpdateLocked(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l2;
        int i1, $i4, $i5, $i7;
        java.lang.Throwable r1, $r7;
        byte $b3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l2 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b3 = l0 cmp $l2;

        if $b3 < 0 goto label1;

        $i4 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i4 != 1 goto label1;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, "nap");

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nap time (uid ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r6);

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i7 = $i5 | 2;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i7;

        r0.<com.android.server.power.PowerManagerService: int mWakefulness> = 2;

        r0.<com.android.server.power.PowerManagerService: boolean mSandmanSummoned> = 1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setInteractiveStateLocked(boolean,int)>(1, 0);

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        goto label7;

     label5:
        $r7 := @caughtexception;

        r1 = $r7;

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw r1;

     label7:
        return 1;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean reallyGoToSleepNoUpdateLocked(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l2;
        int i1, $i4, $i5, $i7;
        java.lang.Throwable r1, $r7;
        byte $b3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l2 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b3 = l0 cmp $l2;

        if $b3 < 0 goto label1;

        $i4 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i4 == 0 goto label1;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, "reallyGoToSleep");

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sleeping (uid ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")...");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r6);

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i7 = $i5 | 2;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i7;

        r0.<com.android.server.power.PowerManagerService: int mWakefulness> = 0;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setInteractiveStateLocked(boolean,int)>(0, 2);

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        goto label7;

     label5:
        $r7 := @caughtexception;

        r1 = $r7;

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw r1;

     label7:
        return 1;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void setInteractiveStateLocked(boolean, int)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1;
        int i0;
        com.android.server.power.Notifier $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mInteractive>;

        if $z1 == z0 goto label1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void finishInteractiveStateChangeLocked()>();

        r0.<com.android.server.power.PowerManagerService: boolean mInteractive> = z0;

        r0.<com.android.server.power.PowerManagerService: boolean mInteractiveChanging> = 1;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r1.<com.android.server.power.Notifier: void onInteractiveStateChangeStarted(boolean,int)>(z0, i0);

     label1:
        return;
    }

    private void finishInteractiveStateChangeLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1;
        com.android.server.power.Notifier $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mInteractiveChanging>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mInteractive>;

        virtualinvoke $r1.<com.android.server.power.Notifier: void onInteractiveStateChangeFinished(boolean)>($z1);

        r0.<com.android.server.power.PowerManagerService: boolean mInteractiveChanging> = 0;

     label1:
        return;
    }

    private void updatePowerStateLocked()
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, $i3, $i4, $i5;
        java.lang.Throwable r1, $r3;
        boolean $z0, $z1, $z2, $z3, z4;
        java.lang.Object $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label01;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        if $i3 != 0 goto label02;

     label01:
        return;

     label02:
        $r2 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        $z1 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z1 != 0 goto label03;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("PowerManagerService", "Power manager lock was not held when calling updatePowerStateLocked");

     label03:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, "updatePowerState");

     label04:
        $i4 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateIsPoweredLocked(int)>($i4);

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateStayOnLocked(int)>($i5);

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        i1 = 0;

     label05:
        i2 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        i1 = i1 | i2;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = 0;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockSummaryLocked(int)>(i2);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateUserActivitySummaryLocked(long,int)>(l0, i2);

        $z2 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean updateWakefulnessLocked(int)>(i2);

        if $z2 != 0 goto label06;

        goto label07;

     label06:
        goto label05;

     label07:
        z4 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean updateDisplayPowerStateLocked(int)>(i1);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateDreamLocked(int,boolean)>(i1, z4);

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        if $z3 == 0 goto label08;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void finishInteractiveStateChangeLocked()>();

     label08:
        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateSuspendBlockerLocked()>();

     label09:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        goto label12;

     label10:
        $r3 := @caughtexception;

        r1 = $r3;

     label11:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw r1;

     label12:
        return;

        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void updateIsPoweredLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z8, $z9, $z10, $z11, $z12;
        long l2;
        android.os.BatteryManagerInternal $r1, $r2, $r3, $r4;
        com.android.server.power.WirelessChargerDetector $r5;
        com.android.server.power.Notifier $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $i3 = i0 & 256;

        if $i3 == 0 goto label6;

        z0 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        i1 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        z1 = r0.<com.android.server.power.PowerManagerService: boolean mBatteryLevelLow>;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.os.BatteryManagerInternal mBatteryManagerInternal>;

        $z3 = virtualinvoke $r1.<android.os.BatteryManagerInternal: boolean isPowered(int)>(7);

        r0.<com.android.server.power.PowerManagerService: boolean mIsPowered> = $z3;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.os.BatteryManagerInternal mBatteryManagerInternal>;

        $i4 = virtualinvoke $r2.<android.os.BatteryManagerInternal: int getPlugType()>();

        r0.<com.android.server.power.PowerManagerService: int mPlugType> = $i4;

        $r3 = r0.<com.android.server.power.PowerManagerService: android.os.BatteryManagerInternal mBatteryManagerInternal>;

        $i5 = virtualinvoke $r3.<android.os.BatteryManagerInternal: int getBatteryLevel()>();

        r0.<com.android.server.power.PowerManagerService: int mBatteryLevel> = $i5;

        $r4 = r0.<com.android.server.power.PowerManagerService: android.os.BatteryManagerInternal mBatteryManagerInternal>;

        $z5 = virtualinvoke $r4.<android.os.BatteryManagerInternal: boolean getBatteryLevelLow()>();

        r0.<com.android.server.power.PowerManagerService: boolean mBatteryLevelLow> = $z5;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if z0 != $z4 goto label1;

        $i10 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        if i1 == $i10 goto label3;

     label1:
        $i7 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i6 = $i7 | 64;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i6;

        $r5 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.WirelessChargerDetector mWirelessChargerDetector>;

        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        $i8 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        $i9 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        z2 = virtualinvoke $r5.<com.android.server.power.WirelessChargerDetector: boolean update(boolean,int,int)>($z6, $i8, $i9);

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $z8 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean shouldWakeUpWhenPluggedOrUnpluggedLocked(boolean,int,boolean)>(z0, i1, z2);

        if $z8 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long,int)>(l2, 1000);

     label2:
        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l2, 0, 0, 1000);

        if z2 == 0 goto label3;

        $r6 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.Notifier mNotifier>;

        virtualinvoke $r6.<com.android.server.power.Notifier: void onWirelessChargingStarted()>();

     label3:
        $z10 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if z0 != $z10 goto label4;

        $z11 = r0.<com.android.server.power.PowerManagerService: boolean mBatteryLevelLow>;

        if z1 == $z11 goto label6;

     label4:
        $z9 = r0.<com.android.server.power.PowerManagerService: boolean mBatteryLevelLow>;

        if z1 == $z9 goto label5;

        $z12 = r0.<com.android.server.power.PowerManagerService: boolean mBatteryLevelLow>;

        if $z12 != 0 goto label5;

        r0.<com.android.server.power.PowerManagerService: boolean mAutoLowPowerModeSnoozing> = 0;

     label5:
        virtualinvoke r0.<com.android.server.power.PowerManagerService: void updateLowPowerModeLocked()>();

     label6:
        return;
    }

    private boolean shouldWakeUpWhenPluggedOrUnpluggedLocked(boolean, int, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        z1 := @parameter2: boolean;

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mWakeUpWhenPluggedOrUnpluggedConfig>;

        if $z2 != 0 goto label1;

        return 0;

     label1:
        if z0 == 0 goto label2;

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z5 != 0 goto label2;

        if i0 != 4 goto label2;

        return 0;

     label2:
        if z0 != 0 goto label3;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z4 == 0 goto label3;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        if $i2 != 4 goto label3;

        if z1 != 0 goto label3;

        return 0;

     label3:
        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z3 == 0 goto label4;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i1 != 2 goto label4;

        return 0;

     label4:
        return 1;
    }

    private void updateStayOnLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0, $z1, $z2, $z3;
        android.os.BatteryManagerInternal $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $i1 = i0 & 288;

        if $i1 == 0 goto label3;

        z0 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting>;

        if $i2 == 0 goto label1;

        $z2 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()>();

        if $z2 != 0 goto label1;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.os.BatteryManagerInternal mBatteryManagerInternal>;

        $i5 = r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting>;

        $z3 = virtualinvoke $r1.<android.os.BatteryManagerInternal: boolean isPowered(int)>($i5);

        r0.<com.android.server.power.PowerManagerService: boolean mStayOn> = $z3;

        goto label2;

     label1:
        r0.<com.android.server.power.PowerManagerService: boolean mStayOn> = 0;

     label2:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        if $z1 == z0 goto label3;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i4 = $i3 | 128;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i4;

     label3:
        return;
    }

    private void updateWakeLockSummaryLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36;
        com.android.server.power.PowerManagerService$WakeLock r1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $i3 = i0 & 3;

        if $i3 == 0 goto label14;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = 0;

        $r2 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i2 = 0;

     label01:
        if i2 >= i1 goto label09;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r1 = (com.android.server.power.PowerManagerService$WakeLock) $r4;

        $i23 = r1.<com.android.server.power.PowerManagerService$WakeLock: int mFlags>;

        $i25 = $i23 & 65535;

        lookupswitch($i25)
        {
            case 1: goto label02;
            case 6: goto label05;
            case 10: goto label04;
            case 26: goto label03;
            case 32: goto label06;
            case 64: goto label07;
            default: goto label08;
        };

     label02:
        $i36 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i34 = $i36 | 1;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i34;

        goto label08;

     label03:
        $i27 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i32 = $i27 | 10;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i32;

        goto label08;

     label04:
        $i33 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i30 = $i33 | 2;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i30;

        goto label08;

     label05:
        $i31 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i35 = $i31 | 4;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i35;

        goto label08;

     label06:
        $i29 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i26 = $i29 | 16;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i26;

        goto label08;

     label07:
        $i24 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i28 = $i24 | 64;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i28;

     label08:
        i2 = i2 + 1;

        goto label01;

     label09:
        $i4 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i4 == 3 goto label10;

        $i20 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i22 = $i20 & -65;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i22;

     label10:
        $i5 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i5 == 0 goto label11;

        $i18 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i21 = $i18 & 64;

        if $i21 == 0 goto label12;

     label11:
        $i6 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i7 = $i6 & -15;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i7;

        $i8 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i8 != 0 goto label12;

        $i16 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i19 = $i16 & -17;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i19;

     label12:
        $i9 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i10 = $i9 & 6;

        if $i10 == 0 goto label14;

        $i11 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i11 != 1 goto label13;

        $i14 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i17 = $i14 | 33;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i17;

        goto label14;

     label13:
        $i13 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i13 != 2 goto label14;

        $i12 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i15 = $i12 | 1;

        r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary> = $i15;

     label14:
        return;
    }

    private void updateUserActivitySummaryLocked(long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, l2, l6, $l9, $l11, $l16, $l17, $l18, $l20, $l22, $l23, $l24, $l25, $l29, $l30, $l32, $l33, $l34, $l36;
        int i1, i3, i4, i5, $i7, $i8, $i12, $i13, $i15, $i27, $i31, $i37, $i38;
        com.android.server.power.PowerManagerService$PowerManagerHandler $r1, $r2, $r3;
        byte $b10, $b14, $b19, $b21, $b26, $b28, $b35, $b39;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r4, $r5;
        android.os.Message r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $i7 = i1 & 39;

        if $i7 == 0 goto label11;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r1.<com.android.server.power.PowerManagerService$PowerManagerHandler: void removeMessages(int)>(1);

        l2 = 0L;

        $i8 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i8 == 1 goto label01;

        $i38 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i38 == 2 goto label01;

        $i37 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i37 != 3 goto label10;

     label01:
        i3 = specialinvoke r0.<com.android.server.power.PowerManagerService: int getSleepTimeoutLocked()>();

        i4 = specialinvoke r0.<com.android.server.power.PowerManagerService: int getScreenOffTimeoutLocked(int)>(i3);

        i5 = specialinvoke r0.<com.android.server.power.PowerManagerService: int getScreenDimDurationLocked(int)>(i4);

        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 0;

        $l11 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $l9 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b10 = $l11 cmp $l9;

        if $b10 < 0 goto label03;

        $l29 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $l32 = (long) i4;

        $l36 = $l29 + $l32;

        $l30 = (long) i5;

        l2 = $l36 - $l30;

        $b35 = l0 cmp l2;

        if $b35 >= 0 goto label02;

        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 1;

        goto label03;

     label02:
        $l33 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $l34 = (long) i4;

        l2 = $l33 + $l34;

        $b39 = l0 cmp l2;

        if $b39 >= 0 goto label03;

        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 2;

     label03:
        $i13 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        if $i13 != 0 goto label05;

        $l25 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights>;

        $l20 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b26 = $l25 cmp $l20;

        if $b26 < 0 goto label05;

        $l24 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights>;

        $l23 = (long) i4;

        l2 = $l24 + $l23;

        $b28 = l0 cmp l2;

        if $b28 >= 0 goto label05;

        $r5 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i27 = $r5.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if $i27 != 3 goto label04;

        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 1;

        goto label05;

     label04:
        $r4 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i31 = $r4.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if $i31 != 2 goto label05;

        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 2;

     label05:
        $i12 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        if $i12 != 0 goto label08;

        if i3 < 0 goto label07;

        $l16 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $l17 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights>;

        l6 = staticinvoke <java.lang.Math: long max(long,long)>($l16, $l17);

        $l18 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $b21 = l6 cmp $l18;

        if $b21 < 0 goto label06;

        $l22 = (long) i3;

        l2 = l6 + $l22;

        $b19 = l0 cmp l2;

        if $b19 >= 0 goto label06;

        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 4;

     label06:
        goto label08;

     label07:
        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 4;

        l2 = -1L;

     label08:
        $i15 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        if $i15 == 0 goto label09;

        $b14 = l2 cmp 0L;

        if $b14 < 0 goto label09;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        r6 = virtualinvoke $r2.<com.android.server.power.PowerManagerService$PowerManagerHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke r6.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r3.<com.android.server.power.PowerManagerService$PowerManagerHandler: boolean sendMessageAtTime(android.os.Message,long)>(r6, l2);

     label09:
        goto label11;

     label10:
        r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary> = 0;

     label11:
        return;
    }

    private void handleUserActivityTimeout()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0, $i1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i1 = $i0 | 4;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private int getSleepTimeoutLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 = r0.<com.android.server.power.PowerManagerService: int mSleepTimeoutSetting>;

        if i0 > 0 goto label1;

        return -1;

     label1:
        $i1 = r0.<com.android.server.power.PowerManagerService: int mMinimumScreenOffTimeoutConfig>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i1);

        return $i2;
    }

    private int getScreenOffTimeoutLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, $i4, $i5, $i9;
        boolean $z0;
        long $l2, $l6, $l7, $l8;
        byte $b3;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        i1 = r0.<com.android.server.power.PowerManagerService: int mScreenOffTimeoutSetting>;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()>();

        if $z0 == 0 goto label1;

        $i9 = r0.<com.android.server.power.PowerManagerService: int mMaximumScreenOffTimeoutFromDeviceAdmin>;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i9);

     label1:
        $l2 = r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager>;

        $b3 = $l2 cmp 0L;

        if $b3 < 0 goto label2;

        $l7 = (long) i1;

        $l6 = r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager>;

        $l8 = staticinvoke <java.lang.Math: long min(long,long)>($l7, $l6);

        i1 = (int) $l8;

     label2:
        if i0 < 0 goto label3;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i0);

     label3:
        $i4 = r0.<com.android.server.power.PowerManagerService: int mMinimumScreenOffTimeoutConfig>;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $i4);

        return $i5;
    }

    private int getScreenDimDurationLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2, $i3;
        float $f0, $f1, $f2;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mMaximumScreenDimDurationConfig>;

        $f1 = (float) i0;

        $f0 = r0.<com.android.server.power.PowerManagerService: float mMaximumScreenDimRatioConfig>;

        $f2 = $f1 * $f0;

        $i1 = (int) $f2;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        return $i3;
    }

    private boolean updateWakefulnessLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i2, $i3;
        boolean z0, $z1, $z2;
        long l1;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        z0 = 0;

        $i2 = i0 & 1687;

        if $i2 == 0 goto label2;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i3 != 1 goto label2;

        $z1 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isItBedTimeYetLocked()>();

        if $z1 == 0 goto label2;

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $z2 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean shouldNapAtBedTimeLocked()>();

        if $z2 == 0 goto label1;

        z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean napNoUpdateLocked(long,int)>(l1, 1000);

        goto label2;

     label1:
        z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean goToSleepNoUpdateLocked(long,int,int,int)>(l1, 2, 0, 1000);

     label2:
        return z0;
    }

    private boolean shouldNapAtBedTimeLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnSleepSetting>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnDockSetting>;

        if $z1 == 0 goto label2;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mDockState>;

        if $i0 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private boolean isItBedTimeYetLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isBeingKeptAwakeLocked()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private boolean isBeingKeptAwakeLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive>;

        if $z1 != 0 goto label1;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i1 = $i0 & 32;

        if $i1 != 0 goto label1;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i3 = $i2 & 3;

        if $i3 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private void updateDreamLocked(int, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1;
        boolean z0, $z1;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i1 = i0 & 1015;

        if $i1 != 0 goto label1;

        if z0 == 0 goto label2;

     label1:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void scheduleSandmanLocked()>();

     label2:
        return;
    }

    private void scheduleSandmanLocked()
    {
        com.android.server.power.PowerManagerService r0;
        android.os.Message r1;
        boolean $z0;
        com.android.server.power.PowerManagerService$PowerManagerHandler $r2, $r3;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSandmanScheduled>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.power.PowerManagerService: boolean mSandmanScheduled> = 1;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        r1 = virtualinvoke $r2.<com.android.server.power.PowerManagerService$PowerManagerHandler: android.os.Message obtainMessage(int)>(2);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r3.<com.android.server.power.PowerManagerService$PowerManagerHandler: boolean sendMessage(android.os.Message)>(r1);

     label1:
        return;
    }

    private void handleSandman()
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1, $z2, $z4, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14;
        int i0, $i1, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i14;
        java.lang.Object r1, $r4, $r6, r21;
        java.lang.Throwable r2, r3, $r19, $r20;
        android.service.dreams.DreamManagerInternal $r5, $r7, $r16, $r17, $r18;
        long $l2, $l3, $l4;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r14, $r15;
        java.lang.String $r13;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r4 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        r0.<com.android.server.power.PowerManagerService: boolean mSandmanScheduled> = 0;

        i0 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSandmanSummoned>;

        if $z1 == 0 goto label05;

        $z13 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        if $z13 == 0 goto label05;

        $z12 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean canDreamLocked()>();

        if $z12 != 0 goto label02;

        $z11 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean canDozeLocked()>();

        if $z11 == 0 goto label03;

     label02:
        $z10 = 1;

        goto label04;

     label03:
        $z10 = 0;

     label04:
        z0 = $z10;

        r0.<com.android.server.power.PowerManagerService: boolean mSandmanSummoned> = 0;

        goto label06;

     label05:
        z0 = 0;

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r20 := @caughtexception;

        r2 = $r20;

        exitmonitor r1;

     label09:
        throw r2;

     label10:
        $r5 = r0.<com.android.server.power.PowerManagerService: android.service.dreams.DreamManagerInternal mDreamManager>;

        if $r5 == null goto label14;

        if z0 == 0 goto label13;

        $r18 = r0.<com.android.server.power.PowerManagerService: android.service.dreams.DreamManagerInternal mDreamManager>;

        virtualinvoke $r18.<android.service.dreams.DreamManagerInternal: void stopDream(boolean)>(0);

        $r17 = r0.<com.android.server.power.PowerManagerService: android.service.dreams.DreamManagerInternal mDreamManager>;

        if i0 != 3 goto label11;

        $z9 = 1;

        goto label12;

     label11:
        $z9 = 0;

     label12:
        virtualinvoke $r17.<android.service.dreams.DreamManagerInternal: void startDream(boolean)>($z9);

     label13:
        $r16 = r0.<com.android.server.power.PowerManagerService: android.service.dreams.DreamManagerInternal mDreamManager>;

        z14 = virtualinvoke $r16.<android.service.dreams.DreamManagerInternal: boolean isDreaming()>();

        goto label15;

     label14:
        z14 = 0;

     label15:
        $r6 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r21 = $r6;

        entermonitor $r6;

     label16:
        if z0 == 0 goto label18;

        if z14 == 0 goto label18;

        $i14 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        r0.<com.android.server.power.PowerManagerService: int mBatteryLevelWhenDreamStarted> = $i14;

        if i0 != 3 goto label17;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", "Dozing...");

        goto label18;

     label17:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", "Dreaming...");

     label18:
        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mSandmanSummoned>;

        if $z2 != 0 goto label19;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i1 == i0 goto label21;

     label19:
        exitmonitor r21;

     label20:
        return;

     label21:
        if i0 != 2 goto label26;

        if z14 == 0 goto label24;

        $z7 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean canDreamLocked()>();

        if $z7 == 0 goto label24;

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelDrainCutoffConfig>;

        if $i5 < 0 goto label22;

        $i9 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        $i8 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevelWhenDreamStarted>;

        $i6 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelDrainCutoffConfig>;

        $i7 = $i8 - $i6;

        if $i9 >= $i7 goto label22;

        $z8 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isBeingKeptAwakeLocked()>();

        if $z8 != 0 goto label22;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stopping dream because the battery appears to be draining faster than it is charging.  Battery level when dream started: ");

        $i10 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevelWhenDreamStarted>;

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%.  ");

        $r10 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Battery level now: ");

        $i11 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%.");

        $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PowerManagerService", $r13);

        goto label24;

     label22:
        exitmonitor r21;

     label23:
        return;

     label24:
        $z4 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isItBedTimeYetLocked()>();

        if $z4 == 0 goto label25;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean goToSleepNoUpdateLocked(long,int,int,int)>($l4, 2, 0, 1000);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        goto label29;

     label25:
        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long,int)>($l3, 1000);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        goto label29;

     label26:
        if i0 != 3 goto label29;

        if z14 == 0 goto label28;

        exitmonitor r21;

     label27:
        return;

     label28:
        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        specialinvoke r0.<com.android.server.power.PowerManagerService: boolean reallyGoToSleepNoUpdateLocked(long,int)>($l2, 1000);

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label29:
        exitmonitor r21;

     label30:
        goto label33;

     label31:
        $r19 := @caughtexception;

        r3 = $r19;

        exitmonitor r21;

     label32:
        throw r3;

     label33:
        if z14 == 0 goto label34;

        $r7 = r0.<com.android.server.power.PowerManagerService: android.service.dreams.DreamManagerInternal mDreamManager>;

        virtualinvoke $r7.<android.service.dreams.DreamManagerInternal: void stopDream(boolean)>(0);

     label34:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label16 to label20 with label31;
        catch java.lang.Throwable from label21 to label23 with label31;
        catch java.lang.Throwable from label24 to label27 with label31;
        catch java.lang.Throwable from label28 to label30 with label31;
        catch java.lang.Throwable from label31 to label32 with label31;
    }

    private boolean canDreamLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i0 != 2 goto label1;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsSupportedConfig>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledSetting>;

        if $z1 == 0 goto label1;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $z2 = virtualinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean isBrightOrDim()>();

        if $z2 == 0 goto label1;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i2 = $i1 & 7;

        if $i2 == 0 goto label1;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z3 != 0 goto label2;

     label1:
        return 0;

     label2:
        $z4 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isBeingKeptAwakeLocked()>();

        if $z4 != 0 goto label5;

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z5 != 0 goto label3;

        $z8 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledOnBatteryConfig>;

        if $z8 != 0 goto label3;

        return 0;

     label3:
        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z6 != 0 goto label4;

        $i7 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenNotPoweredConfig>;

        if $i7 < 0 goto label4;

        $i8 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        $i6 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenNotPoweredConfig>;

        if $i8 >= $i6 goto label4;

        return 0;

     label4:
        $z7 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z7 == 0 goto label5;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenPoweredConfig>;

        if $i3 < 0 goto label5;

        $i5 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        $i4 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenPoweredConfig>;

        if $i5 >= $i4 goto label5;

        return 0;

     label5:
        return 1;
    }

    private boolean canDozeLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i0 != 3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean updateDisplayPowerStateLocked(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        float f0, $f1, $f2, $f3, f4;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13;
        android.hardware.display.DisplayManagerInternal $r11;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        z0 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        $i2 = i0 & 63;

        if $i2 == 0 goto label10;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i3 = specialinvoke r0.<com.android.server.power.PowerManagerService: int getDesiredScreenPolicyLocked()>();

        $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy> = $i3;

        i1 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingDefault>;

        f0 = 0.0F;

        $i4 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessModeSetting>;

        if $i4 != 1 goto label01;

        $z12 = 1;

        goto label02;

     label01:
        $z12 = 0;

     label02:
        z1 = $z12;

        $i5 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessOverrideFromWindowManager>;

        $z4 = staticinvoke <com.android.server.power.PowerManagerService: boolean isValidBrightness(int)>($i5);

        if $z4 == 0 goto label03;

        i1 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessOverrideFromWindowManager>;

        z1 = 0;

        goto label05;

     label03:
        $i6 = r0.<com.android.server.power.PowerManagerService: int mTemporaryScreenBrightnessSettingOverride>;

        $z5 = staticinvoke <com.android.server.power.PowerManagerService: boolean isValidBrightness(int)>($i6);

        if $z5 == 0 goto label04;

        i1 = r0.<com.android.server.power.PowerManagerService: int mTemporaryScreenBrightnessSettingOverride>;

        goto label05;

     label04:
        $i7 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSetting>;

        $z6 = staticinvoke <com.android.server.power.PowerManagerService: boolean isValidBrightness(int)>($i7);

        if $z6 == 0 goto label05;

        i1 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSetting>;

     label05:
        if z1 == 0 goto label07;

        i1 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingDefault>;

        $f2 = r0.<com.android.server.power.PowerManagerService: float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride>;

        $z13 = staticinvoke <com.android.server.power.PowerManagerService: boolean isValidAutoBrightnessAdjustment(float)>($f2);

        if $z13 == 0 goto label06;

        f0 = r0.<com.android.server.power.PowerManagerService: float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride>;

        goto label07;

     label06:
        $f3 = r0.<com.android.server.power.PowerManagerService: float mScreenAutoBrightnessAdjustmentSetting>;

        $z11 = staticinvoke <com.android.server.power.PowerManagerService: boolean isValidAutoBrightnessAdjustment(float)>($f3);

        if $z11 == 0 goto label07;

        f0 = r0.<com.android.server.power.PowerManagerService: float mScreenAutoBrightnessAdjustmentSetting>;

     label07:
        $i9 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingMaximum>;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i9);

        $i10 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingMinimum>;

        i14 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i10);

        $f1 = staticinvoke <java.lang.Math: float min(float,float)>(f0, 1.0F);

        f4 = staticinvoke <java.lang.Math: float max(float,float)>($f1, -1.0F);

        $r3 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $r3.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int screenBrightness> = i14;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $r2.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenAutoBrightnessAdjustment> = f4;

        $r5 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $r5.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useAutoBrightness> = z1;

        $r4 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $z8 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean shouldUseProximitySensorLocked()>();

        $r4.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useProximitySensor> = $z8;

        $r7 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $z7 = r0.<com.android.server.power.PowerManagerService: boolean mLowPowerModeEnabled>;

        $r7.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean lowPowerMode> = $z7;

        $r6 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i11 = $r6.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if $i11 != 1 goto label08;

        $r13 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i12 = r0.<com.android.server.power.PowerManagerService: int mDozeScreenStateOverrideFromDreamManager>;

        $r13.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState> = $i12;

        $r12 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $i13 = r0.<com.android.server.power.PowerManagerService: int mDozeScreenBrightnessOverrideFromDreamManager>;

        $r12.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenBrightness> = $i13;

        goto label09;

     label08:
        $r9 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $r9.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState> = 0;

        $r8 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $r8.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenBrightness> = -1;

     label09:
        $r11 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $r10 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $z9 = r0.<com.android.server.power.PowerManagerService: boolean mRequestWaitForNegativeProximity>;

        $z10 = virtualinvoke $r11.<android.hardware.display.DisplayManagerInternal: boolean requestPowerState(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest,boolean)>($r10, $z9);

        r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady> = $z10;

        r0.<com.android.server.power.PowerManagerService: boolean mRequestWaitForNegativeProximity> = 0;

     label10:
        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        if $z2 == 0 goto label11;

        if z0 != 0 goto label11;

        $z3 = 1;

        goto label12;

     label11:
        $z3 = 0;

     label12:
        return $z3;
    }

    private static boolean isValidBrightness(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 > 255 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isValidAutoBrightnessAdjustment(float)
    {
        float f0;
        byte $b0, $b1;
        boolean $z0;

        f0 := @parameter0: float;

        $b0 = f0 cmpl -1.0F;

        if $b0 < 0 goto label1;

        $b1 = f0 cmpg 1.0F;

        if $b1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int getDesiredScreenPolicyLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        if $i1 != 3 goto label3;

        $i6 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i7 = $i6 & 64;

        if $i7 == 0 goto label2;

        return 1;

     label2:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mDozeAfterScreenOffConfig>;

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $i2 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i3 = $i2 & 2;

        if $i3 != 0 goto label4;

        $i4 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $i5 = $i4 & 1;

        if $i5 != 0 goto label4;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        if $z0 != 0 goto label5;

     label4:
        return 3;

     label5:
        return 2;
    }

    private boolean shouldUseProximitySensorLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void updateSuspendBlockerLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        int $i0, $i1;
        com.android.server.power.SuspendBlocker $r1, $r2, $r3, $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label01;

        $z12 = 1;

        goto label02;

     label01:
        $z12 = 0;

     label02:
        z0 = $z12;

        z1 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean needDisplaySuspendBlockerLocked()>();

        if z1 != 0 goto label03;

        $z10 = 1;

        goto label04;

     label03:
        $z10 = 0;

     label04:
        z2 = $z10;

        if z2 != 0 goto label06;

        $z9 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalAutoSuspendModeFromDisplayConfig>;

        if $z9 == 0 goto label05;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setHalAutoSuspendModeLocked(boolean)>(0);

     label05:
        $z11 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalInteractiveModeFromDisplayConfig>;

        if $z11 == 0 goto label06;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setHalInteractiveModeLocked(boolean)>(1);

     label06:
        if z0 == 0 goto label07;

        $z8 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker>;

        if $z8 != 0 goto label07;

        $r4 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mWakeLockSuspendBlocker>;

        interfaceinvoke $r4.<com.android.server.power.SuspendBlocker: void acquire()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker> = 1;

     label07:
        if z1 == 0 goto label08;

        $z7 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker>;

        if $z7 != 0 goto label08;

        $r3 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        interfaceinvoke $r3.<com.android.server.power.SuspendBlocker: void acquire()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker> = 1;

     label08:
        if z0 != 0 goto label09;

        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker>;

        if $z6 == 0 goto label09;

        $r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mWakeLockSuspendBlocker>;

        interfaceinvoke $r2.<com.android.server.power.SuspendBlocker: void release()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker> = 0;

     label09:
        if z1 != 0 goto label10;

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker>;

        if $z5 == 0 goto label10;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        interfaceinvoke $r1.<com.android.server.power.SuspendBlocker: void release()>();

        r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker> = 0;

     label10:
        if z2 == 0 goto label12;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalInteractiveModeFromDisplayConfig>;

        if $z3 == 0 goto label11;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setHalInteractiveModeLocked(boolean)>(0);

     label11:
        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalAutoSuspendModeFromDisplayConfig>;

        if $z4 == 0 goto label12;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setHalAutoSuspendModeLocked(boolean)>(1);

     label12:
        return;
    }

    private boolean needDisplaySuspendBlockerLocked()
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r1, $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $z1 = virtualinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean isBrightOrDim()>();

        if $z1 == 0 goto label3;

        $r2 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mDisplayPowerRequest>;

        $z2 = $r2.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useProximitySensor>;

        if $z2 == 0 goto label2;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive>;

        if $z3 == 0 goto label2;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mSuspendWhenScreenOffDueToProximityConfig>;

        if $z4 != 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    private void setHalAutoSuspendModeLocked(boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1;
        java.lang.Throwable r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mHalAutoSuspendModeEnabled>;

        if z0 == $z1 goto label5;

        r0.<com.android.server.power.PowerManagerService: boolean mHalAutoSuspendModeEnabled> = z0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setHalAutoSuspend(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, $r6);

     label1:
        staticinvoke <com.android.server.power.PowerManagerService: void nativeSetAutoSuspend(boolean)>(z0);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        goto label5;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void setHalInteractiveModeLocked(boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1;
        java.lang.Throwable r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mHalInteractiveModeEnabled>;

        if z0 == $z1 goto label5;

        r0.<com.android.server.power.PowerManagerService: boolean mHalInteractiveModeEnabled> = z0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setHalInteractive(");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, $r6);

     label1:
        staticinvoke <com.android.server.power.PowerManagerService: void nativeSetInteractive(boolean)>(z0);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        goto label5;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean isInteractiveInternal()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mInteractive>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean isLowPowerModeInternal()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mLowPowerModeEnabled>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean setLowPowerModeInternal(boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1, $z3, $z4, $z5, $z6;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        byte $b0;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        if $z1 == 0 goto label03;

        exitmonitor r1;

     label02:
        return 0;

     label03:
        $r4 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        if z0 == 0 goto label04;

        $b0 = 1;

        goto label05;

     label04:
        $b0 = 0;

     label05:
        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r5, "low_power", $b0);

        r0.<com.android.server.power.PowerManagerService: boolean mLowPowerModeSetting> = z0;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mAutoLowPowerModeConfigured>;

        if $z3 == 0 goto label07;

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mBatteryLevelLow>;

        if $z4 == 0 goto label07;

        if z0 == 0 goto label06;

        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mAutoLowPowerModeSnoozing>;

        if $z6 == 0 goto label06;

        r0.<com.android.server.power.PowerManagerService: boolean mAutoLowPowerModeSnoozing> = 0;

        goto label07;

     label06:
        if z0 != 0 goto label07;

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mAutoLowPowerModeSnoozing>;

        if $z5 != 0 goto label07;

        r0.<com.android.server.power.PowerManagerService: boolean mAutoLowPowerModeSnoozing> = 1;

     label07:
        virtualinvoke r0.<com.android.server.power.PowerManagerService: void updateLowPowerModeLocked()>();

        exitmonitor r1;

     label08:
        return 1;

     label09:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label10:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void handleBatteryStateChangedLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, $i1;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i1 = $i0 | 256;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i1;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        return;
    }

    private void shutdownOrRebootInternal(boolean, boolean, java.lang.String, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, z1, z2, $z3;
        java.lang.String r1;
        com.android.server.power.PowerManagerService$3 r2, r4, $r9;
        android.os.Message r3;
        java.lang.Throwable r6, $r12;
        com.android.server.power.PowerManagerService$PowerManagerHandler $r7, $r10, $r11;
        java.lang.IllegalStateException $r8;
        java.lang.InterruptedException $r14;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        z2 := @parameter3: boolean;

        $r7 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        if $r7 == null goto label1;

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z3 != 0 goto label2;

     label1:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Too early to call shutdown() or reboot()");

        throw $r8;

     label2:
        $r9 = new com.android.server.power.PowerManagerService$3;

        specialinvoke $r9.<com.android.server.power.PowerManagerService$3: void <init>(com.android.server.power.PowerManagerService,boolean,boolean,java.lang.String)>(r0, z0, z1, r1);

        r2 = $r9;

        $r10 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        r3 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>($r10, r2);

        virtualinvoke r3.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r11 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.PowerManagerService$PowerManagerHandler mHandler>;

        virtualinvoke $r11.<com.android.server.power.PowerManagerService$PowerManagerHandler: boolean sendMessage(android.os.Message)>(r3);

        if z2 == 0 goto label8;

        r4 = r2;

        entermonitor r2;

     label3:
        virtualinvoke r2.<java.lang.Object: void wait()>();

     label4:
        goto label3;

     label5:
        $r14 := @caughtexception;

        goto label3;

     label6:
        $r12 := @caughtexception;

        r6 = $r12;

        exitmonitor r4;

     label7:
        throw r6;

     label8:
        return;

        catch java.lang.InterruptedException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label7 with label6;
    }

    private void crashInternal(java.lang.String)
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.String r1;
        com.android.server.power.PowerManagerService$4 r2, $r4;
        java.lang.InterruptedException r3, $r5;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: java.lang.String;

        $r4 = new com.android.server.power.PowerManagerService$4;

        specialinvoke $r4.<com.android.server.power.PowerManagerService$4: void <init>(com.android.server.power.PowerManagerService,java.lang.String,java.lang.String)>(r0, "PowerManagerService.crash()", r1);

        r2 = $r4;

     label1:
        virtualinvoke r2.<java.lang.Thread: void start()>();

        virtualinvoke r2.<java.lang.Thread: void join()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.Throwable)>("PowerManagerService", r3);

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private void setStayOnSettingInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r2, "stay_on_while_plugged_in", i0);

        return;
    }

    private void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<com.android.server.power.PowerManagerService: int mMaximumScreenOffTimeoutFromDeviceAdmin> = i0;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i2 = $i1 | 32;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()
    {
        com.android.server.power.PowerManagerService r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mMaximumScreenOffTimeoutFromDeviceAdmin>;

        if $i0 < 0 goto label1;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mMaximumScreenOffTimeoutFromDeviceAdmin>;

        if $i1 >= 2147483647 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void setAttentionLightInternal(boolean, int)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1;
        int i0;
        com.android.server.lights.Light r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;
        byte $b1;

        r0 := @this: com.android.server.power.PowerManagerService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r4 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.lights.Light mAttentionLight>;

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        if z0 == 0 goto label8;

        $b1 = 3;

        goto label9;

     label8:
        $b1 = 0;

     label9:
        virtualinvoke r1.<com.android.server.lights.Light: void setFlashing(int,int,int,int)>(i0, 2, $b1, 0);

        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void setScreenBrightnessOverrideFromWindowManagerInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i1 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessOverrideFromWindowManager>;

        if $i1 == i0 goto label2;

        r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessOverrideFromWindowManager> = i0;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i3 = $i2 | 32;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i3;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void setUserActivityTimeoutOverrideFromWindowManagerInternal(long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0, $l1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        byte $b2;
        int $i3, $i4;

        r0 := @this: com.android.server.power.PowerManagerService;

        l0 := @parameter0: long;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $l1 = r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager>;

        $b2 = $l1 cmp l0;

        if $b2 == 0 goto label2;

        r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager> = l0;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i4 = $i3 | 32;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i4;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void setTemporaryScreenBrightnessSettingOverrideInternal(int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i1 = r0.<com.android.server.power.PowerManagerService: int mTemporaryScreenBrightnessSettingOverride>;

        if $i1 == i0 goto label2;

        r0.<com.android.server.power.PowerManagerService: int mTemporaryScreenBrightnessSettingOverride> = i0;

        $i2 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i3 = $i2 | 32;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i3;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(float)
    {
        com.android.server.power.PowerManagerService r0;
        float f0, $f1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        byte $b0;
        int $i1, $i2;

        r0 := @this: com.android.server.power.PowerManagerService;

        f0 := @parameter0: float;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $f1 = r0.<com.android.server.power.PowerManagerService: float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label2;

        r0.<com.android.server.power.PowerManagerService: float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride> = f0;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i2 = $i1 | 32;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i2;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void setDozeOverrideFromDreamManagerInternal(int, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i2 = r0.<com.android.server.power.PowerManagerService: int mDozeScreenStateOverrideFromDreamManager>;

        if $i2 != i0 goto label2;

        $i5 = r0.<com.android.server.power.PowerManagerService: int mDozeScreenBrightnessOverrideFromDreamManager>;

        if $i5 == i1 goto label3;

     label2:
        r0.<com.android.server.power.PowerManagerService: int mDozeScreenStateOverrideFromDreamManager> = i0;

        r0.<com.android.server.power.PowerManagerService: int mDozeScreenBrightnessOverrideFromDreamManager> = i1;

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i4 = $i3 | 32;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i4;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void powerHintInternal(int, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1;

        r0 := @this: com.android.server.power.PowerManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <com.android.server.power.PowerManagerService: void nativeSendPowerHint(int,int)>(i0, i1);

        return;
    }

    public static void lowLevelShutdown()
    {
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.powerctl", "shutdown");

        return;
    }

    public static void lowLevelReboot(java.lang.String)
    {
        java.lang.String r0, $r5;
        long l0;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.InterruptedException $r6;
        java.lang.Thread $r7;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        r0 = "";

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("recovery");

        if $z0 == 0 goto label2;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("ctl.start", "pre-recovery");

        l0 = 120000L;

        goto label3;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reboot,");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.powerctl", $r5);

        l0 = 20000L;

     label3:
        staticinvoke <java.lang.Thread: void sleep(long)>(l0);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

     label6:
        return;

        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    public void monitor()
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        $r3 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void dumpInternal(java.io.PrintWriter)
    {
        com.android.server.power.PowerManagerService r0;
        java.io.PrintWriter r1;
        com.android.server.power.WirelessChargerDetector r2;
        java.lang.Object r3, $r7, $r315, $r316;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34, $i35, $i36;
        java.util.Iterator r4, r331;
        com.android.server.power.PowerManagerService$WakeLock r5;
        java.lang.Throwable r6, $r310;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r19, $r21, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r30, $r33, $r34, $r35, $r37, $r38, $r39, $r40, $r41, $r42, $r44, $r45, $r47, $r48, $r50, $r51, $r52, $r53, $r54, $r55, $r57, $r59, $r60, $r62, $r63, $r64, $r65, $r67, $r68, $r70, $r72, $r74, $r76, $r77, $r78, $r79, $r80, $r82, $r83, $r84, $r85, $r87, $r89, $r91, $r92, $r93, $r95, $r96, $r97, $r99, $r101, $r102, $r104, $r105, $r106, $r109, $r112, $r113, $r114, $r116, $r118, $r119, $r120, $r122, $r123, $r125, $r127, $r128, $r129, $r130, $r132, $r133, $r135, $r136, $r137, $r138, $r139, $r140, $r142, $r144, $r145, $r146, $r147, $r149, $r151, $r152, $r153, $r154, $r155, $r157, $r158, $r159, $r160, $r161, $r163, $r164, $r165, $r167, $r168, $r169, $r170, $r171, $r173, $r175, $r176, $r178, $r179, $r181, $r182, $r183, $r185, $r186, $r187, $r189, $r190, $r191, $r194, $r195, $r196, $r197, $r198, $r200, $r202, $r203, $r204, $r205, $r206, $r208, $r210, $r211, $r212, $r213, $r214, $r215, $r216, $r218, $r220, $r221, $r222, $r223, $r224, $r226, $r227, $r228, $r229, $r231, $r232, $r233, $r234, $r236, $r238, $r239, $r240, $r241, $r242, $r244, $r245, $r246, $r247, $r249, $r250, $r251, $r253, $r254, $r255, $r258, $r259, $r260, $r262, $r263, $r264, $r266, $r267, $r268, $r269, $r270, $r271, $r272, $r274, $r275, $r276, $r277, $r279, $r281, $r282, $r283, $r284, $r285, $r286, $r287, $r289, $r290, $r293, $r296, $r297, $r299, $r301, $r302, $r303, $r304, $r306, $r307, $r308, $r311, $r312, $r313, $r314, $r317, $r318, $r320, $r323, $r325, $r326, $r327, $r329;
        java.lang.String $r10, $r13, $r16, $r18, $r20, $r26, $r31, $r32, $r36, $r43, $r46, $r49, $r56, $r58, $r61, $r66, $r69, $r71, $r73, $r75, $r81, $r86, $r88, $r90, $r94, $r98, $r100, $r103, $r107, $r108, $r110, $r111, $r115, $r117, $r121, $r124, $r126, $r131, $r134, $r141, $r143, $r148, $r150, $r156, $r162, $r166, $r172, $r174, $r177, $r180, $r184, $r188, $r192, $r193, $r199, $r201, $r207, $r209, $r217, $r219, $r225, $r230, $r235, $r237, $r243, $r248, $r252, $r256, $r257, $r261, $r265, $r273, $r278, $r280, $r288, $r292, $r294, $r298, $r300, $r305, $r309, $r319, $r322, $r328;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34;
        long $l11, $l12, $l13, $l14, $l15, $l33;
        float $f0, $f1, $f2;
        java.util.ArrayList $r291, $r295, $r321, $r330;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r324;
        com.android.server.power.SuspendBlocker r332;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("POWER MANAGER (dumpsys power)\n");

        $r7 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        r3 = $r7;

        entermonitor $r7;

     label01:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Power Manager State:");

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDirty=0x");

        $i3 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWakefulness=");

        $i4 = r0.<com.android.server.power.PowerManagerService: int mWakefulness>;

        $r16 = staticinvoke <com.android.server.power.PowerManagerService: java.lang.String wakefulnessToString(int)>($i4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mInteractive=");

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mInteractive>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mIsPowered=");

        $z1 = r0.<com.android.server.power.PowerManagerService: boolean mIsPowered>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r26);

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPlugType=");

        $i5 = r0.<com.android.server.power.PowerManagerService: int mPlugType>;

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r31);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBatteryLevel=");

        $i6 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevel>;

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r32);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBatteryLevelWhenDreamStarted=");

        $i7 = r0.<com.android.server.power.PowerManagerService: int mBatteryLevelWhenDreamStarted>;

        $r35 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r36);

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDockState=");

        $i8 = r0.<com.android.server.power.PowerManagerService: int mDockState>;

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r43 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r43);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mStayOn=");

        $z2 = r0.<com.android.server.power.PowerManagerService: boolean mStayOn>;

        $r47 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r46);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximityPositive=");

        $z3 = r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive>;

        $r50 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r49);

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBootCompleted=");

        $z5 = r0.<com.android.server.power.PowerManagerService: boolean mBootCompleted>;

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r56);

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSystemReady=");

        $z4 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r61 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r61);

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mHalAutoSuspendModeEnabled=");

        $z6 = r0.<com.android.server.power.PowerManagerService: boolean mHalAutoSuspendModeEnabled>;

        $r57 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r58);

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mHalInteractiveModeEnabled=");

        $z7 = r0.<com.android.server.power.PowerManagerService: boolean mHalInteractiveModeEnabled>;

        $r67 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r69);

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWakeLockSummary=0x");

        $i9 = r0.<com.android.server.power.PowerManagerService: int mWakeLockSummary>;

        $r66 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i9);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r75 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r75);

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUserActivitySummary=0x");

        $i10 = r0.<com.android.server.power.PowerManagerService: int mUserActivitySummary>;

        $r71 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i10);

        $r70 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r73 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r73);

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r82 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mRequestWaitForNegativeProximity=");

        $z9 = r0.<com.android.server.power.PowerManagerService: boolean mRequestWaitForNegativeProximity>;

        $r80 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r81);

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSandmanScheduled=");

        $z8 = r0.<com.android.server.power.PowerManagerService: boolean mSandmanScheduled>;

        $r77 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r88 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r88);

        $r89 = new java.lang.StringBuilder;

        specialinvoke $r89.<java.lang.StringBuilder: void <init>()>();

        $r87 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSandmanSummoned=");

        $z10 = r0.<com.android.server.power.PowerManagerService: boolean mSandmanSummoned>;

        $r85 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z10);

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r86);

        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLowPowerModeEnabled=");

        $z12 = r0.<com.android.server.power.PowerManagerService: boolean mLowPowerModeEnabled>;

        $r95 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z12);

        $r94 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r94);

        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        $r92 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBatteryLevelLow=");

        $z11 = r0.<com.android.server.power.PowerManagerService: boolean mBatteryLevelLow>;

        $r91 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z11);

        $r90 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r90);

        $r102 = new java.lang.StringBuilder;

        specialinvoke $r102.<java.lang.StringBuilder: void <init>()>();

        $r101 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastWakeTime=");

        $l11 = r0.<com.android.server.power.PowerManagerService: long mLastWakeTime>;

        $r100 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l11);

        $r99 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r100);

        $r98 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r98);

        $r97 = new java.lang.StringBuilder;

        specialinvoke $r97.<java.lang.StringBuilder: void <init>()>();

        $r96 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastSleepTime=");

        $l13 = r0.<com.android.server.power.PowerManagerService: long mLastSleepTime>;

        $r110 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l13);

        $r112 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r110);

        $r111 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r111);

        $r114 = new java.lang.StringBuilder;

        specialinvoke $r114.<java.lang.StringBuilder: void <init>()>();

        $r113 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastUserActivityTime=");

        $l14 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTime>;

        $r115 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l14);

        $r104 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r115);

        $r103 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r103);

        $r106 = new java.lang.StringBuilder;

        specialinvoke $r106.<java.lang.StringBuilder: void <init>()>();

        $r105 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastUserActivityTimeNoChangeLights=");

        $l12 = r0.<com.android.server.power.PowerManagerService: long mLastUserActivityTimeNoChangeLights>;

        $r107 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l12);

        $r109 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r107);

        $r108 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r108);

        $r122 = new java.lang.StringBuilder;

        specialinvoke $r122.<java.lang.StringBuilder: void <init>()>();

        $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastInteractivePowerHintTime=");

        $l15 = r0.<com.android.server.power.PowerManagerService: long mLastInteractivePowerHintTime>;

        $r124 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l15);

        $r125 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r124);

        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r126);

        $r127 = new java.lang.StringBuilder;

        specialinvoke $r127.<java.lang.StringBuilder: void <init>()>();

        $r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDisplayReady=");

        $z13 = r0.<com.android.server.power.PowerManagerService: boolean mDisplayReady>;

        $r116 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z13);

        $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r117);

        $r118 = new java.lang.StringBuilder;

        specialinvoke $r118.<java.lang.StringBuilder: void <init>()>();

        $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mHoldingWakeLockSuspendBlocker=");

        $z14 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingWakeLockSuspendBlocker>;

        $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z14);

        $r121 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r121);

        $r138 = new java.lang.StringBuilder;

        specialinvoke $r138.<java.lang.StringBuilder: void <init>()>();

        $r137 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mHoldingDisplaySuspendBlocker=");

        $z16 = r0.<com.android.server.power.PowerManagerService: boolean mHoldingDisplaySuspendBlocker>;

        $r136 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z16);

        $r141 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r141);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Settings and Configuration:");

        $r140 = new java.lang.StringBuilder;

        specialinvoke $r140.<java.lang.StringBuilder: void <init>()>();

        $r139 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDecoupleHalAutoSuspendModeFromDisplayConfig=");

        $z17 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalAutoSuspendModeFromDisplayConfig>;

        $r132 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z17);

        $r131 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r131);

        $r130 = new java.lang.StringBuilder;

        specialinvoke $r130.<java.lang.StringBuilder: void <init>()>();

        $r129 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDecoupleHalInteractiveModeFromDisplayConfig=");

        $z15 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalInteractiveModeFromDisplayConfig>;

        $r135 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z15);

        $r134 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r134);

        $r133 = new java.lang.StringBuilder;

        specialinvoke $r133.<java.lang.StringBuilder: void <init>()>();

        $r151 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWakeUpWhenPluggedOrUnpluggedConfig=");

        $z19 = r0.<com.android.server.power.PowerManagerService: boolean mWakeUpWhenPluggedOrUnpluggedConfig>;

        $r149 = virtualinvoke $r151.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z19);

        $r150 = virtualinvoke $r149.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r150);

        $r153 = new java.lang.StringBuilder;

        specialinvoke $r153.<java.lang.StringBuilder: void <init>()>();

        $r154 = virtualinvoke $r153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSuspendWhenScreenOffDueToProximityConfig=");

        $z20 = r0.<com.android.server.power.PowerManagerService: boolean mSuspendWhenScreenOffDueToProximityConfig>;

        $r152 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z20);

        $r143 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r143);

        $r144 = new java.lang.StringBuilder;

        specialinvoke $r144.<java.lang.StringBuilder: void <init>()>();

        $r142 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsSupportedConfig=");

        $z18 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsSupportedConfig>;

        $r147 = virtualinvoke $r142.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z18);

        $r148 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r148);

        $r145 = new java.lang.StringBuilder;

        specialinvoke $r145.<java.lang.StringBuilder: void <init>()>();

        $r146 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsEnabledByDefaultConfig=");

        $z24 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledByDefaultConfig>;

        $r164 = virtualinvoke $r146.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z24);

        $r166 = virtualinvoke $r164.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r166);

        $r165 = new java.lang.StringBuilder;

        specialinvoke $r165.<java.lang.StringBuilder: void <init>()>();

        $r161 = virtualinvoke $r165.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsActivatedOnSleepByDefaultConfig=");

        $z23 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnSleepByDefaultConfig>;

        $r163 = virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z23);

        $r162 = virtualinvoke $r163.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r162);

        $r159 = new java.lang.StringBuilder;

        specialinvoke $r159.<java.lang.StringBuilder: void <init>()>();

        $r158 = virtualinvoke $r159.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsActivatedOnDockByDefaultConfig=");

        $z22 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivatedOnDockByDefaultConfig>;

        $r160 = virtualinvoke $r158.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z22);

        $r156 = virtualinvoke $r160.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r156);

        $r155 = new java.lang.StringBuilder;

        specialinvoke $r155.<java.lang.StringBuilder: void <init>()>();

        $r157 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsEnabledOnBatteryConfig=");

        $z21 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledOnBatteryConfig>;

        $r176 = virtualinvoke $r157.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z21);

        $r177 = virtualinvoke $r176.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r177);

        $r178 = new java.lang.StringBuilder;

        specialinvoke $r178.<java.lang.StringBuilder: void <init>()>();

        $r179 = virtualinvoke $r178.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsBatteryLevelMinimumWhenPoweredConfig=");

        $i18 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenPoweredConfig>;

        $r173 = virtualinvoke $r179.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r174 = virtualinvoke $r173.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r174);

        $r175 = new java.lang.StringBuilder;

        specialinvoke $r175.<java.lang.StringBuilder: void <init>()>();

        $r170 = virtualinvoke $r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsBatteryLevelMinimumWhenNotPoweredConfig=");

        $i17 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelMinimumWhenNotPoweredConfig>;

        $r171 = virtualinvoke $r170.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r172 = virtualinvoke $r171.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r172);

        $r167 = new java.lang.StringBuilder;

        specialinvoke $r167.<java.lang.StringBuilder: void <init>()>();

        $r168 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsBatteryLevelDrainCutoffConfig=");

        $i16 = r0.<com.android.server.power.PowerManagerService: int mDreamsBatteryLevelDrainCutoffConfig>;

        $r169 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r192 = virtualinvoke $r169.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r192);

        $r191 = new java.lang.StringBuilder;

        specialinvoke $r191.<java.lang.StringBuilder: void <init>()>();

        $r190 = virtualinvoke $r191.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsEnabledSetting=");

        $z27 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsEnabledSetting>;

        $r189 = virtualinvoke $r190.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z27);

        $r188 = virtualinvoke $r189.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r188);

        $r187 = new java.lang.StringBuilder;

        specialinvoke $r187.<java.lang.StringBuilder: void <init>()>();

        $r186 = virtualinvoke $r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsActivateOnSleepSetting=");

        $z26 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnSleepSetting>;

        $r185 = virtualinvoke $r186.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z26);

        $r184 = virtualinvoke $r185.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r184);

        $r183 = new java.lang.StringBuilder;

        specialinvoke $r183.<java.lang.StringBuilder: void <init>()>();

        $r182 = virtualinvoke $r183.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDreamsActivateOnDockSetting=");

        $z25 = r0.<com.android.server.power.PowerManagerService: boolean mDreamsActivateOnDockSetting>;

        $r181 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z25);

        $r180 = virtualinvoke $r181.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r180);

        $r204 = new java.lang.StringBuilder;

        specialinvoke $r204.<java.lang.StringBuilder: void <init>()>();

        $r205 = virtualinvoke $r204.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDozeAfterScreenOffConfig=");

        $z30 = r0.<com.android.server.power.PowerManagerService: boolean mDozeAfterScreenOffConfig>;

        $r203 = virtualinvoke $r205.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z30);

        $r201 = virtualinvoke $r203.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r201);

        $r202 = new java.lang.StringBuilder;

        specialinvoke $r202.<java.lang.StringBuilder: void <init>()>();

        $r200 = virtualinvoke $r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLowPowerModeSetting=");

        $z29 = r0.<com.android.server.power.PowerManagerService: boolean mLowPowerModeSetting>;

        $r198 = virtualinvoke $r200.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z29);

        $r199 = virtualinvoke $r198.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r199);

        $r196 = new java.lang.StringBuilder;

        specialinvoke $r196.<java.lang.StringBuilder: void <init>()>();

        $r197 = virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAutoLowPowerModeConfigured=");

        $z28 = r0.<com.android.server.power.PowerManagerService: boolean mAutoLowPowerModeConfigured>;

        $r195 = virtualinvoke $r197.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z28);

        $r193 = virtualinvoke $r195.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r193);

        $r194 = new java.lang.StringBuilder;

        specialinvoke $r194.<java.lang.StringBuilder: void <init>()>();

        $r220 = virtualinvoke $r194.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAutoLowPowerModeSnoozing=");

        $z31 = r0.<com.android.server.power.PowerManagerService: boolean mAutoLowPowerModeSnoozing>;

        $r218 = virtualinvoke $r220.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z31);

        $r219 = virtualinvoke $r218.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r219);

        $r222 = new java.lang.StringBuilder;

        specialinvoke $r222.<java.lang.StringBuilder: void <init>()>();

        $r223 = virtualinvoke $r222.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mMinimumScreenOffTimeoutConfig=");

        $i22 = r0.<com.android.server.power.PowerManagerService: int mMinimumScreenOffTimeoutConfig>;

        $r221 = virtualinvoke $r223.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r225 = virtualinvoke $r221.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r225);

        $r226 = new java.lang.StringBuilder;

        specialinvoke $r226.<java.lang.StringBuilder: void <init>()>();

        $r224 = virtualinvoke $r226.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mMaximumScreenDimDurationConfig=");

        $i23 = r0.<com.android.server.power.PowerManagerService: int mMaximumScreenDimDurationConfig>;

        $r229 = virtualinvoke $r224.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r230 = virtualinvoke $r229.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r230);

        $r227 = new java.lang.StringBuilder;

        specialinvoke $r227.<java.lang.StringBuilder: void <init>()>();

        $r228 = virtualinvoke $r227.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mMaximumScreenDimRatioConfig=");

        $f0 = r0.<com.android.server.power.PowerManagerService: float mMaximumScreenDimRatioConfig>;

        $r208 = virtualinvoke $r228.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r207 = virtualinvoke $r208.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r207);

        $r206 = new java.lang.StringBuilder;

        specialinvoke $r206.<java.lang.StringBuilder: void <init>()>();

        $r211 = virtualinvoke $r206.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenOffTimeoutSetting=");

        $i19 = r0.<com.android.server.power.PowerManagerService: int mScreenOffTimeoutSetting>;

        $r210 = virtualinvoke $r211.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r209 = virtualinvoke $r210.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r209);

        $r214 = new java.lang.StringBuilder;

        specialinvoke $r214.<java.lang.StringBuilder: void <init>()>();

        $r213 = virtualinvoke $r214.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSleepTimeoutSetting=");

        $i20 = r0.<com.android.server.power.PowerManagerService: int mSleepTimeoutSetting>;

        $r212 = virtualinvoke $r213.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r217 = virtualinvoke $r212.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r217);

        $r216 = new java.lang.StringBuilder;

        specialinvoke $r216.<java.lang.StringBuilder: void <init>()>();

        $r215 = virtualinvoke $r216.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mMaximumScreenOffTimeoutFromDeviceAdmin=");

        $i21 = r0.<com.android.server.power.PowerManagerService: int mMaximumScreenOffTimeoutFromDeviceAdmin>;

        $r244 = virtualinvoke $r215.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r245 = virtualinvoke $r244.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (enforced=");

        $z32 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked()>();

        $r246 = virtualinvoke $r245.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z32);

        $r247 = virtualinvoke $r246.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r248 = virtualinvoke $r247.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r248);

        $r249 = new java.lang.StringBuilder;

        specialinvoke $r249.<java.lang.StringBuilder: void <init>()>();

        $r250 = virtualinvoke $r249.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mStayOnWhilePluggedInSetting=");

        $i26 = r0.<com.android.server.power.PowerManagerService: int mStayOnWhilePluggedInSetting>;

        $r251 = virtualinvoke $r250.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        $r252 = virtualinvoke $r251.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r252);

        $r253 = new java.lang.StringBuilder;

        specialinvoke $r253.<java.lang.StringBuilder: void <init>()>();

        $r254 = virtualinvoke $r253.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessSetting=");

        $i27 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSetting>;

        $r255 = virtualinvoke $r254.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i27);

        $r256 = virtualinvoke $r255.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r256);

        $r232 = new java.lang.StringBuilder;

        specialinvoke $r232.<java.lang.StringBuilder: void <init>()>();

        $r231 = virtualinvoke $r232.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenAutoBrightnessAdjustmentSetting=");

        $f1 = r0.<com.android.server.power.PowerManagerService: float mScreenAutoBrightnessAdjustmentSetting>;

        $r233 = virtualinvoke $r231.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r235 = virtualinvoke $r233.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r235);

        $r234 = new java.lang.StringBuilder;

        specialinvoke $r234.<java.lang.StringBuilder: void <init>()>();

        $r236 = virtualinvoke $r234.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessModeSetting=");

        $i24 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessModeSetting>;

        $r238 = virtualinvoke $r236.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        $r237 = virtualinvoke $r238.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r237);

        $r240 = new java.lang.StringBuilder;

        specialinvoke $r240.<java.lang.StringBuilder: void <init>()>();

        $r239 = virtualinvoke $r240.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessOverrideFromWindowManager=");

        $i25 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessOverrideFromWindowManager>;

        $r241 = virtualinvoke $r239.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i25);

        $r243 = virtualinvoke $r241.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r243);

        $r242 = new java.lang.StringBuilder;

        specialinvoke $r242.<java.lang.StringBuilder: void <init>()>();

        $r274 = virtualinvoke $r242.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUserActivityTimeoutOverrideFromWindowManager=");

        $l33 = r0.<com.android.server.power.PowerManagerService: long mUserActivityTimeoutOverrideFromWindowManager>;

        $r272 = virtualinvoke $r274.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l33);

        $r273 = virtualinvoke $r272.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r273);

        $r270 = new java.lang.StringBuilder;

        specialinvoke $r270.<java.lang.StringBuilder: void <init>()>();

        $r271 = virtualinvoke $r270.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mTemporaryScreenBrightnessSettingOverride=");

        $i32 = r0.<com.android.server.power.PowerManagerService: int mTemporaryScreenBrightnessSettingOverride>;

        $r269 = virtualinvoke $r271.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        $r280 = virtualinvoke $r269.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r280);

        $r281 = new java.lang.StringBuilder;

        specialinvoke $r281.<java.lang.StringBuilder: void <init>()>();

        $r279 = virtualinvoke $r281.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mTemporaryScreenAutoBrightnessAdjustmentSettingOverride=");

        $f2 = r0.<com.android.server.power.PowerManagerService: float mTemporaryScreenAutoBrightnessAdjustmentSettingOverride>;

        $r277 = virtualinvoke $r279.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r278 = virtualinvoke $r277.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r278);

        $r275 = new java.lang.StringBuilder;

        specialinvoke $r275.<java.lang.StringBuilder: void <init>()>();

        $r276 = virtualinvoke $r275.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDozeScreenStateOverrideFromDreamManager=");

        $i29 = r0.<com.android.server.power.PowerManagerService: int mDozeScreenStateOverrideFromDreamManager>;

        $r262 = virtualinvoke $r276.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i29);

        $r261 = virtualinvoke $r262.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r261);

        $r260 = new java.lang.StringBuilder;

        specialinvoke $r260.<java.lang.StringBuilder: void <init>()>();

        $r259 = virtualinvoke $r260.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDozeScreenBrightnessOverrideFromDreamManager=");

        $i28 = r0.<com.android.server.power.PowerManagerService: int mDozeScreenBrightnessOverrideFromDreamManager>;

        $r258 = virtualinvoke $r259.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r257 = virtualinvoke $r258.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r257);

        $r268 = new java.lang.StringBuilder;

        specialinvoke $r268.<java.lang.StringBuilder: void <init>()>();

        $r267 = virtualinvoke $r268.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessSettingMinimum=");

        $i31 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingMinimum>;

        $r266 = virtualinvoke $r267.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i31);

        $r265 = virtualinvoke $r266.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r265);

        $r264 = new java.lang.StringBuilder;

        specialinvoke $r264.<java.lang.StringBuilder: void <init>()>();

        $r263 = virtualinvoke $r264.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessSettingMaximum=");

        $i30 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingMaximum>;

        $r299 = virtualinvoke $r263.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);

        $r300 = virtualinvoke $r299.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r300);

        $r301 = new java.lang.StringBuilder;

        specialinvoke $r301.<java.lang.StringBuilder: void <init>()>();

        $r302 = virtualinvoke $r301.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessSettingDefault=");

        $i35 = r0.<com.android.server.power.PowerManagerService: int mScreenBrightnessSettingDefault>;

        $r297 = virtualinvoke $r302.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i35);

        $r298 = virtualinvoke $r297.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r298);

        i0 = specialinvoke r0.<com.android.server.power.PowerManagerService: int getSleepTimeoutLocked()>();

        i1 = specialinvoke r0.<com.android.server.power.PowerManagerService: int getScreenOffTimeoutLocked(int)>(i0);

        i2 = specialinvoke r0.<com.android.server.power.PowerManagerService: int getScreenDimDurationLocked(int)>(i1);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r307 = new java.lang.StringBuilder;

        specialinvoke $r307.<java.lang.StringBuilder: void <init>()>();

        $r308 = virtualinvoke $r307.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sleep timeout: ");

        $r303 = virtualinvoke $r308.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r304 = virtualinvoke $r303.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r305 = virtualinvoke $r304.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r305);

        $r306 = new java.lang.StringBuilder;

        specialinvoke $r306.<java.lang.StringBuilder: void <init>()>();

        $r287 = virtualinvoke $r306.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screen off timeout: ");

        $r286 = virtualinvoke $r287.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r289 = virtualinvoke $r286.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r288 = virtualinvoke $r289.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r288);

        $r283 = new java.lang.StringBuilder;

        specialinvoke $r283.<java.lang.StringBuilder: void <init>()>();

        $r282 = virtualinvoke $r283.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screen dim duration: ");

        $r285 = virtualinvoke $r282.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r284 = virtualinvoke $r285.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r294 = virtualinvoke $r284.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r294);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r293 = new java.lang.StringBuilder;

        specialinvoke $r293.<java.lang.StringBuilder: void <init>()>();

        $r296 = virtualinvoke $r293.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wake Locks: size=");

        $r295 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        $i34 = virtualinvoke $r295.<java.util.ArrayList: int size()>();

        $r290 = virtualinvoke $r296.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i34);

        $r292 = virtualinvoke $r290.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r292);

        $r291 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mWakeLocks>;

        r4 = virtualinvoke $r291.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z34 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z34 == 0 goto label03;

        $r316 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.power.PowerManagerService$WakeLock) $r316;

        $r317 = new java.lang.StringBuilder;

        specialinvoke $r317.<java.lang.StringBuilder: void <init>()>();

        $r311 = virtualinvoke $r317.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r312 = virtualinvoke $r311.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r309 = virtualinvoke $r312.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r309);

        goto label02;

     label03:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r327 = new java.lang.StringBuilder;

        specialinvoke $r327.<java.lang.StringBuilder: void <init>()>();

        $r326 = virtualinvoke $r327.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Suspend Blockers: size=");

        $r330 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mSuspendBlockers>;

        $i36 = virtualinvoke $r330.<java.util.ArrayList: int size()>();

        $r329 = virtualinvoke $r326.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i36);

        $r328 = virtualinvoke $r329.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r328);

        $r321 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mSuspendBlockers>;

        r331 = virtualinvoke $r321.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z33 = interfaceinvoke r331.<java.util.Iterator: boolean hasNext()>();

        if $z33 == 0 goto label05;

        $r315 = interfaceinvoke r331.<java.util.Iterator: java.lang.Object next()>();

        r332 = (com.android.server.power.SuspendBlocker) $r315;

        $r313 = new java.lang.StringBuilder;

        specialinvoke $r313.<java.lang.StringBuilder: void <init>()>();

        $r314 = virtualinvoke $r313.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r318 = virtualinvoke $r314.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r332);

        $r319 = virtualinvoke $r318.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r319);

        goto label04;

     label05:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r320 = new java.lang.StringBuilder;

        specialinvoke $r320.<java.lang.StringBuilder: void <init>()>();

        $r325 = virtualinvoke $r320.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display Power: ");

        $r324 = r0.<com.android.server.power.PowerManagerService: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mDisplayPowerCallbacks>;

        $r323 = virtualinvoke $r325.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r324);

        $r322 = virtualinvoke $r323.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r322);

        r2 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.WirelessChargerDetector mWirelessChargerDetector>;

        exitmonitor r3;

     label06:
        goto label09;

     label07:
        $r310 := @caughtexception;

        r6 = $r310;

        exitmonitor r3;

     label08:
        throw r6;

     label09:
        if r2 == null goto label10;

        virtualinvoke r2.<com.android.server.power.WirelessChargerDetector: void dump(java.io.PrintWriter)>(r1);

     label10:
        return;

        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    private com.android.server.power.SuspendBlocker createSuspendBlockerLocked(java.lang.String)
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.String r1;
        com.android.server.power.PowerManagerService$SuspendBlockerImpl r2, $r3;
        java.util.ArrayList $r4;

        r0 := @this: com.android.server.power.PowerManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = new com.android.server.power.PowerManagerService$SuspendBlockerImpl;

        specialinvoke $r3.<com.android.server.power.PowerManagerService$SuspendBlockerImpl: void <init>(com.android.server.power.PowerManagerService,java.lang.String)>(r0, r1);

        r2 = $r3;

        $r4 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mSuspendBlockers>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        return r2;
    }

    private static java.lang.String wakefulnessToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        return "Asleep";

     label2:
        return "Awake";

     label3:
        return "Dreaming";

     label4:
        return "Dozing";

     label5:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;
    }

    private static android.os.WorkSource copyWorkSource(android.os.WorkSource)
    {
        android.os.WorkSource r0, $r1;

        r0 := @parameter0: android.os.WorkSource;

        if r0 == null goto label1;

        $r1 = new android.os.WorkSource;

        specialinvoke $r1.<android.os.WorkSource: void <init>(android.os.WorkSource)>(r0);

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    static boolean access$600(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mLowPowerModeEnabled>;

        return $z0;
    }

    static android.content.Context access$700(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: android.content.Context mContext>;

        return $r1;
    }

    static java.lang.Object access$800(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static java.util.ArrayList access$900(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: java.util.ArrayList mLowPowerModeListeners>;

        return $r1;
    }

    static int access$1076(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, $i1, $i2;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        $i1 = r0.<com.android.server.power.PowerManagerService: int mDirty>;

        $i2 = $i1 | i0;

        r0.<com.android.server.power.PowerManagerService: int mDirty> = $i2;

        return $i2;
    }

    static void access$1100(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updatePowerStateLocked()>();

        return;
    }

    static boolean access$1202(com.android.server.power.PowerManagerService, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.power.PowerManagerService: boolean mProximityPositive> = z0;

        return z0;
    }

    static boolean access$1300(com.android.server.power.PowerManagerService, long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, i3;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean userActivityNoUpdateLocked(long,int,int,int)>(l0, i1, i2, i3);

        return $z0;
    }

    static boolean access$1400(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalInteractiveModeFromDisplayConfig>;

        return $z0;
    }

    static void access$1500(com.android.server.power.PowerManagerService, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setHalInteractiveModeLocked(boolean)>(z0);

        return;
    }

    static boolean access$1600(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mDecoupleHalAutoSuspendModeFromDisplayConfig>;

        return $z0;
    }

    static void access$1700(com.android.server.power.PowerManagerService, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setHalAutoSuspendModeLocked(boolean)>(z0);

        return;
    }

    static com.android.server.power.SuspendBlocker access$1800(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.SuspendBlocker $r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $r1 = r0.<com.android.server.power.PowerManagerService: com.android.server.power.SuspendBlocker mDisplaySuspendBlocker>;

        return $r1;
    }

    static void access$1900(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleBatteryStateChangedLocked()>();

        return;
    }

    static void access$2000(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void scheduleSandmanLocked()>();

        return;
    }

    static void access$2100(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleSettingsChangedLocked()>();

        return;
    }

    static int access$2200(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        int $i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $i0 = r0.<com.android.server.power.PowerManagerService: int mDockState>;

        return $i0;
    }

    static int access$2202(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        r0.<com.android.server.power.PowerManagerService: int mDockState> = i0;

        return i0;
    }

    static void access$2300(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleUserActivityTimeout()>();

        return;
    }

    static void access$2400(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleSandman()>();

        return;
    }

    static android.os.WorkSource access$2500(android.os.WorkSource)
    {
        android.os.WorkSource r0, $r1;

        r0 := @parameter0: android.os.WorkSource;

        $r1 = staticinvoke <com.android.server.power.PowerManagerService: android.os.WorkSource copyWorkSource(android.os.WorkSource)>(r0);

        return $r1;
    }

    static void access$2600(com.android.server.power.PowerManagerService, com.android.server.power.PowerManagerService$WakeLock)
    {
        com.android.server.power.PowerManagerService r0;
        com.android.server.power.PowerManagerService$WakeLock r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        r1 := @parameter1: com.android.server.power.PowerManagerService$WakeLock;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void handleWakeLockDeath(com.android.server.power.PowerManagerService$WakeLock)>(r1);

        return;
    }

    static void access$2700(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.power.PowerManagerService: void nativeReleaseSuspendBlocker(java.lang.String)>(r0);

        return;
    }

    static void access$2800(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.power.PowerManagerService: void nativeAcquireSuspendBlocker(java.lang.String)>(r0);

        return;
    }

    static boolean access$2900(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $z0 = r0.<com.android.server.power.PowerManagerService: boolean mSystemReady>;

        return $z0;
    }

    static void access$3000(com.android.server.power.PowerManagerService, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void powerHintInternal(int,int)>(i0, i1);

        return;
    }

    static void access$3100(com.android.server.power.PowerManagerService, android.os.IBinder, int, java.lang.String, java.lang.String, android.os.WorkSource, java.lang.String, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        int i0, i1, i2;
        java.lang.String r2, r3, r5;
        android.os.WorkSource r4;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        r1 := @parameter1: android.os.IBinder;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: android.os.WorkSource;

        r5 := @parameter6: java.lang.String;

        i1 := @parameter7: int;

        i2 := @parameter8: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)>(r1, i0, r2, r3, r4, r5, i1, i2);

        return;
    }

    static void access$3200(com.android.server.power.PowerManagerService, android.os.IBinder, int)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        r1 := @parameter1: android.os.IBinder;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void releaseWakeLockInternal(android.os.IBinder,int)>(r1, i0);

        return;
    }

    static void access$3300(com.android.server.power.PowerManagerService, android.os.IBinder, android.os.WorkSource, java.lang.String, int)
    {
        com.android.server.power.PowerManagerService r0;
        android.os.IBinder r1;
        android.os.WorkSource r2;
        java.lang.String r3;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        r1 := @parameter1: android.os.IBinder;

        r2 := @parameter2: android.os.WorkSource;

        r3 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void updateWakeLockWorkSourceInternal(android.os.IBinder,android.os.WorkSource,java.lang.String,int)>(r1, r2, r3, i0);

        return;
    }

    static boolean access$3400(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isWakeLockLevelSupportedInternal(int)>(i0);

        return $z0;
    }

    static long access$3500(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        long $l0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $l0 = r0.<com.android.server.power.PowerManagerService: long mLastWarningAboutUserActivityPermission>;

        return $l0;
    }

    static long access$3502(com.android.server.power.PowerManagerService, long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        r0.<com.android.server.power.PowerManagerService: long mLastWarningAboutUserActivityPermission> = l0;

        return l0;
    }

    static void access$3600(com.android.server.power.PowerManagerService, long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, i3;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void userActivityInternal(long,int,int,int)>(l0, i1, i2, i3);

        return;
    }

    static void access$3700(com.android.server.power.PowerManagerService, long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void wakeUpInternal(long,int)>(l0, i1);

        return;
    }

    static void access$3800(com.android.server.power.PowerManagerService, long, int, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1, i2, i3;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void goToSleepInternal(long,int,int,int)>(l0, i1, i2, i3);

        return;
    }

    static void access$3900(com.android.server.power.PowerManagerService, long, int)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;
        int i1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void napInternal(long,int)>(l0, i1);

        return;
    }

    static boolean access$4000(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isInteractiveInternal()>();

        return $z0;
    }

    static boolean access$4100(com.android.server.power.PowerManagerService)
    {
        com.android.server.power.PowerManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        $z0 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean isLowPowerModeInternal()>();

        return $z0;
    }

    static boolean access$4200(com.android.server.power.PowerManagerService, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, $z1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<com.android.server.power.PowerManagerService: boolean setLowPowerModeInternal(boolean)>(z0);

        return $z1;
    }

    static void access$4300(com.android.server.power.PowerManagerService, boolean, boolean, java.lang.String, boolean)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0, z1, z2;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 := @parameter3: java.lang.String;

        z2 := @parameter4: boolean;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void shutdownOrRebootInternal(boolean,boolean,java.lang.String,boolean)>(z0, z1, r1, z2);

        return;
    }

    static void access$4400(com.android.server.power.PowerManagerService, java.lang.String)
    {
        com.android.server.power.PowerManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void crashInternal(java.lang.String)>(r1);

        return;
    }

    static void access$4500(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setStayOnSettingInternal(int)>(i0);

        return;
    }

    static void access$4600(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int)>(i0);

        return;
    }

    static void access$4700(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setTemporaryScreenBrightnessSettingOverrideInternal(int)>(i0);

        return;
    }

    static void access$4800(com.android.server.power.PowerManagerService, float)
    {
        com.android.server.power.PowerManagerService r0;
        float f0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        f0 := @parameter1: float;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(float)>(f0);

        return;
    }

    static void access$4900(com.android.server.power.PowerManagerService, boolean, int)
    {
        com.android.server.power.PowerManagerService r0;
        boolean z0;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setAttentionLightInternal(boolean,int)>(z0, i0);

        return;
    }

    static void access$5000(com.android.server.power.PowerManagerService, java.io.PrintWriter)
    {
        com.android.server.power.PowerManagerService r0;
        java.io.PrintWriter r1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        r1 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void dumpInternal(java.io.PrintWriter)>(r1);

        return;
    }

    static void access$5100(com.android.server.power.PowerManagerService, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setScreenBrightnessOverrideFromWindowManagerInternal(int)>(i0);

        return;
    }

    static void access$5200(com.android.server.power.PowerManagerService, int, int)
    {
        com.android.server.power.PowerManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setDozeOverrideFromDreamManagerInternal(int,int)>(i0, i1);

        return;
    }

    static void access$5300(com.android.server.power.PowerManagerService, long)
    {
        com.android.server.power.PowerManagerService r0;
        long l0;

        r0 := @parameter0: com.android.server.power.PowerManagerService;

        l0 := @parameter1: long;

        specialinvoke r0.<com.android.server.power.PowerManagerService: void setUserActivityTimeoutOverrideFromWindowManagerInternal(long)>(l0);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.power.PowerManagerService: int POWER_HINT_LOW_POWER> = 5;

        <com.android.server.power.PowerManagerService: int POWER_HINT_INTERACTION> = 2;

        <com.android.server.power.PowerManagerService: int DEFAULT_SLEEP_TIMEOUT> = -1;

        <com.android.server.power.PowerManagerService: int DEFAULT_SCREEN_OFF_TIMEOUT> = 15000;

        <com.android.server.power.PowerManagerService: int USER_ACTIVITY_SCREEN_DREAM> = 4;

        <com.android.server.power.PowerManagerService: int USER_ACTIVITY_SCREEN_DIM> = 2;

        <com.android.server.power.PowerManagerService: int USER_ACTIVITY_SCREEN_BRIGHT> = 1;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_DOZE> = 64;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_STAY_AWAKE> = 32;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_PROXIMITY_SCREEN_OFF> = 16;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_BUTTON_BRIGHT> = 8;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_SCREEN_DIM> = 4;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_SCREEN_BRIGHT> = 2;

        <com.android.server.power.PowerManagerService: int WAKE_LOCK_CPU> = 1;

        <com.android.server.power.PowerManagerService: int WAKEFULNESS_DOZING> = 3;

        <com.android.server.power.PowerManagerService: int WAKEFULNESS_DREAMING> = 2;

        <com.android.server.power.PowerManagerService: int WAKEFULNESS_AWAKE> = 1;

        <com.android.server.power.PowerManagerService: int WAKEFULNESS_ASLEEP> = 0;

        <com.android.server.power.PowerManagerService: int DIRTY_DOCK_STATE> = 1024;

        <com.android.server.power.PowerManagerService: int DIRTY_PROXIMITY_POSITIVE> = 512;

        <com.android.server.power.PowerManagerService: int DIRTY_BATTERY_STATE> = 256;

        <com.android.server.power.PowerManagerService: int DIRTY_STAY_ON> = 128;

        <com.android.server.power.PowerManagerService: int DIRTY_IS_POWERED> = 64;

        <com.android.server.power.PowerManagerService: int DIRTY_SETTINGS> = 32;

        <com.android.server.power.PowerManagerService: int DIRTY_BOOT_COMPLETED> = 16;

        <com.android.server.power.PowerManagerService: int DIRTY_ACTUAL_DISPLAY_POWER_STATE_UPDATED> = 8;

        <com.android.server.power.PowerManagerService: int DIRTY_USER_ACTIVITY> = 4;

        <com.android.server.power.PowerManagerService: int DIRTY_WAKEFULNESS> = 2;

        <com.android.server.power.PowerManagerService: int DIRTY_WAKE_LOCKS> = 1;

        <com.android.server.power.PowerManagerService: int MSG_SANDMAN> = 2;

        <com.android.server.power.PowerManagerService: int MSG_USER_ACTIVITY_TIMEOUT> = 1;

        <com.android.server.power.PowerManagerService: boolean DEBUG_SPEW> = 0;

        <com.android.server.power.PowerManagerService: boolean DEBUG> = 0;

        <com.android.server.power.PowerManagerService: java.lang.String TAG> = "PowerManagerService";

        return;
    }
}
