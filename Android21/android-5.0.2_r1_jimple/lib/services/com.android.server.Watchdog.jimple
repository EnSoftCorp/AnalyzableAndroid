public class com.android.server.Watchdog extends java.lang.Thread
{
    static final java.lang.String TAG;
    static final boolean localLOGV;
    static final boolean DB;
    static final boolean RECORD_KERNEL_THREADS;
    static final long DEFAULT_TIMEOUT;
    static final long CHECK_INTERVAL;
    static final int COMPLETED;
    static final int WAITING;
    static final int WAITED_HALF;
    static final int OVERDUE;
    public static final java.lang.String[] NATIVE_STACKS_OF_INTEREST;
    static com.android.server.Watchdog sWatchdog;
    final java.util.ArrayList mHandlerCheckers;
    final com.android.server.Watchdog$HandlerChecker mMonitorChecker;
    android.content.ContentResolver mResolver;
    com.android.server.am.ActivityManagerService mActivity;
    int mPhonePid;
    android.app.IActivityController mController;
    boolean mAllowRestart;

    public static com.android.server.Watchdog getInstance()
    {
        com.android.server.Watchdog $r0, $r1, $r2;

        $r0 = <com.android.server.Watchdog: com.android.server.Watchdog sWatchdog>;

        if $r0 != null goto label1;

        $r2 = new com.android.server.Watchdog;

        specialinvoke $r2.<com.android.server.Watchdog: void <init>()>();

        <com.android.server.Watchdog: com.android.server.Watchdog sWatchdog> = $r2;

     label1:
        $r1 = <com.android.server.Watchdog: com.android.server.Watchdog sWatchdog>;

        return $r1;
    }

    private void <init>()
    {
        com.android.server.Watchdog r0;
        java.util.ArrayList $r1, $r5, $r8, $r11, $r13, $r16;
        com.android.server.Watchdog$HandlerChecker $r2, $r4, $r6, $r10, $r14, $r17;
        android.os.Handler $r3, $r7, $r12, $r15, $r18;
        android.os.Looper $r9;

        r0 := @this: com.android.server.Watchdog;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>("watchdog");

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers> = $r1;

        r0.<com.android.server.Watchdog: boolean mAllowRestart> = 1;

        $r2 = new com.android.server.Watchdog$HandlerChecker;

        $r3 = staticinvoke <com.android.server.FgThread: android.os.Handler getHandler()>();

        specialinvoke $r2.<com.android.server.Watchdog$HandlerChecker: void <init>(com.android.server.Watchdog,android.os.Handler,java.lang.String,long)>(r0, $r3, "foreground thread", 60000L);

        r0.<com.android.server.Watchdog: com.android.server.Watchdog$HandlerChecker mMonitorChecker> = $r2;

        $r5 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r4 = r0.<com.android.server.Watchdog: com.android.server.Watchdog$HandlerChecker mMonitorChecker>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r8 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r6 = new com.android.server.Watchdog$HandlerChecker;

        $r7 = new android.os.Handler;

        $r9 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r7.<android.os.Handler: void <init>(android.os.Looper)>($r9);

        specialinvoke $r6.<com.android.server.Watchdog$HandlerChecker: void <init>(com.android.server.Watchdog,android.os.Handler,java.lang.String,long)>(r0, $r7, "main thread", 60000L);

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        $r11 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r10 = new com.android.server.Watchdog$HandlerChecker;

        $r12 = staticinvoke <com.android.server.UiThread: android.os.Handler getHandler()>();

        specialinvoke $r10.<com.android.server.Watchdog$HandlerChecker: void <init>(com.android.server.Watchdog,android.os.Handler,java.lang.String,long)>(r0, $r12, "ui thread", 60000L);

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        $r13 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r14 = new com.android.server.Watchdog$HandlerChecker;

        $r15 = staticinvoke <com.android.server.IoThread: android.os.Handler getHandler()>();

        specialinvoke $r14.<com.android.server.Watchdog$HandlerChecker: void <init>(com.android.server.Watchdog,android.os.Handler,java.lang.String,long)>(r0, $r15, "i/o thread", 60000L);

        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        $r16 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r17 = new com.android.server.Watchdog$HandlerChecker;

        $r18 = staticinvoke <com.android.server.DisplayThread: android.os.Handler getHandler()>();

        specialinvoke $r17.<com.android.server.Watchdog$HandlerChecker: void <init>(com.android.server.Watchdog,android.os.Handler,java.lang.String,long)>(r0, $r18, "display thread", 60000L);

        virtualinvoke $r16.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

        return;
    }

    public void init(android.content.Context, com.android.server.am.ActivityManagerService)
    {
        com.android.server.Watchdog r0;
        android.content.Context r1;
        com.android.server.am.ActivityManagerService r2;
        android.content.ContentResolver $r3;
        com.android.server.Watchdog$RebootRequestReceiver $r4;
        android.content.IntentFilter $r5;

        r0 := @this: com.android.server.Watchdog;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.am.ActivityManagerService;

        $r3 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.Watchdog: android.content.ContentResolver mResolver> = $r3;

        r0.<com.android.server.Watchdog: com.android.server.am.ActivityManagerService mActivity> = r2;

        $r4 = new com.android.server.Watchdog$RebootRequestReceiver;

        specialinvoke $r4.<com.android.server.Watchdog$RebootRequestReceiver: void <init>(com.android.server.Watchdog)>(r0);

        $r5 = new android.content.IntentFilter;

        specialinvoke $r5.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.REBOOT");

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r4, $r5, "android.permission.REBOOT", null);

        return;
    }

    public void processStarted(java.lang.String, int)
    {
        com.android.server.Watchdog r0, r2;
        java.lang.String r1, $r5;
        int i0;
        java.lang.Throwable r3, $r6;
        boolean $z0;

        r0 := @this: com.android.server.Watchdog;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = r0;

        entermonitor r0;

     label1:
        $r5 = "com.android.phone";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        r0.<com.android.server.Watchdog: int mPhonePid> = i0;

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setActivityController(android.app.IActivityController)
    {
        com.android.server.Watchdog r0, r2;
        android.app.IActivityController r1;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.server.Watchdog;

        r1 := @parameter0: android.app.IActivityController;

        r2 = r0;

        entermonitor r0;

     label1:
        r0.<com.android.server.Watchdog: android.app.IActivityController mController> = r1;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setAllowRestart(boolean)
    {
        com.android.server.Watchdog r0, r1;
        boolean z0;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.Watchdog;

        z0 := @parameter0: boolean;

        r1 = r0;

        entermonitor r0;

     label1:
        r0.<com.android.server.Watchdog: boolean mAllowRestart> = z0;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void addMonitor(com.android.server.Watchdog$Monitor)
    {
        com.android.server.Watchdog r0, r2;
        com.android.server.Watchdog$Monitor r1;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        com.android.server.Watchdog$HandlerChecker $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: com.android.server.Watchdog;

        r1 := @parameter0: com.android.server.Watchdog$Monitor;

        r2 = r0;

        entermonitor r0;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.Watchdog: boolean isAlive()>();

        if $z0 == 0 goto label2;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Monitors can\'t be added once the Watchdog is running");

        throw $r6;

     label2:
        $r5 = r0.<com.android.server.Watchdog: com.android.server.Watchdog$HandlerChecker mMonitorChecker>;

        virtualinvoke $r5.<com.android.server.Watchdog$HandlerChecker: void addMonitor(com.android.server.Watchdog$Monitor)>(r1);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void addThread(android.os.Handler)
    {
        com.android.server.Watchdog r0;
        android.os.Handler r1;

        r0 := @this: com.android.server.Watchdog;

        r1 := @parameter0: android.os.Handler;

        virtualinvoke r0.<com.android.server.Watchdog: void addThread(android.os.Handler,long)>(r1, 60000L);

        return;
    }

    public void addThread(android.os.Handler, long)
    {
        com.android.server.Watchdog r0, r2;
        android.os.Handler r1;
        long l0;
        java.lang.String r3;
        java.lang.Throwable r4, $r10;
        boolean $z0;
        android.os.Looper $r6;
        java.lang.Thread $r7;
        com.android.server.Watchdog$HandlerChecker $r8;
        java.util.ArrayList $r9;
        java.lang.RuntimeException $r11;

        r0 := @this: com.android.server.Watchdog;

        r1 := @parameter0: android.os.Handler;

        l0 := @parameter1: long;

        r2 = r0;

        entermonitor r0;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.Watchdog: boolean isAlive()>();

        if $z0 == 0 goto label2;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Threads can\'t be added once the Watchdog is running");

        throw $r11;

     label2:
        $r6 = virtualinvoke r1.<android.os.Handler: android.os.Looper getLooper()>();

        $r7 = virtualinvoke $r6.<android.os.Looper: java.lang.Thread getThread()>();

        r3 = virtualinvoke $r7.<java.lang.Thread: java.lang.String getName()>();

        $r9 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r8 = new com.android.server.Watchdog$HandlerChecker;

        specialinvoke $r8.<com.android.server.Watchdog$HandlerChecker: void <init>(com.android.server.Watchdog,android.os.Handler,java.lang.String,long)>(r0, r1, r3, l0);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void rebootSystem(java.lang.String)
    {
        com.android.server.Watchdog r0;
        java.lang.String r1, $r7;
        android.os.IPowerManager r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        android.os.IBinder $r8;
        android.os.RemoteException $r9;

        r0 := @this: com.android.server.Watchdog;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rebooting system because: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Watchdog", $r7);

        $r8 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("power");

        r2 = (android.os.IPowerManager) $r8;

     label1:
        interfaceinvoke r2.<android.os.IPowerManager: void reboot(boolean,java.lang.String,boolean)>(0, r1, 0);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private int evaluateCheckerCompletionLocked()
    {
        com.android.server.Watchdog r0;
        int i0, i1, $i2, $i3;
        com.android.server.Watchdog$HandlerChecker r1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.Watchdog;

        i0 = 0;

        i1 = 0;

     label1:
        $r2 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i1 >= $i2 goto label2;

        $r3 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r1 = (com.android.server.Watchdog$HandlerChecker) $r4;

        $i3 = virtualinvoke r1.<com.android.server.Watchdog$HandlerChecker: int getCompletionStateLocked()>();

        i0 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return i0;
    }

    private java.util.ArrayList getBlockedCheckersLocked()
    {
        com.android.server.Watchdog r0;
        java.util.ArrayList r1, $r3, $r4, $r5;
        int i0, $i1;
        com.android.server.Watchdog$HandlerChecker r2;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: com.android.server.Watchdog;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = $r3;

        i0 = 0;

     label1:
        $r4 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label3;

        $r5 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.Watchdog$HandlerChecker) $r6;

        $z0 = virtualinvoke r2.<com.android.server.Watchdog$HandlerChecker: boolean isOverdueLocked()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return r1;
    }

    private java.lang.String describeCheckersLocked(java.util.ArrayList)
    {
        com.android.server.Watchdog r0;
        java.util.ArrayList r1;
        java.lang.StringBuilder r2, $r3;
        int i0, $i1, $i2;
        java.lang.String $r4, $r7;
        java.lang.Object $r5;
        com.android.server.Watchdog$HandlerChecker $r6;

        r0 := @this: com.android.server.Watchdog;

        r1 := @parameter0: java.util.ArrayList;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(128);

        r2 = $r3;

        i0 = 0;

     label1:
        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label3;

        $i2 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r6 = (com.android.server.Watchdog$HandlerChecker) $r5;

        $r7 = virtualinvoke $r6.<com.android.server.Watchdog$HandlerChecker: java.lang.String describeBlockedStateLocked()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i0 = i0 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void run()
    {
        com.android.server.Watchdog r0, r3, r57;
        boolean z0, z1, $z3, $z5, $z6, $z7;
        java.util.ArrayList r1, r7, $r11, $r13, $r38, $r46, r52;
        java.lang.String r2, $r22, $r27, $r30, $r37, $r48;
        int i0, i2, $i3, $i6, $i7, $i9, $i11, $i18, $i20, i27, i28, i29, i30, i31;
        long l1, $l22, $l23, l26;
        java.io.FileWriter r4, $r16;
        com.android.server.Watchdog$HandlerChecker r5, $r24, $r32;
        java.lang.InterruptedException r6, $r43, $r47;
        java.lang.Throwable r8, r9, $r45, $r51;
        java.lang.StackTraceElement r10;
        byte $b4;
        java.lang.Integer $r14, $r39, $r40;
        java.lang.String[] $r15, $r42;
        com.android.server.Watchdog$1 $r17, r55;
        java.lang.StringBuilder $r19, $r21, $r23, $r26, $r28, $r29, $r34, $r35, $r36;
        java.lang.Object $r25, $r33, $r44;
        java.lang.Thread $r31;
        java.io.IOException $r49, r54;
        android.os.RemoteException $r50;
        java.io.File r53;
        android.app.IActivityController r58;
        java.lang.StackTraceElement[] r60, r61;

        r0 := @this: com.android.server.Watchdog;

        z0 = 0;

     label01:
        i0 = 0;

        r3 = r0;

        entermonitor r0;

     label02:
        l1 = 30000L;

        i2 = 0;

     label03:
        $r11 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $i3 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        if i2 >= $i3 goto label04;

        $r46 = r0.<com.android.server.Watchdog: java.util.ArrayList mHandlerCheckers>;

        $r44 = virtualinvoke $r46.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r5 = (com.android.server.Watchdog$HandlerChecker) $r44;

        virtualinvoke r5.<com.android.server.Watchdog$HandlerChecker: void scheduleCheckLocked()>();

        i2 = i2 + 1;

        goto label03;

     label04:
        if i0 <= 0 goto label05;

        i0 = i0 + -1;

     label05:
        l26 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label06:
        $b4 = l1 cmp 0L;

        if $b4 <= 0 goto label12;

        $z7 = staticinvoke <android.os.Debug: boolean isDebuggerConnected()>();

        if $z7 == 0 goto label07;

        i0 = 2;

     label07:
        virtualinvoke r0.<java.lang.Object: void wait(long)>(l1);

     label08:
        goto label10;

     label09:
        $r43 := @caughtexception;

        r6 = $r43;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("Watchdog", r6);

     label10:
        $z6 = staticinvoke <android.os.Debug: boolean isDebuggerConnected()>();

        if $z6 == 0 goto label11;

        i0 = 2;

     label11:
        $l22 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l23 = $l22 - l26;

        l1 = 30000L - $l23;

        goto label06;

     label12:
        i27 = specialinvoke r0.<com.android.server.Watchdog: int evaluateCheckerCompletionLocked()>();

        if i27 != 0 goto label14;

        z0 = 0;

        exitmonitor r3;

     label13:
        goto label01;

     label14:
        if i27 != 1 goto label16;

        exitmonitor r3;

     label15:
        goto label01;

     label16:
        if i27 != 2 goto label19;

        if z0 != 0 goto label17;

        $r38 = new java.util.ArrayList;

        specialinvoke $r38.<java.util.ArrayList: void <init>()>();

        r7 = $r38;

        $i18 = staticinvoke <android.os.Process: int myPid()>();

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

        virtualinvoke r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r40);

        $r42 = <com.android.server.Watchdog: java.lang.String[] NATIVE_STACKS_OF_INTEREST>;

        staticinvoke <com.android.server.am.ActivityManagerService: java.io.File dumpStackTraces(boolean,java.util.ArrayList,com.android.internal.os.ProcessCpuTracker,android.util.SparseArray,java.lang.String[])>(1, r7, null, null, $r42);

        z0 = 1;

     label17:
        exitmonitor r3;

     label18:
        goto label01;

     label19:
        r1 = specialinvoke r0.<com.android.server.Watchdog: java.util.ArrayList getBlockedCheckersLocked()>();

        r2 = specialinvoke r0.<com.android.server.Watchdog: java.lang.String describeCheckersLocked(java.util.ArrayList)>(r1);

        z1 = r0.<com.android.server.Watchdog: boolean mAllowRestart>;

        exitmonitor r3;

     label20:
        goto label23;

     label21:
        $r45 := @caughtexception;

        r8 = $r45;

        exitmonitor r3;

     label22:
        throw r8;

     label23:
        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.String)>(2802, r2);

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r52 = $r13;

        $i6 = staticinvoke <android.os.Process: int myPid()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        virtualinvoke r52.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        $i7 = r0.<com.android.server.Watchdog: int mPhonePid>;

        if $i7 <= 0 goto label24;

        $i20 = r0.<com.android.server.Watchdog: int mPhonePid>;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i20);

        virtualinvoke r52.<java.util.ArrayList: boolean add(java.lang.Object)>($r39);

     label24:
        if z0 != 0 goto label25;

        $z5 = 1;

        goto label26;

     label25:
        $z5 = 0;

     label26:
        $r15 = <com.android.server.Watchdog: java.lang.String[] NATIVE_STACKS_OF_INTEREST>;

        r53 = staticinvoke <com.android.server.am.ActivityManagerService: java.io.File dumpStackTraces(boolean,java.util.ArrayList,com.android.internal.os.ProcessCpuTracker,android.util.SparseArray,java.lang.String[])>($z5, r52, null, null, $r15);

        staticinvoke <android.os.SystemClock: void sleep(long)>(2000L);

        specialinvoke r0.<com.android.server.Watchdog: java.io.File dumpKernelStackTraces()>();

     label27:
        $r16 = new java.io.FileWriter;

        specialinvoke $r16.<java.io.FileWriter: void <init>(java.lang.String)>("/proc/sysrq-trigger");

        r4 = $r16;

        virtualinvoke r4.<java.io.FileWriter: void write(java.lang.String)>("w");

        virtualinvoke r4.<java.io.FileWriter: void close()>();

     label28:
        goto label30;

     label29:
        $r49 := @caughtexception;

        r54 = $r49;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("Watchdog", "Failed to write to /proc/sysrq-trigger");

        $r48 = virtualinvoke r54.<java.io.IOException: java.lang.String getMessage()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("Watchdog", $r48);

     label30:
        $r17 = new com.android.server.Watchdog$1;

        specialinvoke $r17.<com.android.server.Watchdog$1: void <init>(com.android.server.Watchdog,java.lang.String,java.lang.String,java.io.File)>(r0, "watchdogWriteToDropbox", r2, r53);

        r55 = $r17;

        virtualinvoke r55.<java.lang.Thread: void start()>();

     label31:
        virtualinvoke r55.<java.lang.Thread: void join(long)>(2000L);

     label32:
        goto label34;

     label33:
        $r47 := @caughtexception;

     label34:
        r57 = r0;

        entermonitor r0;

     label35:
        r58 = r0.<com.android.server.Watchdog: android.app.IActivityController mController>;

        exitmonitor r57;

     label36:
        goto label39;

     label37:
        $r51 := @caughtexception;

        r9 = $r51;

        exitmonitor r57;

     label38:
        throw r9;

     label39:
        if r58 == null goto label44;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Watchdog", "Reporting stuck state to activity controller");

     label40:
        staticinvoke <android.os.Binder: void setDumpDisabled(java.lang.String)>("Service dumps disabled due to hung system process.");

        i28 = interfaceinvoke r58.<android.app.IActivityController: int systemNotResponding(java.lang.String)>(r2);

        if i28 < 0 goto label42;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Watchdog", "Activity controller requested to coninue to wait");

        z0 = 0;

     label41:
        goto label01;

     label42:
        goto label44;

     label43:
        $r50 := @caughtexception;

     label44:
        $z3 = staticinvoke <android.os.Debug: boolean isDebuggerConnected()>();

        if $z3 == 0 goto label45;

        i0 = 2;

     label45:
        if i0 < 2 goto label46;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("Watchdog", "Debugger connected: Watchdog is *not* killing the system process");

        goto label53;

     label46:
        if i0 <= 0 goto label47;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("Watchdog", "Debugger was connected: Watchdog is *not* killing the system process");

        goto label53;

     label47:
        if z1 != 0 goto label48;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("Watchdog", "Restart not allowed: Watchdog is *not* killing the system process");

        goto label53;

     label48:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** WATCHDOG KILLING SYSTEM PROCESS: ");

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("Watchdog", $r22);

        i29 = 0;

     label49:
        $i11 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i29 >= $i11 goto label52;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i29);

        $r24 = (com.android.server.Watchdog$HandlerChecker) $r25;

        $r30 = virtualinvoke $r24.<com.android.server.Watchdog$HandlerChecker: java.lang.String getName()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stack trace:");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("Watchdog", $r27);

        $r33 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i29);

        $r32 = (com.android.server.Watchdog$HandlerChecker) $r33;

        $r31 = virtualinvoke $r32.<com.android.server.Watchdog$HandlerChecker: java.lang.Thread getThread()>();

        r60 = virtualinvoke $r31.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        r61 = r60;

        i30 = lengthof r61;

        i31 = 0;

     label50:
        if i31 >= i30 goto label51;

        r10 = r61[i31];

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    at ");

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("Watchdog", $r37);

        i31 = i31 + 1;

        goto label50;

     label51:
        i29 = i29 + 1;

        goto label49;

     label52:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("Watchdog", "*** GOODBYE!");

        $i9 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i9);

        staticinvoke <java.lang.System: void exit(int)>(10);

     label53:
        z0 = 0;

        goto label01;

        catch java.lang.InterruptedException from label07 to label08 with label09;
        catch java.lang.Throwable from label02 to label13 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label16 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
        catch java.io.IOException from label27 to label28 with label29;
        catch java.lang.InterruptedException from label31 to label32 with label33;
        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.lang.Throwable from label37 to label38 with label37;
        catch android.os.RemoteException from label40 to label41 with label43;
    }

    private java.io.File dumpKernelStackTraces()
    {
        com.android.server.Watchdog r0;
        java.lang.String r1;
        int $i0;
        java.io.File $r2;

        r0 := @this: com.android.server.Watchdog;

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("dalvik.vm.stack-trace-file", null);

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        specialinvoke r0.<com.android.server.Watchdog: void native_dumpKernelStacks(java.lang.String)>(r1);

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1);

        return $r2;
    }

    private native void native_dumpKernelStacks(java.lang.String);

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <com.android.server.Watchdog: int OVERDUE> = 3;

        <com.android.server.Watchdog: int WAITED_HALF> = 2;

        <com.android.server.Watchdog: int WAITING> = 1;

        <com.android.server.Watchdog: int COMPLETED> = 0;

        <com.android.server.Watchdog: long CHECK_INTERVAL> = 30000L;

        <com.android.server.Watchdog: long DEFAULT_TIMEOUT> = 60000L;

        <com.android.server.Watchdog: boolean RECORD_KERNEL_THREADS> = 1;

        <com.android.server.Watchdog: boolean DB> = 0;

        <com.android.server.Watchdog: boolean localLOGV> = 0;

        <com.android.server.Watchdog: java.lang.String TAG> = "Watchdog";

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "/system/bin/mediaserver";

        $r0[1] = "/system/bin/sdcard";

        $r0[2] = "/system/bin/surfaceflinger";

        <com.android.server.Watchdog: java.lang.String[] NATIVE_STACKS_OF_INTEREST> = $r0;

        return;
    }
}
