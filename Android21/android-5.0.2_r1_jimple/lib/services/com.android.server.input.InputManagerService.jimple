public class com.android.server.input.InputManagerService extends android.hardware.input.IInputManager$Stub implements com.android.server.Watchdog$Monitor
{
    static final java.lang.String TAG;
    static final boolean DEBUG;
    private static final java.lang.String EXCLUDED_DEVICES_PATH;
    private static final int MSG_DELIVER_INPUT_DEVICES_CHANGED;
    private static final int MSG_SWITCH_KEYBOARD_LAYOUT;
    private static final int MSG_RELOAD_KEYBOARD_LAYOUTS;
    private static final int MSG_UPDATE_KEYBOARD_LAYOUTS;
    private static final int MSG_RELOAD_DEVICE_ALIASES;
    private final long mPtr;
    private final android.content.Context mContext;
    private final com.android.server.input.InputManagerService$InputManagerHandler mHandler;
    private com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks;
    private com.android.server.input.InputManagerService$WiredAccessoryCallbacks mWiredAccessoryCallbacks;
    private boolean mSystemReady;
    private android.app.NotificationManager mNotificationManager;
    private final com.android.server.input.PersistentDataStore mDataStore;
    private java.lang.Object mInputDevicesLock;
    private boolean mInputDevicesChangedPending;
    private android.view.InputDevice[] mInputDevices;
    private final android.util.SparseArray mInputDevicesChangedListeners;
    private final java.util.ArrayList mTempInputDevicesChangedListenersToNotify;
    private final java.util.ArrayList mTempFullKeyboards;
    private boolean mKeyboardLayoutNotificationShown;
    private android.app.PendingIntent mKeyboardLayoutIntent;
    private android.widget.Toast mSwitchedKeyboardLayoutToast;
    private java.lang.Object mVibratorLock;
    private java.util.HashMap mVibratorTokens;
    private int mNextVibratorTokenValue;
    final java.lang.Object mInputFilterLock;
    android.view.IInputFilter mInputFilter;
    com.android.server.input.InputManagerService$InputFilterHost mInputFilterHost;
    private static final int INPUT_EVENT_INJECTION_SUCCEEDED;
    private static final int INPUT_EVENT_INJECTION_PERMISSION_DENIED;
    private static final int INPUT_EVENT_INJECTION_FAILED;
    private static final int INPUT_EVENT_INJECTION_TIMED_OUT;
    private static final int INJECTION_TIMEOUT_MILLIS;
    public static final int KEY_STATE_UNKNOWN;
    public static final int KEY_STATE_UP;
    public static final int KEY_STATE_DOWN;
    public static final int KEY_STATE_VIRTUAL;
    public static final int BTN_MOUSE;
    public static final int SW_LID;
    public static final int SW_KEYPAD_SLIDE;
    public static final int SW_HEADPHONE_INSERT;
    public static final int SW_MICROPHONE_INSERT;
    public static final int SW_LINEOUT_INSERT;
    public static final int SW_JACK_PHYSICAL_INSERT;
    public static final int SW_CAMERA_LENS_COVER;
    public static final int SW_LID_BIT;
    public static final int SW_KEYPAD_SLIDE_BIT;
    public static final int SW_HEADPHONE_INSERT_BIT;
    public static final int SW_MICROPHONE_INSERT_BIT;
    public static final int SW_LINEOUT_INSERT_BIT;
    public static final int SW_JACK_PHYSICAL_INSERT_BIT;
    public static final int SW_JACK_BITS;
    public static final int SW_CAMERA_LENS_COVER_BIT;
    final boolean mUseDevInputEventForAudioJack;

    private static native long nativeInit(com.android.server.input.InputManagerService, android.content.Context, android.os.MessageQueue);

    private static native void nativeStart(long);

    private static native void nativeSetDisplayViewport(long, boolean, int, int, int, int, int, int, int, int, int, int, int, int);

    private static native int nativeGetScanCodeState(long, int, int, int);

    private static native int nativeGetKeyCodeState(long, int, int, int);

    private static native int nativeGetSwitchState(long, int, int, int);

    private static native boolean nativeHasKeys(long, int, int, int[], boolean[]);

    private static native void nativeRegisterInputChannel(long, android.view.InputChannel, com.android.server.input.InputWindowHandle, boolean);

    private static native void nativeUnregisterInputChannel(long, android.view.InputChannel);

    private static native void nativeSetInputFilterEnabled(long, boolean);

    private static native int nativeInjectInputEvent(long, android.view.InputEvent, int, int, int, int, int, int);

    private static native void nativeSetInputWindows(long, com.android.server.input.InputWindowHandle[]);

    private static native void nativeSetInputDispatchMode(long, boolean, boolean);

    private static native void nativeSetSystemUiVisibility(long, int);

    private static native void nativeSetFocusedApplication(long, com.android.server.input.InputApplicationHandle);

    private static native boolean nativeTransferTouchFocus(long, android.view.InputChannel, android.view.InputChannel);

    private static native void nativeSetPointerSpeed(long, int);

    private static native void nativeSetShowTouches(long, boolean);

    private static native void nativeSetInteractive(long, boolean);

    private static native void nativeReloadCalibration(long);

    private static native void nativeVibrate(long, int, long[], int, int);

    private static native void nativeCancelVibrate(long, int, int);

    private static native void nativeReloadKeyboardLayouts(long);

    private static native void nativeReloadDeviceAliases(long);

    private static native java.lang.String nativeDump(long);

    private static native void nativeMonitor(long);

    public void <init>(android.content.Context)
    {
        com.android.server.input.InputManagerService r0;
        android.content.Context r1, $r21;
        com.android.server.input.PersistentDataStore $r2;
        java.lang.Object $r3, $r8, $r10;
        android.view.InputDevice[] $r4;
        android.util.SparseArray $r5;
        java.util.ArrayList $r6, $r7;
        java.util.HashMap $r9;
        com.android.server.input.InputManagerService$InputManagerHandler $r11, $r19;
        com.android.server.DisplayThread $r12;
        android.os.Looper $r13, $r20;
        android.content.res.Resources $r14;
        boolean $z0, $z1;
        java.lang.StringBuilder $r15, $r16, $r18;
        java.lang.String $r17;
        long $l1;
        android.os.MessageQueue $r22;
        com.android.server.input.InputManagerService$LocalService $r23;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.hardware.input.IInputManager$Stub: void <init>()>();

        $r2 = new com.android.server.input.PersistentDataStore;

        specialinvoke $r2.<com.android.server.input.PersistentDataStore: void <init>()>();

        r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock> = $r3;

        $r4 = newarray (android.view.InputDevice)[0];

        r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices> = $r4;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.input.InputManagerService: android.util.SparseArray mInputDevicesChangedListeners> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempInputDevicesChangedListenersToNotify> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempFullKeyboards> = $r7;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.lang.Object mVibratorLock> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.util.HashMap mVibratorTokens> = $r9;

        $r10 = new java.lang.Object;

        specialinvoke $r10.<java.lang.Object: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.lang.Object mInputFilterLock> = $r10;

        r0.<com.android.server.input.InputManagerService: android.content.Context mContext> = r1;

        $r11 = new com.android.server.input.InputManagerService$InputManagerHandler;

        $r12 = staticinvoke <com.android.server.DisplayThread: com.android.server.DisplayThread get()>();

        $r13 = virtualinvoke $r12.<com.android.server.DisplayThread: android.os.Looper getLooper()>();

        specialinvoke $r11.<com.android.server.input.InputManagerService$InputManagerHandler: void <init>(com.android.server.input.InputManagerService,android.os.Looper)>(r0, $r13);

        r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler> = $r11;

        $r14 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r14.<android.content.res.Resources: boolean getBoolean(int)>(17956960);

        r0.<com.android.server.input.InputManagerService: boolean mUseDevInputEventForAudioJack> = $z0;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Initializing input manager, mUseDevInputEventForAudioJack=");

        $z1 = r0.<com.android.server.input.InputManagerService: boolean mUseDevInputEventForAudioJack>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("InputManager", $r17);

        $r21 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r19 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        $r20 = virtualinvoke $r19.<com.android.server.input.InputManagerService$InputManagerHandler: android.os.Looper getLooper()>();

        $r22 = virtualinvoke $r20.<android.os.Looper: android.os.MessageQueue getQueue()>();

        $l1 = staticinvoke <com.android.server.input.InputManagerService: long nativeInit(com.android.server.input.InputManagerService,android.content.Context,android.os.MessageQueue)>(r0, $r21, $r22);

        r0.<com.android.server.input.InputManagerService: long mPtr> = $l1;

        $r23 = new com.android.server.input.InputManagerService$LocalService;

        specialinvoke $r23.<com.android.server.input.InputManagerService$LocalService: void <init>(com.android.server.input.InputManagerService,com.android.server.input.InputManagerService$1)>(r0, null);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "android/hardware/input/InputManagerInternal", $r23);

        return;
    }

    public void setWindowManagerCallbacks(com.android.server.input.InputManagerService$WindowManagerCallbacks)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputManagerService$WindowManagerCallbacks r1;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputManagerService$WindowManagerCallbacks;

        r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks> = r1;

        return;
    }

    public void setWiredAccessoryCallbacks(com.android.server.input.InputManagerService$WiredAccessoryCallbacks)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputManagerService$WiredAccessoryCallbacks r1;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputManagerService$WiredAccessoryCallbacks;

        r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WiredAccessoryCallbacks mWiredAccessoryCallbacks> = r1;

        return;
    }

    public void start()
    {
        com.android.server.input.InputManagerService r0;
        long $l1;
        com.android.server.Watchdog $r1;
        com.android.server.input.InputManagerService$1 $r2;
        android.content.Context $r3;
        android.content.IntentFilter $r4;
        com.android.server.input.InputManagerService$InputManagerHandler $r5;

        r0 := @this: com.android.server.input.InputManagerService;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("InputManager", "Starting input manager");

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeStart(long)>($l1);

        $r1 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r1.<com.android.server.Watchdog: void addMonitor(com.android.server.Watchdog$Monitor)>(r0);

        specialinvoke r0.<com.android.server.input.InputManagerService: void registerPointerSpeedSettingObserver()>();

        specialinvoke r0.<com.android.server.input.InputManagerService: void registerShowTouchesSettingObserver()>();

        $r3 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r2 = new com.android.server.input.InputManagerService$1;

        specialinvoke $r2.<com.android.server.input.InputManagerService$1: void <init>(com.android.server.input.InputManagerService)>(r0);

        $r4 = new android.content.IntentFilter;

        specialinvoke $r4.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_SWITCHED");

        $r5 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r3.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r2, $r4, null, $r5);

        virtualinvoke r0.<com.android.server.input.InputManagerService: void updatePointerSpeedFromSettings()>();

        virtualinvoke r0.<com.android.server.input.InputManagerService: void updateShowTouchesFromSettings()>();

        return;
    }

    public void systemRunning()
    {
        com.android.server.input.InputManagerService r0;
        android.content.IntentFilter r1, $r5, $r10, r19;
        android.content.Context $r2, $r7, $r12;
        java.lang.Object $r3;
        android.app.NotificationManager $r4;
        com.android.server.input.InputManagerService$2 $r6;
        com.android.server.input.InputManagerService$InputManagerHandler $r8, $r13, $r15, $r16;
        com.android.server.input.InputManagerService$3 $r11;
        com.android.server.input.InputManagerService$WiredAccessoryCallbacks $r17, $r18;

        r0 := @this: com.android.server.input.InputManagerService;

        $r2 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r4 = (android.app.NotificationManager) $r3;

        r0.<com.android.server.input.InputManagerService: android.app.NotificationManager mNotificationManager> = $r4;

        r0.<com.android.server.input.InputManagerService: boolean mSystemReady> = 1;

        $r5 = new android.content.IntentFilter;

        specialinvoke $r5.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        r1 = $r5;

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_CHANGED");

        virtualinvoke r1.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REPLACED");

        virtualinvoke r1.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r7 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r6 = new com.android.server.input.InputManagerService$2;

        specialinvoke $r6.<com.android.server.input.InputManagerService$2: void <init>(com.android.server.input.InputManagerService)>(r0);

        $r8 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r7.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r6, r1, null, $r8);

        $r10 = new android.content.IntentFilter;

        specialinvoke $r10.<android.content.IntentFilter: void <init>(java.lang.String)>("android.bluetooth.device.action.ALIAS_CHANGED");

        r19 = $r10;

        $r12 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r11 = new com.android.server.input.InputManagerService$3;

        specialinvoke $r11.<com.android.server.input.InputManagerService$3: void <init>(com.android.server.input.InputManagerService)>(r0);

        $r13 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r12.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r11, r19, null, $r13);

        $r15 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r15.<com.android.server.input.InputManagerService$InputManagerHandler: boolean sendEmptyMessage(int)>(5);

        $r16 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r16.<com.android.server.input.InputManagerService$InputManagerHandler: boolean sendEmptyMessage(int)>(4);

        $r17 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WiredAccessoryCallbacks mWiredAccessoryCallbacks>;

        if $r17 == null goto label1;

        $r18 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WiredAccessoryCallbacks mWiredAccessoryCallbacks>;

        interfaceinvoke $r18.<com.android.server.input.InputManagerService$WiredAccessoryCallbacks: void systemReady()>();

     label1:
        return;
    }

    private void reloadKeyboardLayouts()
    {
        com.android.server.input.InputManagerService r0;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeReloadKeyboardLayouts(long)>($l0);

        return;
    }

    private void reloadDeviceAliases()
    {
        com.android.server.input.InputManagerService r0;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeReloadDeviceAliases(long)>($l0);

        return;
    }

    private void setDisplayViewportsInternal(android.hardware.display.DisplayViewport, android.hardware.display.DisplayViewport)
    {
        com.android.server.input.InputManagerService r0;
        android.hardware.display.DisplayViewport r1, r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.hardware.display.DisplayViewport;

        r2 := @parameter1: android.hardware.display.DisplayViewport;

        $z0 = r1.<android.hardware.display.DisplayViewport: boolean valid>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.input.InputManagerService: void setDisplayViewport(boolean,android.hardware.display.DisplayViewport)>(0, r1);

     label1:
        $z1 = r2.<android.hardware.display.DisplayViewport: boolean valid>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.input.InputManagerService: void setDisplayViewport(boolean,android.hardware.display.DisplayViewport)>(1, r2);

        goto label3;

     label2:
        $z2 = r1.<android.hardware.display.DisplayViewport: boolean valid>;

        if $z2 == 0 goto label3;

        specialinvoke r0.<com.android.server.input.InputManagerService: void setDisplayViewport(boolean,android.hardware.display.DisplayViewport)>(1, r1);

     label3:
        return;
    }

    private void setDisplayViewport(boolean, android.hardware.display.DisplayViewport)
    {
        com.android.server.input.InputManagerService r0;
        boolean z0;
        android.hardware.display.DisplayViewport r1;
        android.graphics.Rect $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        long $l11;

        r0 := @this: com.android.server.input.InputManagerService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.hardware.display.DisplayViewport;

        $l11 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $i12 = r1.<android.hardware.display.DisplayViewport: int displayId>;

        $i9 = r1.<android.hardware.display.DisplayViewport: int orientation>;

        $r2 = r1.<android.hardware.display.DisplayViewport: android.graphics.Rect logicalFrame>;

        $i10 = $r2.<android.graphics.Rect: int left>;

        $r3 = r1.<android.hardware.display.DisplayViewport: android.graphics.Rect logicalFrame>;

        $i7 = $r3.<android.graphics.Rect: int top>;

        $r4 = r1.<android.hardware.display.DisplayViewport: android.graphics.Rect logicalFrame>;

        $i8 = $r4.<android.graphics.Rect: int right>;

        $r5 = r1.<android.hardware.display.DisplayViewport: android.graphics.Rect logicalFrame>;

        $i5 = $r5.<android.graphics.Rect: int bottom>;

        $r6 = r1.<android.hardware.display.DisplayViewport: android.graphics.Rect physicalFrame>;

        $i6 = $r6.<android.graphics.Rect: int left>;

        $r7 = r1.<android.hardware.display.DisplayViewport: android.graphics.Rect physicalFrame>;

        $i4 = $r7.<android.graphics.Rect: int top>;

        $r8 = r1.<android.hardware.display.DisplayViewport: android.graphics.Rect physicalFrame>;

        $i3 = $r8.<android.graphics.Rect: int right>;

        $r9 = r1.<android.hardware.display.DisplayViewport: android.graphics.Rect physicalFrame>;

        $i2 = $r9.<android.graphics.Rect: int bottom>;

        $i1 = r1.<android.hardware.display.DisplayViewport: int deviceWidth>;

        $i0 = r1.<android.hardware.display.DisplayViewport: int deviceHeight>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetDisplayViewport(long,boolean,int,int,int,int,int,int,int,int,int,int,int,int)>($l11, z0, $i12, $i9, $i10, $i7, $i8, $i5, $i6, $i4, $i3, $i2, $i1, $i0);

        return;
    }

    public int getKeyCodeState(int, int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, i2, $i4;
        long $l3;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $l3 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $i4 = staticinvoke <com.android.server.input.InputManagerService: int nativeGetKeyCodeState(long,int,int,int)>($l3, i0, i1, i2);

        return $i4;
    }

    public int getScanCodeState(int, int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, i2, $i4;
        long $l3;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $l3 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $i4 = staticinvoke <com.android.server.input.InputManagerService: int nativeGetScanCodeState(long,int,int,int)>($l3, i0, i1, i2);

        return $i4;
    }

    public int getSwitchState(int, int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, i2, $i4;
        long $l3;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $l3 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $i4 = staticinvoke <com.android.server.input.InputManagerService: int nativeGetSwitchState(long,int,int,int)>($l3, i0, i1, i2);

        return $i4;
    }

    public boolean hasKeys(int, int, int[], boolean[])
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, $i2, $i3;
        int[] r1;
        boolean[] r2;
        java.lang.IllegalArgumentException $r3, $r4;
        long $l4;
        boolean $z0;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: boolean[];

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyCodes must not be null.");

        throw $r4;

     label1:
        if r2 == null goto label2;

        $i3 = lengthof r2;

        $i2 = lengthof r1;

        if $i3 >= $i2 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyExists must not be null and must be at least as large as keyCodes.");

        throw $r3;

     label3:
        $l4 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $z0 = staticinvoke <com.android.server.input.InputManagerService: boolean nativeHasKeys(long,int,int,int[],boolean[])>($l4, i0, i1, r1, r2);

        return $z0;
    }

    public android.view.InputChannel monitorInput(java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1;
        android.view.InputChannel[] r2;
        android.view.InputChannel $r3, $r4, $r5;
        long $l0;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputChannelName must not be null.");

        throw $r6;

     label1:
        r2 = staticinvoke <android.view.InputChannel: android.view.InputChannel[] openInputChannelPair(java.lang.String)>(r1);

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $r3 = r2[0];

        staticinvoke <com.android.server.input.InputManagerService: void nativeRegisterInputChannel(long,android.view.InputChannel,com.android.server.input.InputWindowHandle,boolean)>($l0, $r3, null, 1);

        $r4 = r2[0];

        virtualinvoke $r4.<android.view.InputChannel: void dispose()>();

        $r5 = r2[1];

        return $r5;
    }

    public void registerInputChannel(android.view.InputChannel, com.android.server.input.InputWindowHandle)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputChannel r1;
        com.android.server.input.InputWindowHandle r2;
        long $l0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputChannel;

        r2 := @parameter1: com.android.server.input.InputWindowHandle;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputChannel must not be null.");

        throw $r3;

     label1:
        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeRegisterInputChannel(long,android.view.InputChannel,com.android.server.input.InputWindowHandle,boolean)>($l0, r1, r2, 0);

        return;
    }

    public void unregisterInputChannel(android.view.InputChannel)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputChannel r1;
        long $l0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputChannel;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputChannel must not be null.");

        throw $r2;

     label1:
        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeUnregisterInputChannel(long,android.view.InputChannel)>($l0, r1);

        return;
    }

    public void setInputFilter(android.view.IInputFilter)
    {
        com.android.server.input.InputManagerService r0;
        android.view.IInputFilter r1, r3;
        java.lang.Object r2, $r6;
        java.lang.Throwable r5, $r10;
        long $l0;
        boolean $z0;
        com.android.server.input.InputManagerService$InputFilterHost $r7, $r8, $r9;
        android.os.RemoteException $r11, $r12;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.IInputFilter;

        $r6 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputFilterLock>;

        r2 = $r6;

        entermonitor $r6;

     label01:
        r3 = r0.<com.android.server.input.InputManagerService: android.view.IInputFilter mInputFilter>;

        if r3 != r1 goto label03;

        exitmonitor r2;

     label02:
        return;

     label03:
        if r3 == null goto label07;

        r0.<com.android.server.input.InputManagerService: android.view.IInputFilter mInputFilter> = null;

        $r9 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputFilterHost mInputFilterHost>;

        virtualinvoke $r9.<com.android.server.input.InputManagerService$InputFilterHost: void disconnectLocked()>();

        r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputFilterHost mInputFilterHost> = null;

     label04:
        interfaceinvoke r3.<android.view.IInputFilter: void uninstall()>();

     label05:
        goto label07;

     label06:
        $r12 := @caughtexception;

     label07:
        if r1 == null goto label11;

        r0.<com.android.server.input.InputManagerService: android.view.IInputFilter mInputFilter> = r1;

        $r7 = new com.android.server.input.InputManagerService$InputFilterHost;

        specialinvoke $r7.<com.android.server.input.InputManagerService$InputFilterHost: void <init>(com.android.server.input.InputManagerService,com.android.server.input.InputManagerService$1)>(r0, null);

        r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputFilterHost mInputFilterHost> = $r7;

     label08:
        $r8 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputFilterHost mInputFilterHost>;

        interfaceinvoke r1.<android.view.IInputFilter: void install(android.view.IInputFilterHost)>($r8);

     label09:
        goto label11;

     label10:
        $r11 := @caughtexception;

     label11:
        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        if r1 == null goto label12;

        $z0 = 1;

        goto label13;

     label12:
        $z0 = 0;

     label13:
        staticinvoke <com.android.server.input.InputManagerService: void nativeSetInputFilterEnabled(long,boolean)>($l0, $z0);

        exitmonitor r2;

     label14:
        goto label17;

     label15:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r2;

     label16:
        throw r5;

     label17:
        return;

        catch android.os.RemoteException from label04 to label05 with label06;
        catch android.os.RemoteException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public boolean injectInputEvent(android.view.InputEvent, int)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputEvent r1;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputEvent;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean injectInputEventInternal(android.view.InputEvent,int,int)>(r1, 0, i0);

        return $z0;
    }

    private boolean injectInputEventInternal(android.view.InputEvent, int, int)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputEvent r1;
        int i0, i1, i2, i3, i5;
        long l4, $l6;
        java.lang.Throwable r2, $r20;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r10, $r11, $r12, $r14, $r15, $r17, $r18;
        java.lang.String $r7, $r13, $r16;
        java.lang.SecurityException $r9;
        java.lang.IllegalArgumentException $r19, $r21;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputEvent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label01;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("event must not be null");

        throw $r19;

     label01:
        if i1 == 0 goto label02;

        if i1 == 2 goto label02;

        if i1 == 1 goto label02;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mode is invalid");

        throw $r21;

     label02:
        i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $l6 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        i5 = staticinvoke <com.android.server.input.InputManagerService: int nativeInjectInputEvent(long,android.view.InputEvent,int,int,int,int,int,int)>($l6, r1, i0, i2, i3, i1, 30000, 134217728);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        goto label07;

     label05:
        $r20 := @caughtexception;

        r2 = $r20;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        throw r2;

     label07:
        tableswitch(i5)
        {
            case 0: goto label09;
            case 1: goto label08;
            case 2: goto label11;
            case 3: goto label10;
            default: goto label11;
        };

     label08:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input event injection from pid ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" permission denied.");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("InputManager", $r7);

        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("Injecting to another application requires INJECT_EVENTS permission");

        throw $r9;

     label09:
        return 1;

     label10:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input event injection from pid ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timed out.");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("InputManager", $r13);

        return 0;

     label11:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input event injection from pid ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("InputManager", $r16);

        return 0;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    public android.view.InputDevice getInputDevice(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, i2, $i3;
        java.lang.Object r1, $r4;
        android.view.InputDevice r2;
        java.lang.Throwable r3, $r7;
        android.view.InputDevice[] $r5, $r6;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        i1 = lengthof $r5;

        i2 = 0;

     label2:
        if i2 >= i1 goto label5;

        $r6 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        r2 = $r6[i2];

        $i3 = virtualinvoke r2.<android.view.InputDevice: int getId()>();

        if $i3 != i0 goto label4;

        exitmonitor r1;

     label3:
        return r2;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        return null;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int[] getInputDeviceIds()
    {
        com.android.server.input.InputManagerService r0;
        java.lang.Object r1, $r4;
        int i0, i1, $i2;
        int[] r2;
        java.lang.Throwable r3, $r8;
        android.view.InputDevice[] $r5, $r6;
        android.view.InputDevice $r7;

        r0 := @this: com.android.server.input.InputManagerService;

        $r4 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        i0 = lengthof $r5;

        r2 = newarray (int)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r6 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        $r7 = $r6[i1];

        $i2 = virtualinvoke $r7.<android.view.InputDevice: int getId()>();

        r2[i1] = $i2;

        i1 = i1 + 1;

        goto label2;

     label3:
        exitmonitor r1;

     label4:
        return r2;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r1;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public android.view.InputDevice[] getInputDevices()
    {
        com.android.server.input.InputManagerService r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        android.view.InputDevice[] $r4;

        r0 := @this: com.android.server.input.InputManagerService;

        $r3 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)
    {
        com.android.server.input.InputManagerService r0;
        android.hardware.input.IInputDevicesChangedListener r1;
        java.lang.Object r2, $r6, $r8;
        int i0;
        com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord r3, $r9;
        android.os.IBinder r4;
        java.lang.Throwable r5, $r12;
        android.util.SparseArray $r7, $r10;
        java.lang.SecurityException $r11;
        java.lang.IllegalArgumentException $r13;
        android.os.RemoteException $r14, r16;
        java.lang.RuntimeException $r15;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.hardware.input.IInputDevicesChangedListener;

        if r1 != null goto label01;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r13;

     label01:
        $r6 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock>;

        r2 = $r6;

        entermonitor $r6;

     label02:
        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r7 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mInputDevicesChangedListeners>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r8 == null goto label03;

        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("The calling process has already registered an InputDevicesChangedListener.");

        throw $r11;

     label03:
        $r9 = new com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord;

        specialinvoke $r9.<com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord: void <init>(com.android.server.input.InputManagerService,int,android.hardware.input.IInputDevicesChangedListener)>(r0, i0, r1);

        r3 = $r9;

     label04:
        r4 = interfaceinvoke r1.<android.hardware.input.IInputDevicesChangedListener: android.os.IBinder asBinder()>();

        interfaceinvoke r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0);

     label05:
        goto label07;

     label06:
        $r14 := @caughtexception;

        r16 = $r14;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r16);

        throw $r15;

     label07:
        $r10 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mInputDevicesChangedListeners>;

        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r3);

        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r12 := @caughtexception;

        r5 = $r12;

        exitmonitor r2;

     label10:
        throw r5;

     label11:
        return;

        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void onInputDevicesChangedListenerDied(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        android.util.SparseArray $r4;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mInputDevicesChangedListeners>;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void deliverInputDevicesChanged(android.view.InputDevice[])
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputDevice[] r1, $r14, $r24;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14;
        int[] r2;
        java.lang.Object r3, $r11, $r22, $r26, $r29;
        android.view.InputDevice r4, r7, r35;
        java.lang.Throwable r5, r9, $r33, $r34;
        com.android.server.input.PersistentDataStore r6, $r19;
        java.lang.String r8, $r27;
        java.util.ArrayList $r10, $r12, $r16, $r17, $r18, $r21, $r25, $r28, $r30, $r32;
        android.util.SparseArray $r13, $r31;
        boolean $z0, $z1, $z2, $z3, $z5, z7, z8, z9;
        android.app.NotificationManager $r15;
        android.hardware.input.InputDeviceIdentifier $r20;
        com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord $r23;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputDevice[];

        i0 = 0;

        $r10 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempInputDevicesChangedListenersToNotify>;

        virtualinvoke $r10.<java.util.ArrayList: void clear()>();

        $r12 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempFullKeyboards>;

        virtualinvoke $r12.<java.util.ArrayList: void clear()>();

        $r11 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock>;

        r3 = $r11;

        entermonitor $r11;

     label01:
        $z0 = r0.<com.android.server.input.InputManagerService: boolean mInputDevicesChangedPending>;

        if $z0 != 0 goto label03;

        exitmonitor r3;

     label02:
        return;

     label03:
        r0.<com.android.server.input.InputManagerService: boolean mInputDevicesChangedPending> = 0;

        $r13 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mInputDevicesChangedListeners>;

        i1 = virtualinvoke $r13.<android.util.SparseArray: int size()>();

        i2 = 0;

     label04:
        if i2 >= i1 goto label05;

        $r30 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempInputDevicesChangedListenersToNotify>;

        $r31 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mInputDevicesChangedListeners>;

        $r29 = virtualinvoke $r31.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        virtualinvoke $r30.<java.util.ArrayList: boolean add(java.lang.Object)>($r29);

        i2 = i2 + 1;

        goto label04;

     label05:
        $r14 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        i12 = lengthof $r14;

        $i5 = i12 * 2;

        r2 = newarray (int)[$i5];

        i3 = 0;

     label06:
        if i3 >= i12 goto label09;

        $r24 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        r4 = $r24[i3];

        $i8 = i3 * 2;

        $i9 = virtualinvoke r4.<android.view.InputDevice: int getId()>();

        r2[$i8] = $i9;

        $i6 = i3 * 2;

        $i7 = $i6 + 1;

        $i10 = virtualinvoke r4.<android.view.InputDevice: int getGeneration()>();

        r2[$i7] = $i10;

        $z3 = virtualinvoke r4.<android.view.InputDevice: boolean isVirtual()>();

        if $z3 != 0 goto label08;

        $z2 = virtualinvoke r4.<android.view.InputDevice: boolean isFullKeyboard()>();

        if $z2 == 0 goto label08;

        $r27 = virtualinvoke r4.<android.view.InputDevice: java.lang.String getDescriptor()>();

        $z5 = staticinvoke <com.android.server.input.InputManagerService: boolean containsInputDeviceWithDescriptor(android.view.InputDevice[],java.lang.String)>(r1, $r27);

        if $z5 != 0 goto label07;

        $r32 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempFullKeyboards>;

        $i11 = i0;

        i0 = i0 + 1;

        virtualinvoke $r32.<java.util.ArrayList: void add(int,java.lang.Object)>($i11, r4);

        goto label08;

     label07:
        $r28 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempFullKeyboards>;

        virtualinvoke $r28.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label08:
        i3 = i3 + 1;

        goto label06;

     label09:
        exitmonitor r3;

     label10:
        goto label13;

     label11:
        $r34 := @caughtexception;

        r5 = $r34;

        exitmonitor r3;

     label12:
        throw r5;

     label13:
        i13 = 0;

     label14:
        if i13 >= i1 goto label15;

        $r25 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempInputDevicesChangedListenersToNotify>;

        $r26 = virtualinvoke $r25.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        $r23 = (com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord) $r26;

        virtualinvoke $r23.<com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord: void notifyInputDevicesChanged(int[])>(r2);

        i13 = i13 + 1;

        goto label14;

     label15:
        $r16 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempInputDevicesChangedListenersToNotify>;

        virtualinvoke $r16.<java.util.ArrayList: void clear()>();

        $r15 = r0.<com.android.server.input.InputManagerService: android.app.NotificationManager mNotificationManager>;

        if $r15 == null goto label27;

        $r17 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempFullKeyboards>;

        i14 = virtualinvoke $r17.<java.util.ArrayList: int size()>();

        z7 = 0;

        z8 = 0;

        z9 = 0;

        r35 = null;

        $r19 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r6 = $r19;

        entermonitor $r19;

     label16:
        i4 = 0;

     label17:
        if i4 >= i14 goto label20;

        $r21 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempFullKeyboards>;

        $r22 = virtualinvoke $r21.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r7 = (android.view.InputDevice) $r22;

        $r20 = virtualinvoke r7.<android.view.InputDevice: android.hardware.input.InputDeviceIdentifier getIdentifier()>();

        r8 = virtualinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)>($r20);

        if r8 != null goto label19;

        z7 = 1;

        if i4 >= i0 goto label19;

        z8 = 1;

        if r35 != null goto label18;

        r35 = r7;

        goto label19;

     label18:
        z9 = 1;

     label19:
        i4 = i4 + 1;

        goto label17;

     label20:
        exitmonitor r6;

     label21:
        goto label24;

     label22:
        $r33 := @caughtexception;

        r9 = $r33;

        exitmonitor r6;

     label23:
        throw r9;

     label24:
        if z7 == 0 goto label26;

        if z8 == 0 goto label27;

        if z9 == 0 goto label25;

        specialinvoke r0.<com.android.server.input.InputManagerService: void showMissingKeyboardLayoutNotification(android.view.InputDevice)>(null);

        goto label27;

     label25:
        specialinvoke r0.<com.android.server.input.InputManagerService: void showMissingKeyboardLayoutNotification(android.view.InputDevice)>(r35);

        goto label27;

     label26:
        $z1 = r0.<com.android.server.input.InputManagerService: boolean mKeyboardLayoutNotificationShown>;

        if $z1 == 0 goto label27;

        specialinvoke r0.<com.android.server.input.InputManagerService: void hideMissingKeyboardLayoutNotification()>();

     label27:
        $r18 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempFullKeyboards>;

        virtualinvoke $r18.<java.util.ArrayList: void clear()>();

        return;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label16 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    public android.hardware.input.TouchCalibration getTouchCalibrationForInputDevice(java.lang.String, int)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1;
        int i0;
        com.android.server.input.PersistentDataStore r2, $r4, $r5;
        java.lang.Throwable r3, $r8;
        android.hardware.input.TouchCalibration $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputDeviceDescriptor must not be null");

        throw $r7;

     label1:
        $r4 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r6 = virtualinvoke $r5.<com.android.server.input.PersistentDataStore: android.hardware.input.TouchCalibration getTouchCalibration(java.lang.String,int)>(r1, i0);

        exitmonitor r2;

     label3:
        return $r6;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setTouchCalibrationForInputDevice(java.lang.String, int, android.hardware.input.TouchCalibration)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1;
        int i0;
        android.hardware.input.TouchCalibration r2;
        com.android.server.input.PersistentDataStore r3, $r7, $r8, $r9, $r13;
        java.lang.Throwable r4, r5, $r14, $r15;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r6, $r10, $r12;
        long $l1;
        java.lang.SecurityException $r11;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.hardware.input.TouchCalibration;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_INPUT_CALIBRATION", "setTouchCalibrationForInputDevice()");

        if $z0 != 0 goto label01;

        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_INPUT_CALIBRATION permission");

        throw $r11;

     label01:
        if r1 != null goto label02;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputDeviceDescriptor must not be null");

        throw $r12;

     label02:
        if r2 != null goto label03;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("calibration must not be null");

        throw $r10;

     label03:
        if i0 < 0 goto label04;

        if i0 <= 3 goto label05;

     label04:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("surfaceRotation value out of bounds");

        throw $r6;

     label05:
        $r7 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r3 = $r7;

        entermonitor $r7;

     label06:
        $r8 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $z1 = virtualinvoke $r8.<com.android.server.input.PersistentDataStore: boolean setTouchCalibration(java.lang.String,int,android.hardware.input.TouchCalibration)>(r1, i0, r2);

        if $z1 == 0 goto label07;

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeReloadCalibration(long)>($l1);

     label07:
        $r9 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r9.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

        goto label10;

     label08:
        $r14 := @caughtexception;

        r4 = $r14;

     label09:
        $r13 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r13.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

        throw r4;

     label10:
        exitmonitor r3;

     label11:
        goto label14;

     label12:
        $r15 := @caughtexception;

        r5 = $r15;

        exitmonitor r3;

     label13:
        throw r5;

     label14:
        return;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label06 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private void showMissingKeyboardLayoutNotification(android.view.InputDevice)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputDevice r1;
        android.content.Intent r2, $r6;
        android.app.PendingIntent r3;
        android.content.res.Resources r4, $r21;
        android.app.Notification r5;
        boolean $z0;
        android.os.UserHandle $r8, $r24;
        android.content.Context $r9, $r10, $r12, $r19;
        android.app.Notification$Builder $r11, $r13, $r15, $r17, $r18, $r20, $r22;
        java.lang.String $r14, $r16;
        int $i0;
        android.app.NotificationManager $r23;
        android.hardware.input.InputDeviceIdentifier $r25;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputDevice;

        $z0 = r0.<com.android.server.input.InputManagerService: boolean mKeyboardLayoutNotificationShown>;

        if $z0 != 0 goto label2;

        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(java.lang.String)>("android.settings.INPUT_METHOD_SETTINGS");

        r2 = $r6;

        if r1 == null goto label1;

        $r25 = virtualinvoke r1.<android.view.InputDevice: android.hardware.input.InputDeviceIdentifier getIdentifier()>();

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("input_device_identifier", $r25);

     label1:
        virtualinvoke r2.<android.content.Intent: android.content.Intent setFlags(int)>(337641472);

        $r9 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r8 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        r3 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r9, 0, r2, 0, null, $r8);

        $r10 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        r4 = virtualinvoke $r10.<android.content.Context: android.content.res.Resources getResources()>();

        $r11 = new android.app.Notification$Builder;

        $r12 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        specialinvoke $r11.<android.app.Notification$Builder: void <init>(android.content.Context)>($r12);

        $r14 = virtualinvoke r4.<android.content.res.Resources: java.lang.String getString(int)>(17040629);

        $r13 = virtualinvoke $r11.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>($r14);

        $r16 = virtualinvoke r4.<android.content.res.Resources: java.lang.String getString(int)>(17040630);

        $r15 = virtualinvoke $r13.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>($r16);

        $r18 = virtualinvoke $r15.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>(r3);

        $r17 = virtualinvoke $r18.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17302586);

        $r20 = virtualinvoke $r17.<android.app.Notification$Builder: android.app.Notification$Builder setPriority(int)>(-1);

        $r19 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r21 = virtualinvoke $r19.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r21.<android.content.res.Resources: int getColor(int)>(17170520);

        $r22 = virtualinvoke $r20.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i0);

        r5 = virtualinvoke $r22.<android.app.Notification$Builder: android.app.Notification build()>();

        $r23 = r0.<com.android.server.input.InputManagerService: android.app.NotificationManager mNotificationManager>;

        $r24 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r23.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>(null, 17040629, r5, $r24);

        r0.<com.android.server.input.InputManagerService: boolean mKeyboardLayoutNotificationShown> = 1;

     label2:
        return;
    }

    private void hideMissingKeyboardLayoutNotification()
    {
        com.android.server.input.InputManagerService r0;
        boolean $z0;
        android.os.UserHandle $r1;
        android.app.NotificationManager $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        $z0 = r0.<com.android.server.input.InputManagerService: boolean mKeyboardLayoutNotificationShown>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.input.InputManagerService: boolean mKeyboardLayoutNotificationShown> = 0;

        $r2 = r0.<com.android.server.input.InputManagerService: android.app.NotificationManager mNotificationManager>;

        $r1 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r2.<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>(null, 17040629, $r1);

     label1:
        return;
    }

    private void updateKeyboardLayouts()
    {
        com.android.server.input.InputManagerService r0;
        java.util.HashSet r1, $r5;
        com.android.server.input.PersistentDataStore r2, $r7, $r8, $r9, $r12;
        java.lang.Throwable r3, r4, $r10, $r11;
        com.android.server.input.InputManagerService$4 $r6;

        r0 := @this: com.android.server.input.InputManagerService;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r1 = $r5;

        $r6 = new com.android.server.input.InputManagerService$4;

        specialinvoke $r6.<com.android.server.input.InputManagerService$4: void <init>(com.android.server.input.InputManagerService,java.util.HashSet)>(r0, r1);

        specialinvoke r0.<com.android.server.input.InputManagerService: void visitAllKeyboardLayouts(com.android.server.input.InputManagerService$KeyboardLayoutVisitor)>($r6);

        $r7 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r2 = $r7;

        entermonitor $r7;

     label1:
        $r8 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r8.<com.android.server.input.PersistentDataStore: boolean removeUninstalledKeyboardLayouts(java.util.Set)>(r1);

     label2:
        $r9 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r9.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

        goto label5;

     label3:
        $r11 := @caughtexception;

        r3 = $r11;

     label4:
        $r12 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r12.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

        throw r3;

     label5:
        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label8:
        throw r4;

     label9:
        specialinvoke r0.<com.android.server.input.InputManagerService: void reloadKeyboardLayouts()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private static boolean containsInputDeviceWithDescriptor(android.view.InputDevice[], java.lang.String)
    {
        android.view.InputDevice[] r0;
        java.lang.String r1, $r3;
        int i0, i1;
        android.view.InputDevice r2;
        boolean $z0;

        r0 := @parameter0: android.view.InputDevice[];

        r1 := @parameter1: java.lang.String;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r0[i1];

        $r3 = virtualinvoke r2.<android.view.InputDevice: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public android.hardware.input.KeyboardLayout[] getKeyboardLayouts()
    {
        com.android.server.input.InputManagerService r0;
        java.util.ArrayList r1, $r2;
        com.android.server.input.InputManagerService$5 $r3;
        int $i0;
        android.hardware.input.KeyboardLayout[] $r4, $r6;
        java.lang.Object[] $r5;

        r0 := @this: com.android.server.input.InputManagerService;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = $r2;

        $r3 = new com.android.server.input.InputManagerService$5;

        specialinvoke $r3.<com.android.server.input.InputManagerService$5: void <init>(com.android.server.input.InputManagerService,java.util.ArrayList)>(r0, r1);

        specialinvoke r0.<com.android.server.input.InputManagerService: void visitAllKeyboardLayouts(com.android.server.input.InputManagerService$KeyboardLayoutVisitor)>($r3);

        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r4 = newarray (android.hardware.input.KeyboardLayout)[$i0];

        $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (android.hardware.input.KeyboardLayout[]) $r5;

        return $r6;
    }

    public android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1, $r10;
        android.hardware.input.KeyboardLayout[] r2;
        com.android.server.input.InputManagerService$6 $r3;
        android.hardware.input.KeyboardLayout $r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r11;

     label1:
        r2 = newarray (android.hardware.input.KeyboardLayout)[1];

        $r3 = new com.android.server.input.InputManagerService$6;

        specialinvoke $r3.<com.android.server.input.InputManagerService$6: void <init>(com.android.server.input.InputManagerService,android.hardware.input.KeyboardLayout[])>(r0, r2);

        specialinvoke r0.<com.android.server.input.InputManagerService: void visitKeyboardLayout(java.lang.String,com.android.server.input.InputManagerService$KeyboardLayoutVisitor)>(r1, $r3);

        $r4 = r2[0];

        if $r4 != null goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get keyboard layout with descriptor \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputManager", $r10);

     label2:
        $r5 = r2[0];

        return $r5;
    }

    private void visitAllKeyboardLayouts(com.android.server.input.InputManagerService$KeyboardLayoutVisitor)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputManagerService$KeyboardLayoutVisitor r1;
        android.content.pm.PackageManager r2;
        android.content.Intent r3, $r8;
        java.util.Iterator r4;
        android.content.pm.ResolveInfo r5;
        android.content.pm.ActivityInfo r6;
        int i0;
        android.content.Context $r7;
        java.util.List $r9;
        boolean $z0;
        java.lang.Object $r10;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputManagerService$KeyboardLayoutVisitor;

        $r7 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        r2 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r8 = new android.content.Intent;

        specialinvoke $r8.<android.content.Intent: void <init>(java.lang.String)>("android.hardware.input.action.QUERY_KEYBOARD_LAYOUTS");

        r3 = $r8;

        $r9 = virtualinvoke r2.<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>(r3, 128);

        r4 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.ResolveInfo) $r10;

        r6 = r5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        i0 = r5.<android.content.pm.ResolveInfo: int priority>;

        specialinvoke r0.<com.android.server.input.InputManagerService: void visitKeyboardLayoutsInPackage(android.content.pm.PackageManager,android.content.pm.ActivityInfo,java.lang.String,int,com.android.server.input.InputManagerService$KeyboardLayoutVisitor)>(r2, r6, null, i0, r1);

        goto label1;

     label2:
        return;
    }

    private void visitKeyboardLayout(java.lang.String, com.android.server.input.InputManagerService$KeyboardLayoutVisitor)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1, $r8, $r9, $r10;
        com.android.server.input.InputManagerService$KeyboardLayoutVisitor r2;
        com.android.server.input.InputManagerService$KeyboardLayoutDescriptor r3;
        android.content.pm.PackageManager r4;
        android.content.pm.ActivityInfo r5;
        android.content.Context $r6;
        android.content.ComponentName $r7;
        android.content.pm.PackageManager$NameNotFoundException $r11;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.input.InputManagerService$KeyboardLayoutVisitor;

        r3 = staticinvoke <com.android.server.input.InputManagerService$KeyboardLayoutDescriptor: com.android.server.input.InputManagerService$KeyboardLayoutDescriptor parse(java.lang.String)>(r1);

        if r3 == null goto label4;

        $r6 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        r4 = virtualinvoke $r6.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label1:
        $r7 = new android.content.ComponentName;

        $r9 = r3.<com.android.server.input.InputManagerService$KeyboardLayoutDescriptor: java.lang.String packageName>;

        $r8 = r3.<com.android.server.input.InputManagerService$KeyboardLayoutDescriptor: java.lang.String receiverName>;

        specialinvoke $r7.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r9, $r8);

        r5 = virtualinvoke r4.<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>($r7, 128);

        $r10 = r3.<com.android.server.input.InputManagerService$KeyboardLayoutDescriptor: java.lang.String keyboardLayoutName>;

        specialinvoke r0.<com.android.server.input.InputManagerService: void visitKeyboardLayoutsInPackage(android.content.pm.PackageManager,android.content.pm.ActivityInfo,java.lang.String,int,com.android.server.input.InputManagerService$KeyboardLayoutVisitor)>(r4, r5, $r10, 0, r2);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

     label4:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private void visitKeyboardLayoutsInPackage(android.content.pm.PackageManager, android.content.pm.ActivityInfo, java.lang.String, int, com.android.server.input.InputManagerService$KeyboardLayoutVisitor)
    {
        com.android.server.input.InputManagerService r0;
        android.content.pm.PackageManager r1;
        android.content.pm.ActivityInfo r2;
        java.lang.String r3, r7, r10, r12, r13, r15, $r24, $r25, $r29, $r30, $r34, $r37, $r38, $r39, $r41, $r43, $r45, $r47, $r51, $r55, $r59;
        int i0, i1, i2, i3, $i4, $i5;
        com.android.server.input.InputManagerService$KeyboardLayoutVisitor r4;
        android.os.Bundle r5;
        java.lang.CharSequence r6;
        android.content.res.Resources r8;
        android.content.res.XmlResourceParser r9;
        android.content.res.TypedArray r11;
        java.lang.Throwable r14, r16, $r52, $r53;
        android.content.pm.ApplicationInfo $r17, $r18;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r23, $r26, $r28, $r31, $r32, $r33, $r35, $r36, $r40, $r42, $r44, $r46, $r48, $r49, $r50, $r56, $r57, $r58;
        boolean $z0, $z1;
        int[] $r27;
        java.lang.Exception $r54, r60;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.content.pm.PackageManager;

        r2 := @parameter1: android.content.pm.ActivityInfo;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r4 := @parameter4: com.android.server.input.InputManagerService$KeyboardLayoutVisitor;

        r5 = r2.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        if r5 != null goto label01;

        return;

     label01:
        i1 = virtualinvoke r5.<android.os.Bundle: int getInt(java.lang.String)>("android.hardware.input.metadata.KEYBOARD_LAYOUTS");

        if i1 != 0 goto label02;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing meta-data \'android.hardware.input.metadata.KEYBOARD_LAYOUTS\' on receiver ");

        $r47 = r2.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r42 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r43 = r2.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputManager", $r45);

        return;

     label02:
        r6 = virtualinvoke r2.<android.content.pm.ActivityInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>(r1);

        if r6 == null goto label03;

        $r41 = interfaceinvoke r6.<java.lang.CharSequence: java.lang.String toString()>();

        goto label04;

     label03:
        $r41 = "";

     label04:
        r7 = $r41;

        $r17 = r2.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i5 = $r17.<android.content.pm.ApplicationInfo: int flags>;

        $i4 = $i5 & 1;

        if $i4 == 0 goto label05;

        i2 = i0;

        goto label06;

     label05:
        i2 = 0;

     label06:
        $r18 = r2.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        r8 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>($r18);

        r9 = virtualinvoke r8.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(i1);

     label07:
        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r9, "keyboard-layouts");

     label08:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r9);

        r10 = interfaceinvoke r9.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        if r10 != null goto label09;

        goto label20;

     label09:
        $z0 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("keyboard-layout");

        if $z0 == 0 goto label18;

        $r27 = <com.android.internal.R$styleable: int[] KeyboardLayout>;

        r11 = virtualinvoke r8.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>(r9, $r27);

     label10:
        r12 = virtualinvoke r11.<android.content.res.TypedArray: java.lang.String getString(int)>(1);

        r13 = virtualinvoke r11.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        i3 = virtualinvoke r11.<android.content.res.TypedArray: int getResourceId(int,int)>(2, 0);

        if r12 == null goto label11;

        if r13 == null goto label11;

        if i3 != 0 goto label12;

     label11:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing required \'name\', \'label\' or \'keyboardLayout\' attributes in keyboard layout resource from receiver ");

        $r30 = r2.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r34 = r2.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r39 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputManager", $r39);

        goto label14;

     label12:
        $r37 = r2.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r38 = r2.<android.content.pm.ActivityInfo: java.lang.String name>;

        r15 = staticinvoke <com.android.server.input.InputManagerService$KeyboardLayoutDescriptor: java.lang.String format(java.lang.String,java.lang.String,java.lang.String)>($r37, $r38, r12);

        if r3 == null goto label13;

        $z1 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label14;

     label13:
        interfaceinvoke r4.<com.android.server.input.InputManagerService$KeyboardLayoutVisitor: void visitKeyboardLayout(android.content.res.Resources,java.lang.String,java.lang.String,java.lang.String,int,int)>(r8, r15, r13, r7, i3, i2);

     label14:
        virtualinvoke r11.<android.content.res.TypedArray: void recycle()>();

        goto label17;

     label15:
        $r53 := @caughtexception;

        r14 = $r53;

     label16:
        virtualinvoke r11.<android.content.res.TypedArray: void recycle()>();

        throw r14;

     label17:
        goto label19;

     label18:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping unrecognized element \'");

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in keyboard layout resource from receiver ");

        $r25 = r2.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r24 = r2.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputManager", $r29);

     label19:
        goto label08;

     label20:
        interfaceinvoke r9.<android.content.res.XmlResourceParser: void close()>();

        goto label23;

     label21:
        $r52 := @caughtexception;

        r16 = $r52;

     label22:
        interfaceinvoke r9.<android.content.res.XmlResourceParser: void close()>();

        throw r16;

     label23:
        goto label25;

     label24:
        $r54 := @caughtexception;

        r60 = $r54;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse keyboard layout resource from receiver ");

        $r51 = r2.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r57 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r56 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r59 = r2.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r55 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", $r55, r60);

     label25:
        return;

        catch java.lang.Throwable from label10 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Throwable from label07 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
        catch java.lang.Exception from label06 to label23 with label24;
    }

    private java.lang.String getLayoutDescriptor(android.hardware.input.InputDeviceIdentifier)
    {
        com.android.server.input.InputManagerService r0;
        android.hardware.input.InputDeviceIdentifier r1;
        java.lang.StringBuilder r2, $r5, $r6, $r8;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r4, $r10, $r11;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        if $r4 != null goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("identifier and descriptor must not be null");

        throw $r3;

     label2:
        $i0 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: int getVendorId()>();

        if $i0 != 0 goto label3;

        $i3 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: int getProductId()>();

        if $i3 != 0 goto label3;

        $r11 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        return $r11;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r2 = $r5;

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("vendor:");

        $i1 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: int getVendorId()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",product:");

        $i2 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: int getProductId()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)
    {
        com.android.server.input.InputManagerService r0;
        android.hardware.input.InputDeviceIdentifier r1;
        java.lang.String r2, $r7, $r9, r11;
        com.android.server.input.PersistentDataStore r3, $r5, $r6, $r8;
        java.lang.Throwable r4, $r10;
        boolean $z0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r2 = specialinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getLayoutDescriptor(android.hardware.input.InputDeviceIdentifier)>(r1);

        $r5 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r11 = virtualinvoke $r6.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>(r2);

        if r11 != null goto label2;

        $r7 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label2;

        $r8 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r9 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        r11 = virtualinvoke $r8.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>($r9);

     label2:
        exitmonitor r3;

     label3:
        return r11;

     label4:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r3;

     label5:
        throw r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        android.hardware.input.InputDeviceIdentifier r1;
        java.lang.String r2, r3;
        com.android.server.input.PersistentDataStore r4, $r7, $r8, $r9, $r13;
        java.lang.Throwable r5, r6, $r14, $r15;
        boolean $z0, $z1;
        com.android.server.input.InputManagerService$InputManagerHandler $r10;
        java.lang.SecurityException $r11;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_KEYBOARD_LAYOUT", "setCurrentKeyboardLayoutForInputDevice()");

        if $z0 != 0 goto label01;

        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_KEYBOARD_LAYOUT permission");

        throw $r11;

     label01:
        if r2 != null goto label02;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r12;

     label02:
        r3 = specialinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getLayoutDescriptor(android.hardware.input.InputDeviceIdentifier)>(r1);

        $r7 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r4 = $r7;

        entermonitor $r7;

     label03:
        $r8 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $z1 = virtualinvoke $r8.<com.android.server.input.PersistentDataStore: boolean setCurrentKeyboardLayout(java.lang.String,java.lang.String)>(r3, r2);

        if $z1 == 0 goto label04;

        $r10 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r10.<com.android.server.input.InputManagerService$InputManagerHandler: boolean sendEmptyMessage(int)>(3);

     label04:
        $r9 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r9.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

        goto label07;

     label05:
        $r14 := @caughtexception;

        r5 = $r14;

     label06:
        $r13 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r13.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

        throw r5;

     label07:
        exitmonitor r4;

     label08:
        goto label11;

     label09:
        $r15 := @caughtexception;

        r6 = $r15;

        exitmonitor r4;

     label10:
        throw r6;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public java.lang.String[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)
    {
        com.android.server.input.InputManagerService r0;
        android.hardware.input.InputDeviceIdentifier r1;
        java.lang.String r2, $r8, $r10;
        com.android.server.input.PersistentDataStore r3, $r6, $r7, $r9;
        java.lang.String[] r4;
        java.lang.Throwable r5, $r11;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r2 = specialinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getLayoutDescriptor(android.hardware.input.InputDeviceIdentifier)>(r1);

        $r6 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r4 = virtualinvoke $r7.<com.android.server.input.PersistentDataStore: java.lang.String[] getKeyboardLayouts(java.lang.String)>(r2);

        if r4 == null goto label2;

        $i0 = lengthof r4;

        if $i0 != 0 goto label3;

     label2:
        $r8 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label3;

        $r9 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r10 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        r4 = virtualinvoke $r9.<com.android.server.input.PersistentDataStore: java.lang.String[] getKeyboardLayouts(java.lang.String)>($r10);

     label3:
        exitmonitor r3;

     label4:
        return r4;

     label5:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r3;

     label6:
        throw r5;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        android.hardware.input.InputDeviceIdentifier r1;
        java.lang.String r2, r3, r5, $r13, $r15, $r16;
        com.android.server.input.PersistentDataStore r4, $r8, $r9, $r10, $r11, $r12, $r17, $r22;
        java.lang.Throwable r6, r7, $r19, $r21;
        boolean $z0, $z1, $z2, $z4;
        com.android.server.input.InputManagerService$InputManagerHandler $r14;
        java.lang.IllegalArgumentException $r18;
        java.lang.SecurityException $r20;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_KEYBOARD_LAYOUT", "addKeyboardLayoutForInputDevice()");

        if $z0 != 0 goto label01;

        $r20 = new java.lang.SecurityException;

        specialinvoke $r20.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_KEYBOARD_LAYOUT permission");

        throw $r20;

     label01:
        if r2 != null goto label02;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r18;

     label02:
        r3 = specialinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getLayoutDescriptor(android.hardware.input.InputDeviceIdentifier)>(r1);

        $r8 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r4 = $r8;

        entermonitor $r8;

     label03:
        $r9 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r5 = virtualinvoke $r9.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>(r3);

        if r5 != null goto label04;

        $r15 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z4 != 0 goto label04;

        $r17 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r16 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        r5 = virtualinvoke $r17.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>($r16);

     label04:
        $r10 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $z1 = virtualinvoke $r10.<com.android.server.input.PersistentDataStore: boolean addKeyboardLayout(java.lang.String,java.lang.String)>(r3, r2);

        if $z1 == 0 goto label05;

        $r12 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r13 = virtualinvoke $r12.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>(r3);

        $z2 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r5, $r13);

        if $z2 != 0 goto label05;

        $r14 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r14.<com.android.server.input.InputManagerService$InputManagerHandler: boolean sendEmptyMessage(int)>(3);

     label05:
        $r11 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r11.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

        goto label08;

     label06:
        $r19 := @caughtexception;

        r6 = $r19;

     label07:
        $r22 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r22.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

        throw r6;

     label08:
        exitmonitor r4;

     label09:
        goto label12;

     label10:
        $r21 := @caughtexception;

        r7 = $r21;

        exitmonitor r4;

     label11:
        throw r7;

     label12:
        return;

        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        android.hardware.input.InputDeviceIdentifier r1;
        java.lang.String r2, r3, r5, $r11, $r13, $r17, $r18, $r19;
        com.android.server.input.PersistentDataStore r4, $r8, $r9, $r10, $r12, $r14, $r16, $r20, $r24;
        boolean z0, $z1, $z2, $z3, $z5, $z6;
        java.lang.Throwable r6, r7, $r22, $r25;
        com.android.server.input.InputManagerService$InputManagerHandler $r15;
        java.lang.SecurityException $r21;
        java.lang.IllegalArgumentException $r23;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r2 := @parameter1: java.lang.String;

        $z1 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_KEYBOARD_LAYOUT", "removeKeyboardLayoutForInputDevice()");

        if $z1 != 0 goto label01;

        $r21 = new java.lang.SecurityException;

        specialinvoke $r21.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_KEYBOARD_LAYOUT permission");

        throw $r21;

     label01:
        if r2 != null goto label02;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r23;

     label02:
        r3 = specialinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getLayoutDescriptor(android.hardware.input.InputDeviceIdentifier)>(r1);

        $r8 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r4 = $r8;

        entermonitor $r8;

     label03:
        $r9 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r5 = virtualinvoke $r9.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>(r3);

        if r5 != null goto label04;

        $r18 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z6 != 0 goto label04;

        $r20 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r19 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        r5 = virtualinvoke $r20.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>($r19);

     label04:
        $r10 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        z0 = virtualinvoke $r10.<com.android.server.input.PersistentDataStore: boolean removeKeyboardLayout(java.lang.String,java.lang.String)>(r3, r2);

        $r11 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 != 0 goto label05;

        $r16 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r17 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        $z5 = virtualinvoke $r16.<com.android.server.input.PersistentDataStore: boolean removeKeyboardLayout(java.lang.String,java.lang.String)>($r17, r2);

        z0 = z0 | $z5;

     label05:
        if z0 == 0 goto label06;

        $r14 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r13 = virtualinvoke $r14.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>(r3);

        $z3 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r5, $r13);

        if $z3 != 0 goto label06;

        $r15 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r15.<com.android.server.input.InputManagerService$InputManagerHandler: boolean sendEmptyMessage(int)>(3);

     label06:
        $r12 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r12.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

        goto label09;

     label07:
        $r22 := @caughtexception;

        r6 = $r22;

     label08:
        $r24 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r24.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

        throw r6;

     label09:
        exitmonitor r4;

     label10:
        goto label13;

     label11:
        $r25 := @caughtexception;

        r7 = $r25;

        exitmonitor r4;

     label12:
        throw r7;

     label13:
        return;

        catch java.lang.Throwable from label03 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label03 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void switchKeyboardLayout(int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1;
        com.android.server.input.InputManagerService$InputManagerHandler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        $r2 = virtualinvoke $r1.<com.android.server.input.InputManagerService$InputManagerHandler: android.os.Message obtainMessage(int,int,int)>(2, i0, i1);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void handleSwitchKeyboardLayout(int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1;
        android.view.InputDevice r1;
        boolean z0;
        java.lang.String r2, r3, $r13;
        com.android.server.input.PersistentDataStore r4, $r8, $r9, $r10, $r11, $r20;
        java.lang.Throwable r5, r6, $r17, $r19;
        android.hardware.input.InputDeviceIdentifier $r7;
        android.widget.Toast $r12, $r15, $r16, $r18;
        android.content.Context $r14;
        android.hardware.input.KeyboardLayout r21;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<com.android.server.input.InputManagerService: android.view.InputDevice getInputDevice(int)>(i0);

        if r1 == null goto label12;

        $r7 = virtualinvoke r1.<android.view.InputDevice: android.hardware.input.InputDeviceIdentifier getIdentifier()>();

        r3 = specialinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getLayoutDescriptor(android.hardware.input.InputDeviceIdentifier)>($r7);

        $r8 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r4 = $r8;

        entermonitor $r8;

     label01:
        $r9 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        z0 = virtualinvoke $r9.<com.android.server.input.PersistentDataStore: boolean switchKeyboardLayout(java.lang.String,int)>(r3, i1);

        $r10 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r2 = virtualinvoke $r10.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>(r3);

     label02:
        $r11 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r11.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

        goto label05;

     label03:
        $r17 := @caughtexception;

        r5 = $r17;

     label04:
        $r20 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r20.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

        throw r5;

     label05:
        exitmonitor r4;

     label06:
        goto label09;

     label07:
        $r19 := @caughtexception;

        r6 = $r19;

        exitmonitor r4;

     label08:
        throw r6;

     label09:
        if z0 == 0 goto label12;

        $r12 = r0.<com.android.server.input.InputManagerService: android.widget.Toast mSwitchedKeyboardLayoutToast>;

        if $r12 == null goto label10;

        $r18 = r0.<com.android.server.input.InputManagerService: android.widget.Toast mSwitchedKeyboardLayoutToast>;

        virtualinvoke $r18.<android.widget.Toast: void cancel()>();

        r0.<com.android.server.input.InputManagerService: android.widget.Toast mSwitchedKeyboardLayoutToast> = null;

     label10:
        if r2 == null goto label11;

        r21 = virtualinvoke r0.<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)>(r2);

        if r21 == null goto label11;

        $r14 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r13 = virtualinvoke r21.<android.hardware.input.KeyboardLayout: java.lang.String getLabel()>();

        $r16 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>($r14, $r13, 0);

        r0.<com.android.server.input.InputManagerService: android.widget.Toast mSwitchedKeyboardLayoutToast> = $r16;

        $r15 = r0.<com.android.server.input.InputManagerService: android.widget.Toast mSwitchedKeyboardLayoutToast>;

        virtualinvoke $r15.<android.widget.Toast: void show()>();

     label11:
        specialinvoke r0.<com.android.server.input.InputManagerService: void reloadKeyboardLayouts()>();

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public void setInputWindows(com.android.server.input.InputWindowHandle[])
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputWindowHandle[] r1;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputWindowHandle[];

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetInputWindows(long,com.android.server.input.InputWindowHandle[])>($l0, r1);

        return;
    }

    public void setFocusedApplication(com.android.server.input.InputApplicationHandle)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputApplicationHandle r1;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputApplicationHandle;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetFocusedApplication(long,com.android.server.input.InputApplicationHandle)>($l0, r1);

        return;
    }

    public void setInputDispatchMode(boolean, boolean)
    {
        com.android.server.input.InputManagerService r0;
        boolean z0, z1;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetInputDispatchMode(long,boolean,boolean)>($l0, z0, z1);

        return;
    }

    public void setSystemUiVisibility(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        long $l1;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetSystemUiVisibility(long,int)>($l1, i0);

        return;
    }

    public boolean transferTouchFocus(android.view.InputChannel, android.view.InputChannel)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputChannel r1, r2;
        long $l0;
        boolean $z0;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputChannel;

        r2 := @parameter1: android.view.InputChannel;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fromChannel must not be null.");

        throw $r4;

     label1:
        if r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("toChannel must not be null.");

        throw $r3;

     label2:
        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $z0 = staticinvoke <com.android.server.input.InputManagerService: boolean nativeTransferTouchFocus(long,android.view.InputChannel,android.view.InputChannel)>($l0, r1, r2);

        return $z0;
    }

    public void tryPointerSpeed(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.SecurityException $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_POINTER_SPEED", "tryPointerSpeed()");

        if $z0 != 0 goto label1;

        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_POINTER_SPEED permission");

        throw $r2;

     label1:
        if i0 < -7 goto label2;

        if i0 <= 7 goto label3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("speed out of range");

        throw $r1;

     label3:
        specialinvoke r0.<com.android.server.input.InputManagerService: void setPointerSpeedUnchecked(int)>(i0);

        return;
    }

    public void updatePointerSpeedFromSettings()
    {
        com.android.server.input.InputManagerService r0;
        int i0;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 = specialinvoke r0.<com.android.server.input.InputManagerService: int getPointerSpeedSetting()>();

        specialinvoke r0.<com.android.server.input.InputManagerService: void setPointerSpeedUnchecked(int)>(i0);

        return;
    }

    private void setPointerSpeedUnchecked(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, $i1, i3;
        long $l2;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(i0, -7);

        i3 = staticinvoke <java.lang.Math: int min(int,int)>($i1, 7);

        $l2 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetPointerSpeed(long,int)>($l2, i3);

        return;
    }

    private void registerPointerSpeedSettingObserver()
    {
        com.android.server.input.InputManagerService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        android.net.Uri $r3;
        com.android.server.input.InputManagerService$7 $r4;
        com.android.server.input.InputManagerService$InputManagerHandler $r5;

        r0 := @this: com.android.server.input.InputManagerService;

        $r1 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("pointer_speed");

        $r4 = new com.android.server.input.InputManagerService$7;

        $r5 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        specialinvoke $r4.<com.android.server.input.InputManagerService$7: void <init>(com.android.server.input.InputManagerService,android.os.Handler)>(r0, $r5);

        virtualinvoke $r2.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r3, 1, $r4, -1);

        return;
    }

    private int getPointerSpeedSetting()
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        android.provider.Settings$SettingNotFoundException $r4;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 = 0;

     label1:
        $r2 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>($r3, "pointer_speed", -2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return i0;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label3;
    }

    public void updateShowTouchesFromSettings()
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 = specialinvoke r0.<com.android.server.input.InputManagerService: int getShowTouchesSetting(int)>(0);

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        if i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.android.server.input.InputManagerService: void nativeSetShowTouches(long,boolean)>($l1, $z0);

        return;
    }

    private void registerShowTouchesSettingObserver()
    {
        com.android.server.input.InputManagerService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        android.net.Uri $r3;
        com.android.server.input.InputManagerService$8 $r4;
        com.android.server.input.InputManagerService$InputManagerHandler $r5;

        r0 := @this: com.android.server.input.InputManagerService;

        $r1 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("show_touches");

        $r4 = new com.android.server.input.InputManagerService$8;

        $r5 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        specialinvoke $r4.<com.android.server.input.InputManagerService$8: void <init>(com.android.server.input.InputManagerService,android.os.Handler)>(r0, $r5);

        virtualinvoke $r2.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r3, 1, $r4, -1);

        return;
    }

    private int getShowTouchesSetting(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        android.provider.Settings$SettingNotFoundException $r4;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 = i0;

     label1:
        $r2 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i1 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>($r3, "show_touches", -2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return i1;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label3;
    }

    public void vibrate(int, long[], int, android.os.IBinder)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, $i2, $i4, $i5, $i6;
        long[] r1;
        android.os.IBinder r2;
        com.android.server.input.InputManagerService$VibratorToken r3, $r12, r20;
        java.lang.Object r4, $r8, $r10;
        android.os.RemoteException r5, $r15;
        java.lang.Throwable r6, r7, $r17, $r19;
        java.util.HashMap $r9, $r14;
        long $l3;
        java.lang.ArrayIndexOutOfBoundsException $r16;
        java.lang.RuntimeException $r18;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: long[];

        i1 := @parameter2: int;

        r2 := @parameter3: android.os.IBinder;

        $i2 = lengthof r1;

        if i1 < $i2 goto label01;

        $r16 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r16.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r16;

     label01:
        $r8 = r0.<com.android.server.input.InputManagerService: java.lang.Object mVibratorLock>;

        r4 = $r8;

        entermonitor $r8;

     label02:
        $r9 = r0.<com.android.server.input.InputManagerService: java.util.HashMap mVibratorTokens>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (com.android.server.input.InputManagerService$VibratorToken) $r10;

        if r3 != null goto label07;

        $r12 = new com.android.server.input.InputManagerService$VibratorToken;

        $i6 = r0.<com.android.server.input.InputManagerService: int mNextVibratorTokenValue>;

        $i5 = $i6 + 1;

        r0.<com.android.server.input.InputManagerService: int mNextVibratorTokenValue> = $i5;

        specialinvoke $r12.<com.android.server.input.InputManagerService$VibratorToken: void <init>(com.android.server.input.InputManagerService,int,android.os.IBinder,int)>(r0, i0, r2, $i6);

        r3 = $r12;

     label03:
        interfaceinvoke r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0);

     label04:
        goto label06;

     label05:
        $r15 := @caughtexception;

        r5 = $r15;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r5);

        throw $r18;

     label06:
        $r14 = r0.<com.android.server.input.InputManagerService: java.util.HashMap mVibratorTokens>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

     label07:
        exitmonitor r4;

     label08:
        goto label11;

     label09:
        $r17 := @caughtexception;

        r6 = $r17;

        exitmonitor r4;

     label10:
        throw r6;

     label11:
        r20 = r3;

        entermonitor r3;

     label12:
        r3.<com.android.server.input.InputManagerService$VibratorToken: boolean mVibrating> = 1;

        $l3 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $i4 = r3.<com.android.server.input.InputManagerService$VibratorToken: int mTokenValue>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeVibrate(long,int,long[],int,int)>($l3, i0, r1, i1, $i4);

        exitmonitor r20;

     label13:
        goto label16;

     label14:
        $r19 := @caughtexception;

        r7 = $r19;

        exitmonitor r20;

     label15:
        throw r7;

     label16:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public void cancelVibrate(int, android.os.IBinder)
    {
        com.android.server.input.InputManagerService r0;
        int i0, $i1;
        android.os.IBinder r1;
        com.android.server.input.InputManagerService$VibratorToken r2;
        java.lang.Object r3, $r5, $r7;
        java.lang.Throwable r4, $r8;
        java.util.HashMap $r6;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IBinder;

        $r5 = r0.<com.android.server.input.InputManagerService: java.lang.Object mVibratorLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.input.InputManagerService: java.util.HashMap mVibratorTokens>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.input.InputManagerService$VibratorToken) $r7;

        if r2 == null goto label2;

        $i1 = r2.<com.android.server.input.InputManagerService$VibratorToken: int mDeviceId>;

        if $i1 == i0 goto label4;

     label2:
        exitmonitor r3;

     label3:
        return;

     label4:
        exitmonitor r3;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r3;

     label7:
        throw r4;

     label8:
        specialinvoke r0.<com.android.server.input.InputManagerService: void cancelVibrateIfNeeded(com.android.server.input.InputManagerService$VibratorToken)>(r2);

        return;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    void onVibratorTokenDied(com.android.server.input.InputManagerService$VibratorToken)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputManagerService$VibratorToken r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        android.os.IBinder $r5;
        java.util.HashMap $r6;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputManagerService$VibratorToken;

        $r4 = r0.<com.android.server.input.InputManagerService: java.lang.Object mVibratorLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r6 = r0.<com.android.server.input.InputManagerService: java.util.HashMap mVibratorTokens>;

        $r5 = r1.<com.android.server.input.InputManagerService$VibratorToken: android.os.IBinder mToken>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r5);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        specialinvoke r0.<com.android.server.input.InputManagerService: void cancelVibrateIfNeeded(com.android.server.input.InputManagerService$VibratorToken)>(r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void cancelVibrateIfNeeded(com.android.server.input.InputManagerService$VibratorToken)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputManagerService$VibratorToken r1, r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;
        int $i0, $i1;
        long $l2;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputManagerService$VibratorToken;

        r2 = r1;

        entermonitor r1;

     label1:
        $z0 = r1.<com.android.server.input.InputManagerService$VibratorToken: boolean mVibrating>;

        if $z0 == 0 goto label2;

        $l2 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $i1 = r1.<com.android.server.input.InputManagerService$VibratorToken: int mDeviceId>;

        $i0 = r1.<com.android.server.input.InputManagerService$VibratorToken: int mTokenValue>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeCancelVibrate(long,int,int)>($l2, $i1, $i0);

        r1.<com.android.server.input.InputManagerService$VibratorToken: boolean mVibrating> = 0;

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.input.InputManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.String r4, $r11;
        android.content.Context $r5;
        int $i0, $i2, $i3;
        long $l1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r5 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump InputManager from from pid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        return;

     label1:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("INPUT MANAGER (dumpsys input)\n");

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        r4 = staticinvoke <com.android.server.input.InputManagerService: java.lang.String nativeDump(long)>($l1);

        if r4 == null goto label2;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(r4);

     label2:
        return;
    }

    private boolean checkCallingPermission(java.lang.String, java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1, r2, r3;
        int $i0, $i1, $i2, $i3, $i4;
        android.content.Context $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        $r4 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r4.<android.content.Context: int checkCallingPermission(java.lang.String)>(r1);

        if $i2 != 0 goto label2;

        return 1;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from pid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r3 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("InputManager", r3);

        return 0;
    }

    public void monitor()
    {
        com.android.server.input.InputManagerService r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        $r3 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputFilterLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeMonitor(long)>($l0);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void notifyConfigurationChanged(long)
    {
        com.android.server.input.InputManagerService r0;
        long l0;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r1;

        r0 := @this: com.android.server.input.InputManagerService;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        interfaceinvoke $r1.<com.android.server.input.InputManagerService$WindowManagerCallbacks: void notifyConfigurationChanged()>();

        return;
    }

    private void notifyInputDevicesChanged(android.view.InputDevice[])
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputDevice[] r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        boolean $z0;
        com.android.server.input.InputManagerService$InputManagerHandler $r6;
        android.os.Message $r7;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputDevice[];

        $r4 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z0 = r0.<com.android.server.input.InputManagerService: boolean mInputDevicesChangedPending>;

        if $z0 != 0 goto label2;

        r0.<com.android.server.input.InputManagerService: boolean mInputDevicesChangedPending> = 1;

        $r6 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        $r5 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        $r7 = virtualinvoke $r6.<com.android.server.input.InputManagerService$InputManagerHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r5);

        virtualinvoke $r7.<android.os.Message: void sendToTarget()>();

     label2:
        r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices> = r1;

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void notifySwitch(long, int, int)
    {
        com.android.server.input.InputManagerService r0;
        long l0;
        int i1, i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0, $z1, $z2, $z3, z4;
        com.android.server.input.InputManagerService$WiredAccessoryCallbacks $r1;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r2, $r3;

        r0 := @this: com.android.server.input.InputManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i2 & 1;

        if $i3 == 0 goto label3;

        $i7 = i1 & 1;

        if $i7 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        $r3 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        interfaceinvoke $r3.<com.android.server.input.InputManagerService$WindowManagerCallbacks: void notifyLidSwitchChanged(long,boolean)>(l0, z0);

     label3:
        $i4 = i2 & 512;

        if $i4 == 0 goto label6;

        $i6 = i1 & 512;

        if $i6 == 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        z4 = $z2;

        $r2 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        interfaceinvoke $r2.<com.android.server.input.InputManagerService$WindowManagerCallbacks: void notifyCameraLensCoverSwitchChanged(long,boolean)>(l0, z4);

     label6:
        $z1 = r0.<com.android.server.input.InputManagerService: boolean mUseDevInputEventForAudioJack>;

        if $z1 == 0 goto label7;

        $i5 = i2 & 212;

        if $i5 == 0 goto label7;

        $r1 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WiredAccessoryCallbacks mWiredAccessoryCallbacks>;

        interfaceinvoke $r1.<com.android.server.input.InputManagerService$WiredAccessoryCallbacks: void notifyWiredAccessoryChanged(long,int,int)>(l0, i1, i2);

     label7:
        return;
    }

    private void notifyInputChannelBroken(com.android.server.input.InputWindowHandle)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputWindowHandle r1;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputWindowHandle;

        $r2 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        interfaceinvoke $r2.<com.android.server.input.InputManagerService$WindowManagerCallbacks: void notifyInputChannelBroken(com.android.server.input.InputWindowHandle)>(r1);

        return;
    }

    private long notifyANR(com.android.server.input.InputApplicationHandle, com.android.server.input.InputWindowHandle, java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputApplicationHandle r1;
        com.android.server.input.InputWindowHandle r2;
        java.lang.String r3;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r4;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputApplicationHandle;

        r2 := @parameter1: com.android.server.input.InputWindowHandle;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $l0 = interfaceinvoke $r4.<com.android.server.input.InputManagerService$WindowManagerCallbacks: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle,java.lang.String)>(r1, r2, r3);

        return $l0;
    }

    final boolean filterInputEvent(android.view.InputEvent, int)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputEvent r1;
        int i0;
        java.lang.Object r2, $r5;
        java.lang.Throwable r4, $r8;
        android.view.IInputFilter $r6, $r7;
        android.os.RemoteException $r9;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputEvent;

        i0 := @parameter1: int;

        $r5 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputFilterLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<com.android.server.input.InputManagerService: android.view.IInputFilter mInputFilter>;

        if $r6 == null goto label07;

     label02:
        $r7 = r0.<com.android.server.input.InputManagerService: android.view.IInputFilter mInputFilter>;

        interfaceinvoke $r7.<android.view.IInputFilter: void filterInputEvent(android.view.InputEvent,int)>(r1, i0);

     label03:
        goto label05;

     label04:
        $r9 := @caughtexception;

     label05:
        exitmonitor r2;

     label06:
        return 0;

     label07:
        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r2;

     label10:
        throw r4;

     label11:
        virtualinvoke r1.<android.view.InputEvent: void recycle()>();

        return 1;

        catch android.os.RemoteException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private int interceptKeyBeforeQueueing(android.view.KeyEvent, int)
    {
        com.android.server.input.InputManagerService r0;
        android.view.KeyEvent r1;
        int i0, $i1;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $i1 = interfaceinvoke $r2.<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int)>(r1, i0);

        return $i1;
    }

    private int interceptMotionBeforeQueueingNonInteractive(long, int)
    {
        com.android.server.input.InputManagerService r0;
        long l0;
        int i1, $i2;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r1;

        r0 := @this: com.android.server.input.InputManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $i2 = interfaceinvoke $r1.<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptMotionBeforeQueueingNonInteractive(long,int)>(l0, i1);

        return $i2;
    }

    private long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle, android.view.KeyEvent, int)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputWindowHandle r1;
        android.view.KeyEvent r2;
        int i0;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r3;
        long $l1;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputWindowHandle;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $l1 = interfaceinvoke $r3.<com.android.server.input.InputManagerService$WindowManagerCallbacks: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)>(r1, r2, i0);

        return $l1;
    }

    private android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle, android.view.KeyEvent, int)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputWindowHandle r1;
        android.view.KeyEvent r2, $r4;
        int i0;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r3;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputWindowHandle;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $r4 = interfaceinvoke $r3.<com.android.server.input.InputManagerService$WindowManagerCallbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)>(r1, r2, i0);

        return $r4;
    }

    private boolean checkInjectEventsPermission(int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, $i2;
        android.content.Context $r1;
        boolean $z0;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.INJECT_EVENTS", i0, i1);

        if $i2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int getVirtualKeyQuietTimeMillis()
    {
        com.android.server.input.InputManagerService r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $r1 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(17694802);

        return $i0;
    }

    private java.lang.String[] getExcludedDeviceNames()
    {
        com.android.server.input.InputManagerService r0;
        java.util.ArrayList r1, $r6;
        java.io.File r2, $r7, $r8;
        java.io.FileReader r3, $r9;
        java.lang.String r4, $r10, $r11, $r20, $r26;
        java.lang.Throwable r5, $r15;
        boolean $z0;
        java.lang.String[] $r12, $r13;
        int $i0;
        java.lang.Object[] $r14;
        java.io.IOException $r16, $r18, $r24, $r25;
        java.lang.Exception $r17, r29;
        java.lang.StringBuilder $r19, $r21, $r22, $r23;
        java.io.FileNotFoundException $r27;
        org.xmlpull.v1.XmlPullParser r28;

        r0 := @this: com.android.server.input.InputManagerService;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

        $r7 = new java.io.File;

        $r8 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "etc/excluded-input-devices.xml");

        r2 = $r7;

        r3 = null;

     label01:
        $r9 = new java.io.FileReader;

        specialinvoke $r9.<java.io.FileReader: void <init>(java.io.File)>(r2);

        r3 = $r9;

        r28 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r28.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(r3);

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r28, "devices");

     label02:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r28);

        $r10 = "device";

        $r11 = interfaceinvoke r28.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label03;

        goto label05;

     label03:
        r4 = interfaceinvoke r28.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        if r4 == null goto label04;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label04:
        goto label02;

     label05:
        if r3 == null goto label06;

        virtualinvoke r3.<java.io.FileReader: void close()>();

     label06:
        goto label21;

     label07:
        $r18 := @caughtexception;

        goto label21;

     label08:
        $r27 := @caughtexception;

     label09:
        if r3 == null goto label10;

        virtualinvoke r3.<java.io.FileReader: void close()>();

     label10:
        goto label21;

     label11:
        $r24 := @caughtexception;

        goto label21;

     label12:
        $r17 := @caughtexception;

        r29 = $r17;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while parsing \'");

        $r20 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", $r26, r29);

     label13:
        if r3 == null goto label14;

        virtualinvoke r3.<java.io.FileReader: void close()>();

     label14:
        goto label21;

     label15:
        $r16 := @caughtexception;

        goto label21;

     label16:
        $r15 := @caughtexception;

        r5 = $r15;

     label17:
        if r3 == null goto label18;

        virtualinvoke r3.<java.io.FileReader: void close()>();

     label18:
        goto label20;

     label19:
        $r25 := @caughtexception;

     label20:
        throw r5;

     label21:
        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r12 = newarray (java.lang.String)[$i0];

        $r14 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r13 = (java.lang.String[]) $r14;

        return $r13;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.FileNotFoundException from label01 to label05 with label08;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Exception from label01 to label05 with label12;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label01 to label05 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    private int getKeyRepeatTimeout()
    {
        com.android.server.input.InputManagerService r0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getKeyRepeatTimeout()>();

        return $i0;
    }

    private int getKeyRepeatDelay()
    {
        com.android.server.input.InputManagerService r0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getKeyRepeatDelay()>();

        return $i0;
    }

    private int getHoverTapTimeout()
    {
        com.android.server.input.InputManagerService r0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getHoverTapTimeout()>();

        return $i0;
    }

    private int getHoverTapSlop()
    {
        com.android.server.input.InputManagerService r0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getHoverTapSlop()>();

        return $i0;
    }

    private int getDoubleTapTimeout()
    {
        com.android.server.input.InputManagerService r0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getDoubleTapTimeout()>();

        return $i0;
    }

    private int getLongPressTimeout()
    {
        com.android.server.input.InputManagerService r0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        return $i0;
    }

    private int getPointerLayer()
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r1;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $r1 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $i0 = interfaceinvoke $r1.<com.android.server.input.InputManagerService$WindowManagerCallbacks: int getPointerLayer()>();

        return $i0;
    }

    private android.view.PointerIcon getPointerIcon()
    {
        com.android.server.input.InputManagerService r0;
        android.content.Context $r1;
        android.view.PointerIcon $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        $r1 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r2 = staticinvoke <android.view.PointerIcon: android.view.PointerIcon getDefaultIcon(android.content.Context)>($r1);

        return $r2;
    }

    private java.lang.String[] getKeyboardLayoutOverlay(android.hardware.input.InputDeviceIdentifier)
    {
        com.android.server.input.InputManagerService r0;
        android.hardware.input.InputDeviceIdentifier r1;
        java.lang.String r2, $r5, $r10;
        java.lang.String[] r3;
        boolean $z0;
        com.android.server.input.InputManagerService$9 $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        $z0 = r0.<com.android.server.input.InputManagerService: boolean mSystemReady>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        r2 = virtualinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)>(r1);

        if r2 != null goto label2;

        return null;

     label2:
        r3 = newarray (java.lang.String)[2];

        $r4 = new com.android.server.input.InputManagerService$9;

        specialinvoke $r4.<com.android.server.input.InputManagerService$9: void <init>(com.android.server.input.InputManagerService,java.lang.String[])>(r0, r3);

        specialinvoke r0.<com.android.server.input.InputManagerService: void visitKeyboardLayout(java.lang.String,com.android.server.input.InputManagerService$KeyboardLayoutVisitor)>(r2, $r4);

        $r5 = r3[0];

        if $r5 != null goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get keyboard layout with descriptor \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputManager", $r10);

        return null;

     label3:
        return r3;
    }

    private java.lang.String getDeviceAlias(java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.bluetooth.BluetoothAdapter: boolean checkBluetoothAddress(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        return null;
    }

    static void access$100(com.android.server.input.InputManagerService)
    {
        com.android.server.input.InputManagerService r0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        specialinvoke r0.<com.android.server.input.InputManagerService: void updateKeyboardLayouts()>();

        return;
    }

    static void access$200(com.android.server.input.InputManagerService)
    {
        com.android.server.input.InputManagerService r0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        specialinvoke r0.<com.android.server.input.InputManagerService: void reloadDeviceAliases()>();

        return;
    }

    static void access$400(com.android.server.input.InputManagerService, android.view.InputDevice[])
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputDevice[] r1;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        r1 := @parameter1: android.view.InputDevice[];

        specialinvoke r0.<com.android.server.input.InputManagerService: void deliverInputDevicesChanged(android.view.InputDevice[])>(r1);

        return;
    }

    static void access$500(com.android.server.input.InputManagerService, int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.input.InputManagerService: void handleSwitchKeyboardLayout(int,int)>(i0, i1);

        return;
    }

    static void access$600(com.android.server.input.InputManagerService)
    {
        com.android.server.input.InputManagerService r0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        specialinvoke r0.<com.android.server.input.InputManagerService: void reloadKeyboardLayouts()>();

        return;
    }

    static long access$700(com.android.server.input.InputManagerService)
    {
        com.android.server.input.InputManagerService r0;
        long $l0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        return $l0;
    }

    static int access$800(long, android.view.InputEvent, int, int, int, int, int, int)
    {
        long l0;
        android.view.InputEvent r0;
        int i1, i2, i3, i4, i5, i6, $i7;

        l0 := @parameter0: long;

        r0 := @parameter1: android.view.InputEvent;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        $i7 = staticinvoke <com.android.server.input.InputManagerService: int nativeInjectInputEvent(long,android.view.InputEvent,int,int,int,int,int,int)>(l0, r0, i1, i2, i3, i4, i5, i6);

        return $i7;
    }

    static void access$900(com.android.server.input.InputManagerService, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.input.InputManagerService: void onInputDevicesChangedListenerDied(int)>(i0);

        return;
    }

    static void access$1000(com.android.server.input.InputManagerService, android.hardware.display.DisplayViewport, android.hardware.display.DisplayViewport)
    {
        com.android.server.input.InputManagerService r0;
        android.hardware.display.DisplayViewport r1, r2;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        r1 := @parameter1: android.hardware.display.DisplayViewport;

        r2 := @parameter2: android.hardware.display.DisplayViewport;

        specialinvoke r0.<com.android.server.input.InputManagerService: void setDisplayViewportsInternal(android.hardware.display.DisplayViewport,android.hardware.display.DisplayViewport)>(r1, r2);

        return;
    }

    static boolean access$1100(com.android.server.input.InputManagerService, android.view.InputEvent, int, int)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputEvent r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        r1 := @parameter1: android.view.InputEvent;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean injectInputEventInternal(android.view.InputEvent,int,int)>(r1, i0, i1);

        return $z0;
    }

    static void access$1200(long, boolean)
    {
        long l0;
        boolean z0;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetInteractive(long,boolean)>(l0, z0);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.input.InputManagerService: int SW_CAMERA_LENS_COVER_BIT> = 512;

        <com.android.server.input.InputManagerService: int SW_JACK_BITS> = 212;

        <com.android.server.input.InputManagerService: int SW_JACK_PHYSICAL_INSERT_BIT> = 128;

        <com.android.server.input.InputManagerService: int SW_LINEOUT_INSERT_BIT> = 64;

        <com.android.server.input.InputManagerService: int SW_MICROPHONE_INSERT_BIT> = 16;

        <com.android.server.input.InputManagerService: int SW_HEADPHONE_INSERT_BIT> = 4;

        <com.android.server.input.InputManagerService: int SW_KEYPAD_SLIDE_BIT> = 1024;

        <com.android.server.input.InputManagerService: int SW_LID_BIT> = 1;

        <com.android.server.input.InputManagerService: int SW_CAMERA_LENS_COVER> = 9;

        <com.android.server.input.InputManagerService: int SW_JACK_PHYSICAL_INSERT> = 7;

        <com.android.server.input.InputManagerService: int SW_LINEOUT_INSERT> = 6;

        <com.android.server.input.InputManagerService: int SW_MICROPHONE_INSERT> = 4;

        <com.android.server.input.InputManagerService: int SW_HEADPHONE_INSERT> = 2;

        <com.android.server.input.InputManagerService: int SW_KEYPAD_SLIDE> = 10;

        <com.android.server.input.InputManagerService: int SW_LID> = 0;

        <com.android.server.input.InputManagerService: int BTN_MOUSE> = 272;

        <com.android.server.input.InputManagerService: int KEY_STATE_VIRTUAL> = 2;

        <com.android.server.input.InputManagerService: int KEY_STATE_DOWN> = 1;

        <com.android.server.input.InputManagerService: int KEY_STATE_UP> = 0;

        <com.android.server.input.InputManagerService: int KEY_STATE_UNKNOWN> = -1;

        <com.android.server.input.InputManagerService: int INJECTION_TIMEOUT_MILLIS> = 30000;

        <com.android.server.input.InputManagerService: int INPUT_EVENT_INJECTION_TIMED_OUT> = 3;

        <com.android.server.input.InputManagerService: int INPUT_EVENT_INJECTION_FAILED> = 2;

        <com.android.server.input.InputManagerService: int INPUT_EVENT_INJECTION_PERMISSION_DENIED> = 1;

        <com.android.server.input.InputManagerService: int INPUT_EVENT_INJECTION_SUCCEEDED> = 0;

        <com.android.server.input.InputManagerService: int MSG_RELOAD_DEVICE_ALIASES> = 5;

        <com.android.server.input.InputManagerService: int MSG_UPDATE_KEYBOARD_LAYOUTS> = 4;

        <com.android.server.input.InputManagerService: int MSG_RELOAD_KEYBOARD_LAYOUTS> = 3;

        <com.android.server.input.InputManagerService: int MSG_SWITCH_KEYBOARD_LAYOUT> = 2;

        <com.android.server.input.InputManagerService: int MSG_DELIVER_INPUT_DEVICES_CHANGED> = 1;

        <com.android.server.input.InputManagerService: java.lang.String EXCLUDED_DEVICES_PATH> = "etc/excluded-input-devices.xml";

        <com.android.server.input.InputManagerService: boolean DEBUG> = 0;

        <com.android.server.input.InputManagerService: java.lang.String TAG> = "InputManager";

        return;
    }
}
