public class com.android.server.usb.UsbHostManager extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG_AUDIO;
    private final java.util.HashMap mDevices;
    private final java.lang.String[] mHostBlacklist;
    private final android.content.Context mContext;
    private final java.lang.Object mLock;
    private android.hardware.usb.UsbDevice mNewDevice;
    private android.hardware.usb.UsbConfiguration mNewConfiguration;
    private android.hardware.usb.UsbInterface mNewInterface;
    private java.util.ArrayList mNewConfigurations;
    private java.util.ArrayList mNewInterfaces;
    private java.util.ArrayList mNewEndpoints;
    private int mConnectedUsbCard;
    private int mConnectedUsbDeviceNum;
    private boolean mConnectedHasPlayback;
    private boolean mConnectedHasCapture;
    private boolean mConnectedHasMIDI;
    private com.android.server.usb.UsbSettingsManager mCurrentSettings;

    public void <init>(android.content.Context)
    {
        com.android.server.usb.UsbHostManager r0;
        android.content.Context r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        android.content.res.Resources $r4;
        java.lang.String[] $r5;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock> = $r3;

        r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbCard> = -1;

        r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbDeviceNum> = -1;

        r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasPlayback> = 0;

        r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasCapture> = 0;

        r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasMIDI> = 0;

        r0.<com.android.server.usb.UsbHostManager: android.content.Context mContext> = r1;

        $r4 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17235992);

        r0.<com.android.server.usb.UsbHostManager: java.lang.String[] mHostBlacklist> = $r5;

        return;
    }

    public void setCurrentSettings(com.android.server.usb.UsbSettingsManager)
    {
        com.android.server.usb.UsbHostManager r0;
        com.android.server.usb.UsbSettingsManager r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: com.android.server.usb.UsbSettingsManager;

        $r4 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbSettingsManager mCurrentSettings> = r1;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private com.android.server.usb.UsbSettingsManager getCurrentSettings()
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.server.usb.UsbSettingsManager $r4;

        r0 := @this: com.android.server.usb.UsbHostManager;

        $r3 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbSettingsManager mCurrentSettings>;

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean isBlackListed(java.lang.String)
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.String r1, $r4;
        int i0, i1;
        java.lang.String[] $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.usb.UsbHostManager: java.lang.String[] mHostBlacklist>;

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<com.android.server.usb.UsbHostManager: java.lang.String[] mHostBlacklist>;

        $r4 = $r3[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean isBlackListed(int, int, int)
    {
        com.android.server.usb.UsbHostManager r0;
        int i0, i1, i2;

        r0 := @this: com.android.server.usb.UsbHostManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 != 9 goto label1;

        return 1;

     label1:
        if i0 != 3 goto label2;

        if i1 != 1 goto label2;

        return 1;

     label2:
        return 0;
    }

    private void sendDeviceNotification(int, int, boolean, boolean, boolean, boolean)
    {
        com.android.server.usb.UsbHostManager r0;
        int i0, i1;
        boolean z0, z1, z2, z3;
        android.content.Intent r1, $r2;
        android.os.UserHandle $r10;
        byte $b2;
        android.content.Context $r12;

        r0 := @this: com.android.server.usb.UsbHostManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        z3 := @parameter5: boolean;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.media.action.USB_AUDIO_DEVICE_PLUG");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(536870912);

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(1073741824);

        if z0 == 0 goto label1;

        $b2 = 1;

        goto label2;

     label1:
        $b2 = 0;

     label2:
        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("state", $b2);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("card", i0);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("device", i1);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("hasPlayback", z1);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("hasCapture", z2);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("hasMIDI", z3);

        $r12 = r0.<com.android.server.usb.UsbHostManager: android.content.Context mContext>;

        $r10 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r12.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r10);

        return;
    }

    private boolean waitForAlsaFile(int, int, boolean)
    {
        com.android.server.usb.UsbHostManager r0;
        int i0, i1, i4;
        boolean z0, z1;
        java.lang.String r1, $r12, $r13, $r14;
        java.io.File r2, $r10;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.IllegalThreadStateException $r11;
        java.lang.InterruptedException $r15;

        r0 := @this: com.android.server.usb.UsbHostManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/dev/snd/pcmC");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("D");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        if z0 == 0 goto label1;

        $r12 = "c";

        goto label2;

     label1:
        $r12 = "p";

     label2:
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>(r1);

        r2 = $r10;

        z1 = 0;

        i4 = 0;

     label3:
        if z1 != 0 goto label9;

        if i4 >= 5 goto label9;

        z1 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if z1 != 0 goto label8;

     label4:
        staticinvoke <java.lang.Thread: void sleep(long)>(500L);

     label5:
        goto label8;

     label6:
        $r11 := @caughtexception;

        $r13 = <com.android.server.usb.UsbHostManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r13, "usb: IllegalThreadStateException while waiting for ALSA file.");

        goto label8;

     label7:
        $r15 := @caughtexception;

        $r14 = <com.android.server.usb.UsbHostManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r14, "usb: InterruptedException while waiting for ALSA file.");

     label8:
        i4 = i4 + 1;

        goto label3;

     label9:
        return z1;

        catch java.lang.IllegalThreadStateException from label4 to label5 with label6;
        catch java.lang.InterruptedException from label4 to label5 with label7;
    }

    private boolean beginUsbDeviceAdded(java.lang.String, int, int, int, int, int, java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.String r1, r2, r3, r4, $r15, $r16, $r20;
        int i0, i1, i2, i3, i4;
        java.lang.Object r5, $r7, $r10;
        java.lang.Throwable r6, $r21;
        boolean $z0, $z1;
        java.util.HashMap $r8;
        android.hardware.usb.UsbDevice $r9, $r12;
        java.util.ArrayList $r11, $r13, $r14;
        java.lang.StringBuilder $r17, $r18, $r19;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        r2 := @parameter6: java.lang.String;

        r3 := @parameter7: java.lang.String;

        r4 := @parameter8: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.usb.UsbHostManager: boolean isBlackListed(java.lang.String)>(r1);

        if $z0 != 0 goto label01;

        $z1 = specialinvoke r0.<com.android.server.usb.UsbHostManager: boolean isBlackListed(int,int,int)>(i2, i3, i4);

        if $z1 == 0 goto label02;

     label01:
        return 0;

     label02:
        $r7 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        r5 = $r7;

        entermonitor $r7;

     label03:
        $r8 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r10 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r10 == null goto label05;

        $r16 = <com.android.server.usb.UsbHostManager: java.lang.String TAG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("device already on mDevices list: ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r16, $r20);

        exitmonitor r5;

     label04:
        return 0;

     label05:
        $r9 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbDevice mNewDevice>;

        if $r9 == null goto label07;

        $r15 = <com.android.server.usb.UsbHostManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r15, "mNewDevice is not null in endUsbDeviceAdded");

        exitmonitor r5;

     label06:
        return 0;

     label07:
        $r12 = new android.hardware.usb.UsbDevice;

        specialinvoke $r12.<android.hardware.usb.UsbDevice: void <init>(java.lang.String,int,int,int,int,int,java.lang.String,java.lang.String,java.lang.String)>(r1, i0, i1, i2, i3, i4, r2, r3, r4);

        r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbDevice mNewDevice> = $r12;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewConfigurations> = $r11;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewInterfaces> = $r14;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewEndpoints> = $r13;

        exitmonitor r5;

     label08:
        goto label11;

     label09:
        $r21 := @caughtexception;

        r6 = $r21;

        exitmonitor r5;

     label10:
        throw r6;

     label11:
        return 1;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void addUsbConfiguration(int, java.lang.String, int, int)
    {
        com.android.server.usb.UsbHostManager r0;
        int i0, i1, i2, $i3;
        java.lang.String r1;
        android.hardware.usb.UsbConfiguration $r2, $r3, $r4, $r7;
        java.util.ArrayList $r5, $r6, $r8, $r11;
        android.hardware.usb.UsbInterface[] $r9;
        java.lang.Object[] $r10;
        android.os.Parcelable[] $r12;

        r0 := @this: com.android.server.usb.UsbHostManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbConfiguration mNewConfiguration>;

        if $r2 == null goto label1;

        $r7 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbConfiguration mNewConfiguration>;

        $r8 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewInterfaces>;

        $r6 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewInterfaces>;

        $i3 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $r9 = newarray (android.hardware.usb.UsbInterface)[$i3];

        $r10 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r12 = (android.os.Parcelable[]) $r10;

        virtualinvoke $r7.<android.hardware.usb.UsbConfiguration: void setInterfaces(android.os.Parcelable[])>($r12);

        $r11 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewInterfaces>;

        virtualinvoke $r11.<java.util.ArrayList: void clear()>();

     label1:
        $r3 = new android.hardware.usb.UsbConfiguration;

        specialinvoke $r3.<android.hardware.usb.UsbConfiguration: void <init>(int,java.lang.String,int,int)>(i0, r1, i1, i2);

        r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbConfiguration mNewConfiguration> = $r3;

        $r5 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewConfigurations>;

        $r4 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbConfiguration mNewConfiguration>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        return;
    }

    private void addUsbInterface(int, java.lang.String, int, int, int, int)
    {
        com.android.server.usb.UsbHostManager r0;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.String r1;
        android.hardware.usb.UsbInterface $r2, $r3, $r4, $r7;
        java.util.ArrayList $r5, $r6, $r8, $r11;
        java.lang.Object[] $r9;
        android.hardware.usb.UsbEndpoint[] $r10;
        android.os.Parcelable[] $r12;

        r0 := @this: com.android.server.usb.UsbHostManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        $r2 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbInterface mNewInterface>;

        if $r2 == null goto label1;

        $r7 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbInterface mNewInterface>;

        $r8 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewEndpoints>;

        $r6 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewEndpoints>;

        $i5 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $r10 = newarray (android.hardware.usb.UsbEndpoint)[$i5];

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (android.os.Parcelable[]) $r9;

        virtualinvoke $r7.<android.hardware.usb.UsbInterface: void setEndpoints(android.os.Parcelable[])>($r12);

        $r11 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewEndpoints>;

        virtualinvoke $r11.<java.util.ArrayList: void clear()>();

     label1:
        $r3 = new android.hardware.usb.UsbInterface;

        specialinvoke $r3.<android.hardware.usb.UsbInterface: void <init>(int,int,java.lang.String,int,int,int)>(i0, i1, r1, i2, i3, i4);

        r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbInterface mNewInterface> = $r3;

        $r5 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewInterfaces>;

        $r4 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbInterface mNewInterface>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        return;
    }

    private void addUsbEndpoint(int, int, int, int)
    {
        com.android.server.usb.UsbHostManager r0;
        int i0, i1, i2, i3;
        android.hardware.usb.UsbEndpoint $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.usb.UsbHostManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r2 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewEndpoints>;

        $r1 = new android.hardware.usb.UsbEndpoint;

        specialinvoke $r1.<android.hardware.usb.UsbEndpoint: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return;
    }

    private void endUsbDeviceAdded()
    {
        com.android.server.usb.UsbHostManager r0;
        boolean z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18;
        android.hardware.usb.UsbInterface r1, $r3, $r36;
        java.lang.Throwable r2, $r41;
        android.hardware.usb.UsbConfiguration $r4, $r31;
        java.lang.Object $r5, $r33, r45;
        android.hardware.usb.UsbDevice $r6, $r12, $r14, $r17, $r21, $r30;
        java.lang.String $r7, $r20, $r23, $r26;
        android.alsa.AlsaCardsParser $r8, r46;
        android.alsa.AlsaDevicesParser $r9, r47;
        java.util.ArrayList $r10, $r11, $r28, $r29, $r32, $r35, $r37, $r38;
        android.os.Parcelable[] $r13, $r34, $r44;
        android.hardware.usb.UsbConfiguration[] $r15;
        java.lang.Object[] $r16, $r40, $r43;
        java.util.HashMap $r19;
        java.lang.StringBuilder $r22, $r24, $r27;
        com.android.server.usb.UsbSettingsManager $r25;
        android.hardware.usb.UsbInterface[] $r39;
        android.hardware.usb.UsbEndpoint[] $r42;

        r0 := @this: com.android.server.usb.UsbHostManager;

        $r3 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbInterface mNewInterface>;

        if $r3 == null goto label01;

        $r36 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbInterface mNewInterface>;

        $r37 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewEndpoints>;

        $r35 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewEndpoints>;

        $i18 = virtualinvoke $r35.<java.util.ArrayList: int size()>();

        $r42 = newarray (android.hardware.usb.UsbEndpoint)[$i18];

        $r43 = virtualinvoke $r37.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r42);

        $r44 = (android.os.Parcelable[]) $r43;

        virtualinvoke $r36.<android.hardware.usb.UsbInterface: void setEndpoints(android.os.Parcelable[])>($r44);

     label01:
        $r4 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbConfiguration mNewConfiguration>;

        if $r4 == null goto label02;

        $r31 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbConfiguration mNewConfiguration>;

        $r38 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewInterfaces>;

        $r32 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewInterfaces>;

        $i17 = virtualinvoke $r32.<java.util.ArrayList: int size()>();

        $r39 = newarray (android.hardware.usb.UsbInterface)[$i17];

        $r40 = virtualinvoke $r38.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r39);

        $r34 = (android.os.Parcelable[]) $r40;

        virtualinvoke $r31.<android.hardware.usb.UsbConfiguration: void setInterfaces(android.os.Parcelable[])>($r34);

     label02:
        z1 = 0;

        i0 = 0;

     label03:
        if z1 != 0 goto label05;

        $r29 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewInterfaces>;

        $i15 = virtualinvoke $r29.<java.util.ArrayList: int size()>();

        if i0 >= $i15 goto label05;

        $r28 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewInterfaces>;

        $r33 = virtualinvoke $r28.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r1 = (android.hardware.usb.UsbInterface) $r33;

        $i16 = virtualinvoke r1.<android.hardware.usb.UsbInterface: int getInterfaceClass()>();

        if $i16 != 1 goto label04;

        z1 = 1;

     label04:
        i0 = i0 + 1;

        goto label03;

     label05:
        $r5 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        r45 = $r5;

        entermonitor $r5;

     label06:
        $r6 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbDevice mNewDevice>;

        if $r6 == null goto label07;

        $r12 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbDevice mNewDevice>;

        $r10 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewConfigurations>;

        $r11 = r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewConfigurations>;

        $i13 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        $r15 = newarray (android.hardware.usb.UsbConfiguration)[$i13];

        $r16 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r15);

        $r13 = (android.os.Parcelable[]) $r16;

        virtualinvoke $r12.<android.hardware.usb.UsbDevice: void setConfigurations(android.os.Parcelable[])>($r13);

        $r19 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r14 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbDevice mNewDevice>;

        $r20 = virtualinvoke $r14.<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()>();

        $r17 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbDevice mNewDevice>;

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r17);

        $r23 = <com.android.server.usb.UsbHostManager: java.lang.String TAG>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added device ");

        $r21 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbDevice mNewDevice>;

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r23, $r26);

        $r25 = specialinvoke r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbSettingsManager getCurrentSettings()>();

        $r30 = r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbDevice mNewDevice>;

        virtualinvoke $r25.<com.android.server.usb.UsbSettingsManager: void deviceAttached(android.hardware.usb.UsbDevice)>($r30);

        goto label08;

     label07:
        $r7 = <com.android.server.usb.UsbHostManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r7, "mNewDevice is null in endUsbDeviceAdded");

     label08:
        r0.<com.android.server.usb.UsbHostManager: android.hardware.usb.UsbDevice mNewDevice> = null;

        r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewConfigurations> = null;

        r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewInterfaces> = null;

        r0.<com.android.server.usb.UsbHostManager: java.util.ArrayList mNewEndpoints> = null;

        exitmonitor r45;

     label09:
        goto label12;

     label10:
        $r41 := @caughtexception;

        r2 = $r41;

        exitmonitor r45;

     label11:
        throw r2;

     label12:
        if z1 != 0 goto label13;

        return;

     label13:
        $r8 = new android.alsa.AlsaCardsParser;

        specialinvoke $r8.<android.alsa.AlsaCardsParser: void <init>()>();

        r46 = $r8;

        virtualinvoke r46.<android.alsa.AlsaCardsParser: void scan()>();

        $r9 = new android.alsa.AlsaDevicesParser;

        specialinvoke $r9.<android.alsa.AlsaDevicesParser: void <init>()>();

        r47 = $r9;

        virtualinvoke r47.<android.alsa.AlsaDevicesParser: void scan()>();

        $i2 = virtualinvoke r46.<android.alsa.AlsaCardsParser: int getNumCardRecords()>();

        $i4 = $i2 - 1;

        r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbCard> = $i4;

        r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbDeviceNum> = 0;

        $i3 = r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbCard>;

        $z2 = virtualinvoke r47.<android.alsa.AlsaDevicesParser: boolean hasPlaybackDevices(int)>($i3);

        r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasPlayback> = $z2;

        $i5 = r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbCard>;

        $z3 = virtualinvoke r47.<android.alsa.AlsaDevicesParser: boolean hasCaptureDevices(int)>($i5);

        r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasCapture> = $z3;

        $i6 = r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbCard>;

        $z5 = virtualinvoke r47.<android.alsa.AlsaDevicesParser: boolean hasMIDIDevices(int)>($i6);

        r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasMIDI> = $z5;

        $z4 = r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasPlayback>;

        if $z4 == 0 goto label14;

        $i11 = r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbCard>;

        $i12 = r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbDeviceNum>;

        $z10 = specialinvoke r0.<com.android.server.usb.UsbHostManager: boolean waitForAlsaFile(int,int,boolean)>($i11, $i12, 0);

        if $z10 != 0 goto label14;

        return;

     label14:
        $z7 = r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasCapture>;

        if $z7 == 0 goto label15;

        $i9 = r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbCard>;

        $i10 = r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbDeviceNum>;

        $z11 = specialinvoke r0.<com.android.server.usb.UsbHostManager: boolean waitForAlsaFile(int,int,boolean)>($i9, $i10, 1);

        if $z11 != 0 goto label15;

        return;

     label15:
        $i7 = r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbCard>;

        $i8 = r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbDeviceNum>;

        $z8 = r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasPlayback>;

        $z9 = r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasCapture>;

        $z6 = r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasMIDI>;

        specialinvoke r0.<com.android.server.usb.UsbHostManager: void sendDeviceNotification(int,int,boolean,boolean,boolean,boolean)>($i7, $i8, 1, $z8, $z9, $z6);

        return;

        catch java.lang.Throwable from label06 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void usbDeviceRemoved(java.lang.String)
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.String r1;
        java.lang.Object r2, $r5, $r7;
        android.hardware.usb.UsbDevice r3;
        java.lang.Throwable r4, $r9;
        int $i0, $i1, $i2, $i3;
        java.util.HashMap $r6;
        com.android.server.usb.UsbSettingsManager $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbCard>;

        if $i0 == -1 goto label1;

        $i1 = r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbDeviceNum>;

        if $i1 == -1 goto label1;

        $i3 = r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbCard>;

        $i2 = r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbDeviceNum>;

        $z2 = r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasPlayback>;

        $z1 = r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasCapture>;

        $z0 = r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasMIDI>;

        specialinvoke r0.<com.android.server.usb.UsbHostManager: void sendDeviceNotification(int,int,boolean,boolean,boolean,boolean)>($i3, $i2, 0, $z2, $z1, $z0);

        r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbCard> = -1;

        r0.<com.android.server.usb.UsbHostManager: int mConnectedUsbDeviceNum> = -1;

        r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasPlayback> = 0;

        r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasCapture> = 0;

        r0.<com.android.server.usb.UsbHostManager: boolean mConnectedHasMIDI> = 0;

     label1:
        $r5 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label2:
        $r6 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (android.hardware.usb.UsbDevice) $r7;

        if r3 == null goto label3;

        $r8 = specialinvoke r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbSettingsManager getCurrentSettings()>();

        virtualinvoke $r8.<com.android.server.usb.UsbSettingsManager: void deviceDetached(android.hardware.usb.UsbDevice)>(r3);

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void systemReady()
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.Object r1, $r4;
        com.android.server.usb.UsbHostManager$1 r2, $r5;
        java.lang.Throwable r3, $r7;
        java.lang.Thread $r6;

        r0 := @this: com.android.server.usb.UsbHostManager;

        $r4 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = new com.android.server.usb.UsbHostManager$1;

        specialinvoke $r5.<com.android.server.usb.UsbHostManager$1: void <init>(com.android.server.usb.UsbHostManager)>(r0);

        r2 = $r5;

        $r6 = new java.lang.Thread;

        specialinvoke $r6.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>(null, r2, "UsbService host thread");

        virtualinvoke $r6.<java.lang.Thread: void start()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void getDeviceList(android.os.Bundle)
    {
        com.android.server.usb.UsbHostManager r0;
        android.os.Bundle r1;
        java.lang.Object r2, $r6, $r9, $r11;
        java.util.Iterator r3;
        java.lang.String r4;
        java.lang.Throwable r5, $r13;
        java.util.HashMap $r7, $r10;
        java.util.Set $r8;
        boolean $z0;
        android.os.Parcelable $r12;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: android.os.Bundle;

        $r6 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set keySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r9;

        $r10 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        $r12 = (android.os.Parcelable) $r11;

        virtualinvoke r1.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>(r4, $r12);

        goto label2;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        r5 = $r13;

        exitmonitor r2;

     label6:
        throw r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public android.os.ParcelFileDescriptor openDevice(java.lang.String)
    {
        com.android.server.usb.UsbHostManager r0;
        java.lang.String r1, $r14;
        java.lang.Object r2, $r5, $r7;
        android.hardware.usb.UsbDevice r3;
        java.lang.Throwable r4, $r16;
        boolean $z0;
        java.util.HashMap $r6;
        com.android.server.usb.UsbSettingsManager $r8;
        android.os.ParcelFileDescriptor $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r15;
        java.lang.SecurityException $r17;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $z0 = specialinvoke r0.<com.android.server.usb.UsbHostManager: boolean isBlackListed(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        $r17 = new java.lang.SecurityException;

        specialinvoke $r17.<java.lang.SecurityException: void <init>(java.lang.String)>("USB device is on a restricted bus");

        throw $r17;

     label2:
        $r6 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (android.hardware.usb.UsbDevice) $r7;

        if r3 != null goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("device ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist or is restricted");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label3:
        $r8 = specialinvoke r0.<com.android.server.usb.UsbHostManager: com.android.server.usb.UsbSettingsManager getCurrentSettings()>();

        virtualinvoke $r8.<com.android.server.usb.UsbSettingsManager: void checkPermission(android.hardware.usb.UsbDevice)>(r3);

        $r9 = specialinvoke r0.<com.android.server.usb.UsbHostManager: android.os.ParcelFileDescriptor nativeOpenDevice(java.lang.String)>(r1);

        exitmonitor r2;

     label4:
        return $r9;

     label5:
        $r16 := @caughtexception;

        r4 = $r16;

        exitmonitor r2;

     label6:
        throw r4;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter)
    {
        com.android.server.usb.UsbHostManager r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.Object r3, $r7, $r10, $r15;
        java.util.Iterator r4;
        java.lang.String r5, $r17;
        java.lang.Throwable r6, $r19;
        java.util.HashMap $r8, $r16;
        java.util.Set $r9;
        boolean $z0;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r18;

        r0 := @this: com.android.server.usb.UsbHostManager;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        $r7 = r0.<com.android.server.usb.UsbHostManager: java.lang.Object mLock>;

        r3 = $r7;

        entermonitor $r7;

     label1:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  USB Host State:");

        $r8 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.util.Set keySet()>();

        r4 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r16 = r0.<com.android.server.usb.UsbHostManager: java.util.HashMap mDevices>;

        $r15 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r17);

        goto label2;

     label3:
        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r19 := @caughtexception;

        r6 = $r19;

        exitmonitor r3;

     label6:
        throw r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private native void monitorUsbHostBus();

    private native android.os.ParcelFileDescriptor nativeOpenDevice(java.lang.String);

    static void access$000(com.android.server.usb.UsbHostManager)
    {
        com.android.server.usb.UsbHostManager r0;

        r0 := @parameter0: com.android.server.usb.UsbHostManager;

        specialinvoke r0.<com.android.server.usb.UsbHostManager: void monitorUsbHostBus()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.server.usb.UsbHostManager: boolean DEBUG_AUDIO> = 0;

        $r0 = class "com/android/server/usb/UsbHostManager";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.usb.UsbHostManager: java.lang.String TAG> = $r1;

        return;
    }
}
