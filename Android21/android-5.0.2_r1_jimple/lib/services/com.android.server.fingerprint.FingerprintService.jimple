public class com.android.server.fingerprint.FingerprintService extends com.android.server.SystemService
{
    private final java.lang.String TAG;
    private static final boolean DEBUG;
    private android.util.ArrayMap mClients;
    private static final int MSG_NOTIFY;
    android.os.Handler mHandler;
    private android.content.Context mContext;
    private static final int STATE_IDLE;
    private static final int STATE_LISTENING;
    private static final int STATE_ENROLLING;
    private static final int STATE_REMOVING;
    private static final long MS_PER_SEC;
    public static final java.lang.String USE_FINGERPRINT;
    public static final java.lang.String ENROLL_FINGERPRINT;

    public void <init>(android.content.Context)
    {
        com.android.server.fingerprint.FingerprintService r0;
        android.content.Context r1;
        android.util.ArrayMap $r2;
        com.android.server.fingerprint.FingerprintService$1 $r3;

        r0 := @this: com.android.server.fingerprint.FingerprintService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        r0.<com.android.server.fingerprint.FingerprintService: java.lang.String TAG> = "FingerprintService";

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients> = $r2;

        $r3 = new com.android.server.fingerprint.FingerprintService$1;

        specialinvoke $r3.<com.android.server.fingerprint.FingerprintService$1: void <init>(com.android.server.fingerprint.FingerprintService)>(r0);

        r0.<com.android.server.fingerprint.FingerprintService: android.os.Handler mHandler> = $r3;

        r0.<com.android.server.fingerprint.FingerprintService: android.content.Context mContext> = r1;

        virtualinvoke r0.<com.android.server.fingerprint.FingerprintService: void nativeInit(com.android.server.fingerprint.FingerprintService)>(r0);

        return;
    }

    native int nativeEnroll(int);

    native int nativeEnrollCancel();

    native int nativeRemove(int);

    native int nativeOpenHal();

    native int nativeCloseHal();

    native void nativeInit(com.android.server.fingerprint.FingerprintService);

    void notify(int, int, int)
    {
        com.android.server.fingerprint.FingerprintService r0;
        int i0, i1, i2;
        android.os.Handler $r1;
        java.lang.Integer $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.fingerprint.FingerprintService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<com.android.server.fingerprint.FingerprintService: android.os.Handler mHandler>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r3 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(10, i0, i1, $r2);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    void handleNotify(int, int, int)
    {
        com.android.server.fingerprint.FingerprintService r0;
        int i0, i1, i2, i3, i4, $i6, $i8, $i9, $i11, i17, i18, i19, i20, i21;
        com.android.server.fingerprint.FingerprintService$ClientData r1;
        android.os.RemoteException r2, r3, $r35, $r36, $r45, $r52, $r55, r58, r59, r60;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r16, $r17, $r18, $r20;
        java.lang.String $r12, $r19;
        android.util.ArrayMap $r13, $r15, $r33, $r34, $r41, $r42, $r43, $r44, $r46, $r47, $r56, $r57;
        java.lang.Object $r14, $r38, $r40, $r48, $r50, $r53;
        android.service.fingerprint.IFingerprintServiceReceiver $r21, $r23, $r25, $r27, $r28, $r30, $r31;
        android.content.ContentResolver $r22, $r32;
        android.content.Context $r24, $r29;
        java.lang.IllegalStateException $r26;

        r0 := @this: com.android.server.fingerprint.FingerprintService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleNotify(msg=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", arg1=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", arg2=");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("FingerprintService", $r12);

        i3 = 0;

     label01:
        $r13 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $i6 = virtualinvoke $r13.<android.util.ArrayMap: int size()>();

        if i3 >= $i6 goto label30;

        $r15 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r14 = virtualinvoke $r15.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        r1 = (com.android.server.fingerprint.FingerprintService$ClientData) $r14;

        if r1 == null goto label02;

        $r21 = r1.<com.android.server.fingerprint.FingerprintService$ClientData: android.service.fingerprint.IFingerprintServiceReceiver receiver>;

        if $r21 != null goto label03;

     label02:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clientData at ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is invalid!!");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("FingerprintService", $r19);

        goto label29;

     label03:
        tableswitch(i0)
        {
            case -1: goto label04;
            case 0: goto label29;
            case 1: goto label09;
            case 2: goto label13;
            case 3: goto label17;
            case 4: goto label23;
            default: goto label29;
        };

     label04:
        i4 = i1;

     label05:
        $r23 = r1.<com.android.server.fingerprint.FingerprintService$ClientData: android.service.fingerprint.IFingerprintServiceReceiver receiver>;

        interfaceinvoke $r23.<android.service.fingerprint.IFingerprintServiceReceiver: void onError(int)>(i4);

     label06:
        goto label08;

     label07:
        $r45 := @caughtexception;

        r2 = $r45;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintService", "can\'t send message to client. Did it die?", r2);

        $r43 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r44 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r50 = virtualinvoke $r44.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        virtualinvoke $r43.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r50);

     label08:
        goto label29;

     label09:
        i17 = i1;

     label10:
        $r31 = r1.<com.android.server.fingerprint.FingerprintService$ClientData: android.service.fingerprint.IFingerprintServiceReceiver receiver>;

        interfaceinvoke $r31.<android.service.fingerprint.IFingerprintServiceReceiver: void onAcquired(int)>(i17);

     label11:
        goto label29;

     label12:
        $r55 := @caughtexception;

        r58 = $r55;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintService", "can\'t send message to client. Did it die?", r58);

        $r57 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r56 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r53 = virtualinvoke $r56.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        virtualinvoke $r57.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r53);

        goto label29;

     label13:
        i18 = i1;

     label14:
        $r30 = r1.<com.android.server.fingerprint.FingerprintService$ClientData: android.service.fingerprint.IFingerprintServiceReceiver receiver>;

        interfaceinvoke $r30.<android.service.fingerprint.IFingerprintServiceReceiver: void onProcessed(int)>(i18);

     label15:
        goto label29;

     label16:
        $r35 := @caughtexception;

        r59 = $r35;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintService", "can\'t send message to client. Did it die?", r59);

        $r33 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r34 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r38 = virtualinvoke $r34.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        virtualinvoke $r33.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r38);

        goto label29;

     label17:
        i19 = i1;

        i20 = i2;

        $i9 = r1.<com.android.server.fingerprint.FingerprintService$ClientData: int state>;

        if $i9 != 2 goto label22;

     label18:
        $r28 = r1.<com.android.server.fingerprint.FingerprintService$ClientData: android.service.fingerprint.IFingerprintServiceReceiver receiver>;

        interfaceinvoke $r28.<android.service.fingerprint.IFingerprintServiceReceiver: void onEnrollResult(int,int)>(i19, i20);

     label19:
        goto label21;

     label20:
        $r36 := @caughtexception;

        r3 = $r36;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintService", "can\'t send message to client. Did it die?", r3);

        $r41 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r42 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r40 = virtualinvoke $r42.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        virtualinvoke $r41.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r40);

     label21:
        if i20 != 0 goto label29;

        $r29 = r0.<com.android.server.fingerprint.FingerprintService: android.content.Context mContext>;

        $r32 = virtualinvoke $r29.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i11 = r1.<com.android.server.fingerprint.FingerprintService$ClientData: int userId>;

        staticinvoke <android.service.fingerprint.FingerprintUtils: void addFingerprintIdForUser(int,android.content.ContentResolver,int)>(i19, $r32, $i11);

        r1.<com.android.server.fingerprint.FingerprintService$ClientData: int state> = 0;

        goto label29;

     label22:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("FingerprintService", "Client not enrolling");

        goto label29;

     label23:
        i21 = i1;

        if i21 != 0 goto label24;

        $r26 = new java.lang.IllegalStateException;

        specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Got illegal id from HAL");

        throw $r26;

     label24:
        $r24 = r0.<com.android.server.fingerprint.FingerprintService: android.content.Context mContext>;

        $r22 = virtualinvoke $r24.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i8 = r1.<com.android.server.fingerprint.FingerprintService$ClientData: int userId>;

        staticinvoke <android.service.fingerprint.FingerprintUtils: boolean removeFingerprintIdForUser(int,android.content.ContentResolver,int)>(i21, $r22, $i8);

        $r27 = r1.<com.android.server.fingerprint.FingerprintService$ClientData: android.service.fingerprint.IFingerprintServiceReceiver receiver>;

        if $r27 == null goto label28;

     label25:
        $r25 = r1.<com.android.server.fingerprint.FingerprintService$ClientData: android.service.fingerprint.IFingerprintServiceReceiver receiver>;

        interfaceinvoke $r25.<android.service.fingerprint.IFingerprintServiceReceiver: void onRemoved(int)>(i21);

     label26:
        goto label28;

     label27:
        $r52 := @caughtexception;

        r60 = $r52;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintService", "can\'t send message to client. Did it die?", r60);

        $r47 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r46 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r48 = virtualinvoke $r46.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        virtualinvoke $r47.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r48);

     label28:
        r1.<com.android.server.fingerprint.FingerprintService$ClientData: int state> = 1;

     label29:
        i3 = i3 + 1;

        goto label01;

     label30:
        return;

        catch android.os.RemoteException from label05 to label06 with label07;
        catch android.os.RemoteException from label10 to label11 with label12;
        catch android.os.RemoteException from label14 to label15 with label16;
        catch android.os.RemoteException from label18 to label19 with label20;
        catch android.os.RemoteException from label25 to label26 with label27;
    }

    void startEnroll(android.os.IBinder, long, int)
    {
        com.android.server.fingerprint.FingerprintService r0;
        android.os.IBinder r1;
        long l0, $l4;
        int i1, $i3, $i5;
        com.android.server.fingerprint.FingerprintService$ClientData r2;
        android.util.ArrayMap $r3;
        java.lang.Object $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.fingerprint.FingerprintService;

        r1 := @parameter0: android.os.IBinder;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $r3 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.fingerprint.FingerprintService$ClientData) $r4;

        if r2 == null goto label2;

        $i3 = r2.<com.android.server.fingerprint.FingerprintService$ClientData: int userId>;

        if $i3 == i1 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Bad user");

        throw $r5;

     label1:
        r2.<com.android.server.fingerprint.FingerprintService$ClientData: int state> = 2;

        $l4 = l0 / 1000L;

        $i5 = (int) $l4;

        virtualinvoke r0.<com.android.server.fingerprint.FingerprintService: int nativeEnroll(int)>($i5);

        goto label3;

     label2:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("FingerprintService", "enroll(): No listener registered");

     label3:
        return;
    }

    void startEnrollCancel(android.os.IBinder, int)
    {
        com.android.server.fingerprint.FingerprintService r0;
        android.os.IBinder r1;
        int i0, $i2;
        com.android.server.fingerprint.FingerprintService$ClientData r2;
        android.util.ArrayMap $r3;
        java.lang.Object $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.server.fingerprint.FingerprintService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.fingerprint.FingerprintService$ClientData) $r4;

        if r2 == null goto label2;

        $i2 = r2.<com.android.server.fingerprint.FingerprintService$ClientData: int userId>;

        if $i2 == i0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Bad user");

        throw $r5;

     label1:
        r2.<com.android.server.fingerprint.FingerprintService$ClientData: int state> = 1;

        virtualinvoke r0.<com.android.server.fingerprint.FingerprintService: int nativeEnrollCancel()>();

        goto label3;

     label2:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("FingerprintService", "enrollCancel(): No listener registered");

     label3:
        return;
    }

    void startRemove(android.os.IBinder, int, int)
    {
        com.android.server.fingerprint.FingerprintService r0;
        android.os.IBinder r1;
        int i0, i1, i2, $i4;
        com.android.server.fingerprint.FingerprintService$ClientData r2;
        android.util.ArrayMap $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r11, $r13;
        java.lang.String $r9, $r12;
        java.lang.IllegalStateException $r14;

        r0 := @this: com.android.server.fingerprint.FingerprintService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.fingerprint.FingerprintService$ClientData) $r4;

        if r2 == null goto label3;

        $i4 = r2.<com.android.server.fingerprint.FingerprintService$ClientData: int userId>;

        if $i4 == i1 goto label1;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Bad user");

        throw $r14;

     label1:
        r2.<com.android.server.fingerprint.FingerprintService$ClientData: int state> = 3;

        i2 = virtualinvoke r0.<com.android.server.fingerprint.FingerprintService: int nativeRemove(int)>(i0);

        if i2 == 0 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error removing fingerprint with id = ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("FingerprintService", $r12);

     label2:
        goto label4;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("remove(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): No listener registered");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("FingerprintService", $r9);

     label4:
        return;
    }

    void addListener(android.os.IBinder, android.service.fingerprint.IFingerprintServiceReceiver, int)
    {
        com.android.server.fingerprint.FingerprintService r0;
        android.os.IBinder r1;
        android.service.fingerprint.IFingerprintServiceReceiver r2;
        int i0;
        com.android.server.fingerprint.FingerprintService$ClientData r3, $r16;
        android.os.RemoteException r4, $r21;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r12, $r13, $r15;
        java.lang.String $r9, $r14;
        android.util.ArrayMap $r10, $r20;
        java.lang.Object $r11;
        com.android.server.fingerprint.FingerprintService$TokenWatcher $r17, $r18;

        r0 := @this: com.android.server.fingerprint.FingerprintService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.service.fingerprint.IFingerprintServiceReceiver;

        i0 := @parameter2: int;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startListening(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("FingerprintService", $r9);

        $r10 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r11 = virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r11 != null goto label5;

        $r16 = new com.android.server.fingerprint.FingerprintService$ClientData;

        specialinvoke $r16.<com.android.server.fingerprint.FingerprintService$ClientData: void <init>(com.android.server.fingerprint.FingerprintService$1)>(null);

        r3 = $r16;

        r3.<com.android.server.fingerprint.FingerprintService$ClientData: int state> = 1;

        r3.<com.android.server.fingerprint.FingerprintService$ClientData: android.service.fingerprint.IFingerprintServiceReceiver receiver> = r2;

        r3.<com.android.server.fingerprint.FingerprintService$ClientData: int userId> = i0;

        $r18 = new com.android.server.fingerprint.FingerprintService$TokenWatcher;

        specialinvoke $r18.<com.android.server.fingerprint.FingerprintService$TokenWatcher: void <init>(com.android.server.fingerprint.FingerprintService,android.os.IBinder)>(r0, r1);

        r3.<com.android.server.fingerprint.FingerprintService$ClientData: com.android.server.fingerprint.FingerprintService$TokenWatcher tokenWatcher> = $r18;

     label1:
        $r17 = r3.<com.android.server.fingerprint.FingerprintService$ClientData: com.android.server.fingerprint.FingerprintService$TokenWatcher tokenWatcher>;

        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r17, 0);

        $r20 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        virtualinvoke $r20.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

     label2:
        goto label4;

     label3:
        $r21 := @caughtexception;

        r4 = $r21;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("FingerprintService", "caught remote exception in linkToDeath: ", r4);

     label4:
        goto label6;

     label5:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listener already registered for ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("FingerprintService", $r14);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void removeListener(android.os.IBinder, int)
    {
        com.android.server.fingerprint.FingerprintService r0;
        android.os.IBinder r1;
        int i0;
        com.android.server.fingerprint.FingerprintService$ClientData r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r10, $r11, $r13;
        java.lang.String $r7, $r12;
        android.util.ArrayMap $r8, $r14, $r17;
        java.lang.Object $r9;
        com.android.server.fingerprint.FingerprintService$TokenWatcher $r15;

        r0 := @this: com.android.server.fingerprint.FingerprintService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopListening(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("FingerprintService", $r7);

        $r8 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.fingerprint.FingerprintService$ClientData) $r9;

        if r2 == null goto label1;

        $r15 = r2.<com.android.server.fingerprint.FingerprintService$ClientData: com.android.server.fingerprint.FingerprintService$TokenWatcher tokenWatcher>;

        interfaceinvoke r1.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>($r15, 0);

        $r17 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listener not registered: ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("FingerprintService", $r12);

     label2:
        $r14 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        virtualinvoke $r14.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    void checkPermission(java.lang.String)
    {
        com.android.server.fingerprint.FingerprintService r0;
        java.lang.String r1;

        r0 := @this: com.android.server.fingerprint.FingerprintService;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void onStart()
    {
        com.android.server.fingerprint.FingerprintService r0;
        com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper $r1;

        r0 := @this: com.android.server.fingerprint.FingerprintService;

        $r1 = new com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper;

        specialinvoke $r1.<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: void <init>(com.android.server.fingerprint.FingerprintService,com.android.server.fingerprint.FingerprintService$1)>(r0, null);

        virtualinvoke r0.<com.android.server.fingerprint.FingerprintService: void publishBinderService(java.lang.String,android.os.IBinder)>("fingerprint", $r1);

        virtualinvoke r0.<com.android.server.fingerprint.FingerprintService: int nativeOpenHal()>();

        return;
    }

    static android.util.ArrayMap access$000(com.android.server.fingerprint.FingerprintService)
    {
        com.android.server.fingerprint.FingerprintService r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: com.android.server.fingerprint.FingerprintService;

        $r1 = r0.<com.android.server.fingerprint.FingerprintService: android.util.ArrayMap mClients>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.server.fingerprint.FingerprintService: java.lang.String ENROLL_FINGERPRINT> = "android.permission.ENROLL_FINGERPRINT";

        <com.android.server.fingerprint.FingerprintService: java.lang.String USE_FINGERPRINT> = "android.permission.USE_FINGERPRINT";

        <com.android.server.fingerprint.FingerprintService: long MS_PER_SEC> = 1000L;

        <com.android.server.fingerprint.FingerprintService: int STATE_REMOVING> = 3;

        <com.android.server.fingerprint.FingerprintService: int STATE_ENROLLING> = 2;

        <com.android.server.fingerprint.FingerprintService: int STATE_LISTENING> = 1;

        <com.android.server.fingerprint.FingerprintService: int STATE_IDLE> = 0;

        <com.android.server.fingerprint.FingerprintService: int MSG_NOTIFY> = 10;

        <com.android.server.fingerprint.FingerprintService: boolean DEBUG> = 1;

        return;
    }
}
