class com.android.server.MountService extends android.os.storage.IMountService$Stub implements com.android.server.INativeDaemonConnectorCallbacks, com.android.server.Watchdog$Monitor
{
    static com.android.server.MountService sSelf;
    private static final boolean LOCAL_LOGD;
    private static final boolean DEBUG_UNMOUNT;
    private static final boolean DEBUG_EVENTS;
    private static final boolean DEBUG_OBB;
    private static final boolean WATCHDOG_ENABLE;
    private static final java.lang.String TAG;
    private static final java.lang.String VOLD_TAG;
    private static final int MAX_CONTAINERS;
    public static final java.lang.String[] CRYPTO_TYPES;
    private final android.content.Context mContext;
    private final com.android.server.NativeDaemonConnector mConnector;
    private final java.lang.Object mVolumesLock;
    private android.os.storage.StorageVolume mEmulatedTemplate;
    private final java.util.ArrayList mVolumes;
    private final java.util.HashMap mVolumesByPath;
    private final java.util.HashMap mVolumeStates;
    private volatile boolean mSystemReady;
    private com.android.server.pm.PackageManagerService mPms;
    private boolean mUmsEnabling;
    private boolean mUmsAvailable;
    private final java.util.ArrayList mListeners;
    private final java.util.concurrent.CountDownLatch mConnectedSignal;
    private final java.util.concurrent.CountDownLatch mAsecsScanned;
    private boolean mSendUmsConnectedOnBoot;
    private final java.util.HashSet mAsecMountSet;
    private static final int CRYPTO_ALGORITHM_KEY_SIZE;
    private static final int PBKDF2_HASH_ROUNDS;
    private final java.util.Map mObbMounts;
    private final java.util.Map mObbPathToStateMap;
    private final com.android.server.MountService$ObbActionHandler mObbActionHandler;
    private static final int OBB_RUN_ACTION;
    private static final int OBB_MCS_BOUND;
    private static final int OBB_MCS_UNBIND;
    private static final int OBB_MCS_RECONNECT;
    private static final int OBB_FLUSH_MOUNT_STATE;
    static final android.content.ComponentName DEFAULT_CONTAINER_COMPONENT;
    private final com.android.server.MountService$DefaultContainerConnection mDefContainerConn;
    private com.android.internal.app.IMediaContainerService mContainerService;
    private static final java.lang.String LAST_FSTRIM_FILE;
    private final java.io.File mLastMaintenanceFile;
    private long mLastMaintenance;
    private static final int H_UNMOUNT_PM_UPDATE;
    private static final int H_UNMOUNT_PM_DONE;
    private static final int H_UNMOUNT_MS;
    private static final int H_SYSTEM_READY;
    private static final int H_FSTRIM;
    private static final int RETRY_UNMOUNT_DELAY;
    private static final int MAX_UNMOUNT_RETRIES;
    private final android.os.Handler mHandler;
    private final android.content.BroadcastReceiver mUserReceiver;
    private final android.content.BroadcastReceiver mUsbReceiver;
    private static final java.lang.String TAG_STORAGE_LIST;
    private static final java.lang.String TAG_STORAGE;

    void waitForAsecScan()
    {
        com.android.server.MountService r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @this: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.concurrent.CountDownLatch mAsecsScanned>;

        specialinvoke r0.<com.android.server.MountService: void waitForLatch(java.util.concurrent.CountDownLatch)>($r1);

        return;
    }

    private void waitForReady()
    {
        com.android.server.MountService r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @this: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.concurrent.CountDownLatch mConnectedSignal>;

        specialinvoke r0.<com.android.server.MountService: void waitForLatch(java.util.concurrent.CountDownLatch)>($r1);

        return;
    }

    private void waitForLatch(java.util.concurrent.CountDownLatch)
    {
        com.android.server.MountService r0;
        java.util.concurrent.CountDownLatch r1;
        java.util.concurrent.TimeUnit $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r8, $r9;
        java.lang.Thread $r6;
        java.lang.String $r7, $r10;
        java.lang.InterruptedException $r11;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.util.concurrent.CountDownLatch;

     label1:
        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = virtualinvoke r1.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(5000L, $r3);

        if $z0 == 0 goto label3;

     label2:
        return;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread ");

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" still waiting for MountService ready...");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", $r10);

     label4:
        goto label1;

     label5:
        $r11 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", "Interrupt while waiting for MountService to be ready.");

        goto label1;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    private boolean isReady()
    {
        com.android.server.MountService r0;
        java.util.concurrent.TimeUnit $r2;
        java.util.concurrent.CountDownLatch $r3;
        boolean $z0;
        java.lang.InterruptedException $r4;

        r0 := @this: com.android.server.MountService;

     label1:
        $r3 = r0.<com.android.server.MountService: java.util.concurrent.CountDownLatch mConnectedSignal>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(0L, $r2);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private void handleSystemReady()
    {
        com.android.server.MountService r0;
        java.util.HashMap r1, $r8, $r9;
        java.lang.Object r2, $r7, $r11, $r14, $r15, $r16, $r17, r25;
        java.lang.Throwable r3, r6, $r21, $r22;
        java.lang.String r4, r5, $r20;
        int i0;
        java.util.Set $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.ArrayList $r12;
        android.content.Context $r13;
        java.lang.Object[] $r18;
        java.lang.Integer $r19;
        java.util.Iterator r23, r26;
        java.util.Map$Entry r24;
        android.os.storage.StorageVolume r27;

        r0 := @this: com.android.server.MountService;

        $r7 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        $r8 = new java.util.HashMap;

        $r9 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        specialinvoke $r8.<java.util.HashMap: void <init>(java.util.Map)>($r9);

        r1 = $r8;

        exitmonitor r2;

     label02:
        goto label05;

     label03:
        $r22 := @caughtexception;

        r3 = $r22;

        exitmonitor r2;

     label04:
        throw r3;

     label05:
        $r10 = virtualinvoke r1.<java.util.HashMap: java.util.Set entrySet()>();

        r23 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r16 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.util.Map$Entry) $r16;

        $r15 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        r4 = (java.lang.String) $r15;

        $r17 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (java.lang.String) $r17;

        $z4 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("unmounted");

        if $z4 == 0 goto label08;

        i0 = specialinvoke r0.<com.android.server.MountService: int doMountVolume(java.lang.String)>(r4);

        if i0 == 0 goto label07;

        $r18 = newarray (java.lang.Object)[1];

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r18[0] = $r19;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Boot-time mount failed (%d)", $r18);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r20);

     label07:
        goto label09;

     label08:
        $z5 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("shared");

        if $z5 == 0 goto label09;

        specialinvoke r0.<com.android.server.MountService: void notifyVolumeStateChange(java.lang.String,java.lang.String,int,int)>(null, r4, 0, 7);

     label09:
        goto label06;

     label10:
        $r11 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        r25 = $r11;

        entermonitor $r11;

     label11:
        $r12 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        r26 = virtualinvoke $r12.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r14 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r27 = (android.os.storage.StorageVolume) $r14;

        $z3 = virtualinvoke r27.<android.os.storage.StorageVolume: boolean isEmulated()>();

        if $z3 == 0 goto label13;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r27, "mounted");

     label13:
        goto label12;

     label14:
        exitmonitor r25;

     label15:
        goto label18;

     label16:
        $r21 := @caughtexception;

        r6 = $r21;

        exitmonitor r25;

     label17:
        throw r6;

     label18:
        $z2 = r0.<com.android.server.MountService: boolean mSendUmsConnectedOnBoot>;

        if $z2 == 0 goto label19;

        specialinvoke r0.<com.android.server.MountService: void sendUmsIntent(boolean)>(1);

        r0.<com.android.server.MountService: boolean mSendUmsConnectedOnBoot> = 0;

     label19:
        $r13 = r0.<com.android.server.MountService: android.content.Context mContext>;

        staticinvoke <com.android.server.MountServiceIdler: void scheduleIdlePass(android.content.Context)>($r13);

        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label11 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    void runIdleMaintenance(java.lang.Runnable)
    {
        com.android.server.MountService r0;
        java.lang.Runnable r1;
        android.os.Handler $r2, $r3;
        android.os.Message $r4;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.Runnable;

        $r3 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r2 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r4 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(5, r1);

        virtualinvoke $r3.<android.os.Handler: boolean sendMessage(android.os.Message)>($r4);

        return;
    }

    public void runMaintenance()
    {
        com.android.server.MountService r0;

        r0 := @this: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        virtualinvoke r0.<com.android.server.MountService: void runIdleMaintenance(java.lang.Runnable)>(null);

        return;
    }

    public long lastMaintenance()
    {
        com.android.server.MountService r0;
        long $l0;

        r0 := @this: com.android.server.MountService;

        $l0 = r0.<com.android.server.MountService: long mLastMaintenance>;

        return $l0;
    }

    private void doShareUnshareVolume(java.lang.String, java.lang.String, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, $r7, $r10;
        boolean z0, $z1;
        com.android.server.NativeDaemonConnectorException r3, $r11;
        java.lang.Object[] $r4, $r9;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("ums");

        if $z1 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r2;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Method %s not supported", $r9);

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label1:
        $r5 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[3];

        if z0 == 0 goto label2;

        $r7 = "share";

        goto label3;

     label2:
        $r7 = "unshare";

     label3:
        $r4[0] = $r7;

        $r4[1] = r1;

        $r4[2] = r2;

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("volume", $r4);

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MountService", "Failed to share/unshare", r3);

     label6:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label4 with label5;
    }

    private void updatePublicVolumeState(android.os.storage.StorageVolume, java.lang.String)
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume r1;
        java.lang.String r2, r3, r4, $r20, $r27, $r28, $r36;
        java.lang.Object r5, $r10, $r12, $r26;
        java.lang.Throwable r6, r9, $r35, $r40;
        com.android.server.MountService$MountServiceBinderListener r7;
        java.util.HashMap $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r21;
        java.util.ArrayList $r22, $r23, $r25, $r38, r42;
        int $i1, i5;
        android.os.storage.IMountServiceListener $r24;
        com.android.server.MountService$ObbActionHandler $r29, $r30;
        com.android.server.pm.PackageManagerService $r31, $r32;
        java.lang.Object[] $r33;
        android.os.Message $r34;
        android.os.RemoteException $r39;
        java.lang.Exception $r41, r43;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.os.storage.StorageVolume;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r10 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        r5 = $r10;

        entermonitor $r10;

     label01:
        $r11 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2);

        r4 = (java.lang.String) $r12;

        virtualinvoke r1.<android.os.storage.StorageVolume: void setState(java.lang.String)>(r2);

        exitmonitor r5;

     label02:
        goto label05;

     label03:
        $r35 := @caughtexception;

        r6 = $r35;

        exitmonitor r5;

     label04:
        throw r6;

     label05:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label06;

        $r33 = newarray (java.lang.Object)[3];

        $r33[0] = r2;

        $r33[1] = r2;

        $r33[2] = r3;

        $r36 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Duplicate state transition (%s -> %s) for %s", $r33);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", $r36);

        return;

     label06:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("volume state changed for ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("MountService", $r20);

        $z1 = virtualinvoke r1.<android.os.storage.StorageVolume: boolean isPrimary()>();

        if $z1 == 0 goto label08;

        $z2 = virtualinvoke r1.<android.os.storage.StorageVolume: boolean isEmulated()>();

        if $z2 != 0 goto label08;

        $r28 = "unmounted";

        $z4 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z4 == 0 goto label07;

        $r32 = r0.<com.android.server.MountService: com.android.server.pm.PackageManagerService mPms>;

        virtualinvoke $r32.<com.android.server.pm.PackageManagerService: void updateExternalMediaStatus(boolean,boolean)>(0, 0);

        $r30 = r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler>;

        $r29 = r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler>;

        $r34 = virtualinvoke $r29.<com.android.server.MountService$ObbActionHandler: android.os.Message obtainMessage(int,java.lang.Object)>(5, r3);

        virtualinvoke $r30.<com.android.server.MountService$ObbActionHandler: boolean sendMessage(android.os.Message)>($r34);

        goto label08;

     label07:
        $r27 = "mounted";

        $z3 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label08;

        $r31 = r0.<com.android.server.MountService: com.android.server.pm.PackageManagerService mPms>;

        virtualinvoke $r31.<com.android.server.pm.PackageManagerService: void updateExternalMediaStatus(boolean,boolean)>(1, 0);

     label08:
        $r23 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        r42 = $r23;

        entermonitor $r23;

     label09:
        $r22 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        $i1 = virtualinvoke $r22.<java.util.ArrayList: int size()>();

        i5 = $i1 - 1;

     label10:
        if i5 < 0 goto label16;

        $r25 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        $r26 = virtualinvoke $r25.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        r7 = (com.android.server.MountService$MountServiceBinderListener) $r26;

     label11:
        $r24 = r7.<com.android.server.MountService$MountServiceBinderListener: android.os.storage.IMountServiceListener mListener>;

        interfaceinvoke $r24.<android.os.storage.IMountServiceListener: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)>(r3, r4, r2);

     label12:
        goto label15;

     label13:
        $r39 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", "Listener dead");

        $r38 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        virtualinvoke $r38.<java.util.ArrayList: java.lang.Object remove(int)>(i5);

        goto label15;

     label14:
        $r41 := @caughtexception;

        r43 = $r41;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MountService", "Listener failed", r43);

     label15:
        i5 = i5 + -1;

        goto label10;

     label16:
        exitmonitor r42;

     label17:
        goto label20;

     label18:
        $r40 := @caughtexception;

        r9 = $r40;

        exitmonitor r42;

     label19:
        throw r9;

     label20:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch android.os.RemoteException from label11 to label12 with label13;
        catch java.lang.Exception from label11 to label12 with label14;
        catch java.lang.Throwable from label09 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public void onDaemonConnected()
    {
        com.android.server.MountService r0;
        com.android.server.MountService$3 $r1;

        r0 := @this: com.android.server.MountService;

        $r1 = new com.android.server.MountService$3;

        specialinvoke $r1.<com.android.server.MountService$3: void <init>(com.android.server.MountService,java.lang.String)>(r0, "MountService#onDaemonConnected");

        virtualinvoke $r1.<com.android.server.MountService$3: void start()>();

        return;
    }

    private void copyLocaleFromMountService()
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r9, $r16, $r17, $r18;
        android.content.res.Configuration r3, $r10;
        android.os.RemoteException r4, $r19, $r20;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r11, $r13, $r14, $r15;
        android.app.IActivityManager $r12;
        java.util.Locale r21;

        r0 := @this: com.android.server.MountService;

     label1:
        r1 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getField(java.lang.String)>("SystemLocale");

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        return;

     label4:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label5;

        return;

     label5:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got locale ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from mount service");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("MountService", $r9);

        r21 = staticinvoke <java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>(r1);

        $r10 = new android.content.res.Configuration;

        specialinvoke $r10.<android.content.res.Configuration: void <init>()>();

        r3 = $r10;

        virtualinvoke r3.<android.content.res.Configuration: void setLocale(java.util.Locale)>(r21);

     label6:
        $r12 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r12.<android.app.IActivityManager: void updateConfiguration(android.content.res.Configuration)>(r3);

     label7:
        goto label9;

     label8:
        $r19 := @caughtexception;

        r4 = $r19;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MountService", "Error setting system locale from mount service", r4);

     label9:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting system properties to ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from mount service");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("MountService", $r16);

        $r17 = virtualinvoke r21.<java.util.Locale: java.lang.String getLanguage()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.language", $r17);

        $r18 = virtualinvoke r21.<java.util.Locale: java.lang.String getCountry()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.country", $r18);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public boolean onCheckHoldWakeLock(int)
    {
        com.android.server.MountService r0;
        int i0;

        r0 := @this: com.android.server.MountService;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean onEvent(int, java.lang.String, java.lang.String[])
    {
        com.android.server.MountService r0;
        int i0, $i3, $i4, $i7, $i8, $i9, $i11;
        java.lang.String r1, r3, r4, r6, $r10, $r11, $r12, $r13, $r21, $r26, $r28, $r30, $r33, $r34, $r35, $r37, r39, r40, r42, r43, r44, r47;
        java.lang.String[] r2, r7;
        android.os.storage.StorageVolume r5, r41, r46;
        java.lang.Object r8, $r15, $r17, $r18, $r27, $r31;
        java.lang.Throwable r9, $r38;
        java.util.HashMap $r14, $r16, $r29, $r32;
        java.lang.Object[] $r19;
        java.lang.Integer $r20;
        long $l5;
        android.os.UserHandle $r22, $r23, $r24;
        com.android.server.MountService$4 $r25;
        boolean $z0;
        java.lang.Exception $r36, r45;

        r0 := @this: com.android.server.MountService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        if i0 != 605 goto label01;

        $r34 = r2[2];

        $r33 = r2[3];

        $r35 = r2[7];

        $i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r35);

        $r37 = r2[10];

        $i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r37);

        specialinvoke r0.<com.android.server.MountService: void notifyVolumeStateChange(java.lang.String,java.lang.String,int,int)>($r34, $r33, $i9, $i11);

        goto label28;

     label01:
        if i0 != 613 goto label05;

        r3 = r2[2];

        $i8 = lengthof r2;

        if $i8 <= 3 goto label02;

        $r30 = r2[3];

        goto label03;

     label02:
        $r30 = null;

     label03:
        r4 = $r30;

        $r32 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        $r31 = virtualinvoke $r32.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        r5 = (android.os.storage.StorageVolume) $r31;

        if r5 == null goto label04;

        virtualinvoke r5.<android.os.storage.StorageVolume: void setUuid(java.lang.String)>(r4);

     label04:
        goto label28;

     label05:
        if i0 != 614 goto label09;

        r39 = r2[2];

        $i7 = lengthof r2;

        if $i7 <= 3 goto label06;

        $r28 = r2[3];

        goto label07;

     label06:
        $r28 = null;

     label07:
        r40 = $r28;

        $r29 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        $r27 = virtualinvoke $r29.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r39);

        r41 = (android.os.storage.StorageVolume) $r27;

        if r41 == null goto label08;

        virtualinvoke r41.<android.os.storage.StorageVolume: void setUserLabel(java.lang.String)>(r40);

     label08:
        goto label28;

     label09:
        if i0 == 630 goto label10;

        if i0 == 631 goto label10;

        if i0 != 632 goto label27;

     label10:
        r42 = null;

        r43 = r2[2];

        r44 = r2[3];

     label11:
        $r11 = r2[6];

        $r10 = r2[6];

        $i4 = virtualinvoke $r10.<java.lang.String: int length()>();

        $i3 = $i4 - 1;

        r6 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int,int)>(1, $i3);

        r7 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $r12 = r7[0];

        staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12);

        $r13 = r7[1];

        staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

     label12:
        goto label14;

     label13:
        $r36 := @caughtexception;

        r45 = $r36;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MountService", "Failed to parse major/minor", r45);

     label14:
        $r15 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        r8 = $r15;

        entermonitor $r15;

     label15:
        $r14 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        $r17 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r44);

        r46 = (android.os.storage.StorageVolume) $r17;

        $r16 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r18 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r44);

        r47 = (java.lang.String) $r18;

        exitmonitor r8;

     label16:
        goto label19;

     label17:
        $r38 := @caughtexception;

        r9 = $r38;

        exitmonitor r8;

     label18:
        throw r9;

     label19:
        if i0 != 630 goto label20;

        $r25 = new com.android.server.MountService$4;

        specialinvoke $r25.<com.android.server.MountService$4: void <init>(com.android.server.MountService,java.lang.String,java.lang.String)>(r0, "MountService#VolumeDiskInserted", r44);

        virtualinvoke $r25.<com.android.server.MountService$4: void start()>();

        goto label25;

     label20:
        if i0 != 631 goto label22;

        $r26 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>(r44);

        $z0 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("bad_removal");

        if $z0 == 0 goto label21;

        return 1;

     label21:
        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r46, "unmounted");

        $r24 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke r0.<com.android.server.MountService: void sendStorageIntent(java.lang.String,android.os.storage.StorageVolume,android.os.UserHandle)>("android.intent.action.MEDIA_UNMOUNTED", r46, $r24);

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r46, "removed");

        r42 = "android.intent.action.MEDIA_REMOVED";

        goto label25;

     label22:
        if i0 != 632 goto label23;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r46, "unmounted");

        $r22 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke r0.<com.android.server.MountService: void sendStorageIntent(java.lang.String,android.os.storage.StorageVolume,android.os.UserHandle)>("android.intent.action.MEDIA_UNMOUNTED", r46, $r22);

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r46, "bad_removal");

        r42 = "android.intent.action.MEDIA_BAD_REMOVAL";

        goto label25;

     label23:
        if i0 != 700 goto label24;

        $l5 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        staticinvoke <com.android.server.EventLogTags: void writeFstrimFinish(long)>($l5);

        goto label25;

     label24:
        $r19 = newarray (java.lang.Object)[1];

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r19[0] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unknown code {%d}", $r19);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r21);

     label25:
        if r42 == null goto label26;

        $r23 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke r0.<com.android.server.MountService: void sendStorageIntent(java.lang.String,android.os.storage.StorageVolume,android.os.UserHandle)>(r42, r46, $r23);

     label26:
        goto label28;

     label27:
        return 0;

     label28:
        return 1;

        catch java.lang.Exception from label11 to label12 with label13;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    private void notifyVolumeStateChange(java.lang.String, java.lang.String, int, int)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, r4, $r13, r19;
        int i0, i1;
        android.os.storage.StorageVolume r3;
        java.lang.Object r5, $r7, $r9;
        java.lang.Throwable r6, $r17;
        java.util.HashMap $r8;
        java.lang.StringBuilder $r10, $r11, $r12, $r14;
        android.os.UserHandle $r15, $r16, $r18;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r7 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        r5 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (android.os.storage.StorageVolume) $r9;

        r4 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>(r2);

        exitmonitor r5;

     label02:
        goto label05;

     label03:
        $r17 := @caughtexception;

        r6 = $r17;

        exitmonitor r5;

     label04:
        throw r6;

     label05:
        r19 = null;

        if i0 != 7 goto label06;

        if i1 == i0 goto label06;

        $r18 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke r0.<com.android.server.MountService: void sendStorageIntent(java.lang.String,android.os.storage.StorageVolume,android.os.UserHandle)>("android.intent.action.MEDIA_UNSHARED", r3, $r18);

     label06:
        if i1 != -1 goto label07;

        goto label17;

     label07:
        if i1 != 0 goto label08;

        goto label17;

     label08:
        if i1 != 1 goto label09;

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("bad_removal");

        if $z1 != 0 goto label17;

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("nofs");

        if $z0 != 0 goto label17;

        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("unmountable");

        if $z3 != 0 goto label17;

        $z2 = specialinvoke r0.<com.android.server.MountService: boolean getUmsEnabling()>();

        if $z2 != 0 goto label17;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r3, "unmounted");

        r19 = "android.intent.action.MEDIA_UNMOUNTED";

        goto label17;

     label09:
        if i1 != 2 goto label10;

        goto label17;

     label10:
        if i1 != 3 goto label11;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r3, "checking");

        r19 = "android.intent.action.MEDIA_CHECKING";

        goto label17;

     label11:
        if i1 != 4 goto label12;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r3, "mounted");

        r19 = "android.intent.action.MEDIA_MOUNTED";

        goto label17;

     label12:
        if i1 != 5 goto label13;

        r19 = "android.intent.action.MEDIA_EJECT";

        goto label17;

     label13:
        if i1 != 6 goto label14;

        goto label17;

     label14:
        if i1 != 7 goto label15;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r3, "unmounted");

        $r16 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke r0.<com.android.server.MountService: void sendStorageIntent(java.lang.String,android.os.storage.StorageVolume,android.os.UserHandle)>("android.intent.action.MEDIA_UNMOUNTED", r3, $r16);

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r3, "shared");

        r19 = "android.intent.action.MEDIA_SHARED";

        goto label17;

     label15:
        if i1 != 8 goto label16;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", "Live shared mounts not supported yet!");

        return;

     label16:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled VolumeState {");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r13);

     label17:
        if r19 == null goto label18;

        $r15 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke r0.<com.android.server.MountService: void sendStorageIntent(java.lang.String,android.os.storage.StorageVolume,android.os.UserHandle)>(r19, r3, $r15);

     label18:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
    }

    private int doMountVolume(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r15;
        byte b0;
        android.os.storage.StorageVolume r2;
        java.lang.Object r3, $r5, $r7;
        java.lang.Throwable r4, $r13;
        int i1;
        java.util.HashMap $r6;
        boolean $z0, $z1;
        java.lang.Object[] $r8;
        com.android.server.NativeDaemonConnector $r9;
        com.android.server.NativeDaemonConnectorException $r11, r14;
        android.os.UserHandle $r12;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        b0 = 0;

        $r5 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        r3 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.os.storage.StorageVolume) $r7;

        exitmonitor r3;

     label02:
        goto label05;

     label03:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r3;

     label04:
        throw r4;

     label05:
        $z0 = virtualinvoke r2.<android.os.storage.StorageVolume: boolean isEmulated()>();

        if $z0 != 0 goto label06;

        $z1 = specialinvoke r0.<com.android.server.MountService: boolean hasUserRestriction(java.lang.String)>("no_physical_media");

        if $z1 == 0 goto label06;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", "User has restriction DISALLOW_MOUNT_PHYSICAL_MEDIA; cannot mount volume.");

        return -1;

     label06:
        $r9 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "mount";

        $r8[1] = r1;

        virtualinvoke $r9.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("volume", $r8);

     label07:
        goto label13;

     label08:
        $r11 := @caughtexception;

        r14 = $r11;

        r15 = null;

        i1 = virtualinvoke r14.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i1 != 401 goto label09;

        b0 = -2;

        goto label12;

     label09:
        if i1 != 402 goto label10;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r2, "nofs");

        r15 = "android.intent.action.MEDIA_NOFS";

        b0 = -3;

        goto label12;

     label10:
        if i1 != 403 goto label11;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r2, "unmountable");

        r15 = "android.intent.action.MEDIA_UNMOUNTABLE";

        b0 = -4;

        goto label12;

     label11:
        b0 = -1;

     label12:
        if r15 == null goto label13;

        $r12 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke r0.<com.android.server.MountService: void sendStorageIntent(java.lang.String,android.os.storage.StorageVolume,android.os.UserHandle)>(r15, r2, $r12);

     label13:
        return b0;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch com.android.server.NativeDaemonConnectorException from label06 to label07 with label08;
    }

    private int doUnmountVolume(java.lang.String, boolean, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r5;
        boolean z0, z1, $z2;
        com.android.server.NativeDaemonConnector$Command r2, $r8;
        java.util.HashSet r3, $r12, $r13;
        java.lang.Throwable r4, $r17;
        java.lang.Runtime $r6;
        com.android.server.pm.PackageManagerService $r7;
        java.lang.Object[] $r9;
        com.android.server.NativeDaemonConnector $r10;
        com.android.server.NativeDaemonConnectorException $r16, r18;
        int i0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r5 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>(r1);

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("mounted");

        if $z2 != 0 goto label01;

        return 404;

     label01:
        $r6 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r6.<java.lang.Runtime: void gc()>();

        $r7 = r0.<com.android.server.MountService: com.android.server.pm.PackageManagerService mPms>;

        virtualinvoke $r7.<com.android.server.pm.PackageManagerService: void updateExternalMediaStatus(boolean,boolean)>(0, 0);

     label02:
        $r8 = new com.android.server.NativeDaemonConnector$Command;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = "unmount";

        $r9[1] = r1;

        specialinvoke $r8.<com.android.server.NativeDaemonConnector$Command: void <init>(java.lang.String,java.lang.Object[])>("volume", $r9);

        r2 = $r8;

        if z1 == 0 goto label03;

        virtualinvoke r2.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>("force_and_revert");

        goto label04;

     label03:
        if z0 == 0 goto label04;

        virtualinvoke r2.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>("force");

     label04:
        $r10 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r10.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(com.android.server.NativeDaemonConnector$Command)>(r2);

        $r12 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        r3 = $r12;

        entermonitor $r12;

     label05:
        $r13 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        virtualinvoke $r13.<java.util.HashSet: void clear()>();

        exitmonitor r3;

     label06:
        goto label09;

     label07:
        $r17 := @caughtexception;

        r4 = $r17;

        exitmonitor r3;

     label08:
        throw r4;

     label09:
        return 0;

     label10:
        $r16 := @caughtexception;

        r18 = $r16;

        i0 = virtualinvoke r18.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i0 != 404 goto label11;

        return -5;

     label11:
        if i0 != 405 goto label12;

        return -7;

     label12:
        return -1;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch com.android.server.NativeDaemonConnectorException from label02 to label09 with label10;
    }

    private int doFormatVolume(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        com.android.server.NativeDaemonConnectorException r2, $r6;
        int i0;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "format";

        $r3[1] = r1;

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("volume", $r3);

     label2:
        return 0;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        i0 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i0 != 401 goto label4;

        return -2;

     label4:
        if i0 != 403 goto label5;

        return -4;

     label5:
        return -1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    private boolean doGetVolumeShared(java.lang.String, java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, $r7, $r14;
        com.android.server.NativeDaemonEvent r3;
        java.lang.Object[] $r5;
        com.android.server.NativeDaemonConnector $r6;
        int $i0;
        boolean $z0;
        com.android.server.NativeDaemonConnectorException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r6 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = "shared";

        $r5[1] = r1;

        $r5[2] = r2;

        r3 = virtualinvoke $r6.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("volume", $r5);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read response to volume shared ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r14);

        return 0;

     label4:
        $i0 = virtualinvoke r3.<com.android.server.NativeDaemonEvent: int getCode()>();

        if $i0 != 212 goto label5;

        $r7 = virtualinvoke r3.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>("enabled");

        return $z0;

     label5:
        return 0;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    private void notifyShareAvailabilityChange(boolean)
    {
        com.android.server.MountService r0;
        boolean z0, $z1, $z2;
        java.util.ArrayList r1, $r5, $r6, $r10, $r18;
        int i0, $i1;
        com.android.server.MountService$MountServiceBinderListener r2;
        java.lang.Throwable r4, $r15;
        java.lang.String $r7, $r8, $r9, r21;
        com.android.server.MountService$5 $r11;
        android.os.storage.IMountServiceListener $r12;
        java.lang.Object $r13;
        java.lang.Exception $r14, r19;
        android.os.RemoteException $r16;
        android.os.storage.StorageVolume r20;

        r0 := @this: com.android.server.MountService;

        z0 := @parameter0: boolean;

        $r5 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        r0.<com.android.server.MountService: boolean mUmsAvailable> = z0;

        $r6 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        $i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i0 = $i1 - 1;

     label02:
        if i0 < 0 goto label08;

        $r10 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        $r13 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.MountService$MountServiceBinderListener) $r13;

     label03:
        $r12 = r2.<com.android.server.MountService$MountServiceBinderListener: android.os.storage.IMountServiceListener mListener>;

        interfaceinvoke $r12.<android.os.storage.IMountServiceListener: void onUsbMassStorageConnectionChanged(boolean)>(z0);

     label04:
        goto label07;

     label05:
        $r16 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", "Listener dead");

        $r18 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        virtualinvoke $r18.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        goto label07;

     label06:
        $r14 := @caughtexception;

        r19 = $r14;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MountService", "Listener failed", r19);

     label07:
        i0 = i0 + -1;

        goto label02;

     label08:
        exitmonitor r1;

     label09:
        goto label12;

     label10:
        $r15 := @caughtexception;

        r4 = $r15;

        exitmonitor r1;

     label11:
        throw r4;

     label12:
        $z1 = r0.<com.android.server.MountService: boolean mSystemReady>;

        if $z1 != 1 goto label13;

        specialinvoke r0.<com.android.server.MountService: void sendUmsIntent(boolean)>(z0);

        goto label14;

     label13:
        r0.<com.android.server.MountService: boolean mSendUmsConnectedOnBoot> = z0;

     label14:
        r20 = specialinvoke r0.<com.android.server.MountService: android.os.storage.StorageVolume getPrimaryPhysicalVolume()>();

        if z0 != 0 goto label15;

        if r20 == null goto label15;

        $r7 = "shared";

        $r8 = virtualinvoke r20.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r9 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>($r8);

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label15;

        r21 = virtualinvoke r20.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r11 = new com.android.server.MountService$5;

        specialinvoke $r11.<com.android.server.MountService$5: void <init>(com.android.server.MountService,java.lang.String,java.lang.String)>(r0, "MountService#AvailabilityChange", r21);

        virtualinvoke $r11.<com.android.server.MountService$5: void start()>();

     label15:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Exception from label03 to label04 with label06;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void sendStorageIntent(java.lang.String, android.os.storage.StorageVolume, android.os.UserHandle)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r8, $r10, $r19;
        android.os.storage.StorageVolume r2;
        android.os.UserHandle r3;
        android.content.Intent r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r14, $r15, $r16, $r17, $r18;
        android.net.Uri $r11;
        android.content.Context $r20;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.storage.StorageVolume;

        r3 := @parameter2: android.os.UserHandle;

        $r5 = new android.content.Intent;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://");

        $r8 = virtualinvoke r2.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r10);

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>(r1, $r11);

        r4 = $r5;

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("storage_volume", r2);

        virtualinvoke r4.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendStorageIntent ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("MountService", $r19);

        $r20 = r0.<com.android.server.MountService: android.content.Context mContext>;

        virtualinvoke $r20.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r4, r3);

        return;
    }

    private void sendUmsIntent(boolean)
    {
        com.android.server.MountService r0;
        boolean z0;
        android.content.Intent $r1;
        android.content.Context $r2;
        android.os.UserHandle $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.MountService;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.MountService: android.content.Context mContext>;

        $r1 = new android.content.Intent;

        if z0 == 0 goto label1;

        $r4 = "android.intent.action.UMS_CONNECTED";

        goto label2;

     label1:
        $r4 = "android.intent.action.UMS_DISCONNECTED";

     label2:
        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>($r4);

        $r3 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r2.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r1, $r3);

        return;
    }

    private void validatePermission(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r5;
        android.content.Context $r2;
        int $i0;
        java.lang.SecurityException $r3;
        java.lang.Object[] $r4;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.MountService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r1);

        if $i0 == 0 goto label1;

        $r3 = new java.lang.SecurityException;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Requires %s permission", $r4);

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        return;
    }

    private boolean hasUserRestriction(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        android.os.UserManager r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.os.UserHandle $r5;
        boolean $z0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.MountService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        r2 = (android.os.UserManager) $r4;

        $r5 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        $z0 = virtualinvoke r2.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>(r1, $r5);

        return $z0;
    }

    private void validateUserRestriction(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r6;
        boolean $z0;
        java.lang.SecurityException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.MountService: boolean hasUserRestriction(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.SecurityException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User has restriction ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        return;
    }

    private void readStorageListLocked()
    {
        com.android.server.MountService r0;
        android.content.res.Resources r1;
        int i0, i1, i2, i4, $i5, $i10, $i13, i14;
        android.content.res.XmlResourceParser r2;
        android.util.AttributeSet r3;
        java.lang.String r4, r6, $r17, $r38, $r40;
        android.content.res.TypedArray r5;
        java.lang.CharSequence r7;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        long l3, $l6, $l7;
        com.android.server.pm.UserManagerService r8;
        android.content.pm.UserInfo r9;
        java.util.Iterator r10, r13, r56;
        java.lang.Throwable r11, $r46;
        android.os.storage.StorageVolume r12, $r41, $r44, r55, r57;
        java.util.HashMap $r14, $r37;
        java.util.ArrayList $r15, $r47, $r50;
        android.content.Context $r16;
        int[] $r18;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35;
        java.io.File $r36;
        java.lang.Object $r42, $r48, $r49;
        android.os.UserHandle $r43;
        java.util.List $r45;
        byte $b11, $b12;
        org.xmlpull.v1.XmlPullParserException $r51, r58;
        java.lang.RuntimeException $r52, $r54;
        java.io.IOException $r53, r59;

        r0 := @this: com.android.server.MountService;

        $r15 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        virtualinvoke $r15.<java.util.ArrayList: void clear()>();

        $r14 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        virtualinvoke $r14.<java.util.HashMap: void clear()>();

        $r16 = r0.<com.android.server.MountService: android.content.Context mContext>;

        r1 = virtualinvoke $r16.<android.content.Context: android.content.res.Resources getResources()>();

        i0 = 17891346;

        r2 = virtualinvoke r1.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(i0);

        r3 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r2);

     label01:
        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "StorageList");

     label02:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r2);

        r4 = interfaceinvoke r2.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        if r4 != null goto label03;

        goto label11;

     label03:
        $r17 = "storage";

        $z4 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z4 == 0 goto label10;

        $r18 = <com.android.internal.R$styleable: int[] Storage>;

        r5 = virtualinvoke r1.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>(r3, $r18);

        r6 = virtualinvoke r5.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        i1 = virtualinvoke r5.<android.content.res.TypedArray: int getResourceId(int,int)>(1, -1);

        r7 = virtualinvoke r5.<android.content.res.TypedArray: java.lang.CharSequence getText(int)>(1);

        z0 = virtualinvoke r5.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(2, 0);

        z1 = virtualinvoke r5.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(3, 0);

        z2 = virtualinvoke r5.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(4, 0);

        i2 = virtualinvoke r5.<android.content.res.TypedArray: int getInt(int,int)>(5, 0);

        z3 = virtualinvoke r5.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(6, 0);

        $i5 = virtualinvoke r5.<android.content.res.TypedArray: int getInt(int,int)>(7, 0);

        $l6 = (long) $i5;

        $l7 = $l6 * 1024L;

        l3 = $l7 * 1024L;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got storage path: ");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" description: ");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r27 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" primary: ");

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" removable: ");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r31 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" emulated: ");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mtpReserve: ");

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r35 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" allowMassStorage: ");

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z3);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" maxFileSize: ");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r40 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("MountService", $r40);

        if z2 == 0 goto label06;

        $r44 = new android.os.storage.StorageVolume;

        specialinvoke $r44.<android.os.storage.StorageVolume: void <init>(java.io.File,int,boolean,boolean,boolean,int,boolean,long,android.os.UserHandle)>(null, i1, 1, 0, 1, i2, 0, l3, null);

        r0.<com.android.server.MountService: android.os.storage.StorageVolume mEmulatedTemplate> = $r44;

        r8 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        $r45 = virtualinvoke r8.<com.android.server.pm.UserManagerService: java.util.List getUsers(boolean)>(0);

        r10 = interfaceinvoke $r45.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label05;

        $r42 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r9 = (android.content.pm.UserInfo) $r42;

        $r43 = virtualinvoke r9.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        specialinvoke r0.<com.android.server.MountService: void createEmulatedVolumeForUserLocked(android.os.UserHandle)>($r43);

        goto label04;

     label05:
        goto label09;

     label06:
        if r6 == null goto label07;

        if r7 != null goto label08;

     label07:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", "Missing storage path or description in readStorageList");

        goto label09;

     label08:
        $r41 = new android.os.storage.StorageVolume;

        $r36 = new java.io.File;

        specialinvoke $r36.<java.io.File: void <init>(java.lang.String)>(r6);

        specialinvoke $r41.<android.os.storage.StorageVolume: void <init>(java.io.File,int,boolean,boolean,boolean,int,boolean,long,android.os.UserHandle)>($r36, i1, z0, z1, z2, i2, z3, l3, null);

        r55 = $r41;

        specialinvoke r0.<com.android.server.MountService: void addVolumeLocked(android.os.storage.StorageVolume)>(r55);

        $r37 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r38 = virtualinvoke r55.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        virtualinvoke $r37.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, "unmounted");

        virtualinvoke r55.<android.os.storage.StorageVolume: void setState(java.lang.String)>("unmounted");

     label09:
        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

     label10:
        goto label02;

     label11:
        $z6 = virtualinvoke r0.<com.android.server.MountService: boolean isExternalStorageEmulated()>();

        if $z6 == 0 goto label12;

        $b11 = 1;

        goto label13;

     label12:
        $b11 = 0;

     label13:
        i14 = $b11;

        $r47 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        r56 = virtualinvoke $r47.<java.util.ArrayList: java.util.Iterator iterator()>();

     label14:
        $z8 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label16;

        $r48 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r57 = (android.os.storage.StorageVolume) $r48;

        $z7 = virtualinvoke r57.<android.os.storage.StorageVolume: boolean isEmulated()>();

        if $z7 != 0 goto label15;

        $i10 = i14;

        i14 = i14 + 1;

        virtualinvoke r57.<android.os.storage.StorageVolume: void setStorageId(int)>($i10);

     label15:
        goto label14;

     label16:
        interfaceinvoke r2.<android.content.res.XmlResourceParser: void close()>();

        goto label26;

     label17:
        $r51 := @caughtexception;

        r58 = $r51;

        $r52 = new java.lang.RuntimeException;

        specialinvoke $r52.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r58);

        throw $r52;

     label18:
        $r53 := @caughtexception;

        r59 = $r53;

        $r54 = new java.lang.RuntimeException;

        specialinvoke $r54.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r59);

        throw $r54;

     label19:
        $r46 := @caughtexception;

        r11 = $r46;

     label20:
        $z10 = virtualinvoke r0.<com.android.server.MountService: boolean isExternalStorageEmulated()>();

        if $z10 == 0 goto label21;

        $b12 = 1;

        goto label22;

     label21:
        $b12 = 0;

     label22:
        i4 = $b12;

        $r50 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        r13 = virtualinvoke $r50.<java.util.ArrayList: java.util.Iterator iterator()>();

     label23:
        $z11 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label25;

        $r49 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r12 = (android.os.storage.StorageVolume) $r49;

        $z9 = virtualinvoke r12.<android.os.storage.StorageVolume: boolean isEmulated()>();

        if $z9 != 0 goto label24;

        $i13 = i4;

        i4 = i4 + 1;

        virtualinvoke r12.<android.os.storage.StorageVolume: void setStorageId(int)>($i13);

     label24:
        goto label23;

     label25:
        interfaceinvoke r2.<android.content.res.XmlResourceParser: void close()>();

        throw r11;

     label26:
        return;

        catch org.xmlpull.v1.XmlPullParserException from label01 to label11 with label17;
        catch java.io.IOException from label01 to label11 with label18;
        catch java.lang.Throwable from label01 to label11 with label19;
        catch java.lang.Throwable from label17 to label20 with label19;
    }

    private void createEmulatedVolumeForUserLocked(android.os.UserHandle)
    {
        com.android.server.MountService r0;
        android.os.UserHandle r1;
        android.os.Environment$UserEnvironment r2, $r6;
        java.io.File r3;
        android.os.storage.StorageVolume r4, $r5, $r7;
        int $i0;
        boolean $z0;
        java.util.HashMap $r8;
        java.lang.String $r9;
        java.lang.IllegalStateException $r11;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.os.UserHandle;

        $r5 = r0.<com.android.server.MountService: android.os.storage.StorageVolume mEmulatedTemplate>;

        if $r5 != null goto label1;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing emulated volume multi-user template");

        throw $r11;

     label1:
        $r6 = new android.os.Environment$UserEnvironment;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        specialinvoke $r6.<android.os.Environment$UserEnvironment: void <init>(int)>($i0);

        r2 = $r6;

        r3 = virtualinvoke r2.<android.os.Environment$UserEnvironment: java.io.File getExternalStorageDirectory()>();

        $r7 = r0.<com.android.server.MountService: android.os.storage.StorageVolume mEmulatedTemplate>;

        r4 = staticinvoke <android.os.storage.StorageVolume: android.os.storage.StorageVolume fromTemplate(android.os.storage.StorageVolume,java.io.File,android.os.UserHandle)>($r7, r3, r1);

        virtualinvoke r4.<android.os.storage.StorageVolume: void setStorageId(int)>(0);

        specialinvoke r0.<com.android.server.MountService: void addVolumeLocked(android.os.storage.StorageVolume)>(r4);

        $z0 = r0.<com.android.server.MountService: boolean mSystemReady>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r4, "mounted");

        goto label3;

     label2:
        $r8 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r9 = virtualinvoke r4.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, "mounted");

        virtualinvoke r4.<android.os.storage.StorageVolume: void setState(java.lang.String)>("mounted");

     label3:
        return;
    }

    private void addVolumeLocked(android.os.storage.StorageVolume)
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume r1, r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r12, $r14, $r15, $r16, $r18;
        java.lang.String $r6, $r9, $r13, $r17;
        java.util.ArrayList $r7;
        java.util.HashMap $r8;
        java.lang.Object $r10;
        java.lang.IllegalStateException $r11;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.os.storage.StorageVolume;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addVolumeLocked() ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("MountService", $r6);

        $r7 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r8 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        $r9 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r10 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r1);

        r2 = (android.os.storage.StorageVolume) $r10;

        if r2 == null goto label1;

        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Volume at ");

        $r13 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists: ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label1:
        return;
    }

    private void removeVolumeLocked(android.os.storage.StorageVolume)
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5, $r8, $r11;
        java.util.ArrayList $r6;
        java.util.HashMap $r7, $r10;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.os.storage.StorageVolume;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeVolumeLocked() ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("MountService", $r5);

        $r6 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        virtualinvoke $r6.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r7 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        $r8 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r8);

        $r10 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r11 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r11);

        return;
    }

    private android.os.storage.StorageVolume getPrimaryPhysicalVolume()
    {
        com.android.server.MountService r0;
        java.lang.Object r1, $r5, $r7;
        java.util.Iterator r2;
        android.os.storage.StorageVolume r3;
        java.lang.Throwable r4, $r8;
        java.util.ArrayList $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.MountService;

        $r5 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        r2 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.os.storage.StorageVolume) $r7;

        $z1 = virtualinvoke r3.<android.os.storage.StorageVolume: boolean isPrimary()>();

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r3.<android.os.storage.StorageVolume: boolean isEmulated()>();

        if $z2 != 0 goto label4;

        exitmonitor r1;

     label3:
        return r3;

     label4:
        goto label2;

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r1;

     label8:
        throw r4;

     label9:
        return null;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.MountService r0;
        android.content.Context r1, $r29, $r43;
        java.lang.Object r2, $r8, $r20;
        java.lang.Throwable r3, $r46;
        android.os.storage.StorageVolume r4;
        java.io.File r5, r6, $r34, $r35, $r37, $r38, $r45, $r54;
        java.util.ArrayList $r9, $r12;
        java.util.HashMap $r10, $r11, $r16, $r17;
        java.util.concurrent.CountDownLatch $r13, $r14;
        java.util.HashSet $r15;
        com.android.server.MountService$1 $r18;
        com.android.server.MountService$DefaultContainerConnection $r19;
        com.android.server.MountService$2 $r21;
        android.os.IBinder $r22;
        android.os.HandlerThread $r23, r57;
        com.android.server.pm.PackageManagerService $r24;
        android.os.Looper $r25, $r36;
        com.android.server.MountService$MountServiceHandler $r26;
        android.os.Handler $r27, $r48;
        android.content.IntentFilter $r28, $r44, r58;
        android.content.BroadcastReceiver $r30, $r49;
        com.android.server.MountService$ObbActionHandler $r31;
        com.android.server.IoThread $r32;
        long $l0;
        boolean $z0, $z1;
        com.android.server.NativeDaemonConnector $r39, $r41;
        java.io.FileOutputStream $r40;
        java.lang.Thread $r42, r59;
        java.lang.StringBuilder $r50, $r52, $r55;
        java.io.IOException $r51;
        java.lang.String $r53, $r56;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.os.storage.IMountService$Stub: void <init>()>();

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<com.android.server.MountService: java.lang.Object mVolumesLock> = $r8;

        $r9 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<com.android.server.MountService: java.util.ArrayList mVolumes> = $r9;

        $r10 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath> = $r10;

        $r11 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.MountService: java.util.HashMap mVolumeStates> = $r11;

        r0.<com.android.server.MountService: boolean mSystemReady> = 0;

        r0.<com.android.server.MountService: boolean mUmsAvailable> = 0;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.MountService: java.util.ArrayList mListeners> = $r12;

        $r13 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r13.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<com.android.server.MountService: java.util.concurrent.CountDownLatch mConnectedSignal> = $r13;

        $r14 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r14.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<com.android.server.MountService: java.util.concurrent.CountDownLatch mAsecsScanned> = $r14;

        r0.<com.android.server.MountService: boolean mSendUmsConnectedOnBoot> = 0;

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet> = $r15;

        $r17 = new java.util.HashMap;

        specialinvoke $r17.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.MountService: java.util.Map mObbMounts> = $r17;

        $r16 = new java.util.HashMap;

        specialinvoke $r16.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap> = $r16;

        $r19 = new com.android.server.MountService$DefaultContainerConnection;

        specialinvoke $r19.<com.android.server.MountService$DefaultContainerConnection: void <init>(com.android.server.MountService)>(r0);

        r0.<com.android.server.MountService: com.android.server.MountService$DefaultContainerConnection mDefContainerConn> = $r19;

        r0.<com.android.server.MountService: com.android.internal.app.IMediaContainerService mContainerService> = null;

        $r18 = new com.android.server.MountService$1;

        specialinvoke $r18.<com.android.server.MountService$1: void <init>(com.android.server.MountService)>(r0);

        r0.<com.android.server.MountService: android.content.BroadcastReceiver mUserReceiver> = $r18;

        $r21 = new com.android.server.MountService$2;

        specialinvoke $r21.<com.android.server.MountService$2: void <init>(com.android.server.MountService)>(r0);

        r0.<com.android.server.MountService: android.content.BroadcastReceiver mUsbReceiver> = $r21;

        <com.android.server.MountService: com.android.server.MountService sSelf> = r0;

        r0.<com.android.server.MountService: android.content.Context mContext> = r1;

        $r20 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        r2 = $r20;

        entermonitor $r20;

     label01:
        specialinvoke r0.<com.android.server.MountService: void readStorageListLocked()>();

        exitmonitor r2;

     label02:
        goto label05;

     label03:
        $r46 := @caughtexception;

        r3 = $r46;

        exitmonitor r2;

     label04:
        throw r3;

     label05:
        $r22 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("package");

        $r24 = (com.android.server.pm.PackageManagerService) $r22;

        r0.<com.android.server.MountService: com.android.server.pm.PackageManagerService mPms> = $r24;

        $r23 = new android.os.HandlerThread;

        specialinvoke $r23.<android.os.HandlerThread: void <init>(java.lang.String)>("MountService");

        r57 = $r23;

        virtualinvoke r57.<android.os.HandlerThread: void start()>();

        $r26 = new com.android.server.MountService$MountServiceHandler;

        $r25 = virtualinvoke r57.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r26.<com.android.server.MountService$MountServiceHandler: void <init>(com.android.server.MountService,android.os.Looper)>(r0, $r25);

        r0.<com.android.server.MountService: android.os.Handler mHandler> = $r26;

        $r28 = new android.content.IntentFilter;

        specialinvoke $r28.<android.content.IntentFilter: void <init>()>();

        r58 = $r28;

        virtualinvoke r58.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        virtualinvoke r58.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        $r29 = r0.<com.android.server.MountService: android.content.Context mContext>;

        $r30 = r0.<com.android.server.MountService: android.content.BroadcastReceiver mUserReceiver>;

        $r27 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        virtualinvoke $r29.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r30, r58, null, $r27);

        r4 = specialinvoke r0.<com.android.server.MountService: android.os.storage.StorageVolume getPrimaryPhysicalVolume()>();

        if r4 == null goto label06;

        $z1 = virtualinvoke r4.<android.os.storage.StorageVolume: boolean allowMassStorage()>();

        if $z1 == 0 goto label06;

        $r43 = r0.<com.android.server.MountService: android.content.Context mContext>;

        $r49 = r0.<com.android.server.MountService: android.content.BroadcastReceiver mUsbReceiver>;

        $r44 = new android.content.IntentFilter;

        specialinvoke $r44.<android.content.IntentFilter: void <init>(java.lang.String)>("android.hardware.usb.action.USB_STATE");

        $r48 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        virtualinvoke $r43.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r49, $r44, null, $r48);

     label06:
        $r31 = new com.android.server.MountService$ObbActionHandler;

        $r32 = staticinvoke <com.android.server.IoThread: com.android.server.IoThread get()>();

        $r36 = virtualinvoke $r32.<com.android.server.IoThread: android.os.Looper getLooper()>();

        specialinvoke $r31.<com.android.server.MountService$ObbActionHandler: void <init>(com.android.server.MountService,android.os.Looper)>(r0, $r36);

        r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler> = $r31;

        r5 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r34 = new java.io.File;

        specialinvoke $r34.<java.io.File: void <init>(java.io.File,java.lang.String)>(r5, "system");

        r6 = $r34;

        $r35 = new java.io.File;

        specialinvoke $r35.<java.io.File: void <init>(java.io.File,java.lang.String)>(r6, "last-fstrim");

        r0.<com.android.server.MountService: java.io.File mLastMaintenanceFile> = $r35;

        $r38 = r0.<com.android.server.MountService: java.io.File mLastMaintenanceFile>;

        $z0 = virtualinvoke $r38.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label10;

     label07:
        $r40 = new java.io.FileOutputStream;

        $r45 = r0.<com.android.server.MountService: java.io.File mLastMaintenanceFile>;

        specialinvoke $r40.<java.io.FileOutputStream: void <init>(java.io.File)>($r45);

        virtualinvoke $r40.<java.io.FileOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r51 := @caughtexception;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create fstrim record ");

        $r54 = r0.<com.android.server.MountService: java.io.File mLastMaintenanceFile>;

        $r53 = virtualinvoke $r54.<java.io.File: java.lang.String getPath()>();

        $r52 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r56 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r56);

        goto label11;

     label10:
        $r37 = r0.<com.android.server.MountService: java.io.File mLastMaintenanceFile>;

        $l0 = virtualinvoke $r37.<java.io.File: long lastModified()>();

        r0.<com.android.server.MountService: long mLastMaintenance> = $l0;

     label11:
        $r41 = new com.android.server.NativeDaemonConnector;

        specialinvoke $r41.<com.android.server.NativeDaemonConnector: void <init>(com.android.server.INativeDaemonConnectorCallbacks,java.lang.String,int,java.lang.String,int,android.os.PowerManager$WakeLock)>(r0, "vold", 500, "VoldConnector", 25, null);

        r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector> = $r41;

        $r42 = new java.lang.Thread;

        $r39 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        specialinvoke $r42.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r39, "VoldConnector");

        r59 = $r42;

        virtualinvoke r59.<java.lang.Thread: void start()>();

        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.io.IOException from label07 to label08 with label09;
    }

    public void systemReady()
    {
        com.android.server.MountService r0;
        android.os.Handler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.MountService;

        r0.<com.android.server.MountService: boolean mSystemReady> = 1;

        $r1 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int)>(4);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void registerListener(android.os.storage.IMountServiceListener)
    {
        com.android.server.MountService r0;
        android.os.storage.IMountServiceListener r1;
        java.util.ArrayList r2, $r6, $r9;
        com.android.server.MountService$MountServiceBinderListener r3, $r7;
        java.lang.Throwable r5, $r10;
        android.os.IBinder $r8;
        android.os.RemoteException $r11;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.os.storage.IMountServiceListener;

        $r6 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        $r7 = new com.android.server.MountService$MountServiceBinderListener;

        specialinvoke $r7.<com.android.server.MountService$MountServiceBinderListener: void <init>(com.android.server.MountService,android.os.storage.IMountServiceListener)>(r0, r1);

        r3 = $r7;

     label2:
        $r8 = interfaceinvoke r1.<android.os.storage.IMountServiceListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r8.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0);

        $r9 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", "Failed to link to listener death");

     label5:
        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r2;

     label8:
        throw r5;

     label9:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void unregisterListener(android.os.storage.IMountServiceListener)
    {
        com.android.server.MountService r0;
        android.os.storage.IMountServiceListener r1, $r9;
        java.util.ArrayList r2, $r6, $r7, $r12, $r13;
        java.util.Iterator r3;
        com.android.server.MountService$MountServiceBinderListener r4;
        java.lang.Throwable r5, $r16;
        boolean $z0;
        java.lang.Object $r8;
        android.os.IBinder $r10, $r11, $r14;
        int $i0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.os.storage.IMountServiceListener;

        $r6 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        r3 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.MountService$MountServiceBinderListener) $r8;

        $r9 = r4.<com.android.server.MountService$MountServiceBinderListener: android.os.storage.IMountServiceListener mListener>;

        $r10 = interfaceinvoke $r9.<android.os.storage.IMountServiceListener: android.os.IBinder asBinder()>();

        $r11 = interfaceinvoke r1.<android.os.storage.IMountServiceListener: android.os.IBinder asBinder()>();

        if $r10 != $r11 goto label4;

        $r13 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        $r12 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        $i0 = virtualinvoke $r12.<java.util.ArrayList: int indexOf(java.lang.Object)>(r4);

        virtualinvoke $r13.<java.util.ArrayList: java.lang.Object remove(int)>($i0);

        $r14 = interfaceinvoke r1.<android.os.storage.IMountServiceListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r14.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r4, 0);

        exitmonitor r2;

     label3:
        return;

     label4:
        goto label2;

     label5:
        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r16 := @caughtexception;

        r5 = $r16;

        exitmonitor r2;

     label8:
        throw r5;

     label9:
        return;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void shutdown(android.os.storage.IMountShutdownObserver)
    {
        com.android.server.MountService r0;
        android.os.storage.IMountShutdownObserver r1;
        java.lang.Object r2, $r9, $r15, $r16;
        com.android.server.MountService$MountShutdownLatch r3, $r10;
        java.util.Iterator r4;
        java.lang.String r5, r6, $r24;
        int i0, $i2, $i5;
        java.lang.InterruptedException r7, $r27;
        java.lang.Throwable r8, $r28;
        java.util.HashMap $r11, $r12, $r14;
        java.util.Set $r13;
        boolean $z0, $z1, $z2, $z3, $z5;
        java.lang.StringBuilder $r17, $r18, $r19, $r20, $r21;
        com.android.server.MountService$ShutdownCallBack $r22, r29;
        android.os.Handler $r23, $r25;
        android.os.Message $r26;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: android.os.storage.IMountShutdownObserver;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.SHUTDOWN");

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("MountService", "Shutting down");

        $r9 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        r2 = $r9;

        entermonitor $r9;

     label01:
        $r10 = new com.android.server.MountService$MountShutdownLatch;

        $r11 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $i2 = virtualinvoke $r11.<java.util.HashMap: int size()>();

        specialinvoke $r10.<com.android.server.MountService$MountShutdownLatch: void <init>(android.os.storage.IMountShutdownObserver,int)>(r1, $i2);

        r3 = $r10;

        $r12 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r13 = virtualinvoke $r12.<java.util.HashMap: java.util.Set keySet()>();

        r4 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r15;

        $r14 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r16 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (java.lang.String) $r16;

        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("shared");

        if $z1 == 0 goto label03;

        virtualinvoke r0.<com.android.server.MountService: void setUsbMassStorageEnabled(boolean)>(0);

        goto label10;

     label03:
        $z3 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("checking");

        if $z3 == 0 goto label10;

        i0 = 30;

     label04:
        $z5 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("checking");

        if $z5 == 0 goto label09;

        $i5 = i0;

        i0 = i0 + -1;

        if $i5 < 0 goto label09;

     label05:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

     label06:
        goto label08;

     label07:
        $r27 := @caughtexception;

        r7 = $r27;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MountService", "Interrupted while waiting for media", r7);

        goto label09;

     label08:
        r6 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

        goto label04;

     label09:
        if i0 != 0 goto label10;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", "Timed out waiting for media to check");

     label10:
        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("mounted");

        if $z2 == 0 goto label11;

        $r22 = new com.android.server.MountService$ShutdownCallBack;

        specialinvoke $r22.<com.android.server.MountService$ShutdownCallBack: void <init>(com.android.server.MountService,java.lang.String,com.android.server.MountService$MountShutdownLatch)>(r0, r5, r3);

        r29 = $r22;

        $r25 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r23 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r26 = virtualinvoke $r23.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r29);

        virtualinvoke $r25.<android.os.Handler: boolean sendMessage(android.os.Message)>($r26);

        goto label12;

     label11:
        if r1 == null goto label12;

        virtualinvoke r3.<com.android.server.MountService$MountShutdownLatch: void countDown()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unmount completed: ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", result code: ");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0);

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("MountService", $r24);

     label12:
        goto label02;

     label13:
        exitmonitor r2;

     label14:
        goto label17;

     label15:
        $r28 := @caughtexception;

        r8 = $r28;

        exitmonitor r2;

     label16:
        throw r8;

     label17:
        return;

        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label01 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private boolean getUmsEnabling()
    {
        com.android.server.MountService r0;
        java.util.ArrayList r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.server.MountService;

        $r3 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.server.MountService: boolean mUmsEnabling>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void setUmsEnabling(boolean)
    {
        com.android.server.MountService r0;
        boolean z0;
        java.util.ArrayList r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.MountService;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<com.android.server.MountService: boolean mUmsEnabling> = z0;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isUsbMassStorageConnected()
    {
        com.android.server.MountService r0;
        java.util.ArrayList r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0, $z1;

        r0 := @this: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        $z0 = specialinvoke r0.<com.android.server.MountService: boolean getUmsEnabling()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        $z1 = r0.<com.android.server.MountService: boolean mUmsAvailable>;

        exitmonitor r1;

     label3:
        return $z1;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setUsbMassStorageEnabled(boolean)
    {
        com.android.server.MountService r0;
        boolean z0, $z1;
        android.os.storage.StorageVolume r1;
        java.lang.String r2, r3, r4, $r10;
        com.android.server.MountService$UmsEnableCallBack r5, $r13;
        int $i0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11;
        android.os.Handler $r12, $r15;
        android.os.Message $r14;

        r0 := @this: com.android.server.MountService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        specialinvoke r0.<com.android.server.MountService: void validateUserRestriction(java.lang.String)>("no_usb_file_transfer");

        r1 = specialinvoke r0.<com.android.server.MountService: android.os.storage.StorageVolume getPrimaryPhysicalVolume()>();

        if r1 != null goto label1;

        return;

     label1:
        r2 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        r3 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>(r2);

        r4 = "ums";

        if z0 == 0 goto label2;

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("mounted");

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.MountService: void setUmsEnabling(boolean)>(z0);

        $r13 = new com.android.server.MountService$UmsEnableCallBack;

        specialinvoke $r13.<com.android.server.MountService$UmsEnableCallBack: void <init>(com.android.server.MountService,java.lang.String,java.lang.String,boolean)>(r0, r2, r4, 1);

        r5 = $r13;

        $r15 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r12 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r14 = virtualinvoke $r12.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r5);

        virtualinvoke $r15.<android.os.Handler: boolean sendMessage(android.os.Message)>($r14);

        specialinvoke r0.<com.android.server.MountService: void setUmsEnabling(boolean)>(0);

     label2:
        if z0 != 0 goto label3;

        specialinvoke r0.<com.android.server.MountService: void doShareUnshareVolume(java.lang.String,java.lang.String,boolean)>(r2, r4, z0);

        $i0 = specialinvoke r0.<com.android.server.MountService: int doMountVolume(java.lang.String)>(r2);

        if $i0 == 0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to remount ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" after disabling share method ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r10);

     label3:
        return;
    }

    public boolean isUsbMassStorageEnabled()
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        r1 = specialinvoke r0.<com.android.server.MountService: android.os.storage.StorageVolume getPrimaryPhysicalVolume()>();

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $z0 = specialinvoke r0.<com.android.server.MountService: boolean doGetVolumeShared(java.lang.String,java.lang.String)>($r2, "ums");

        return $z0;

     label1:
        return 0;
    }

    public java.lang.String getVolumeState(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r3, $r12, $r13;
        java.lang.Object r2, $r5, $r7;
        java.lang.Throwable r4, $r14;
        java.util.HashMap $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        int $i1;
        java.lang.IllegalArgumentException $r15;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.lang.String) $r7;

        if r3 != null goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getVolumeState(");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): Unknown volume");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", $r12);

        $r13 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("vold.encrypt_progress");

        $i1 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i1 == 0 goto label2;

        r3 = "removed";

        goto label3;

     label2:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r15;

     label3:
        exitmonitor r2;

     label4:
        return r3;

     label5:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r2;

     label6:
        throw r4;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean isExternalStorageEmulated()
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume $r1;
        boolean $z0;

        r0 := @this: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: android.os.storage.StorageVolume mEmulatedTemplate>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int mountVolume(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        $i0 = specialinvoke r0.<com.android.server.MountService: int doMountVolume(java.lang.String)>(r1);

        return $i0;
    }

    public void unmountVolume(java.lang.String, boolean, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, $r4, $r5, $r6, $r7;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        com.android.server.MountService$UnmountCallBack r3, $r8;
        android.os.Handler $r9, $r10;
        android.os.Message $r11;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        r2 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>(r1);

        $r4 = "unmounted";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 != 0 goto label1;

        $r5 = "removed";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 != 0 goto label1;

        $r6 = "shared";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z4 != 0 goto label1;

        $r7 = "unmountable";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z5 == 0 goto label2;

     label1:
        return;

     label2:
        $r8 = new com.android.server.MountService$UnmountCallBack;

        specialinvoke $r8.<com.android.server.MountService$UnmountCallBack: void <init>(com.android.server.MountService,java.lang.String,boolean,boolean)>(r0, r1, z0, z1);

        r3 = $r8;

        $r9 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r10 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r11 = virtualinvoke $r10.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r3);

        virtualinvoke $r9.<android.os.Handler: boolean sendMessage(android.os.Message)>($r11);

        return;
    }

    public int formatVolume(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.MOUNT_FORMAT_FILESYSTEMS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        $i0 = specialinvoke r0.<com.android.server.MountService: int doFormatVolume(java.lang.String)>(r1);

        return $i0;
    }

    public int[] getStorageUsers(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r9, $r10, $r15, $r16;
        java.lang.String[] r2, r4;
        int[] r3, $r12, $r17;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] $r6, $r13;
        com.android.server.NativeDaemonConnector $r7;
        com.android.server.NativeDaemonEvent[] $r8;
        com.android.server.NativeDaemonConnectorException $r11, r18;
        java.lang.NumberFormatException $r14;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label1:
        $r7 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "users";

        $r6[1] = r1;

        $r8 = virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent[] executeForList(java.lang.String,java.lang.Object[])>("storage", $r6);

        r2 = staticinvoke <com.android.server.NativeDaemonEvent: java.lang.String[] filterMessageList(com.android.server.NativeDaemonEvent[],int)>($r8, 112);

        $i1 = lengthof r2;

        r3 = newarray (int)[$i1];

        i0 = 0;

     label2:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label8;

        $r9 = r2[i0];

        r4 = virtualinvoke $r9.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

     label3:
        $r10 = r4[0];

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        r3[i0] = $i3;

     label4:
        goto label7;

     label5:
        $r14 := @caughtexception;

        $r13 = newarray (java.lang.Object)[1];

        $r15 = r4[0];

        $r13[0] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error parsing pid %s", $r13);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r16);

        $r17 = newarray (int)[0];

     label6:
        return $r17;

     label7:
        i0 = i0 + 1;

        goto label2;

     label8:
        return r3;

     label9:
        $r11 := @caughtexception;

        r18 = $r11;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MountService", "Failed to retrieve storage users list", r18);

        $r12 = newarray (int)[0];

        return $r12;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
        catch com.android.server.NativeDaemonConnectorException from label1 to label6 with label9;
        catch com.android.server.NativeDaemonConnectorException from label7 to label8 with label9;
    }

    private void warnOnNotMounted()
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume r1;
        boolean z0;
        java.lang.String $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.android.server.MountService;

        r1 = specialinvoke r0.<com.android.server.MountService: android.os.storage.StorageVolume getPrimaryPhysicalVolume()>();

        if r1 == null goto label5;

        z0 = 0;

     label1:
        $r3 = "mounted";

        $r4 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r5 = virtualinvoke r0.<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>($r4);

        z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        if z0 != 0 goto label5;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", "getSecureContainerList() called when storage not mounted");

     label5:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public java.lang.String[] getSecureContainerList()
    {
        com.android.server.MountService r0;
        java.lang.Object[] $r2;
        com.android.server.NativeDaemonConnector $r3;
        com.android.server.NativeDaemonEvent[] $r4;
        java.lang.String[] $r5, $r7;
        com.android.server.NativeDaemonConnectorException $r6;

        r0 := @this: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_ACCESS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

     label1:
        $r3 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "list";

        $r4 = virtualinvoke $r3.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent[] executeForList(java.lang.String,java.lang.Object[])>("asec", $r2);

        $r5 = staticinvoke <com.android.server.NativeDaemonEvent: java.lang.String[] filterMessageList(com.android.server.NativeDaemonEvent[],int)>($r4, 111);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = newarray (java.lang.String)[0];

        return $r7;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public int createSecureContainer(java.lang.String, int, java.lang.String, java.lang.String, int, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, r3, $r16;
        int i0, i1;
        boolean z0;
        byte b2;
        java.lang.Throwable r5, $r17;
        java.lang.Object[] $r6;
        com.android.server.NativeDaemonConnector $r7;
        java.lang.Integer $r9, $r12;
        com.android.server.NativeDaemonConnector$SensitiveArg $r10;
        java.util.HashSet $r13, $r14, r18;
        com.android.server.NativeDaemonConnectorException $r15;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_CREATE");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        b2 = 0;

     label01:
        $r7 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r6 = newarray (java.lang.Object)[7];

        $r6[0] = "create";

        $r6[1] = r1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[2] = $r9;

        $r6[3] = r2;

        $r10 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        specialinvoke $r10.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>(r3);

        $r6[4] = $r10;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6[5] = $r12;

        if z0 == 0 goto label02;

        $r16 = "1";

        goto label03;

     label02:
        $r16 = "0";

     label03:
        $r6[6] = $r16;

        virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", $r6);

     label04:
        goto label06;

     label05:
        $r15 := @caughtexception;

        b2 = -1;

     label06:
        if b2 != 0 goto label11;

        $r14 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        r18 = $r14;

        entermonitor $r14;

     label07:
        $r13 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        virtualinvoke $r13.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        exitmonitor r18;

     label08:
        goto label11;

     label09:
        $r17 := @caughtexception;

        r5 = $r17;

        exitmonitor r18;

     label10:
        throw r5;

     label11:
        return b2;

        catch com.android.server.NativeDaemonConnectorException from label01 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public int resizeSecureContainer(java.lang.String, int, java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2;
        int i0;
        byte b1;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.Integer $r6;
        com.android.server.NativeDaemonConnector$SensitiveArg $r7;
        com.android.server.NativeDaemonConnectorException $r9;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_CREATE");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        b1 = 0;

     label1:
        $r5 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[4];

        $r4[0] = "resize";

        $r4[1] = r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[2] = $r6;

        $r7 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        specialinvoke $r7.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>(r2);

        $r4[3] = $r7;

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", $r4);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        b1 = -1;

     label4:
        return b1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public int finalizeSecureContainer(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        byte b0;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        com.android.server.NativeDaemonConnectorException $r6;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_CREATE");

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        b0 = 0;

     label1:
        $r4 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "finalize";

        $r3[1] = r1;

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", $r3);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        b0 = -1;

     label4:
        return b0;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public int fixPermissionsSecureContainer(java.lang.String, int, java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2;
        int i0;
        byte b1;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.Integer $r6;
        com.android.server.NativeDaemonConnectorException $r8;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_CREATE");

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        b1 = 0;

     label1:
        $r5 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[4];

        $r4[0] = "fixperms";

        $r4[1] = r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[2] = $r6;

        $r4[3] = r2;

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", $r4);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        b1 = -1;

     label4:
        return b1;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public int destroySecureContainer(java.lang.String, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        boolean z0, $z1;
        byte b0;
        com.android.server.NativeDaemonConnector$Command r2, $r5;
        int i1;
        java.lang.Throwable r3, $r14;
        java.lang.Runtime $r4;
        java.lang.Object[] $r6;
        com.android.server.NativeDaemonConnector $r7;
        java.util.HashSet $r9, $r10, $r11, r16;
        com.android.server.NativeDaemonConnectorException $r12, r15;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_DESTROY");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r4.<java.lang.Runtime: void gc()>();

        b0 = 0;

     label01:
        $r5 = new com.android.server.NativeDaemonConnector$Command;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "destroy";

        $r6[1] = r1;

        specialinvoke $r5.<com.android.server.NativeDaemonConnector$Command: void <init>(java.lang.String,java.lang.Object[])>("asec", $r6);

        r2 = $r5;

        if z0 == 0 goto label02;

        virtualinvoke r2.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>("force");

     label02:
        $r7 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(com.android.server.NativeDaemonConnector$Command)>(r2);

     label03:
        goto label06;

     label04:
        $r12 := @caughtexception;

        r15 = $r12;

        i1 = virtualinvoke r15.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i1 != 405 goto label05;

        b0 = -7;

        goto label06;

     label05:
        b0 = -1;

     label06:
        if b0 != 0 goto label12;

        $r9 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        r16 = $r9;

        entermonitor $r9;

     label07:
        $r10 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        $z1 = virtualinvoke $r10.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label08;

        $r11 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        virtualinvoke $r11.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

     label08:
        exitmonitor r16;

     label09:
        goto label12;

     label10:
        $r14 := @caughtexception;

        r3 = $r14;

        exitmonitor r16;

     label11:
        throw r3;

     label12:
        return b0;

        catch com.android.server.NativeDaemonConnectorException from label01 to label03 with label04;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public int mountSecureContainer(java.lang.String, java.lang.String, int, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, $r16;
        int i0, i1;
        boolean z0, $z1;
        java.util.HashSet r3, $r6, $r7, $r13, $r15, r21;
        java.lang.Throwable r4, r5, $r18, $r19;
        java.lang.Object[] $r8;
        com.android.server.NativeDaemonConnector$SensitiveArg $r9;
        com.android.server.NativeDaemonConnector $r10;
        java.lang.Integer $r12;
        com.android.server.NativeDaemonConnectorException $r17, r20;
        byte b2;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_MOUNT_UNMOUNT");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        $r6 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        r3 = $r6;

        entermonitor $r6;

     label01:
        $r7 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        $z1 = virtualinvoke $r7.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label03;

        exitmonitor r3;

     label02:
        return -6;

     label03:
        exitmonitor r3;

     label04:
        goto label07;

     label05:
        $r18 := @caughtexception;

        r4 = $r18;

        exitmonitor r3;

     label06:
        throw r4;

     label07:
        b2 = 0;

     label08:
        $r10 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r8 = newarray (java.lang.Object)[5];

        $r8[0] = "mount";

        $r8[1] = r1;

        $r9 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        specialinvoke $r9.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>(r2);

        $r8[2] = $r9;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[3] = $r12;

        if z0 == 0 goto label09;

        $r16 = "ro";

        goto label10;

     label09:
        $r16 = "rw";

     label10:
        $r8[4] = $r16;

        virtualinvoke $r10.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", $r8);

     label11:
        goto label13;

     label12:
        $r17 := @caughtexception;

        r20 = $r17;

        i1 = virtualinvoke r20.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i1 == 405 goto label13;

        b2 = -1;

     label13:
        if b2 != 0 goto label18;

        $r13 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        r21 = $r13;

        entermonitor $r13;

     label14:
        $r15 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        virtualinvoke $r15.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        exitmonitor r21;

     label15:
        goto label18;

     label16:
        $r19 := @caughtexception;

        r5 = $r19;

        exitmonitor r21;

     label17:
        throw r5;

     label18:
        return b2;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch com.android.server.NativeDaemonConnectorException from label08 to label11 with label12;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    public int unmountSecureContainer(java.lang.String, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        boolean z0, $z1;
        java.util.HashSet r2, $r5, $r6, $r12, $r13, r20;
        java.lang.Throwable r3, r4, $r15, $r16;
        int i0;
        java.lang.Runtime $r7;
        com.android.server.NativeDaemonConnector$Command $r8, r18;
        java.lang.Object[] $r9;
        com.android.server.NativeDaemonConnector $r10;
        com.android.server.NativeDaemonConnectorException $r17, r19;
        byte b1;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_MOUNT_UNMOUNT");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        $r5 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        $z1 = virtualinvoke $r6.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label03;

        exitmonitor r2;

     label02:
        return -5;

     label03:
        exitmonitor r2;

     label04:
        goto label07;

     label05:
        $r16 := @caughtexception;

        r3 = $r16;

        exitmonitor r2;

     label06:
        throw r3;

     label07:
        $r7 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r7.<java.lang.Runtime: void gc()>();

        b1 = 0;

     label08:
        $r8 = new com.android.server.NativeDaemonConnector$Command;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = "unmount";

        $r9[1] = r1;

        specialinvoke $r8.<com.android.server.NativeDaemonConnector$Command: void <init>(java.lang.String,java.lang.Object[])>("asec", $r9);

        r18 = $r8;

        if z0 == 0 goto label09;

        virtualinvoke r18.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>("force");

     label09:
        $r10 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r10.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(com.android.server.NativeDaemonConnector$Command)>(r18);

     label10:
        goto label13;

     label11:
        $r17 := @caughtexception;

        r19 = $r17;

        i0 = virtualinvoke r19.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i0 != 405 goto label12;

        b1 = -7;

        goto label13;

     label12:
        b1 = -1;

     label13:
        if b1 != 0 goto label18;

        $r13 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        r20 = $r13;

        entermonitor $r13;

     label14:
        $r12 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        virtualinvoke $r12.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

        exitmonitor r20;

     label15:
        goto label18;

     label16:
        $r15 := @caughtexception;

        r4 = $r15;

        exitmonitor r20;

     label17:
        throw r4;

     label18:
        return b1;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch com.android.server.NativeDaemonConnectorException from label08 to label10 with label11;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    public boolean isSecureContainerMounted(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        java.util.HashSet r2, $r4, $r5;
        java.lang.Throwable r3, $r6;
        boolean $z0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_ACCESS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        $r4 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        $z0 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return $z0;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int renameSecureContainer(java.lang.String, java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2;
        java.util.HashSet r3, $r5, $r6, $r7;
        java.lang.Throwable r4, $r11;
        boolean $z0, $z1;
        java.lang.Object[] $r8;
        com.android.server.NativeDaemonConnector $r9;
        com.android.server.NativeDaemonConnectorException $r12;
        byte b0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_RENAME");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        $r5 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        r3 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        $z0 = virtualinvoke $r6.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label02;

        $r7 = r0.<com.android.server.MountService: java.util.HashSet mAsecMountSet>;

        $z1 = virtualinvoke $r7.<java.util.HashSet: boolean contains(java.lang.Object)>(r2);

        if $z1 == 0 goto label04;

     label02:
        exitmonitor r3;

     label03:
        return -6;

     label04:
        exitmonitor r3;

     label05:
        goto label08;

     label06:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r3;

     label07:
        throw r4;

     label08:
        b0 = 0;

     label09:
        $r9 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r8 = newarray (java.lang.Object)[3];

        $r8[0] = "rename";

        $r8[1] = r1;

        $r8[2] = r2;

        virtualinvoke $r9.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", $r8);

     label10:
        goto label12;

     label11:
        $r12 := @caughtexception;

        b0 = -1;

     label12:
        return b0;

        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch com.android.server.NativeDaemonConnectorException from label09 to label10 with label11;
    }

    public java.lang.String getSecureContainerPath(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r6, $r12, $r13;
        com.android.server.NativeDaemonEvent r2;
        com.android.server.NativeDaemonConnectorException r3, $r7;
        int i0;
        java.lang.Object[] $r4, $r9, $r11;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.IllegalStateException $r8;
        java.lang.Integer $r10;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_ACCESS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

     label1:
        $r5 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = "path";

        $r4[1] = r1;

        r2 = virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", $r4);

        virtualinvoke r2.<com.android.server.NativeDaemonEvent: void checkCode(int)>(211);

        $r6 = virtualinvoke r2.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        i0 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i0 != 406 goto label4;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r1;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Container \'%s\' not found", $r11);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("MountService", $r13);

        return null;

     label4:
        $r8 = new java.lang.IllegalStateException;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[0] = $r10;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected response code %d", $r9);

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r8;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public java.lang.String getSecureContainerFilesystemPath(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r6, $r12, $r13;
        com.android.server.NativeDaemonEvent r2;
        com.android.server.NativeDaemonConnectorException r3, $r7;
        int i0;
        java.lang.Object[] $r4, $r9, $r11;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.IllegalStateException $r8;
        java.lang.Integer $r10;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void validatePermission(java.lang.String)>("android.permission.ASEC_ACCESS");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

     label1:
        $r5 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = "fspath";

        $r4[1] = r1;

        r2 = virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("asec", $r4);

        virtualinvoke r2.<com.android.server.NativeDaemonEvent: void checkCode(int)>(211);

        $r6 = virtualinvoke r2.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        i0 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i0 != 406 goto label4;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r1;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Container \'%s\' not found", $r11);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("MountService", $r13);

        return null;

     label4:
        $r8 = new java.lang.IllegalStateException;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[0] = $r10;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected response code %d", $r9);

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r8;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void finishMediaUpdate()
    {
        com.android.server.MountService r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(2);

        return;
    }

    private boolean isUidOwnerOfPackageOrSystem(java.lang.String, int)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        int i0, i1, $i2;
        com.android.server.pm.PackageManagerService $r2;
        boolean $z0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 != 1000 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r2 = r0.<com.android.server.MountService: com.android.server.pm.PackageManagerService mPms>;

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        i1 = virtualinvoke $r2.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>(r1, $i2);

        if i0 != i1 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public java.lang.String getMountedObbPath(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r10, $r12, $r16, $r20;
        com.android.server.MountService$ObbState r2;
        java.util.Map r3, $r6, $r7;
        java.lang.Throwable r4, $r22;
        int i0;
        java.lang.Object $r8;
        java.lang.Object[] $r9, $r18;
        com.android.server.NativeDaemonConnector $r11;
        java.lang.StringBuilder $r13, $r14, $r15;
        com.android.server.NativeDaemonConnectorException $r17, r24;
        java.lang.IllegalStateException $r19;
        java.lang.Integer $r21;
        com.android.server.NativeDaemonEvent r23;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rawPath cannot be null");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        $r6 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.MountService$ObbState) $r8;

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r22 := @caughtexception;

        r4 = $r22;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        if r2 != null goto label6;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find OBB mounted at ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", $r16);

        return null;

     label6:
        $r11 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = "path";

        $r10 = r2.<com.android.server.MountService$ObbState: java.lang.String voldPath>;

        $r9[1] = $r10;

        r23 = virtualinvoke $r11.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("obb", $r9);

        virtualinvoke r23.<com.android.server.NativeDaemonEvent: void checkCode(int)>(211);

        $r12 = virtualinvoke r23.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

     label7:
        return $r12;

     label8:
        $r17 := @caughtexception;

        r24 = $r17;

        i0 = virtualinvoke r24.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        if i0 != 406 goto label9;

        return null;

     label9:
        $r19 = new java.lang.IllegalStateException;

        $r18 = newarray (java.lang.Object)[1];

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r18[0] = $r21;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected response code %d", $r18);

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r19;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch com.android.server.NativeDaemonConnectorException from label6 to label7 with label8;
    }

    public boolean isObbMounted(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        java.util.Map r2, $r5, $r6;
        java.lang.Throwable r3, $r7;
        boolean $z0;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rawPath cannot be null");

        $r5 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return $z0;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void mountObb(java.lang.String, java.lang.String, java.lang.String, android.os.storage.IObbActionListener, int)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, r3;
        android.os.storage.IObbActionListener r4;
        int i0, i1;
        com.android.server.MountService$ObbState r5, $r10;
        com.android.server.MountService$MountObbAction r6, $r11;
        com.android.server.MountService$ObbActionHandler $r12, $r14;
        android.os.Message $r13;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.storage.IObbActionListener;

        i0 := @parameter4: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rawPath cannot be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "canonicalPath cannot be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "token cannot be null");

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r10 = new com.android.server.MountService$ObbState;

        specialinvoke $r10.<com.android.server.MountService$ObbState: void <init>(com.android.server.MountService,java.lang.String,java.lang.String,int,android.os.storage.IObbActionListener,int)>(r0, r1, r2, i1, r4, i0);

        r5 = $r10;

        $r11 = new com.android.server.MountService$MountObbAction;

        specialinvoke $r11.<com.android.server.MountService$MountObbAction: void <init>(com.android.server.MountService,com.android.server.MountService$ObbState,java.lang.String,int)>(r0, r5, r3, i1);

        r6 = $r11;

        $r14 = r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler>;

        $r12 = r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler>;

        $r13 = virtualinvoke $r12.<com.android.server.MountService$ObbActionHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r6);

        virtualinvoke $r14.<com.android.server.MountService$ObbActionHandler: boolean sendMessage(android.os.Message)>($r13);

        return;
    }

    public void unmountObb(java.lang.String, boolean, android.os.storage.IObbActionListener, int)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r14, $r17;
        boolean z0;
        android.os.storage.IObbActionListener r2;
        int i0, i2;
        com.android.server.MountService$ObbState r3, $r15, r22;
        java.util.Map r4, $r8, $r9;
        java.lang.Throwable r5, $r21;
        com.android.server.MountService$UnmountObbAction r6, $r16;
        java.lang.Object $r10;
        java.lang.StringBuilder $r11, $r12, $r13;
        com.android.server.MountService$ObbActionHandler $r18, $r19;
        android.os.Message $r20;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.os.storage.IObbActionListener;

        i0 := @parameter3: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rawPath cannot be null");

        $r8 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        r4 = $r8;

        entermonitor $r8;

     label1:
        $r9 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.MountService$ObbState) $r10;

        exitmonitor r4;

     label2:
        goto label5;

     label3:
        $r21 := @caughtexception;

        r5 = $r21;

        exitmonitor r4;

     label4:
        throw r5;

     label5:
        if r3 == null goto label6;

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r15 = new com.android.server.MountService$ObbState;

        $r17 = r3.<com.android.server.MountService$ObbState: java.lang.String canonicalPath>;

        specialinvoke $r15.<com.android.server.MountService$ObbState: void <init>(com.android.server.MountService,java.lang.String,java.lang.String,int,android.os.storage.IObbActionListener,int)>(r0, r1, $r17, i2, r2, i0);

        r22 = $r15;

        $r16 = new com.android.server.MountService$UnmountObbAction;

        specialinvoke $r16.<com.android.server.MountService$UnmountObbAction: void <init>(com.android.server.MountService,com.android.server.MountService$ObbState,boolean)>(r0, r22, z0);

        r6 = $r16;

        $r18 = r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler>;

        $r19 = r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler>;

        $r20 = virtualinvoke $r19.<com.android.server.MountService$ObbActionHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r6);

        virtualinvoke $r18.<com.android.server.MountService$ObbActionHandler: boolean sendMessage(android.os.Message)>($r20);

        goto label7;

     label6:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown OBB mount at ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", $r14);

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getEncryptionState()
    {
        com.android.server.MountService r0;
        com.android.server.NativeDaemonEvent r1;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.String $r6;
        int $i0;
        java.lang.NumberFormatException $r7;
        com.android.server.NativeDaemonConnectorException $r8;

        r0 := @this: com.android.server.MountService;

        $r3 = r0.<com.android.server.MountService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label1:
        $r5 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "cryptocomplete";

        r1 = virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("cryptfs", $r4);

        $r6 = virtualinvoke r1.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

     label2:
        return $i0;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", "Unable to parse result from cryptfs cryptocomplete");

        return -1;

     label4:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("MountService", "Error in communicating with cryptfs in validating");

        return -1;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label4;
    }

    private java.lang.String toHex(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r4, $r6;
        byte[] r2;
        java.nio.charset.Charset $r3;
        char[] $r5;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>()>();

        return $r6;

     label1:
        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        $r4 = new java.lang.String;

        $r5 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>(r2);

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r5);

        return $r4;
    }

    private java.lang.String fromHex(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r4;
        byte[] r2;
        char[] $r3;
        java.nio.charset.Charset $r5;
        org.apache.commons.codec.DecoderException $r6;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        r2 = staticinvoke <org.apache.commons.codec.binary.Hex: byte[] decodeHex(char[])>($r3);

        $r4 = new java.lang.String;

        $r5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r2, $r5);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        return null;

        catch org.apache.commons.codec.DecoderException from label1 to label2 with label3;
    }

    public int decryptStorage(java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r7, $r8;
        com.android.server.NativeDaemonEvent r2;
        int i0, $i1;
        boolean $z0;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector$SensitiveArg $r5;
        com.android.server.NativeDaemonConnector $r6;
        com.android.server.MountService$6 $r9;
        android.os.Handler $r10;
        com.android.server.NativeDaemonConnectorException $r11, r13;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password cannot be empty");

        throw $r12;

     label1:
        $r3 = r0.<com.android.server.MountService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label2:
        $r6 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = "checkpw";

        $r5 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        $r7 = specialinvoke r0.<com.android.server.MountService: java.lang.String toHex(java.lang.String)>(r1);

        specialinvoke $r5.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>($r7);

        $r4[1] = $r5;

        r2 = virtualinvoke $r6.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("cryptfs", $r4);

        $r8 = virtualinvoke r2.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        if i0 != 0 goto label3;

        $r10 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        $r9 = new com.android.server.MountService$6;

        specialinvoke $r9.<com.android.server.MountService$6: void <init>(com.android.server.MountService)>(r0);

        virtualinvoke $r10.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r9, 1000L);

     label3:
        return i0;

     label4:
        $r11 := @caughtexception;

        r13 = $r11;

        $i1 = virtualinvoke r13.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        return $i1;

        catch com.android.server.NativeDaemonConnectorException from label2 to label3 with label4;
    }

    public int encryptStorage(int, java.lang.String)
    {
        com.android.server.MountService r0;
        int i0, $i1;
        java.lang.String r1, $r6, $r9;
        com.android.server.NativeDaemonConnectorException r2, $r12;
        boolean $z0;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        java.lang.String[] $r5;
        com.android.server.NativeDaemonConnector$SensitiveArg $r7;
        com.android.server.NativeDaemonConnector $r8;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: com.android.server.MountService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        if i0 == 1 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password cannot be empty");

        throw $r11;

     label1:
        $r3 = r0.<com.android.server.MountService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label2:
        $r8 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[4];

        $r4[0] = "enablecrypto";

        $r4[1] = "inplace";

        $r5 = <com.android.server.MountService: java.lang.String[] CRYPTO_TYPES>;

        $r6 = $r5[i0];

        $r4[2] = $r6;

        $r7 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        $r9 = specialinvoke r0.<com.android.server.MountService: java.lang.String toHex(java.lang.String)>(r1);

        specialinvoke $r7.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>($r9);

        $r4[3] = $r7;

        virtualinvoke $r8.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("cryptfs", $r4);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r2 = $r12;

        $i1 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        return $i1;

     label5:
        return 0;

        catch com.android.server.NativeDaemonConnectorException from label2 to label3 with label4;
    }

    public int changeEncryptionPassword(int, java.lang.String)
    {
        com.android.server.MountService r0;
        int i0, $i1, $i2;
        java.lang.String r1, $r6, $r9, $r10;
        com.android.server.NativeDaemonEvent r2;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        java.lang.String[] $r5;
        com.android.server.NativeDaemonConnector$SensitiveArg $r7;
        com.android.server.NativeDaemonConnector $r8;
        com.android.server.NativeDaemonConnectorException $r11, r12;

        r0 := @this: com.android.server.MountService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.MountService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label1:
        $r8 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = "changepw";

        $r5 = <com.android.server.MountService: java.lang.String[] CRYPTO_TYPES>;

        $r6 = $r5[i0];

        $r4[1] = $r6;

        $r7 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        $r9 = specialinvoke r0.<com.android.server.MountService: java.lang.String toHex(java.lang.String)>(r1);

        specialinvoke $r7.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>($r9);

        $r4[2] = $r7;

        r2 = virtualinvoke $r8.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("cryptfs", $r4);

        $r10 = virtualinvoke r2.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

     label2:
        return $i1;

     label3:
        $r11 := @caughtexception;

        r12 = $r11;

        $i2 = virtualinvoke r12.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        return $i2;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public int verifyEncryptionPassword(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.MountService r0;
        java.lang.String r1, $r8, $r10, $r12, $r14;
        com.android.server.NativeDaemonEvent r2;
        com.android.server.NativeDaemonConnectorException r3, $r16;
        int $i0, $i2, $i3;
        android.content.Context $r4;
        boolean $z0;
        java.lang.Object[] $r5;
        com.android.server.NativeDaemonConnector$SensitiveArg $r6;
        com.android.server.NativeDaemonConnector $r7;
        java.lang.StringBuilder $r9, $r11, $r13;
        java.lang.IllegalArgumentException $r15;
        java.lang.SecurityException $r17;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 == 1000 goto label1;

        $r17 = new java.lang.SecurityException;

        specialinvoke $r17.<java.lang.SecurityException: void <init>(java.lang.String)>("no permission to access the crypt keeper");

        throw $r17;

     label1:
        $r4 = r0.<com.android.server.MountService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CRYPT_KEEPER", "no permission to access the crypt keeper");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label2;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password cannot be empty");

        throw $r15;

     label2:
        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label3:
        $r7 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = "verifypw";

        $r6 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        $r8 = specialinvoke r0.<com.android.server.MountService: java.lang.String toHex(java.lang.String)>(r1);

        specialinvoke $r6.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>($r8);

        $r5[1] = $r6;

        r2 = virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("cryptfs", $r5);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cryptfs verifypw => ");

        $r10 = virtualinvoke r2.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("MountService", $r12);

        $r14 = virtualinvoke r2.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r14);

     label4:
        return $i2;

     label5:
        $r16 := @caughtexception;

        r3 = $r16;

        $i3 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        return $i3;

        catch com.android.server.NativeDaemonConnectorException from label3 to label4 with label5;
    }

    public int getPasswordType()
    {
        com.android.server.MountService r0;
        com.android.server.NativeDaemonEvent r1;
        int i0, $i1;
        java.lang.Object[] $r2;
        com.android.server.NativeDaemonConnector $r3;
        java.lang.String[] $r4, $r6;
        java.lang.IllegalStateException $r5;
        java.lang.String $r7, $r8;
        boolean $z0;
        com.android.server.NativeDaemonConnectorException $r9, r11;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label1:
        $r3 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "getpwtype";

        r1 = virtualinvoke $r3.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("cryptfs", $r2);

        i0 = 0;

     label2:
        $r4 = <com.android.server.MountService: java.lang.String[] CRYPTO_TYPES>;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label5;

        $r6 = <com.android.server.MountService: java.lang.String[] CRYPTO_TYPES>;

        $r7 = $r6[i0];

        $r8 = virtualinvoke r1.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label4;

     label3:
        return i0;

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("unexpected return from cryptfs");

        throw $r5;

     label6:
        $r9 := @caughtexception;

        r11 = $r9;

        $r10 = virtualinvoke r11.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r10;

        catch com.android.server.NativeDaemonConnectorException from label1 to label3 with label6;
        catch com.android.server.NativeDaemonConnectorException from label4 to label6 with label6;
    }

    public void setField(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2;
        com.android.server.NativeDaemonConnectorException r4, $r7;
        java.lang.Object[] $r5;
        com.android.server.NativeDaemonConnector $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label1:
        $r6 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = "setfield";

        $r5[1] = r1;

        $r5[2] = r2;

        virtualinvoke $r6.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("cryptfs", $r5);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

        $r8 = virtualinvoke r4.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public java.lang.String getField(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.MountService r0;
        java.lang.String r1, r3, r5, $r9;
        java.lang.String[] r2, r4;
        int i0, i1;
        java.lang.Object[] $r6;
        com.android.server.NativeDaemonConnector $r7;
        com.android.server.NativeDaemonEvent[] $r8;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.IllegalArgumentException $r13;
        com.android.server.NativeDaemonConnectorException $r14, r15;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

     label1:
        $r7 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "getfield";

        $r6[1] = r1;

        $r8 = virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent[] executeForList(java.lang.String,java.lang.Object[])>("cryptfs", $r6);

        r2 = staticinvoke <com.android.server.NativeDaemonEvent: java.lang.String[] filterMessageList(com.android.server.NativeDaemonEvent[],int)>($r8, 113);

        $r9 = new java.lang.String;

        specialinvoke $r9.<java.lang.String: void <init>()>();

        r3 = $r9;

        r4 = r2;

        i0 = lengthof r4;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r5 = r4[i1];

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        return r3;

     label4:
        $r14 := @caughtexception;

        r15 = $r14;

        $r13 = virtualinvoke r15.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r13;

        catch com.android.server.NativeDaemonConnectorException from label1 to label3 with label4;
    }

    public java.lang.String getPassword() throws android.os.RemoteException
    {
        com.android.server.MountService r0;
        com.android.server.NativeDaemonEvent r1;
        com.android.server.NativeDaemonConnectorException r2, $r8;
        boolean $z0;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.String $r5, $r6, $r7;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: com.android.server.MountService;

        $z0 = specialinvoke r0.<com.android.server.MountService: boolean isReady()>();

        if $z0 != 0 goto label1;

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>()>();

        return $r7;

     label1:
        $r4 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "getpw";

        r1 = virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("cryptfs", $r3);

        $r5 = virtualinvoke r1.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        $r6 = specialinvoke r0.<com.android.server.MountService: java.lang.String fromHex(java.lang.String)>($r5);

     label2:
        return $r6;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r9;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void clearPassword() throws android.os.RemoteException
    {
        com.android.server.MountService r0;
        com.android.server.NativeDaemonConnectorException r2, $r5;
        boolean $z0;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.android.server.MountService;

        $z0 = specialinvoke r0.<com.android.server.MountService: boolean isReady()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "clearpw";

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("cryptfs", $r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r6;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public int mkdirs(java.lang.String, java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2, $r22, $r41, r44, r45, r46, r48;
        int i0, $i1, $i2, $i3, $i5, $i6;
        android.os.Environment$UserEnvironment r3, $r7;
        android.app.AppOpsManager r4;
        java.io.IOException r5, $r34;
        com.android.server.NativeDaemonConnectorException r6, $r36, $r40, $r43, r47, r49;
        android.content.Context $r8;
        java.lang.Object $r9;
        java.io.File $r10;
        java.io.File[] $r11, $r12, $r13, $r14, $r15, $r16;
        boolean $z0;
        java.lang.StringBuilder $r17, $r19, $r20, $r31, $r32, $r33, $r35, $r37, $r38, $r39, $r42;
        java.lang.SecurityException $r18;
        java.lang.Object[] $r21, $r23, $r30;
        com.android.server.NativeDaemonConnector $r24, $r25, $r27;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        $r7 = new android.os.Environment$UserEnvironment;

        specialinvoke $r7.<android.os.Environment$UserEnvironment: void <init>(int)>(i0);

        r3 = $r7;

        $r8 = r0.<com.android.server.MountService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        r4 = (android.app.AppOpsManager) $r9;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r4.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>($i2, r1);

     label01:
        $r10 = new java.io.File;

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>(r2);

        r44 = virtualinvoke $r10.<java.io.File: java.lang.String getCanonicalPath()>();

     label02:
        goto label04;

     label03:
        $r34 := @caughtexception;

        r5 = $r34;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resolve ");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r42 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MountService", $r41);

        return -1;

     label04:
        $z0 = virtualinvoke r44.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 != 0 goto label05;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r44 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        $r11 = virtualinvoke r3.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppDataDirs(java.lang.String)>(r1);

        $r12 = virtualinvoke r3.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppDataDirsForVold(java.lang.String)>(r1);

        r45 = staticinvoke <com.android.server.MountService: java.lang.String maybeTranslatePathForVold(java.lang.String,java.io.File[],java.io.File[])>(r44, $r11, $r12);

        if r45 == null goto label09;

     label06:
        $r27 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r30 = newarray (java.lang.Object)[2];

        $r30[0] = "mkdirs";

        $r30[1] = r45;

        virtualinvoke $r27.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("volume", $r30);

     label07:
        return 0;

     label08:
        $r36 := @caughtexception;

        r6 = $r36;

        $i3 = virtualinvoke r6.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        return $i3;

     label09:
        $r14 = virtualinvoke r3.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppObbDirs(java.lang.String)>(r1);

        $r13 = virtualinvoke r3.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppObbDirsForVold(java.lang.String)>(r1);

        r46 = staticinvoke <com.android.server.MountService: java.lang.String maybeTranslatePathForVold(java.lang.String,java.io.File[],java.io.File[])>(r44, $r14, $r13);

        if r46 == null goto label13;

     label10:
        $r24 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r23 = newarray (java.lang.Object)[2];

        $r23[0] = "mkdirs";

        $r23[1] = r46;

        virtualinvoke $r24.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("volume", $r23);

     label11:
        return 0;

     label12:
        $r43 := @caughtexception;

        r47 = $r43;

        $i5 = virtualinvoke r47.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        return $i5;

     label13:
        $r15 = virtualinvoke r3.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppMediaDirs(java.lang.String)>(r1);

        $r16 = virtualinvoke r3.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAppMediaDirsForVold(java.lang.String)>(r1);

        r48 = staticinvoke <com.android.server.MountService: java.lang.String maybeTranslatePathForVold(java.lang.String,java.io.File[],java.io.File[])>(r44, $r15, $r16);

        if r48 == null goto label17;

     label14:
        $r25 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        $r21 = newarray (java.lang.Object)[2];

        $r21[0] = "mkdirs";

        $r21[1] = r48;

        virtualinvoke $r25.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("volume", $r21);

     label15:
        return 0;

     label16:
        $r40 := @caughtexception;

        r49 = $r40;

        $i6 = virtualinvoke r49.<com.android.server.NativeDaemonConnectorException: int getCode()>();

        return $i6;

     label17:
        $r18 = new java.lang.SecurityException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid mkdirs path: ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.SecurityException: void <init>(java.lang.String)>($r22);

        throw $r18;

        catch java.io.IOException from label01 to label02 with label03;
        catch com.android.server.NativeDaemonConnectorException from label06 to label07 with label08;
        catch com.android.server.NativeDaemonConnectorException from label10 to label11 with label12;
        catch com.android.server.NativeDaemonConnectorException from label14 to label15 with label16;
    }

    public static java.lang.String maybeTranslatePathForVold(java.lang.String, java.io.File[], java.io.File[])
    {
        java.lang.String r0, r3, $r6, $r11, r16;
        java.io.File[] r1, r2;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r4, $r7, $r8, $r12, $r13, $r14;
        java.io.File $r5, $r9, $r10;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r15;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.File[];

        r2 := @parameter2: java.io.File[];

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label1;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Paths must be 1:1 mapping");

        throw $r15;

     label1:
        i0 = 0;

     label2:
        $i3 = lengthof r1;

        if i0 >= $i3 goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r1[i0];

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        if $z0 == 0 goto label4;

        $r9 = new java.io.File;

        $r10 = r2[i0];

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        $r11 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i4);

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, $r11);

        r16 = virtualinvoke $r9.<java.io.File: java.lang.String getAbsolutePath()>();

        $z1 = virtualinvoke r16.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z1 != 0 goto label3;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return r16;

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        return null;
    }

    public android.os.storage.StorageVolume[] getVolumeList()
    {
        com.android.server.MountService r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0, z1, $z2, $z4, $z5;
        java.lang.Object r1, $r8, $r13;
        java.util.ArrayList r2, $r9;
        java.util.Iterator r3;
        android.os.storage.StorageVolume r4;
        android.os.UserHandle r5;
        java.lang.Throwable r6, $r14;
        android.content.Context $r7;
        java.lang.Object[] $r10;
        android.os.storage.StorageVolume[] $r11, $r12;

        r0 := @this: com.android.server.MountService;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r7 = r0.<com.android.server.MountService: android.content.Context mContext>;

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = virtualinvoke $r7.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.ACCESS_ALL_EXTERNAL_STORAGE", $i1, $i2);

        if $i3 != 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        z0 = $z4;

        $r8 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        r1 = $r8;

        entermonitor $r8;

     label03:
        r2 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        $r9 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        r3 = virtualinvoke $r9.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.os.storage.StorageVolume) $r13;

        r5 = virtualinvoke r4.<android.os.storage.StorageVolume: android.os.UserHandle getOwner()>();

        if r5 == null goto label05;

        $i5 = virtualinvoke r5.<android.os.UserHandle: int getIdentifier()>();

        if $i5 != i0 goto label06;

     label05:
        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        z1 = $z5;

        if z0 != 0 goto label08;

        if z1 == 0 goto label09;

     label08:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label09:
        goto label04;

     label10:
        $i4 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r11 = newarray (android.os.storage.StorageVolume)[$i4];

        $r10 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r12 = (android.os.storage.StorageVolume[]) $r10;

        exitmonitor r1;

     label11:
        return $r12;

     label12:
        $r14 := @caughtexception;

        r6 = $r14;

        exitmonitor r1;

     label13:
        throw r6;

        catch java.lang.Throwable from label03 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private void addObbStateLocked(com.android.server.MountService$ObbState) throws android.os.RemoteException
    {
        com.android.server.MountService r0;
        com.android.server.MountService$ObbState r1, r5;
        android.os.IBinder r2;
        java.util.List r3;
        java.util.Iterator r4;
        java.util.Map $r6, $r9, $r15, $r20;
        java.lang.Object $r7, $r11;
        boolean $z0, $z2, $z3;
        java.lang.String $r8, $r12, $r13;
        java.lang.IllegalStateException $r14;
        java.util.ArrayList $r16;
        android.os.RemoteException $r17, r21;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: com.android.server.MountService$ObbState;

        r2 = virtualinvoke r1.<com.android.server.MountService$ObbState: android.os.IBinder getBinder()>();

        $r6 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.util.List) $r7;

        if r3 != null goto label1;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r3 = $r16;

        $r15 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        goto label4;

     label1:
        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.MountService$ObbState) $r11;

        $r12 = r5.<com.android.server.MountService$ObbState: java.lang.String rawPath>;

        $r13 = r1.<com.android.server.MountService$ObbState: java.lang.String rawPath>;

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z2 == 0 goto label3;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Attempt to add ObbState twice. This indicates an error in the MountService logic.");

        throw $r14;

     label3:
        goto label2;

     label4:
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label5:
        virtualinvoke r1.<com.android.server.MountService$ObbState: void link()>();

     label6:
        goto label9;

     label7:
        $r17 := @caughtexception;

        r21 = $r17;

        interfaceinvoke r3.<java.util.List: boolean remove(java.lang.Object)>(r1);

        $z3 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label8;

        $r20 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label8:
        throw r21;

     label9:
        $r9 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        $r8 = r1.<com.android.server.MountService$ObbState: java.lang.String rawPath>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r1);

        return;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    private void removeObbStateLocked(com.android.server.MountService$ObbState)
    {
        com.android.server.MountService r0;
        com.android.server.MountService$ObbState r1;
        android.os.IBinder r2;
        java.util.List r3;
        java.util.Map $r4, $r7, $r9;
        java.lang.Object $r5;
        java.lang.String $r6;
        boolean $z0, $z1;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: com.android.server.MountService$ObbState;

        r2 = virtualinvoke r1.<com.android.server.MountService$ObbState: android.os.IBinder getBinder()>();

        $r4 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.util.List) $r5;

        if r3 == null goto label2;

        $z0 = interfaceinvoke r3.<java.util.List: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<com.android.server.MountService$ObbState: void unlink()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r9 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

     label2:
        $r7 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        $r6 = r1.<com.android.server.MountService$ObbState: java.lang.String rawPath>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

        return;
    }

    public static java.lang.String buildObbPath(java.lang.String, int, boolean)
    {
        java.lang.String r0, r1, r3, r4, $r12, $r16, $r17, $r24, $r25, r26, r27;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0, $z1, $z2, $z3, $z4;
        android.os.Environment$UserEnvironment r2, r6, $r7, $r20;
        java.io.File $r8, $r9, $r11, $r13, $r14, $r15, $r18, $r21, $r22, $r23;
        java.io.File[] $r10, $r19;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = staticinvoke <android.os.Environment: boolean isExternalStorageEmulated()>();

        if $z1 != 0 goto label1;

        return r0;

     label1:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String toString()>();

        $r7 = new android.os.Environment$UserEnvironment;

        specialinvoke $r7.<android.os.Environment$UserEnvironment: void <init>(int)>(i0);

        r2 = $r7;

        $r8 = virtualinvoke r2.<android.os.Environment$UserEnvironment: java.io.File getExternalStorageDirectory()>();

        r3 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>();

        $r9 = staticinvoke <android.os.Environment: java.io.File getLegacyExternalStorageDirectory()>();

        r4 = virtualinvoke $r9.<java.io.File: java.lang.String getAbsolutePath()>();

        $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        if $z3 == 0 goto label2;

        $i6 = virtualinvoke r3.<java.lang.String: int length()>();

        $i5 = $i6 + 1;

        r26 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i5);

        goto label4;

     label2:
        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(r4);

        if $z2 == 0 goto label3;

        $i2 = virtualinvoke r4.<java.lang.String: int length()>();

        $i1 = $i2 + 1;

        r26 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        goto label4;

     label3:
        return r0;

     label4:
        $z4 = virtualinvoke r26.<java.lang.String: boolean startsWith(java.lang.String)>("Android/obb");

        if $z4 == 0 goto label6;

        $r16 = "Android/obb";

        $i4 = virtualinvoke $r16.<java.lang.String: int length()>();

        $i3 = $i4 + 1;

        r27 = virtualinvoke r26.<java.lang.String: java.lang.String substring(int)>($i3);

        if z0 == 0 goto label5;

        $r21 = new java.io.File;

        $r22 = staticinvoke <android.os.Environment: java.io.File getEmulatedStorageObbSource()>();

        specialinvoke $r21.<java.io.File: void <init>(java.io.File,java.lang.String)>($r22, r27);

        $r25 = virtualinvoke $r21.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r25;

     label5:
        $r20 = new android.os.Environment$UserEnvironment;

        specialinvoke $r20.<android.os.Environment$UserEnvironment: void <init>(int)>(0);

        r6 = $r20;

        $r18 = new java.io.File;

        $r19 = virtualinvoke r6.<android.os.Environment$UserEnvironment: java.io.File[] buildExternalStorageAndroidObbDirs()>();

        $r23 = $r19[0];

        specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r23, r27);

        $r24 = virtualinvoke $r18.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r24;

     label6:
        if z0 == 0 goto label7;

        $r15 = new java.io.File;

        $r14 = staticinvoke <android.os.Environment: java.io.File getEmulatedStorageSource(int)>(i0);

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, r26);

        $r17 = virtualinvoke $r15.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r17;

     label7:
        $r11 = new java.io.File;

        $r10 = virtualinvoke r2.<android.os.Environment$UserEnvironment: java.io.File[] getExternalDirsForApp()>();

        $r13 = $r10[0];

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, r26);

        $r12 = virtualinvoke $r11.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r12;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.MountService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        com.android.internal.util.IndentingPrintWriter r4, $r14;
        java.util.Map r5, $r15, $r17, $r19;
        java.util.Iterator r6, r9, r49, r52;
        java.util.Map$Entry r7, r50;
        java.util.List r8;
        com.android.server.MountService$ObbState r10;
        java.lang.Throwable r11, r12, $r46, $r48;
        android.content.Context $r13;
        java.util.Set $r16, $r18;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r20, $r25, $r33, $r36, $r37, $r38, $r40, $r42, $r43, $r47, r51;
        java.util.ArrayList $r21;
        java.text.SimpleDateFormat $r22, r54;
        com.android.server.NativeDaemonConnector $r23;
        java.lang.String $r24, $r28, $r32, $r34, $r35, $r44;
        java.util.Date $r26;
        long $l0;
        java.util.HashMap $r27;
        java.lang.StringBuilder $r29, $r30, $r31, $r39, $r41, $r45;
        android.os.storage.StorageVolume r53;

        r0 := @this: com.android.server.MountService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r13 = r0.<com.android.server.MountService: android.content.Context mContext>;

        virtualinvoke $r13.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "MountService");

        $r14 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r14.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String,int)>(r2, "  ", 160);

        r4 = $r14;

        $r15 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        r5 = $r15;

        entermonitor $r15;

     label01:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mObbMounts:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r17 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        $r16 = interfaceinvoke $r17.<java.util.Map: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r42 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r42;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r40 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r39 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40);

        $r45 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r44);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r43 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = (java.util.List) $r43;

        r9 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label04;

        $r47 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.android.server.MountService$ObbState) $r47;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>(r10);

        goto label03;

     label04:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        goto label02;

     label05:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mObbPathToStateMap:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r19 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        $r18 = interfaceinvoke $r19.<java.util.Map: java.util.Set entrySet()>();

        r49 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r37 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        r50 = (java.util.Map$Entry) $r37;

        $r38 = interfaceinvoke r50.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r35 = (java.lang.String) $r38;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r35);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" -> ");

        $r36 = interfaceinvoke r50.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r36);

        goto label06;

     label07:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        exitmonitor r5;

     label08:
        goto label11;

     label09:
        $r46 := @caughtexception;

        r11 = $r46;

        exitmonitor r5;

     label10:
        throw r11;

     label11:
        $r20 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        r51 = $r20;

        entermonitor $r20;

     label12:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mVolumes:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r21 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        r52 = virtualinvoke $r21.<java.util.ArrayList: java.util.Iterator iterator()>();

     label13:
        $z2 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r25 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>();

        r53 = (android.os.storage.StorageVolume) $r25;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>(r53);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current state: ");

        $r27 = r0.<com.android.server.MountService: java.util.HashMap mVolumeStates>;

        $r28 = virtualinvoke r53.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        $r33 = virtualinvoke $r27.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r28);

        $r34 = (java.lang.String) $r33;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r32);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        goto label13;

     label14:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        exitmonitor r51;

     label15:
        goto label18;

     label16:
        $r48 := @caughtexception;

        r12 = $r48;

        exitmonitor r51;

     label17:
        throw r12;

     label18:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mConnection:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r23 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r23.<com.android.server.NativeDaemonConnector: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r4, r3);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        $r22 = new java.text.SimpleDateFormat;

        specialinvoke $r22.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss");

        r54 = $r22;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Last maintenance: ");

        $r26 = new java.util.Date;

        $l0 = r0.<com.android.server.MountService: long mLastMaintenance>;

        specialinvoke $r26.<java.util.Date: void <init>(long)>($l0);

        $r24 = virtualinvoke r54.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r26);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r24);

        return;

        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label12 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    public void monitor()
    {
        com.android.server.MountService r0;
        com.android.server.NativeDaemonConnector $r1, $r2;

        r0 := @this: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r2.<com.android.server.NativeDaemonConnector: void monitor()>();

     label1:
        return;
    }

    static com.android.server.MountService$ObbActionHandler access$000(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        com.android.server.MountService$ObbActionHandler $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: com.android.server.MountService$ObbActionHandler mObbActionHandler>;

        return $r1;
    }

    static int access$100(com.android.server.MountService, java.lang.String, boolean, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        boolean z0, z1;
        int $i0;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $i0 = specialinvoke r0.<com.android.server.MountService: int doUnmountVolume(java.lang.String,boolean,boolean)>(r1, z0, z1);

        return $i0;
    }

    static void access$200(com.android.server.MountService, java.lang.String, java.lang.String, boolean)
    {
        com.android.server.MountService r0;
        java.lang.String r1, r2;
        boolean z0;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.MountService: void doShareUnshareVolume(java.lang.String,java.lang.String,boolean)>(r1, r2, z0);

        return;
    }

    static com.android.server.pm.PackageManagerService access$300(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        com.android.server.pm.PackageManagerService $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: com.android.server.pm.PackageManagerService mPms>;

        return $r1;
    }

    static android.os.Handler access$400(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: android.os.Handler mHandler>;

        return $r1;
    }

    static void access$500(com.android.server.MountService)
    {
        com.android.server.MountService r0;

        r0 := @parameter0: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void handleSystemReady()>();

        return;
    }

    static void access$600(com.android.server.MountService)
    {
        com.android.server.MountService r0;

        r0 := @parameter0: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void waitForReady()>();

        return;
    }

    static long access$702(com.android.server.MountService, long)
    {
        com.android.server.MountService r0;
        long l0;

        r0 := @parameter0: com.android.server.MountService;

        l0 := @parameter1: long;

        r0.<com.android.server.MountService: long mLastMaintenance> = l0;

        return l0;
    }

    static long access$700(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        long $l0;

        r0 := @parameter0: com.android.server.MountService;

        $l0 = r0.<com.android.server.MountService: long mLastMaintenance>;

        return $l0;
    }

    static java.io.File access$800(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.io.File $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.io.File mLastMaintenanceFile>;

        return $r1;
    }

    static com.android.server.NativeDaemonConnector access$900(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        com.android.server.NativeDaemonConnector $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: com.android.server.NativeDaemonConnector mConnector>;

        return $r1;
    }

    static java.lang.Object access$1000(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.lang.Object mVolumesLock>;

        return $r1;
    }

    static void access$1100(com.android.server.MountService, android.os.UserHandle)
    {
        com.android.server.MountService r0;
        android.os.UserHandle r1;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: android.os.UserHandle;

        specialinvoke r0.<com.android.server.MountService: void createEmulatedVolumeForUserLocked(android.os.UserHandle)>(r1);

        return;
    }

    static java.util.ArrayList access$1200(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.ArrayList mVolumes>;

        return $r1;
    }

    static void access$1300(com.android.server.MountService, android.os.storage.StorageVolume)
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume r1;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: android.os.storage.StorageVolume;

        specialinvoke r0.<com.android.server.MountService: void removeVolumeLocked(android.os.storage.StorageVolume)>(r1);

        return;
    }

    static void access$1400(com.android.server.MountService, boolean)
    {
        com.android.server.MountService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.MountService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.MountService: void notifyShareAvailabilityChange(boolean)>(z0);

        return;
    }

    static java.util.ArrayList access$1500(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.ArrayList mListeners>;

        return $r1;
    }

    static java.util.HashMap access$1600(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.HashMap mVolumesByPath>;

        return $r1;
    }

    static void access$1700(com.android.server.MountService, android.os.storage.StorageVolume, java.lang.String)
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume r1;
        java.lang.String r2;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: android.os.storage.StorageVolume;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.MountService: void updatePublicVolumeState(android.os.storage.StorageVolume,java.lang.String)>(r1, r2);

        return;
    }

    static android.os.storage.StorageVolume access$1800(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        android.os.storage.StorageVolume $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = specialinvoke r0.<com.android.server.MountService: android.os.storage.StorageVolume getPrimaryPhysicalVolume()>();

        return $r1;
    }

    static java.util.concurrent.CountDownLatch access$1900(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.concurrent.CountDownLatch mConnectedSignal>;

        return $r1;
    }

    static void access$2000(com.android.server.MountService)
    {
        com.android.server.MountService r0;

        r0 := @parameter0: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void copyLocaleFromMountService()>();

        return;
    }

    static java.util.concurrent.CountDownLatch access$2100(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.concurrent.CountDownLatch mAsecsScanned>;

        return $r1;
    }

    static int access$2200(com.android.server.MountService, java.lang.String)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        int $i0;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: java.lang.String;

        $i0 = specialinvoke r0.<com.android.server.MountService: int doMountVolume(java.lang.String)>(r1);

        return $i0;
    }

    static com.android.internal.app.IMediaContainerService access$2302(com.android.server.MountService, com.android.internal.app.IMediaContainerService)
    {
        com.android.server.MountService r0;
        com.android.internal.app.IMediaContainerService r1;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: com.android.internal.app.IMediaContainerService;

        r0.<com.android.server.MountService: com.android.internal.app.IMediaContainerService mContainerService> = r1;

        return r1;
    }

    static com.android.internal.app.IMediaContainerService access$2300(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        com.android.internal.app.IMediaContainerService $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: com.android.internal.app.IMediaContainerService mContainerService>;

        return $r1;
    }

    static java.util.Map access$2400(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.Map mObbMounts>;

        return $r1;
    }

    static java.util.Map access$2500(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: java.util.Map mObbPathToStateMap>;

        return $r1;
    }

    static void access$2600(com.android.server.MountService, com.android.server.MountService$ObbState)
    {
        com.android.server.MountService r0;
        com.android.server.MountService$ObbState r1;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: com.android.server.MountService$ObbState;

        specialinvoke r0.<com.android.server.MountService: void removeObbStateLocked(com.android.server.MountService$ObbState)>(r1);

        return;
    }

    static com.android.server.MountService$DefaultContainerConnection access$2700(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        com.android.server.MountService$DefaultContainerConnection $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: com.android.server.MountService$DefaultContainerConnection mDefContainerConn>;

        return $r1;
    }

    static android.content.Context access$2800(com.android.server.MountService)
    {
        com.android.server.MountService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.MountService;

        $r1 = r0.<com.android.server.MountService: android.content.Context mContext>;

        return $r1;
    }

    static void access$2900(com.android.server.MountService)
    {
        com.android.server.MountService r0;

        r0 := @parameter0: com.android.server.MountService;

        specialinvoke r0.<com.android.server.MountService: void warnOnNotMounted()>();

        return;
    }

    static boolean access$3000(com.android.server.MountService, java.lang.String, int)
    {
        com.android.server.MountService r0;
        java.lang.String r1;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.MountService: boolean isUidOwnerOfPackageOrSystem(java.lang.String,int)>(r1, i0);

        return $z0;
    }

    static void access$3100(com.android.server.MountService, com.android.server.MountService$ObbState) throws android.os.RemoteException
    {
        com.android.server.MountService r0;
        com.android.server.MountService$ObbState r1;

        r0 := @parameter0: com.android.server.MountService;

        r1 := @parameter1: com.android.server.MountService$ObbState;

        specialinvoke r0.<com.android.server.MountService: void addObbStateLocked(com.android.server.MountService$ObbState)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        android.content.ComponentName $r1;

        <com.android.server.MountService: java.lang.String TAG_STORAGE> = "storage";

        <com.android.server.MountService: java.lang.String TAG_STORAGE_LIST> = "StorageList";

        <com.android.server.MountService: int MAX_UNMOUNT_RETRIES> = 4;

        <com.android.server.MountService: int RETRY_UNMOUNT_DELAY> = 30;

        <com.android.server.MountService: int H_FSTRIM> = 5;

        <com.android.server.MountService: int H_SYSTEM_READY> = 4;

        <com.android.server.MountService: int H_UNMOUNT_MS> = 3;

        <com.android.server.MountService: int H_UNMOUNT_PM_DONE> = 2;

        <com.android.server.MountService: int H_UNMOUNT_PM_UPDATE> = 1;

        <com.android.server.MountService: java.lang.String LAST_FSTRIM_FILE> = "last-fstrim";

        <com.android.server.MountService: int OBB_FLUSH_MOUNT_STATE> = 5;

        <com.android.server.MountService: int OBB_MCS_RECONNECT> = 4;

        <com.android.server.MountService: int OBB_MCS_UNBIND> = 3;

        <com.android.server.MountService: int OBB_MCS_BOUND> = 2;

        <com.android.server.MountService: int OBB_RUN_ACTION> = 1;

        <com.android.server.MountService: int PBKDF2_HASH_ROUNDS> = 1024;

        <com.android.server.MountService: int CRYPTO_ALGORITHM_KEY_SIZE> = 128;

        <com.android.server.MountService: int MAX_CONTAINERS> = 250;

        <com.android.server.MountService: java.lang.String VOLD_TAG> = "VoldConnector";

        <com.android.server.MountService: java.lang.String TAG> = "MountService";

        <com.android.server.MountService: boolean WATCHDOG_ENABLE> = 0;

        <com.android.server.MountService: boolean DEBUG_OBB> = 0;

        <com.android.server.MountService: boolean DEBUG_EVENTS> = 0;

        <com.android.server.MountService: boolean DEBUG_UNMOUNT> = 0;

        <com.android.server.MountService: boolean LOCAL_LOGD> = 0;

        <com.android.server.MountService: com.android.server.MountService sSelf> = null;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "password";

        $r0[1] = "default";

        $r0[2] = "pattern";

        $r0[3] = "pin";

        <com.android.server.MountService: java.lang.String[] CRYPTO_TYPES> = $r0;

        $r1 = new android.content.ComponentName;

        specialinvoke $r1.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("com.android.defcontainer", "com.android.defcontainer.DefaultContainerService");

        <com.android.server.MountService: android.content.ComponentName DEFAULT_CONTAINER_COMPONENT> = $r1;

        return;
    }
}
