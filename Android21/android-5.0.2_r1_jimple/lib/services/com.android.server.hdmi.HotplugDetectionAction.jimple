final class com.android.server.hdmi.HotplugDetectionAction extends com.android.server.hdmi.HdmiCecFeatureAction
{
    private static final java.lang.String TAG;
    private static final int POLLING_INTERVAL_MS;
    private static final int TIMEOUT_COUNT;
    private static final int STATE_WAIT_FOR_NEXT_POLLING;
    private static final int NUM_OF_ADDRESS;
    private int mTimeoutCount;

    void <init>(com.android.server.hdmi.HdmiCecLocalDevice)
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        com.android.server.hdmi.HdmiCecLocalDevice r1;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecLocalDevice;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecFeatureAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r1);

        r0.<com.android.server.hdmi.HotplugDetectionAction: int mTimeoutCount> = 0;

        return;
    }

    boolean start()
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        int $i1;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("HotPlugDetectionAction", "Hot-plug dection started.");

        r0.<com.android.server.hdmi.HotplugDetectionAction: int mState> = 1;

        r0.<com.android.server.hdmi.HotplugDetectionAction: int mTimeoutCount> = 0;

        $i1 = r0.<com.android.server.hdmi.HotplugDetectionAction: int mState>;

        virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void addTimer(int,int)>($i1, 5000);

        return 1;
    }

    boolean processCommand(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    void handleTimerEvent(int)
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.hdmi.HotplugDetectionAction: int mState>;

        if $i1 == i0 goto label1;

        return;

     label1:
        $i2 = r0.<com.android.server.hdmi.HotplugDetectionAction: int mState>;

        if $i2 != 1 goto label2;

        $i3 = r0.<com.android.server.hdmi.HotplugDetectionAction: int mTimeoutCount>;

        $i4 = $i3 + 1;

        $i5 = $i4 % 3;

        r0.<com.android.server.hdmi.HotplugDetectionAction: int mTimeoutCount> = $i5;

        specialinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void pollDevices()>();

     label2:
        return;
    }

    void pollAllDevicesNow()
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        com.android.server.hdmi.HdmiCecFeatureAction$ActionTimer $r1;
        int $i0;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        $r1 = r0.<com.android.server.hdmi.HotplugDetectionAction: com.android.server.hdmi.HdmiCecFeatureAction$ActionTimer mActionTimer>;

        interfaceinvoke $r1.<com.android.server.hdmi.HdmiCecFeatureAction$ActionTimer: void clearTimerMessage()>();

        r0.<com.android.server.hdmi.HotplugDetectionAction: int mTimeoutCount> = 0;

        r0.<com.android.server.hdmi.HotplugDetectionAction: int mState> = 1;

        specialinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void pollAllDevices()>();

        $i0 = r0.<com.android.server.hdmi.HotplugDetectionAction: int mState>;

        virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void addTimer(int,int)>($i0, 5000);

        return;
    }

    private void pollDevices()
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        int $i0, $i1;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        $i0 = r0.<com.android.server.hdmi.HotplugDetectionAction: int mTimeoutCount>;

        if $i0 != 0 goto label1;

        specialinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void pollAllDevices()>();

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $z0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isSystemAudioActivated()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void pollAudioSystem()>();

     label2:
        $i1 = r0.<com.android.server.hdmi.HotplugDetectionAction: int mState>;

        virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void addTimer(int,int)>($i1, 5000);

        return;
    }

    private void pollAllDevices()
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        com.android.server.hdmi.HotplugDetectionAction$1 $r1;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("HotPlugDetectionAction", "Poll all devices.");

        $r1 = new com.android.server.hdmi.HotplugDetectionAction$1;

        specialinvoke $r1.<com.android.server.hdmi.HotplugDetectionAction$1: void <init>(com.android.server.hdmi.HotplugDetectionAction)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void pollDevices(com.android.server.hdmi.HdmiControlService$DevicePollingCallback,int,int)>($r1, 65537, 1);

        return;
    }

    private void pollAudioSystem()
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        com.android.server.hdmi.HotplugDetectionAction$2 $r1;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("HotPlugDetectionAction", "Poll audio system.");

        $r1 = new com.android.server.hdmi.HotplugDetectionAction$2;

        specialinvoke $r1.<com.android.server.hdmi.HotplugDetectionAction$2: void <init>(com.android.server.hdmi.HotplugDetectionAction)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void pollDevices(com.android.server.hdmi.HdmiControlService$DevicePollingCallback,int,int)>($r1, 65538, 1);

        return;
    }

    private void checkHotplug(java.util.List, boolean)
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        java.util.List r1, $r7;
        boolean z0;
        java.util.BitSet r2, r3, r4, r5;
        int i0, $i1, $i2, $i3, $i4, i7;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13, $r14;
        java.lang.String $r11, $r15;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        $r6 = virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $r7 = virtualinvoke $r6.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List getDeviceInfoList(boolean)>(0);

        r2 = staticinvoke <com.android.server.hdmi.HotplugDetectionAction: java.util.BitSet infoListToBitSet(java.util.List,boolean)>($r7, z0);

        r3 = staticinvoke <com.android.server.hdmi.HotplugDetectionAction: java.util.BitSet addressListToBitSet(java.util.List)>(r1);

        r4 = staticinvoke <com.android.server.hdmi.HotplugDetectionAction: java.util.BitSet complement(java.util.BitSet,java.util.BitSet)>(r2, r3);

        i0 = -1;

     label1:
        $i1 = i0 + 1;

        $i2 = virtualinvoke r4.<java.util.BitSet: int nextSetBit(int)>($i1);

        i0 = $i2;

        if $i2 == -1 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remove device by hot-plug detection:");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("HotPlugDetectionAction", $r15);

        specialinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void removeDevice(int)>(i0);

        goto label1;

     label2:
        r5 = staticinvoke <com.android.server.hdmi.HotplugDetectionAction: java.util.BitSet complement(java.util.BitSet,java.util.BitSet)>(r3, r2);

        i7 = -1;

     label3:
        $i4 = i7 + 1;

        $i3 = virtualinvoke r5.<java.util.BitSet: int nextSetBit(int)>($i4);

        i7 = $i3;

        if $i3 == -1 goto label4;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Add device by hot-plug detection:");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("HotPlugDetectionAction", $r11);

        specialinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void addDevice(int)>(i7);

        goto label3;

     label4:
        return;
    }

    private static java.util.BitSet infoListToBitSet(java.util.List, boolean)
    {
        java.util.List r0;
        boolean z0, $z1;
        java.util.BitSet r1, $r4;
        java.util.Iterator r2;
        android.hardware.hdmi.HdmiDeviceInfo r3;
        java.lang.Object $r5;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        $r4 = new java.util.BitSet;

        specialinvoke $r4.<java.util.BitSet: void <init>(int)>(15);

        r1 = $r4;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.hardware.hdmi.HdmiDeviceInfo) $r5;

        if z0 == 0 goto label2;

        $i1 = virtualinvoke r3.<android.hardware.hdmi.HdmiDeviceInfo: int getDeviceType()>();

        if $i1 != 5 goto label3;

        $i2 = virtualinvoke r3.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        virtualinvoke r1.<java.util.BitSet: void set(int)>($i2);

        goto label3;

     label2:
        $i0 = virtualinvoke r3.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        virtualinvoke r1.<java.util.BitSet: void set(int)>($i0);

     label3:
        goto label1;

     label4:
        return r1;
    }

    private static java.util.BitSet addressListToBitSet(java.util.List)
    {
        java.util.List r0;
        java.util.BitSet r1, $r4;
        java.util.Iterator r2;
        java.lang.Integer r3;
        boolean $z0;
        java.lang.Object $r5;
        int $i0;

        r0 := @parameter0: java.util.List;

        $r4 = new java.util.BitSet;

        specialinvoke $r4.<java.util.BitSet: void <init>(int)>(15);

        r1 = $r4;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<java.util.BitSet: void set(int)>($i0);

        goto label1;

     label2:
        return r1;
    }

    private static java.util.BitSet complement(java.util.BitSet, java.util.BitSet)
    {
        java.util.BitSet r0, r1, r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.util.BitSet;

        r1 := @parameter1: java.util.BitSet;

        $r3 = virtualinvoke r0.<java.util.BitSet: java.lang.Object clone()>();

        r2 = (java.util.BitSet) $r3;

        virtualinvoke r2.<java.util.BitSet: void andNot(java.util.BitSet)>(r1);

        return r2;
    }

    private void addDevice(int)
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        int i0, $i1;
        com.android.server.hdmi.HdmiCecMessage $r1;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: int getSourceAddress()>();

        $r1 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildGivePhysicalAddress(int,int)>($i1, i0);

        virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void sendCommand(com.android.server.hdmi.HdmiCecMessage)>($r1);

        return;
    }

    private void removeDevice(int)
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        int i0;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r1;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void mayChangeRoutingPath(int)>(i0);

        specialinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void mayCancelDeviceSelect(int)>(i0);

        specialinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void mayCancelOneTouchRecord(int)>(i0);

        specialinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void mayDisableSystemAudioAndARC(int)>(i0);

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeCecDevice(int)>(i0);

        return;
    }

    private void mayChangeRoutingPath(int)
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        int i0, $i1;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r2, $r3;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        i0 := @parameter0: int;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        r1 = virtualinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>(i0);

        if r1 == null goto label1;

        $r3 = virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $i1 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        virtualinvoke $r3.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void handleRemoveActiveRoutingPath(int)>($i1);

     label1:
        return;
    }

    private void mayCancelDeviceSelect(int)
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        int i0, $i1;
        java.util.List r1;
        com.android.server.hdmi.DeviceSelectAction r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: java.util.List getActions(java.lang.Class)>(class "com/android/server/hdmi/DeviceSelectAction");

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (com.android.server.hdmi.DeviceSelectAction) $r3;

        $i1 = virtualinvoke r2.<com.android.server.hdmi.DeviceSelectAction: int getTargetAddress()>();

        if $i1 != i0 goto label2;

        virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void removeAction(java.lang.Class)>(class "com/android/server/hdmi/DeviceSelectAction");

     label2:
        return;
    }

    private void mayCancelOneTouchRecord(int)
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        int i0, $i1;
        java.util.List r1;
        java.util.Iterator r2;
        com.android.server.hdmi.OneTouchRecordAction r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: java.util.List getActions(java.lang.Class)>(class "com/android/server/hdmi/OneTouchRecordAction");

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.hdmi.OneTouchRecordAction) $r4;

        $i1 = virtualinvoke r3.<com.android.server.hdmi.OneTouchRecordAction: int getRecorderAddress()>();

        if $i1 != i0 goto label2;

        virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void removeAction(com.android.server.hdmi.HdmiCecFeatureAction)>(r3);

     label2:
        goto label1;

     label3:
        return;
    }

    private void mayDisableSystemAudioAndARC(int)
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        int i0, $i1;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r1, $r2;
        boolean $z0;
        com.android.server.hdmi.RequestArcTerminationAction $r3;
        com.android.server.hdmi.HdmiCecLocalDevice $r4;

        r0 := @this: com.android.server.hdmi.HotplugDetectionAction;

        i0 := @parameter0: int;

        $i1 = staticinvoke <com.android.server.hdmi.HdmiUtils: int getTypeFromAddress(int)>(i0);

        if $i1 == 5 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setSystemAudioMode(boolean,boolean)>(0, 1);

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isArcEstabilished()>();

        if $z0 == 0 goto label2;

        $r3 = new com.android.server.hdmi.RequestArcTerminationAction;

        $r4 = virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: com.android.server.hdmi.HdmiCecLocalDevice localDevice()>();

        specialinvoke $r3.<com.android.server.hdmi.RequestArcTerminationAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int)>($r4, i0);

        virtualinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r3);

     label2:
        return;
    }

    static void access$000(com.android.server.hdmi.HotplugDetectionAction, java.util.List, boolean)
    {
        com.android.server.hdmi.HotplugDetectionAction r0;
        java.util.List r1;
        boolean z0;

        r0 := @parameter0: com.android.server.hdmi.HotplugDetectionAction;

        r1 := @parameter1: java.util.List;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.hdmi.HotplugDetectionAction: void checkHotplug(java.util.List,boolean)>(r1, z0);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.hdmi.HotplugDetectionAction: int NUM_OF_ADDRESS> = 15;

        <com.android.server.hdmi.HotplugDetectionAction: int STATE_WAIT_FOR_NEXT_POLLING> = 1;

        <com.android.server.hdmi.HotplugDetectionAction: int TIMEOUT_COUNT> = 3;

        <com.android.server.hdmi.HotplugDetectionAction: int POLLING_INTERVAL_MS> = 5000;

        <com.android.server.hdmi.HotplugDetectionAction: java.lang.String TAG> = "HotPlugDetectionAction";

        return;
    }
}
