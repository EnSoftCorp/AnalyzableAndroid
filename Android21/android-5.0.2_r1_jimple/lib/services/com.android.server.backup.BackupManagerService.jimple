public class com.android.server.backup.BackupManagerService extends android.app.backup.IBackupManager$Stub
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static final boolean MORE_DEBUG;
    private static final boolean DEBUG_SCHEDULING;
    static final java.lang.String KEY_WIDGET_STATE;
    static final java.lang.String PBKDF_CURRENT;
    static final java.lang.String PBKDF_FALLBACK;
    static final java.lang.String BACKUP_MANIFEST_FILENAME;
    static final int BACKUP_MANIFEST_VERSION;
    static final int BACKUP_FILE_VERSION;
    static final java.lang.String BACKUP_FILE_HEADER_MAGIC;
    static final int BACKUP_PW_FILE_VERSION;
    static final java.lang.String BACKUP_METADATA_FILENAME;
    static final int BACKUP_METADATA_VERSION;
    static final int BACKUP_WIDGET_METADATA_TOKEN;
    static final boolean COMPRESS_FULL_BACKUPS;
    static final java.lang.String SETTINGS_PACKAGE;
    static final java.lang.String SHARED_BACKUP_AGENT_PACKAGE;
    static final java.lang.String SERVICE_ACTION_TRANSPORT_HOST;
    private static final long BACKUP_INTERVAL;
    private static final int FUZZ_MILLIS;
    private static final long FIRST_BACKUP_INTERVAL;
    private static final long TRANSPORT_RETRY_INTERVAL;
    private static final java.lang.String RUN_BACKUP_ACTION;
    private static final java.lang.String RUN_INITIALIZE_ACTION;
    private static final java.lang.String RUN_CLEAR_ACTION;
    private static final int MSG_RUN_BACKUP;
    private static final int MSG_RUN_ADB_BACKUP;
    private static final int MSG_RUN_RESTORE;
    private static final int MSG_RUN_CLEAR;
    private static final int MSG_RUN_INITIALIZE;
    private static final int MSG_RUN_GET_RESTORE_SETS;
    private static final int MSG_TIMEOUT;
    private static final int MSG_RESTORE_TIMEOUT;
    private static final int MSG_FULL_CONFIRMATION_TIMEOUT;
    private static final int MSG_RUN_ADB_RESTORE;
    private static final int MSG_RETRY_INIT;
    private static final int MSG_RETRY_CLEAR;
    private static final int MSG_WIDGET_BROADCAST;
    private static final int MSG_RUN_FULL_TRANSPORT_BACKUP;
    static final int MSG_BACKUP_RESTORE_STEP;
    static final int MSG_OP_COMPLETE;
    static final long TIMEOUT_INTERVAL;
    static final long TIMEOUT_BACKUP_INTERVAL;
    static final long TIMEOUT_FULL_BACKUP_INTERVAL;
    static final long TIMEOUT_SHARED_BACKUP_INTERVAL;
    static final long TIMEOUT_RESTORE_INTERVAL;
    static final long TIMEOUT_RESTORE_FINISHED_INTERVAL;
    static final long TIMEOUT_FULL_CONFIRMATION;
    static final long MIN_FULL_BACKUP_INTERVAL;
    android.content.Context mContext;
    private android.content.pm.PackageManager mPackageManager;
    android.content.pm.IPackageManager mPackageManagerBinder;
    private android.app.IActivityManager mActivityManager;
    private android.os.PowerManager mPowerManager;
    private android.app.AlarmManager mAlarmManager;
    private android.os.storage.IMountService mMountService;
    android.app.backup.IBackupManager mBackupManagerBinder;
    boolean mEnabled;
    boolean mProvisioned;
    boolean mAutoRestore;
    android.os.PowerManager$WakeLock mWakelock;
    android.os.HandlerThread mHandlerThread;
    com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler;
    android.app.PendingIntent mRunBackupIntent;
    android.app.PendingIntent mRunInitIntent;
    android.content.BroadcastReceiver mRunBackupReceiver;
    android.content.BroadcastReceiver mRunInitReceiver;
    final android.util.SparseArray mBackupParticipants;
    java.util.HashMap mPendingBackups;
    static final java.lang.String PACKAGE_MANAGER_SENTINEL;
    final java.lang.Object mQueueLock;
    final java.lang.Object mAgentConnectLock;
    android.app.IBackupAgent mConnectedAgent;
    volatile boolean mBackupRunning;
    volatile boolean mConnecting;
    volatile long mLastBackupPass;
    volatile long mNextBackupPass;
    static final boolean DEBUG_BACKUP_TRACE;
    final java.util.List mBackupTrace;
    final java.lang.Object mClearDataLock;
    volatile boolean mClearingData;
    final android.content.Intent mTransportServiceIntent;
    final android.util.ArrayMap mTransportNames;
    final android.util.ArrayMap mTransports;
    final android.util.ArrayMap mTransportConnections;
    java.lang.String mCurrentTransport;
    com.android.server.backup.BackupManagerService$ActiveRestoreSession mActiveRestoreSession;
    android.database.ContentObserver mProvisionedObserver;
    static com.android.server.backup.BackupManagerService sInstance;
    static final int OP_PENDING;
    static final int OP_ACKNOWLEDGED;
    static final int OP_TIMEOUT;
    final android.util.SparseArray mCurrentOperations;
    final java.lang.Object mCurrentOpLock;
    final java.util.Random mTokenGenerator;
    final android.util.SparseArray mFullConfirmations;
    java.io.File mBaseStateDir;
    java.io.File mDataDir;
    java.io.File mJournalDir;
    java.io.File mJournal;
    private final java.security.SecureRandom mRng;
    private java.lang.String mPasswordHash;
    private java.io.File mPasswordHashFile;
    private int mPasswordVersion;
    private java.io.File mPasswordVersionFile;
    private byte[] mPasswordSalt;
    static final int PBKDF2_HASH_ROUNDS;
    static final int PBKDF2_KEY_SIZE;
    static final int PBKDF2_SALT_SIZE;
    static final java.lang.String ENCRYPTION_ALGORITHM_NAME;
    private java.io.File mEverStored;
    java.util.HashSet mEverStoredApps;
    static final int CURRENT_ANCESTRAL_RECORD_VERSION;
    java.io.File mTokenFile;
    java.util.Set mAncestralPackages;
    long mAncestralToken;
    long mCurrentToken;
    static final java.lang.String INIT_SENTINEL_FILE_NAME;
    java.util.HashSet mPendingInits;
    static final int SCHEDULE_FILE_VERSION;
    java.io.File mFullBackupScheduleFile;
    com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask mRunningFullBackupTask;
    java.util.ArrayList mFullBackupQueue;
    java.lang.Runnable mFullBackupScheduleWriter;
    android.content.BroadcastReceiver mBroadcastReceiver;

    static com.android.server.backup.BackupManagerService getInstance()
    {
        com.android.server.backup.BackupManagerService $r0;

        $r0 = <com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService sInstance>;

        return $r0;
    }

    int generateToken()
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.util.Random r1, $r3, $r4;
        java.lang.Throwable r2, $r5;

        r0 := @this: com.android.server.backup.BackupManagerService;

     label1:
        $r3 = r0.<com.android.server.backup.BackupManagerService: java.util.Random mTokenGenerator>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        $r4 = r0.<com.android.server.backup.BackupManagerService: java.util.Random mTokenGenerator>;

        i0 = virtualinvoke $r4.<java.util.Random: int nextInt()>();

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        if i0 < 0 goto label1;

        return i0;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static boolean appIsEligibleForBackup(android.content.pm.ApplicationInfo)
    {
        android.content.pm.ApplicationInfo r0;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @parameter0: android.content.pm.ApplicationInfo;

        $i0 = r0.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & 32768;

        if $i1 != 0 goto label1;

        return 0;

     label1:
        $i2 = r0.<android.content.pm.ApplicationInfo: int uid>;

        if $i2 >= 10000 goto label2;

        $r2 = r0.<android.content.pm.ApplicationInfo: java.lang.String backupAgentName>;

        if $r2 != null goto label2;

        return 0;

     label2:
        $r1 = r0.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("com.android.sharedstoragebackup");

        if $z0 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public static boolean appGetsFullBackup(android.content.pm.PackageInfo)
    {
        android.content.pm.PackageInfo r0;
        android.content.pm.ApplicationInfo $r1, $r3;
        java.lang.String $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: android.content.pm.PackageInfo;

        $r1 = r0.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r2 = $r1.<android.content.pm.ApplicationInfo: java.lang.String backupAgentName>;

        if $r2 == null goto label3;

        $r3 = r0.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r3.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & 67108864;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        return 1;
    }

    void addBackupTrace(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        java.util.List r2, $r4, $r5;
        java.lang.Throwable r3, $r6;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.backup.BackupManagerService: java.util.List mBackupTrace>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.backup.BackupManagerService: java.util.List mBackupTrace>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void clearBackupTrace()
    {
        com.android.server.backup.BackupManagerService r0;
        java.util.List r1, $r3, $r4;
        java.lang.Throwable r2, $r5;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r3 = r0.<com.android.server.backup.BackupManagerService: java.util.List mBackupTrace>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.backup.BackupManagerService: java.util.List mBackupTrace>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.backup.BackupManagerService r0;
        android.content.Context r1;
        android.content.ContentResolver r2, $r85;
        java.io.FileInputStream r3, $r98, $r105, r128;
        java.io.DataInputStream r4, $r103, $r108, r129;
        java.lang.Throwable r6, r8, r10, $r113, $r119, $r123;
        android.util.SparseArray $r11, $r20, $r25, $r83, r138;
        java.util.HashMap $r12;
        java.lang.Object $r13, $r14, $r17, $r23, $r33, $r35, $r100;
        java.util.ArrayList $r15;
        android.content.Intent $r16, $r65, $r68, $r86, r136, r137;
        android.util.ArrayMap $r18, $r19, $r21;
        java.util.Random $r22;
        java.security.SecureRandom $r24;
        java.util.HashSet $r26, $r27;
        com.android.server.backup.BackupManagerService$2 $r28;
        com.android.server.backup.BackupManagerService$1 $r29;
        android.content.pm.IPackageManager $r30;
        android.content.pm.PackageManager $r31, $r87;
        android.app.AlarmManager $r32;
        android.app.IActivityManager $r34;
        android.os.storage.IMountService $r36;
        android.os.IBinder $r37, $r39;
        android.os.PowerManager $r38, $r102;
        android.os.HandlerThread $r40, $r43, $r44;
        com.android.server.backup.BackupManagerService$BackupHandler $r41, $r47;
        android.app.backup.IBackupManager $r42;
        int $i0, $i1, $i3, $i4, $i8, i16, i17;
        android.os.Looper $r45;
        android.net.Uri $r46;
        com.android.server.backup.BackupManagerService$ProvisionedObserver $r48;
        java.io.File $r49, $r50, $r51, $r53, $r54, $r55, $r56, $r57, $r62, $r63, $r64, $r73, $r74, $r75, $r78, $r79, $r104, $r109, $r117;
        android.database.ContentObserver $r52;
        boolean $z0, $z2, $z3, $z5, $z7, $z8;
        com.android.server.backup.BackupManagerService$RunBackupReceiver $r58;
        android.content.IntentFilter $r59, $r70, r134, r135;
        android.content.BroadcastReceiver $r60, $r71;
        android.app.PendingIntent $r67, $r76;
        com.android.server.backup.BackupManagerService$RunInitializeReceiver $r69;
        java.lang.String $r80, $r81, $r84, $r88, $r89, $r93, $r106, $r118;
        java.lang.StringBuilder $r82, $r90, $r91, $r92, $r96, $r97, $r114, $r115, $r116;
        java.io.Serializable $r94;
        android.content.pm.ResolveInfo $r99;
        android.os.PowerManager$WakeLock $r101;
        java.io.BufferedInputStream $r107;
        java.io.IOException $r110, $r111, $r112, $r120, $r121, $r122, $r124, $r125;
        byte[] r130;
        java.util.List r139;
        android.content.pm.ServiceInfo r140;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.app.backup.IBackupManager$Stub: void <init>()>();

        $r11 = new android.util.SparseArray;

        specialinvoke $r11.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants> = $r11;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: java.util.HashMap mPendingBackups> = $r12;

        $r13 = new java.lang.Object;

        specialinvoke $r13.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: java.lang.Object mQueueLock> = $r13;

        $r14 = new java.lang.Object;

        specialinvoke $r14.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: java.lang.Object mAgentConnectLock> = $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: java.util.List mBackupTrace> = $r15;

        $r17 = new java.lang.Object;

        specialinvoke $r17.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: java.lang.Object mClearDataLock> = $r17;

        $r16 = new android.content.Intent;

        specialinvoke $r16.<android.content.Intent: void <init>(java.lang.String)>("android.backup.TRANSPORT_HOST");

        r0.<com.android.server.backup.BackupManagerService: android.content.Intent mTransportServiceIntent> = $r16;

        $r19 = new android.util.ArrayMap;

        specialinvoke $r19.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransportNames> = $r19;

        $r18 = new android.util.ArrayMap;

        specialinvoke $r18.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports> = $r18;

        $r21 = new android.util.ArrayMap;

        specialinvoke $r21.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransportConnections> = $r21;

        $r20 = new android.util.SparseArray;

        specialinvoke $r20.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mCurrentOperations> = $r20;

        $r23 = new java.lang.Object;

        specialinvoke $r23.<java.lang.Object: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock> = $r23;

        $r22 = new java.util.Random;

        specialinvoke $r22.<java.util.Random: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: java.util.Random mTokenGenerator> = $r22;

        $r25 = new android.util.SparseArray;

        specialinvoke $r25.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mFullConfirmations> = $r25;

        $r24 = new java.security.SecureRandom;

        specialinvoke $r24.<java.security.SecureRandom: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: java.security.SecureRandom mRng> = $r24;

        $r27 = new java.util.HashSet;

        specialinvoke $r27.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mEverStoredApps> = $r27;

        r0.<com.android.server.backup.BackupManagerService: java.util.Set mAncestralPackages> = null;

        r0.<com.android.server.backup.BackupManagerService: long mAncestralToken> = 0L;

        r0.<com.android.server.backup.BackupManagerService: long mCurrentToken> = 0L;

        $r26 = new java.util.HashSet;

        specialinvoke $r26.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mPendingInits> = $r26;

        $r29 = new com.android.server.backup.BackupManagerService$1;

        specialinvoke $r29.<com.android.server.backup.BackupManagerService$1: void <init>(com.android.server.backup.BackupManagerService)>(r0);

        r0.<com.android.server.backup.BackupManagerService: java.lang.Runnable mFullBackupScheduleWriter> = $r29;

        $r28 = new com.android.server.backup.BackupManagerService$2;

        specialinvoke $r28.<com.android.server.backup.BackupManagerService$2: void <init>(com.android.server.backup.BackupManagerService)>(r0);

        r0.<com.android.server.backup.BackupManagerService: android.content.BroadcastReceiver mBroadcastReceiver> = $r28;

        r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext> = r1;

        $r31 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.backup.BackupManagerService: android.content.pm.PackageManager mPackageManager> = $r31;

        $r30 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r0.<com.android.server.backup.BackupManagerService: android.content.pm.IPackageManager mPackageManagerBinder> = $r30;

        $r34 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        r0.<com.android.server.backup.BackupManagerService: android.app.IActivityManager mActivityManager> = $r34;

        $r35 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        $r32 = (android.app.AlarmManager) $r35;

        r0.<com.android.server.backup.BackupManagerService: android.app.AlarmManager mAlarmManager> = $r32;

        $r33 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r38 = (android.os.PowerManager) $r33;

        r0.<com.android.server.backup.BackupManagerService: android.os.PowerManager mPowerManager> = $r38;

        $r39 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        $r36 = staticinvoke <android.os.storage.IMountService$Stub: android.os.storage.IMountService asInterface(android.os.IBinder)>($r39);

        r0.<com.android.server.backup.BackupManagerService: android.os.storage.IMountService mMountService> = $r36;

        $r37 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: android.os.IBinder asBinder()>();

        $r42 = staticinvoke <com.android.server.backup.BackupManagerService: android.app.backup.IBackupManager asInterface(android.os.IBinder)>($r37);

        r0.<com.android.server.backup.BackupManagerService: android.app.backup.IBackupManager mBackupManagerBinder> = $r42;

        $r43 = new android.os.HandlerThread;

        specialinvoke $r43.<android.os.HandlerThread: void <init>(java.lang.String,int)>("backup", 10);

        r0.<com.android.server.backup.BackupManagerService: android.os.HandlerThread mHandlerThread> = $r43;

        $r40 = r0.<com.android.server.backup.BackupManagerService: android.os.HandlerThread mHandlerThread>;

        virtualinvoke $r40.<android.os.HandlerThread: void start()>();

        $r41 = new com.android.server.backup.BackupManagerService$BackupHandler;

        $r44 = r0.<com.android.server.backup.BackupManagerService: android.os.HandlerThread mHandlerThread>;

        $r45 = virtualinvoke $r44.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r41.<com.android.server.backup.BackupManagerService$BackupHandler: void <init>(com.android.server.backup.BackupManagerService,android.os.Looper)>(r0, $r45);

        r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler> = $r41;

        r2 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r2, "device_provisioned", 0);

        if $i0 == 0 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        r0.<com.android.server.backup.BackupManagerService: boolean mProvisioned> = $z7;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>(r2, "backup_auto_restore", 1);

        if $i1 == 0 goto label03;

        $z8 = 1;

        goto label04;

     label03:
        $z8 = 0;

     label04:
        r0.<com.android.server.backup.BackupManagerService: boolean mAutoRestore> = $z8;

        $r48 = new com.android.server.backup.BackupManagerService$ProvisionedObserver;

        $r47 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        specialinvoke $r48.<com.android.server.backup.BackupManagerService$ProvisionedObserver: void <init>(com.android.server.backup.BackupManagerService,android.os.Handler)>(r0, $r47);

        r0.<com.android.server.backup.BackupManagerService: android.database.ContentObserver mProvisionedObserver> = $r48;

        $r46 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("device_provisioned");

        $r52 = r0.<com.android.server.backup.BackupManagerService: android.database.ContentObserver mProvisionedObserver>;

        virtualinvoke r2.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r46, 0, $r52);

        $r51 = new java.io.File;

        $r50 = staticinvoke <android.os.Environment: java.io.File getSecureDataDirectory()>();

        specialinvoke $r51.<java.io.File: void <init>(java.io.File,java.lang.String)>($r50, "backup");

        r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir> = $r51;

        $r49 = r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir>;

        virtualinvoke $r49.<java.io.File: boolean mkdirs()>();

        $r54 = r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir>;

        $z0 = staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>($r54);

        if $z0 != 0 goto label05;

        $r114 = new java.lang.StringBuilder;

        specialinvoke $r114.<java.lang.StringBuilder: void <init>()>();

        $r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELinux restorecon failed on ");

        $r117 = r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir>;

        $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r117);

        $r118 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r118);

     label05:
        $r53 = staticinvoke <android.os.Environment: java.io.File getDownloadCacheDirectory()>();

        r0.<com.android.server.backup.BackupManagerService: java.io.File mDataDir> = $r53;

        r0.<com.android.server.backup.BackupManagerService: int mPasswordVersion> = 1;

        $r57 = new java.io.File;

        $r56 = r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r57.<java.io.File: void <init>(java.io.File,java.lang.String)>($r56, "pwversion");

        r0.<com.android.server.backup.BackupManagerService: java.io.File mPasswordVersionFile> = $r57;

        $r55 = r0.<com.android.server.backup.BackupManagerService: java.io.File mPasswordVersionFile>;

        $z2 = virtualinvoke $r55.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label22;

        r3 = null;

        r4 = null;

     label06:
        $r105 = new java.io.FileInputStream;

        $r104 = r0.<com.android.server.backup.BackupManagerService: java.io.File mPasswordVersionFile>;

        specialinvoke $r105.<java.io.FileInputStream: void <init>(java.io.File)>($r104);

        r3 = $r105;

        $r103 = new java.io.DataInputStream;

        specialinvoke $r103.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r3);

        r4 = $r103;

        $i8 = virtualinvoke r4.<java.io.DataInputStream: int readInt()>();

        r0.<com.android.server.backup.BackupManagerService: int mPasswordVersion> = $i8;

     label07:
        if r4 == null goto label08;

        virtualinvoke r4.<java.io.DataInputStream: void close()>();

     label08:
        if r3 == null goto label09;

        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label09:
        goto label22;

     label10:
        $r112 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Error closing pw version files");

        goto label22;

     label11:
        $r120 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to read backup pw version");

     label12:
        if r4 == null goto label13;

        virtualinvoke r4.<java.io.DataInputStream: void close()>();

     label13:
        if r3 == null goto label14;

        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label14:
        goto label22;

     label15:
        $r122 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Error closing pw version files");

        goto label22;

     label16:
        $r123 := @caughtexception;

        r6 = $r123;

     label17:
        if r4 == null goto label18;

        virtualinvoke r4.<java.io.DataInputStream: void close()>();

     label18:
        if r3 == null goto label19;

        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label19:
        goto label21;

     label20:
        $r110 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Error closing pw version files");

     label21:
        throw r6;

     label22:
        $r62 = new java.io.File;

        $r63 = r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r62.<java.io.File: void <init>(java.io.File,java.lang.String)>($r63, "pwhash");

        r0.<com.android.server.backup.BackupManagerService: java.io.File mPasswordHashFile> = $r62;

        $r64 = r0.<com.android.server.backup.BackupManagerService: java.io.File mPasswordHashFile>;

        $z3 = virtualinvoke $r64.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label39;

        r128 = null;

        r129 = null;

     label23:
        $r98 = new java.io.FileInputStream;

        $r109 = r0.<com.android.server.backup.BackupManagerService: java.io.File mPasswordHashFile>;

        specialinvoke $r98.<java.io.FileInputStream: void <init>(java.io.File)>($r109);

        r128 = $r98;

        $r108 = new java.io.DataInputStream;

        $r107 = new java.io.BufferedInputStream;

        specialinvoke $r107.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r128);

        specialinvoke $r108.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r107);

        r129 = $r108;

        i16 = virtualinvoke r129.<java.io.DataInputStream: int readInt()>();

        r130 = newarray (byte)[i16];

        virtualinvoke r129.<java.io.DataInputStream: void readFully(byte[])>(r130);

        $r106 = virtualinvoke r129.<java.io.DataInputStream: java.lang.String readUTF()>();

        r0.<com.android.server.backup.BackupManagerService: java.lang.String mPasswordHash> = $r106;

        r0.<com.android.server.backup.BackupManagerService: byte[] mPasswordSalt> = r130;

     label24:
        if r129 == null goto label25;

        virtualinvoke r129.<java.io.DataInputStream: void close()>();

     label25:
        if r128 == null goto label26;

        virtualinvoke r128.<java.io.FileInputStream: void close()>();

     label26:
        goto label39;

     label27:
        $r111 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to close streams");

        goto label39;

     label28:
        $r124 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to read saved backup pw hash");

     label29:
        if r129 == null goto label30;

        virtualinvoke r129.<java.io.DataInputStream: void close()>();

     label30:
        if r128 == null goto label31;

        virtualinvoke r128.<java.io.FileInputStream: void close()>();

     label31:
        goto label39;

     label32:
        $r121 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to close streams");

        goto label39;

     label33:
        $r113 := @caughtexception;

        r8 = $r113;

     label34:
        if r129 == null goto label35;

        virtualinvoke r129.<java.io.DataInputStream: void close()>();

     label35:
        if r128 == null goto label36;

        virtualinvoke r128.<java.io.FileInputStream: void close()>();

     label36:
        goto label38;

     label37:
        $r125 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to close streams");

     label38:
        throw r8;

     label39:
        $r58 = new com.android.server.backup.BackupManagerService$RunBackupReceiver;

        specialinvoke $r58.<com.android.server.backup.BackupManagerService$RunBackupReceiver: void <init>(com.android.server.backup.BackupManagerService,com.android.server.backup.BackupManagerService$1)>(r0, null);

        r0.<com.android.server.backup.BackupManagerService: android.content.BroadcastReceiver mRunBackupReceiver> = $r58;

        $r59 = new android.content.IntentFilter;

        specialinvoke $r59.<android.content.IntentFilter: void <init>()>();

        r134 = $r59;

        virtualinvoke r134.<android.content.IntentFilter: void addAction(java.lang.String)>("android.app.backup.intent.RUN");

        $r60 = r0.<com.android.server.backup.BackupManagerService: android.content.BroadcastReceiver mRunBackupReceiver>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r60, r134, "android.permission.BACKUP", null);

        $r69 = new com.android.server.backup.BackupManagerService$RunInitializeReceiver;

        specialinvoke $r69.<com.android.server.backup.BackupManagerService$RunInitializeReceiver: void <init>(com.android.server.backup.BackupManagerService,com.android.server.backup.BackupManagerService$1)>(r0, null);

        r0.<com.android.server.backup.BackupManagerService: android.content.BroadcastReceiver mRunInitReceiver> = $r69;

        $r70 = new android.content.IntentFilter;

        specialinvoke $r70.<android.content.IntentFilter: void <init>()>();

        r135 = $r70;

        virtualinvoke r135.<android.content.IntentFilter: void addAction(java.lang.String)>("android.app.backup.intent.INIT");

        $r71 = r0.<com.android.server.backup.BackupManagerService: android.content.BroadcastReceiver mRunInitReceiver>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r71, r135, "android.permission.BACKUP", null);

        $r65 = new android.content.Intent;

        specialinvoke $r65.<android.content.Intent: void <init>(java.lang.String)>("android.app.backup.intent.RUN");

        r136 = $r65;

        virtualinvoke r136.<android.content.Intent: android.content.Intent addFlags(int)>(1073741824);

        $r67 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r1, 1, r136, 0);

        r0.<com.android.server.backup.BackupManagerService: android.app.PendingIntent mRunBackupIntent> = $r67;

        $r68 = new android.content.Intent;

        specialinvoke $r68.<android.content.Intent: void <init>(java.lang.String)>("android.app.backup.intent.INIT");

        r137 = $r68;

        virtualinvoke r136.<android.content.Intent: android.content.Intent addFlags(int)>(1073741824);

        $r76 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>(r1, 5, r137, 0);

        r0.<com.android.server.backup.BackupManagerService: android.app.PendingIntent mRunInitIntent> = $r76;

        $r79 = new java.io.File;

        $r78 = r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r79.<java.io.File: void <init>(java.io.File,java.lang.String)>($r78, "pending");

        r0.<com.android.server.backup.BackupManagerService: java.io.File mJournalDir> = $r79;

        $r73 = r0.<com.android.server.backup.BackupManagerService: java.io.File mJournalDir>;

        virtualinvoke $r73.<java.io.File: boolean mkdirs()>();

        r0.<com.android.server.backup.BackupManagerService: java.io.File mJournal> = null;

        $r75 = new java.io.File;

        $r74 = r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r75.<java.io.File: void <init>(java.io.File,java.lang.String)>($r74, "fb-schedule");

        r0.<com.android.server.backup.BackupManagerService: java.io.File mFullBackupScheduleFile> = $r75;

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void initPackageTracking()>();

        $r83 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        r138 = $r83;

        entermonitor $r83;

     label40:
        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void addPackageParticipantsLocked(java.lang.String[])>(null);

        exitmonitor r138;

     label41:
        goto label44;

     label42:
        $r119 := @caughtexception;

        r10 = $r119;

        exitmonitor r138;

     label43:
        throw r10;

     label44:
        $r85 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r84 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r85, "backup_transport");

        r0.<com.android.server.backup.BackupManagerService: java.lang.String mCurrentTransport> = $r84;

        $r80 = "";

        $r81 = r0.<com.android.server.backup.BackupManagerService: java.lang.String mCurrentTransport>;

        $z5 = virtualinvoke $r80.<java.lang.String: boolean equals(java.lang.Object)>($r81);

        if $z5 == 0 goto label45;

        r0.<com.android.server.backup.BackupManagerService: java.lang.String mCurrentTransport> = null;

     label45:
        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        $r91 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting with transport ");

        $r89 = r0.<com.android.server.backup.BackupManagerService: java.lang.String mCurrentTransport>;

        $r90 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r89);

        $r88 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r88);

        $r87 = r0.<com.android.server.backup.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $r86 = r0.<com.android.server.backup.BackupManagerService: android.content.Intent mTransportServiceIntent>;

        r139 = virtualinvoke $r87.<android.content.pm.PackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)>($r86, 0, 0);

        $r97 = new java.lang.StringBuilder;

        specialinvoke $r97.<java.lang.StringBuilder: void <init>()>();

        $r96 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found transports: ");

        if r139 != null goto label46;

        $r94 = "null";

        goto label47;

     label46:
        $i3 = interfaceinvoke r139.<java.util.List: int size()>();

        $r94 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

     label47:
        $r92 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r94);

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r93);

        if r139 == null goto label49;

        i17 = 0;

     label48:
        $i4 = interfaceinvoke r139.<java.util.List: int size()>();

        if i17 >= $i4 goto label49;

        $r100 = interfaceinvoke r139.<java.util.List: java.lang.Object get(int)>(i17);

        $r99 = (android.content.pm.ResolveInfo) $r100;

        r140 = $r99.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean tryBindTransport(android.content.pm.ServiceInfo)>(r140);

        i17 = i17 + 1;

        goto label48;

     label49:
        specialinvoke r0.<com.android.server.backup.BackupManagerService: void parseLeftoverJournals()>();

        $r102 = r0.<com.android.server.backup.BackupManagerService: android.os.PowerManager mPowerManager>;

        $r101 = virtualinvoke $r102.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "*backup*");

        r0.<com.android.server.backup.BackupManagerService: android.os.PowerManager$WakeLock mWakelock> = $r101;

        return;

        catch java.io.IOException from label07 to label09 with label10;
        catch java.io.IOException from label06 to label07 with label11;
        catch java.io.IOException from label12 to label14 with label15;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.io.IOException from label17 to label19 with label20;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.io.IOException from label24 to label26 with label27;
        catch java.io.IOException from label23 to label24 with label28;
        catch java.io.IOException from label29 to label31 with label32;
        catch java.lang.Throwable from label23 to label24 with label33;
        catch java.lang.Throwable from label28 to label29 with label33;
        catch java.io.IOException from label34 to label36 with label37;
        catch java.lang.Throwable from label33 to label34 with label33;
        catch java.lang.Throwable from label40 to label41 with label42;
        catch java.lang.Throwable from label42 to label43 with label42;
    }

    private void initPackageTracking()
    {
        com.android.server.backup.BackupManagerService r0;
        java.io.RandomAccessFile r1, $r8, $r24, $r25, r54, r55;
        int i0, i1, i2;
        java.lang.String r2, $r44, r56;
        java.lang.Throwable r4, $r49;
        java.io.File $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r27, $r33, $r39, r53;
        boolean $z0, $z1, $z5;
        java.util.ArrayList $r15;
        android.content.BroadcastReceiver $r16, $r20;
        android.content.IntentFilter $r17, $r21, r65, r66;
        android.content.Context $r19, $r23;
        android.content.pm.PackageManager $r26;
        long $l3, $l4;
        java.util.HashSet $r28, $r29;
        android.content.pm.PackageManager$NameNotFoundException $r30;
        java.io.IOException $r31, $r35, $r42, $r43, $r46, $r47, $r48, $r50, r52, r61;
        java.util.Set $r32;
        java.io.EOFException $r34;
        java.lang.StringBuilder $r36, $r37, $r38, $r40, $r41;
        java.io.FileNotFoundException $r45;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r6 = new java.io.File;

        $r7 = r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "ancestral");

        r0.<com.android.server.backup.BackupManagerService: java.io.File mTokenFile> = $r6;

     label01:
        $r8 = new java.io.RandomAccessFile;

        $r9 = r0.<com.android.server.backup.BackupManagerService: java.io.File mTokenFile>;

        specialinvoke $r8.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r9, "r");

        r1 = $r8;

        i0 = virtualinvoke r1.<java.io.RandomAccessFile: int readInt()>();

        if i0 != 1 goto label03;

        $l3 = virtualinvoke r1.<java.io.RandomAccessFile: long readLong()>();

        r0.<com.android.server.backup.BackupManagerService: long mAncestralToken> = $l3;

        $l4 = virtualinvoke r1.<java.io.RandomAccessFile: long readLong()>();

        r0.<com.android.server.backup.BackupManagerService: long mCurrentToken> = $l4;

        i1 = virtualinvoke r1.<java.io.RandomAccessFile: int readInt()>();

        if i1 < 0 goto label03;

        $r29 = new java.util.HashSet;

        specialinvoke $r29.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.backup.BackupManagerService: java.util.Set mAncestralPackages> = $r29;

        i2 = 0;

     label02:
        if i2 >= i1 goto label03;

        r2 = virtualinvoke r1.<java.io.RandomAccessFile: java.lang.String readUTF()>();

        $r32 = r0.<com.android.server.backup.BackupManagerService: java.util.Set mAncestralPackages>;

        interfaceinvoke $r32.<java.util.Set: boolean add(java.lang.Object)>(r2);

        i2 = i2 + 1;

        goto label02;

     label03:
        virtualinvoke r1.<java.io.RandomAccessFile: void close()>();

     label04:
        goto label07;

     label05:
        $r45 := @caughtexception;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", "No ancestral data");

        goto label07;

     label06:
        $r42 := @caughtexception;

        r52 = $r42;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Unable to read token file", r52);

     label07:
        $r10 = new java.io.File;

        $r11 = r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, "processed");

        r0.<com.android.server.backup.BackupManagerService: java.io.File mEverStored> = $r10;

        $r13 = new java.io.File;

        $r12 = r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "processed.new");

        r53 = $r13;

        $z0 = virtualinvoke r53.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label08;

        virtualinvoke r53.<java.io.File: boolean delete()>();

     label08:
        $r14 = r0.<com.android.server.backup.BackupManagerService: java.io.File mEverStored>;

        $z1 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label37;

        r54 = null;

        r55 = null;

     label09:
        $r25 = new java.io.RandomAccessFile;

        specialinvoke $r25.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r53, "rws");

        r54 = $r25;

        $r24 = new java.io.RandomAccessFile;

        $r27 = r0.<com.android.server.backup.BackupManagerService: java.io.File mEverStored>;

        specialinvoke $r24.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r27, "r");

        r55 = $r24;

     label10:
        r56 = virtualinvoke r55.<java.io.RandomAccessFile: java.lang.String readUTF()>();

     label11:
        $r26 = r0.<com.android.server.backup.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        virtualinvoke $r26.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r56, 0);

        $r28 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mEverStoredApps>;

        virtualinvoke $r28.<java.util.HashSet: boolean add(java.lang.Object)>(r56);

        virtualinvoke r54.<java.io.RandomAccessFile: void writeUTF(java.lang.String)>(r56);

     label12:
        goto label14;

     label13:
        $r30 := @caughtexception;

     label14:
        goto label10;

     label15:
        $r34 := @caughtexception;

        $r33 = r0.<com.android.server.backup.BackupManagerService: java.io.File mEverStored>;

        $z5 = virtualinvoke r53.<java.io.File: boolean renameTo(java.io.File)>($r33);

        if $z5 != 0 goto label16;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error renaming ");

        $r41 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r53);

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r39 = r0.<com.android.server.backup.BackupManagerService: java.io.File mEverStored>;

        $r38 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r44 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r44);

     label16:
        if r54 == null goto label17;

        virtualinvoke r54.<java.io.RandomAccessFile: void close()>();

     label17:
        goto label19;

     label18:
        $r50 := @caughtexception;

     label19:
        if r55 == null goto label20;

        virtualinvoke r55.<java.io.RandomAccessFile: void close()>();

     label20:
        goto label37;

     label21:
        $r46 := @caughtexception;

        goto label37;

     label22:
        $r31 := @caughtexception;

        r61 = $r31;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Error in processed file", r61);

     label23:
        if r54 == null goto label24;

        virtualinvoke r54.<java.io.RandomAccessFile: void close()>();

     label24:
        goto label26;

     label25:
        $r35 := @caughtexception;

     label26:
        if r55 == null goto label27;

        virtualinvoke r55.<java.io.RandomAccessFile: void close()>();

     label27:
        goto label37;

     label28:
        $r47 := @caughtexception;

        goto label37;

     label29:
        $r49 := @caughtexception;

        r4 = $r49;

     label30:
        if r54 == null goto label31;

        virtualinvoke r54.<java.io.RandomAccessFile: void close()>();

     label31:
        goto label33;

     label32:
        $r43 := @caughtexception;

     label33:
        if r55 == null goto label34;

        virtualinvoke r55.<java.io.RandomAccessFile: void close()>();

     label34:
        goto label36;

     label35:
        $r48 := @caughtexception;

     label36:
        throw r4;

     label37:
        $r15 = specialinvoke r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList readFullBackupSchedule()>();

        r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue> = $r15;

        $r17 = new android.content.IntentFilter;

        specialinvoke $r17.<android.content.IntentFilter: void <init>()>();

        r65 = $r17;

        virtualinvoke r65.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        virtualinvoke r65.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke r65.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_CHANGED");

        virtualinvoke r65.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r19 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        $r16 = r0.<com.android.server.backup.BackupManagerService: android.content.BroadcastReceiver mBroadcastReceiver>;

        virtualinvoke $r19.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r16, r65);

        $r21 = new android.content.IntentFilter;

        specialinvoke $r21.<android.content.IntentFilter: void <init>()>();

        r66 = $r21;

        virtualinvoke r66.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE");

        virtualinvoke r66.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE");

        $r23 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        $r20 = r0.<com.android.server.backup.BackupManagerService: android.content.BroadcastReceiver mBroadcastReceiver>;

        virtualinvoke $r23.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r20, r66);

        return;

        catch java.io.FileNotFoundException from label01 to label04 with label05;
        catch java.io.IOException from label01 to label04 with label06;
        catch android.content.pm.PackageManager$NameNotFoundException from label11 to label12 with label13;
        catch java.io.EOFException from label09 to label15 with label15;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.io.IOException from label09 to label15 with label22;
        catch java.io.IOException from label23 to label24 with label25;
        catch java.io.IOException from label26 to label27 with label28;
        catch java.lang.Throwable from label09 to label16 with label29;
        catch java.lang.Throwable from label22 to label23 with label29;
        catch java.io.IOException from label30 to label31 with label32;
        catch java.io.IOException from label33 to label34 with label35;
        catch java.lang.Throwable from label29 to label30 with label29;
    }

    private java.util.ArrayList readFullBackupSchedule()
    {
        com.android.server.backup.BackupManagerService r0;
        java.util.ArrayList r1, $r12, $r20;
        java.lang.Object r2, $r9, $r13;
        java.io.FileInputStream r3, $r16;
        java.io.BufferedInputStream r4, $r17;
        java.io.DataInputStream r5, $r19;
        int i0, i1, i3, i4, i5;
        java.lang.String r6, $r14, $r23;
        long l2;
        java.lang.Throwable r7, r8, $r28, $r29;
        java.io.File $r10, $r18, $r26;
        boolean $z0, $z1;
        android.content.pm.PackageManager $r11;
        com.android.server.backup.BackupManagerService$FullBackupEntry $r15, $r22;
        java.lang.StringBuilder $r21, $r24, $r25;
        java.lang.Exception $r27, r30;
        java.util.List r31;
        android.content.pm.PackageInfo r32;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 = null;

        $r9 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mQueueLock>;

        r2 = $r9;

        entermonitor $r9;

     label01:
        $r10 = r0.<com.android.server.backup.BackupManagerService: java.io.File mFullBackupScheduleFile>;

        $z0 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label13;

        r3 = null;

        r4 = null;

        r5 = null;

     label02:
        $r16 = new java.io.FileInputStream;

        $r18 = r0.<com.android.server.backup.BackupManagerService: java.io.File mFullBackupScheduleFile>;

        specialinvoke $r16.<java.io.FileInputStream: void <init>(java.io.File)>($r18);

        r3 = $r16;

        $r17 = new java.io.BufferedInputStream;

        specialinvoke $r17.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r3);

        r4 = $r17;

        $r19 = new java.io.DataInputStream;

        specialinvoke $r19.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r4);

        r5 = $r19;

        i0 = virtualinvoke r5.<java.io.DataInputStream: int readInt()>();

        if i0 == 1 goto label05;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown backup schedule version ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r23);

     label03:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        exitmonitor r2;

     label04:
        return null;

     label05:
        i3 = virtualinvoke r5.<java.io.DataInputStream: int readInt()>();

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>(int)>(i3);

        r1 = $r20;

        i1 = 0;

     label06:
        if i1 >= i3 goto label07;

        r6 = virtualinvoke r5.<java.io.DataInputStream: java.lang.String readUTF()>();

        l2 = virtualinvoke r5.<java.io.DataInputStream: long readLong()>();

        $r22 = new com.android.server.backup.BackupManagerService$FullBackupEntry;

        specialinvoke $r22.<com.android.server.backup.BackupManagerService$FullBackupEntry: void <init>(com.android.server.backup.BackupManagerService,java.lang.String,long)>(r0, r6, l2);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r22);

        i1 = i1 + 1;

        goto label06;

     label07:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r1);

     label08:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        goto label13;

     label09:
        $r27 := @caughtexception;

        r30 = $r27;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Unable to read backup schedule", r30);

        $r26 = r0.<com.android.server.backup.BackupManagerService: java.io.File mFullBackupScheduleFile>;

        virtualinvoke $r26.<java.io.File: boolean delete()>();

        r1 = null;

     label10:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        goto label13;

     label11:
        $r28 := @caughtexception;

        r7 = $r28;

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        throw r7;

     label13:
        if r1 != null goto label17;

        $r11 = r0.<com.android.server.backup.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        r31 = staticinvoke <com.android.server.backup.PackageManagerBackupAgent: java.util.List getStorableApplications(android.content.pm.PackageManager)>($r11);

        i4 = interfaceinvoke r31.<java.util.List: int size()>();

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>(i4);

        r1 = $r12;

        i5 = 0;

     label14:
        if i5 >= i4 goto label16;

        $r13 = interfaceinvoke r31.<java.util.List: java.lang.Object get(int)>(i5);

        r32 = (android.content.pm.PackageInfo) $r13;

        $z1 = staticinvoke <com.android.server.backup.BackupManagerService: boolean appGetsFullBackup(android.content.pm.PackageInfo)>(r32);

        if $z1 == 0 goto label15;

        $r15 = new com.android.server.backup.BackupManagerService$FullBackupEntry;

        $r14 = r32.<android.content.pm.PackageInfo: java.lang.String packageName>;

        specialinvoke $r15.<com.android.server.backup.BackupManagerService$FullBackupEntry: void <init>(com.android.server.backup.BackupManagerService,java.lang.String,long)>(r0, $r14, 0L);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

     label15:
        i5 = i5 + 1;

        goto label14;

     label16:
        specialinvoke r0.<com.android.server.backup.BackupManagerService: void writeFullBackupScheduleAsync()>();

     label17:
        exitmonitor r2;

     label18:
        goto label21;

     label19:
        $r29 := @caughtexception;

        r8 = $r29;

        exitmonitor r2;

     label20:
        throw r8;

     label21:
        return r1;

        catch java.lang.Exception from label02 to label03 with label09;
        catch java.lang.Exception from label05 to label08 with label09;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label05 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label01 to label04 with label19;
        catch java.lang.Throwable from label05 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    private void writeFullBackupScheduleAsync()
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.Runnable $r1, $r3;
        com.android.server.backup.BackupManagerService$BackupHandler $r2, $r4;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r2 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        $r1 = r0.<com.android.server.backup.BackupManagerService: java.lang.Runnable mFullBackupScheduleWriter>;

        virtualinvoke $r2.<com.android.server.backup.BackupManagerService$BackupHandler: void removeCallbacks(java.lang.Runnable)>($r1);

        $r4 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        $r3 = r0.<com.android.server.backup.BackupManagerService: java.lang.Runnable mFullBackupScheduleWriter>;

        virtualinvoke $r4.<com.android.server.backup.BackupManagerService$BackupHandler: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    private void parseLeftoverJournals()
    {
        com.android.server.backup.BackupManagerService r0;
        java.io.File[] r1;
        int i0, i1, $i3;
        java.io.File r2, $r7, $r8, $r10;
        java.io.RandomAccessFile r3, $r9;
        java.lang.String r4, $r15;
        java.lang.Throwable r5, $r16;
        java.lang.Exception $r11, r23;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.io.IOException $r17, $r19, $r20;
        java.io.EOFException $r18;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r7 = r0.<com.android.server.backup.BackupManagerService: java.io.File mJournalDir>;

        r1 = virtualinvoke $r7.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r1;

        i1 = 0;

     label01:
        if i1 >= i0 goto label21;

        r2 = r1[i1];

        $r8 = r0.<com.android.server.backup.BackupManagerService: java.io.File mJournal>;

        if $r8 == null goto label02;

        $r10 = r0.<com.android.server.backup.BackupManagerService: java.io.File mJournal>;

        $i3 = virtualinvoke r2.<java.io.File: int compareTo(java.io.File)>($r10);

        if $i3 == 0 goto label20;

     label02:
        r3 = null;

     label03:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Found stale backup journal, scheduling");

        $r9 = new java.io.RandomAccessFile;

        specialinvoke $r9.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r2, "r");

        r3 = $r9;

     label04:
        r4 = virtualinvoke r3.<java.io.RandomAccessFile: java.lang.String readUTF()>();

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void dataChangedImpl(java.lang.String)>(r4);

        goto label04;

     label05:
        $r18 := @caughtexception;

     label06:
        if r3 == null goto label07;

        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

     label07:
        goto label09;

     label08:
        $r20 := @caughtexception;

     label09:
        virtualinvoke r2.<java.io.File: boolean delete()>();

        goto label20;

     label10:
        $r11 := @caughtexception;

        r23 = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t read ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r15, r23);

     label11:
        if r3 == null goto label12;

        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

     label12:
        goto label14;

     label13:
        $r17 := @caughtexception;

     label14:
        virtualinvoke r2.<java.io.File: boolean delete()>();

        goto label20;

     label15:
        $r16 := @caughtexception;

        r5 = $r16;

     label16:
        if r3 == null goto label17;

        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

     label17:
        goto label19;

     label18:
        $r19 := @caughtexception;

     label19:
        virtualinvoke r2.<java.io.File: boolean delete()>();

        throw r5;

     label20:
        i1 = i1 + 1;

        goto label01;

     label21:
        return;

        catch java.io.EOFException from label03 to label05 with label05;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Exception from label03 to label05 with label10;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label03 to label06 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private javax.crypto.SecretKey buildPasswordKey(java.lang.String, java.lang.String, byte[], int)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r2;
        byte[] r3;
        int i0;
        char[] $r4;
        javax.crypto.SecretKey $r5;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

        $r4 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        $r5 = specialinvoke r0.<com.android.server.backup.BackupManagerService: javax.crypto.SecretKey buildCharArrayKey(java.lang.String,char[],byte[],int)>(r1, $r4, r3, i0);

        return $r5;
    }

    private javax.crypto.SecretKey buildCharArrayKey(java.lang.String, char[], byte[], int)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        char[] r2;
        byte[] r3;
        int i0;
        javax.crypto.SecretKeyFactory r4;
        javax.crypto.spec.PBEKeySpec r5, $r6;
        javax.crypto.SecretKey $r7;
        java.security.spec.InvalidKeySpecException $r8;
        java.security.NoSuchAlgorithmException $r9;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: char[];

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

     label1:
        r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>(r1);

        $r6 = new javax.crypto.spec.PBEKeySpec;

        specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>(r2, r3, i0, 256);

        r5 = $r6;

        $r7 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r5);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Invalid key spec for PBKDF2!");

        goto label5;

     label4:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "PBKDF2 unavailable!");

     label5:
        return null;

        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label4;
    }

    private java.lang.String buildPasswordHash(java.lang.String, java.lang.String, byte[], int)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r2, $r6;
        byte[] r3, $r5;
        int i0;
        javax.crypto.SecretKey r4;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

        r4 = specialinvoke r0.<com.android.server.backup.BackupManagerService: javax.crypto.SecretKey buildPasswordKey(java.lang.String,java.lang.String,byte[],int)>(r1, r2, r3, i0);

        if r4 == null goto label1;

        $r5 = interfaceinvoke r4.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r6 = specialinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String byteArrayToHex(byte[])>($r5);

        return $r6;

     label1:
        return null;
    }

    private java.lang.String byteArrayToHex(byte[])
    {
        com.android.server.backup.BackupManagerService r0;
        byte[] r1;
        java.lang.StringBuilder r2, $r3;
        int i0, $i1, $i2, $i3;
        java.lang.String $r4, $r5;
        byte $b4;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: byte[];

        $r3 = new java.lang.StringBuilder;

        $i1 = lengthof r1;

        $i2 = $i1 * 2;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i2);

        r2 = $r3;

        i0 = 0;

     label1:
        $i3 = lengthof r1;

        if i0 >= $i3 goto label2;

        $b4 = r1[i0];

        $r5 = staticinvoke <java.lang.Byte: java.lang.String toHexString(byte,boolean)>($b4, 1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private byte[] hexToByteArray(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        byte[] r2;
        byte $b9;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        i0 = $i2 / 2;

        $i3 = 2 * i0;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i3 == $i4 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Hex string must have an even number of digits");

        throw $r4;

     label1:
        r2 = newarray (byte)[i0];

        i1 = 0;

     label2:
        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        if i1 >= $i5 goto label3;

        $i7 = i1 / 2;

        $i6 = i1 + 2;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i1, $i6);

        $i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r3, 16);

        $b9 = (byte) $i8;

        r2[$i7] = $b9;

        i1 = i1 + 2;

        goto label2;

     label3:
        return r2;
    }

    private byte[] makeKeyChecksum(java.lang.String, byte[], byte[], int)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        byte[] r2, r3, $r5;
        int i0, i1, $i2, $i3;
        char[] r4;
        byte $b4;
        char $c5;
        javax.crypto.SecretKey r6;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

        $i2 = lengthof r2;

        r4 = newarray (char)[$i2];

        i1 = 0;

     label1:
        $i3 = lengthof r2;

        if i1 >= $i3 goto label2;

        $b4 = r2[i1];

        $c5 = (char) $b4;

        r4[i1] = $c5;

        i1 = i1 + 1;

        goto label1;

     label2:
        r6 = specialinvoke r0.<com.android.server.backup.BackupManagerService: javax.crypto.SecretKey buildCharArrayKey(java.lang.String,char[],byte[],int)>(r1, r4, r3, i0);

        $r5 = interfaceinvoke r6.<java.security.Key: byte[] getEncoded()>();

        return $r5;
    }

    private byte[] randomBytes(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0, $i1;
        byte[] r1;
        java.security.SecureRandom $r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $i1 = i0 / 8;

        r1 = newarray (byte)[$i1];

        $r2 = r0.<com.android.server.backup.BackupManagerService: java.security.SecureRandom mRng>;

        virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>(r1);

        return r1;
    }

    boolean passwordMatchesSaved(java.lang.String, java.lang.String, int)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r2, r3, $r4, $r6, $r7;
        int i0, $i1;
        byte[] $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r4 = r0.<com.android.server.backup.BackupManagerService: java.lang.String mPasswordHash>;

        if $r4 != null goto label2;

        if r2 == null goto label1;

        $r7 = "";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label3;

     label1:
        return 1;

     label2:
        if r2 == null goto label3;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 <= 0 goto label3;

        $r5 = r0.<com.android.server.backup.BackupManagerService: byte[] mPasswordSalt>;

        r3 = specialinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String buildPasswordHash(java.lang.String,java.lang.String,byte[],int)>(r1, r2, $r5, i0);

        $r6 = r0.<com.android.server.backup.BackupManagerService: java.lang.String mPasswordHash>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public boolean setBackupPassword(java.lang.String, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r2, r29;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.io.FileOutputStream r3, $r12, $r17, r30;
        java.io.DataOutputStream r4, $r13, $r18, r32;
        java.lang.Throwable r7, r9, $r24, $r25;
        android.content.Context $r10;
        int $i0, $i1, $i3;
        java.io.File $r11, $r14, $r15, $r16;
        java.io.BufferedOutputStream $r19, r31;
        java.io.IOException $r20, $r21, $r22, $r23, $r26;
        byte[] r28;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r10 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r10.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "setBackupPassword");

        $i0 = r0.<com.android.server.backup.BackupManagerService: int mPasswordVersion>;

        if $i0 >= 2 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        z0 = $z7;

        $z3 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean passwordMatchesSaved(java.lang.String,java.lang.String,int)>("PBKDF2WithHmacSHA1", r1, 10000);

        if $z3 != 0 goto label04;

        if z0 == 0 goto label03;

        $z8 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean passwordMatchesSaved(java.lang.String,java.lang.String,int)>("PBKDF2WithHmacSHA1And8bit", r1, 10000);

        if $z8 != 0 goto label04;

     label03:
        return 0;

     label04:
        r0.<com.android.server.backup.BackupManagerService: int mPasswordVersion> = 2;

        r3 = null;

        r4 = null;

     label05:
        $r12 = new java.io.FileOutputStream;

        $r11 = r0.<com.android.server.backup.BackupManagerService: java.io.File mPasswordVersionFile>;

        specialinvoke $r12.<java.io.FileOutputStream: void <init>(java.io.File)>($r11);

        r3 = $r12;

        $r13 = new java.io.DataOutputStream;

        specialinvoke $r13.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r3);

        r4 = $r13;

        $i1 = r0.<com.android.server.backup.BackupManagerService: int mPasswordVersion>;

        virtualinvoke r4.<java.io.DataOutputStream: void writeInt(int)>($i1);

     label06:
        if r4 == null goto label07;

        virtualinvoke r4.<java.io.DataOutputStream: void close()>();

     label07:
        if r3 == null goto label08;

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label08:
        goto label22;

     label09:
        $r26 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to close pw version record");

        goto label22;

     label10:
        $r22 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to write backup pw version; password not changed");

        z1 = 0;

     label11:
        if r4 == null goto label12;

        virtualinvoke r4.<java.io.DataOutputStream: void close()>();

     label12:
        if r3 == null goto label13;

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label13:
        goto label15;

     label14:
        $r21 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to close pw version record");

     label15:
        return z1;

     label16:
        $r25 := @caughtexception;

        r7 = $r25;

     label17:
        if r4 == null goto label18;

        virtualinvoke r4.<java.io.DataOutputStream: void close()>();

     label18:
        if r3 == null goto label19;

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label19:
        goto label21;

     label20:
        $r20 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to close pw version record");

     label21:
        throw r7;

     label22:
        if r2 == null goto label23;

        $z6 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z6 == 0 goto label25;

     label23:
        $r14 = r0.<com.android.server.backup.BackupManagerService: java.io.File mPasswordHashFile>;

        $z4 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label24;

        $r15 = r0.<com.android.server.backup.BackupManagerService: java.io.File mPasswordHashFile>;

        $z5 = virtualinvoke $r15.<java.io.File: boolean delete()>();

        if $z5 != 0 goto label24;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to clear backup password");

        return 0;

     label24:
        r0.<com.android.server.backup.BackupManagerService: java.lang.String mPasswordHash> = null;

        r0.<com.android.server.backup.BackupManagerService: byte[] mPasswordSalt> = null;

        return 1;

     label25:
        r28 = specialinvoke r0.<com.android.server.backup.BackupManagerService: byte[] randomBytes(int)>(512);

        r29 = specialinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String buildPasswordHash(java.lang.String,java.lang.String,byte[],int)>("PBKDF2WithHmacSHA1", r2, r28, 10000);

        r30 = null;

        r31 = null;

        r32 = null;

     label26:
        $r17 = new java.io.FileOutputStream;

        $r16 = r0.<com.android.server.backup.BackupManagerService: java.io.File mPasswordHashFile>;

        specialinvoke $r17.<java.io.FileOutputStream: void <init>(java.io.File)>($r16);

        r30 = $r17;

        $r19 = new java.io.BufferedOutputStream;

        specialinvoke $r19.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r30);

        r31 = $r19;

        $r18 = new java.io.DataOutputStream;

        specialinvoke $r18.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r31);

        r32 = $r18;

        $i3 = lengthof r28;

        virtualinvoke r32.<java.io.DataOutputStream: void writeInt(int)>($i3);

        virtualinvoke r32.<java.io.DataOutputStream: void write(byte[])>(r28);

        virtualinvoke r32.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r29);

        virtualinvoke r32.<java.io.DataOutputStream: void flush()>();

        r0.<com.android.server.backup.BackupManagerService: java.lang.String mPasswordHash> = r29;

        r0.<com.android.server.backup.BackupManagerService: byte[] mPasswordSalt> = r28;

        z2 = 1;

     label27:
        if r32 == null goto label28;

        virtualinvoke r32.<java.io.DataOutputStream: void close()>();

     label28:
        if r31 == null goto label29;

        virtualinvoke r31.<java.io.OutputStream: void close()>();

     label29:
        if r30 == null goto label30;

        virtualinvoke r30.<java.io.OutputStream: void close()>();

     label30:
        return z2;

     label31:
        $r24 := @caughtexception;

        r9 = $r24;

     label32:
        if r32 == null goto label33;

        virtualinvoke r32.<java.io.DataOutputStream: void close()>();

     label33:
        if r31 == null goto label34;

        virtualinvoke r31.<java.io.OutputStream: void close()>();

     label34:
        if r30 == null goto label35;

        virtualinvoke r30.<java.io.OutputStream: void close()>();

     label35:
        throw r9;

     label36:
        $r23 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to set backup password");

        return 0;

        catch java.io.IOException from label06 to label08 with label09;
        catch java.io.IOException from label05 to label06 with label10;
        catch java.io.IOException from label11 to label13 with label14;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.io.IOException from label17 to label19 with label20;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Throwable from label26 to label27 with label31;
        catch java.lang.Throwable from label31 to label32 with label31;
        catch java.io.IOException from label25 to label30 with label36;
        catch java.io.IOException from label31 to label36 with label36;
    }

    public boolean hasBackupPassword()
    {
        com.android.server.backup.BackupManagerService r0;
        android.content.Context $r1;
        java.lang.String $r2, $r3;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r1 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "hasBackupPassword");

        $r2 = r0.<com.android.server.backup.BackupManagerService: java.lang.String mPasswordHash>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.backup.BackupManagerService: java.lang.String mPasswordHash>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean backupPasswordMatches(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        boolean z0, $z1, $z2, $z3, $z4;
        int $i0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $z1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean hasBackupPassword()>();

        if $z1 == 0 goto label4;

        $i0 = r0.<com.android.server.backup.BackupManagerService: int mPasswordVersion>;

        if $i0 >= 2 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        $z2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean passwordMatchesSaved(java.lang.String,java.lang.String,int)>("PBKDF2WithHmacSHA1", r1, 10000);

        if $z2 != 0 goto label4;

        if z0 == 0 goto label3;

        $z3 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean passwordMatchesSaved(java.lang.String,java.lang.String,int)>("PBKDF2WithHmacSHA1And8bit", r1, 10000);

        if $z3 != 0 goto label4;

     label3:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Backup password mismatch; aborting");

        return 0;

     label4:
        return 1;
    }

    void recordInitPendingLocked(boolean, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        boolean z0;
        java.lang.String r1, r3, $r12;
        com.android.internal.backup.IBackupTransport r2;
        java.io.File r4, r5, $r18, $r19, $r20;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        com.android.server.backup.BackupManagerService$BackupHandler $r13, $r15, $r16;
        java.util.HashSet $r14, $r21, $r24;
        android.os.Message $r17;
        byte $b1;
        java.io.FileOutputStream $r22;
        java.io.IOException $r23;
        android.os.RemoteException $r25;

        r0 := @this: com.android.server.backup.BackupManagerService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recordInitPendingLocked: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on transport ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r12);

        $r13 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r13.<com.android.server.backup.BackupManagerService$BackupHandler: void removeMessages(int)>(11);

     label01:
        r2 = specialinvoke r0.<com.android.server.backup.BackupManagerService: com.android.internal.backup.IBackupTransport getTransport(java.lang.String)>(r1);

        if r2 == null goto label07;

        r3 = interfaceinvoke r2.<com.android.internal.backup.IBackupTransport: java.lang.String transportDirName()>();

        $r19 = new java.io.File;

        $r18 = r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r19.<java.io.File: void <init>(java.io.File,java.lang.String)>($r18, r3);

        r4 = $r19;

        $r20 = new java.io.File;

        specialinvoke $r20.<java.io.File: void <init>(java.io.File,java.lang.String)>(r4, "_need_init_");

        r5 = $r20;

        if z0 == 0 goto label05;

        $r24 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mPendingInits>;

        virtualinvoke $r24.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

     label02:
        $r22 = new java.io.FileOutputStream;

        specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.io.File)>(r5);

        virtualinvoke $r22.<java.io.FileOutputStream: void close()>();

     label03:
        goto label06;

     label04:
        $r23 := @caughtexception;

        goto label06;

     label05:
        virtualinvoke r5.<java.io.File: boolean delete()>();

        $r21 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mPendingInits>;

        virtualinvoke $r21.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

     label06:
        return;

     label07:
        goto label09;

     label08:
        $r25 := @caughtexception;

     label09:
        if z0 == 0 goto label12;

        $r14 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mPendingInits>;

        virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        $r15 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        $r16 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        if z0 == 0 goto label10;

        $b1 = 1;

        goto label11;

     label10:
        $b1 = 0;

     label11:
        $r17 = virtualinvoke $r16.<com.android.server.backup.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(11, $b1, 0, r1);

        virtualinvoke $r15.<com.android.server.backup.BackupManagerService$BackupHandler: boolean sendMessageDelayed(android.os.Message,long)>($r17, 3600000L);

     label12:
        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch android.os.RemoteException from label01 to label06 with label08;
    }

    void resetBackupState(java.io.File)
    {
        com.android.server.backup.BackupManagerService r0;
        java.io.File r1, r4, $r9;
        java.lang.Object r2, $r7, $r13, $r14;
        java.io.File[] r3;
        int i0, i1, i2, i3;
        java.lang.Throwable r5, r6, $r16, $r17;
        java.util.HashSet $r8, r19;
        android.util.SparseArray $r10, $r11, $r12, r18;
        boolean $z1, $z2;
        java.lang.String $r15, r21;
        java.util.Iterator r20;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.io.File;

        $r7 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mQueueLock>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mEverStoredApps>;

        virtualinvoke $r8.<java.util.HashSet: void clear()>();

        $r9 = r0.<com.android.server.backup.BackupManagerService: java.io.File mEverStored>;

        virtualinvoke $r9.<java.io.File: boolean delete()>();

        r0.<com.android.server.backup.BackupManagerService: long mCurrentToken> = 0L;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void writeRestoreTokens()>();

        r3 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r3;

        i1 = 0;

     label02:
        if i1 >= i0 goto label04;

        r4 = r3[i1];

        $r15 = virtualinvoke r4.<java.io.File: java.lang.String getName()>();

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("_need_init_");

        if $z2 != 0 goto label03;

        virtualinvoke r4.<java.io.File: boolean delete()>();

     label03:
        i1 = i1 + 1;

        goto label02;

     label04:
        exitmonitor r2;

     label05:
        goto label08;

     label06:
        $r16 := @caughtexception;

        r5 = $r16;

        exitmonitor r2;

     label07:
        throw r5;

     label08:
        $r10 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        r18 = $r10;

        entermonitor $r10;

     label09:
        $r11 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        i2 = virtualinvoke $r11.<android.util.SparseArray: int size()>();

        i3 = 0;

     label10:
        if i3 >= i2 goto label13;

        $r12 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r13 = virtualinvoke $r12.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r19 = (java.util.HashSet) $r13;

        if r19 == null goto label12;

        r20 = virtualinvoke r19.<java.util.HashSet: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r14 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.String) $r14;

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void dataChangedImpl(java.lang.String)>(r21);

        goto label11;

     label12:
        i3 = i3 + 1;

        goto label10;

     label13:
        exitmonitor r18;

     label14:
        goto label17;

     label15:
        $r17 := @caughtexception;

        r6 = $r17;

        exitmonitor r18;

     label16:
        throw r6;

     label17:
        return;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label09 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private void registerTransport(java.lang.String, java.lang.String, com.android.internal.backup.IBackupTransport)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r2, $r17, $r37, r46;
        com.android.internal.backup.IBackupTransport r3;
        android.util.ArrayMap r4, $r9, $r18, $r19, $r23, $r24, $r25, $r41, $r43;
        java.lang.Throwable r5, r8, $r44, $r45;
        java.io.File r6, $r27, $r29, $r30, r47;
        java.lang.Object r7, $r21, $r32;
        long l0, $l2, $l3;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r35, $r38, $r39;
        boolean $z0;
        android.app.AlarmManager $r31;
        java.util.HashSet $r33;
        android.app.PendingIntent $r34;
        android.os.RemoteException $r36;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.internal.backup.IBackupTransport;

        $r9 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        r4 = $r9;

        entermonitor $r9;

     label01:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Registering transport ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r17);

        if r3 == null goto label02;

        $r24 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        virtualinvoke $r24.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        $r25 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransportNames>;

        virtualinvoke $r25.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        goto label04;

     label02:
        $r18 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        $r19 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransportNames>;

        $r21 = virtualinvoke $r19.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r2);

        virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r21);

        $r23 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransportNames>;

        virtualinvoke $r23.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r2);

        exitmonitor r4;

     label03:
        return;

     label04:
        exitmonitor r4;

     label05:
        goto label08;

     label06:
        $r45 := @caughtexception;

        r5 = $r45;

        exitmonitor r4;

     label07:
        throw r5;

     label08:
        r46 = interfaceinvoke r3.<com.android.internal.backup.IBackupTransport: java.lang.String transportDirName()>();

        $r27 = new java.io.File;

        $r30 = r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r27.<java.io.File: void <init>(java.io.File,java.lang.String)>($r30, r46);

        r47 = $r27;

        virtualinvoke r47.<java.io.File: boolean mkdirs()>();

        $r29 = new java.io.File;

        specialinvoke $r29.<java.io.File: void <init>(java.io.File,java.lang.String)>(r47, "_need_init_");

        r6 = $r29;

        $z0 = virtualinvoke r6.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label13;

        $r32 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mQueueLock>;

        r7 = $r32;

        entermonitor $r32;

     label09:
        $r33 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mPendingInits>;

        virtualinvoke $r33.<java.util.HashSet: boolean add(java.lang.Object)>(r46);

        l0 = 60000L;

        $r31 = r0.<com.android.server.backup.BackupManagerService: android.app.AlarmManager mAlarmManager>;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l3 + l0;

        $r34 = r0.<com.android.server.backup.BackupManagerService: android.app.PendingIntent mRunInitIntent>;

        virtualinvoke $r31.<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>(0, $l2, $r34);

        exitmonitor r7;

     label10:
        goto label13;

     label11:
        $r44 := @caughtexception;

        r8 = $r44;

        exitmonitor r7;

     label12:
        throw r8;

     label13:
        goto label15;

     label14:
        $r36 := @caughtexception;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to register transport as ");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r37);

        $r43 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransportNames>;

        virtualinvoke $r43.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r2);

        $r41 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        virtualinvoke $r41.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

     label15:
        return;

        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch android.os.RemoteException from label08 to label13 with label14;
    }

    void checkForTransportAndBind(android.content.pm.PackageInfo)
    {
        com.android.server.backup.BackupManagerService r0;
        android.content.pm.PackageInfo r1;
        android.content.Intent r2, $r5, $r6;
        java.util.List r3;
        int i0, i1;
        android.content.pm.ServiceInfo r4;
        java.lang.String $r7;
        android.content.pm.PackageManager $r8;
        java.lang.Object $r9;
        android.content.pm.ResolveInfo $r10;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: android.content.pm.PackageInfo;

        $r5 = new android.content.Intent;

        $r6 = r0.<com.android.server.backup.BackupManagerService: android.content.Intent mTransportServiceIntent>;

        specialinvoke $r5.<android.content.Intent: void <init>(android.content.Intent)>($r6);

        $r7 = r1.<android.content.pm.PackageInfo: java.lang.String packageName>;

        r2 = virtualinvoke $r5.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r7);

        $r8 = r0.<com.android.server.backup.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        r3 = virtualinvoke $r8.<android.content.pm.PackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)>(r2, 0, 0);

        i0 = interfaceinvoke r3.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r9 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r10 = (android.content.pm.ResolveInfo) $r9;

        r4 = $r10.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean tryBindTransport(android.content.pm.ServiceInfo)>(r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    boolean tryBindTransport(android.content.pm.ServiceInfo)
    {
        com.android.server.backup.BackupManagerService r0;
        android.content.pm.ServiceInfo r1;
        android.content.pm.PackageInfo r2;
        java.lang.String $r3, $r8, $r11, $r16, $r17;
        android.content.pm.PackageManager $r4;
        android.content.pm.ApplicationInfo $r5;
        int $i0, $i1;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12, $r14, $r15;
        boolean $z0;
        android.content.pm.PackageManager$NameNotFoundException $r13;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: android.content.pm.ServiceInfo;

     label1:
        $r4 = r0.<com.android.server.backup.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $r3 = r1.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        r2 = virtualinvoke $r4.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r3, 0);

        $r5 = r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r5.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & 1073741824;

        if $i1 == 0 goto label3;

        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean bindTransport(android.content.pm.ServiceInfo)>(r1);

     label2:
        return $z0;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport package ");

        $r8 = r1.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not privileged");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem resolving transport package ");

        $r16 = r1.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r17);

     label6:
        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label5;
        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label5;
    }

    boolean bindTransport(android.content.pm.ServiceInfo)
    {
        com.android.server.backup.BackupManagerService r0;
        android.content.pm.ServiceInfo r1;
        android.content.ComponentName r2, $r7;
        android.content.Intent r3, $r14, $r15;
        com.android.server.backup.BackupManagerService$TransportConnection r4, $r25;
        android.util.ArrayMap r5, $r16, $r18, $r27;
        java.lang.Throwable r6, $r28;
        java.lang.String $r8, $r9, $r13, $r19, $r24;
        java.lang.StringBuilder $r10, $r11, $r12;
        android.content.Context $r20, $r23;
        java.lang.Object $r21;
        android.os.UserHandle $r22;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: android.content.pm.ServiceInfo;

        $r7 = new android.content.ComponentName;

        $r9 = r1.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r8 = r1.<android.content.pm.ServiceInfo: java.lang.String name>;

        specialinvoke $r7.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r9, $r8);

        r2 = $r7;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Binding to transport host ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r13);

        $r15 = new android.content.Intent;

        $r14 = r0.<com.android.server.backup.BackupManagerService: android.content.Intent mTransportServiceIntent>;

        specialinvoke $r15.<android.content.Intent: void <init>(android.content.Intent)>($r14);

        r3 = $r15;

        virtualinvoke r3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r2);

        $r16 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        r5 = $r16;

        entermonitor $r16;

     label1:
        $r18 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransportConnections>;

        $r19 = r1.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r21 = virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r19);

        r4 = (com.android.server.backup.BackupManagerService$TransportConnection) $r21;

        if null != r4 goto label2;

        $r25 = new com.android.server.backup.BackupManagerService$TransportConnection;

        specialinvoke $r25.<com.android.server.backup.BackupManagerService$TransportConnection: void <init>(com.android.server.backup.BackupManagerService,android.content.pm.ServiceInfo)>(r0, r1);

        r4 = $r25;

        $r27 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransportConnections>;

        $r24 = r1.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        virtualinvoke $r27.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r4);

        goto label3;

     label2:
        $r20 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r20.<android.content.Context: void unbindService(android.content.ServiceConnection)>(r4);

     label3:
        exitmonitor r5;

     label4:
        goto label7;

     label5:
        $r28 := @caughtexception;

        r6 = $r28;

        exitmonitor r5;

     label6:
        throw r6;

     label7:
        $r23 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        $r22 = <android.os.UserHandle: android.os.UserHandle OWNER>;

        $z0 = virtualinvoke $r23.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(r3, r4, 1, $r22);

        return $z0;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void addPackageParticipantsLocked(java.lang.String[])
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String[] r1, r3;
        java.util.List r2;
        int i0, i1;
        java.lang.String r4;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String[];

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.util.List allAgentPackages()>();

        if r1 == null goto label3;

        r3 = r1;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void addPackageParticipantsLockedInner(java.lang.String,java.util.List)>(r4, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        specialinvoke r0.<com.android.server.backup.BackupManagerService: void addPackageParticipantsLockedInner(java.lang.String,java.util.List)>(null, r2);

     label4:
        return;
    }

    private void addPackageParticipantsLockedInner(java.lang.String, java.util.List)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, $r10, $r11, $r14;
        java.util.List r2;
        java.util.Iterator r3;
        android.content.pm.PackageInfo r4;
        int i0;
        java.util.HashSet r5, $r13;
        boolean $z0, $z2;
        java.lang.Object $r6, $r9;
        android.content.pm.ApplicationInfo $r7;
        android.util.SparseArray $r8, $r12;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.PackageInfo) $r6;

        if r1 == null goto label2;

        $r14 = r4.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label4;

     label2:
        $r7 = r4.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i0 = $r7.<android.content.pm.ApplicationInfo: int uid>;

        $r8 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (java.util.HashSet) $r9;

        if r5 != null goto label3;

        $r13 = new java.util.HashSet;

        specialinvoke $r13.<java.util.HashSet: void <init>()>();

        r5 = $r13;

        $r12 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        virtualinvoke $r12.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r5);

     label3:
        $r10 = r4.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke r5.<java.util.HashSet: boolean add(java.lang.Object)>($r10);

        $r11 = r4.<android.content.pm.PackageInfo: java.lang.String packageName>;

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void dataChangedImpl(java.lang.String)>($r11);

     label4:
        goto label1;

     label5:
        return;
    }

    void removePackageParticipantsLocked(java.lang.String[], int)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String[] r1, r2;
        int i0, i1, i2;
        java.lang.String r3;
        java.util.HashSet r4;
        android.util.SparseArray $r5, $r7;
        java.lang.Object $r6;
        boolean $z0, $z1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        if r1 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "removePackageParticipants with null list");

        return;

     label1:
        r2 = r1;

        i1 = lengthof r2;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        r3 = r2[i2];

        $r5 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (java.util.HashSet) $r6;

        if r4 == null goto label3;

        $z0 = virtualinvoke r4.<java.util.HashSet: boolean contains(java.lang.Object)>(r3);

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void removePackageFromSetLocked(java.util.HashSet,java.lang.String)>(r4, r3);

        $z1 = virtualinvoke r4.<java.util.HashSet: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        $r7 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        virtualinvoke $r7.<android.util.SparseArray: void remove(int)>(i0);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return;
    }

    private void removePackageFromSetLocked(java.util.HashSet, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.util.HashSet r1;
        java.lang.String r2;
        boolean $z0;
        java.util.HashMap $r3;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.util.HashSet;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r1.<java.util.HashSet: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<java.util.HashSet: boolean remove(java.lang.Object)>(r2);

        $r3 = r0.<com.android.server.backup.BackupManagerService: java.util.HashMap mPendingBackups>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    java.util.List allAgentPackages()
    {
        com.android.server.backup.BackupManagerService r0;
        byte b0;
        java.util.List r1;
        int i1, i2, $i3, $i4;
        android.content.pm.PackageInfo r2;
        android.content.pm.ApplicationInfo r3, $r10, r14;
        android.content.pm.PackageManager $r4, $r9;
        java.lang.Object $r5;
        java.lang.String $r7, $r8;
        java.lang.String[] $r11;
        android.content.pm.PackageManager$NameNotFoundException $r13;

        r0 := @this: com.android.server.backup.BackupManagerService;

        b0 = 64;

        $r4 = r0.<com.android.server.backup.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        r1 = virtualinvoke $r4.<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>(b0);

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

        i2 = i1 - 1;

     label1:
        if i2 < 0 goto label8;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r2 = (android.content.pm.PackageInfo) $r5;

     label2:
        r3 = r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = r3.<android.content.pm.ApplicationInfo: int flags>;

        $i4 = $i3 & 32768;

        if $i4 == 0 goto label3;

        $r7 = r3.<android.content.pm.ApplicationInfo: java.lang.String backupAgentName>;

        if $r7 != null goto label4;

     label3:
        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i2);

        goto label5;

     label4:
        $r9 = r0.<com.android.server.backup.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        $r8 = r2.<android.content.pm.PackageInfo: java.lang.String packageName>;

        r14 = virtualinvoke $r9.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>($r8, 1024);

        $r10 = r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r11 = r14.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        $r10.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles> = $r11;

     label5:
        goto label7;

     label6:
        $r13 := @caughtexception;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i2);

     label7:
        i2 = i2 + -1;

        goto label1;

     label8:
        return r1;

        catch android.content.pm.PackageManager$NameNotFoundException from label2 to label5 with label6;
    }

    void logBackupComplete(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, $r23;
        java.util.HashSet r2, $r8, $r9;
        java.io.RandomAccessFile r3, $r10;
        java.lang.Throwable r5, r7, $r12, $r14;
        boolean $z0, $z1;
        java.io.File $r11, $r21;
        long $l0;
        java.io.IOException $r13, $r15, $r16, $r17;
        java.lang.StringBuilder $r18, $r19, $r20, $r22, $r24;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("@pm@");

        if $z0 == 0 goto label01;

        return;

     label01:
        $r8 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mEverStoredApps>;

        r2 = $r8;

        entermonitor $r8;

     label02:
        $r9 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mEverStoredApps>;

        $z1 = virtualinvoke $r9.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        if $z1 != 0 goto label04;

        exitmonitor r2;

     label03:
        return;

     label04:
        r3 = null;

     label05:
        $r10 = new java.io.RandomAccessFile;

        $r11 = r0.<com.android.server.backup.BackupManagerService: java.io.File mEverStored>;

        specialinvoke $r10.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r11, "rws");

        r3 = $r10;

        $l0 = virtualinvoke r3.<java.io.RandomAccessFile: long length()>();

        virtualinvoke r3.<java.io.RandomAccessFile: void seek(long)>($l0);

        virtualinvoke r3.<java.io.RandomAccessFile: void writeUTF(java.lang.String)>(r1);

     label06:
        if r3 == null goto label07;

        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

     label07:
        goto label18;

     label08:
        $r13 := @caughtexception;

        goto label18;

     label09:
        $r16 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t log backup of ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r21 = r0.<com.android.server.backup.BackupManagerService: java.io.File mEverStored>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r23);

     label10:
        if r3 == null goto label11;

        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

     label11:
        goto label18;

     label12:
        $r15 := @caughtexception;

        goto label18;

     label13:
        $r14 := @caughtexception;

        r5 = $r14;

     label14:
        if r3 == null goto label15;

        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

     label15:
        goto label17;

     label16:
        $r17 := @caughtexception;

     label17:
        throw r5;

     label18:
        exitmonitor r2;

     label19:
        goto label22;

     label20:
        $r12 := @caughtexception;

        r7 = $r12;

        exitmonitor r2;

     label21:
        throw r7;

     label22:
        return;

        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label05 to label06 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label02 to label03 with label20;
        catch java.lang.Throwable from label04 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    void removeEverBackedUp(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r6, $r13, $r26, $r38;
        java.util.HashSet r2, $r15, $r18, $r19, $r36;
        java.io.File r3, $r14, $r17, $r20, $r28, $r34, $r40;
        java.io.RandomAccessFile r4, $r16;
        java.util.Iterator r5;
        java.lang.Throwable r7, r9, $r29, $r39;
        java.lang.StringBuilder $r10, $r11, $r12, $r21, $r23, $r24, $r25, $r27, $r33, $r35, $r37;
        boolean $z1, $z2;
        java.io.IOException $r22, $r30, $r32, $r41, $r42, r44;
        java.lang.Object $r31;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing backed-up knowledge of ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r13);

        $r15 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mEverStoredApps>;

        r2 = $r15;

        entermonitor $r15;

     label01:
        $r14 = new java.io.File;

        $r17 = r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir>;

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, "processed.new");

        r3 = $r14;

        r4 = null;

     label02:
        $r16 = new java.io.RandomAccessFile;

        specialinvoke $r16.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r3, "rws");

        r4 = $r16;

        $r18 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mEverStoredApps>;

        virtualinvoke $r18.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

        $r19 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mEverStoredApps>;

        r5 = virtualinvoke $r19.<java.util.HashSet: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r31 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r31;

        virtualinvoke r4.<java.io.RandomAccessFile: void writeUTF(java.lang.String)>(r6);

        goto label03;

     label04:
        virtualinvoke r4.<java.io.RandomAccessFile: void close()>();

        r4 = null;

        $r20 = r0.<com.android.server.backup.BackupManagerService: java.io.File mEverStored>;

        $z2 = virtualinvoke r3.<java.io.File: boolean renameTo(java.io.File)>($r20);

        if $z2 != 0 goto label05;

        $r22 = new java.io.IOException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t rename ");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r28 = r0.<com.android.server.backup.BackupManagerService: java.io.File mEverStored>;

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r26);

        throw $r22;

     label05:
        if r4 == null goto label06;

        virtualinvoke r4.<java.io.RandomAccessFile: void close()>();

     label06:
        goto label17;

     label07:
        $r41 := @caughtexception;

        goto label17;

     label08:
        $r30 := @caughtexception;

        r44 = $r30;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error rewriting ");

        $r34 = r0.<com.android.server.backup.BackupManagerService: java.io.File mEverStored>;

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r38, r44);

        $r36 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mEverStoredApps>;

        virtualinvoke $r36.<java.util.HashSet: void clear()>();

        virtualinvoke r3.<java.io.File: boolean delete()>();

        $r40 = r0.<com.android.server.backup.BackupManagerService: java.io.File mEverStored>;

        virtualinvoke $r40.<java.io.File: boolean delete()>();

     label09:
        if r4 == null goto label10;

        virtualinvoke r4.<java.io.RandomAccessFile: void close()>();

     label10:
        goto label17;

     label11:
        $r32 := @caughtexception;

        goto label17;

     label12:
        $r29 := @caughtexception;

        r7 = $r29;

     label13:
        if r4 == null goto label14;

        virtualinvoke r4.<java.io.RandomAccessFile: void close()>();

     label14:
        goto label16;

     label15:
        $r42 := @caughtexception;

     label16:
        throw r7;

     label17:
        exitmonitor r2;

     label18:
        goto label21;

     label19:
        $r39 := @caughtexception;

        r9 = $r39;

        exitmonitor r2;

     label20:
        throw r9;

     label21:
        return;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label02 to label05 with label08;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Throwable from label02 to label05 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label01 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    void writeRestoreTokens()
    {
        com.android.server.backup.BackupManagerService r0;
        java.io.RandomAccessFile r1, $r4;
        java.util.Iterator r2;
        java.lang.String r3, $r11;
        java.io.File $r5;
        long $l0, $l1;
        java.util.Set $r6, $r7, $r10, $r13;
        int $i2, $i3;
        java.lang.StringBuilder $r8, $r9, $r12;
        boolean $z0;
        java.io.IOException $r14, r16;
        java.lang.Object $r15;

        r0 := @this: com.android.server.backup.BackupManagerService;

     label1:
        $r4 = new java.io.RandomAccessFile;

        $r5 = r0.<com.android.server.backup.BackupManagerService: java.io.File mTokenFile>;

        specialinvoke $r4.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r5, "rwd");

        r1 = $r4;

        virtualinvoke r1.<java.io.RandomAccessFile: void writeInt(int)>(1);

        $l0 = r0.<com.android.server.backup.BackupManagerService: long mAncestralToken>;

        virtualinvoke r1.<java.io.RandomAccessFile: void writeLong(long)>($l0);

        $l1 = r0.<com.android.server.backup.BackupManagerService: long mCurrentToken>;

        virtualinvoke r1.<java.io.RandomAccessFile: void writeLong(long)>($l1);

        $r6 = r0.<com.android.server.backup.BackupManagerService: java.util.Set mAncestralPackages>;

        if $r6 != null goto label2;

        virtualinvoke r1.<java.io.RandomAccessFile: void writeInt(int)>(-1);

        goto label4;

     label2:
        $r7 = r0.<com.android.server.backup.BackupManagerService: java.util.Set mAncestralPackages>;

        $i2 = interfaceinvoke $r7.<java.util.Set: int size()>();

        virtualinvoke r1.<java.io.RandomAccessFile: void writeInt(int)>($i2);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ancestral packages:  ");

        $r10 = r0.<com.android.server.backup.BackupManagerService: java.util.Set mAncestralPackages>;

        $i3 = interfaceinvoke $r10.<java.util.Set: int size()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

        $r13 = r0.<com.android.server.backup.BackupManagerService: java.util.Set mAncestralPackages>;

        r2 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r15 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r15;

        virtualinvoke r1.<java.io.RandomAccessFile: void writeUTF(java.lang.String)>(r3);

        goto label3;

     label4:
        virtualinvoke r1.<java.io.RandomAccessFile: void close()>();

     label5:
        goto label7;

     label6:
        $r14 := @caughtexception;

        r16 = $r14;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Unable to write token file:", r16);

     label7:
        return;

        catch java.io.IOException from label1 to label5 with label6;
    }

    private com.android.internal.backup.IBackupTransport getTransport(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, $r11;
        android.util.ArrayMap r2, $r5, $r6;
        com.android.internal.backup.IBackupTransport r3;
        java.lang.Throwable r4, $r12;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.internal.backup.IBackupTransport) $r7;

        if r3 != null goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested unavailable transport: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

     label2:
        exitmonitor r2;

     label3:
        return r3;

     label4:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r2;

     label5:
        throw r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo, int)
    {
        com.android.server.backup.BackupManagerService r0;
        android.content.pm.ApplicationInfo r1;
        int i0;
        android.app.IBackupAgent r2, $r13, $r22;
        java.lang.Object r3, $r6, $r24;
        long l1, $l2, $l6;
        java.lang.InterruptedException r4, $r27;
        java.lang.Throwable r5, $r25;
        android.app.IActivityManager $r7, $r19, $r29;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r14, $r16, $r17, $r18, $r20, $r26, $r28, $r31;
        java.lang.String $r10, $r15, $r21, $r30;
        byte $b7;
        android.os.RemoteException $r23;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        i0 := @parameter1: int;

        r2 = null;

        $r6 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mAgentConnectLock>;

        r3 = $r6;

        entermonitor $r6;

     label01:
        r0.<com.android.server.backup.BackupManagerService: boolean mConnecting> = 1;

        r0.<com.android.server.backup.BackupManagerService: android.app.IBackupAgent mConnectedAgent> = null;

     label02:
        $r7 = r0.<com.android.server.backup.BackupManagerService: android.app.IActivityManager mActivityManager>;

        $z0 = interfaceinvoke $r7.<android.app.IActivityManager: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)>(r1, i0);

        if $z0 == 0 goto label13;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("awaiting agent for ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l1 = $l2 + 10000L;

     label03:
        $z2 = r0.<com.android.server.backup.BackupManagerService: boolean mConnecting>;

        if $z2 == 0 goto label09;

        $r22 = r0.<com.android.server.backup.BackupManagerService: android.app.IBackupAgent mConnectedAgent>;

        if $r22 != null goto label09;

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b7 = $l6 cmp l1;

        if $b7 >= 0 goto label09;

     label04:
        $r24 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mAgentConnectLock>;

        virtualinvoke $r24.<java.lang.Object: void wait(long)>(5000L);

     label05:
        goto label03;

     label06:
        $r27 := @caughtexception;

        r4 = $r27;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interrupted: ");

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r30);

        $r29 = r0.<com.android.server.backup.BackupManagerService: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r29.<android.app.IActivityManager: void clearPendingBackup()>();

     label07:
        exitmonitor r3;

     label08:
        return null;

     label09:
        $z1 = r0.<com.android.server.backup.BackupManagerService: boolean mConnecting>;

        if $z1 != 1 goto label12;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout waiting for agent ");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r21);

        $r19 = r0.<com.android.server.backup.BackupManagerService: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r19.<android.app.IActivityManager: void clearPendingBackup()>();

     label10:
        exitmonitor r3;

     label11:
        return null;

     label12:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got agent ");

        $r13 = r0.<com.android.server.backup.BackupManagerService: android.app.IBackupAgent mConnectedAgent>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r15);

        r2 = r0.<com.android.server.backup.BackupManagerService: android.app.IBackupAgent mConnectedAgent>;

     label13:
        goto label15;

     label14:
        $r23 := @caughtexception;

     label15:
        exitmonitor r3;

     label16:
        goto label19;

     label17:
        $r25 := @caughtexception;

        r5 = $r25;

        exitmonitor r3;

     label18:
        throw r5;

     label19:
        return r2;

        catch java.lang.InterruptedException from label04 to label05 with label06;
        catch android.os.RemoteException from label02 to label07 with label14;
        catch android.os.RemoteException from label09 to label10 with label14;
        catch android.os.RemoteException from label12 to label13 with label14;
        catch java.lang.Throwable from label01 to label08 with label17;
        catch java.lang.Throwable from label09 to label11 with label17;
        catch java.lang.Throwable from label12 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    void clearApplicationDataSynchronous(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, $r21;
        android.content.pm.PackageInfo r2;
        java.lang.Object r3, $r10, $r13;
        java.lang.Throwable r6, $r12;
        android.content.pm.PackageManager $r7;
        android.content.pm.ApplicationInfo $r8;
        int $i0, $i1;
        com.android.server.backup.BackupManagerService$ClearDataObserver $r9, r23;
        android.app.IActivityManager $r11;
        long $l2, $l4, l6;
        boolean $z1;
        byte $b3;
        android.os.RemoteException $r14;
        android.content.pm.PackageManager$NameNotFoundException $r15;
        java.lang.InterruptedException $r16;
        java.lang.StringBuilder $r17, $r18, $r19, $r20;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

     label01:
        $r7 = r0.<com.android.server.backup.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        r2 = virtualinvoke $r7.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r1, 0);

        $r8 = r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r8.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & 64;

        if $i1 != 0 goto label03;

     label02:
        return;

     label03:
        goto label05;

     label04:
        $r15 := @caughtexception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to clear data for ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but not found");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r21);

        return;

     label05:
        $r9 = new com.android.server.backup.BackupManagerService$ClearDataObserver;

        specialinvoke $r9.<com.android.server.backup.BackupManagerService$ClearDataObserver: void <init>(com.android.server.backup.BackupManagerService)>(r0);

        r23 = $r9;

        $r10 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mClearDataLock>;

        r3 = $r10;

        entermonitor $r10;

     label06:
        r0.<com.android.server.backup.BackupManagerService: boolean mClearingData> = 1;

     label07:
        $r11 = r0.<com.android.server.backup.BackupManagerService: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r11.<android.app.IActivityManager: boolean clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>(r1, r23, 0);

     label08:
        goto label10;

     label09:
        $r14 := @caughtexception;

     label10:
        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l6 = $l2 + 10000L;

     label11:
        $z1 = r0.<com.android.server.backup.BackupManagerService: boolean mClearingData>;

        if $z1 == 0 goto label15;

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b3 = $l4 cmp l6;

        if $b3 >= 0 goto label15;

     label12:
        $r13 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mClearDataLock>;

        virtualinvoke $r13.<java.lang.Object: void wait(long)>(5000L);

     label13:
        goto label11;

     label14:
        $r16 := @caughtexception;

        r0.<com.android.server.backup.BackupManagerService: boolean mClearingData> = 0;

        goto label11;

     label15:
        exitmonitor r3;

     label16:
        goto label19;

     label17:
        $r12 := @caughtexception;

        r6 = $r12;

        exitmonitor r3;

     label18:
        throw r6;

     label19:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label04;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.InterruptedException from label12 to label13 with label14;
        catch java.lang.Throwable from label06 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    long getAvailableRestoreToken(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        long l0;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        java.util.HashSet $r5;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        l0 = r0.<com.android.server.backup.BackupManagerService: long mAncestralToken>;

        $r4 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mQueueLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mEverStoredApps>;

        $z0 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        l0 = r0.<com.android.server.backup.BackupManagerService: long mCurrentToken>;

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return l0;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void prepareOperationTimeout(int, long, com.android.server.backup.BackupManagerService$BackupRestoreTask)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        long l1;
        com.android.server.backup.BackupManagerService$BackupRestoreTask r1;
        java.lang.Object r2, $r5;
        android.os.Message r3;
        java.lang.Throwable r4, $r10;
        com.android.server.backup.BackupManagerService$Operation $r6;
        android.util.SparseArray $r7;
        com.android.server.backup.BackupManagerService$BackupHandler $r8, $r9;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: com.android.server.backup.BackupManagerService$BackupRestoreTask;

        $r5 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r7 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        $r6 = new com.android.server.backup.BackupManagerService$Operation;

        specialinvoke $r6.<com.android.server.backup.BackupManagerService$Operation: void <init>(com.android.server.backup.BackupManagerService,int,com.android.server.backup.BackupManagerService$BackupRestoreTask)>(r0, 0, r1);

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r6);

        $r8 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        r3 = virtualinvoke $r8.<com.android.server.backup.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(7, i0, 0, r1);

        $r9 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r9.<com.android.server.backup.BackupManagerService$BackupHandler: boolean sendMessageDelayed(android.os.Message,long)>(r3, l1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label4:
        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    boolean waitUntilOperationComplete(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0, i1, $i2;
        java.lang.Object r1, $r3, $r5, $r7;
        java.lang.Throwable r2, $r9;
        android.util.SparseArray $r4;
        com.android.server.backup.BackupManagerService$BackupHandler $r6;
        boolean $z0;
        java.lang.InterruptedException $r8;
        com.android.server.backup.BackupManagerService$Operation r10;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        i1 = 0;

        $r3 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock>;

        r1 = $r3;

        entermonitor $r3;

     label01:
        $r4 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r10 = (com.android.server.backup.BackupManagerService$Operation) $r5;

        if r10 != null goto label02;

        goto label07;

     label02:
        $i2 = r10.<com.android.server.backup.BackupManagerService$Operation: int state>;

        if $i2 != 0 goto label06;

     label03:
        $r7 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock>;

        virtualinvoke $r7.<java.lang.Object: void wait()>();

     label04:
        goto label01;

     label05:
        $r8 := @caughtexception;

        goto label01;

     label06:
        i1 = r10.<com.android.server.backup.BackupManagerService$Operation: int state>;

        goto label07;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label10:
        throw r2;

     label11:
        $r6 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r6.<com.android.server.backup.BackupManagerService$BackupHandler: void removeMessages(int)>(7);

        if i1 != 1 goto label12;

        $z0 = 1;

        goto label13;

     label12:
        $z0 = 0;

     label13:
        return $z0;

        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    void handleTimeout(int, java.lang.Object)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0, i1, $i2;
        java.lang.Object r1, r2, $r4, $r6, $r7;
        java.lang.Throwable r3, $r16;
        android.util.SparseArray $r5, $r15;
        com.android.server.backup.BackupManagerService$BackupRestoreTask $r8, $r9;
        java.lang.StringBuilder $r10, $r12, $r14;
        java.lang.String $r11, $r13;
        com.android.server.backup.BackupManagerService$Operation r17;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r4 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r17 = (com.android.server.backup.BackupManagerService$Operation) $r6;

        if r17 == null goto label2;

        $i2 = r17.<com.android.server.backup.BackupManagerService$Operation: int state>;

        goto label3;

     label2:
        $i2 = -1;

     label3:
        i1 = $i2;

        if i1 != 0 goto label4;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TIMEOUT: token=");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r13);

        r17.<com.android.server.backup.BackupManagerService$Operation: int state> = -1;

        $r15 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r17);

     label4:
        $r7 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock>;

        virtualinvoke $r7.<java.lang.Object: void notifyAll()>();

        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r16 := @caughtexception;

        r3 = $r16;

        exitmonitor r2;

     label7:
        throw r3;

     label8:
        if r17 == null goto label9;

        $r8 = r17.<com.android.server.backup.BackupManagerService$Operation: com.android.server.backup.BackupManagerService$BackupRestoreTask callback>;

        if $r8 == null goto label9;

        $r9 = r17.<com.android.server.backup.BackupManagerService$Operation: com.android.server.backup.BackupManagerService$BackupRestoreTask callback>;

        interfaceinvoke $r9.<com.android.server.backup.BackupManagerService$BackupRestoreTask: void handleTimeout()>();

     label9:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void routeSocketDataToOutput(android.os.ParcelFileDescriptor, java.io.OutputStream) throws java.io.IOException
    {
        com.android.server.backup.BackupManagerService r0;
        android.os.ParcelFileDescriptor r1;
        java.io.OutputStream r2;
        java.io.FileInputStream r3, $r6;
        java.io.DataInputStream r4, $r8;
        byte[] r5;
        int i0, i1, i2, $i3, $i4, $i5;
        java.io.FileDescriptor $r7;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r2 := @parameter1: java.io.OutputStream;

        $r6 = new java.io.FileInputStream;

        $r7 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r7);

        r3 = $r6;

        $r8 = new java.io.DataInputStream;

        specialinvoke $r8.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r3);

        r4 = $r8;

        r5 = newarray (byte)[32768];

     label1:
        $i3 = virtualinvoke r4.<java.io.DataInputStream: int readInt()>();

        i0 = $i3;

        if $i3 <= 0 goto label5;

     label2:
        if i0 <= 0 goto label1;

        $i4 = lengthof r5;

        if i0 <= $i4 goto label3;

        $i5 = lengthof r5;

        goto label4;

     label3:
        $i5 = i0;

     label4:
        i1 = $i5;

        i2 = virtualinvoke r4.<java.io.DataInputStream: int read(byte[],int,int)>(r5, 0, i1);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r5, 0, i2);

        i0 = i0 - i2;

        goto label2;

     label5:
        return;
    }

    boolean deviceIsEncrypted()
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.Exception r1, $r4;
        android.os.storage.IMountService $r2, $r3;
        int $i0, $i1;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @this: com.android.server.backup.BackupManagerService;

     label1:
        $r2 = r0.<com.android.server.backup.BackupManagerService: android.os.storage.IMountService mMountService>;

        $i0 = interfaceinvoke $r2.<android.os.storage.IMountService: int getEncryptionState()>();

        if $i0 == 1 goto label2;

        $r3 = r0.<com.android.server.backup.BackupManagerService: android.os.storage.IMountService mMountService>;

        $i1 = interfaceinvoke $r3.<android.os.storage.IMountService: int getPasswordType()>();

        if $i1 == 1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to communicate with mount service: ");

        $r7 = virtualinvoke r1.<java.lang.Exception: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", $r9);

        return 1;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    void scheduleNextFullBackupJob()
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.Object r1, $r4, $r8;
        long l0, l1, l2, $l6, $l7;
        com.android.server.backup.BackupManagerService$3 r2, $r10;
        java.lang.Throwable r3, $r11;
        java.util.ArrayList $r5, $r6;
        int $i3;
        com.android.server.backup.BackupManagerService$FullBackupEntry $r7;
        byte $b5;
        com.android.server.backup.BackupManagerService$BackupHandler $r9;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r4 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mQueueLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $i3 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if $i3 <= 0 goto label4;

        $r6 = r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $r8 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r7 = (com.android.server.backup.BackupManagerService$FullBackupEntry) $r8;

        l0 = $r7.<com.android.server.backup.BackupManagerService$FullBackupEntry: long lastBackup>;

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l1 = $l6 - l0;

        $b5 = l1 cmp 86400000L;

        if $b5 >= 0 goto label2;

        $l7 = 86400000L - l1;

        goto label3;

     label2:
        $l7 = 0L;

     label3:
        l2 = $l7;

        $r10 = new com.android.server.backup.BackupManagerService$3;

        specialinvoke $r10.<com.android.server.backup.BackupManagerService$3: void <init>(com.android.server.backup.BackupManagerService,long)>(r0, l2);

        r2 = $r10;

        $r9 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r9.<com.android.server.backup.BackupManagerService$BackupHandler: boolean postDelayed(java.lang.Runnable,long)>(r2, 2500L);

        goto label5;

     label4:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup queue empty; not scheduling");

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    void enqueueFullBackup(java.lang.String, long)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, $r16, $r22;
        long l0, $l5;
        com.android.server.backup.BackupManagerService$FullBackupEntry r2, r4, $r6, r24;
        java.lang.Object r3, $r7, $r11, $r14;
        int i1, i2, $i3, $i6, i8;
        java.lang.Throwable r5, $r23;
        java.util.ArrayList $r8, $r9, $r10, $r12, $r13, $r15, $r20;
        byte $b4;
        boolean $z0;
        java.lang.StringBuilder $r17, $r18, $r19;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r6 = new com.android.server.backup.BackupManagerService$FullBackupEntry;

        specialinvoke $r6.<com.android.server.backup.BackupManagerService$FullBackupEntry: void <init>(com.android.server.backup.BackupManagerService,java.lang.String,long)>(r0, r1, l0);

        r2 = $r6;

        $r7 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mQueueLock>;

        r3 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue>;

        i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        i2 = i1 - 1;

     label02:
        if i2 < 0 goto label04;

        $r15 = r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $r14 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r4 = (com.android.server.backup.BackupManagerService$FullBackupEntry) $r14;

        $r16 = r4.<com.android.server.backup.BackupManagerService$FullBackupEntry: java.lang.String packageName>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z0 == 0 goto label03;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing schedule queue dupe of ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r22);

        $r20 = r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue>;

        virtualinvoke $r20.<java.util.ArrayList: java.lang.Object remove(int)>(i2);

     label03:
        i2 = i2 + -1;

        goto label02;

     label04:
        $r9 = r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $i3 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        i8 = $i3 - 1;

     label05:
        if i8 < 0 goto label07;

        $r12 = r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $r11 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        r24 = (com.android.server.backup.BackupManagerService$FullBackupEntry) $r11;

        $l5 = r24.<com.android.server.backup.BackupManagerService$FullBackupEntry: long lastBackup>;

        $b4 = $l5 cmp l0;

        if $b4 > 0 goto label06;

        $r13 = r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $i6 = i8 + 1;

        virtualinvoke $r13.<java.util.ArrayList: void add(int,java.lang.Object)>($i6, r2);

        goto label07;

     label06:
        i8 = i8 + -1;

        goto label05;

     label07:
        if i8 >= 0 goto label08;

        $r10 = r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue>;

        virtualinvoke $r10.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r2);

     label08:
        exitmonitor r3;

     label09:
        goto label12;

     label10:
        $r23 := @caughtexception;

        r5 = $r23;

        exitmonitor r3;

     label11:
        throw r5;

     label12:
        specialinvoke r0.<com.android.server.backup.BackupManagerService: void writeFullBackupScheduleAsync()>();

        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    boolean beginFullBackup(com.android.server.backup.FullBackupJob)
    {
        com.android.server.backup.BackupManagerService r0;
        com.android.server.backup.FullBackupJob r1;
        long l0, l1, l2, $l4;
        java.lang.Object r2, $r5, $r9;
        java.lang.String[] r3, $r13;
        java.lang.Throwable r4, $r19;
        com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask $r6, $r15, $r16;
        java.util.ArrayList $r7, $r8, $r10;
        int $i3;
        byte $b5;
        java.util.concurrent.atomic.AtomicBoolean $r11, r21;
        java.lang.String $r12;
        java.lang.Thread $r14;
        com.android.server.backup.BackupManagerService$BackupHandler $r17;
        com.android.server.backup.BackupManagerService$4 $r18;
        com.android.server.backup.BackupManagerService$FullBackupEntry r20;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: com.android.server.backup.FullBackupJob;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Beginning scheduled full backup operation");

        $r5 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mQueueLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask mRunningFullBackupTask>;

        if $r6 == null goto label03;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Backup triggered but one already/still running!");

        exitmonitor r2;

     label02:
        return 0;

     label03:
        $r7 = r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $i3 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        if $i3 != 0 goto label05;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Backup queue empty; doing nothing");

        exitmonitor r2;

     label04:
        return 0;

     label05:
        $r8 = r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r20 = (com.android.server.backup.BackupManagerService$FullBackupEntry) $r9;

        $l4 = r20.<com.android.server.backup.BackupManagerService$FullBackupEntry: long lastBackup>;

        l1 = l0 - $l4;

        $b5 = l1 cmp 86400000L;

        if $b5 >= 0 goto label07;

        l2 = 86400000L - l1;

        $r17 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        $r18 = new com.android.server.backup.BackupManagerService$4;

        specialinvoke $r18.<com.android.server.backup.BackupManagerService$4: void <init>(com.android.server.backup.BackupManagerService,long)>(r0, l2);

        virtualinvoke $r17.<com.android.server.backup.BackupManagerService$BackupHandler: boolean post(java.lang.Runnable)>($r18);

        exitmonitor r2;

     label06:
        return 0;

     label07:
        $r10 = r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue>;

        virtualinvoke $r10.<java.util.ArrayList: java.lang.Object remove(int)>(0);

        $r11 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r21 = $r11;

        $r13 = newarray (java.lang.String)[1];

        $r12 = r20.<com.android.server.backup.BackupManagerService$FullBackupEntry: java.lang.String packageName>;

        $r13[0] = $r12;

        r3 = $r13;

        $r15 = new com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask;

        specialinvoke $r15.<com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask: void <init>(com.android.server.backup.BackupManagerService,android.app.backup.IFullBackupRestoreObserver,java.lang.String[],boolean,com.android.server.backup.FullBackupJob,java.util.concurrent.atomic.AtomicBoolean)>(r0, null, r3, 1, r1, r21);

        r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask mRunningFullBackupTask> = $r15;

        $r14 = new java.lang.Thread;

        $r16 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask mRunningFullBackupTask>;

        specialinvoke $r14.<java.lang.Thread: void <init>(java.lang.Runnable)>($r16);

        virtualinvoke $r14.<java.lang.Thread: void start()>();

        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r19 := @caughtexception;

        r4 = $r19;

        exitmonitor r2;

     label10:
        throw r4;

     label11:
        return 1;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    void endFullBackup()
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask $r4, $r5;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r3 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mQueueLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask mRunningFullBackupTask>;

        if $r4 == null goto label2;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Telling running backup to stop");

        $r5 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask mRunningFullBackupTask>;

        virtualinvoke $r5.<com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask: void setRunning(boolean)>(0);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    static boolean signaturesMatch(java.util.ArrayList, android.content.pm.PackageInfo)
    {
        java.util.ArrayList r0, r3, $r6;
        android.content.pm.PackageInfo r1;
        android.content.pm.Signature[] r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i9;
        boolean z0, $z1;
        byte[] r4, $r9, $r10;
        android.content.pm.ApplicationInfo $r5;
        java.lang.Object $r7, $r8;
        android.content.pm.Signature $r11;
        java.lang.StringBuilder $r12, $r14, $r15, $r16;
        java.lang.String $r13, $r17;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: android.content.pm.PackageInfo;

        if r1 != null goto label01;

        return 0;

     label01:
        $r5 = r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r5.<android.content.pm.ApplicationInfo: int flags>;

        $i5 = $i4 & 1;

        if $i5 == 0 goto label02;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System app ");

        $r13 = r1.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - skipping sig check");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r17);

        return 1;

     label02:
        r2 = r1.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        if r0 == null goto label03;

        $i7 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        if $i7 != 0 goto label05;

     label03:
        if r2 == null goto label04;

        $i6 = lengthof r2;

        if $i6 != 0 goto label05;

     label04:
        return 1;

     label05:
        if r0 == null goto label06;

        if r2 != null goto label07;

     label06:
        return 0;

     label07:
        i0 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        i1 = lengthof r2;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(i1);

        r3 = $r6;

        i2 = 0;

     label08:
        if i2 >= i1 goto label09;

        $r11 = r2[i2];

        $r10 = staticinvoke <com.android.server.backup.BackupManagerService: byte[] hashSignature(android.content.pm.Signature)>($r11);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        i2 = i2 + 1;

        goto label08;

     label09:
        i9 = 0;

     label10:
        if i9 >= i0 goto label15;

        z0 = 0;

        $r8 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        r4 = (byte[]) $r8;

        i3 = 0;

     label11:
        if i3 >= i1 goto label13;

        $r7 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r9 = (byte[]) $r7;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r4, $r9);

        if $z1 == 0 goto label12;

        z0 = 1;

        goto label13;

     label12:
        i3 = i3 + 1;

        goto label11;

     label13:
        if z0 != 0 goto label14;

        return 0;

     label14:
        i9 = i9 + 1;

        goto label10;

     label15:
        return 1;
    }

    static byte[] hashSignature(android.content.pm.Signature)
    {
        android.content.pm.Signature r0;
        java.security.MessageDigest r1;
        byte[] $r2, $r3;
        java.security.NoSuchAlgorithmException $r4;

        r0 := @parameter0: android.content.pm.Signature;

     label1:
        r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        $r2 = virtualinvoke r0.<android.content.pm.Signature: byte[] toByteArray()>();

        virtualinvoke r1.<java.security.MessageDigest: void update(byte[])>($r2);

        $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "No SHA-256 algorithm found!");

        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    static boolean signaturesMatch(android.content.pm.Signature[], android.content.pm.PackageInfo)
    {
        android.content.pm.Signature[] r0, r2;
        android.content.pm.PackageInfo r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        boolean z0, $z1;
        android.content.pm.ApplicationInfo $r3;
        android.content.pm.Signature $r4, $r5;
        java.lang.StringBuilder $r6, $r8, $r9, $r10;
        java.lang.String $r7, $r11;

        r0 := @parameter0: android.content.pm.Signature[];

        r1 := @parameter1: android.content.pm.PackageInfo;

        if r1 != null goto label01;

        return 0;

     label01:
        $r3 = r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r3.<android.content.pm.ApplicationInfo: int flags>;

        $i5 = $i4 & 1;

        if $i5 == 0 goto label02;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System app ");

        $r7 = r1.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - skipping sig check");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

        return 1;

     label02:
        r2 = r1.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        if r0 == null goto label03;

        $i7 = lengthof r0;

        if $i7 != 0 goto label05;

     label03:
        if r2 == null goto label04;

        $i6 = lengthof r2;

        if $i6 != 0 goto label05;

     label04:
        return 1;

     label05:
        if r0 == null goto label06;

        if r2 != null goto label07;

     label06:
        return 0;

     label07:
        i0 = lengthof r0;

        i1 = lengthof r2;

        i2 = 0;

     label08:
        if i2 >= i0 goto label13;

        z0 = 0;

        i3 = 0;

     label09:
        if i3 >= i1 goto label11;

        $r5 = r0[i2];

        $r4 = r2[i3];

        $z1 = virtualinvoke $r5.<android.content.pm.Signature: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label10;

        z0 = 1;

        goto label11;

     label10:
        i3 = i3 + 1;

        goto label09;

     label11:
        if z0 != 0 goto label12;

        return 0;

     label12:
        i2 = i2 + 1;

        goto label08;

     label13:
        return 1;
    }

    void restoreWidgetData(java.lang.String, byte[])
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        byte[] r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        staticinvoke <com.android.server.AppWidgetBackupBridge: void restoreWidgetState(java.lang.String,byte[],int)>(r1, r2, 0);

        return;
    }

    private void dataChangedImpl(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        java.util.HashSet r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<com.android.server.backup.BackupManagerService: java.util.HashSet dataChangedTargets(java.lang.String)>(r1);

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void dataChangedImpl(java.lang.String,java.util.HashSet)>(r1, r2);

        return;
    }

    private void dataChangedImpl(java.lang.String, java.util.HashSet)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, $r12, $r19;
        java.util.HashSet r2;
        java.lang.Object r3, $r6, $r9;
        com.android.server.backup.BackupManagerService$BackupRequest r4, $r7;
        java.lang.Throwable r5, $r21;
        boolean $z0;
        java.util.HashMap $r8;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r20;
        int $i2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.HashSet;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.String)>(2820, r1);

        if r2 != null goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dataChanged but no participant pkg=\'");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r19);

        return;

     label1:
        $r6 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mQueueLock>;

        r3 = $r6;

        entermonitor $r6;

     label2:
        $z0 = virtualinvoke r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r7 = new com.android.server.backup.BackupManagerService$BackupRequest;

        specialinvoke $r7.<com.android.server.backup.BackupManagerService$BackupRequest: void <init>(com.android.server.backup.BackupManagerService,java.lang.String)>(r0, r1);

        r4 = $r7;

        $r8 = r0.<com.android.server.backup.BackupManagerService: java.util.HashMap mPendingBackups>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

        if $r9 != null goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Now staging backup of ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r12);

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void writeToJournalLocked(java.lang.String)>(r1);

     label3:
        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r21 := @caughtexception;

        r5 = $r21;

        exitmonitor r3;

     label6:
        throw r5;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private java.util.HashSet dataChangedTargets(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        android.util.SparseArray r2, $r8, $r9, $r11, $r12, $r13, r19;
        java.lang.Throwable r3, r5, $r15, $r17;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.HashSet r4, $r7, $r16, r18;
        android.content.Context $r6;
        java.lang.Object $r10, $r14;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i4 = virtualinvoke $r6.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.BACKUP", $i2, $i3);

        if $i4 != -1 goto label05;

        $r12 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        r2 = $r12;

        entermonitor $r12;

     label01:
        $r13 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r14 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object get(int)>($i5);

        $r16 = (java.util.HashSet) $r14;

        exitmonitor r2;

     label02:
        return $r16;

     label03:
        $r17 := @caughtexception;

        r3 = $r17;

        exitmonitor r2;

     label04:
        throw r3;

     label05:
        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        r18 = $r7;

        $r8 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        r19 = $r8;

        entermonitor $r8;

     label06:
        $r9 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        i0 = virtualinvoke $r9.<android.util.SparseArray: int size()>();

        i1 = 0;

     label07:
        if i1 >= i0 goto label09;

        $r11 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r10 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r4 = (java.util.HashSet) $r10;

        if r4 == null goto label08;

        virtualinvoke r18.<java.util.HashSet: boolean addAll(java.util.Collection)>(r4);

     label08:
        i1 = i1 + 1;

        goto label07;

     label09:
        exitmonitor r19;

     label10:
        goto label13;

     label11:
        $r15 := @caughtexception;

        r5 = $r15;

        exitmonitor r19;

     label12:
        throw r5;

     label13:
        return r18;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private void writeToJournalLocked(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, $r16;
        java.io.RandomAccessFile r2, $r7;
        java.lang.Throwable r4, $r19;
        java.io.File $r6, $r8, $r9, $r10;
        long $l0;
        java.io.IOException $r11, $r12, $r18, $r20, r21;
        java.lang.StringBuilder $r13, $r14, $r15, $r17;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 = null;

     label01:
        $r6 = r0.<com.android.server.backup.BackupManagerService: java.io.File mJournal>;

        if $r6 != null goto label02;

        $r9 = r0.<com.android.server.backup.BackupManagerService: java.io.File mJournalDir>;

        $r10 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("journal", null, $r9);

        r0.<com.android.server.backup.BackupManagerService: java.io.File mJournal> = $r10;

     label02:
        $r7 = new java.io.RandomAccessFile;

        $r8 = r0.<com.android.server.backup.BackupManagerService: java.io.File mJournal>;

        specialinvoke $r7.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r8, "rws");

        r2 = $r7;

        $l0 = virtualinvoke r2.<java.io.RandomAccessFile: long length()>();

        virtualinvoke r2.<java.io.RandomAccessFile: void seek(long)>($l0);

        virtualinvoke r2.<java.io.RandomAccessFile: void writeUTF(java.lang.String)>(r1);

     label03:
        if r2 == null goto label04;

        virtualinvoke r2.<java.io.RandomAccessFile: void close()>();

     label04:
        goto label15;

     label05:
        $r20 := @caughtexception;

        goto label15;

     label06:
        $r12 := @caughtexception;

        r21 = $r12;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t write ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to backup journal");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", $r16, r21);

        r0.<com.android.server.backup.BackupManagerService: java.io.File mJournal> = null;

     label07:
        if r2 == null goto label08;

        virtualinvoke r2.<java.io.RandomAccessFile: void close()>();

     label08:
        goto label15;

     label09:
        $r11 := @caughtexception;

        goto label15;

     label10:
        $r19 := @caughtexception;

        r4 = $r19;

     label11:
        if r2 == null goto label12;

        virtualinvoke r2.<java.io.RandomAccessFile: void close()>();

     label12:
        goto label14;

     label13:
        $r18 := @caughtexception;

     label14:
        throw r4;

     label15:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label01 to label03 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void dataChanged(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, $r10;
        int i0, $i1;
        java.util.HashSet r2;
        com.android.server.backup.BackupManagerService$5 $r3;
        com.android.server.backup.BackupManagerService$BackupHandler $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r11;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if i0 == 0 goto label1;

        return;

     label1:
        r2 = specialinvoke r0.<com.android.server.backup.BackupManagerService: java.util.HashSet dataChangedTargets(java.lang.String)>(r1);

        if r2 != null goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dataChanged but no participant pkg=\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r10);

        return;

     label2:
        $r4 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        $r3 = new com.android.server.backup.BackupManagerService$5;

        specialinvoke $r3.<com.android.server.backup.BackupManagerService$5: void <init>(com.android.server.backup.BackupManagerService,java.lang.String,java.util.HashSet)>(r0, r1, r2);

        virtualinvoke $r4.<com.android.server.backup.BackupManagerService$BackupHandler: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    public void clearBackupData(java.lang.String, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r2, $r12, $r33;
        android.content.pm.PackageInfo r3;
        int i0, i1, $i3, $i4, $i5, $i8;
        java.util.HashSet r5, $r16, r38;
        android.os.Message r6, r41;
        java.lang.Throwable r7, $r37;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13, $r30, $r34, $r35, $r36;
        android.content.pm.PackageManager $r14;
        android.content.Context $r15;
        android.util.SparseArray $r17, $r26, $r28;
        boolean $z0;
        com.android.server.backup.BackupManagerService$BackupHandler $r18, $r20, $r23, $r25, $r27;
        java.lang.Object $r19, $r29, $r32, r39;
        android.os.PowerManager$WakeLock $r21;
        com.android.server.backup.BackupManagerService$ClearParams $r22;
        com.android.server.backup.BackupManagerService$ClearRetryParams $r24;
        android.content.pm.PackageManager$NameNotFoundException $r31;
        com.android.internal.backup.IBackupTransport r40;
        long l10;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clearBackupData() of ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r12);

     label01:
        $r14 = r0.<com.android.server.backup.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        r3 = virtualinvoke $r14.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r2, 64);

     label02:
        goto label04;

     label03:
        $r31 := @caughtexception;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such package \'");

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' - not clearing backup data");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r33);

        return;

     label04:
        $r15 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i4 = virtualinvoke $r15.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.BACKUP", $i3, $i5);

        if $i4 != -1 goto label05;

        $r28 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $i8 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r32 = virtualinvoke $r28.<android.util.SparseArray: java.lang.Object get(int)>($i8);

        r38 = (java.util.HashSet) $r32;

        goto label08;

     label05:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", "Privileged caller, allowing clear of other apps");

        $r16 = new java.util.HashSet;

        specialinvoke $r16.<java.util.HashSet: void <init>()>();

        r38 = $r16;

        $r17 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        i0 = virtualinvoke $r17.<android.util.SparseArray: int size()>();

        i1 = 0;

     label06:
        if i1 >= i0 goto label08;

        $r26 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r29 = virtualinvoke $r26.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r5 = (java.util.HashSet) $r29;

        if r5 == null goto label07;

        virtualinvoke r38.<java.util.HashSet: boolean addAll(java.util.Collection)>(r5);

     label07:
        i1 = i1 + 1;

        goto label06;

     label08:
        $z0 = virtualinvoke r38.<java.util.HashSet: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label15;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", "Found the app - running clear process");

        $r18 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r18.<com.android.server.backup.BackupManagerService$BackupHandler: void removeMessages(int)>(12);

        $r19 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mQueueLock>;

        r39 = $r19;

        entermonitor $r19;

     label09:
        r40 = specialinvoke r0.<com.android.server.backup.BackupManagerService: com.android.internal.backup.IBackupTransport getTransport(java.lang.String)>(r1);

        if r40 != null goto label11;

        $r25 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        $r24 = new com.android.server.backup.BackupManagerService$ClearRetryParams;

        specialinvoke $r24.<com.android.server.backup.BackupManagerService$ClearRetryParams: void <init>(com.android.server.backup.BackupManagerService,java.lang.String,java.lang.String)>(r0, r1, r2);

        r41 = virtualinvoke $r25.<com.android.server.backup.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int,java.lang.Object)>(12, $r24);

        $r27 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r27.<com.android.server.backup.BackupManagerService$BackupHandler: boolean sendMessageDelayed(android.os.Message,long)>(r41, 3600000L);

        exitmonitor r39;

     label10:
        return;

     label11:
        l10 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r21 = r0.<com.android.server.backup.BackupManagerService: android.os.PowerManager$WakeLock mWakelock>;

        virtualinvoke $r21.<android.os.PowerManager$WakeLock: void acquire()>();

        $r20 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        $r22 = new com.android.server.backup.BackupManagerService$ClearParams;

        specialinvoke $r22.<com.android.server.backup.BackupManagerService$ClearParams: void <init>(com.android.server.backup.BackupManagerService,com.android.internal.backup.IBackupTransport,android.content.pm.PackageInfo)>(r0, r40, r3);

        r6 = virtualinvoke $r20.<com.android.server.backup.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int,java.lang.Object)>(4, $r22);

        $r23 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r23.<com.android.server.backup.BackupManagerService$BackupHandler: boolean sendMessage(android.os.Message)>(r6);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l10);

        exitmonitor r39;

     label12:
        goto label15;

     label13:
        $r37 := @caughtexception;

        r7 = $r37;

        exitmonitor r39;

     label14:
        throw r7;

     label15:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label03;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void backupNow()
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r3, $r7;
        android.content.Context $r4;
        android.app.PendingIntent $r6;
        android.app.PendingIntent$CanceledException $r8;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r4 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "backupNow");

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", "Scheduling immediate backup pass");

        $r5 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mQueueLock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        specialinvoke r0.<com.android.server.backup.BackupManagerService: void startBackupAlarmsLocked(long)>(3600000L);

     label2:
        $r6 = r0.<com.android.server.backup.BackupManagerService: android.app.PendingIntent mRunBackupIntent>;

        virtualinvoke $r6.<android.app.PendingIntent: void send()>();

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "run-backup intent cancelled!");

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        return;

        catch android.app.PendingIntent$CanceledException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    boolean deviceIsProvisioned()
    {
        com.android.server.backup.BackupManagerService r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r2 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "device_provisioned", 0);

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void fullBackup(android.os.ParcelFileDescriptor, boolean, boolean, boolean, boolean, boolean, boolean, boolean, java.lang.String[])
    {
        com.android.server.backup.BackupManagerService r0;
        android.os.ParcelFileDescriptor r1;
        boolean z0, z1, z2, z3, z4, z5, z6, $z7, $z8;
        java.lang.String[] r2;
        int i0, i2, $i12;
        long l1, $l8;
        android.util.SparseArray r4, $r23, $r24, $r31;
        java.lang.Throwable r5, r6, $r35, $r38;
        android.content.Context $r7;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r26, $r27, $r29;
        java.lang.String $r22, $r28;
        com.android.server.backup.BackupManagerService$FullBackupParams $r25, r40;
        android.os.PowerManager $r30;
        java.lang.IllegalStateException $r32;
        java.lang.IllegalArgumentException $r33;
        java.io.IOException $r34, $r36, $r37, $r39;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        z3 := @parameter4: boolean;

        z4 := @parameter5: boolean;

        z5 := @parameter6: boolean;

        z6 := @parameter7: boolean;

        r2 := @parameter8: java.lang.String[];

        $r7 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "fullBackup");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if i0 == 0 goto label01;

        $r32 = new java.lang.IllegalStateException;

        specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Backup supported only for the device owner");

        throw $r32;

     label01:
        if z4 != 0 goto label03;

        if z2 != 0 goto label03;

        if r2 == null goto label02;

        $i12 = lengthof r2;

        if $i12 != 0 goto label03;

     label02:
        $r33 = new java.lang.IllegalArgumentException;

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Backup requested but neither shared nor any apps named");

        throw $r33;

     label03:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $z7 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean deviceIsProvisioned()>();

        if $z7 != 0 goto label09;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup not supported before setup");

     label05:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label06:
        goto label08;

     label07:
        $r37 := @caughtexception;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup processing complete.");

        return;

     label09:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requesting full backup: apks=");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" obb=");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shared=");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" all=");

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" system=");

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z5);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pkgs=");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r22);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Beginning full backup...");

        $r25 = new com.android.server.backup.BackupManagerService$FullBackupParams;

        specialinvoke $r25.<com.android.server.backup.BackupManagerService$FullBackupParams: void <init>(com.android.server.backup.BackupManagerService,android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>(r0, r1, z0, z1, z2, z3, z4, z5, z6, r2);

        r40 = $r25;

        i2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int generateToken()>();

        $r23 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        r4 = $r23;

        entermonitor $r23;

     label10:
        $r24 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        virtualinvoke $r24.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r40);

        exitmonitor r4;

     label11:
        goto label14;

     label12:
        $r38 := @caughtexception;

        r6 = $r38;

        exitmonitor r4;

     label13:
        throw r6;

     label14:
        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting backup confirmation UI, token=");

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r28);

        $z8 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean startConfirmationUi(int,java.lang.String)>(i2, "fullback");

        if $z8 != 0 goto label19;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to launch full backup confirmation");

        $r31 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        virtualinvoke $r31.<android.util.SparseArray: void delete(int)>(i2);

     label15:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label16:
        goto label18;

     label17:
        $r36 := @caughtexception;

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup processing complete.");

        return;

     label19:
        $r30 = r0.<com.android.server.backup.BackupManagerService: android.os.PowerManager mPowerManager>;

        $l8 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r30.<android.os.PowerManager: void userActivity(long,boolean)>($l8, 0);

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void startConfirmationTimeout(int,com.android.server.backup.BackupManagerService$FullParams)>(i2, r40);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Waiting for full backup completion...");

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void waitForCompletion(com.android.server.backup.BackupManagerService$FullParams)>(r40);

     label20:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label21:
        goto label23;

     label22:
        $r34 := @caughtexception;

     label23:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup processing complete.");

        goto label29;

     label24:
        $r35 := @caughtexception;

        r5 = $r35;

     label25:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label26:
        goto label28;

     label27:
        $r39 := @caughtexception;

     label28:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup processing complete.");

        throw r5;

     label29:
        return;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.io.IOException from label20 to label21 with label22;
        catch java.lang.Throwable from label04 to label05 with label24;
        catch java.lang.Throwable from label09 to label15 with label24;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch java.io.IOException from label25 to label26 with label27;
        catch java.lang.Throwable from label24 to label25 with label24;
    }

    public void fullTransportBackup(java.lang.String[])
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String[] r1;
        int i0;
        java.util.concurrent.atomic.AtomicBoolean r2, r4, $r8;
        com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask r3, $r9;
        java.lang.Throwable r6, $r12;
        android.content.Context $r7;
        java.lang.Thread $r10;
        boolean $z0;
        java.lang.IllegalStateException $r13;
        java.lang.InterruptedException $r14;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String[];

        $r7 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "fullTransportBackup");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if i0 == 0 goto label1;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Restore supported only for the device owner");

        throw $r13;

     label1:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "fullTransportBackup()");

        $r8 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r2 = $r8;

        $r9 = new com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask;

        specialinvoke $r9.<com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask: void <init>(com.android.server.backup.BackupManagerService,android.app.backup.IFullBackupRestoreObserver,java.lang.String[],boolean,com.android.server.backup.FullBackupJob,java.util.concurrent.atomic.AtomicBoolean)>(r0, null, r1, 0, null, r2);

        r3 = $r9;

        $r10 = new java.lang.Thread;

        specialinvoke $r10.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r3, "full-transport-master");

        virtualinvoke $r10.<java.lang.Thread: void start()>();

        r4 = r2;

        entermonitor r2;

     label2:
        $z0 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label3;

        virtualinvoke r2.<java.lang.Object: void wait()>();

        goto label2;

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

     label5:
        exitmonitor r4;

     label6:
        goto label9;

     label7:
        $r12 := @caughtexception;

        r6 = $r12;

        exitmonitor r4;

     label8:
        throw r6;

     label9:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Done with full transport backup.");

        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void fullRestore(android.os.ParcelFileDescriptor)
    {
        com.android.server.backup.BackupManagerService r0;
        android.os.ParcelFileDescriptor r1;
        int i0, i2;
        long l1, $l5;
        java.io.IOException r2, r6, $r19, $r26, $r32, $r33, r41, r42;
        android.util.SparseArray r3, $r9, $r10, $r16;
        java.lang.Throwable r4, r5, $r17, $r21;
        android.content.Context $r7;
        boolean $z0, $z1;
        com.android.server.backup.BackupManagerService$FullRestoreParams $r8, r40;
        java.lang.StringBuilder $r11, $r12, $r14, $r20, $r22, $r24, $r25, $r28, $r29, $r30, $r31, $r35, $r37, $r38, $r39;
        java.lang.String $r13, $r23, $r27, $r34, $r36;
        android.os.PowerManager $r15;
        java.lang.IllegalStateException $r18;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        $r7 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "fullRestore");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if i0 == 0 goto label01;

        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Restore supported only for the device owner");

        throw $r18;

     label01:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $z0 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean deviceIsProvisioned()>();

        if $z0 != 0 goto label07;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Full restore not permitted before setup");

     label03:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label04:
        goto label06;

     label05:
        $r19 := @caughtexception;

        r2 = $r19;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error trying to close fd after full restore: ");

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r23);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Full restore processing complete.");

        return;

     label07:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Beginning full restore...");

        $r8 = new com.android.server.backup.BackupManagerService$FullRestoreParams;

        specialinvoke $r8.<com.android.server.backup.BackupManagerService$FullRestoreParams: void <init>(com.android.server.backup.BackupManagerService,android.os.ParcelFileDescriptor)>(r0, r1);

        r40 = $r8;

        i2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: int generateToken()>();

        $r10 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        r3 = $r10;

        entermonitor $r10;

     label08:
        $r9 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r40);

        exitmonitor r3;

     label09:
        goto label12;

     label10:
        $r17 := @caughtexception;

        r4 = $r17;

        exitmonitor r3;

     label11:
        throw r4;

     label12:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting restore confirmation UI, token=");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r13);

        $z1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: boolean startConfirmationUi(int,java.lang.String)>(i2, "fullrest");

        if $z1 != 0 goto label17;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to launch full restore confirmation");

        $r16 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        virtualinvoke $r16.<android.util.SparseArray: void delete(int)>(i2);

     label13:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label14:
        goto label16;

     label15:
        $r32 := @caughtexception;

        r41 = $r32;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error trying to close fd after full restore: ");

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r34);

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Full restore processing complete.");

        return;

     label17:
        $r15 = r0.<com.android.server.backup.BackupManagerService: android.os.PowerManager mPowerManager>;

        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r15.<android.os.PowerManager: void userActivity(long,boolean)>($l5, 0);

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void startConfirmationTimeout(int,com.android.server.backup.BackupManagerService$FullParams)>(i2, r40);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Waiting for full restore completion...");

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void waitForCompletion(com.android.server.backup.BackupManagerService$FullParams)>(r40);

     label18:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label19:
        goto label21;

     label20:
        $r26 := @caughtexception;

        r42 = $r26;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error trying to close fd after full restore: ");

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r42);

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r27);

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Full restore processing complete.");

        goto label27;

     label22:
        $r21 := @caughtexception;

        r5 = $r21;

     label23:
        virtualinvoke r1.<android.os.ParcelFileDescriptor: void close()>();

     label24:
        goto label26;

     label25:
        $r33 := @caughtexception;

        r6 = $r33;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error trying to close fd after full restore: ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r36 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r36);

     label26:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Full restore processing complete.");

        throw r5;

     label27:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.lang.Throwable from label02 to label03 with label22;
        catch java.lang.Throwable from label07 to label13 with label22;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.io.IOException from label23 to label24 with label25;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    boolean startConfirmationUi(int, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.String r1;
        android.content.Intent r2, $r3;
        android.content.Context $r7;
        android.content.ActivityNotFoundException $r8;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>(r1);

        r2 = $r3;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.backupconfirm", "com.android.backupconfirm.BackupRestoreConfirmation");

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("conftoken", i0);

        virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r7 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void startActivity(android.content.Intent)>(r2);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        return 0;

     label4:
        return 1;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }

    void startConfirmationTimeout(int, com.android.server.backup.BackupManagerService$FullParams)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        com.android.server.backup.BackupManagerService$FullParams r1;
        android.os.Message r2;
        com.android.server.backup.BackupManagerService$BackupHandler $r3, $r4;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.backup.BackupManagerService$FullParams;

        $r3 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        r2 = virtualinvoke $r3.<com.android.server.backup.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(9, i0, 0, r1);

        $r4 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r4.<com.android.server.backup.BackupManagerService$BackupHandler: boolean sendMessageDelayed(android.os.Message,long)>(r2, 60000L);

        return;
    }

    void waitForCompletion(com.android.server.backup.BackupManagerService$FullParams)
    {
        com.android.server.backup.BackupManagerService r0;
        com.android.server.backup.BackupManagerService$FullParams r1;
        java.util.concurrent.atomic.AtomicBoolean r2, $r5, $r6, $r7;
        java.lang.Throwable r4, $r9;
        boolean $z0;
        java.lang.InterruptedException $r8;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: com.android.server.backup.BackupManagerService$FullParams;

        $r5 = r1.<com.android.server.backup.BackupManagerService$FullParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r1.<com.android.server.backup.BackupManagerService$FullParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        $z0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label5;

     label2:
        $r7 = r1.<com.android.server.backup.BackupManagerService$FullParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        virtualinvoke $r7.<java.lang.Object: void wait()>();

     label3:
        goto label1;

     label4:
        $r8 := @caughtexception;

        goto label1;

     label5:
        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r2;

     label8:
        throw r4;

     label9:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    void signalFullBackupRestoreCompletion(com.android.server.backup.BackupManagerService$FullParams)
    {
        com.android.server.backup.BackupManagerService r0;
        com.android.server.backup.BackupManagerService$FullParams r1;
        java.util.concurrent.atomic.AtomicBoolean r2, $r4, $r5, $r6;
        java.lang.Throwable r3, $r7;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: com.android.server.backup.BackupManagerService$FullParams;

        $r4 = r1.<com.android.server.backup.BackupManagerService$FullParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r1.<com.android.server.backup.BackupManagerService$FullParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r6 = r1.<com.android.server.backup.BackupManagerService$FullParams: java.util.concurrent.atomic.AtomicBoolean latch>;

        virtualinvoke $r6.<java.lang.Object: void notifyAll()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void acknowledgeFullBackupOrRestore(int, boolean, java.lang.String, java.lang.String, android.app.backup.IFullBackupRestoreObserver)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        boolean z0, $z1;
        java.lang.String r1, r2, $r14, $r25;
        android.app.backup.IFullBackupRestoreObserver r3;
        long l1;
        com.android.server.backup.BackupManagerService$FullParams r4;
        android.util.SparseArray r5, $r16, $r17, $r20;
        byte b2, $b7;
        android.os.Message r6;
        java.lang.Throwable r7, r8, $r28, $r29;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r21, $r22, $r24;
        android.content.Context $r15;
        java.lang.Object $r18;
        com.android.server.backup.BackupManagerService$BackupHandler $r19, $r26, $r27;
        android.os.PowerManager$WakeLock $r23;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: android.app.backup.IFullBackupRestoreObserver;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("acknowledgeFullBackupOrRestore : token=");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" allow=");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r14);

        $r15 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r15.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "acknowledgeFullBackupOrRestore");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r17 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        r5 = $r17;

        entermonitor $r17;

     label02:
        $r16 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        $r18 = virtualinvoke $r16.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (com.android.server.backup.BackupManagerService$FullParams) $r18;

        if r4 == null goto label06;

        $r19 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r19.<com.android.server.backup.BackupManagerService$BackupHandler: void removeMessages(int,java.lang.Object)>(9, r4);

        $r20 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mFullConfirmations>;

        virtualinvoke $r20.<android.util.SparseArray: void delete(int)>(i0);

        if z0 == 0 goto label05;

        $z1 = r4 instanceof com.android.server.backup.BackupManagerService$FullBackupParams;

        if $z1 == 0 goto label03;

        $b7 = 2;

        goto label04;

     label03:
        $b7 = 10;

     label04:
        b2 = $b7;

        r4.<com.android.server.backup.BackupManagerService$FullParams: android.app.backup.IFullBackupRestoreObserver observer> = r3;

        r4.<com.android.server.backup.BackupManagerService$FullParams: java.lang.String curPassword> = r1;

        r4.<com.android.server.backup.BackupManagerService$FullParams: java.lang.String encryptPassword> = r2;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending conf message with verb ");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r25);

        $r23 = r0.<com.android.server.backup.BackupManagerService: android.os.PowerManager$WakeLock mWakelock>;

        virtualinvoke $r23.<android.os.PowerManager$WakeLock: void acquire()>();

        $r27 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        r6 = virtualinvoke $r27.<com.android.server.backup.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int,java.lang.Object)>(b2, r4);

        $r26 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r26.<com.android.server.backup.BackupManagerService$BackupHandler: boolean sendMessage(android.os.Message)>(r6);

        goto label07;

     label05:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "User rejected full backup/restore operation");

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void signalFullBackupRestoreCompletion(com.android.server.backup.BackupManagerService$FullParams)>(r4);

        goto label07;

     label06:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Attempted to ack full backup/restore with invalid token");

     label07:
        exitmonitor r5;

     label08:
        goto label11;

     label09:
        $r29 := @caughtexception;

        r7 = $r29;

        exitmonitor r5;

     label10:
        throw r7;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label14;

     label12:
        $r28 := @caughtexception;

        r8 = $r28;

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r8;

     label14:
        return;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void setBackupEnabled(boolean)
    {
        com.android.server.backup.BackupManagerService r0, r1;
        boolean z0, z1, $z3, $z4, $z5;
        long l0, $l3;
        java.lang.Throwable r2, r4, r5, r6, $r25, $r26, $r27, $r28;
        android.util.ArrayMap r3, $r19, $r20;
        android.content.Context $r7, $r14;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11, r32;
        android.content.ContentResolver $r13;
        java.lang.Object $r15, $r24, r29;
        android.app.PendingIntent $r16, $r23;
        android.app.AlarmManager $r17, $r22;
        java.util.HashSet $r18, r30;
        java.util.Set $r21;
        byte $b4;
        java.util.Iterator r31;

        r0 := @this: com.android.server.backup.BackupManagerService;

        z0 := @parameter0: boolean;

        $r7 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "setBackupEnabled");

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Backup enabled => ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        z1 = r0.<com.android.server.backup.BackupManagerService: boolean mEnabled>;

        r1 = r0;

        entermonitor r0;

     label02:
        $r14 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        $r13 = virtualinvoke $r14.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        if z0 == 0 goto label03;

        $b4 = 1;

        goto label04;

     label03:
        $b4 = 0;

     label04:
        staticinvoke <android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r13, "backup_enabled", $b4);

        r0.<com.android.server.backup.BackupManagerService: boolean mEnabled> = z0;

        exitmonitor r1;

     label05:
        goto label08;

     label06:
        $r26 := @caughtexception;

        r2 = $r26;

        exitmonitor r1;

     label07:
        throw r2;

     label08:
        $r15 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mQueueLock>;

        r29 = $r15;

        entermonitor $r15;

     label09:
        if z0 == 0 goto label10;

        if z1 != 0 goto label10;

        $z5 = r0.<com.android.server.backup.BackupManagerService: boolean mProvisioned>;

        if $z5 == 0 goto label10;

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void startBackupAlarmsLocked(long)>(3600000L);

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void scheduleNextFullBackupJob()>();

        goto label18;

     label10:
        if z0 != 0 goto label18;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "Opting out of backup");

        $r17 = r0.<com.android.server.backup.BackupManagerService: android.app.AlarmManager mAlarmManager>;

        $r16 = r0.<com.android.server.backup.BackupManagerService: android.app.PendingIntent mRunBackupIntent>;

        virtualinvoke $r17.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>($r16);

        if z1 == 0 goto label18;

        $z3 = r0.<com.android.server.backup.BackupManagerService: boolean mProvisioned>;

        if $z3 == 0 goto label18;

        $r19 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        r3 = $r19;

        entermonitor $r19;

     label11:
        $r18 = new java.util.HashSet;

        $r20 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        $r21 = virtualinvoke $r20.<android.util.ArrayMap: java.util.Set keySet()>();

        specialinvoke $r18.<java.util.HashSet: void <init>(java.util.Collection)>($r21);

        r30 = $r18;

        exitmonitor r3;

     label12:
        goto label15;

     label13:
        $r25 := @caughtexception;

        r4 = $r25;

        exitmonitor r3;

     label14:
        throw r4;

     label15:
        r31 = virtualinvoke r30.<java.util.HashSet: java.util.Iterator iterator()>();

     label16:
        $z4 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label17;

        $r24 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.lang.String) $r24;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService: void recordInitPendingLocked(boolean,java.lang.String)>(1, r32);

        goto label16;

     label17:
        $r22 = r0.<com.android.server.backup.BackupManagerService: android.app.AlarmManager mAlarmManager>;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r23 = r0.<com.android.server.backup.BackupManagerService: android.app.PendingIntent mRunInitIntent>;

        virtualinvoke $r22.<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>(0, $l3, $r23);

     label18:
        exitmonitor r29;

     label19:
        goto label22;

     label20:
        $r28 := @caughtexception;

        r5 = $r28;

        exitmonitor r29;

     label21:
        throw r5;

     label22:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label25;

     label23:
        $r27 := @caughtexception;

        r6 = $r27;

     label24:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r6;

     label25:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label09 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.Throwable from label01 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
    }

    public void setAutoRestore(boolean)
    {
        com.android.server.backup.BackupManagerService r0, r1;
        boolean z0;
        long l0;
        java.lang.Throwable r2, r3, $r12, $r13;
        android.content.Context $r4, $r11;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        android.content.ContentResolver $r10;
        byte $b2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        z0 := @parameter0: boolean;

        $r4 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "setAutoRestore");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Auto restore => ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", $r8);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0;

        entermonitor r0;

     label02:
        $r11 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke $r11.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        if z0 == 0 goto label03;

        $b2 = 1;

        goto label04;

     label03:
        $b2 = 0;

     label04:
        staticinvoke <android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r10, "backup_auto_restore", $b2);

        r0.<com.android.server.backup.BackupManagerService: boolean mAutoRestore> = z0;

        exitmonitor r1;

     label05:
        goto label08;

     label06:
        $r13 := @caughtexception;

        r2 = $r13;

        exitmonitor r1;

     label07:
        throw r2;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label11;

     label09:
        $r12 := @caughtexception;

        r3 = $r12;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r3;

     label11:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void setBackupProvisioned(boolean)
    {
        com.android.server.backup.BackupManagerService r0;
        boolean z0;
        android.content.Context $r1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "setBackupProvisioned");

        return;
    }

    private void startBackupAlarmsLocked(long)
    {
        com.android.server.backup.BackupManagerService r0;
        long l0, l1, $l2, $l3, $l5, $l7, $l8;
        java.util.Random r1, $r2;
        int $i4, $i6;
        android.app.AlarmManager $r3;
        android.app.PendingIntent $r4;

        r0 := @this: com.android.server.backup.BackupManagerService;

        l0 := @parameter0: long;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>()>();

        r1 = $r2;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = $l2 + l0;

        $i4 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(300000);

        $l5 = (long) $i4;

        l1 = $l3 + $l5;

        $r3 = r0.<com.android.server.backup.BackupManagerService: android.app.AlarmManager mAlarmManager>;

        $i6 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(300000);

        $l7 = (long) $i6;

        $l8 = 3600000L + $l7;

        $r4 = r0.<com.android.server.backup.BackupManagerService: android.app.PendingIntent mRunBackupIntent>;

        virtualinvoke $r3.<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)>(0, l1, $l8, $r4);

        r0.<com.android.server.backup.BackupManagerService: long mNextBackupPass> = l1;

        return;
    }

    public boolean isBackupEnabled()
    {
        com.android.server.backup.BackupManagerService r0;
        android.content.Context $r1;
        boolean $z0;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r1 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "isBackupEnabled");

        $z0 = r0.<com.android.server.backup.BackupManagerService: boolean mEnabled>;

        return $z0;
    }

    public java.lang.String getCurrentTransport()
    {
        com.android.server.backup.BackupManagerService r0;
        android.content.Context $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r1 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getCurrentTransport");

        $r2 = r0.<com.android.server.backup.BackupManagerService: java.lang.String mCurrentTransport>;

        return $r2;
    }

    public java.lang.String[] listAllTransports()
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String[] r1;
        java.util.ArrayList r2, $r6;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        android.content.Context $r5;
        android.util.ArrayMap $r7;
        java.util.Set $r8;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r10, $r11, $r12;

        r0 := @this: com.android.server.backup.BackupManagerService;

        $r5 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "listAllTransports");

        r1 = null;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = $r6;

        $r7 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r11 == null goto label2;

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

     label2:
        goto label1;

     label3:
        $i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label4;

        $i1 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        r1 = newarray (java.lang.String)[$i1];

        virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r1);

     label4:
        return r1;
    }

    public java.lang.String selectBackupTransport(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r3, r4, $r14, $r17;
        android.util.ArrayMap r2, $r8;
        long l0;
        java.lang.Throwable r5, r6, $r18, $r19;
        android.content.Context $r7, $r9;
        android.content.ContentResolver $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r15, $r16;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r7 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "selectBackupTransport");

        $r8 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        r2 = $r8;

        entermonitor $r8;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        r3 = r0.<com.android.server.backup.BackupManagerService: java.lang.String mCurrentTransport>;

        r0.<com.android.server.backup.BackupManagerService: java.lang.String mCurrentTransport> = r1;

        $r9 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>($r10, "backup_transport", r1);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("selectBackupTransport() set ");

        $r14 = r0.<com.android.server.backup.BackupManagerService: java.lang.String mCurrentTransport>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returning ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r17);

        r4 = r3;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r2;

     label4:
        return r4;

     label5:
        $r18 := @caughtexception;

        r5 = $r18;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r5;

     label7:
        $r19 := @caughtexception;

        r6 = $r19;

        exitmonitor r2;

     label8:
        throw r6;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label8 with label7;
    }

    public android.content.Intent getConfigurationIntent(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        android.util.ArrayMap r2, $r7, $r8;
        com.android.internal.backup.IBackupTransport r3;
        android.content.Intent r4;
        java.lang.Throwable r5, $r10;
        android.content.Context $r6;
        java.lang.Object $r9;
        android.os.RemoteException $r11;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getConfigurationIntent");

        $r7 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.internal.backup.IBackupTransport) $r9;

        if r3 == null goto label06;

     label02:
        r4 = interfaceinvoke r3.<com.android.internal.backup.IBackupTransport: android.content.Intent configurationIntent()>();

     label03:
        exitmonitor r2;

     label04:
        return r4;

     label05:
        $r11 := @caughtexception;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r2;

     label09:
        throw r5;

     label10:
        return null;

        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label01 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public java.lang.String getDestinationString(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r4;
        android.util.ArrayMap r2, $r7, $r8;
        com.android.internal.backup.IBackupTransport r3;
        java.lang.Throwable r5, $r11;
        android.content.Context $r6;
        java.lang.Object $r9;
        android.os.RemoteException $r10;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getDestinationString");

        $r7 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.internal.backup.IBackupTransport) $r9;

        if r3 == null goto label06;

     label02:
        r4 = interfaceinvoke r3.<com.android.internal.backup.IBackupTransport: java.lang.String currentDestinationString()>();

     label03:
        exitmonitor r2;

     label04:
        return r4;

     label05:
        $r10 := @caughtexception;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r2;

     label09:
        throw r5;

     label10:
        return null;

        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label01 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public android.content.Intent getDataManagementIntent(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        android.util.ArrayMap r2, $r7, $r8;
        com.android.internal.backup.IBackupTransport r3;
        android.content.Intent r4;
        java.lang.Throwable r5, $r11;
        android.content.Context $r6;
        java.lang.Object $r9;
        android.os.RemoteException $r10;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getDataManagementIntent");

        $r7 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.internal.backup.IBackupTransport) $r9;

        if r3 == null goto label06;

     label02:
        r4 = interfaceinvoke r3.<com.android.internal.backup.IBackupTransport: android.content.Intent dataManagementIntent()>();

     label03:
        exitmonitor r2;

     label04:
        return r4;

     label05:
        $r10 := @caughtexception;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r2;

     label09:
        throw r5;

     label10:
        return null;

        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label01 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public java.lang.String getDataManagementLabel(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r4;
        android.util.ArrayMap r2, $r7, $r8;
        com.android.internal.backup.IBackupTransport r3;
        java.lang.Throwable r5, $r11;
        android.content.Context $r6;
        java.lang.Object $r9;
        android.os.RemoteException $r10;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "getDataManagementLabel");

        $r7 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<com.android.server.backup.BackupManagerService: android.util.ArrayMap mTransports>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.internal.backup.IBackupTransport) $r9;

        if r3 == null goto label06;

     label02:
        r4 = interfaceinvoke r3.<com.android.internal.backup.IBackupTransport: java.lang.String dataManagementLabel()>();

     label03:
        exitmonitor r2;

     label04:
        return r4;

     label05:
        $r10 := @caughtexception;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r2;

     label09:
        throw r5;

     label10:
        return null;

        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label01 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void agentConnected(java.lang.String, android.os.IBinder)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, $r11, $r18;
        android.os.IBinder r2;
        java.lang.Object r3, $r6, $r12;
        android.app.IBackupAgent r4;
        java.lang.Throwable r5, $r19;
        int $i0, $i1;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r17;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.IBinder;

        $r6 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mAgentConnectLock>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("agentConnected pkg=");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" agent=");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", $r18);

        r4 = staticinvoke <android.app.IBackupAgent$Stub: android.app.IBackupAgent asInterface(android.os.IBinder)>(r2);

        r0.<com.android.server.backup.BackupManagerService: android.app.IBackupAgent mConnectedAgent> = r4;

        r0.<com.android.server.backup.BackupManagerService: boolean mConnecting> = 0;

        goto label3;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-system process uid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" claiming agent connected");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r11);

     label3:
        $r12 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mAgentConnectLock>;

        virtualinvoke $r12.<java.lang.Object: void notifyAll()>();

        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r19 := @caughtexception;

        r5 = $r19;

        exitmonitor r3;

     label6:
        throw r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void agentDisconnected(java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, $r9;
        java.lang.Object r2, $r4, $r10;
        java.lang.Throwable r3, $r11;
        int $i0, $i1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mAgentConnectLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label2;

        r0.<com.android.server.backup.BackupManagerService: android.app.IBackupAgent mConnectedAgent> = null;

        r0.<com.android.server.backup.BackupManagerService: boolean mConnecting> = 0;

        goto label3;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-system process uid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" claiming agent disconnected");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r9);

     label3:
        $r10 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mAgentConnectLock>;

        virtualinvoke $r10.<java.lang.Object: void notifyAll()>();

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void restoreAtInstall(java.lang.String, int)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r3, $r9, $r14, $r15, $r16, $r25, $r32;
        int i0, $i2, $i8;
        boolean z0, $z1, $z3;
        long l1;
        com.android.internal.backup.IBackupTransport r2;
        android.content.pm.PackageInfo r4, $r18;
        android.os.Message r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r22, $r24, $r26, $r27, $r28, $r29, $r30;
        byte $b4;
        android.content.pm.IPackageManager $r17;
        com.android.server.backup.BackupManagerService$RestoreParams $r19;
        android.os.PowerManager$WakeLock $r20;
        com.android.server.backup.BackupManagerService$BackupHandler $r21, $r23;
        android.os.RemoteException $r31, $r33;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i2 == 1000 goto label01;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-system process uid=");

        $i8 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attemping install-time restore");

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r32);

        return;

     label01:
        z0 = 0;

        l1 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: long getAvailableRestoreToken(java.lang.String)>(r1);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restoreAtInstall pkg=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token=");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" restoreSet=");

        $r14 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r15);

        $b4 = l1 cmp 0L;

        if $b4 != 0 goto label02;

        z0 = 1;

     label02:
        $r16 = r0.<com.android.server.backup.BackupManagerService: java.lang.String mCurrentTransport>;

        r2 = specialinvoke r0.<com.android.server.backup.BackupManagerService: com.android.internal.backup.IBackupTransport getTransport(java.lang.String)>($r16);

        if r2 != null goto label03;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "No transport");

        z0 = 1;

     label03:
        $z1 = r0.<com.android.server.backup.BackupManagerService: boolean mAutoRestore>;

        if $z1 != 0 goto label04;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-restorable state: auto=");

        $z3 = r0.<com.android.server.backup.BackupManagerService: boolean mAutoRestore>;

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r25);

        z0 = 1;

     label04:
        if z0 != 0 goto label08;

     label05:
        r3 = interfaceinvoke r2.<com.android.internal.backup.IBackupTransport: java.lang.String transportDirName()>();

        $r18 = new android.content.pm.PackageInfo;

        specialinvoke $r18.<android.content.pm.PackageInfo: void <init>()>();

        r4 = $r18;

        r4.<android.content.pm.PackageInfo: java.lang.String packageName> = r1;

        $r20 = r0.<com.android.server.backup.BackupManagerService: android.os.PowerManager$WakeLock mWakelock>;

        virtualinvoke $r20.<android.os.PowerManager$WakeLock: void acquire()>();

        $r21 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        r5 = virtualinvoke $r21.<com.android.server.backup.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int)>(3);

        $r19 = new com.android.server.backup.BackupManagerService$RestoreParams;

        specialinvoke $r19.<com.android.server.backup.BackupManagerService$RestoreParams: void <init>(com.android.server.backup.BackupManagerService,com.android.internal.backup.IBackupTransport,java.lang.String,android.app.backup.IRestoreObserver,long,android.content.pm.PackageInfo,int)>(r0, r2, r3, null, l1, r4, i0);

        r5.<android.os.Message: java.lang.Object obj> = $r19;

        $r23 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r23.<com.android.server.backup.BackupManagerService$BackupHandler: boolean sendMessage(android.os.Message)>(r5);

     label06:
        goto label08;

     label07:
        $r31 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to contact transport");

        z0 = 1;

     label08:
        if z0 == 0 goto label12;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", "Finishing install immediately");

     label09:
        $r17 = r0.<com.android.server.backup.BackupManagerService: android.content.pm.IPackageManager mPackageManagerBinder>;

        interfaceinvoke $r17.<android.content.pm.IPackageManager: void finishPackageInstall(int)>(i0);

     label10:
        goto label12;

     label11:
        $r33 := @caughtexception;

     label12:
        return;

        catch android.os.RemoteException from label05 to label06 with label07;
        catch android.os.RemoteException from label09 to label10 with label11;
    }

    public android.app.backup.IRestoreSession beginRestoreSession(java.lang.String, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0, r31;
        java.lang.String r1, r2, $r9, $r24, $r26;
        boolean z0;
        java.lang.Throwable r3, $r29;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r19, $r20, $r21, $r23, $r25, $r27, $r28;
        com.android.server.backup.BackupManagerService$ActiveRestoreSession $r10, $r13, $r14;
        com.android.server.backup.BackupManagerService$BackupHandler $r12;
        android.content.Context $r15;
        android.content.pm.PackageManager $r16;
        int $i0, $i1;
        android.content.pm.ApplicationInfo $r17;
        android.content.pm.PackageManager$NameNotFoundException $r18;
        java.lang.IllegalArgumentException $r22;
        android.content.pm.PackageInfo r30;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("beginRestoreSession: pkg=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" transport=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", $r9);

        z0 = 1;

        if r2 != null goto label05;

        r2 = r0.<com.android.server.backup.BackupManagerService: java.lang.String mCurrentTransport>;

        if r1 == null goto label05;

     label01:
        $r16 = r0.<com.android.server.backup.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        r30 = virtualinvoke $r16.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r1, 0);

     label02:
        goto label04;

     label03:
        $r18 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asked to restore nonexistent pkg ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r24);

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r22;

     label04:
        $r17 = r30.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r17.<android.content.pm.ApplicationInfo: int uid>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != $i1 goto label05;

        z0 = 0;

     label05:
        if z0 == 0 goto label06;

        $r15 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r15.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BACKUP", "beginRestoreSession");

        goto label07;

     label06:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "restoring self on current transport; no permission needed");

     label07:
        r31 = r0;

        entermonitor r0;

     label08:
        $r10 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$ActiveRestoreSession mActiveRestoreSession>;

        if $r10 == null goto label10;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Restore session requested but one already active");

        exitmonitor r31;

     label09:
        return null;

     label10:
        $r13 = new com.android.server.backup.BackupManagerService$ActiveRestoreSession;

        specialinvoke $r13.<com.android.server.backup.BackupManagerService$ActiveRestoreSession: void <init>(com.android.server.backup.BackupManagerService,java.lang.String,java.lang.String)>(r0, r1, r2);

        r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$ActiveRestoreSession mActiveRestoreSession> = $r13;

        $r12 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r12.<com.android.server.backup.BackupManagerService$BackupHandler: boolean sendEmptyMessageDelayed(int,long)>(8, 60000L);

        exitmonitor r31;

     label11:
        goto label14;

     label12:
        $r29 := @caughtexception;

        r3 = $r29;

        exitmonitor r31;

     label13:
        throw r3;

     label14:
        $r14 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$ActiveRestoreSession mActiveRestoreSession>;

        return $r14;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label03;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    void clearRestoreSession(com.android.server.backup.BackupManagerService$ActiveRestoreSession)
    {
        com.android.server.backup.BackupManagerService r0, r2;
        com.android.server.backup.BackupManagerService$ActiveRestoreSession r1, $r5;
        java.lang.Throwable r3, $r7;
        com.android.server.backup.BackupManagerService$BackupHandler $r6;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: com.android.server.backup.BackupManagerService$ActiveRestoreSession;

        r2 = r0;

        entermonitor r0;

     label1:
        $r5 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$ActiveRestoreSession mActiveRestoreSession>;

        if r1 == $r5 goto label2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "ending non-current restore session");

        goto label3;

     label2:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("BackupManagerService", "Clearing restore session and halting timeout");

        r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$ActiveRestoreSession mActiveRestoreSession> = null;

        $r6 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r6.<com.android.server.backup.BackupManagerService$BackupHandler: void removeMessages(int)>(8);

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void opComplete(int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        java.lang.Object r1, $r3, $r5, $r6;
        java.lang.Throwable r2, $r11;
        android.util.SparseArray $r4;
        com.android.server.backup.BackupManagerService$BackupRestoreTask $r7, $r8;
        com.android.server.backup.BackupManagerService$BackupHandler $r9, $r10;
        com.android.server.backup.BackupManagerService$Operation r12;
        android.os.Message r13;

        r0 := @this: com.android.server.backup.BackupManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r12 = (com.android.server.backup.BackupManagerService$Operation) $r5;

        if r12 == null goto label2;

        r12.<com.android.server.backup.BackupManagerService$Operation: int state> = 1;

     label2:
        $r6 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock>;

        virtualinvoke $r6.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        if r12 == null goto label7;

        $r7 = r12.<com.android.server.backup.BackupManagerService$Operation: com.android.server.backup.BackupManagerService$BackupRestoreTask callback>;

        if $r7 == null goto label7;

        $r9 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        $r8 = r12.<com.android.server.backup.BackupManagerService$Operation: com.android.server.backup.BackupManagerService$BackupRestoreTask callback>;

        r13 = virtualinvoke $r9.<com.android.server.backup.BackupManagerService$BackupHandler: android.os.Message obtainMessage(int,java.lang.Object)>(21, $r8);

        $r10 = r0.<com.android.server.backup.BackupManagerService: com.android.server.backup.BackupManagerService$BackupHandler mBackupHandler>;

        virtualinvoke $r10.<com.android.server.backup.BackupManagerService$BackupHandler: boolean sendMessage(android.os.Message)>(r13);

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.backup.BackupManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3, r4;
        long l0;
        int i1, i2;
        java.lang.String r5, $r8, $r9;
        java.lang.Throwable r6, $r10;
        android.content.Context $r7;
        boolean $z0, $z1;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r7 = r0.<com.android.server.backup.BackupManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "BackupManagerService");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        if r3 == null goto label07;

        r4 = r3;

        i1 = lengthof r4;

        i2 = 0;

     label02:
        if i2 >= i1 goto label07;

        r5 = r4[i2];

        $r8 = "-h";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label04;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("\'dumpsys backup\' optional arguments:");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  -h       : this help text");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  a[gents] : dump information about defined backup agents");

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label04:
        $r9 = "agents";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>(r5);

        if $z1 == 0 goto label06;

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void dumpAgents(java.io.PrintWriter)>(r2);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label06:
        i2 = i2 + 1;

        goto label02;

     label07:
        specialinvoke r0.<com.android.server.backup.BackupManagerService: void dumpInternal(java.io.PrintWriter)>(r2);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label11;

     label09:
        $r10 := @caughtexception;

        r6 = $r10;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r6;

     label11:
        return;

        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void dumpAgents(java.io.PrintWriter)
    {
        com.android.server.backup.BackupManagerService r0;
        java.io.PrintWriter r1;
        java.util.List r2;
        java.util.Iterator r3;
        android.content.pm.PackageInfo r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String $r6, $r8;
        android.content.pm.ApplicationInfo $r7;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        r2 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.util.List allAgentPackages()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Defined backup agents:");

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.PackageInfo) $r5;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        $r6 = r4.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        virtualinvoke r1.<java.io.PrintWriter: void println(char)>(58);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("      ");

        $r7 = r4.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r8 = $r7.<android.content.pm.ApplicationInfo: java.lang.String backupAgentName>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        goto label1;

     label2:
        return;
    }

    private void dumpInternal(java.io.PrintWriter)
    {
        com.android.server.backup.BackupManagerService r0;
        java.io.PrintWriter r1;
        java.lang.Object r2, $r13, $r79, $r80, $r86, $r93, $r95, $r100, $r101, $r112;
        java.lang.String[] r3, r4;
        int i0, i1, i2, i3, $i4, $i8, $i9, $i10, $i11, $i12, i16, i17, i18;
        java.lang.String r5, $r21, $r25, $r34, $r37, $r43, $r56, $r63, $r66, $r72, $r75, $r78, $r82, $r89, $r98, $r104, $r108, $r111, $r116, $r118, $r120, $r124, $r127, $r133, $r135, $r137, $r142, $r144, $r145, $r146, $r147, r151, r154, r157, r159, r161;
        com.android.internal.backup.IBackupTransport r6;
        java.io.File r7, r9, $r109, $r110;
        java.io.File[] r8;
        java.lang.Throwable r10, r11, $r138, $r148;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r17, $r19, $r20, $r22, $r23, $r24, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r35, $r36, $r38, $r39, $r41, $r50, $r51, $r52, $r54, $r55, $r58, $r59, $r60, $r64, $r65, $r67, $r71, $r74, $r76, $r77, $r83, $r84, $r85, $r90, $r91, $r92, $r96, $r97, $r99, $r102, $r103, $r105, $r106, $r107, $r113, $r114, $r115, $r117, $r119, $r121, $r122, $r123, $r125, $r126, $r128, $r129, $r131, $r132, $r134, $r139, $r140, $r141, $r143;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.util.HashSet $r18, $r40, $r42, $r53, $r62, r155;
        long $l5, $l6, $l7, $l13, $l15;
        java.util.List $r44, $r45, $r94, r152;
        java.util.Set $r46, $r47, $r57, $r81;
        java.io.Serializable $r48;
        android.util.SparseArray $r49, $r87, $r88;
        java.util.HashMap $r61, $r69;
        java.util.Collection $r68;
        java.util.ArrayList $r70, $r73;
        android.content.Intent $r130;
        java.lang.Exception $r136, r149;
        java.util.Iterator r150, r153, r156, r158, r160, r162, r164;
        com.android.server.backup.BackupManagerService$BackupRequest r163;
        com.android.server.backup.BackupManagerService$FullBackupEntry r165;

        r0 := @this: com.android.server.backup.BackupManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        $r13 = r0.<com.android.server.backup.BackupManagerService: java.lang.Object mQueueLock>;

        r2 = $r13;

        entermonitor $r13;

     label01:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Backup Manager is ");

        $z0 = r0.<com.android.server.backup.BackupManagerService: boolean mEnabled>;

        if $z0 == 0 goto label02;

        $r135 = "enabled";

        goto label03;

     label02:
        $r135 = "disabled";

     label03:
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r135);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / ");

        $z1 = r0.<com.android.server.backup.BackupManagerService: boolean mProvisioned>;

        if $z1 != 0 goto label04;

        $r145 = "not ";

        goto label05;

     label04:
        $r145 = "";

     label05:
        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r145);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provisioned / ");

        $r18 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mPendingInits>;

        $i4 = virtualinvoke $r18.<java.util.HashSet: int size()>();

        if $i4 != 0 goto label06;

        $r144 = "not ";

        goto label07;

     label06:
        $r144 = "";

     label07:
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r144);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pending init");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r21);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Auto-restore is ");

        $z3 = r0.<com.android.server.backup.BackupManagerService: boolean mAutoRestore>;

        if $z3 == 0 goto label08;

        $r147 = "enabled";

        goto label09;

     label08:
        $r147 = "disabled";

     label09:
        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r147);

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r25);

        $z2 = r0.<com.android.server.backup.BackupManagerService: boolean mBackupRunning>;

        if $z2 == 0 goto label10;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Backup currently running");

     label10:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Last backup pass started: ");

        $l5 = r0.<com.android.server.backup.BackupManagerService: long mLastBackupPass>;

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (now = ");

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r34);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  next scheduled: ");

        $l7 = r0.<com.android.server.backup.BackupManagerService: long mNextBackupPass>;

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r37);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Available transports:");

        r3 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String[] listAllTransports()>();

        if r3 == null goto label19;

        r4 = virtualinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String[] listAllTransports()>();

        i0 = lengthof r4;

        i1 = 0;

     label11:
        if i1 >= i0 goto label19;

        r5 = r4[i1];

        $r117 = new java.lang.StringBuilder;

        specialinvoke $r117.<java.lang.StringBuilder: void <init>()>();

        $r118 = r0.<com.android.server.backup.BackupManagerService: java.lang.String mCurrentTransport>;

        $z12 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r118);

        if $z12 == 0 goto label12;

        $r146 = "  * ";

        goto label13;

     label12:
        $r146 = "    ";

     label13:
        $r106 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r146);

        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r108);

     label14:
        r6 = specialinvoke r0.<com.android.server.backup.BackupManagerService: com.android.internal.backup.IBackupTransport getTransport(java.lang.String)>(r5);

        $r109 = new java.io.File;

        $r110 = r0.<com.android.server.backup.BackupManagerService: java.io.File mBaseStateDir>;

        $r111 = interfaceinvoke r6.<com.android.internal.backup.IBackupTransport: java.lang.String transportDirName()>();

        specialinvoke $r109.<java.io.File: void <init>(java.io.File,java.lang.String)>($r110, $r111);

        r7 = $r109;

        $r129 = new java.lang.StringBuilder;

        specialinvoke $r129.<java.lang.StringBuilder: void <init>()>();

        $r128 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("       destination: ");

        $r127 = interfaceinvoke r6.<com.android.internal.backup.IBackupTransport: java.lang.String currentDestinationString()>();

        $r126 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r127);

        $r133 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r133);

        $r132 = new java.lang.StringBuilder;

        specialinvoke $r132.<java.lang.StringBuilder: void <init>()>();

        $r131 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("       intent: ");

        $r130 = interfaceinvoke r6.<com.android.internal.backup.IBackupTransport: android.content.Intent configurationIntent()>();

        $r121 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r130);

        $r120 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r120);

        r8 = virtualinvoke r7.<java.io.File: java.io.File[] listFiles()>();

        i2 = lengthof r8;

        i3 = 0;

     label15:
        if i3 >= i2 goto label16;

        r9 = r8[i3];

        $r119 = new java.lang.StringBuilder;

        specialinvoke $r119.<java.lang.StringBuilder: void <init>()>();

        $r125 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("       ");

        $r124 = virtualinvoke r9.<java.io.File: java.lang.String getName()>();

        $r123 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r124);

        $r122 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $l15 = virtualinvoke r9.<java.io.File: long length()>();

        $r143 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l15);

        $r141 = virtualinvoke $r143.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" state bytes");

        $r142 = virtualinvoke $r141.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r142);

        i3 = i3 + 1;

        goto label15;

     label16:
        goto label18;

     label17:
        $r136 := @caughtexception;

        r149 = $r136;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Error in transport", r149);

        $r134 = new java.lang.StringBuilder;

        specialinvoke $r134.<java.lang.StringBuilder: void <init>()>();

        $r139 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("        Error: ");

        $r140 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r149);

        $r137 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r137);

     label18:
        i1 = i1 + 1;

        goto label11;

     label19:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pending init: ");

        $r40 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mPendingInits>;

        $i8 = virtualinvoke $r40.<java.util.HashSet: int size()>();

        $r39 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r43 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r43);

        $r42 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mPendingInits>;

        r150 = virtualinvoke $r42.<java.util.HashSet: java.util.Iterator iterator()>();

     label20:
        $z4 = interfaceinvoke r150.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label21;

        $r112 = interfaceinvoke r150.<java.util.Iterator: java.lang.Object next()>();

        r151 = (java.lang.String) $r112;

        $r113 = new java.lang.StringBuilder;

        specialinvoke $r113.<java.lang.StringBuilder: void <init>()>();

        $r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r151);

        $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r116);

        goto label20;

     label21:
        $r45 = r0.<com.android.server.backup.BackupManagerService: java.util.List mBackupTrace>;

        r152 = $r45;

        entermonitor $r45;

     label22:
        $r44 = r0.<com.android.server.backup.BackupManagerService: java.util.List mBackupTrace>;

        $z5 = interfaceinvoke $r44.<java.util.List: boolean isEmpty()>();

        if $z5 != 0 goto label24;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Most recent backup trace:");

        $r94 = r0.<com.android.server.backup.BackupManagerService: java.util.List mBackupTrace>;

        r153 = interfaceinvoke $r94.<java.util.List: java.util.Iterator iterator()>();

     label23:
        $z10 = interfaceinvoke r153.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label24;

        $r95 = interfaceinvoke r153.<java.util.Iterator: java.lang.Object next()>();

        r154 = (java.lang.String) $r95;

        $r97 = new java.lang.StringBuilder;

        specialinvoke $r97.<java.lang.StringBuilder: void <init>()>();

        $r96 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ");

        $r99 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r154);

        $r98 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r98);

        goto label23;

     label24:
        exitmonitor r152;

     label25:
        goto label28;

     label26:
        $r148 := @caughtexception;

        r10 = $r148;

        exitmonitor r152;

     label27:
        throw r10;

     label28:
        $r49 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        i16 = virtualinvoke $r49.<android.util.SparseArray: int size()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Participants:");

        i17 = 0;

     label29:
        if i17 >= i16 goto label32;

        $r88 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        i18 = virtualinvoke $r88.<android.util.SparseArray: int keyAt(int)>(i17);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  uid: ");

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>(i18);

        $r87 = r0.<com.android.server.backup.BackupManagerService: android.util.SparseArray mBackupParticipants>;

        $r100 = virtualinvoke $r87.<android.util.SparseArray: java.lang.Object valueAt(int)>(i17);

        r155 = (java.util.HashSet) $r100;

        r156 = virtualinvoke r155.<java.util.HashSet: java.util.Iterator iterator()>();

     label30:
        $z11 = interfaceinvoke r156.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label31;

        $r101 = interfaceinvoke r156.<java.util.Iterator: java.lang.Object next()>();

        r157 = (java.lang.String) $r101;

        $r103 = new java.lang.StringBuilder;

        specialinvoke $r103.<java.lang.StringBuilder: void <init>()>();

        $r102 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r105 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r157);

        $r104 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r104);

        goto label30;

     label31:
        i17 = i17 + 1;

        goto label29;

     label32:
        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ancestral packages: ");

        $r46 = r0.<com.android.server.backup.BackupManagerService: java.util.Set mAncestralPackages>;

        if $r46 != null goto label33;

        $r48 = "none";

        goto label34;

     label33:
        $r47 = r0.<com.android.server.backup.BackupManagerService: java.util.Set mAncestralPackages>;

        $i9 = interfaceinvoke $r47.<java.util.Set: int size()>();

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

     label34:
        $r55 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r48);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r56);

        $r57 = r0.<com.android.server.backup.BackupManagerService: java.util.Set mAncestralPackages>;

        if $r57 == null goto label36;

        $r81 = r0.<com.android.server.backup.BackupManagerService: java.util.Set mAncestralPackages>;

        r158 = interfaceinvoke $r81.<java.util.Set: java.util.Iterator iterator()>();

     label35:
        $z9 = interfaceinvoke r158.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label36;

        $r93 = interfaceinvoke r158.<java.util.Iterator: java.lang.Object next()>();

        r159 = (java.lang.String) $r93;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r91 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r90 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r159);

        $r89 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r89);

        goto label35;

     label36:
        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ever backed up: ");

        $r53 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mEverStoredApps>;

        $i10 = virtualinvoke $r53.<java.util.HashSet: int size()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r63 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r63);

        $r62 = r0.<com.android.server.backup.BackupManagerService: java.util.HashSet mEverStoredApps>;

        r160 = virtualinvoke $r62.<java.util.HashSet: java.util.Iterator iterator()>();

     label37:
        $z6 = interfaceinvoke r160.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label38;

        $r86 = interfaceinvoke r160.<java.util.Iterator: java.lang.Object next()>();

        r161 = (java.lang.String) $r86;

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r83 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r161);

        $r82 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r82);

        goto label37;

     label38:
        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pending key/value backup: ");

        $r61 = r0.<com.android.server.backup.BackupManagerService: java.util.HashMap mPendingBackups>;

        $i11 = virtualinvoke $r61.<java.util.HashMap: int size()>();

        $r67 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r66 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r66);

        $r69 = r0.<com.android.server.backup.BackupManagerService: java.util.HashMap mPendingBackups>;

        $r68 = virtualinvoke $r69.<java.util.HashMap: java.util.Collection values()>();

        r162 = interfaceinvoke $r68.<java.util.Collection: java.util.Iterator iterator()>();

     label39:
        $z7 = interfaceinvoke r162.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label40;

        $r79 = interfaceinvoke r162.<java.util.Iterator: java.lang.Object next()>();

        r163 = (com.android.server.backup.BackupManagerService$BackupRequest) $r79;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r74 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r163);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r75);

        goto label39;

     label40:
        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Full backup queue:");

        $r73 = r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue>;

        $i12 = virtualinvoke $r73.<java.util.ArrayList: int size()>();

        $r71 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r72);

        $r70 = r0.<com.android.server.backup.BackupManagerService: java.util.ArrayList mFullBackupQueue>;

        r164 = virtualinvoke $r70.<java.util.ArrayList: java.util.Iterator iterator()>();

     label41:
        $z8 = interfaceinvoke r164.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label42;

        $r80 = interfaceinvoke r164.<java.util.Iterator: java.lang.Object next()>();

        r165 = (com.android.server.backup.BackupManagerService$FullBackupEntry) $r80;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $l13 = r165.<com.android.server.backup.BackupManagerService$FullBackupEntry: long lastBackup>;

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>($l13);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" : ");

        $r78 = r165.<com.android.server.backup.BackupManagerService$FullBackupEntry: java.lang.String packageName>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r78);

        goto label41;

     label42:
        exitmonitor r2;

     label43:
        goto label46;

     label44:
        $r138 := @caughtexception;

        r11 = $r138;

        exitmonitor r2;

     label45:
        throw r11;

     label46:
        return;

        catch java.lang.Exception from label14 to label16 with label17;
        catch java.lang.Throwable from label22 to label25 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
        catch java.lang.Throwable from label01 to label43 with label44;
        catch java.lang.Throwable from label44 to label45 with label44;
    }

    static void access$000(com.android.server.backup.BackupManagerService, long)
    {
        com.android.server.backup.BackupManagerService r0;
        long l0;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        l0 := @parameter1: long;

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void startBackupAlarmsLocked(long)>(l0);

        return;
    }

    static com.android.internal.backup.IBackupTransport access$100(com.android.server.backup.BackupManagerService, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        com.android.internal.backup.IBackupTransport $r2;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.backup.BackupManagerService: com.android.internal.backup.IBackupTransport getTransport(java.lang.String)>(r1);

        return $r2;
    }

    static android.app.AlarmManager access$200(com.android.server.backup.BackupManagerService)
    {
        com.android.server.backup.BackupManagerService r0;
        android.app.AlarmManager $r1;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        $r1 = r0.<com.android.server.backup.BackupManagerService: android.app.AlarmManager mAlarmManager>;

        return $r1;
    }

    static android.content.pm.PackageManager access$500(com.android.server.backup.BackupManagerService)
    {
        com.android.server.backup.BackupManagerService r0;
        android.content.pm.PackageManager $r1;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        $r1 = r0.<com.android.server.backup.BackupManagerService: android.content.pm.PackageManager mPackageManager>;

        return $r1;
    }

    static void access$600(com.android.server.backup.BackupManagerService, java.lang.String, java.lang.String, com.android.internal.backup.IBackupTransport)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r2;
        com.android.internal.backup.IBackupTransport r3;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: com.android.internal.backup.IBackupTransport;

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void registerTransport(java.lang.String,java.lang.String,com.android.internal.backup.IBackupTransport)>(r1, r2, r3);

        return;
    }

    static void access$700(com.android.server.backup.BackupManagerService, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void dataChangedImpl(java.lang.String)>(r1);

        return;
    }

    static android.app.IActivityManager access$800(com.android.server.backup.BackupManagerService)
    {
        com.android.server.backup.BackupManagerService r0;
        android.app.IActivityManager $r1;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        $r1 = r0.<com.android.server.backup.BackupManagerService: android.app.IActivityManager mActivityManager>;

        return $r1;
    }

    static void access$900(com.android.server.backup.BackupManagerService, android.os.ParcelFileDescriptor, java.io.OutputStream) throws java.io.IOException
    {
        com.android.server.backup.BackupManagerService r0;
        android.os.ParcelFileDescriptor r1;
        java.io.OutputStream r2;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        r1 := @parameter1: android.os.ParcelFileDescriptor;

        r2 := @parameter2: java.io.OutputStream;

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void routeSocketDataToOutput(android.os.ParcelFileDescriptor,java.io.OutputStream)>(r1, r2);

        return;
    }

    static byte[] access$1300(com.android.server.backup.BackupManagerService, int)
    {
        com.android.server.backup.BackupManagerService r0;
        int i0;
        byte[] $r1;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.backup.BackupManagerService: byte[] randomBytes(int)>(i0);

        return $r1;
    }

    static javax.crypto.SecretKey access$1400(com.android.server.backup.BackupManagerService, java.lang.String, java.lang.String, byte[], int)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1, r2;
        byte[] r3;
        int i0;
        javax.crypto.SecretKey $r4;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: byte[];

        i0 := @parameter4: int;

        $r4 = specialinvoke r0.<com.android.server.backup.BackupManagerService: javax.crypto.SecretKey buildPasswordKey(java.lang.String,java.lang.String,byte[],int)>(r1, r2, r3, i0);

        return $r4;
    }

    static java.security.SecureRandom access$1500(com.android.server.backup.BackupManagerService)
    {
        com.android.server.backup.BackupManagerService r0;
        java.security.SecureRandom $r1;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        $r1 = r0.<com.android.server.backup.BackupManagerService: java.security.SecureRandom mRng>;

        return $r1;
    }

    static java.lang.String access$1600(com.android.server.backup.BackupManagerService, byte[])
    {
        com.android.server.backup.BackupManagerService r0;
        byte[] r1;
        java.lang.String $r2;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        r1 := @parameter1: byte[];

        $r2 = specialinvoke r0.<com.android.server.backup.BackupManagerService: java.lang.String byteArrayToHex(byte[])>(r1);

        return $r2;
    }

    static byte[] access$1700(com.android.server.backup.BackupManagerService, java.lang.String, byte[], byte[], int)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        byte[] r2, r3, $r4;
        int i0;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        i0 := @parameter4: int;

        $r4 = specialinvoke r0.<com.android.server.backup.BackupManagerService: byte[] makeKeyChecksum(java.lang.String,byte[],byte[],int)>(r1, r2, r3, i0);

        return $r4;
    }

    static boolean access$1800(com.android.server.backup.BackupManagerService, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.backup.BackupManagerService: boolean backupPasswordMatches(java.lang.String)>(r1);

        return $z0;
    }

    static byte[] access$1900(com.android.server.backup.BackupManagerService, java.lang.String)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        byte[] $r2;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.backup.BackupManagerService: byte[] hexToByteArray(java.lang.String)>(r1);

        return $r2;
    }

    static void access$2200(com.android.server.backup.BackupManagerService, java.lang.String, java.util.HashSet)
    {
        com.android.server.backup.BackupManagerService r0;
        java.lang.String r1;
        java.util.HashSet r2;

        r0 := @parameter0: com.android.server.backup.BackupManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.HashSet;

        specialinvoke r0.<com.android.server.backup.BackupManagerService: void dataChangedImpl(java.lang.String,java.util.HashSet)>(r1, r2);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.backup.BackupManagerService: int SCHEDULE_FILE_VERSION> = 1;

        <com.android.server.backup.BackupManagerService: java.lang.String INIT_SENTINEL_FILE_NAME> = "_need_init_";

        <com.android.server.backup.BackupManagerService: int CURRENT_ANCESTRAL_RECORD_VERSION> = 1;

        <com.android.server.backup.BackupManagerService: java.lang.String ENCRYPTION_ALGORITHM_NAME> = "AES-256";

        <com.android.server.backup.BackupManagerService: int PBKDF2_SALT_SIZE> = 512;

        <com.android.server.backup.BackupManagerService: int PBKDF2_KEY_SIZE> = 256;

        <com.android.server.backup.BackupManagerService: int PBKDF2_HASH_ROUNDS> = 10000;

        <com.android.server.backup.BackupManagerService: int OP_TIMEOUT> = -1;

        <com.android.server.backup.BackupManagerService: int OP_ACKNOWLEDGED> = 1;

        <com.android.server.backup.BackupManagerService: int OP_PENDING> = 0;

        <com.android.server.backup.BackupManagerService: boolean DEBUG_BACKUP_TRACE> = 1;

        <com.android.server.backup.BackupManagerService: java.lang.String PACKAGE_MANAGER_SENTINEL> = "@pm@";

        <com.android.server.backup.BackupManagerService: long MIN_FULL_BACKUP_INTERVAL> = 86400000L;

        <com.android.server.backup.BackupManagerService: long TIMEOUT_FULL_CONFIRMATION> = 60000L;

        <com.android.server.backup.BackupManagerService: long TIMEOUT_RESTORE_FINISHED_INTERVAL> = 30000L;

        <com.android.server.backup.BackupManagerService: long TIMEOUT_RESTORE_INTERVAL> = 60000L;

        <com.android.server.backup.BackupManagerService: long TIMEOUT_SHARED_BACKUP_INTERVAL> = 1800000L;

        <com.android.server.backup.BackupManagerService: long TIMEOUT_FULL_BACKUP_INTERVAL> = 300000L;

        <com.android.server.backup.BackupManagerService: long TIMEOUT_BACKUP_INTERVAL> = 30000L;

        <com.android.server.backup.BackupManagerService: long TIMEOUT_INTERVAL> = 10000L;

        <com.android.server.backup.BackupManagerService: int MSG_OP_COMPLETE> = 21;

        <com.android.server.backup.BackupManagerService: int MSG_BACKUP_RESTORE_STEP> = 20;

        <com.android.server.backup.BackupManagerService: int MSG_RUN_FULL_TRANSPORT_BACKUP> = 14;

        <com.android.server.backup.BackupManagerService: int MSG_WIDGET_BROADCAST> = 13;

        <com.android.server.backup.BackupManagerService: int MSG_RETRY_CLEAR> = 12;

        <com.android.server.backup.BackupManagerService: int MSG_RETRY_INIT> = 11;

        <com.android.server.backup.BackupManagerService: int MSG_RUN_ADB_RESTORE> = 10;

        <com.android.server.backup.BackupManagerService: int MSG_FULL_CONFIRMATION_TIMEOUT> = 9;

        <com.android.server.backup.BackupManagerService: int MSG_RESTORE_TIMEOUT> = 8;

        <com.android.server.backup.BackupManagerService: int MSG_TIMEOUT> = 7;

        <com.android.server.backup.BackupManagerService: int MSG_RUN_GET_RESTORE_SETS> = 6;

        <com.android.server.backup.BackupManagerService: int MSG_RUN_INITIALIZE> = 5;

        <com.android.server.backup.BackupManagerService: int MSG_RUN_CLEAR> = 4;

        <com.android.server.backup.BackupManagerService: int MSG_RUN_RESTORE> = 3;

        <com.android.server.backup.BackupManagerService: int MSG_RUN_ADB_BACKUP> = 2;

        <com.android.server.backup.BackupManagerService: int MSG_RUN_BACKUP> = 1;

        <com.android.server.backup.BackupManagerService: java.lang.String RUN_CLEAR_ACTION> = "android.app.backup.intent.CLEAR";

        <com.android.server.backup.BackupManagerService: java.lang.String RUN_INITIALIZE_ACTION> = "android.app.backup.intent.INIT";

        <com.android.server.backup.BackupManagerService: java.lang.String RUN_BACKUP_ACTION> = "android.app.backup.intent.RUN";

        <com.android.server.backup.BackupManagerService: long TRANSPORT_RETRY_INTERVAL> = 3600000L;

        <com.android.server.backup.BackupManagerService: long FIRST_BACKUP_INTERVAL> = 43200000L;

        <com.android.server.backup.BackupManagerService: int FUZZ_MILLIS> = 300000;

        <com.android.server.backup.BackupManagerService: long BACKUP_INTERVAL> = 3600000L;

        <com.android.server.backup.BackupManagerService: java.lang.String SERVICE_ACTION_TRANSPORT_HOST> = "android.backup.TRANSPORT_HOST";

        <com.android.server.backup.BackupManagerService: java.lang.String SHARED_BACKUP_AGENT_PACKAGE> = "com.android.sharedstoragebackup";

        <com.android.server.backup.BackupManagerService: java.lang.String SETTINGS_PACKAGE> = "com.android.providers.settings";

        <com.android.server.backup.BackupManagerService: boolean COMPRESS_FULL_BACKUPS> = 1;

        <com.android.server.backup.BackupManagerService: int BACKUP_WIDGET_METADATA_TOKEN> = 33549569;

        <com.android.server.backup.BackupManagerService: int BACKUP_METADATA_VERSION> = 1;

        <com.android.server.backup.BackupManagerService: java.lang.String BACKUP_METADATA_FILENAME> = "_meta";

        <com.android.server.backup.BackupManagerService: int BACKUP_PW_FILE_VERSION> = 2;

        <com.android.server.backup.BackupManagerService: java.lang.String BACKUP_FILE_HEADER_MAGIC> = "ANDROID BACKUP\n";

        <com.android.server.backup.BackupManagerService: int BACKUP_FILE_VERSION> = 3;

        <com.android.server.backup.BackupManagerService: int BACKUP_MANIFEST_VERSION> = 1;

        <com.android.server.backup.BackupManagerService: java.lang.String BACKUP_MANIFEST_FILENAME> = "_manifest";

        <com.android.server.backup.BackupManagerService: java.lang.String PBKDF_FALLBACK> = "PBKDF2WithHmacSHA1And8bit";

        <com.android.server.backup.BackupManagerService: java.lang.String PBKDF_CURRENT> = "PBKDF2WithHmacSHA1";

        <com.android.server.backup.BackupManagerService: java.lang.String KEY_WIDGET_STATE> = "\uffed\uffedwidget";

        <com.android.server.backup.BackupManagerService: boolean DEBUG_SCHEDULING> = 1;

        <com.android.server.backup.BackupManagerService: boolean MORE_DEBUG> = 0;

        <com.android.server.backup.BackupManagerService: boolean DEBUG> = 1;

        <com.android.server.backup.BackupManagerService: java.lang.String TAG> = "BackupManagerService";

        return;
    }
}
