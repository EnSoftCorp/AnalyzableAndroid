final class com.android.server.display.DisplayPowerController extends java.lang.Object implements com.android.server.display.AutomaticBrightnessController$Callbacks
{
    private static final java.lang.String TAG;
    private static boolean DEBUG;
    private static final boolean DEBUG_PRETEND_PROXIMITY_SENSOR_ABSENT;
    private static final java.lang.String SCREEN_ON_BLOCKED_TRACE_NAME;
    private static final boolean USE_COLOR_FADE_ON_ANIMATION;
    private static final int SCREEN_DIM_MINIMUM_REDUCTION;
    private static final int COLOR_FADE_ON_ANIMATION_DURATION_MILLIS;
    private static final int COLOR_FADE_OFF_ANIMATION_DURATION_MILLIS;
    private static final int MSG_UPDATE_POWER_STATE;
    private static final int MSG_PROXIMITY_SENSOR_DEBOUNCED;
    private static final int MSG_SCREEN_ON_UNBLOCKED;
    private static final int PROXIMITY_UNKNOWN;
    private static final int PROXIMITY_NEGATIVE;
    private static final int PROXIMITY_POSITIVE;
    private static final int PROXIMITY_SENSOR_POSITIVE_DEBOUNCE_DELAY;
    private static final int PROXIMITY_SENSOR_NEGATIVE_DEBOUNCE_DELAY;
    private static final float TYPICAL_PROXIMITY_THRESHOLD;
    private static final int BRIGHTNESS_RAMP_RATE_FAST;
    private static final int BRIGHTNESS_RAMP_RATE_SLOW;
    private final java.lang.Object mLock;
    private final android.content.Context mContext;
    private final com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler;
    private final android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks;
    private final com.android.internal.app.IBatteryStats mBatteryStats;
    private final com.android.server.lights.LightsManager mLights;
    private final android.hardware.SensorManager mSensorManager;
    private final android.view.WindowManagerPolicy mWindowManagerPolicy;
    private final com.android.server.display.DisplayBlanker mBlanker;
    private android.hardware.Sensor mProximitySensor;
    private final int mScreenBrightnessDozeConfig;
    private final int mScreenBrightnessDimConfig;
    private final int mScreenBrightnessDarkConfig;
    private final int mScreenBrightnessRangeMinimum;
    private final int mScreenBrightnessRangeMaximum;
    private boolean mUseSoftwareAutoBrightnessConfig;
    private boolean mColorFadeFadesConfig;
    private android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked;
    private boolean mPendingWaitForNegativeProximityLocked;
    private boolean mPendingRequestChangedLocked;
    private boolean mDisplayReadyLocked;
    private boolean mPendingUpdatePowerStateLocked;
    private android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest;
    private com.android.server.display.DisplayPowerState mPowerState;
    private boolean mWaitingForNegativeProximity;
    private float mProximityThreshold;
    private boolean mProximitySensorEnabled;
    private int mProximity;
    private int mPendingProximity;
    private long mPendingProximityDebounceTime;
    private boolean mScreenOffBecauseOfProximity;
    private com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker;
    private boolean mPendingScreenOff;
    private boolean mUnfinishedBusiness;
    private long mScreenOnBlockStartRealTime;
    private boolean mAppliedAutoBrightness;
    private boolean mAppliedDimming;
    private boolean mAppliedLowPower;
    private com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController;
    private android.animation.ObjectAnimator mColorFadeOnAnimator;
    private android.animation.ObjectAnimator mColorFadeOffAnimator;
    private com.android.server.display.RampAnimator mScreenBrightnessRampAnimator;
    private final android.animation.Animator$AnimatorListener mAnimatorListener;
    private final com.android.server.display.RampAnimator$Listener mRampAnimatorListener;
    private final java.lang.Runnable mCleanListener;
    private final java.lang.Runnable mOnStateChangedRunnable;
    private final java.lang.Runnable mOnProximityPositiveRunnable;
    private final java.lang.Runnable mOnProximityNegativeRunnable;
    private final android.hardware.SensorEventListener mProximitySensorListener;
    static final boolean $assertionsDisabled;

    public void <init>(android.content.Context, android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks, android.os.Handler, android.hardware.SensorManager, com.android.server.display.DisplayBlanker)
    {
        com.android.server.display.DisplayPowerController r0;
        android.content.Context r1;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks r2;
        android.os.Handler r3;
        android.hardware.SensorManager r4, $r27;
        com.android.server.display.DisplayBlanker r5;
        android.content.res.Resources r6;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i28, $i29;
        int[] r7, r8;
        android.util.Spline r9;
        java.lang.Object $r10, $r20, $r22;
        com.android.server.display.DisplayPowerController$1 $r11;
        com.android.server.display.DisplayPowerController$3 $r12;
        com.android.server.display.DisplayPowerController$2 $r13;
        com.android.server.display.DisplayPowerController$5 $r14;
        com.android.server.display.DisplayPowerController$4 $r15;
        com.android.server.display.DisplayPowerController$8 $r16;
        com.android.server.display.DisplayPowerController$6 $r17;
        android.os.Looper $r18, $r29;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r19;
        com.android.internal.app.IBatteryStats $r21;
        com.android.server.lights.LightsManager $r23;
        android.view.WindowManagerPolicy $r24;
        boolean $z0, $z1, $z2;
        android.hardware.Sensor $r25, $r26, $r28;
        float $f0, $f1;
        com.android.server.display.AutomaticBrightnessController $r30;
        java.lang.StringBuilder $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r51, $r52, $r53, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64;
        java.lang.String $r40, $r50, $r54, $r65;

        r0 := @this: com.android.server.display.DisplayPowerController;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks;

        r3 := @parameter2: android.os.Handler;

        r4 := @parameter3: android.hardware.SensorManager;

        r5 := @parameter4: com.android.server.display.DisplayBlanker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r10 = new java.lang.Object;

        specialinvoke $r10.<java.lang.Object: void <init>()>();

        r0.<com.android.server.display.DisplayPowerController: java.lang.Object mLock> = $r10;

        r0.<com.android.server.display.DisplayPowerController: int mProximity> = -1;

        r0.<com.android.server.display.DisplayPowerController: int mPendingProximity> = -1;

        r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime> = -1L;

        $r11 = new com.android.server.display.DisplayPowerController$1;

        specialinvoke $r11.<com.android.server.display.DisplayPowerController$1: void <init>(com.android.server.display.DisplayPowerController)>(r0);

        r0.<com.android.server.display.DisplayPowerController: android.animation.Animator$AnimatorListener mAnimatorListener> = $r11;

        $r13 = new com.android.server.display.DisplayPowerController$2;

        specialinvoke $r13.<com.android.server.display.DisplayPowerController$2: void <init>(com.android.server.display.DisplayPowerController)>(r0);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator$Listener mRampAnimatorListener> = $r13;

        $r12 = new com.android.server.display.DisplayPowerController$3;

        specialinvoke $r12.<com.android.server.display.DisplayPowerController$3: void <init>(com.android.server.display.DisplayPowerController)>(r0);

        r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mCleanListener> = $r12;

        $r15 = new com.android.server.display.DisplayPowerController$4;

        specialinvoke $r15.<com.android.server.display.DisplayPowerController$4: void <init>(com.android.server.display.DisplayPowerController)>(r0);

        r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mOnStateChangedRunnable> = $r15;

        $r14 = new com.android.server.display.DisplayPowerController$5;

        specialinvoke $r14.<com.android.server.display.DisplayPowerController$5: void <init>(com.android.server.display.DisplayPowerController)>(r0);

        r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mOnProximityPositiveRunnable> = $r14;

        $r17 = new com.android.server.display.DisplayPowerController$6;

        specialinvoke $r17.<com.android.server.display.DisplayPowerController$6: void <init>(com.android.server.display.DisplayPowerController)>(r0);

        r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mOnProximityNegativeRunnable> = $r17;

        $r16 = new com.android.server.display.DisplayPowerController$8;

        specialinvoke $r16.<com.android.server.display.DisplayPowerController$8: void <init>(com.android.server.display.DisplayPowerController)>(r0);

        r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorEventListener mProximitySensorListener> = $r16;

        $r19 = new com.android.server.display.DisplayPowerController$DisplayControllerHandler;

        $r18 = virtualinvoke r3.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r19.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: void <init>(com.android.server.display.DisplayPowerController,android.os.Looper)>(r0, $r18);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler> = $r19;

        r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks> = r2;

        $r21 = staticinvoke <com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>();

        r0.<com.android.server.display.DisplayPowerController: com.android.internal.app.IBatteryStats mBatteryStats> = $r21;

        $r20 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "com/android/server/lights/LightsManager");

        $r23 = (com.android.server.lights.LightsManager) $r20;

        r0.<com.android.server.display.DisplayPowerController: com.android.server.lights.LightsManager mLights> = $r23;

        r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorManager mSensorManager> = r4;

        $r22 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "android/view/WindowManagerPolicy");

        $r24 = (android.view.WindowManagerPolicy) $r22;

        r0.<com.android.server.display.DisplayPowerController: android.view.WindowManagerPolicy mWindowManagerPolicy> = $r24;

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayBlanker mBlanker> = r5;

        r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext> = r1;

        r6 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i4 = virtualinvoke r6.<android.content.res.Resources: int getInteger(int)>(17694795);

        i0 = staticinvoke <com.android.server.display.DisplayPowerController: int clampAbsoluteBrightness(int)>($i4);

        $i7 = virtualinvoke r6.<android.content.res.Resources: int getInteger(int)>(17694798);

        $i8 = staticinvoke <com.android.server.display.DisplayPowerController: int clampAbsoluteBrightness(int)>($i7);

        r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDozeConfig> = $i8;

        $i5 = virtualinvoke r6.<android.content.res.Resources: int getInteger(int)>(17694799);

        $i6 = staticinvoke <com.android.server.display.DisplayPowerController: int clampAbsoluteBrightness(int)>($i5);

        r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDimConfig> = $i6;

        $i11 = virtualinvoke r6.<android.content.res.Resources: int getInteger(int)>(17694800);

        $i12 = staticinvoke <com.android.server.display.DisplayPowerController: int clampAbsoluteBrightness(int)>($i11);

        r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDarkConfig> = $i12;

        $i10 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDarkConfig>;

        $i9 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDimConfig>;

        if $i10 <= $i9 goto label1;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected config_screenBrightnessDark (");

        $i29 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDarkConfig>;

        $r62 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i29);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to be less than or equal to ");

        $r61 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("config_screenBrightnessDim (");

        $i28 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDimConfig>;

        $r59 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r65 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayPowerController", $r65);

     label1:
        $i16 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDarkConfig>;

        $i15 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDimConfig>;

        if $i16 <= $i15 goto label2;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected config_screenBrightnessDark (");

        $i25 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDarkConfig>;

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i25);

        $r57 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to be less than or equal to ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("config_screenBrightnessSettingMinimum (");

        $r55 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r54 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayPowerController", $r54);

     label2:
        $i13 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDimConfig>;

        $i14 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i13);

        $i17 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDarkConfig>;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i14, $i17);

        r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessRangeMaximum> = 255;

        $z0 = virtualinvoke r6.<android.content.res.Resources: boolean getBoolean(int)>(17956895);

        r0.<com.android.server.display.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig> = $z0;

        $z1 = r0.<com.android.server.display.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig>;

        if $z1 == 0 goto label6;

        r7 = virtualinvoke r6.<android.content.res.Resources: int[] getIntArray(int)>(17236002);

        r8 = virtualinvoke r6.<android.content.res.Resources: int[] getIntArray(int)>(17236003);

        i2 = virtualinvoke r6.<android.content.res.Resources: int getInteger(int)>(17694801);

        r9 = staticinvoke <com.android.server.display.DisplayPowerController: android.util.Spline createAutoBrightnessSpline(int[],int[])>(r7, r8);

        if r9 != null goto label3;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in config.xml.  config_autoBrightnessLcdBacklightValues (size ");

        $i22 = lengthof r8;

        $r45 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r47 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be monotic and have exactly one more entry than ");

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("config_autoBrightnessLevels (size ");

        $i24 = lengthof r7;

        $r41 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("which must be strictly increasing.  ");

        $r51 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Auto-brightness will be disabled.");

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DisplayPowerController", $r50);

        r0.<com.android.server.display.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig> = 0;

        goto label6;

     label3:
        $i18 = r8[0];

        i3 = staticinvoke <com.android.server.display.DisplayPowerController: int clampAbsoluteBrightness(int)>($i18);

        $i19 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDarkConfig>;

        if $i19 <= i3 goto label4;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("config_screenBrightnessDark (");

        $i20 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDarkConfig>;

        $r31 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") should be less than or equal to the first value of ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("config_autoBrightnessLcdBacklightValues (");

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayPowerController", $r40);

     label4:
        if i3 >= i1 goto label5;

        i1 = i3;

     label5:
        $r30 = new com.android.server.display.AutomaticBrightnessController;

        $r29 = virtualinvoke r3.<android.os.Handler: android.os.Looper getLooper()>();

        $i21 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessRangeMaximum>;

        specialinvoke $r30.<com.android.server.display.AutomaticBrightnessController: void <init>(com.android.server.display.AutomaticBrightnessController$Callbacks,android.os.Looper,android.hardware.SensorManager,android.util.Spline,int,int,int)>(r0, $r29, r4, r9, i2, i1, $i21);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController> = $r30;

     label6:
        r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessRangeMinimum> = i1;

        $z2 = virtualinvoke r6.<android.content.res.Resources: boolean getBoolean(int)>(17956899);

        r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeFadesConfig> = $z2;

        $r27 = r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        $r26 = virtualinvoke $r27.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(8);

        r0.<com.android.server.display.DisplayPowerController: android.hardware.Sensor mProximitySensor> = $r26;

        $r25 = r0.<com.android.server.display.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        if $r25 == null goto label7;

        $r28 = r0.<com.android.server.display.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        $f1 = virtualinvoke $r28.<android.hardware.Sensor: float getMaximumRange()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f1, 5.0F);

        r0.<com.android.server.display.DisplayPowerController: float mProximityThreshold> = $f0;

     label7:
        return;
    }

    public boolean isProximitySensorAvailable()
    {
        com.android.server.display.DisplayPowerController r0;
        android.hardware.Sensor $r1;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean requestPowerState(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest, boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest r1, $r5, $r6, $r7, $r8;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r15;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14;
        java.lang.String $r13;

        r0 := @this: com.android.server.display.DisplayPowerController;

        r1 := @parameter0: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        z0 := @parameter1: boolean;

        $z2 = <com.android.server.display.DisplayPowerController: boolean DEBUG>;

        if $z2 == 0 goto label01;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestPowerState: ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", waitForNegativeProximity=");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r13);

     label01:
        $r4 = r0.<com.android.server.display.DisplayPowerController: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label02:
        z1 = 0;

        if z0 == 0 goto label03;

        $z6 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked>;

        if $z6 != 0 goto label03;

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked> = 1;

        z1 = 1;

     label03:
        $r5 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        if $r5 != null goto label04;

        $r8 = new android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        specialinvoke $r8.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: void <init>(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)>(r1);

        r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked> = $r8;

        z1 = 1;

        goto label05;

     label04:
        $r6 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        $z3 = virtualinvoke $r6.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean equals(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)>(r1);

        if $z3 != 0 goto label05;

        $r7 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        virtualinvoke $r7.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: void copyFrom(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)>(r1);

        z1 = 1;

     label05:
        if z1 == 0 goto label06;

        r0.<com.android.server.display.DisplayPowerController: boolean mDisplayReadyLocked> = 0;

     label06:
        if z1 == 0 goto label07;

        $z5 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingRequestChangedLocked>;

        if $z5 != 0 goto label07;

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingRequestChangedLocked> = 1;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendUpdatePowerStateLocked()>();

     label07:
        $z4 = r0.<com.android.server.display.DisplayPowerController: boolean mDisplayReadyLocked>;

        exitmonitor r2;

     label08:
        return $z4;

     label09:
        $r15 := @caughtexception;

        r3 = $r15;

        exitmonitor r2;

     label10:
        throw r3;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void sendUpdatePowerState()
    {
        com.android.server.display.DisplayPowerController r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r3 = r0.<com.android.server.display.DisplayPowerController: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendUpdatePowerStateLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void sendUpdatePowerStateLocked()
    {
        com.android.server.display.DisplayPowerController r0;
        android.os.Message r1;
        boolean $z0;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r2, $r3;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $z0 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingUpdatePowerStateLocked>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingUpdatePowerStateLocked> = 1;

        $r2 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        r1 = virtualinvoke $r2.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r3.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: boolean sendMessage(android.os.Message)>(r1);

     label1:
        return;
    }

    private void initialize()
    {
        com.android.server.display.DisplayPowerController r0;
        com.android.server.display.DisplayPowerState $r2, $r9, $r16, $r24, $r29, $r30;
        com.android.server.lights.LightsManager $r3;
        com.android.server.display.DisplayBlanker $r4;
        com.android.server.lights.Light $r5;
        com.android.server.display.ColorFade $r6;
        float[] $r7, $r15;
        android.util.FloatProperty $r8, $r17;
        android.animation.ObjectAnimator $r10, $r11, $r14, $r18, $r19, $r23;
        android.animation.Animator$AnimatorListener $r13, $r20;
        com.android.server.display.RampAnimator $r22, $r26;
        android.util.IntProperty $r25;
        com.android.server.display.RampAnimator$Listener $r27;
        com.android.internal.app.IBatteryStats $r28, $r32;
        int $i0, $i1;
        android.os.RemoteException $r31;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r2 = new com.android.server.display.DisplayPowerState;

        $r4 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayBlanker mBlanker>;

        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.server.lights.LightsManager mLights>;

        $r5 = virtualinvoke $r3.<com.android.server.lights.LightsManager: com.android.server.lights.Light getLight(int)>(0);

        $r6 = new com.android.server.display.ColorFade;

        specialinvoke $r6.<com.android.server.display.ColorFade: void <init>(int)>(0);

        specialinvoke $r2.<com.android.server.display.DisplayPowerState: void <init>(com.android.server.display.DisplayBlanker,com.android.server.lights.Light,com.android.server.display.ColorFade)>($r4, $r5, $r6);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState> = $r2;

        $r9 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $r8 = <com.android.server.display.DisplayPowerState: android.util.FloatProperty COLOR_FADE_LEVEL>;

        $r7 = newarray (float)[2];

        $r7[0] = 0.0F;

        $r7[1] = 1.0F;

        $r10 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r9, $r8, $r7);

        r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOnAnimator> = $r10;

        $r11 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOnAnimator>;

        virtualinvoke $r11.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>(250L);

        $r14 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOnAnimator>;

        $r13 = r0.<com.android.server.display.DisplayPowerController: android.animation.Animator$AnimatorListener mAnimatorListener>;

        virtualinvoke $r14.<android.animation.ObjectAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r13);

        $r16 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $r17 = <com.android.server.display.DisplayPowerState: android.util.FloatProperty COLOR_FADE_LEVEL>;

        $r15 = newarray (float)[2];

        $r15[0] = 1.0F;

        $r15[1] = 0.0F;

        $r19 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r16, $r17, $r15);

        r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator> = $r19;

        $r18 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        virtualinvoke $r18.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>(400L);

        $r23 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        $r20 = r0.<com.android.server.display.DisplayPowerController: android.animation.Animator$AnimatorListener mAnimatorListener>;

        virtualinvoke $r23.<android.animation.ObjectAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r20);

        $r22 = new com.android.server.display.RampAnimator;

        $r24 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $r25 = <com.android.server.display.DisplayPowerState: android.util.IntProperty SCREEN_BRIGHTNESS>;

        specialinvoke $r22.<com.android.server.display.RampAnimator: void <init>(java.lang.Object,android.util.IntProperty)>($r24, $r25);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator> = $r22;

        $r26 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator>;

        $r27 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator$Listener mRampAnimatorListener>;

        virtualinvoke $r26.<com.android.server.display.RampAnimator: void setListener(com.android.server.display.RampAnimator$Listener)>($r27);

     label1:
        $r28 = r0.<com.android.server.display.DisplayPowerController: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r29 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i0 = virtualinvoke $r29.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        interfaceinvoke $r28.<com.android.internal.app.IBatteryStats: void noteScreenState(int)>($i0);

        $r32 = r0.<com.android.server.display.DisplayPowerController: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r30 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i1 = virtualinvoke $r30.<com.android.server.display.DisplayPowerState: int getScreenBrightness()>();

        interfaceinvoke $r32.<com.android.internal.app.IBatteryStats: void noteScreenBrightness(int)>($i1);

     label2:
        goto label4;

     label3:
        $r31 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void updatePowerState()
    {
        com.android.server.display.DisplayPowerController r0;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40;
        java.lang.Object r1, r3, $r5, $r16;
        java.lang.Throwable r2, r4, $r39, $r40;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r6, $r7, $r8, $r11, $r13, $r23, $r24, $r25, $r28, $r29, $r30, $r31, $r33, $r34, $r35, $r36, $r37, $r38;
        int $i0, $i1, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i20, i21, i22;
        android.hardware.Sensor $r9;
        com.android.server.display.DisplayPowerState $r10, $r21;
        com.android.server.display.AutomaticBrightnessController $r12, $r26, $r27;
        com.android.server.display.DisplayPowerController$ScreenOnUnblocker $r14;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r15, $r17;
        com.android.server.display.RampAnimator $r18;
        android.animation.ObjectAnimator $r19, $r20;
        java.lang.Runnable $r22;
        short $s7;
        float $f0, $f1, $f2;
        java.lang.AssertionError $r32;
        byte $b19;

        r0 := @this: com.android.server.display.DisplayPowerController;

        z1 = 0;

        z2 = 0;

        $r5 = r0.<com.android.server.display.DisplayPowerController: java.lang.Object mLock>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        r0.<com.android.server.display.DisplayPowerController: boolean mPendingUpdatePowerStateLocked> = 0;

        $r6 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        if $r6 != null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r7 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        if $r7 != null goto label04;

        $r37 = new android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        $r38 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        specialinvoke $r37.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: void <init>(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)>($r38);

        r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest> = $r37;

        $z36 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked>;

        r0.<com.android.server.display.DisplayPowerController: boolean mWaitingForNegativeProximity> = $z36;

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked> = 0;

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingRequestChangedLocked> = 0;

        z1 = 1;

        goto label07;

     label04:
        $z9 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingRequestChangedLocked>;

        if $z9 == 0 goto label07;

        $r36 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $f1 = $r36.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenAutoBrightnessAdjustment>;

        $r35 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        $f2 = $r35.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenAutoBrightnessAdjustment>;

        $b19 = $f1 cmpl $f2;

        if $b19 == 0 goto label05;

        $z38 = 1;

        goto label06;

     label05:
        $z38 = 0;

     label06:
        z2 = $z38;

        $r34 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $r33 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        virtualinvoke $r34.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: void copyFrom(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)>($r33);

        $z40 = r0.<com.android.server.display.DisplayPowerController: boolean mWaitingForNegativeProximity>;

        $z39 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked>;

        $z37 = $z40 | $z39;

        r0.<com.android.server.display.DisplayPowerController: boolean mWaitingForNegativeProximity> = $z37;

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked> = 0;

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingRequestChangedLocked> = 0;

        r0.<com.android.server.display.DisplayPowerController: boolean mDisplayReadyLocked> = 0;

     label07:
        $z8 = r0.<com.android.server.display.DisplayPowerController: boolean mDisplayReadyLocked>;

        if $z8 != 0 goto label08;

        $z35 = 1;

        goto label09;

     label08:
        $z35 = 0;

     label09:
        z0 = $z35;

        exitmonitor r1;

     label10:
        goto label13;

     label11:
        $r39 := @caughtexception;

        r2 = $r39;

        exitmonitor r1;

     label12:
        throw r2;

     label13:
        if z1 == 0 goto label14;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void initialize()>();

     label14:
        i20 = -1;

        z3 = 0;

        $r8 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $i0 = $r8.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        tableswitch($i0)
        {
            case 0: goto label15;
            case 1: goto label16;
            case 2: goto label19;
            case 3: goto label19;
            default: goto label19;
        };

     label15:
        i21 = 1;

        z3 = 1;

        goto label20;

     label16:
        $r29 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $i16 = $r29.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState>;

        if $i16 == 0 goto label17;

        $r30 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        i21 = $r30.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState>;

        goto label18;

     label17:
        i21 = 3;

     label18:
        $r31 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        i20 = $r31.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenBrightness>;

        goto label20;

     label19:
        i21 = 2;

     label20:
        $z10 = <com.android.server.display.DisplayPowerController: boolean $assertionsDisabled>;

        if $z10 != 0 goto label21;

        if i21 != 0 goto label21;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>()>();

        throw $r32;

     label21:
        $r9 = r0.<com.android.server.display.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        if $r9 == null goto label25;

        $r28 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $z33 = $r28.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useProximitySensor>;

        if $z33 == 0 goto label22;

        if i21 == 1 goto label22;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setProximitySensorEnabled(boolean)>(1);

        $z34 = r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        if $z34 != 0 goto label24;

        $i18 = r0.<com.android.server.display.DisplayPowerController: int mProximity>;

        if $i18 != 1 goto label24;

        r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity> = 1;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendOnProximityPositiveWithWakelock()>();

        goto label24;

     label22:
        $z30 = r0.<com.android.server.display.DisplayPowerController: boolean mWaitingForNegativeProximity>;

        if $z30 == 0 goto label23;

        $z31 = r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        if $z31 == 0 goto label23;

        $i17 = r0.<com.android.server.display.DisplayPowerController: int mProximity>;

        if $i17 != 1 goto label23;

        if i21 == 1 goto label23;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setProximitySensorEnabled(boolean)>(1);

        goto label24;

     label23:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setProximitySensorEnabled(boolean)>(0);

        r0.<com.android.server.display.DisplayPowerController: boolean mWaitingForNegativeProximity> = 0;

     label24:
        $z29 = r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        if $z29 == 0 goto label26;

        $i15 = r0.<com.android.server.display.DisplayPowerController: int mProximity>;

        if $i15 == 1 goto label26;

        r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity> = 0;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendOnProximityNegativeWithWakelock()>();

        goto label26;

     label25:
        r0.<com.android.server.display.DisplayPowerController: boolean mWaitingForNegativeProximity> = 0;

     label26:
        $z11 = r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        if $z11 == 0 goto label27;

        i21 = 1;

     label27:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void animateScreenStateChange(int,boolean)>(i21, z3);

        $r10 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        i22 = virtualinvoke $r10.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if i22 != 1 goto label28;

        i20 = 0;

     label28:
        if i20 >= 0 goto label30;

        if i22 == 3 goto label29;

        if i22 != 4 goto label30;

     label29:
        i20 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDozeConfig>;

     label30:
        z4 = 0;

        $r12 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        if $r12 == null goto label33;

        $r24 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $z27 = $r24.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useAutoBrightness>;

        if $z27 == 0 goto label31;

        if i22 != 2 goto label31;

        if i20 >= 0 goto label31;

        $z32 = 1;

        goto label32;

     label31:
        $z32 = 0;

     label32:
        z4 = $z32;

        $r27 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        $r25 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $f0 = $r25.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenAutoBrightnessAdjustment>;

        virtualinvoke $r27.<com.android.server.display.AutomaticBrightnessController: void configure(boolean,float)>(z4, $f0);

     label33:
        z5 = 0;

        if i20 >= 0 goto label37;

        if z4 == 0 goto label34;

        $r26 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        i20 = virtualinvoke $r26.<com.android.server.display.AutomaticBrightnessController: int getAutomaticScreenBrightness()>();

     label34:
        if i20 < 0 goto label36;

        i20 = specialinvoke r0.<com.android.server.display.DisplayPowerController: int clampScreenBrightness(int)>(i20);

        $z28 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedAutoBrightness>;

        if $z28 == 0 goto label35;

        if z2 != 0 goto label35;

        z5 = 1;

     label35:
        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedAutoBrightness> = 1;

        goto label38;

     label36:
        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedAutoBrightness> = 0;

        goto label38;

     label37:
        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedAutoBrightness> = 0;

     label38:
        if i20 >= 0 goto label39;

        $r23 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $i10 = $r23.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int screenBrightness>;

        i20 = specialinvoke r0.<com.android.server.display.DisplayPowerController: int clampScreenBrightness(int)>($i10);

     label39:
        $r11 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $i1 = $r11.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if $i1 != 2 goto label42;

        $i8 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessRangeMinimum>;

        if i20 <= $i8 goto label40;

        $i12 = i20 - 10;

        $i11 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDimConfig>;

        $i13 = staticinvoke <java.lang.Math: int min(int,int)>($i12, $i11);

        $i14 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessRangeMinimum>;

        i20 = staticinvoke <java.lang.Math: int max(int,int)>($i13, $i14);

     label40:
        $z26 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedDimming>;

        if $z26 != 0 goto label41;

        z5 = 0;

     label41:
        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedDimming> = 1;

     label42:
        $r13 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $z12 = $r13.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean lowPowerMode>;

        if $z12 == 0 goto label45;

        $i6 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessRangeMinimum>;

        if i20 <= $i6 goto label43;

        $i9 = i20 / 2;

        $i5 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessRangeMinimum>;

        i20 = staticinvoke <java.lang.Math: int max(int,int)>($i9, $i5);

     label43:
        $z25 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedLowPower>;

        if $z25 != 0 goto label44;

        z5 = 0;

     label44:
        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedLowPower> = 1;

     label45:
        if i22 == 2 goto label46;

        if i22 != 3 goto label49;

     label46:
        if z5 == 0 goto label47;

        $s7 = 40;

        goto label48;

     label47:
        $s7 = 200;

     label48:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void animateScreenBrightness(int,int)>(i20, $s7);

        goto label50;

     label49:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void animateScreenBrightness(int,int)>(i20, 0);

     label50:
        $r14 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker>;

        if $r14 != null goto label51;

        $r20 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOnAnimator>;

        $z22 = virtualinvoke $r20.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z22 != 0 goto label51;

        $r19 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        $z21 = virtualinvoke $r19.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z21 != 0 goto label51;

        $r21 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $r22 = r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mCleanListener>;

        $z24 = virtualinvoke $r21.<com.android.server.display.DisplayPowerState: boolean waitUntilClean(java.lang.Runnable)>($r22);

        if $z24 == 0 goto label51;

        $z23 = 1;

        goto label52;

     label51:
        $z23 = 0;

     label52:
        z6 = $z23;

        if z6 == 0 goto label53;

        $r18 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator>;

        $z19 = virtualinvoke $r18.<com.android.server.display.RampAnimator: boolean isAnimating()>();

        if $z19 != 0 goto label53;

        $z20 = 1;

        goto label54;

     label53:
        $z20 = 0;

     label54:
        z7 = $z20;

        if z7 != 0 goto label56;

        $z18 = r0.<com.android.server.display.DisplayPowerController: boolean mUnfinishedBusiness>;

        if $z18 != 0 goto label56;

        $z17 = <com.android.server.display.DisplayPowerController: boolean DEBUG>;

        if $z17 == 0 goto label55;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", "Unfinished business...");

     label55:
        $r17 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        interfaceinvoke $r17.<android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks: void acquireSuspendBlocker()>();

        r0.<com.android.server.display.DisplayPowerController: boolean mUnfinishedBusiness> = 1;

     label56:
        if z6 == 0 goto label63;

        if z0 == 0 goto label63;

        $r16 = r0.<com.android.server.display.DisplayPowerController: java.lang.Object mLock>;

        r3 = $r16;

        entermonitor $r16;

     label57:
        $z16 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingRequestChangedLocked>;

        if $z16 != 0 goto label58;

        r0.<com.android.server.display.DisplayPowerController: boolean mDisplayReadyLocked> = 1;

        $z15 = <com.android.server.display.DisplayPowerController: boolean DEBUG>;

        if $z15 == 0 goto label58;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", "Display ready!");

     label58:
        exitmonitor r3;

     label59:
        goto label62;

     label60:
        $r40 := @caughtexception;

        r4 = $r40;

        exitmonitor r3;

     label61:
        throw r4;

     label62:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendOnStateChangedWithWakelock()>();

     label63:
        if z7 == 0 goto label65;

        $z13 = r0.<com.android.server.display.DisplayPowerController: boolean mUnfinishedBusiness>;

        if $z13 == 0 goto label65;

        $z14 = <com.android.server.display.DisplayPowerController: boolean DEBUG>;

        if $z14 == 0 goto label64;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", "Finished business...");

     label64:
        r0.<com.android.server.display.DisplayPowerController: boolean mUnfinishedBusiness> = 0;

        $r15 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        interfaceinvoke $r15.<android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks: void releaseSuspendBlocker()>();

     label65:
        return;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label57 to label59 with label60;
        catch java.lang.Throwable from label60 to label61 with label60;
    }

    public void updateBrightness()
    {
        com.android.server.display.DisplayPowerController r0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendUpdatePowerState()>();

        return;
    }

    private void blockScreenOn()
    {
        com.android.server.display.DisplayPowerController r0;
        com.android.server.display.DisplayPowerController$ScreenOnUnblocker $r1, $r2;
        long $l0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker>;

        if $r1 != null goto label1;

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(131072L, "Screen on blocked", 0);

        $r2 = new com.android.server.display.DisplayPowerController$ScreenOnUnblocker;

        specialinvoke $r2.<com.android.server.display.DisplayPowerController$ScreenOnUnblocker: void <init>(com.android.server.display.DisplayPowerController,com.android.server.display.DisplayPowerController$1)>(r0, null);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker> = $r2;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.display.DisplayPowerController: long mScreenOnBlockStartRealTime> = $l0;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayPowerController", "Blocking screen on until initial contents have been drawn.");

     label1:
        return;
    }

    private void unblockScreenOn()
    {
        com.android.server.display.DisplayPowerController r0;
        long l0, $l1, $l2;
        com.android.server.display.DisplayPowerController$ScreenOnUnblocker $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker>;

        if $r1 == null goto label1;

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker> = null;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l2 = r0.<com.android.server.display.DisplayPowerController: long mScreenOnBlockStartRealTime>;

        l0 = $l1 - $l2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unblocked screen on after ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayPowerController", $r6);

        staticinvoke <android.os.Trace: void asyncTraceEnd(long,java.lang.String,int)>(131072L, "Screen on blocked", 0);

     label1:
        return;
    }

    private boolean setScreenState(int)
    {
        com.android.server.display.DisplayPowerController r0;
        int i0, $i1, $i2;
        boolean z0, $z1, $z2, $z3, z4;
        com.android.server.display.DisplayPowerState $r2, $r4, $r5, $r7;
        com.android.server.display.DisplayPowerController$ScreenOnUnblocker $r3, $r8;
        com.android.internal.app.IBatteryStats $r6;
        float $f0;
        byte $b3;
        android.view.WindowManagerPolicy $r9, $r10;
        android.os.RemoteException $r11;

        r0 := @this: com.android.server.display.DisplayPowerController;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i1 = virtualinvoke $r2.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if $i1 == i0 goto label12;

        $r4 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i2 = virtualinvoke $r4.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if $i2 == 1 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z0 = $z2;

        $r5 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r5.<com.android.server.display.DisplayPowerState: void setScreenState(int)>(i0);

     label03:
        $r6 = r0.<com.android.server.display.DisplayPowerController: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r6.<com.android.internal.app.IBatteryStats: void noteScreenState(int)>(i0);

     label04:
        goto label06;

     label05:
        $r11 := @caughtexception;

     label06:
        if i0 == 1 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        z4 = $z3;

        if z0 == 0 goto label09;

        if z4 != 0 goto label09;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void unblockScreenOn()>();

        $r9 = r0.<com.android.server.display.DisplayPowerController: android.view.WindowManagerPolicy mWindowManagerPolicy>;

        interfaceinvoke $r9.<android.view.WindowManagerPolicy: void screenTurnedOff()>();

        goto label12;

     label09:
        if z0 != 0 goto label12;

        if z4 == 0 goto label12;

        $r7 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $f0 = virtualinvoke $r7.<com.android.server.display.DisplayPowerState: float getColorFadeLevel()>();

        $b3 = $f0 cmpl 0.0F;

        if $b3 != 0 goto label10;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void blockScreenOn()>();

        goto label11;

     label10:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void unblockScreenOn()>();

     label11:
        $r10 = r0.<com.android.server.display.DisplayPowerController: android.view.WindowManagerPolicy mWindowManagerPolicy>;

        $r8 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker>;

        interfaceinvoke $r10.<android.view.WindowManagerPolicy: void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)>($r8);

     label12:
        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker>;

        if $r3 != null goto label13;

        $z1 = 1;

        goto label14;

     label13:
        $z1 = 0;

     label14:
        return $z1;

        catch android.os.RemoteException from label03 to label04 with label05;
    }

    private int clampScreenBrightness(int)
    {
        com.android.server.display.DisplayPowerController r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.display.DisplayPowerController;

        i0 := @parameter0: int;

        $i2 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessRangeMinimum>;

        $i1 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessRangeMaximum>;

        $i3 = staticinvoke <android.util.MathUtils: int constrain(int,int,int)>(i0, $i2, $i1);

        return $i3;
    }

    private void animateScreenBrightness(int, int)
    {
        com.android.server.display.DisplayPowerController r0;
        int i0, i1;
        boolean $z0, $z1;
        com.android.server.display.RampAnimator $r2;
        com.android.internal.app.IBatteryStats $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        android.os.RemoteException $r10;

        r0 := @this: com.android.server.display.DisplayPowerController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = <com.android.server.display.DisplayPowerController: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Animating brightness: target=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", rate=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r9);

     label1:
        $r2 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator>;

        $z1 = virtualinvoke $r2.<com.android.server.display.RampAnimator: boolean animateTo(int,int)>(i0, i1);

        if $z1 == 0 goto label5;

     label2:
        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r3.<com.android.internal.app.IBatteryStats: void noteScreenBrightness(int)>(i0);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void animateScreenStateChange(int, boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        int i0, $i2, $i4, $i5, $i6;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z7, $z8, $z10, $z11, $z12;
        android.animation.ObjectAnimator $r1, $r2, $r4, $r8;
        com.android.server.display.DisplayPowerState $r3, $r6, $r7, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19;
        float $f0;
        byte $b1, $b3;
        android.content.Context $r5;
        com.android.server.display.RampAnimator $r9, $r14;

        r0 := @this: com.android.server.display.DisplayPowerController;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOnAnimator>;

        $z1 = virtualinvoke $r1.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z1 != 0 goto label01;

        $r2 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        $z2 = virtualinvoke $r2.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z2 == 0 goto label02;

     label01:
        return;

     label02:
        $z3 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingScreenOff>;

        if $z3 == 0 goto label03;

        if i0 == 1 goto label03;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(1);

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingScreenOff> = 0;

     label03:
        if i0 != 2 goto label05;

        $z12 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(2);

        if $z12 != 0 goto label04;

        return;

     label04:
        $r17 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r17.<com.android.server.display.DisplayPowerState: void setColorFadeLevel(float)>(1.0F);

        $r19 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r19.<com.android.server.display.DisplayPowerState: void dismissColorFade()>();

        goto label17;

     label05:
        if i0 != 3 goto label08;

        $r14 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator>;

        $z10 = virtualinvoke $r14.<com.android.server.display.RampAnimator: boolean isAnimating()>();

        if $z10 == 0 goto label06;

        $r18 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i6 = virtualinvoke $r18.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if $i6 != 2 goto label06;

        return;

     label06:
        $z11 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(3);

        if $z11 != 0 goto label07;

        return;

     label07:
        $r15 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r15.<com.android.server.display.DisplayPowerState: void setColorFadeLevel(float)>(1.0F);

        $r16 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r16.<com.android.server.display.DisplayPowerState: void dismissColorFade()>();

        goto label17;

     label08:
        if i0 != 4 goto label12;

        $r9 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator>;

        $z7 = virtualinvoke $r9.<com.android.server.display.RampAnimator: boolean isAnimating()>();

        if $z7 == 0 goto label09;

        $r13 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i5 = virtualinvoke $r13.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if $i5 == 4 goto label09;

        return;

     label09:
        $r10 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i4 = virtualinvoke $r10.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if $i4 == 4 goto label11;

        $z8 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(3);

        if $z8 != 0 goto label10;

        return;

     label10:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(4);

     label11:
        $r11 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r11.<com.android.server.display.DisplayPowerState: void setColorFadeLevel(float)>(1.0F);

        $r12 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r12.<com.android.server.display.DisplayPowerState: void dismissColorFade()>();

        goto label17;

     label12:
        r0.<com.android.server.display.DisplayPowerController: boolean mPendingScreenOff> = 1;

        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $f0 = virtualinvoke $r3.<com.android.server.display.DisplayPowerState: float getColorFadeLevel()>();

        $b1 = $f0 cmpl 0.0F;

        if $b1 != 0 goto label13;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(1);

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingScreenOff> = 0;

        goto label17;

     label13:
        if z0 == 0 goto label16;

        $r6 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $r5 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $z4 = r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeFadesConfig>;

        if $z4 == 0 goto label14;

        $b3 = 2;

        goto label15;

     label14:
        $b3 = 1;

     label15:
        $z5 = virtualinvoke $r6.<com.android.server.display.DisplayPowerState: boolean prepareColorFade(android.content.Context,int)>($r5, $b3);

        if $z5 == 0 goto label16;

        $r7 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i2 = virtualinvoke $r7.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if $i2 == 1 goto label16;

        $r8 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        virtualinvoke $r8.<android.animation.ObjectAnimator: void start()>();

        goto label17;

     label16:
        $r4 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        virtualinvoke $r4.<android.animation.ObjectAnimator: void end()>();

     label17:
        return;
    }

    private void setProximitySensorEnabled(boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        boolean z0, $z1, $z2;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r1, $r4;
        android.hardware.SensorEventListener $r2, $r6;
        android.hardware.SensorManager $r3, $r7;
        android.hardware.Sensor $r5;

        r0 := @this: com.android.server.display.DisplayPowerController;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $z2 = r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled>;

        if $z2 != 0 goto label2;

        r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled> = 1;

        $r7 = r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        $r6 = r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorEventListener mProximitySensorListener>;

        $r5 = r0.<com.android.server.display.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        $r4 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r7.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>($r6, $r5, 3, $r4);

        goto label2;

     label1:
        $z1 = r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled>;

        if $z1 == 0 goto label2;

        r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled> = 0;

        r0.<com.android.server.display.DisplayPowerController: int mProximity> = -1;

        r0.<com.android.server.display.DisplayPowerController: int mPendingProximity> = -1;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r1.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: void removeMessages(int)>(2);

        $r3 = r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        $r2 = r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorEventListener mProximitySensorListener>;

        virtualinvoke $r3.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>($r2);

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void clearPendingProximityDebounceTime()>();

     label2:
        return;
    }

    private void handleProximitySensorEvent(long, boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        long l0, $l3, $l4;
        boolean z0, $z1;
        int $i1, $i2;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r1;

        r0 := @this: com.android.server.display.DisplayPowerController;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled>;

        if $z1 == 0 goto label5;

        $i1 = r0.<com.android.server.display.DisplayPowerController: int mPendingProximity>;

        if $i1 != 0 goto label1;

        if z0 != 0 goto label1;

        return;

     label1:
        $i2 = r0.<com.android.server.display.DisplayPowerController: int mPendingProximity>;

        if $i2 != 1 goto label2;

        if z0 == 0 goto label2;

        return;

     label2:
        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r1.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: void removeMessages(int)>(2);

        if z0 == 0 goto label3;

        r0.<com.android.server.display.DisplayPowerController: int mPendingProximity> = 1;

        $l4 = l0 + 0L;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setPendingProximityDebounceTime(long)>($l4);

        goto label4;

     label3:
        r0.<com.android.server.display.DisplayPowerController: int mPendingProximity> = 0;

        $l3 = l0 + 250L;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setPendingProximityDebounceTime(long)>($l3);

     label4:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void debounceProximitySensor()>();

     label5:
        return;
    }

    private void debounceProximitySensor()
    {
        com.android.server.display.DisplayPowerController r0;
        long l0, $l2, $l4, $l6;
        android.os.Message r1;
        boolean $z0;
        int $i1, $i7;
        byte $b3, $b5;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r2, $r3;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $z0 = r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled>;

        if $z0 == 0 goto label2;

        $i1 = r0.<com.android.server.display.DisplayPowerController: int mPendingProximity>;

        if $i1 == -1 goto label2;

        $l2 = r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime>;

        $b3 = $l2 cmp 0L;

        if $b3 < 0 goto label2;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l4 = r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime>;

        $b5 = $l4 cmp l0;

        if $b5 > 0 goto label1;

        $i7 = r0.<com.android.server.display.DisplayPowerController: int mPendingProximity>;

        r0.<com.android.server.display.DisplayPowerController: int mProximity> = $i7;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void updatePowerState()>();

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void clearPendingProximityDebounceTime()>();

        goto label2;

     label1:
        $r2 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        r1 = virtualinvoke $r2.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: android.os.Message obtainMessage(int)>(2);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        $l6 = r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime>;

        virtualinvoke $r3.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: boolean sendMessageAtTime(android.os.Message,long)>(r1, $l6);

     label2:
        return;
    }

    private void clearPendingProximityDebounceTime()
    {
        com.android.server.display.DisplayPowerController r0;
        long $l0;
        byte $b1;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r1;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $l0 = r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime>;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime> = -1L;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        interfaceinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks: void releaseSuspendBlocker()>();

     label1:
        return;
    }

    private void setPendingProximityDebounceTime(long)
    {
        com.android.server.display.DisplayPowerController r0;
        long l0, $l1;
        byte $b2;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r1;

        r0 := @this: com.android.server.display.DisplayPowerController;

        l0 := @parameter0: long;

        $l1 = r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime>;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label1;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        interfaceinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks: void acquireSuspendBlocker()>();

     label1:
        r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime> = l0;

        return;
    }

    private void sendOnStateChangedWithWakelock()
    {
        com.android.server.display.DisplayPowerController r0;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r1;
        java.lang.Runnable $r2;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r3;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        interfaceinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks: void acquireSuspendBlocker()>();

        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        $r2 = r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mOnStateChangedRunnable>;

        virtualinvoke $r3.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void sendOnProximityPositiveWithWakelock()
    {
        com.android.server.display.DisplayPowerController r0;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r1;
        java.lang.Runnable $r2;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r3;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        interfaceinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks: void acquireSuspendBlocker()>();

        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        $r2 = r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mOnProximityPositiveRunnable>;

        virtualinvoke $r3.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void sendOnProximityNegativeWithWakelock()
    {
        com.android.server.display.DisplayPowerController r0;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r1;
        java.lang.Runnable $r2;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r3;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        interfaceinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks: void acquireSuspendBlocker()>();

        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        $r2 = r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mOnProximityNegativeRunnable>;

        virtualinvoke $r3.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    public void dump(java.io.PrintWriter)
    {
        com.android.server.display.DisplayPowerController r0;
        java.io.PrintWriter r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r52;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r10, $r12, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r23, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r33, $r35, $r36, $r37, $r38, $r40, $r42, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r53;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String $r8, $r13, $r16, $r22, $r24, $r28, $r34, $r39, $r41, $r43, $r51, $r54;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r11;
        int $i0, $i1, $i2, $i3, $i4;
        com.android.server.display.DisplayPowerController$7 $r55;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r56;

        r0 := @this: com.android.server.display.DisplayPowerController;

        r1 := @parameter0: java.io.PrintWriter;

        $r4 = r0.<com.android.server.display.DisplayPowerController: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Display Power Controller Locked State:");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDisplayReadyLocked=");

        $z0 = r0.<com.android.server.display.DisplayPowerController: boolean mDisplayReadyLocked>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingRequestLocked=");

        $r11 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingRequestChangedLocked=");

        $z1 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingRequestChangedLocked>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingWaitForNegativeProximityLocked=");

        $z2 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r22);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingUpdatePowerStateLocked=");

        $z3 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingUpdatePowerStateLocked>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r24);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r52 := @caughtexception;

        r3 = $r52;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Display Power Controller Configuration:");

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessDozeConfig=");

        $i0 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDozeConfig>;

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r28);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessDimConfig=");

        $i1 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDimConfig>;

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r34);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessDarkConfig=");

        $i2 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessDarkConfig>;

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r39);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessRangeMinimum=");

        $i3 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessRangeMinimum>;

        $r42 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r41);

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessRangeMaximum=");

        $i4 = r0.<com.android.server.display.DisplayPowerController: int mScreenBrightnessRangeMaximum>;

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r43);

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUseSoftwareAutoBrightnessConfig=");

        $z4 = r0.<com.android.server.display.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig>;

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r51 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r51);

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mColorFadeFadesConfig=");

        $z5 = r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeFadesConfig>;

        $r53 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r54);

        $r56 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        $r55 = new com.android.server.display.DisplayPowerController$7;

        specialinvoke $r55.<com.android.server.display.DisplayPowerController$7: void <init>(com.android.server.display.DisplayPowerController,java.io.PrintWriter)>(r0, r1);

        virtualinvoke $r56.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: boolean runWithScissors(java.lang.Runnable,long)>($r55, 1000L);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void dumpLocal(java.io.PrintWriter)
    {
        com.android.server.display.DisplayPowerController r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r7, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r28, $r30, $r32, $r34, $r36, $r37, $r38, $r40, $r41, $r42, $r44, $r45, $r47, $r49, $r50, $r51, $r52, $r53, $r54, $r56, $r57, $r59, $r60, $r62, $r64, $r65, $r67, $r70, $r76, $r79, $r81, $r82, $r84;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r4;
        java.lang.String $r6, $r10, $r16, $r18, $r24, $r27, $r29, $r31, $r33, $r35, $r39, $r43, $r46, $r48, $r55, $r58, $r66, $r73, $r77, $r83;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        android.hardware.Sensor $r13;
        float $f0;
        int $i0, $i1;
        long $l2;
        com.android.server.display.DisplayPowerController$ScreenOnUnblocker $r61;
        com.android.server.display.RampAnimator $r63;
        com.android.server.display.AutomaticBrightnessController $r68, $r69;
        com.android.server.display.DisplayPowerState $r71, $r74;
        android.animation.ObjectAnimator $r72, $r75, $r78, $r80;

        r0 := @this: com.android.server.display.DisplayPowerController;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Display Power Controller Thread State:");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPowerRequest=");

        $r4 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWaitingForNegativeProximity=");

        $z0 = r0.<com.android.server.display.DisplayPowerController: boolean mWaitingForNegativeProximity>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximitySensor=");

        $r13 = r0.<com.android.server.display.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximitySensorEnabled=");

        $z1 = r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r18);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximityThreshold=");

        $f0 = r0.<com.android.server.display.DisplayPowerController: float mProximityThreshold>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r24);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximity=");

        $i0 = r0.<com.android.server.display.DisplayPowerController: int mProximity>;

        $r27 = staticinvoke <com.android.server.display.DisplayPowerController: java.lang.String proximityToString(int)>($i0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r29);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingProximity=");

        $i1 = r0.<com.android.server.display.DisplayPowerController: int mPendingProximity>;

        $r33 = staticinvoke <com.android.server.display.DisplayPowerController: java.lang.String proximityToString(int)>($i1);

        $r34 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r31 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r31);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingProximityDebounceTime=");

        $l2 = r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime>;

        $r35 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l2);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r39);

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenOffBecauseOfProximity=");

        $z2 = r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        $r44 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r43);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAppliedAutoBrightness=");

        $z3 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedAutoBrightness>;

        $r47 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r46);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAppliedDimming=");

        $z4 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedDimming>;

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r48);

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAppliedLowPower=");

        $z5 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedLowPower>;

        $r51 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r58 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r58);

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingScreenOnUnblocker=");

        $r61 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker>;

        $r54 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r61);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r55);

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingScreenOff=");

        $z7 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingScreenOff>;

        $r65 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r66);

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessRampAnimator.isAnimating()=");

        $r63 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator>;

        $z6 = virtualinvoke $r63.<com.android.server.display.RampAnimator: boolean isAnimating()>();

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r73 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r73);

        $r72 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOnAnimator>;

        if $r72 == null goto label1;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r79 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mColorFadeOnAnimator.isStarted()=");

        $r78 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOnAnimator>;

        $z9 = virtualinvoke $r78.<android.animation.ObjectAnimator: boolean isStarted()>();

        $r84 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        $r83 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r83);

     label1:
        $r75 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        if $r75 == null goto label2;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r81 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mColorFadeOffAnimator.isStarted()=");

        $r80 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        $z8 = virtualinvoke $r80.<android.animation.ObjectAnimator: boolean isStarted()>();

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r77 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r77);

     label2:
        $r74 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        if $r74 == null goto label3;

        $r71 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r71.<com.android.server.display.DisplayPowerState: void dump(java.io.PrintWriter)>(r1);

     label3:
        $r69 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        if $r69 == null goto label4;

        $r68 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        virtualinvoke $r68.<com.android.server.display.AutomaticBrightnessController: void dump(java.io.PrintWriter)>(r1);

     label4:
        return;
    }

    private static java.lang.String proximityToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case -1: goto label1;
            case 0: goto label2;
            case 1: goto label3;
            default: goto label4;
        };

     label1:
        return "Unknown";

     label2:
        return "Negative";

     label3:
        return "Positive";

     label4:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;
    }

    private static android.util.Spline createAutoBrightnessSpline(int[], int[])
    {
        int[] r0, r1;
        int i0, i1, $i2, $i4, $i5, $i6, $i8, $i9, $i11;
        float[] r2, r3;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7, $r11;
        byte $b7;
        java.lang.Object[] $r8;
        java.lang.Float $r9, $r10;
        java.lang.IllegalArgumentException $r12, r14;
        android.util.Spline r13;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

     label1:
        i0 = lengthof r1;

        r2 = newarray (float)[i0];

        r3 = newarray (float)[i0];

        $i2 = r1[0];

        $f1 = staticinvoke <com.android.server.display.DisplayPowerController: float normalizeAbsoluteBrightness(int)>($i2);

        r3[0] = $f1;

        i1 = 1;

     label2:
        if i1 >= i0 goto label3;

        $i8 = i1 - 1;

        $i9 = r0[$i8];

        $f6 = (float) $i9;

        r2[i1] = $f6;

        $i11 = r1[i1];

        $f5 = staticinvoke <com.android.server.display.DisplayPowerController: float normalizeAbsoluteBrightness(int)>($i11);

        r3[i1] = $f5;

        i1 = i1 + 1;

        goto label2;

     label3:
        r13 = staticinvoke <android.util.Spline: android.util.Spline createSpline(float[],float[])>(r2, r3);

        $z0 = <com.android.server.display.DisplayPowerController: boolean DEBUG>;

        if $z0 == 0 goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Auto-brightness spline: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r7);

        f0 = 1.0F;

     label4:
        $i5 = lengthof r0;

        $i4 = $i5 - 1;

        $i6 = r0[$i4];

        $f2 = (float) $i6;

        $f3 = $f2 * 1.25F;

        $b7 = f0 cmpg $f3;

        if $b7 >= 0 goto label5;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r8[0] = $r9;

        $f4 = virtualinvoke r13.<android.util.Spline: float interpolate(float)>(f0);

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f4);

        $r8[1] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("  %7.1f: %7.1f", $r8);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("DisplayPowerController", $r11);

        f0 = f0 * 1.25F;

        goto label4;

     label5:
        return r13;

     label6:
        $r12 := @caughtexception;

        r14 = $r12;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayPowerController", "Could not create auto-brightness spline.", r14);

        return null;

        catch java.lang.IllegalArgumentException from label1 to label5 with label6;
    }

    private static float normalizeAbsoluteBrightness(int)
    {
        int i0, $i1;
        float $f0, $f1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <com.android.server.display.DisplayPowerController: int clampAbsoluteBrightness(int)>(i0);

        $f0 = (float) $i1;

        $f1 = $f0 / 255.0F;

        return $f1;
    }

    private static int clampAbsoluteBrightness(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.util.MathUtils: int constrain(int,int,int)>(i0, 0, 255);

        return $i1;
    }

    static void access$000(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendUpdatePowerState()>();

        return;
    }

    static android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks access$200(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r1;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        return $r1;
    }

    static void access$300(com.android.server.display.DisplayPowerController, java.io.PrintWriter)
    {
        com.android.server.display.DisplayPowerController r0;
        java.io.PrintWriter r1;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        r1 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void dumpLocal(java.io.PrintWriter)>(r1);

        return;
    }

    static void access$400(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void updatePowerState()>();

        return;
    }

    static void access$500(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void debounceProximitySensor()>();

        return;
    }

    static com.android.server.display.DisplayPowerController$ScreenOnUnblocker access$600(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;
        com.android.server.display.DisplayPowerController$ScreenOnUnblocker $r1;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker>;

        return $r1;
    }

    static void access$700(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void unblockScreenOn()>();

        return;
    }

    static boolean access$800(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        $z0 = r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled>;

        return $z0;
    }

    static float access$900(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;
        float $f0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        $f0 = r0.<com.android.server.display.DisplayPowerController: float mProximityThreshold>;

        return $f0;
    }

    static void access$1000(com.android.server.display.DisplayPowerController, long, boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        long l0;
        boolean z0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void handleProximitySensorEvent(long,boolean)>(l0, z0);

        return;
    }

    static com.android.server.display.DisplayPowerController$DisplayControllerHandler access$1100(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r1;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <com.android.server.display.DisplayPowerController: int BRIGHTNESS_RAMP_RATE_SLOW> = 40;

        <com.android.server.display.DisplayPowerController: int BRIGHTNESS_RAMP_RATE_FAST> = 200;

        <com.android.server.display.DisplayPowerController: float TYPICAL_PROXIMITY_THRESHOLD> = 5.0F;

        <com.android.server.display.DisplayPowerController: int PROXIMITY_SENSOR_NEGATIVE_DEBOUNCE_DELAY> = 250;

        <com.android.server.display.DisplayPowerController: int PROXIMITY_SENSOR_POSITIVE_DEBOUNCE_DELAY> = 0;

        <com.android.server.display.DisplayPowerController: int PROXIMITY_POSITIVE> = 1;

        <com.android.server.display.DisplayPowerController: int PROXIMITY_NEGATIVE> = 0;

        <com.android.server.display.DisplayPowerController: int PROXIMITY_UNKNOWN> = -1;

        <com.android.server.display.DisplayPowerController: int MSG_SCREEN_ON_UNBLOCKED> = 3;

        <com.android.server.display.DisplayPowerController: int MSG_PROXIMITY_SENSOR_DEBOUNCED> = 2;

        <com.android.server.display.DisplayPowerController: int MSG_UPDATE_POWER_STATE> = 1;

        <com.android.server.display.DisplayPowerController: int COLOR_FADE_OFF_ANIMATION_DURATION_MILLIS> = 400;

        <com.android.server.display.DisplayPowerController: int COLOR_FADE_ON_ANIMATION_DURATION_MILLIS> = 250;

        <com.android.server.display.DisplayPowerController: int SCREEN_DIM_MINIMUM_REDUCTION> = 10;

        <com.android.server.display.DisplayPowerController: boolean USE_COLOR_FADE_ON_ANIMATION> = 0;

        <com.android.server.display.DisplayPowerController: java.lang.String SCREEN_ON_BLOCKED_TRACE_NAME> = "Screen on blocked";

        <com.android.server.display.DisplayPowerController: boolean DEBUG_PRETEND_PROXIMITY_SENSOR_ABSENT> = 0;

        <com.android.server.display.DisplayPowerController: java.lang.String TAG> = "DisplayPowerController";

        $r0 = class "com/android/server/display/DisplayPowerController";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.android.server.display.DisplayPowerController: boolean $assertionsDisabled> = $z1;

        <com.android.server.display.DisplayPowerController: boolean DEBUG> = 0;

        return;
    }
}
