final class com.android.server.job.JobSchedulerService$JobSchedulerStub extends android.app.job.IJobScheduler$Stub
{
    private final android.util.SparseArray mPersistCache;
    final com.android.server.job.JobSchedulerService this$0;

    void <init>(com.android.server.job.JobSchedulerService)
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        com.android.server.job.JobSchedulerService r1;
        android.util.SparseArray $r2;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        r1 := @parameter0: com.android.server.job.JobSchedulerService;

        r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0> = r1;

        specialinvoke r0.<android.app.job.IJobScheduler$Stub: void <init>()>();

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: android.util.SparseArray mPersistCache> = $r2;

        return;
    }

    private void enforceValidJobRequest(int, android.app.job.JobInfo)
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        int i0, $i1, $i2;
        android.app.job.JobInfo r1;
        android.content.pm.IPackageManager r2;
        android.content.ComponentName r3;
        android.content.pm.ServiceInfo r4;
        android.content.pm.ApplicationInfo $r5;
        java.lang.String $r6, $r7, $r12, $r18, $r20, $r24;
        boolean $z0;
        java.lang.StringBuilder $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r19, $r21, $r22, $r26, $r27;
        java.lang.IllegalArgumentException $r9, $r15, $r23;
        android.os.RemoteException $r25;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        i0 := @parameter0: int;

        r1 := @parameter1: android.app.job.JobInfo;

        r2 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r3 = virtualinvoke r1.<android.app.job.JobInfo: android.content.ComponentName getService()>();

     label1:
        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r4 = interfaceinvoke r2.<android.content.pm.IPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>(r3, 0, $i1);

        if r4 != null goto label2;

        $r23 = new java.lang.IllegalArgumentException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such service ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label2:
        $r5 = r4.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r5.<android.content.pm.ApplicationInfo: int uid>;

        if $i2 == i0 goto label3;

        $r15 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot schedule job in ");

        $r18 = virtualinvoke r3.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label3:
        $r7 = "android.permission.BIND_JOB_SERVICE";

        $r6 = r4.<android.content.pm.ServiceInfo: java.lang.String permission>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label4;

        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduled service ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not require android.permission.BIND_JOB_SERVICE permission");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r9;

     label4:
        goto label6;

     label5:
        $r25 := @caughtexception;

     label6:
        return;

        catch android.os.RemoteException from label1 to label4 with label5;
    }

    private boolean canPersistJobs(int, int)
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        int i0, i1, i2;
        boolean z0, $z1;
        android.util.SparseArray r1, $r4, $r5, $r9;
        java.lang.Boolean r2, $r10;
        java.lang.Throwable r3, $r11;
        java.lang.Object $r6;
        com.android.server.job.JobSchedulerService $r7;
        android.content.Context $r8;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r4 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: android.util.SparseArray mPersistCache>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: android.util.SparseArray mPersistCache>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r2 = (java.lang.Boolean) $r6;

        if r2 == null goto label2;

        z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        goto label5;

     label2:
        $r7 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        $r8 = virtualinvoke $r7.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        i2 = virtualinvoke $r8.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.RECEIVE_BOOT_COMPLETED", i0, i1);

        if i2 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

        $r9 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: android.util.SparseArray mPersistCache>;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, $r10);

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        return z0;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int schedule(android.app.job.JobInfo) throws android.os.RemoteException
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        android.app.job.JobInfo r1;
        int i0, i1, i3;
        long l2;
        java.lang.Throwable r2, $r5;
        boolean $z0, $z1;
        com.android.server.job.JobSchedulerService $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        r1 := @parameter0: android.app.job.JobInfo;

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: void enforceValidJobRequest(int,android.app.job.JobInfo)>(i1, r1);

        $z0 = virtualinvoke r1.<android.app.job.JobInfo: boolean isPersisted()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: boolean canPersistJobs(int,int)>(i0, i1);

        if $z1 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Error: requested job be persisted without holding RECEIVE_BOOT_COMPLETED permission.");

        throw $r4;

     label1:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r3 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        i3 = virtualinvoke $r3.<com.android.server.job.JobSchedulerService: int schedule(android.app.job.JobInfo,int)>(r1, i1);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return i3;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.List getAllPendingJobs() throws android.os.RemoteException
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        int i0;
        long l1;
        java.util.List r1;
        java.lang.Throwable r2, $r4;
        com.android.server.job.JobSchedulerService $r3;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        r1 = virtualinvoke $r3.<com.android.server.job.JobSchedulerService: java.util.List getPendingJobs(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r1;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void cancelAll() throws android.os.RemoteException
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        int i0;
        long l1;
        java.lang.Throwable r1, $r3;
        com.android.server.job.JobSchedulerService $r2;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        virtualinvoke $r2.<com.android.server.job.JobSchedulerService: void cancelJobsForUid(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label5;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void cancel(int) throws android.os.RemoteException
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        int i0, i1;
        long l2;
        java.lang.Throwable r1, $r3;
        com.android.server.job.JobSchedulerService $r2;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        virtualinvoke $r2.<com.android.server.job.JobSchedulerService: void cancelJob(int,int)>(i1, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        goto label5;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        long l0;
        java.lang.Throwable r4, $r8;
        com.android.server.job.JobSchedulerService $r5, $r7;
        android.content.Context $r6;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r5 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        $r6 = virtualinvoke $r5.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "JobSchedulerService");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r7 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        virtualinvoke $r7.<com.android.server.job.JobSchedulerService: void dumpInternal(java.io.PrintWriter)>(r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label5;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
