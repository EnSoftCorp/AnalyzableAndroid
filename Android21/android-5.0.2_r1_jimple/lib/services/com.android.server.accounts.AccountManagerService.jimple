public class com.android.server.accounts.AccountManagerService extends android.accounts.IAccountManager$Stub implements android.content.pm.RegisteredServicesCacheListener
{
    private static final java.lang.String TAG;
    private static final int TIMEOUT_DELAY_MS;
    private static final java.lang.String DATABASE_NAME;
    private static final int DATABASE_VERSION;
    private final android.content.Context mContext;
    private final android.content.pm.PackageManager mPackageManager;
    private android.os.UserManager mUserManager;
    private final com.android.server.accounts.AccountManagerService$MessageHandler mMessageHandler;
    private static final int MESSAGE_TIMED_OUT;
    private static final int MESSAGE_COPY_SHARED_ACCOUNT;
    private final com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache;
    private static final java.lang.String TABLE_ACCOUNTS;
    private static final java.lang.String ACCOUNTS_ID;
    private static final java.lang.String ACCOUNTS_NAME;
    private static final java.lang.String ACCOUNTS_TYPE;
    private static final java.lang.String ACCOUNTS_TYPE_COUNT;
    private static final java.lang.String ACCOUNTS_PASSWORD;
    private static final java.lang.String ACCOUNTS_PREVIOUS_NAME;
    private static final java.lang.String TABLE_AUTHTOKENS;
    private static final java.lang.String AUTHTOKENS_ID;
    private static final java.lang.String AUTHTOKENS_ACCOUNTS_ID;
    private static final java.lang.String AUTHTOKENS_TYPE;
    private static final java.lang.String AUTHTOKENS_AUTHTOKEN;
    private static final java.lang.String TABLE_GRANTS;
    private static final java.lang.String GRANTS_ACCOUNTS_ID;
    private static final java.lang.String GRANTS_AUTH_TOKEN_TYPE;
    private static final java.lang.String GRANTS_GRANTEE_UID;
    private static final java.lang.String TABLE_EXTRAS;
    private static final java.lang.String EXTRAS_ID;
    private static final java.lang.String EXTRAS_ACCOUNTS_ID;
    private static final java.lang.String EXTRAS_KEY;
    private static final java.lang.String EXTRAS_VALUE;
    private static final java.lang.String TABLE_META;
    private static final java.lang.String META_KEY;
    private static final java.lang.String META_VALUE;
    private static final java.lang.String TABLE_SHARED_ACCOUNTS;
    private static final java.lang.String[] ACCOUNT_TYPE_COUNT_PROJECTION;
    private static final android.content.Intent ACCOUNTS_CHANGED_INTENT;
    private static final java.lang.String COUNT_OF_MATCHING_GRANTS;
    private static final java.lang.String SELECTION_AUTHTOKENS_BY_ACCOUNT;
    private static final java.lang.String[] COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN;
    private static final java.lang.String SELECTION_USERDATA_BY_ACCOUNT;
    private static final java.lang.String[] COLUMNS_EXTRAS_KEY_AND_VALUE;
    private final java.util.LinkedHashMap mSessions;
    private final java.util.concurrent.atomic.AtomicInteger mNotificationIds;
    private final android.util.SparseArray mUsers;
    private static java.util.concurrent.atomic.AtomicReference sThis;
    private static final android.accounts.Account[] EMPTY_ACCOUNT_ARRAY;

    public static com.android.server.accounts.AccountManagerService getSingleton()
    {
        java.util.concurrent.atomic.AtomicReference $r0;
        java.lang.Object $r1;
        com.android.server.accounts.AccountManagerService $r2;

        $r0 = <com.android.server.accounts.AccountManagerService: java.util.concurrent.atomic.AtomicReference sThis>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r2 = (com.android.server.accounts.AccountManagerService) $r1;

        return $r2;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.content.Context r1;
        android.content.pm.PackageManager $r2;
        com.android.server.accounts.AccountAuthenticatorCache $r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r3 = new com.android.server.accounts.AccountAuthenticatorCache;

        specialinvoke $r3.<com.android.server.accounts.AccountAuthenticatorCache: void <init>(android.content.Context)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void <init>(android.content.Context,android.content.pm.PackageManager,com.android.server.accounts.IAccountAuthenticatorCache)>(r1, $r2, $r3);

        return;
    }

    public void <init>(android.content.Context, android.content.pm.PackageManager, com.android.server.accounts.IAccountAuthenticatorCache)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.content.Context r1, $r17, $r21;
        android.content.pm.PackageManager r2;
        com.android.server.accounts.IAccountAuthenticatorCache r3, $r12;
        android.content.IntentFilter r4, r5, $r14, $r19;
        java.util.LinkedHashMap $r6;
        java.util.concurrent.atomic.AtomicInteger $r7;
        android.util.SparseArray $r8;
        com.android.server.accounts.AccountManagerService$MessageHandler $r9;
        com.android.server.FgThread $r10;
        android.os.Looper $r11;
        java.util.concurrent.atomic.AtomicReference $r13;
        com.android.server.accounts.AccountManagerService$1 $r15;
        com.android.server.accounts.AccountManagerService$2 $r18;
        android.os.UserHandle $r20;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.pm.PackageManager;

        r3 := @parameter2: com.android.server.accounts.IAccountAuthenticatorCache;

        specialinvoke r0.<android.accounts.IAccountManager$Stub: void <init>()>();

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService: java.util.LinkedHashMap mSessions> = $r6;

        $r7 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        r0.<com.android.server.accounts.AccountManagerService: java.util.concurrent.atomic.AtomicInteger mNotificationIds> = $r7;

        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers> = $r8;

        r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext> = r1;

        r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager> = r2;

        $r9 = new com.android.server.accounts.AccountManagerService$MessageHandler;

        $r10 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r11 = virtualinvoke $r10.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r9.<com.android.server.accounts.AccountManagerService$MessageHandler: void <init>(com.android.server.accounts.AccountManagerService,android.os.Looper)>(r0, $r11);

        r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$MessageHandler mMessageHandler> = $r9;

        r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache> = r3;

        $r12 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        interfaceinvoke $r12.<com.android.server.accounts.IAccountAuthenticatorCache: void setListener(android.content.pm.RegisteredServicesCacheListener,android.os.Handler)>(r0, null);

        $r13 = <com.android.server.accounts.AccountManagerService: java.util.concurrent.atomic.AtomicReference sThis>;

        virtualinvoke $r13.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r0);

        $r14 = new android.content.IntentFilter;

        specialinvoke $r14.<android.content.IntentFilter: void <init>()>();

        r4 = $r14;

        virtualinvoke r4.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke r4.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r17 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r15 = new com.android.server.accounts.AccountManagerService$1;

        specialinvoke $r15.<com.android.server.accounts.AccountManagerService$1: void <init>(com.android.server.accounts.AccountManagerService)>(r0);

        virtualinvoke $r17.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r15, r4);

        $r19 = new android.content.IntentFilter;

        specialinvoke $r19.<android.content.IntentFilter: void <init>()>();

        r5 = $r19;

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STARTED");

        $r21 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r18 = new com.android.server.accounts.AccountManagerService$2;

        specialinvoke $r18.<com.android.server.accounts.AccountManagerService$2: void <init>(com.android.server.accounts.AccountManagerService)>(r0);

        $r20 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r21.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r18, $r20, r5, null, null);

        return;
    }

    public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        java.lang.RuntimeException r3, $r4;
        boolean $z0, $z1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Parcel;

        r2 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

     label1:
        $z0 = specialinvoke r0.<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r1, r2, i1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $z1 = r3 instanceof java.lang.SecurityException;

        if $z1 != 0 goto label4;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "Account Manager Crash", r3);

     label4:
        throw r3;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void systemReady()
    {
        com.android.server.accounts.AccountManagerService r0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        return;
    }

    private android.os.UserManager getUserManager()
    {
        com.android.server.accounts.AccountManagerService r0;
        android.os.UserManager $r1, $r2, $r4;
        android.content.Context $r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager mUserManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r4 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r3);

        r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager mUserManager> = $r4;

     label1:
        $r2 = r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager mUserManager>;

        return $r2;
    }

    private com.android.server.accounts.AccountManagerService$UserAccounts initUserLocked(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1, $r4;
        android.util.SparseArray $r2, $r6;
        java.lang.Object $r3;
        android.content.Context $r5;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.accounts.AccountManagerService$UserAccounts) $r3;

        if r1 != null goto label1;

        $r4 = new com.android.server.accounts.AccountManagerService$UserAccounts;

        $r5 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        specialinvoke $r4.<com.android.server.accounts.AccountManagerService$UserAccounts: void <init>(android.content.Context,int)>($r5, i0);

        r1 = $r4;

        $r6 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        virtualinvoke $r6.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void purgeOldGrants(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void validateAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts,boolean)>(r1, 1);

     label1:
        return r1;
    }

    private void purgeOldGrantsAll()
    {
        com.android.server.accounts.AccountManagerService r0;
        android.util.SparseArray r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.Throwable r2, $r8;
        java.lang.Object $r6;
        com.android.server.accounts.AccountManagerService$UserAccounts $r7;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        i0 = 0;

     label2:
        $r4 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        $i1 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        if i0 >= $i1 goto label3;

        $r5 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        $r7 = (com.android.server.accounts.AccountManagerService$UserAccounts) $r6;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void purgeOldGrants(com.android.server.accounts.AccountManagerService$UserAccounts)>($r7);

        i0 = i0 + 1;

        goto label2;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void purgeOldGrants(com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.lang.Object r2, $r7;
        android.database.sqlite.SQLiteDatabase r3;
        android.database.Cursor r4;
        int i0;
        boolean z0, $z1, $z2;
        java.lang.Throwable r5, r6, $r19, $r20;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r8;
        java.lang.String[] $r9, $r12, $r17;
        android.content.pm.PackageManager $r10;
        java.lang.StringBuilder $r11, $r13, $r14, $r15;
        java.lang.String $r16, $r18;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        $r7 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r2 = $r7;

        entermonitor $r7;

     label01:
        $r8 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r3 = virtualinvoke $r8.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = "uid";

        r4 = virtualinvoke r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("grants", $r9, null, null, "uid", null, null);

     label02:
        $z1 = interfaceinvoke r4.<android.database.Cursor: boolean moveToNext()>();

        if $z1 == 0 goto label06;

        i0 = interfaceinvoke r4.<android.database.Cursor: int getInt(int)>(0);

        $r10 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        $r12 = virtualinvoke $r10.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        if $r12 == null goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        z0 = $z2;

        if z0 == 0 goto label05;

        goto label02;

     label05:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deleting grants for UID ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because its package is no longer installed");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AccountManagerService", $r16);

        $r17 = newarray (java.lang.String)[1];

        $r18 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r17[0] = $r18;

        virtualinvoke r3.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("grants", "uid=?", $r17);

        goto label02;

     label06:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

        goto label09;

     label07:
        $r19 := @caughtexception;

        r5 = $r19;

     label08:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

        throw r5;

     label09:
        exitmonitor r2;

     label10:
        goto label13;

     label11:
        $r20 := @caughtexception;

        r6 = $r20;

        exitmonitor r2;

     label12:
        throw r6;

     label13:
        return;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void validateAccounts(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void validateAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts,boolean)>(r1, 1);

        return;
    }

    private void validateAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z7;
        java.util.HashSet r2;
        java.util.Iterator r3, r11, r58;
        android.content.pm.RegisteredServicesCache$ServiceInfo r4;
        android.database.Cursor r5;
        java.util.LinkedHashMap r6, $r20;
        long l0;
        java.util.Map$Entry r7;
        java.lang.String r8, r9, r13, $r42, $r43, r59;
        android.accounts.Account r10, $r27, $r48;
        int i1, $i2, $i3, $i4, $i7, $i8;
        java.lang.Throwable r12, r14, $r52, $r54;
        com.android.server.accounts.IAccountAuthenticatorCache $r15, $r53;
        java.util.Collection $r16;
        java.lang.Object $r17, $r23, $r24, $r25, $r26, $r32, $r46, $r47, r55;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r18;
        java.lang.String[] $r19;
        java.util.HashMap $r21, $r28, $r49, $r51;
        java.util.Set $r22;
        android.accounts.AuthenticatorDescription $r30;
        java.util.ArrayList $r31, r57, r60;
        java.lang.StringBuilder $r33, $r34, $r36, $r37, $r38, $r39, $r40, $r41, $r44;
        android.database.sqlite.SQLiteDatabase r56;
        android.accounts.Account[] r61;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label01;

        $r53 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        $i7 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        interfaceinvoke $r53.<com.android.server.accounts.IAccountAuthenticatorCache: void invalidateCache(int)>($i7);

     label01:
        r2 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        $r15 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        $i2 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r16 = interfaceinvoke $r15.<com.android.server.accounts.IAccountAuthenticatorCache: java.util.Collection getAllServices(int)>($i2);

        r3 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label03;

        $r46 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.RegisteredServicesCache$ServiceInfo) $r46;

        $r47 = r4.<android.content.pm.RegisteredServicesCache$ServiceInfo: java.lang.Object type>;

        virtualinvoke r2.<java.util.HashSet: boolean add(java.lang.Object)>($r47);

        goto label02;

     label03:
        $r17 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r55 = $r17;

        entermonitor $r17;

     label04:
        $r18 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r56 = virtualinvoke $r18.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        z1 = 0;

        $r19 = newarray (java.lang.String)[3];

        $r19[0] = "_id";

        $r19[1] = "type";

        $r19[2] = "name";

        r5 = virtualinvoke r56.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r19, null, null, null, null, null);

     label05:
        $r21 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r21.<java.util.HashMap: void clear()>();

        $r20 = new java.util.LinkedHashMap;

        specialinvoke $r20.<java.util.LinkedHashMap: void <init>()>();

        r6 = $r20;

     label06:
        $z4 = interfaceinvoke r5.<android.database.Cursor: boolean moveToNext()>();

        if $z4 == 0 goto label10;

        l0 = interfaceinvoke r5.<android.database.Cursor: long getLong(int)>(0);

        r8 = interfaceinvoke r5.<android.database.Cursor: java.lang.String getString(int)>(1);

        r9 = interfaceinvoke r5.<android.database.Cursor: java.lang.String getString(int)>(2);

        $r30 = staticinvoke <android.accounts.AuthenticatorDescription: android.accounts.AuthenticatorDescription newKey(java.lang.String)>(r8);

        $z7 = virtualinvoke r2.<java.util.HashSet: boolean contains(java.lang.Object)>($r30);

        if $z7 != 0 goto label07;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deleting account ");

        $r39 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because type ");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no longer has a registered authenticator");

        $r43 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r43);

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id=");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r56.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("accounts", $r42, null);

        z1 = 1;

        $r48 = new android.accounts.Account;

        specialinvoke $r48.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>(r9, r8);

        r10 = $r48;

        $r49 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$700(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r49.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r10);

        $r51 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r51.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r10);

        goto label09;

     label07:
        $r32 = virtualinvoke r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r8);

        r57 = (java.util.ArrayList) $r32;

        if r57 != null goto label08;

        $r31 = new java.util.ArrayList;

        specialinvoke $r31.<java.util.ArrayList: void <init>()>();

        r57 = $r31;

        virtualinvoke r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r57);

     label08:
        virtualinvoke r57.<java.util.ArrayList: boolean add(java.lang.Object)>(r9);

     label09:
        goto label06;

     label10:
        $r22 = virtualinvoke r6.<java.util.HashMap: java.util.Set entrySet()>();

        r58 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label14;

        $r23 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r23;

        $r24 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r59 = (java.lang.String) $r24;

        $r25 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        r60 = (java.util.ArrayList) $r25;

        $i4 = virtualinvoke r60.<java.util.ArrayList: int size()>();

        r61 = newarray (android.accounts.Account)[$i4];

        i1 = 0;

        r11 = virtualinvoke r60.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z5 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label13;

        $r26 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r26;

        $r27 = new android.accounts.Account;

        specialinvoke $r27.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>(r13, r59);

        r61[i1] = $r27;

        i1 = i1 + 1;

        goto label12;

     label13:
        $r28 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r28.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r61);

        goto label11;

     label14:
        interfaceinvoke r5.<android.database.Cursor: void close()>();

        if z1 == 0 goto label18;

        $i3 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i3);

        goto label18;

     label15:
        $r54 := @caughtexception;

        r12 = $r54;

     label16:
        interfaceinvoke r5.<android.database.Cursor: void close()>();

        if z1 == 0 goto label17;

        $i8 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i8);

     label17:
        throw r12;

     label18:
        exitmonitor r55;

     label19:
        goto label22;

     label20:
        $r52 := @caughtexception;

        r14 = $r52;

        exitmonitor r55;

     label21:
        throw r14;

     label22:
        return;

        catch java.lang.Throwable from label05 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Throwable from label04 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    private com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()
    {
        com.android.server.accounts.AccountManagerService r0;
        int $i0;
        com.android.server.accounts.AccountManagerService$UserAccounts $r1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i0);

        return $r1;
    }

    protected com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        android.util.SparseArray r1, $r4, $r5, $r7;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        java.lang.Throwable r3, $r8;
        java.lang.Object $r6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.accounts.AccountManagerService$UserAccounts) $r6;

        if r2 != null goto label2;

        r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts initUserLocked(int)>(i0);

        $r7 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        virtualinvoke $r7.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r2);

     label2:
        exitmonitor r1;

     label3:
        return r2;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r1;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void onUserRemoved(android.content.Intent)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.content.Intent r1;
        int i0;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        android.util.SparseArray r3, $r6, $r7, $r9;
        java.lang.Throwable r4, r5, $r16, $r17;
        java.lang.Object $r8, $r10, r19;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r11;
        java.io.File $r12, $r14, r18, r20;
        java.lang.String $r13, $r15;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.content.Intent;

        i0 = virtualinvoke r1.<android.content.Intent: int getIntExtra(java.lang.String,int)>("android.intent.extra.user_handle", -1);

        if i0 >= 1 goto label01;

        return;

     label01:
        $r6 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        r3 = $r6;

        entermonitor $r6;

     label02:
        $r7 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.accounts.AccountManagerService$UserAccounts) $r8;

        $r9 = r0.<com.android.server.accounts.AccountManagerService: android.util.SparseArray mUsers>;

        virtualinvoke $r9.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r3;

     label03:
        goto label06;

     label04:
        $r17 := @caughtexception;

        r4 = $r17;

        exitmonitor r3;

     label05:
        throw r4;

     label06:
        if r2 != null goto label07;

        $r14 = new java.io.File;

        $r15 = staticinvoke <com.android.server.accounts.AccountManagerService: java.lang.String getDatabaseName(int)>(i0);

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>($r15);

        r18 = $r14;

        virtualinvoke r18.<java.io.File: boolean delete()>();

        return;

     label07:
        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        r19 = $r10;

        entermonitor $r10;

     label08:
        $r11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        virtualinvoke $r11.<com.android.server.accounts.AccountManagerService$DatabaseHelper: void close()>();

        $r12 = new java.io.File;

        $r13 = staticinvoke <com.android.server.accounts.AccountManagerService: java.lang.String getDatabaseName(int)>(i0);

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r13);

        r20 = $r12;

        virtualinvoke r20.<java.io.File: boolean delete()>();

        exitmonitor r19;

     label09:
        goto label12;

     label10:
        $r16 := @caughtexception;

        r5 = $r16;

        exitmonitor r19;

     label11:
        throw r5;

     label12:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void onUserStarted(android.content.Intent)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.content.Intent r1;
        int i0, i1, i2, $i3;
        android.accounts.Account[] r2, r3, r4;
        android.accounts.Account r5;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.content.Intent;

        i0 = virtualinvoke r1.<android.content.Intent: int getIntExtra(java.lang.String,int)>("android.intent.extra.user_handle", -1);

        if i0 >= 1 goto label1;

        return;

     label1:
        r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getSharedAccountsAsUser(int)>(i0);

        if r2 == null goto label2;

        $i3 = lengthof r2;

        if $i3 != 0 goto label3;

     label2:
        return;

     label3:
        r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)>(null, i0);

        r4 = r2;

        i1 = lengthof r4;

        i2 = 0;

     label4:
        if i2 >= i1 goto label7;

        r5 = r4[i2];

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r3, r5);

        if $z0 == 0 goto label5;

        goto label6;

     label5:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean copyAccountToUser(android.accounts.Account,int,int)>(r5, 0, i0);

     label6:
        i2 = i2 + 1;

        goto label4;

     label7:
        return;
    }

    public void onServiceChanged(android.accounts.AuthenticatorDescription, int, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.AuthenticatorDescription r1;
        int i0;
        boolean z0;
        com.android.server.accounts.AccountManagerService$UserAccounts $r2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.AuthenticatorDescription;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void validateAccountsInternal(com.android.server.accounts.AccountManagerService$UserAccounts,boolean)>($r2, 0);

        return;
    }

    public java.lang.String getPassword(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        long l0;
        java.lang.String r3, $r13;
        java.lang.Throwable r4, $r14;
        boolean $z0;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int $i1, $i2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getPassword: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r13);

     label1:
        if r1 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r5;

     label2:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkAuthenticateAccountsPermission(android.accounts.Account)>(r1);

        r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label3:
        r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.String readPasswordInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r2, r1);

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        return r3;

     label5:
        $r14 := @caughtexception;

        r4 = $r14;

     label6:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r4;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private java.lang.String readPasswordInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.Object r3, $r9;
        android.database.sqlite.SQLiteDatabase r4;
        android.database.Cursor r5;
        java.lang.String r6, $r13, $r14;
        java.lang.Throwable r7, r8, $r15, $r16;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r10;
        java.lang.String[] $r11, $r12;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        if r2 != null goto label01;

        return null;

     label01:
        $r9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r3 = $r9;

        entermonitor $r9;

     label02:
        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r4 = virtualinvoke $r10.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "password";

        $r12 = newarray (java.lang.String)[2];

        $r13 = r2.<android.accounts.Account: java.lang.String name>;

        $r12[0] = $r13;

        $r14 = r2.<android.accounts.Account: java.lang.String type>;

        $r12[1] = $r14;

        r5 = virtualinvoke r4.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r11, "name=? AND type=?", $r12, null, null, null);

     label03:
        $z0 = interfaceinvoke r5.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label06;

        r6 = interfaceinvoke r5.<android.database.Cursor: java.lang.String getString(int)>(0);

     label04:
        interfaceinvoke r5.<android.database.Cursor: void close()>();

        exitmonitor r3;

     label05:
        return r6;

     label06:
        interfaceinvoke r5.<android.database.Cursor: void close()>();

        exitmonitor r3;

     label07:
        return null;

     label08:
        $r16 := @caughtexception;

        r7 = $r16;

     label09:
        interfaceinvoke r5.<android.database.Cursor: void close()>();

        throw r7;

     label10:
        $r15 := @caughtexception;

        r8 = $r15;

        exitmonitor r3;

     label11:
        throw r8;

        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label02 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label11 with label10;
    }

    public java.lang.String getPreviousName(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        long l0;
        java.lang.String r3, $r13;
        java.lang.Throwable r4, $r14;
        boolean $z0;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int $i1, $i2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getPreviousName: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r13);

     label1:
        if r1 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r5;

     label2:
        r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label3:
        r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.String readPreviousNameInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r2, r1);

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        return r3;

     label5:
        $r14 := @caughtexception;

        r4 = $r14;

     label6:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r4;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private java.lang.String readPreviousNameInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.Object r3, $r11, $r13, $r14;
        java.util.concurrent.atomic.AtomicReference r4, $r21, r25;
        android.database.sqlite.SQLiteDatabase r5;
        android.database.Cursor r6;
        java.lang.String r7, r8, $r16, $r18, $r20;
        java.lang.Throwable r9, r10, $r23, $r24;
        java.util.HashMap $r12, $r22;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r15;
        java.lang.String[] $r17, $r19;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        if r2 != null goto label01;

        return null;

     label01:
        $r11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r3 = $r11;

        entermonitor $r11;

     label02:
        $r12 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$900(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r13 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r4 = (java.util.concurrent.atomic.AtomicReference) $r13;

        if r4 != null goto label10;

        $r15 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r5 = virtualinvoke $r15.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r17 = newarray (java.lang.String)[1];

        $r17[0] = "previous_name";

        $r19 = newarray (java.lang.String)[2];

        $r18 = r2.<android.accounts.Account: java.lang.String name>;

        $r19[0] = $r18;

        $r20 = r2.<android.accounts.Account: java.lang.String type>;

        $r19[1] = $r20;

        r6 = virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r17, "name=? AND type=?", $r19, null, null, null);

     label03:
        $z0 = interfaceinvoke r6.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label06;

        r7 = interfaceinvoke r6.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r21 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r21.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(r7);

        r25 = $r21;

        $r22 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$900(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r22.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r25);

        r8 = r7;

     label04:
        interfaceinvoke r6.<android.database.Cursor: void close()>();

        exitmonitor r3;

     label05:
        return r8;

     label06:
        interfaceinvoke r6.<android.database.Cursor: void close()>();

        exitmonitor r3;

     label07:
        return null;

     label08:
        $r24 := @caughtexception;

        r9 = $r24;

     label09:
        interfaceinvoke r6.<android.database.Cursor: void close()>();

        throw r9;

     label10:
        $r14 = virtualinvoke r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r16 = (java.lang.String) $r14;

        exitmonitor r3;

     label11:
        return $r16;

     label12:
        $r23 := @caughtexception;

        r10 = $r23;

        exitmonitor r3;

     label13:
        throw r10;

        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label02 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public java.lang.String getUserData(android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, r4, $r17;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        long l0;
        java.lang.Throwable r5, $r18;
        boolean $z0;
        java.lang.IllegalArgumentException $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        int $i1, $i2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getUserData: ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", key ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r17);

     label1:
        if r1 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r7;

     label2:
        if r2 != null goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key is null");

        throw $r6;

     label3:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkAuthenticateAccountsPermission(android.accounts.Account)>(r1);

        r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label4:
        r4 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.String readUserDataInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)>(r3, r1, r2);

     label5:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        return r4;

     label6:
        $r18 := @caughtexception;

        r5 = $r18;

     label7:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r5;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public android.accounts.AuthenticatorDescription[] getAuthenticatorTypes(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i2, $i3, $i4, $i5, $i6;
        long l1;
        java.util.Collection r1;
        android.accounts.AuthenticatorDescription[] r2, r25;
        java.util.Iterator r3;
        android.content.pm.RegisteredServicesCache$ServiceInfo r4;
        java.lang.Throwable r5, $r22;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r15, $r17, $r18, $r19, $r20, $r21, $r23;
        java.lang.String $r10, $r24;
        com.android.server.accounts.IAccountAuthenticatorCache $r12;
        java.lang.Object $r13, $r14;
        android.accounts.AuthenticatorDescription $r16;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAuthenticatorTypes: for user id ");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("caller\'s uid ");

        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i5 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r24);

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        $i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trying get authenticator types for ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void enforceCrossUserPermission(int,java.lang.String)>(i0, $r10);

        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label2:
        $r12 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        r1 = interfaceinvoke $r12.<com.android.server.accounts.IAccountAuthenticatorCache: java.util.Collection getAllServices(int)>(i0);

        $i4 = interfaceinvoke r1.<java.util.Collection: int size()>();

        r2 = newarray (android.accounts.AuthenticatorDescription)[$i4];

        i2 = 0;

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r14 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.RegisteredServicesCache$ServiceInfo) $r14;

        $r13 = r4.<android.content.pm.RegisteredServicesCache$ServiceInfo: java.lang.Object type>;

        $r16 = (android.accounts.AuthenticatorDescription) $r13;

        r2[i2] = $r16;

        i2 = i2 + 1;

        goto label3;

     label4:
        r25 = r2;

     label5:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        return r25;

     label6:
        $r22 := @caughtexception;

        r5 = $r22;

     label7:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw r5;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void enforceCrossUserPermission(int, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String r1;
        android.content.Context $r2;
        java.lang.SecurityException $r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if i0 == $i1 goto label1;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = staticinvoke <android.os.Process: int myUid()>();

        if $i2 == $i3 goto label1;

        $r2 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $i4 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $i4 == 0 goto label1;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>(r1);

        throw $r3;

     label1:
        return;
    }

    public boolean addAccountExplicitly(android.accounts.Account, java.lang.String, android.os.Bundle)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, $r14;
        android.os.Bundle r3;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        long l0;
        boolean z0, $z1;
        java.lang.Throwable r5, $r15;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        int $i1, $i2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addAccountExplicitly: ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r14);

     label1:
        if r1 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r6;

     label2:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkAuthenticateAccountsPermission(android.accounts.Account)>(r1);

        r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label3:
        z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean addAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,android.os.Bundle,boolean)>(r4, r1, r2, r3, 0);

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        return z0;

     label5:
        $r15 := @caughtexception;

        r5 = $r15;

     label6:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r5;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean copyAccountToUser(android.accounts.Account, int, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0, i1;
        com.android.server.accounts.AccountManagerService$UserAccounts r2, r3;
        long l2;
        java.lang.Throwable r4, $r7;
        com.android.server.accounts.AccountManagerService$3 $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i1);

        if r2 == null goto label1;

        if r3 != null goto label2;

     label1:
        return 0;

     label2:
        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label3:
        $r5 = new com.android.server.accounts.AccountManagerService$3;

        $r6 = r1.<android.accounts.Account: java.lang.String type>;

        specialinvoke $r5.<com.android.server.accounts.AccountManagerService$3: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,android.accounts.Account,com.android.server.accounts.AccountManagerService$UserAccounts)>(r0, r2, null, $r6, 0, 0, r1, r3);

        virtualinvoke $r5.<com.android.server.accounts.AccountManagerService$3: void bind()>();

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        goto label7;

     label5:
        $r7 := @caughtexception;

        r4 = $r7;

     label6:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw r4;

     label7:
        return 1;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void completeCloningAccount(android.os.Bundle, android.accounts.Account, com.android.server.accounts.AccountManagerService$UserAccounts)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.os.Bundle r1;
        android.accounts.Account r2;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        long l0;
        java.lang.Throwable r4, $r7;
        com.android.server.accounts.AccountManagerService$4 $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.os.Bundle;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: com.android.server.accounts.AccountManagerService$UserAccounts;

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label1:
        $r5 = new com.android.server.accounts.AccountManagerService$4;

        $r6 = r2.<android.accounts.Account: java.lang.String type>;

        specialinvoke $r5.<com.android.server.accounts.AccountManagerService$4: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,android.accounts.Account,android.os.Bundle)>(r0, r3, null, $r6, 0, 0, r2, r1);

        virtualinvoke $r5.<com.android.server.accounts.AccountManagerService$4: void bind()>();

     label2:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        goto label5;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean addAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String, android.os.Bundle, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.String r3, r7, r8, $r13, $r15, $r17, $r18, $r27, $r32, $r37;
        android.os.Bundle r4;
        boolean z0, z1, z2, z3, $z4;
        java.lang.Object r5, $r10, $r20;
        android.database.sqlite.SQLiteDatabase r6;
        long l0, l1, $l6;
        java.lang.Throwable r9, r11, $r36, $r38;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r12;
        java.lang.String[] $r14;
        android.content.ContentValues $r16, r39;
        byte $b2, $b3, $b7;
        int $i4, $i5;
        java.util.Set $r19;
        java.lang.StringBuilder $r21, $r22, $r23, $r24, $r25, $r26, $r28, $r29, $r30, $r31, $r33, $r34, $r35;
        java.util.Iterator r40;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Bundle;

        z0 := @parameter4: boolean;

        if r2 != null goto label01;

        return 0;

     label01:
        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r5 = $r10;

        entermonitor $r10;

     label02:
        $r12 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r6 = virtualinvoke $r12.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label03:
        $r14 = newarray (java.lang.String)[2];

        $r13 = r2.<android.accounts.Account: java.lang.String name>;

        $r14[0] = $r13;

        $r15 = r2.<android.accounts.Account: java.lang.String type>;

        $r14[1] = $r15;

        l0 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r6, "select count(*) from accounts WHERE name=? AND type=?", $r14);

        $b2 = l0 cmp 0L;

        if $b2 <= 0 goto label06;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("insertAccountIntoDatabase: ");

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", skipping since the account already exists");

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r37);

        z1 = 0;

     label04:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        exitmonitor r5;

     label05:
        return z1;

     label06:
        $r16 = new android.content.ContentValues;

        specialinvoke $r16.<android.content.ContentValues: void <init>()>();

        r39 = $r16;

        $r18 = r2.<android.accounts.Account: java.lang.String name>;

        virtualinvoke r39.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", $r18);

        $r17 = r2.<android.accounts.Account: java.lang.String type>;

        virtualinvoke r39.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("type", $r17);

        virtualinvoke r39.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("password", r3);

        l1 = virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("accounts", "name", r39);

        $b3 = l1 cmp 0L;

        if $b3 >= 0 goto label09;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("insertAccountIntoDatabase: ");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", skipping the DB insert failed");

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r32);

        z2 = 0;

     label07:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        exitmonitor r5;

     label08:
        return z2;

     label09:
        if r4 == null goto label14;

        $r19 = virtualinvoke r4.<android.os.Bundle: java.util.Set keySet()>();

        r40 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z4 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label14;

        $r20 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r20;

        r8 = virtualinvoke r4.<android.os.Bundle: java.lang.String getString(java.lang.String)>(r7);

        $l6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: long insertExtraLocked(android.database.sqlite.SQLiteDatabase,long,java.lang.String,java.lang.String)>(r6, l1, r7, r8);

        $b7 = $l6 cmp 0L;

        if $b7 >= 0 goto label13;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("insertAccountIntoDatabase: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r22 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", skipping since insertExtra failed for key ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r27);

        z3 = 0;

     label11:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        exitmonitor r5;

     label12:
        return z3;

     label13:
        goto label10;

     label14:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void insertAccountIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r1, r2);

     label15:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        goto label18;

     label16:
        $r38 := @caughtexception;

        r9 = $r38;

     label17:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw r9;

     label18:
        $i5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i5);

        exitmonitor r5;

     label19:
        goto label22;

     label20:
        $r36 := @caughtexception;

        r11 = $r36;

        exitmonitor r5;

     label21:
        throw r11;

     label22:
        $i4 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        if $i4 != 0 goto label23;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void addAccountToLimitedUsers(android.accounts.Account)>(r2);

     label23:
        return 1;

        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label09 to label11 with label16;
        catch java.lang.Throwable from label13 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Throwable from label02 to label05 with label20;
        catch java.lang.Throwable from label06 to label08 with label20;
        catch java.lang.Throwable from label09 to label12 with label20;
        catch java.lang.Throwable from label13 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    private void addAccountToLimitedUsers(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.util.List r2;
        java.util.Iterator r3;
        android.content.pm.UserInfo r4;
        android.os.UserManager $r6;
        boolean $z0, $z1, $z3;
        java.lang.Object $r7;
        int $i0, $i1, $i2;
        android.app.IActivityManager $r8;
        com.android.server.accounts.AccountManagerService$MessageHandler $r9, $r10;
        android.os.Message $r11;
        android.os.RemoteException $r12;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        $r6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        r2 = virtualinvoke $r6.<android.os.UserManager: java.util.List getUsers()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.UserInfo) $r7;

        $z1 = virtualinvoke r4.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z1 == 0 goto label5;

        $i0 = r4.<android.content.pm.UserInfo: int id>;

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: boolean addSharedAccountAsUser(android.accounts.Account,int)>(r1, $i0);

     label2:
        $r8 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i1 = r4.<android.content.pm.UserInfo: int id>;

        $z3 = interfaceinvoke $r8.<android.app.IActivityManager: boolean isUserRunning(int,boolean)>($i1, 0);

        if $z3 == 0 goto label3;

        $r9 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$MessageHandler mMessageHandler>;

        $r10 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$MessageHandler mMessageHandler>;

        $i2 = r4.<android.content.pm.UserInfo: int id>;

        $r11 = virtualinvoke $r10.<com.android.server.accounts.AccountManagerService$MessageHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(4, 0, $i2, r1);

        virtualinvoke $r9.<com.android.server.accounts.AccountManagerService$MessageHandler: boolean sendMessage(android.os.Message)>($r11);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

     label5:
        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private long insertExtraLocked(android.database.sqlite.SQLiteDatabase, long, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.database.sqlite.SQLiteDatabase r1;
        long l0, $l1;
        java.lang.String r2, r3;
        android.content.ContentValues r4, $r5;
        java.lang.Long $r6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        r4 = $r5;

        virtualinvoke r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("key", r2);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("accounts_id", $r6);

        virtualinvoke r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("value", r3);

        $l1 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("extras", "key", r4);

        return $l1;
    }

    public void hasFeatures(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String[])
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        android.accounts.Account r2;
        java.lang.String[] r3;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        long l0;
        java.lang.Throwable r5, $r23;
        boolean $z0;
        com.android.server.accounts.AccountManagerService$TestFeaturesSession $r6;
        java.lang.IllegalArgumentException $r7, $r8, $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21;
        java.lang.String $r17, $r22;
        int $i1, $i2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.String[];

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hasFeatures: ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", features ");

        $r17 = staticinvoke <com.android.server.accounts.AccountManagerService: java.lang.String stringArrayToString(java.lang.String[])>(r3);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r22);

     label1:
        if r1 != null goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r9;

     label2:
        if r2 != null goto label3;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r8;

     label3:
        if r3 != null goto label4;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("features is null");

        throw $r7;

     label4:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkReadAccountsPermission()>();

        r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label5:
        $r6 = new com.android.server.accounts.AccountManagerService$TestFeaturesSession;

        specialinvoke $r6.<com.android.server.accounts.AccountManagerService$TestFeaturesSession: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])>(r0, r4, r1, r2, r3);

        virtualinvoke $r6.<com.android.server.accounts.AccountManagerService$TestFeaturesSession: void bind()>();

     label6:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        goto label9;

     label7:
        $r23 := @caughtexception;

        r5 = $r23;

     label8:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r5;

     label9:
        return;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void renameAccount(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        android.accounts.Account r2, r5;
        java.lang.String r3, $r10, $r11, $r21, $r25;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        long l0;
        android.os.Bundle r6, $r9;
        android.os.RemoteException r7, $r23;
        java.lang.Throwable r8, $r24;
        boolean $z0;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r22;
        java.lang.IllegalArgumentException $r13;
        int $i1, $i2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.String;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label01;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("renameAccount: ");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r21);

     label01:
        if r2 != null goto label02;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r13;

     label02:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkAuthenticateAccountsPermission(android.accounts.Account)>(r2);

        r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label03:
        r5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account renameAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)>(r4, r2, r3);

        $r9 = new android.os.Bundle;

        specialinvoke $r9.<android.os.Bundle: void <init>()>();

        r6 = $r9;

        $r11 = r5.<android.accounts.Account: java.lang.String name>;

        virtualinvoke r6.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("authAccount", $r11);

        $r10 = r5.<android.accounts.Account: java.lang.String type>;

        virtualinvoke r6.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("accountType", $r10);

     label04:
        interfaceinvoke r1.<android.accounts.IAccountManagerResponse: void onResult(android.os.Bundle)>(r6);

     label05:
        goto label07;

     label06:
        $r23 := @caughtexception;

        r7 = $r23;

        $r25 = virtualinvoke r7.<android.os.RemoteException: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r25);

     label07:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        goto label10;

     label08:
        $r24 := @caughtexception;

        r8 = $r24;

     label09:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r8;

     label10:
        return;

        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private android.accounts.Account renameAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2, r4, $r25, r73;
        java.lang.String r3, $r26, $r29, $r37, $r49, $r64;
        java.util.HashMap r5, r13, r15, $r21, $r23, $r31, $r32, $r34, $r36, $r39, $r52, $r56, $r58, $r62, $r66, $r68, r75, r76;
        java.util.Iterator r6, r17, r77;
        android.util.Pair r7, $r46;
        int i0, $i2, $i3, $i5, $i6, $i7, $i9, $i10, $i11, $i12;
        java.lang.Throwable r8, r12, r19, $r51, $r59, $r60;
        long l1;
        java.util.List r9, r14;
        java.lang.String[] r10, $r48;
        android.content.pm.UserInfo r11, r16;
        java.lang.Integer $r18, $r54;
        android.os.UserHandle $r20, $r50;
        java.util.Set $r22;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z7, $z9, z10;
        java.lang.Object $r24, $r30, $r35, $r43, $r44, $r45, $r47, $r53, $r55, $r57, $r69, r71;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r27;
        byte $b4;
        android.content.ContentValues $r28, r74;
        java.util.concurrent.atomic.AtomicReference $r38, $r61;
        android.os.UserManager $r41, $r70;
        android.database.sqlite.SQLiteDatabase r72;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.String;

        r4 = null;

        $r18 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer getSigninRequiredNotificationId(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r1, r2);

        $i2 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        $r20 = new android.os.UserHandle;

        $i3 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        specialinvoke $r20.<android.os.UserHandle: void <init>(int)>($i3);

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(int,android.os.UserHandle)>($i2, $r20);

        $r21 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r5 = $r21;

        entermonitor $r21;

     label01:
        $r23 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r22 = virtualinvoke $r23.<java.util.HashMap: java.util.Set keySet()>();

        r6 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r44 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.util.Pair) $r44;

        $r45 = r7.<android.util.Pair: java.lang.Object first>;

        $r46 = (android.util.Pair) $r45;

        $r47 = $r46.<android.util.Pair: java.lang.Object first>;

        $z5 = virtualinvoke r2.<android.accounts.Account: boolean equals(java.lang.Object)>($r47);

        if $z5 == 0 goto label03;

        $r52 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r53 = virtualinvoke $r52.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r7);

        $r54 = (java.lang.Integer) $r53;

        i0 = virtualinvoke $r54.<java.lang.Integer: int intValue()>();

        $r50 = new android.os.UserHandle;

        $i9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        specialinvoke $r50.<android.os.UserHandle: void <init>(int)>($i9);

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(int,android.os.UserHandle)>(i0, $r50);

     label03:
        goto label02;

     label04:
        exitmonitor r5;

     label05:
        goto label08;

     label06:
        $r51 := @caughtexception;

        r8 = $r51;

        exitmonitor r5;

     label07:
        throw r8;

     label08:
        $r24 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r71 = $r24;

        entermonitor $r24;

     label09:
        $r27 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r72 = virtualinvoke $r27.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke r72.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

        z10 = 0;

        $r25 = new android.accounts.Account;

        $r26 = r2.<android.accounts.Account: java.lang.String type>;

        specialinvoke $r25.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>(r3, $r26);

        r73 = $r25;

     label10:
        $r28 = new android.content.ContentValues;

        specialinvoke $r28.<android.content.ContentValues: void <init>()>();

        r74 = $r28;

        virtualinvoke r74.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", r3);

        $r29 = r2.<android.accounts.Account: java.lang.String name>;

        virtualinvoke r74.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("previous_name", $r29);

        l1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: long getAccountIdLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)>(r72, r2);

        $b4 = l1 cmp 0L;

        if $b4 < 0 goto label11;

        $r48 = newarray (java.lang.String)[1];

        $r49 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        $r48[0] = $r49;

        r10 = $r48;

        virtualinvoke r72.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("accounts", r74, "_id=?", r10);

        virtualinvoke r72.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

        z10 = 1;

     label11:
        virtualinvoke r72.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        if z10 == 0 goto label21;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void insertAccountIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r1, r73);

        $r32 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$700(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r30 = virtualinvoke $r32.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r75 = (java.util.HashMap) $r30;

        $r31 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r35 = virtualinvoke $r31.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r76 = (java.util.HashMap) $r35;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void removeAccountFromCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r1, r2);

        $r36 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$700(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r36.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r73, r75);

        $r34 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r34.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r73, r76);

        $r39 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$900(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r38 = new java.util.concurrent.atomic.AtomicReference;

        $r37 = r2.<android.accounts.Account: java.lang.String name>;

        specialinvoke $r38.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r37);

        virtualinvoke $r39.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r73, $r38);

        r4 = r73;

        $i6 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        if $i6 != 0 goto label14;

        $r41 = r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager mUserManager>;

        r9 = virtualinvoke $r41.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        r77 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z1 = interfaceinvoke r77.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r43 = interfaceinvoke r77.<java.util.Iterator: java.lang.Object next()>();

        r11 = (android.content.pm.UserInfo) $r43;

        $z4 = virtualinvoke r11.<android.content.pm.UserInfo: boolean isPrimary()>();

        if $z4 != 0 goto label13;

        $z3 = virtualinvoke r11.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z3 == 0 goto label13;

        $i7 = r11.<android.content.pm.UserInfo: int id>;

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: boolean renameSharedAccountAsUser(android.accounts.Account,java.lang.String,int)>(r2, r3, $i7);

     label13:
        goto label12;

     label14:
        $i5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i5);

        goto label21;

     label15:
        $r60 := @caughtexception;

        r12 = $r60;

     label16:
        virtualinvoke r72.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        if z10 == 0 goto label20;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void insertAccountIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r1, r73);

        $r56 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$700(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r55 = virtualinvoke $r56.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r13 = (java.util.HashMap) $r55;

        $r58 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r57 = virtualinvoke $r58.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r15 = (java.util.HashMap) $r57;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void removeAccountFromCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r1, r2);

        $r66 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$700(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r66.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r73, r13);

        $r68 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r68.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r73, r15);

        $r62 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$900(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r61 = new java.util.concurrent.atomic.AtomicReference;

        $r64 = r2.<android.accounts.Account: java.lang.String name>;

        specialinvoke $r61.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r64);

        virtualinvoke $r62.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r73, $r61);

        $i10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        if $i10 != 0 goto label19;

        $r70 = r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager mUserManager>;

        r14 = virtualinvoke $r70.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        r17 = interfaceinvoke r14.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z7 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label19;

        $r69 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r16 = (android.content.pm.UserInfo) $r69;

        $z6 = virtualinvoke r16.<android.content.pm.UserInfo: boolean isPrimary()>();

        if $z6 != 0 goto label18;

        $z9 = virtualinvoke r16.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z9 == 0 goto label18;

        $i12 = r16.<android.content.pm.UserInfo: int id>;

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: boolean renameSharedAccountAsUser(android.accounts.Account,java.lang.String,int)>(r2, r3, $i12);

     label18:
        goto label17;

     label19:
        $i11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i11);

     label20:
        throw r12;

     label21:
        exitmonitor r71;

     label22:
        goto label25;

     label23:
        $r59 := @caughtexception;

        r19 = $r59;

        exitmonitor r71;

     label24:
        throw r19;

     label25:
        return r4;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Throwable from label09 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
    }

    public void removeAccount(android.accounts.IAccountManagerResponse, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        android.accounts.Account r2;
        android.os.UserHandle r3, $r11;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        int i0, i1, $i2, $i3, $i4;
        java.util.HashMap r6, $r14, $r16, $r24;
        java.util.Iterator r7;
        android.util.Pair r8, $r18;
        java.lang.Throwable r9, r10, $r38, $r40;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r12, $r34;
        java.lang.Integer $r13, $r23;
        java.util.Set $r15;
        com.android.server.accounts.AccountManagerService$RemoveAccountSession $r17;
        java.lang.Object $r19, $r20, $r21, $r22;
        java.lang.IllegalArgumentException $r25, $r27;
        java.lang.StringBuilder $r26, $r28, $r29, $r30, $r31, $r32, $r33, $r35, $r36;
        android.os.RemoteException $r37, $r39;
        long l6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: android.accounts.Account;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label01;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeAccount: ");

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r34);

     label01:
        if r1 != null goto label02;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r25;

     label02:
        if r2 != null goto label03;

        $r27 = new java.lang.IllegalArgumentException;

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r27;

     label03:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkManageAccountsPermission()>();

        r3 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        $r11 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        i0 = virtualinvoke $r11.<android.os.UserHandle: int getIdentifier()>();

        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccounts(int)>(i0);

        if $z1 != 0 goto label08;

     label04:
        interfaceinvoke r1.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(6, "User cannot modify accounts");

     label05:
        goto label07;

     label06:
        $r39 := @caughtexception;

     label07:
        return;

     label08:
        $r12 = r2.<android.accounts.Account: java.lang.String type>;

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccountsForType(int,java.lang.String)>(i0, $r12);

        if $z2 != 0 goto label13;

     label09:
        interfaceinvoke r1.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(101, "User cannot modify accounts of this type (policy).");

     label10:
        goto label12;

     label11:
        $r37 := @caughtexception;

     label12:
        return;

     label13:
        l6 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

        $r13 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer getSigninRequiredNotificationId(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r4, r2);

        $i2 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(int,android.os.UserHandle)>($i2, r3);

        $r14 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r4);

        r6 = $r14;

        entermonitor $r14;

     label14:
        $r16 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r4);

        $r15 = virtualinvoke $r16.<java.util.HashMap: java.util.Set keySet()>();

        r7 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label15:
        $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label17;

        $r20 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (android.util.Pair) $r20;

        $r21 = r8.<android.util.Pair: java.lang.Object first>;

        $r18 = (android.util.Pair) $r21;

        $r19 = $r18.<android.util.Pair: java.lang.Object first>;

        $z4 = virtualinvoke r2.<android.accounts.Account: boolean equals(java.lang.Object)>($r19);

        if $z4 == 0 goto label16;

        $r24 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r4);

        $r22 = virtualinvoke $r24.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r8);

        $r23 = (java.lang.Integer) $r22;

        i1 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(int,android.os.UserHandle)>(i1, r3);

     label16:
        goto label15;

     label17:
        exitmonitor r6;

     label18:
        goto label21;

     label19:
        $r40 := @caughtexception;

        r9 = $r40;

        exitmonitor r6;

     label20:
        throw r9;

     label21:
        $r17 = new com.android.server.accounts.AccountManagerService$RemoveAccountSession;

        specialinvoke $r17.<com.android.server.accounts.AccountManagerService$RemoveAccountSession: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,android.accounts.Account)>(r0, r4, r1, r2);

        virtualinvoke $r17.<com.android.server.accounts.AccountManagerService$RemoveAccountSession: void bind()>();

     label22:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l6);

        goto label25;

     label23:
        $r38 := @caughtexception;

        r10 = $r38;

     label24:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l6);

        throw r10;

     label25:
        return;

        catch android.os.RemoteException from label04 to label05 with label06;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch java.lang.Throwable from label14 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
    }

    public void removeAccountAsUser(android.accounts.IAccountManagerResponse, android.accounts.Account, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        android.accounts.Account r2;
        int i0, i2, $i3, $i4, $i5, $i6;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        long l1;
        java.util.HashMap r5, $r19, $r20, $r26;
        java.util.Iterator r6;
        android.util.Pair r7, $r23;
        java.lang.Throwable r8, r9, $r44, $r47;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r15, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r42, $r43;
        java.lang.String $r14, $r16, $r41;
        android.os.UserHandle $r17, r49;
        java.lang.Integer $r18, $r31;
        java.util.Set $r21;
        java.lang.Object $r22, $r25, $r27, $r28;
        com.android.server.accounts.AccountManagerService$RemoveAccountSession $r24;
        java.lang.IllegalArgumentException $r29, $r30;
        android.os.RemoteException $r45, $r46;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: android.accounts.Account;

        i0 := @parameter2: int;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label01;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeAccount: ");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i6 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r43 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for user id ");

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r41);

     label01:
        if r1 != null goto label02;

        $r30 = new java.lang.IllegalArgumentException;

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r30;

     label02:
        if r2 != null goto label03;

        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r29;

     label03:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        $i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trying to remove account for ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void enforceCrossUserPermission(int,java.lang.String)>(i0, $r14);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkManageAccountsPermission()>();

        r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        $z1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccounts(int)>(i0);

        if $z1 != 0 goto label08;

     label04:
        interfaceinvoke r1.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(100, "User cannot modify accounts");

     label05:
        goto label07;

     label06:
        $r45 := @caughtexception;

     label07:
        return;

     label08:
        $r16 = r2.<android.accounts.Account: java.lang.String type>;

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccountsForType(int,java.lang.String)>(i0, $r16);

        if $z2 != 0 goto label13;

     label09:
        interfaceinvoke r1.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(101, "User cannot modify accounts of this type (policy).");

     label10:
        goto label12;

     label11:
        $r46 := @caughtexception;

     label12:
        return;

     label13:
        $r17 = new android.os.UserHandle;

        specialinvoke $r17.<android.os.UserHandle: void <init>(int)>(i0);

        r49 = $r17;

        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

        $r18 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer getSigninRequiredNotificationId(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r3, r2);

        $i4 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(int,android.os.UserHandle)>($i4, r49);

        $r20 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        r5 = $r20;

        entermonitor $r20;

     label14:
        $r19 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        $r21 = virtualinvoke $r19.<java.util.HashMap: java.util.Set keySet()>();

        r6 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label15:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label17;

        $r25 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.util.Pair) $r25;

        $r22 = r7.<android.util.Pair: java.lang.Object first>;

        $r23 = (android.util.Pair) $r22;

        $r28 = $r23.<android.util.Pair: java.lang.Object first>;

        $z4 = virtualinvoke r2.<android.accounts.Account: boolean equals(java.lang.Object)>($r28);

        if $z4 == 0 goto label16;

        $r26 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        $r27 = virtualinvoke $r26.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r7);

        $r31 = (java.lang.Integer) $r27;

        i2 = virtualinvoke $r31.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(int,android.os.UserHandle)>(i2, r49);

     label16:
        goto label15;

     label17:
        exitmonitor r5;

     label18:
        goto label21;

     label19:
        $r47 := @caughtexception;

        r8 = $r47;

        exitmonitor r5;

     label20:
        throw r8;

     label21:
        $r24 = new com.android.server.accounts.AccountManagerService$RemoveAccountSession;

        specialinvoke $r24.<com.android.server.accounts.AccountManagerService$RemoveAccountSession: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,android.accounts.Account)>(r0, r3, r1, r2);

        virtualinvoke $r24.<com.android.server.accounts.AccountManagerService$RemoveAccountSession: void bind()>();

     label22:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        goto label25;

     label23:
        $r44 := @caughtexception;

        r9 = $r44;

     label24:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw r9;

     label25:
        return;

        catch android.os.RemoteException from label04 to label05 with label06;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch java.lang.Throwable from label14 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
    }

    protected void removeAccountInternal(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        com.android.server.accounts.AccountManagerService$UserAccounts $r2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        $r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void removeAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>($r2, r1);

        return;
    }

    private void removeAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.Object r3, $r9, $r15;
        android.database.sqlite.SQLiteDatabase r4;
        java.lang.Throwable r5, r8, $r16, $r17;
        java.util.Iterator r6;
        android.content.pm.UserInfo r7;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r10;
        java.lang.String[] $r11;
        java.lang.String $r12, $r13;
        int $i1, $i2, $i3;
        android.os.UserManager $r14;
        boolean $z0, $z1, $z2;
        long l4;
        java.util.List r18;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        $r9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r3 = $r9;

        entermonitor $r9;

     label01:
        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r4 = virtualinvoke $r10.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r11 = newarray (java.lang.String)[2];

        $r12 = r2.<android.accounts.Account: java.lang.String name>;

        $r11[0] = $r12;

        $r13 = r2.<android.accounts.Account: java.lang.String type>;

        $r11[1] = $r13;

        virtualinvoke r4.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("accounts", "name=? AND type=?", $r11);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void removeAccountFromCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r1, r2);

        $i1 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i1);

        exitmonitor r3;

     label02:
        goto label05;

     label03:
        $r17 := @caughtexception;

        r5 = $r17;

        exitmonitor r3;

     label04:
        throw r5;

     label05:
        $i2 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        if $i2 != 0 goto label12;

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        $r14 = r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager mUserManager>;

        r18 = virtualinvoke $r14.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        r6 = interfaceinvoke r18.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r15 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.content.pm.UserInfo) $r15;

        $z1 = virtualinvoke r7.<android.content.pm.UserInfo: boolean isPrimary()>();

        if $z1 != 0 goto label08;

        $z2 = virtualinvoke r7.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z2 == 0 goto label08;

        $i3 = r7.<android.content.pm.UserInfo: int id>;

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: boolean removeSharedAccountAsUser(android.accounts.Account,int)>(r2, $i3);

     label08:
        goto label07;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        goto label12;

     label10:
        $r16 := @caughtexception;

        r8 = $r16;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        throw r8;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void invalidateAuthToken(java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r2, $r20;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        long l0;
        java.lang.Object r4, $r9;
        android.database.sqlite.SQLiteDatabase r5;
        java.lang.Throwable r6, r7, r8, $r21, $r22, $r23;
        boolean $z0;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r10;
        java.lang.IllegalArgumentException $r11, $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        int $i1, $i2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label01;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalidateAuthToken: accountType ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r20);

     label01:
        if r1 != null goto label02;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r11;

     label02:
        if r2 != null goto label03;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("authToken is null");

        throw $r12;

     label03:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkManageAccountsOrUseCredentialsPermissions()>();

        r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label04:
        $r9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        r4 = $r9;

        entermonitor $r9;

     label05:
        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        r5 = virtualinvoke $r10.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label06:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void invalidateAuthTokenLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)>(r3, r5, r1, r2);

        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label07:
        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        goto label10;

     label08:
        $r21 := @caughtexception;

        r6 = $r21;

     label09:
        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw r6;

     label10:
        exitmonitor r4;

     label11:
        goto label14;

     label12:
        $r23 := @caughtexception;

        r7 = $r23;

        exitmonitor r4;

     label13:
        throw r7;

     label14:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        goto label17;

     label15:
        $r22 := @caughtexception;

        r8 = $r22;

     label16:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r8;

     label17:
        return;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label05 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label04 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private void invalidateAuthTokenLocked(com.android.server.accounts.AccountManagerService$UserAccounts, android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.database.sqlite.SQLiteDatabase r2;
        java.lang.String r3, r4, r6, r7, $r12;
        android.database.Cursor r5;
        long l0;
        java.lang.Throwable r8, $r15;
        java.lang.String[] $r9;
        boolean $z0;
        java.lang.StringBuilder $r10, $r11, $r13;
        android.accounts.Account $r14;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.database.sqlite.SQLiteDatabase;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        if r4 == null goto label1;

        if r3 != null goto label2;

     label1:
        return;

     label2:
        $r9 = newarray (java.lang.String)[2];

        $r9[0] = r4;

        $r9[1] = r3;

        r5 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT authtokens._id, accounts.name, authtokens.type FROM accounts JOIN authtokens ON accounts._id = accounts_id WHERE authtoken = ? AND accounts.type = ?", $r9);

     label3:
        $z0 = interfaceinvoke r5.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label4;

        l0 = interfaceinvoke r5.<android.database.Cursor: long getLong(int)>(0);

        r6 = interfaceinvoke r5.<android.database.Cursor: java.lang.String getString(int)>(1);

        r7 = interfaceinvoke r5.<android.database.Cursor: java.lang.String getString(int)>(2);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id=");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("authtokens", $r12, null);

        $r14 = new android.accounts.Account;

        specialinvoke $r14.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>(r6, r3);

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void writeAuthTokenIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.database.sqlite.SQLiteDatabase,android.accounts.Account,java.lang.String,java.lang.String)>(r1, r2, $r14, r7, null);

        goto label3;

     label4:
        interfaceinvoke r5.<android.database.Cursor: void close()>();

        goto label7;

     label5:
        $r15 := @caughtexception;

        r8 = $r15;

     label6:
        interfaceinvoke r5.<android.database.Cursor: void close()>();

        throw r8;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean saveAuthTokenToDatabase(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.String r3, r4, $r18;
        java.lang.Object r5, $r11;
        android.database.sqlite.SQLiteDatabase r6;
        long l0, $l5;
        boolean z0, z1, z2;
        java.lang.Throwable r7, r8, $r23, $r24;
        java.lang.Integer $r9;
        int $i1, $i2;
        android.os.UserHandle $r10;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r12;
        byte $b3, $b6;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r19;
        java.lang.String[] $r20;
        java.lang.Long $r21;
        android.content.ContentValues $r22, r25;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        if r2 == null goto label01;

        if r3 != null goto label02;

     label01:
        return 0;

     label02:
        $r9 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer getSigninRequiredNotificationId(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r1, r2);

        $i1 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $r10 = new android.os.UserHandle;

        $i2 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        specialinvoke $r10.<android.os.UserHandle: void <init>(int)>($i2);

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(int,android.os.UserHandle)>($i1, $r10);

        $r11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r5 = $r11;

        entermonitor $r11;

     label03:
        $r12 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r6 = virtualinvoke $r12.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label04:
        l0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: long getAccountIdLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)>(r6, r2);

        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label07;

        z0 = 0;

     label05:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        exitmonitor r5;

     label06:
        return z0;

     label07:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("accounts_id=");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("type");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = newarray (java.lang.String)[1];

        $r20[0] = r3;

        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("authtokens", $r18, $r20);

        $r22 = new android.content.ContentValues;

        specialinvoke $r22.<android.content.ContentValues: void <init>()>();

        r25 = $r22;

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r25.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("accounts_id", $r21);

        virtualinvoke r25.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("type", r3);

        virtualinvoke r25.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("authtoken", r4);

        $l5 = virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("authtokens", "authtoken", r25);

        $b6 = $l5 cmp 0L;

        if $b6 < 0 goto label10;

        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void writeAuthTokenIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.database.sqlite.SQLiteDatabase,android.accounts.Account,java.lang.String,java.lang.String)>(r1, r6, r2, r3, r4);

        z1 = 1;

     label08:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        exitmonitor r5;

     label09:
        return z1;

     label10:
        z2 = 0;

     label11:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        exitmonitor r5;

     label12:
        return z2;

     label13:
        $r23 := @caughtexception;

        r7 = $r23;

     label14:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw r7;

     label15:
        $r24 := @caughtexception;

        r8 = $r24;

        exitmonitor r5;

     label16:
        throw r8;

        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label03 to label06 with label15;
        catch java.lang.Throwable from label07 to label09 with label15;
        catch java.lang.Throwable from label10 to label12 with label15;
        catch java.lang.Throwable from label13 to label16 with label15;
    }

    public java.lang.String peekAuthToken(android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, r4, $r17;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        long l0;
        java.lang.Throwable r5, $r18;
        boolean $z0;
        java.lang.IllegalArgumentException $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        int $i1, $i2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("peekAuthToken: ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r17);

     label1:
        if r1 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r7;

     label2:
        if r2 != null goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("authTokenType is null");

        throw $r6;

     label3:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkAuthenticateAccountsPermission(android.accounts.Account)>(r1);

        r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label4:
        r4 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.String readAuthTokenInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)>(r3, r1, r2);

     label5:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        return r4;

     label6:
        $r18 := @caughtexception;

        r5 = $r18;

     label7:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r5;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setAuthToken(android.accounts.Account, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, r3, $r17;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        long l0;
        java.lang.Throwable r5, $r18;
        boolean $z0;
        java.lang.IllegalArgumentException $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        int $i1, $i2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAuthToken: ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r17);

     label1:
        if r1 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r7;

     label2:
        if r2 != null goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("authTokenType is null");

        throw $r6;

     label3:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkAuthenticateAccountsPermission(android.accounts.Account)>(r1);

        r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label4:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean saveAuthTokenToDatabase(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)>(r4, r1, r2, r3);

     label5:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        goto label8;

     label6:
        $r18 := @caughtexception;

        r5 = $r18;

     label7:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r5;

     label8:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setPassword(android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, $r12;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        long l0;
        java.lang.Throwable r4, $r14;
        boolean $z0;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r13;
        int $i1, $i2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAuthToken: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r12);

     label1:
        if r1 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r5;

     label2:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkAuthenticateAccountsPermission(android.accounts.Account)>(r1);

        r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label3:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void setPasswordInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)>(r3, r1, r2);

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        goto label7;

     label5:
        $r14 := @caughtexception;

        r4 = $r14;

     label6:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void setPasswordInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.String r3, $r14;
        java.lang.Object r4, $r10;
        android.database.sqlite.SQLiteDatabase r5;
        android.content.ContentValues r6, $r12;
        long l0;
        java.lang.String[] r7, $r13;
        java.lang.Throwable r8, r9, $r16, $r18;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r11;
        byte $b1;
        int $i2;
        java.util.HashMap $r15;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.String;

        if r2 != null goto label01;

        return;

     label01:
        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r4 = $r10;

        entermonitor $r10;

     label02:
        $r11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r5 = virtualinvoke $r11.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label03:
        $r12 = new android.content.ContentValues;

        specialinvoke $r12.<android.content.ContentValues: void <init>()>();

        r6 = $r12;

        virtualinvoke r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("password", r3);

        l0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: long getAccountIdLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)>(r5, r2);

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label04;

        $r13 = newarray (java.lang.String)[1];

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r13[0] = $r14;

        r7 = $r13;

        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("accounts", r6, "_id=?", r7);

        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("authtokens", "accounts_id=?", r7);

        $r15 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label04:
        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        goto label07;

     label05:
        $r18 := @caughtexception;

        r8 = $r18;

     label06:
        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw r8;

     label07:
        $i2 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)>($i2);

        exitmonitor r4;

     label08:
        goto label11;

     label09:
        $r16 := @caughtexception;

        r9 = $r16;

        exitmonitor r4;

     label10:
        throw r9;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void sendAccountsChangedBroadcast(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r5;
        android.content.Intent $r3, $r9;
        java.lang.String $r4, $r6;
        android.os.UserHandle $r7;
        android.content.Context $r8;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the accounts changed, sending broadcast of ");

        $r3 = <com.android.server.accounts.AccountManagerService: android.content.Intent ACCOUNTS_CHANGED_INTENT>;

        $r4 = virtualinvoke $r3.<android.content.Intent: java.lang.String getAction()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AccountManagerService", $r6);

        $r8 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r9 = <com.android.server.accounts.AccountManagerService: android.content.Intent ACCOUNTS_CHANGED_INTENT>;

        $r7 = new android.os.UserHandle;

        specialinvoke $r7.<android.os.UserHandle: void <init>(int)>(i0);

        virtualinvoke $r8.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r9, $r7);

        return;
    }

    public void clearPassword(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        long l0;
        java.lang.Throwable r3, $r13;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        int $i1, $i2;
        java.lang.String $r12;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clearPassword: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r12);

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r4;

     label2:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkManageAccountsPermission()>();

        r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label3:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void setPasswordInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)>(r2, r1, null);

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        goto label7;

     label5:
        $r13 := @caughtexception;

        r3 = $r13;

     label6:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setUserData(android.accounts.Account, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, r3, $r16;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        long l0;
        java.lang.Throwable r5, $r18;
        boolean $z0;
        java.lang.IllegalArgumentException $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17;
        int $i1, $i2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setUserData: ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", key ");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r16);

     label1:
        if r2 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key is null");

        throw $r7;

     label2:
        if r1 != null goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r6;

     label3:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkAuthenticateAccountsPermission(android.accounts.Account)>(r1);

        r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label4:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void setUserdataInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)>(r4, r1, r2, r3);

     label5:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        goto label8;

     label6:
        $r18 := @caughtexception;

        r5 = $r18;

     label7:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r5;

     label8:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void setUserdataInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.String r3, r4, $r15;
        java.lang.Object r5, $r10;
        android.database.sqlite.SQLiteDatabase r6;
        long l0, l1, l6;
        android.content.ContentValues r7, $r12;
        java.lang.Throwable r8, r9, $r17, $r18;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r11;
        byte $b2, $b3, $b5;
        java.lang.StringBuilder $r13, $r14, $r16;
        int $i4;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        if r2 == null goto label01;

        if r3 != null goto label02;

     label01:
        return;

     label02:
        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r5 = $r10;

        entermonitor $r10;

     label03:
        $r11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r6 = virtualinvoke $r11.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label04:
        l0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: long getAccountIdLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)>(r6, r2);

        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label07;

     label05:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        exitmonitor r5;

     label06:
        return;

     label07:
        l1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: long getExtrasIdLocked(android.database.sqlite.SQLiteDatabase,long,java.lang.String)>(r6, l0, r3);

        $b3 = l1 cmp 0L;

        if $b3 >= 0 goto label10;

        l6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: long insertExtraLocked(android.database.sqlite.SQLiteDatabase,long,java.lang.String,java.lang.String)>(r6, l0, r3, r4);

        $b5 = l6 cmp 0L;

        if $b5 >= 0 goto label13;

     label08:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        exitmonitor r5;

     label09:
        return;

     label10:
        $r12 = new android.content.ContentValues;

        specialinvoke $r12.<android.content.ContentValues: void <init>()>();

        r7 = $r12;

        virtualinvoke r7.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("value", r4);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id=");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("extras", r7, $r15, null);

        if 1 == $i4 goto label13;

     label11:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        exitmonitor r5;

     label12:
        return;

     label13:
        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void writeUserDataIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,android.database.sqlite.SQLiteDatabase,android.accounts.Account,java.lang.String,java.lang.String)>(r1, r6, r2, r3, r4);

        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label14:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        goto label17;

     label15:
        $r18 := @caughtexception;

        r8 = $r18;

     label16:
        virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw r8;

     label17:
        exitmonitor r5;

     label18:
        goto label21;

     label19:
        $r17 := @caughtexception;

        r9 = $r17;

        exitmonitor r5;

     label20:
        throw r9;

     label21:
        return;

        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Throwable from label03 to label06 with label19;
        catch java.lang.Throwable from label07 to label09 with label19;
        catch java.lang.Throwable from label10 to label12 with label19;
        catch java.lang.Throwable from label13 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    private void onResult(android.accounts.IAccountManagerResponse, android.os.Bundle)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        android.os.Bundle r2;
        android.os.RemoteException r3, $r12;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r7, $r8, $r9;
        java.lang.Class $r5;
        java.lang.String $r6, $r10;
        java.lang.Exception $r11;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: android.os.Bundle;

        if r2 != null goto label1;

        $r11 = new java.lang.Exception;

        specialinvoke $r11.<java.lang.Exception: void <init>()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "the result is unexpectedly null", $r11);

     label1:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" calling onResult() on response ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r10);

     label2:
        interfaceinvoke r1.<android.accounts.IAccountManagerResponse: void onResult(android.os.Bundle)>(r2);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r3 = $r12;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label5;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "failure while notifying response", r3);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void getAuthTokenLabel(android.accounts.IAccountManagerResponse, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        java.lang.String r2, r3;
        int i0, $i3;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        long l1;
        java.lang.Throwable r5, $r10;
        com.android.server.accounts.AccountManagerService$5 $r6;
        java.lang.SecurityException $r7;
        java.lang.IllegalArgumentException $r8, $r9;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        if r2 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r8;

     label1:
        if r3 != null goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("authTokenType is null");

        throw $r9;

     label2:
        i0 = staticinvoke <com.android.server.accounts.AccountManagerService: int getCallingUid()>();

        staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

        if i0 == 1000 goto label3;

        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>("can only call from system");

        throw $r7;

     label3:
        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r4 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i3);

        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label4:
        $r6 = new com.android.server.accounts.AccountManagerService$5;

        specialinvoke $r6.<com.android.server.accounts.AccountManagerService$5: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,java.lang.String)>(r0, r4, r1, r2, 0, 0, r2, r3);

        virtualinvoke $r6.<com.android.server.accounts.AccountManagerService$5: void bind()>();

     label5:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        goto label8;

     label6:
        $r10 := @caughtexception;

        r5 = $r10;

     label7:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw r5;

     label8:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void getAuthToken(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String, boolean, boolean, android.os.Bundle)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        android.accounts.Account r2;
        java.lang.String r3, r8, $r12, $r15, $r17, $r18, $r42, $r45;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8;
        android.os.Bundle r4, r7, r10, $r19, $r21;
        android.os.RemoteException r5, $r44;
        android.content.pm.RegisteredServicesCache$ServiceInfo r6;
        int i0, $i2, $i3, $i6, $i7;
        long l1;
        java.lang.Throwable r9, $r43;
        java.lang.String[] $r11;
        android.accounts.AuthenticatorDescription $r13, $r22;
        com.android.server.accounts.IAccountAuthenticatorCache $r14;
        com.android.server.accounts.AccountManagerService$6 $r16;
        java.lang.Object $r20;
        java.lang.StringBuilder $r23, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41;
        java.lang.IllegalArgumentException $r24;
        com.android.server.accounts.AccountManagerService$UserAccounts r46;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r4 := @parameter5: android.os.Bundle;

        $z4 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z4 == 0 goto label01;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAuthToken: ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r32 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", notifyOnAuthFailure ");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r35 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i7 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r42 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r42);

     label01:
        if r1 != null goto label02;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r24;

     label02:
        if r2 != null goto label04;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AccountManagerService", "getAuthToken called with null account");

        interfaceinvoke r1.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(7, "account is null");

     label03:
        return;

     label04:
        if r3 != null goto label06;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AccountManagerService", "getAuthToken called with null authTokenType");

        interfaceinvoke r1.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(7, "authTokenType is null");

     label05:
        return;

     label06:
        goto label08;

     label07:
        $r44 := @caughtexception;

        r5 = $r44;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to report error back to the client.");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r45 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r45);

        return;

     label08:
        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "android.permission.USE_CREDENTIALS";

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkBinderPermission(java.lang.String[])>($r11);

        r46 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        $r14 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        $r12 = r2.<android.accounts.Account: java.lang.String type>;

        $r13 = staticinvoke <android.accounts.AuthenticatorDescription: android.accounts.AuthenticatorDescription newKey(java.lang.String)>($r12);

        $i2 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r46);

        r6 = interfaceinvoke $r14.<com.android.server.accounts.IAccountAuthenticatorCache: android.content.pm.RegisteredServicesCache$ServiceInfo getServiceInfo(android.accounts.AuthenticatorDescription,int)>($r13, $i2);

        if r6 == null goto label09;

        $r20 = r6.<android.content.pm.RegisteredServicesCache$ServiceInfo: java.lang.Object type>;

        $r22 = (android.accounts.AuthenticatorDescription) $r20;

        $z8 = $r22.<android.accounts.AuthenticatorDescription: boolean customTokens>;

        if $z8 == 0 goto label09;

        $z7 = 1;

        goto label10;

     label09:
        $z7 = 0;

     label10:
        z2 = $z7;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if z2 != 0 goto label11;

        $z6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean permissionIsGranted(android.accounts.Account,java.lang.String,int)>(r2, r3, i0);

        if $z6 == 0 goto label12;

     label11:
        $z5 = 1;

        goto label13;

     label12:
        $z5 = 0;

     label13:
        z3 = $z5;

        if r4 != null goto label14;

        $r21 = new android.os.Bundle;

        specialinvoke $r21.<android.os.Bundle: void <init>()>();

        goto label15;

     label14:
        $r21 = r4;

     label15:
        r7 = $r21;

        virtualinvoke r7.<android.os.Bundle: void putInt(java.lang.String,int)>("callerUid", i0);

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke r7.<android.os.Bundle: void putInt(java.lang.String,int)>("callerPid", $i3);

        if z0 == 0 goto label16;

        virtualinvoke r7.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("notifyOnAuthFailure", 1);

     label16:
        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label17:
        if z2 != 0 goto label19;

        if z3 == 0 goto label19;

        r8 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.String readAuthTokenInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)>(r46, r2, r3);

        if r8 == null goto label19;

        $r19 = new android.os.Bundle;

        specialinvoke $r19.<android.os.Bundle: void <init>()>();

        r10 = $r19;

        virtualinvoke r10.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("authtoken", r8);

        $r17 = r2.<android.accounts.Account: java.lang.String name>;

        virtualinvoke r10.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("authAccount", $r17);

        $r18 = r2.<android.accounts.Account: java.lang.String type>;

        virtualinvoke r10.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("accountType", $r18);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void onResult(android.accounts.IAccountManagerResponse,android.os.Bundle)>(r1, r10);

     label18:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        return;

     label19:
        $r16 = new com.android.server.accounts.AccountManagerService$6;

        $r15 = r2.<android.accounts.Account: java.lang.String type>;

        specialinvoke $r16.<com.android.server.accounts.AccountManagerService$6: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,android.os.Bundle,android.accounts.Account,java.lang.String,boolean,boolean,int,boolean,com.android.server.accounts.AccountManagerService$UserAccounts)>(r0, r46, r1, $r15, z1, 0, r7, r2, r3, z0, z3, i0, z2, r46);

        virtualinvoke $r16.<com.android.server.accounts.AccountManagerService$6: void bind()>();

     label20:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        goto label23;

     label21:
        $r43 := @caughtexception;

        r9 = $r43;

     label22:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw r9;

     label23:
        return;

        catch android.os.RemoteException from label02 to label03 with label07;
        catch android.os.RemoteException from label04 to label05 with label07;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    private void createNoCredentialsPermissionNotification(android.accounts.Account, android.content.Intent, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        android.content.Intent r2;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.String r3, r6, r7, r8, $r12;
        android.app.Notification r5, $r11;
        android.os.UserHandle r9, $r15;
        android.content.Context r10, $r14, $r17;
        java.lang.Object[] $r13;
        android.content.res.Resources $r16;
        java.lang.Integer $r18;
        android.app.PendingIntent $r19;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        i1 = virtualinvoke r2.<android.content.Intent: int getIntExtra(java.lang.String,int)>("uid", -1);

        r3 = virtualinvoke r2.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("authTokenType");

        virtualinvoke r2.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("authTokenLabel");

        $r11 = new android.app.Notification;

        specialinvoke $r11.<android.app.Notification: void <init>(int,java.lang.CharSequence,long)>(17301642, null, 0L);

        r5 = $r11;

        $r14 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r13 = newarray (java.lang.Object)[1];

        $r12 = r1.<android.accounts.Account: java.lang.String name>;

        $r13[0] = $r12;

        r6 = virtualinvoke $r14.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(17040688, $r13);

        i2 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(10);

        r7 = r6;

        r8 = "";

        if i2 <= 0 goto label1;

        r7 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $i5 = i2 + 1;

        r8 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int)>($i5);

     label1:
        $r15 = new android.os.UserHandle;

        specialinvoke $r15.<android.os.UserHandle: void <init>(int)>(i0);

        r9 = $r15;

        r10 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.content.Context getContextForUser(android.os.UserHandle)>(r9);

        $r16 = virtualinvoke r10.<android.content.Context: android.content.res.Resources getResources()>();

        $i3 = virtualinvoke $r16.<android.content.res.Resources: int getColor(int)>(17170520);

        r5.<android.app.Notification: int color> = $i3;

        $r17 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r19 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r17, 0, r2, 268435456, null, r9);

        virtualinvoke r5.<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>(r10, r7, r8, $r19);

        $r18 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>(r1, r3, i1);

        $i4 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void installNotification(int,android.app.Notification,android.os.UserHandle)>($i4, r5, r9);

        return;
    }

    private android.content.Intent newGrantCredentialsPermissionIntent(android.accounts.Account, int, android.accounts.AccountAuthenticatorResponse, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0;
        android.accounts.AccountAuthenticatorResponse r2;
        java.lang.String r3, r4, $r10;
        android.content.Intent r5, $r6;
        android.content.Context $r7;
        java.lang.Integer $r9;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        i0 := @parameter1: int;

        r2 := @parameter2: android.accounts.AccountAuthenticatorResponse;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        $r6 = new android.content.Intent;

        $r7 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        specialinvoke $r6.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r7, class "android/accounts/GrantCredentialsPermissionActivity");

        r5 = $r6;

        virtualinvoke r5.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

        $r9 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>(r1, r3, i0);

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        virtualinvoke r5.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>($r10);

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("account", r1);

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("authTokenType", r3);

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("response", r2);

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("uid", i0);

        return r5;
    }

    private java.lang.Integer getCredentialPermissionNotificationId(android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2;
        int i0, $i1, $i2;
        java.lang.Integer r3, $r11;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        java.util.HashMap r5, $r8, $r12, $r15;
        android.util.Pair r6, $r9, $r10;
        java.lang.Throwable r7, $r16;
        java.lang.Object $r13;
        java.util.concurrent.atomic.AtomicInteger $r14;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r4 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i1);

        $r8 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r4);

        r5 = $r8;

        entermonitor $r8;

     label1:
        $r9 = new android.util.Pair;

        $r10 = new android.util.Pair;

        specialinvoke $r10.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r1, r2);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r9.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r10, $r11);

        r6 = $r9;

        $r12 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r4);

        $r13 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r6);

        r3 = (java.lang.Integer) $r13;

        if r3 != null goto label2;

        $r14 = r0.<com.android.server.accounts.AccountManagerService: java.util.concurrent.atomic.AtomicInteger mNotificationIds>;

        $i2 = virtualinvoke $r14.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r15 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1000(com.android.server.accounts.AccountManagerService$UserAccounts)>(r4);

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r3);

     label2:
        exitmonitor r5;

     label3:
        goto label6;

     label4:
        $r16 := @caughtexception;

        r7 = $r16;

        exitmonitor r5;

     label5:
        throw r7;

     label6:
        return r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private java.lang.Integer getSigninRequiredNotificationId(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.Integer r3;
        java.util.HashMap r4, $r6, $r7, $r10;
        java.lang.Throwable r5, $r12;
        java.lang.Object $r8;
        java.util.concurrent.atomic.AtomicInteger $r9;
        int $i0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        $r6 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r4 = $r6;

        entermonitor $r6;

     label1:
        $r7 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.lang.Integer) $r8;

        if r3 != null goto label2;

        $r9 = r0.<com.android.server.accounts.AccountManagerService: java.util.concurrent.atomic.AtomicInteger mNotificationIds>;

        $i0 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$1500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

     label2:
        exitmonitor r4;

     label3:
        goto label6;

     label4:
        $r12 := @caughtexception;

        r5 = $r12;

        exitmonitor r4;

     label5:
        throw r5;

     label6:
        return r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void addAccount(android.accounts.IAccountManagerResponse, java.lang.String, java.lang.String, java.lang.String[], boolean, android.os.Bundle)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        java.lang.String r2, r3, $r24, $r29;
        java.lang.String[] r4;
        boolean z0, $z1, $z2, $z3;
        android.os.Bundle r5, r7, $r10;
        int i0, i1, i2, $i4, $i5;
        long l3;
        java.lang.Throwable r8, $r32;
        android.os.UserHandle $r9;
        com.android.server.accounts.AccountManagerService$7 $r11;
        java.lang.IllegalArgumentException $r12, $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r30;
        android.os.RemoteException $r31, $r33;
        com.android.server.accounts.AccountManagerService$UserAccounts r35;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        z0 := @parameter4: boolean;

        r5 := @parameter5: android.os.Bundle;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label01;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addAccount: accountType ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", requiredFeatures ");

        $r24 = staticinvoke <com.android.server.accounts.AccountManagerService: java.lang.String stringArrayToString(java.lang.String[])>(r4);

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i5 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r29);

     label01:
        if r1 != null goto label02;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r12;

     label02:
        if r2 != null goto label03;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r13;

     label03:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkManageAccountsPermission()>();

        $r9 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        i0 = virtualinvoke $r9.<android.os.UserHandle: int getIdentifier()>();

        $z3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccounts(int)>(i0);

        if $z3 != 0 goto label08;

     label04:
        interfaceinvoke r1.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(100, "User is not allowed to add an account!");

     label05:
        goto label07;

     label06:
        $r33 := @caughtexception;

     label07:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void showCantAddAccount(int,int)>(100, i0);

        return;

     label08:
        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccountsForType(int,java.lang.String)>(i0, r2);

        if $z2 != 0 goto label13;

     label09:
        interfaceinvoke r1.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(101, "User cannot modify accounts of this type (policy).");

     label10:
        goto label12;

     label11:
        $r31 := @caughtexception;

     label12:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void showCantAddAccount(int,int)>(101, i0);

        return;

     label13:
        r35 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if r5 != null goto label14;

        $r10 = new android.os.Bundle;

        specialinvoke $r10.<android.os.Bundle: void <init>()>();

        goto label15;

     label14:
        $r10 = r5;

     label15:
        r7 = $r10;

        virtualinvoke r7.<android.os.Bundle: void putInt(java.lang.String,int)>("callerUid", i2);

        virtualinvoke r7.<android.os.Bundle: void putInt(java.lang.String,int)>("callerPid", i1);

        l3 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label16:
        $r11 = new com.android.server.accounts.AccountManagerService$7;

        specialinvoke $r11.<com.android.server.accounts.AccountManagerService$7: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,java.lang.String[],android.os.Bundle,java.lang.String)>(r0, r35, r1, r2, z0, 1, r3, r4, r7, r2);

        virtualinvoke $r11.<com.android.server.accounts.AccountManagerService$7: void bind()>();

     label17:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l3);

        goto label20;

     label18:
        $r32 := @caughtexception;

        r8 = $r32;

     label19:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l3);

        throw r8;

     label20:
        return;

        catch android.os.RemoteException from label04 to label05 with label06;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public void addAccountAsUser(android.accounts.IAccountManagerResponse, java.lang.String, java.lang.String, java.lang.String[], boolean, android.os.Bundle, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        java.lang.String r2, r3, $r14, $r25, $r35;
        java.lang.String[] r4;
        boolean z0, $z1, $z2, $z3;
        android.os.Bundle r5, r7, $r17;
        int i0, i1, i2, $i4, $i5, $i6;
        long l3;
        java.lang.Throwable r8, $r39;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r18, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r36, $r37;
        com.android.server.accounts.AccountManagerService$8 $r15;
        java.lang.IllegalArgumentException $r16, $r19;
        android.os.RemoteException $r38, $r40;
        com.android.server.accounts.AccountManagerService$UserAccounts r42;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        z0 := @parameter4: boolean;

        r5 := @parameter5: android.os.Bundle;

        i0 := @parameter6: int;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label01;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addAccount: accountType ");

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", requiredFeatures ");

        $r25 = staticinvoke <com.android.server.accounts.AccountManagerService: java.lang.String stringArrayToString(java.lang.String[])>(r4);

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i6 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for user id ");

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r35);

     label01:
        if r1 != null goto label02;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r19;

     label02:
        if r2 != null goto label03;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r16;

     label03:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkManageAccountsPermission()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        $i4 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trying to add account for ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void enforceCrossUserPermission(int,java.lang.String)>(i0, $r14);

        $z2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccounts(int)>(i0);

        if $z2 != 0 goto label08;

     label04:
        interfaceinvoke r1.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(100, "User is not allowed to add an account!");

     label05:
        goto label07;

     label06:
        $r38 := @caughtexception;

     label07:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void showCantAddAccount(int,int)>(100, i0);

        return;

     label08:
        $z3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean canUserModifyAccountsForType(int,java.lang.String)>(i0, r2);

        if $z3 != 0 goto label13;

     label09:
        interfaceinvoke r1.<android.accounts.IAccountManagerResponse: void onError(int,java.lang.String)>(101, "User cannot modify accounts of this type (policy).");

     label10:
        goto label12;

     label11:
        $r40 := @caughtexception;

     label12:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void showCantAddAccount(int,int)>(101, i0);

        return;

     label13:
        r42 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if r5 != null goto label14;

        $r17 = new android.os.Bundle;

        specialinvoke $r17.<android.os.Bundle: void <init>()>();

        goto label15;

     label14:
        $r17 = r5;

     label15:
        r7 = $r17;

        virtualinvoke r7.<android.os.Bundle: void putInt(java.lang.String,int)>("callerUid", i2);

        virtualinvoke r7.<android.os.Bundle: void putInt(java.lang.String,int)>("callerPid", i1);

        l3 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label16:
        $r15 = new com.android.server.accounts.AccountManagerService$8;

        specialinvoke $r15.<com.android.server.accounts.AccountManagerService$8: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,java.lang.String[],android.os.Bundle,java.lang.String)>(r0, r42, r1, r2, z0, 1, r3, r4, r7, r2);

        virtualinvoke $r15.<com.android.server.accounts.AccountManagerService$8: void bind()>();

     label17:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l3);

        goto label20;

     label18:
        $r39 := @caughtexception;

        r8 = $r39;

     label19:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l3);

        throw r8;

     label20:
        return;

        catch android.os.RemoteException from label04 to label05 with label06;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    private void showCantAddAccount(int, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1;
        android.content.Intent r1, $r3;
        long l2;
        java.lang.Throwable r2, $r9;
        android.content.Context $r4, $r8;
        android.os.UserHandle $r7;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = new android.content.Intent;

        $r4 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        specialinvoke $r3.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r4, class "android/accounts/CantAddAccountActivity");

        r1 = $r3;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.accounts.extra.ERROR_CODE", i0);

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label1:
        $r8 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r7 = new android.os.UserHandle;

        specialinvoke $r7.<android.os.UserHandle: void <init>(int)>(i1);

        virtualinvoke $r8.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r7);

     label2:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        goto label5;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse, android.accounts.Account, android.os.Bundle, boolean, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        android.accounts.Account r2;
        android.os.Bundle r3;
        boolean z0, $z1;
        int i0, $i2, $i3, $i5;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        long l1;
        java.lang.Throwable r5, $r28;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r27;
        java.lang.String $r11, $r12, $r26;
        com.android.server.accounts.AccountManagerService$9 $r13;
        java.lang.IllegalArgumentException $r14, $r15;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: android.os.Bundle;

        z0 := @parameter3: boolean;

        i0 := @parameter4: int;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trying to confirm account credentials for ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void enforceCrossUserPermission(int,java.lang.String)>(i0, $r11);

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label1;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("confirmCredentials: ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i5 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r26);

     label1:
        if r1 != null goto label2;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r14;

     label2:
        if r2 != null goto label3;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r15;

     label3:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkManageAccountsPermission()>();

        r4 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label4:
        $r13 = new com.android.server.accounts.AccountManagerService$9;

        $r12 = r2.<android.accounts.Account: java.lang.String type>;

        specialinvoke $r13.<com.android.server.accounts.AccountManagerService$9: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,android.accounts.Account,android.os.Bundle)>(r0, r4, r1, $r12, z0, 1, r2, r3);

        virtualinvoke $r13.<com.android.server.accounts.AccountManagerService$9: void bind()>();

     label5:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        goto label8;

     label6:
        $r28 := @caughtexception;

        r5 = $r28;

     label7:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw r5;

     label8:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void updateCredentials(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String, boolean, android.os.Bundle)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        android.accounts.Account r2;
        java.lang.String r3, $r8, $r24;
        boolean z0, $z1;
        android.os.Bundle r4;
        com.android.server.accounts.AccountManagerService$UserAccounts r5;
        long l0;
        java.lang.Throwable r6, $r26;
        com.android.server.accounts.AccountManagerService$10 $r7;
        java.lang.IllegalArgumentException $r9, $r10, $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r25;
        int $i1, $i3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        r4 := @parameter4: android.os.Bundle;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateCredentials: ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", authTokenType ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r24);

     label1:
        if r1 != null goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r10;

     label2:
        if r2 != null goto label3;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("account is null");

        throw $r11;

     label3:
        if r3 != null goto label4;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("authTokenType is null");

        throw $r9;

     label4:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkManageAccountsPermission()>();

        r5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label5:
        $r7 = new com.android.server.accounts.AccountManagerService$10;

        $r8 = r2.<android.accounts.Account: java.lang.String type>;

        specialinvoke $r7.<com.android.server.accounts.AccountManagerService$10: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,android.accounts.Account,java.lang.String,android.os.Bundle)>(r0, r5, r1, $r8, z0, 1, r2, r3, r4);

        virtualinvoke $r7.<com.android.server.accounts.AccountManagerService$10: void bind()>();

     label6:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        goto label9;

     label7:
        $r26 := @caughtexception;

        r6 = $r26;

     label8:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r6;

     label9:
        return;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void editProperties(android.accounts.IAccountManagerResponse, java.lang.String, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        java.lang.String r2, $r19;
        boolean z0, $z1;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        long l0;
        java.lang.Throwable r4, $r20;
        com.android.server.accounts.AccountManagerService$11 $r5;
        java.lang.IllegalArgumentException $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        int $i1, $i2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("editProperties: accountType ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expectActivityLaunch ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r19);

     label1:
        if r1 != null goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r7;

     label2:
        if r2 != null goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r6;

     label3:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkManageAccountsPermission()>();

        r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        l0 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label4:
        $r5 = new com.android.server.accounts.AccountManagerService$11;

        specialinvoke $r5.<com.android.server.accounts.AccountManagerService$11: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String)>(r0, r3, r1, r2, z0, 1, r2);

        virtualinvoke $r5.<com.android.server.accounts.AccountManagerService$11: void bind()>();

     label5:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        goto label8;

     label6:
        $r20 := @caughtexception;

        r4 = $r20;

     label7:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l0);

        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public android.accounts.Account[] getAccounts(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        long l2;
        java.lang.Object r2, $r6;
        android.accounts.Account[] r3;
        java.lang.Throwable r4, r5, $r7, $r8;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkReadAccountsPermission()>();

        r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label1:
        $r6 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r2 = $r6;

        entermonitor $r6;

     label2:
        r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,int,java.lang.String)>(r1, null, i1, null);

        exitmonitor r2;

     label3:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        return r3;

     label4:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label5:
        throw r4;

     label6:
        $r8 := @caughtexception;

        r5 = $r8;

     label7:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l2);

        throw r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label7 with label6;
    }

    public android.accounts.AccountAndUser[] getRunningAccounts()
    {
        com.android.server.accounts.AccountManagerService r0;
        int[] r1;
        android.os.RemoteException r2, $r5;
        android.app.IActivityManager $r3;
        android.accounts.AccountAndUser[] $r4;
        java.lang.RuntimeException $r6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        r1 = interfaceinvoke $r3.<android.app.IActivityManager: int[] getRunningUserIds()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r2);

        throw $r6;

     label4:
        $r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.AccountAndUser[] getAccounts(int[])>(r1);

        return $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.accounts.AccountAndUser[] getAllAccounts()
    {
        com.android.server.accounts.AccountManagerService r0;
        java.util.List r1;
        int[] r2;
        int i0, $i1, $i2, $i3;
        android.os.UserManager $r3;
        android.accounts.AccountAndUser[] $r4;
        java.lang.Object $r5;
        android.content.pm.UserInfo $r6;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        $r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        r1 = virtualinvoke $r3.<android.os.UserManager: java.util.List getUsers()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        r2 = newarray (int)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label2;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r6 = (android.content.pm.UserInfo) $r5;

        $i3 = $r6.<android.content.pm.UserInfo: int id>;

        r2[i0] = $i3;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.AccountAndUser[] getAccounts(int[])>(r2);

        return $r4;
    }

    private android.accounts.AccountAndUser[] getAccounts(int[])
    {
        com.android.server.accounts.AccountManagerService r0;
        int[] r1, r3;
        java.util.ArrayList r2;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        java.lang.Object r5, $r10;
        android.accounts.Account[] r6;
        java.lang.Throwable r7, $r13;
        java.lang.Object[] $r8;
        android.accounts.AccountAndUser[] $r9, r14;
        android.accounts.AccountAndUser $r11;
        android.accounts.Account $r12;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: int[];

        r2 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        r3 = r1;

        i0 = lengthof r3;

        i1 = 0;

     label01:
        if i1 >= i0 goto label10;

        i2 = r3[i1];

        r4 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i2);

        if r4 != null goto label02;

        goto label09;

     label02:
        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r4);

        r5 = $r10;

        entermonitor $r10;

     label03:
        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r6 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,int,java.lang.String)>(r4, null, $i5, null);

        i3 = 0;

     label04:
        $i6 = lengthof r6;

        if i3 >= $i6 goto label05;

        $r11 = new android.accounts.AccountAndUser;

        $r12 = r6[i3];

        specialinvoke $r11.<android.accounts.AccountAndUser: void <init>(android.accounts.Account,int)>($r12, i2);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        i3 = i3 + 1;

        goto label04;

     label05:
        exitmonitor r5;

     label06:
        goto label09;

     label07:
        $r13 := @caughtexception;

        r7 = $r13;

        exitmonitor r5;

     label08:
        throw r7;

     label09:
        i1 = i1 + 1;

        goto label01;

     label10:
        $i4 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        r14 = newarray (android.accounts.AccountAndUser)[$i4];

        $r8 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r14);

        $r9 = (android.accounts.AccountAndUser[]) $r8;

        return $r9;

        catch java.lang.Throwable from label03 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public android.accounts.Account[] getAccountsAsUser(java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1;
        int i0;
        android.accounts.Account[] $r2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String,int)>(r1, i0, null, -1);

        return $r2;
    }

    private android.accounts.Account[] getAccountsAsUser(java.lang.String, int, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r2, $r16, $r26;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i9, $i10, $i11;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        long l3;
        java.lang.Object r4, $r8;
        android.accounts.Account[] r5;
        java.lang.Throwable r6, r7, $r23, $r24;
        boolean $z0, $z1;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r18, $r20, $r21, $r22, $r25;
        java.lang.SecurityException $r17;
        android.content.Context $r19;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i4 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if i0 == $i4 goto label01;

        $i9 = staticinvoke <android.os.Process: int myUid()>();

        if i2 == $i9 goto label01;

        $r19 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $i10 = virtualinvoke $r19.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $i10 == 0 goto label01;

        $r17 = new java.lang.SecurityException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        $i11 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trying to get account for ");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.SecurityException: void <init>(java.lang.String)>($r26);

        throw $r17;

     label01:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label02;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAccounts: accountType ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i7 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r16);

     label02:
        if i1 == -1 goto label03;

        $i5 = staticinvoke <android.os.Process: int myUid()>();

        $z1 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i2, $i5);

        if $z1 == 0 goto label03;

        i2 = i1;

     label03:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkReadAccountsPermission()>();

        r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i0);

        l3 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label04:
        $r8 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        r4 = $r8;

        entermonitor $r8;

     label05:
        r5 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,int,java.lang.String)>(r3, r1, i2, r2);

        exitmonitor r4;

     label06:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l3);

        return r5;

     label07:
        $r24 := @caughtexception;

        r6 = $r24;

        exitmonitor r4;

     label08:
        throw r6;

     label09:
        $r23 := @caughtexception;

        r7 = $r23;

     label10:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l3);

        throw r7;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label07 to label10 with label09;
    }

    public boolean addSharedAccountAsUser(android.accounts.Account, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0, i5;
        android.database.sqlite.SQLiteDatabase r2;
        android.content.ContentValues r3, $r6;
        long l1;
        com.android.server.accounts.AccountManagerService$UserAccounts $r4;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r5;
        java.lang.String $r7, $r8, $r10, $r11, $r15;
        java.lang.String[] $r9;
        byte $b3;
        java.lang.StringBuilder $r12, $r13, $r14, $r16;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        i0 := @parameter1: int;

        i5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: int handleIncomingUser(int)>(i0);

        $r4 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i5);

        $r5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>($r4);

        r2 = virtualinvoke $r5.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r6 = new android.content.ContentValues;

        specialinvoke $r6.<android.content.ContentValues: void <init>()>();

        r3 = $r6;

        $r7 = r1.<android.accounts.Account: java.lang.String name>;

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", $r7);

        $r8 = r1.<android.accounts.Account: java.lang.String type>;

        virtualinvoke r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("type", $r8);

        $r9 = newarray (java.lang.String)[2];

        $r10 = r1.<android.accounts.Account: java.lang.String name>;

        $r9[0] = $r10;

        $r11 = r1.<android.accounts.Account: java.lang.String type>;

        $r9[1] = $r11;

        virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("shared_accounts", "name=? AND type=?", $r9);

        l1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("shared_accounts", "name", r3);

        $b3 = l1 cmp 0L;

        if $b3 >= 0 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("insertAccountIntoDatabase: ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", skipping the DB insert failed");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r15);

        return 0;

     label1:
        return 1;
    }

    public boolean renameSharedAccountAsUser(android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, $r8, $r10, $r11;
        int i0, i1, i2;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        android.database.sqlite.SQLiteDatabase r4;
        android.content.ContentValues r5, $r7;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r6;
        java.lang.String[] $r9;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: int handleIncomingUser(int)>(i0);

        r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i2);

        $r6 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        r4 = virtualinvoke $r6.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r7 = new android.content.ContentValues;

        specialinvoke $r7.<android.content.ContentValues: void <init>()>();

        r5 = $r7;

        virtualinvoke r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", r2);

        $r8 = r1.<android.accounts.Account: java.lang.String name>;

        virtualinvoke r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("previous_name", $r8);

        $r9 = newarray (java.lang.String)[2];

        $r10 = r1.<android.accounts.Account: java.lang.String name>;

        $r9[0] = $r10;

        $r11 = r1.<android.accounts.Account: java.lang.String type>;

        $r9[1] = $r11;

        i1 = virtualinvoke r4.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("shared_accounts", r5, "name=? AND type=?", $r9);

        if i1 <= 0 goto label1;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account renameAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)>(r3, r1, r2);

     label1:
        if i1 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean removeSharedAccountAsUser(android.accounts.Account, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0, i1, i2;
        com.android.server.accounts.AccountManagerService$UserAccounts r2;
        android.database.sqlite.SQLiteDatabase r3;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r4;
        java.lang.String[] $r5;
        java.lang.String $r6, $r7;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        i0 := @parameter1: int;

        i2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: int handleIncomingUser(int)>(i0);

        r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i2);

        $r4 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r2);

        r3 = virtualinvoke $r4.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r5 = newarray (java.lang.String)[2];

        $r6 = r1.<android.accounts.Account: java.lang.String name>;

        $r5[0] = $r6;

        $r7 = r1.<android.accounts.Account: java.lang.String type>;

        $r5[1] = $r7;

        i1 = virtualinvoke r3.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("shared_accounts", "name=? AND type=?", $r5);

        if i1 <= 0 goto label1;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void removeAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r2, r1);

     label1:
        if i1 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public android.accounts.Account[] getSharedAccountsAsUser(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, i2, $i3, i4;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.util.ArrayList r2, $r5;
        android.database.Cursor r3;
        java.lang.Throwable r4, $r13;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r6;
        android.database.sqlite.SQLiteDatabase $r7;
        java.lang.String[] $r8;
        boolean $z0, $z2;
        java.lang.String $r10, $r12;
        android.accounts.Account $r11;
        android.accounts.Account[] r14;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        i4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: int handleIncomingUser(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>(i4);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        r3 = null;

     label1:
        $r6 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r7 = virtualinvoke $r6.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "name";

        $r8[1] = "type";

        r3 = virtualinvoke $r7.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("shared_accounts", $r8, null, null, null, null, null);

        if r3 == null goto label3;

        $z0 = interfaceinvoke r3.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label3;

        i1 = interfaceinvoke r3.<android.database.Cursor: int getColumnIndex(java.lang.String)>("name");

        i2 = interfaceinvoke r3.<android.database.Cursor: int getColumnIndex(java.lang.String)>("type");

     label2:
        $r11 = new android.accounts.Account;

        $r10 = interfaceinvoke r3.<android.database.Cursor: java.lang.String getString(int)>(i1);

        $r12 = interfaceinvoke r3.<android.database.Cursor: java.lang.String getString(int)>(i2);

        specialinvoke $r11.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>($r10, $r12);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        $z2 = interfaceinvoke r3.<android.database.Cursor: boolean moveToNext()>();

        if $z2 != 0 goto label2;

     label3:
        if r3 == null goto label7;

        interfaceinvoke r3.<android.database.Cursor: void close()>();

        goto label7;

     label4:
        $r13 := @caughtexception;

        r4 = $r13;

     label5:
        if r3 == null goto label6;

        interfaceinvoke r3.<android.database.Cursor: void close()>();

     label6:
        throw r4;

     label7:
        $i3 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        r14 = newarray (android.accounts.Account)[$i3];

        virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r14);

        return r14;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public android.accounts.Account[] getAccounts(java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1;
        int $i0;
        android.accounts.Account[] $r2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)>(r1, $i0);

        return $r2;
    }

    public android.accounts.Account[] getAccountsForPackage(java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r9;
        int i0, i1, $i2, $i3;
        boolean $z0;
        android.accounts.Account[] $r2;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.Process: int myUid()>();

        $z0 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i1, $i2);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAccountsForPackage() called from unauthorized uid ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with uid=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label1:
        $i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r2 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String,int)>(null, $i3, r1, i0);

        return $r2;
    }

    public android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, r2, $r11;
        android.os.RemoteException r3, $r7;
        java.lang.String[] $r4;
        android.content.pm.IPackageManager $r5;
        int $i1, $i2, i4;
        android.accounts.Account[] $r6, $r13;
        java.lang.StringBuilder $r8, $r9, $r10, $r12;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "android.permission.INTERACT_ACROSS_USERS";

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkBinderPermission(java.lang.String[])>($r4);

     label1:
        $r5 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        i4 = interfaceinvoke $r5.<android.content.pm.IPackageManager: int getPackageUid(java.lang.String,int)>(r2, $i1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t determine the packageUid for ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AccountManagerService", $r11);

        $r13 = newarray (android.accounts.Account)[0];

        return $r13;

     label4:
        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String,int)>(r1, $i2, r2, i4);

        return $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void getAccountsByFeatures(android.accounts.IAccountManagerResponse, java.lang.String, java.lang.String[])
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.IAccountManagerResponse r1;
        java.lang.String r2, $r19, $r25;
        java.lang.String[] r3;
        com.android.server.accounts.AccountManagerService$UserAccounts r4;
        int i0, $i2, $i3, $i4;
        long l1;
        android.accounts.Account[] r5;
        java.lang.Object r6, $r9;
        java.lang.Throwable r7, r8, $r27, $r28;
        boolean $z0;
        android.os.Bundle $r10, r29;
        com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession $r11;
        java.lang.IllegalArgumentException $r12, $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r26;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.IAccountManagerResponse;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label01;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getAccounts: accountType ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", response ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", features ");

        $r19 = staticinvoke <com.android.server.accounts.AccountManagerService: java.lang.String stringArrayToString(java.lang.String[])>(r3);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", caller\'s uid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pid ");

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r25);

     label01:
        if r1 != null goto label02;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("response is null");

        throw $r12;

     label02:
        if r2 != null goto label03;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accountType is null");

        throw $r13;

     label03:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkReadAccountsPermission()>();

        r4 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label04:
        if r3 == null goto label05;

        $i2 = lengthof r3;

        if $i2 != 0 goto label12;

     label05:
        $r9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r4);

        r6 = $r9;

        entermonitor $r9;

     label06:
        r5 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,int,java.lang.String)>(r4, r2, i0, null);

        exitmonitor r6;

     label07:
        goto label10;

     label08:
        $r27 := @caughtexception;

        r7 = $r27;

        exitmonitor r6;

     label09:
        throw r7;

     label10:
        $r10 = new android.os.Bundle;

        specialinvoke $r10.<android.os.Bundle: void <init>()>();

        r29 = $r10;

        virtualinvoke r29.<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>("accounts", r5);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void onResult(android.accounts.IAccountManagerResponse,android.os.Bundle)>(r1, r29);

     label11:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        return;

     label12:
        $r11 = new com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession;

        specialinvoke $r11.<com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession: void <init>(com.android.server.accounts.AccountManagerService,com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[],int)>(r0, r4, r1, r2, r3, i0);

        virtualinvoke $r11.<com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession: void bind()>();

     label13:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        goto label16;

     label14:
        $r28 := @caughtexception;

        r8 = $r28;

     label15:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw r8;

     label16:
        return;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label04 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    private long getAccountIdLocked(android.database.sqlite.SQLiteDatabase, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.database.sqlite.SQLiteDatabase r1;
        android.accounts.Account r2;
        android.database.Cursor r3;
        long l0, l1;
        java.lang.Throwable r4, $r9;
        java.lang.String[] $r5, $r6;
        java.lang.String $r7, $r8;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: android.accounts.Account;

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "_id";

        $r6 = newarray (java.lang.String)[2];

        $r7 = r2.<android.accounts.Account: java.lang.String name>;

        $r6[0] = $r7;

        $r8 = r2.<android.accounts.Account: java.lang.String type>;

        $r6[1] = $r8;

        r3 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r5, "name=? AND type=?", $r6, null, null, null);

     label1:
        $z0 = interfaceinvoke r3.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        l0 = interfaceinvoke r3.<android.database.Cursor: long getLong(int)>(0);

     label2:
        interfaceinvoke r3.<android.database.Cursor: void close()>();

        return l0;

     label3:
        l1 = -1L;

     label4:
        interfaceinvoke r3.<android.database.Cursor: void close()>();

        return l1;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

     label6:
        interfaceinvoke r3.<android.database.Cursor: void close()>();

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private long getExtrasIdLocked(android.database.sqlite.SQLiteDatabase, long, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.database.sqlite.SQLiteDatabase r1;
        long l0, l1, l2;
        java.lang.String r2, $r11;
        android.database.Cursor r3;
        java.lang.Throwable r4, $r14;
        java.lang.String[] $r5, $r13;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r12;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.String;

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "_id";

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("accounts_id=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = newarray (java.lang.String)[1];

        $r13[0] = r2;

        r3 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("extras", $r5, $r11, $r13, null, null, null);

     label1:
        $z0 = interfaceinvoke r3.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        l1 = interfaceinvoke r3.<android.database.Cursor: long getLong(int)>(0);

     label2:
        interfaceinvoke r3.<android.database.Cursor: void close()>();

        return l1;

     label3:
        l2 = -1L;

     label4:
        interfaceinvoke r3.<android.database.Cursor: void close()>();

        return l2;

     label5:
        $r14 := @caughtexception;

        r4 = $r14;

     label6:
        interfaceinvoke r3.<android.database.Cursor: void close()>();

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private static java.lang.String getDatabaseName(int)
    {
        int i0;
        java.io.File r0, r1, r2, r3, $r4, $r5, $r7;
        java.lang.String $r6, $r11, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalStateException $r8, $r13;
        java.lang.StringBuilder $r9, $r10, $r12, $r14, $r15, $r17;

        i0 := @parameter0: int;

        r0 = staticinvoke <android.os.Environment: java.io.File getSystemSecureDirectory()>();

        $r4 = new java.io.File;

        $r5 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "accounts.db");

        r1 = $r4;

        if i0 != 0 goto label2;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "accounts.db");

        r2 = $r7;

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label2;

        r3 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        $z2 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label1;

        $z4 = virtualinvoke r3.<java.io.File: boolean mkdirs()>();

        if $z4 != 0 goto label1;

        $r13 = new java.lang.IllegalStateException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User dir cannot be created: ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label1:
        $z3 = virtualinvoke r2.<java.io.File: boolean renameTo(java.io.File)>(r1);

        if $z3 != 0 goto label2;

        $r8 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User dir cannot be migrated: ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label2:
        $r6 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        return $r6;
    }

    public android.os.IBinder onBind(android.content.Intent)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.content.Intent r1;
        android.os.IBinder $r2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.content.Intent;

        $r2 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.IBinder asBinder()>();

        return $r2;
    }

    private static boolean scanArgs(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r0, r2;
        java.lang.String r1, r3;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label3;

        r2 = r0;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.accounts.AccountManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        boolean z0, $z1, $z2, $z3, $z4;
        com.android.internal.util.IndentingPrintWriter r4, $r9;
        java.util.List r5;
        java.util.Iterator r6;
        android.content.pm.UserInfo r7;
        android.content.Context $r8;
        int $i0, $i1, $i2, $i3;
        android.os.UserManager $r10;
        java.lang.Object $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        java.lang.String $r16, $r25;
        com.android.server.accounts.AccountManagerService$UserAccounts $r17;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r8 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r8.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label1;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump AccountsManager from from pid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without permission ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.DUMP");

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r25);

        return;

     label1:
        $z1 = staticinvoke <com.android.server.accounts.AccountManagerService: boolean scanArgs(java.lang.String[],java.lang.String)>(r3, "--checkin");

        if $z1 != 0 goto label2;

        $z3 = staticinvoke <com.android.server.accounts.AccountManagerService: boolean scanArgs(java.lang.String[],java.lang.String)>(r3, "-c");

        if $z3 == 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        z0 = $z4;

        $r9 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r9.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r2, "  ");

        r4 = $r9;

        $r10 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        r5 = virtualinvoke $r10.<android.os.UserManager: java.util.List getUsers()>();

        r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r11 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.content.pm.UserInfo) $r11;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r16);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $i1 = r7.<android.content.pm.UserInfo: int id>;

        $r17 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void dumpUser(com.android.server.accounts.AccountManagerService$UserAccounts,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],boolean)>($r17, r1, r4, r3, z0);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        goto label5;

     label6:
        return;
    }

    private void dumpUser(com.android.server.accounts.AccountManagerService$UserAccounts, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.io.FileDescriptor r2;
        java.io.PrintWriter r3;
        java.lang.String[] r4, $r37;
        boolean z0, $z1, $z2;
        java.lang.Object r5, $r14, $r27;
        android.database.sqlite.SQLiteDatabase r6;
        android.database.Cursor r7;
        java.lang.Throwable r8, r11, r12, $r43, $r47, $r48;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.accounts.Account r9;
        com.android.server.accounts.AccountManagerService$Session r10;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r13;
        java.lang.StringBuilder $r15, $r16, $r17, $r20, $r22, $r25, $r30, $r31, $r32, $r33, $r34, $r35, $r39, $r40, $r42, $r45;
        java.util.LinkedHashMap $r18, $r21, $r24, r51;
        java.lang.String $r19, $r23, $r29, $r36, $r38, $r41, $r44, $r46;
        java.util.Collection $r26;
        com.android.server.accounts.IAccountAuthenticatorCache $r28;
        android.accounts.Account[] r49, r50;
        long l6;
        java.util.Iterator r52;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.PrintWriter;

        r4 := @parameter3: java.lang.String[];

        z0 := @parameter4: boolean;

        $r14 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r5 = $r14;

        entermonitor $r14;

     label01:
        $r13 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r6 = virtualinvoke $r13.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        if z0 == 0 goto label08;

        $r37 = <com.android.server.accounts.AccountManagerService: java.lang.String[] ACCOUNT_TYPE_COUNT_PROJECTION>;

        r7 = virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("accounts", $r37, null, null, "type", null, null);

     label02:
        $z2 = interfaceinvoke r7.<android.database.Cursor: boolean moveToNext()>();

        if $z2 == 0 goto label03;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r41 = interfaceinvoke r7.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r40 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r46 = interfaceinvoke r7.<android.database.Cursor: java.lang.String getString(int)>(1);

        $r45 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>($r44);

        goto label02;

     label03:
        if r7 == null goto label07;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

        goto label07;

     label04:
        $r43 := @caughtexception;

        r8 = $r43;

     label05:
        if r7 == null goto label06;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label06:
        throw r8;

     label07:
        goto label18;

     label08:
        $i2 = staticinvoke <android.os.Process: int myUid()>();

        r49 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts,java.lang.String,int,java.lang.String)>(r1, null, $i2, null);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Accounts: ");

        $i3 = lengthof r49;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>($r19);

        r50 = r49;

        i0 = lengthof r50;

        i1 = 0;

     label09:
        if i1 >= i0 goto label10;

        r9 = r50[i1];

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>($r38);

        i1 = i1 + 1;

        goto label09;

     label10:
        virtualinvoke r3.<java.io.PrintWriter: void println()>();

        $r18 = r0.<com.android.server.accounts.AccountManagerService: java.util.LinkedHashMap mSessions>;

        r51 = $r18;

        entermonitor $r18;

     label11:
        l6 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Active Sessions: ");

        $r21 = r0.<com.android.server.accounts.AccountManagerService: java.util.LinkedHashMap mSessions>;

        $i4 = virtualinvoke $r21.<java.util.LinkedHashMap: int size()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        $r24 = r0.<com.android.server.accounts.AccountManagerService: java.util.LinkedHashMap mSessions>;

        $r26 = virtualinvoke $r24.<java.util.LinkedHashMap: java.util.Collection values()>();

        r52 = interfaceinvoke $r26.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z1 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r27 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.android.server.accounts.AccountManagerService$Session) $r27;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r29 = virtualinvoke r10.<com.android.server.accounts.AccountManagerService$Session: java.lang.String toDebugString(long)>(l6);

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r36 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>($r36);

        goto label12;

     label13:
        exitmonitor r51;

     label14:
        goto label17;

     label15:
        $r47 := @caughtexception;

        r11 = $r47;

        exitmonitor r51;

     label16:
        throw r11;

     label17:
        virtualinvoke r3.<java.io.PrintWriter: void println()>();

        $r28 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        $i5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        interfaceinvoke $r28.<com.android.server.accounts.IAccountAuthenticatorCache: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int)>(r2, r3, r4, $i5);

     label18:
        exitmonitor r5;

     label19:
        goto label22;

     label20:
        $r48 := @caughtexception;

        r12 = $r48;

        exitmonitor r5;

     label21:
        throw r12;

     label22:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label11 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Throwable from label01 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    private void doNotification(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.CharSequence, android.content.Intent, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.CharSequence r3, $r16;
        android.content.Intent r4;
        int i0, $i2, $i3;
        long l1;
        java.lang.Integer r5;
        android.app.Notification r6, $r15;
        android.os.UserHandle r7, $r14;
        android.content.Context r8, $r22;
        java.lang.String r9, $r13, $r19, $r20, $r23, $r27, $r33;
        java.lang.Throwable r10, $r32;
        boolean $z0, $z1;
        android.content.ComponentName $r11, $r24;
        android.content.res.Resources $r17;
        java.lang.Object[] $r18;
        android.app.PendingIntent $r21;
        java.lang.Class $r25;
        java.lang.StringBuilder $r26, $r28, $r29, $r30, $r31;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.CharSequence;

        r4 := @parameter3: android.content.Intent;

        i0 := @parameter4: int;

        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label1:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label2;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("doNotification: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" intent:");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r33);

     label2:
        $r11 = virtualinvoke r4.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r11 == null goto label3;

        $r25 = class "android/accounts/GrantCredentialsPermissionActivity";

        $r23 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke r4.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r27 = virtualinvoke $r24.<android.content.ComponentName: java.lang.String getClassName()>();

        $z1 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r27);

        if $z1 == 0 goto label3;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void createNoCredentialsPermissionNotification(android.accounts.Account,android.content.Intent,int)>(r2, r4, i0);

        goto label4;

     label3:
        r5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer getSigninRequiredNotificationId(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r1, r2);

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5);

        virtualinvoke r4.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>($r13);

        $r15 = new android.app.Notification;

        specialinvoke $r15.<android.app.Notification: void <init>(int,java.lang.CharSequence,long)>(17301642, null, 0L);

        r6 = $r15;

        $r14 = new android.os.UserHandle;

        specialinvoke $r14.<android.os.UserHandle: void <init>(int)>(i0);

        r7 = $r14;

        r8 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.content.Context getContextForUser(android.os.UserHandle)>(r7);

        $r16 = virtualinvoke r8.<android.content.Context: java.lang.CharSequence getText(int)>(17039579);

        r9 = interfaceinvoke $r16.<java.lang.CharSequence: java.lang.String toString()>();

        $r17 = virtualinvoke r8.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke $r17.<android.content.res.Resources: int getColor(int)>(17170520);

        r6.<android.app.Notification: int color> = $i2;

        $r18 = newarray (java.lang.Object)[1];

        $r20 = r2.<android.accounts.Account: java.lang.String name>;

        $r18[0] = $r20;

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r9, $r18);

        $r22 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r21 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r22, 0, r4, 268435456, null, r7);

        virtualinvoke r6.<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>(r8, $r19, r3, $r21);

        $i3 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void installNotification(int,android.app.Notification,android.os.UserHandle)>($i3, r6, r7);

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        goto label7;

     label5:
        $r32 := @caughtexception;

        r10 = $r32;

     label6:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw r10;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected void installNotification(int, android.app.Notification, android.os.UserHandle)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        android.app.Notification r1;
        android.os.UserHandle r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.app.NotificationManager $r5;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.app.Notification;

        r2 := @parameter2: android.os.UserHandle;

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r5 = (android.app.NotificationManager) $r4;

        virtualinvoke $r5.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>(null, i0, r1, r2);

        return;
    }

    protected void cancelNotification(int, android.os.UserHandle)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        android.os.UserHandle r1;
        long l1;
        java.lang.Throwable r2, $r6;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.app.NotificationManager $r5;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.UserHandle;

        l1 = staticinvoke <com.android.server.accounts.AccountManagerService: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r5 = (android.app.NotificationManager) $r4;

        virtualinvoke $r5.<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>(null, i0, r1);

     label2:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        goto label5;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

     label4:
        staticinvoke <com.android.server.accounts.AccountManagerService: void restoreCallingIdentity(long)>(l1);

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private transient void checkBinderPermission(java.lang.String[])
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String[] r1, r2;
        int i0, i1, i2, $i4;
        java.lang.String r3, $r8, $r12, $r20, r22;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r13, $r16, $r17, $r18, $r19, $r21;
        java.lang.SecurityException $r14;
        android.content.Context $r15;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String[];

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r2 = r1;

        i1 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        r3 = r2[i2];

        $r15 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $i4 = virtualinvoke $r15.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r3);

        if $i4 != 0 goto label3;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label2;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  caller uid ");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r20);

     label2:
        return;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("caller uid ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lacks any of ");

        $r8 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>(",", r1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r22 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", $r12);

        $r14 = new java.lang.SecurityException;

        specialinvoke $r14.<java.lang.SecurityException: void <init>(java.lang.String)>(r22);

        throw $r14;
    }

    private int handleIncomingUser(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, $i1, $i2, $i3;
        android.app.IActivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = interfaceinvoke $r2.<android.app.IActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i1, $i2, i0, 1, 1, "", null);

     label2:
        return $i3;

     label3:
        $r3 := @caughtexception;

        return i0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean isPrivileged(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, i2, i3, $i4, $i5;
        android.content.pm.PackageManager r1;
        java.lang.String[] r3, r12;
        java.lang.String r4;
        android.content.pm.PackageInfo r5;
        android.os.UserHandle $r6;
        android.content.Context $r7, $r8;
        android.content.pm.ApplicationInfo $r9;
        android.content.pm.PackageManager$NameNotFoundException $r10, $r11;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

     label01:
        $r7 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r6 = new android.os.UserHandle;

        specialinvoke $r6.<android.os.UserHandle: void <init>(int)>(i1);

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>("android", 0, $r6);

        r1 = virtualinvoke $r8.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label02:
        goto label04;

     label03:
        $r11 := @caughtexception;

        return 0;

     label04:
        r12 = virtualinvoke r1.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        r3 = r12;

        i2 = lengthof r3;

        i3 = 0;

     label05:
        if i3 >= i2 goto label11;

        r4 = r3[i3];

     label06:
        r5 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r4, 0);

        if r5 == null goto label08;

        $r9 = r5.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i5 = $r9.<android.content.pm.ApplicationInfo: int flags>;

        $i4 = $i5 & 1073741824;

        if $i4 == 0 goto label08;

     label07:
        return 1;

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

        return 0;

     label10:
        i3 = i3 + 1;

        goto label05;

     label11:
        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label03;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label09;
    }

    private boolean permissionIsGranted(android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, $r12, $r13;
        int i0;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean isPrivileged(int)>(i0);

        if r1 == null goto label1;

        $r13 = r1.<android.accounts.Account: java.lang.String type>;

        $z7 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean hasAuthenticatorUid(java.lang.String,int)>($r13, i0);

        if $z7 == 0 goto label1;

        $z8 = 1;

        goto label2;

     label1:
        $z8 = 0;

     label2:
        z1 = $z8;

        if r1 == null goto label3;

        $z6 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean hasExplicitlyGrantedPermission(android.accounts.Account,java.lang.String,int)>(r1, r2, i0);

        if $z6 == 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        z2 = $z5;

        $z3 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z3 == 0 goto label5;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkGrantsOrCallingUidAgainstAuthenticator: caller uid ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": is authenticator? ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", has explicit permission? ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r12);

     label5:
        if z1 != 0 goto label6;

        if z2 != 0 goto label6;

        if z0 == 0 goto label7;

     label6:
        $z4 = 1;

        goto label8;

     label7:
        $z4 = 0;

     label8:
        return $z4;
    }

    private boolean hasAuthenticatorUid(java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String r1, $r9;
        int i0, i1, $i2, $i3, $i4;
        java.util.Iterator r2;
        android.content.pm.RegisteredServicesCache$ServiceInfo r3;
        com.android.server.accounts.IAccountAuthenticatorCache $r4;
        java.util.Collection $r5;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, $r7;
        android.accounts.AuthenticatorDescription $r8;
        android.content.pm.PackageManager $r10;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r4 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        $r5 = interfaceinvoke $r4.<com.android.server.accounts.IAccountAuthenticatorCache: java.util.Collection getAllServices(int)>(i1);

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.content.pm.RegisteredServicesCache$ServiceInfo) $r6;

        $r7 = r3.<android.content.pm.RegisteredServicesCache$ServiceInfo: java.lang.Object type>;

        $r8 = (android.accounts.AuthenticatorDescription) $r7;

        $r9 = $r8.<android.accounts.AuthenticatorDescription: java.lang.String type>;

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label5;

        $i3 = r3.<android.content.pm.RegisteredServicesCache$ServiceInfo: int uid>;

        if $i3 == i0 goto label2;

        $r10 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        $i2 = r3.<android.content.pm.RegisteredServicesCache$ServiceInfo: int uid>;

        $i4 = virtualinvoke $r10.<android.content.pm.PackageManager: int checkSignatures(int,int)>($i2, i0);

        if $i4 != 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;

     label5:
        goto label1;

     label6:
        return 0;
    }

    private boolean hasExplicitlyGrantedPermission(android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, $r11, $r12, $r13, $r22;
        int i0;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        java.lang.Object r4, $r8;
        android.database.sqlite.SQLiteDatabase r5;
        java.lang.String[] r6, $r10;
        boolean z0, $z1, $z2;
        java.lang.Throwable r7, $r23;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r9;
        long $l1;
        byte $b2;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if i0 != 1000 goto label1;

        return 1;

     label1:
        r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccountsForCaller()>();

        $r8 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        r4 = $r8;

        entermonitor $r8;

     label2:
        $r9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        r5 = virtualinvoke $r9.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r10 = newarray (java.lang.String)[4];

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r10[0] = $r12;

        $r10[1] = r2;

        $r11 = r1.<android.accounts.Account: java.lang.String name>;

        $r10[2] = $r11;

        $r13 = r1.<android.accounts.Account: java.lang.String type>;

        $r10[3] = $r13;

        r6 = $r10;

        $l1 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>(r5, "SELECT COUNT(*) FROM grants, accounts WHERE accounts_id=_id AND uid=? AND auth_token_type=? AND name=? AND type=?", r6);

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z0 = $z2;

        if z0 != 0 goto label6;

        $z1 = staticinvoke <android.app.ActivityManager: boolean isRunningInTestHarness()>();

        if $z1 == 0 goto label6;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no credentials permission for usage of ");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" by uid ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but ignoring since device is in test harness.");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AccountManagerService", $r22);

        exitmonitor r4;

     label5:
        return 1;

     label6:
        exitmonitor r4;

     label7:
        return z0;

     label8:
        $r23 := @caughtexception;

        r7 = $r23;

        exitmonitor r4;

     label9:
        throw r7;

        catch java.lang.Throwable from label2 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    private void checkCallingUidAgainstAuthenticator(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0;
        java.lang.String r2, $r8, $r13;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12;
        java.lang.SecurityException $r7;
        boolean $z0, $z1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if r1 == null goto label1;

        $r8 = r1.<android.accounts.Account: java.lang.String type>;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean hasAuthenticatorUid(java.lang.String,int)>($r8, i0);

        if $z0 != 0 goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("caller uid ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is different than the authenticator\'s uid");

        r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AccountManagerService", r2);

        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>(r2);

        throw $r7;

     label2:
        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z1 == 0 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("caller uid ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is the same as the authenticator\'s uid");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", $r13);

     label3:
        return;
    }

    private void checkAuthenticateAccountsPermission(android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "android.permission.AUTHENTICATE_ACCOUNTS";

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkBinderPermission(java.lang.String[])>($r2);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkCallingUidAgainstAuthenticator(android.accounts.Account)>(r1);

        return;
    }

    private void checkReadAccountsPermission()
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "android.permission.GET_ACCOUNTS";

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkBinderPermission(java.lang.String[])>($r1);

        return;
    }

    private void checkManageAccountsPermission()
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "android.permission.MANAGE_ACCOUNTS";

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkBinderPermission(java.lang.String[])>($r1);

        return;
    }

    private void checkManageAccountsOrUseCredentialsPermissions()
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "android.permission.MANAGE_ACCOUNTS";

        $r1[1] = "android.permission.USE_CREDENTIALS";

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void checkBinderPermission(java.lang.String[])>($r1);

        return;
    }

    private boolean canUserModifyAccounts(int)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0;
        android.os.UserManager $r1;
        android.os.UserHandle $r2;
        android.os.Bundle $r3;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        $r2 = new android.os.UserHandle;

        specialinvoke $r2.<android.os.UserHandle: void <init>(int)>(i0);

        $r3 = virtualinvoke $r1.<android.os.UserManager: android.os.Bundle getUserRestrictions(android.os.UserHandle)>($r2);

        $z0 = virtualinvoke $r3.<android.os.Bundle: boolean getBoolean(java.lang.String)>("no_modify_accounts");

        if $z0 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    private boolean canUserModifyAccountsForType(int, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        int i0, i1, i2;
        java.lang.String r1, r5;
        android.app.admin.DevicePolicyManager r2;
        java.lang.String[] r3, r4;
        android.content.Context $r6;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r6 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("device_policy");

        r2 = (android.app.admin.DevicePolicyManager) $r7;

        r3 = virtualinvoke r2.<android.app.admin.DevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)>(i0);

        if r3 != null goto label1;

        return 1;

     label1:
        r4 = r3;

        i1 = lengthof r4;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        r5 = r4[i2];

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public void updateAppPermission(android.accounts.Account, java.lang.String, int, boolean) throws android.os.RemoteException
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2;
        int i0, i1;
        boolean z0;
        java.lang.SecurityException $r3;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        i1 = staticinvoke <com.android.server.accounts.AccountManagerService: int getCallingUid()>();

        if i1 == 1000 goto label1;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>()>();

        throw $r3;

     label1:
        if z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void grantAppPermission(android.accounts.Account,java.lang.String,int)>(r1, r2, i0);

        goto label3;

     label2:
        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void revokeAppPermission(android.accounts.Account,java.lang.String,int)>(r1, r2, i0);

     label3:
        return;
    }

    private void grantAppPermission(android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2;
        int i0, $i3, $i5, $i6;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        java.lang.Object r4, $r11;
        android.database.sqlite.SQLiteDatabase r5;
        long l1;
        android.content.ContentValues r6, $r14;
        java.lang.Throwable r7, r8, $r16, $r17;
        java.lang.Exception $r9;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r10;
        java.lang.Integer $r12, $r18;
        byte $b4;
        android.os.UserHandle $r13;
        java.lang.Long $r15;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r1 == null goto label01;

        if r2 != null goto label02;

     label01:
        $r9 = new java.lang.Exception;

        specialinvoke $r9.<java.lang.Exception: void <init>()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "grantAppPermission: called with invalid arguments", $r9);

        return;

     label02:
        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i3);

        $r11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        r4 = $r11;

        entermonitor $r11;

     label03:
        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        r5 = virtualinvoke $r10.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label04:
        l1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: long getAccountIdLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)>(r5, r1);

        $b4 = l1 cmp 0L;

        if $b4 < 0 goto label05;

        $r14 = new android.content.ContentValues;

        specialinvoke $r14.<android.content.ContentValues: void <init>()>();

        r6 = $r14;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        virtualinvoke r6.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("accounts_id", $r15);

        virtualinvoke r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("auth_token_type", r2);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r6.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("uid", $r18);

        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("grants", "accounts_id", r6);

        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label05:
        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        goto label08;

     label06:
        $r16 := @caughtexception;

        r7 = $r16;

     label07:
        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw r7;

     label08:
        $r12 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>(r1, r2, i0);

        $i5 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r13 = new android.os.UserHandle;

        $i6 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        specialinvoke $r13.<android.os.UserHandle: void <init>(int)>($i6);

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(int,android.os.UserHandle)>($i5, $r13);

        exitmonitor r4;

     label09:
        goto label12;

     label10:
        $r17 := @caughtexception;

        r8 = $r17;

        exitmonitor r4;

     label11:
        throw r8;

     label12:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void revokeAppPermission(android.accounts.Account, java.lang.String, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        java.lang.String r2, $r14, $r16;
        int i0, $i3, $i5, $i6;
        com.android.server.accounts.AccountManagerService$UserAccounts r3;
        java.lang.Object r4, $r9;
        android.database.sqlite.SQLiteDatabase r5;
        long l1;
        java.lang.Throwable r6, r7, $r15, $r17;
        java.lang.Exception $r8;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r10;
        byte $b4;
        java.lang.Integer $r11;
        android.os.UserHandle $r12;
        java.lang.String[] $r13;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r1 == null goto label01;

        if r2 != null goto label02;

     label01:
        $r8 = new java.lang.Exception;

        specialinvoke $r8.<java.lang.Exception: void <init>()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccountManagerService", "revokeAppPermission: called with invalid arguments", $r8);

        return;

     label02:
        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r3 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$UserAccounts getUserAccounts(int)>($i3);

        $r9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        r4 = $r9;

        entermonitor $r9;

     label03:
        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        r5 = virtualinvoke $r10.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label04:
        l1 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: long getAccountIdLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)>(r5, r1);

        $b4 = l1 cmp 0L;

        if $b4 < 0 goto label05;

        $r13 = newarray (java.lang.String)[3];

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        $r13[0] = $r14;

        $r13[1] = r2;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r13[2] = $r16;

        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("grants", "accounts_id=? AND auth_token_type=? AND uid=?", $r13);

        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label05:
        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        goto label08;

     label06:
        $r17 := @caughtexception;

        r6 = $r17;

     label07:
        virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw r6;

     label08:
        $r11 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>(r1, r2, i0);

        $i5 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r12 = new android.os.UserHandle;

        $i6 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r3);

        specialinvoke $r12.<android.os.UserHandle: void <init>(int)>($i6);

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void cancelNotification(int,android.os.UserHandle)>($i5, $r12);

        exitmonitor r4;

     label09:
        goto label12;

     label10:
        $r15 := @caughtexception;

        r7 = $r15;

        exitmonitor r4;

     label11:
        throw r7;

     label12:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private static final java.lang.String stringArrayToString(java.lang.String[])
    {
        java.lang.String[] r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>(",", r0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r6 = null;

     label2:
        return $r6;
    }

    private void removeAccountFromCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2, r6;
        android.accounts.Account[] r3, r5, r24, r25;
        java.util.ArrayList r4, $r16;
        int i0, i1, $i2;
        java.util.HashMap $r7, $r10, $r12, $r15, $r19, $r20;
        java.lang.String $r8, $r18, $r23;
        java.lang.Object $r9;
        boolean $z0, $z2;
        java.lang.Object[] $r17;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        $r7 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r8 = r2.<android.accounts.Account: java.lang.String type>;

        $r9 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r8);

        r3 = (android.accounts.Account[]) $r9;

        if r3 == null goto label5;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r4 = $r16;

        r5 = r3;

        i0 = lengthof r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r6 = r5[i1];

        $z2 = virtualinvoke r6.<android.accounts.Account: boolean equals(java.lang.Object)>(r2);

        if $z2 != 0 goto label2;

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z0 = virtualinvoke r4.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        $r20 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r23 = r2.<android.accounts.Account: java.lang.String type>;

        virtualinvoke $r20.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r23);

        goto label5;

     label4:
        $i2 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        r24 = newarray (android.accounts.Account)[$i2];

        $r17 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r24);

        r25 = (android.accounts.Account[]) $r17;

        $r19 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r18 = r2.<android.accounts.Account: java.lang.String type>;

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r25);

     label5:
        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$700(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

        $r12 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

        $r15 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$900(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2);

        return;
    }

    private void insertAccountIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        android.accounts.Account[] r3, r4;
        int i0, $i1, $i2;
        java.util.HashMap $r5, $r8;
        java.lang.String $r6, $r9;
        java.lang.Object $r7;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        $r5 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r6 = r2.<android.accounts.Account: java.lang.String type>;

        $r7 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        r3 = (android.accounts.Account[]) $r7;

        if r3 == null goto label1;

        $i2 = lengthof r3;

        goto label2;

     label1:
        $i2 = 0;

     label2:
        i0 = $i2;

        $i1 = i0 + 1;

        r4 = newarray (android.accounts.Account)[$i1];

        if r3 == null goto label3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, 0, i0);

     label3:
        r4[i0] = r2;

        $r8 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r9 = r2.<android.accounts.Account: java.lang.String type>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r4);

        return;
    }

    private android.accounts.Account[] filterSharedAccounts(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account[], int, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account[] r2, r11, r32, r37, r39;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;
        java.lang.String r3, r6, r8, r9, $r19, $r23, $r27, $r29, r33;
        android.content.pm.UserInfo r4;
        java.lang.String[] r5, r7, r35;
        android.content.pm.PackageInfo r10, r34;
        android.accounts.Account r12, r38;
        android.os.UserManager $r13, $r14;
        android.content.pm.PackageManager $r15, $r21, $r22;
        boolean $z0, $z1, $z4, $z5, z6;
        android.content.Context $r16;
        android.content.res.Resources $r17;
        java.util.ArrayList $r18, r31;
        java.lang.StringBuilder $r24, $r25, $r26, $r30;
        android.content.pm.PackageManager$NameNotFoundException $r28;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account[];

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        $r13 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager getUserManager()>();

        if $r13 == null goto label01;

        if r1 == null goto label01;

        $i7 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        if $i7 < 0 goto label01;

        $i8 = staticinvoke <android.os.Process: int myUid()>();

        if i0 != $i8 goto label02;

     label01:
        return r2;

     label02:
        $r14 = r0.<com.android.server.accounts.AccountManagerService: android.os.UserManager mUserManager>;

        $i9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r4 = virtualinvoke $r14.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>($i9);

        if r4 == null goto label23;

        $z0 = virtualinvoke r4.<android.content.pm.UserInfo: boolean isRestricted()>();

        if $z0 == 0 goto label23;

        $r15 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r5 = virtualinvoke $r15.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        $r16 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r17 = virtualinvoke $r16.<android.content.Context: android.content.res.Resources getResources()>();

        r6 = virtualinvoke $r17.<android.content.res.Resources: java.lang.String getString(int)>(17039427);

        r7 = r5;

        i1 = lengthof r7;

        i2 = 0;

     label03:
        if i2 >= i1 goto label05;

        r8 = r7[i2];

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r30 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $z5 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>($r29);

        if $z5 == 0 goto label04;

        return r2;

     label04:
        i2 = i2 + 1;

        goto label03;

     label05:
        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r31 = $r18;

        $i11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: int access$500(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r32 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getSharedAccountsAsUser(int)>($i11);

        if r32 == null goto label06;

        $i10 = lengthof r32;

        if $i10 != 0 goto label07;

     label06:
        return r2;

     label07:
        r33 = "";

     label08:
        if r3 == null goto label10;

        $r22 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r34 = virtualinvoke $r22.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r3, 0);

        if r34 == null goto label09;

        $r27 = r34.<android.content.pm.PackageInfo: java.lang.String restrictedAccountType>;

        if $r27 == null goto label09;

        r33 = r34.<android.content.pm.PackageInfo: java.lang.String restrictedAccountType>;

     label09:
        goto label13;

     label10:
        r35 = r5;

        i3 = lengthof r35;

        i4 = 0;

     label11:
        if i4 >= i3 goto label13;

        r9 = r35[i4];

        $r21 = r0.<com.android.server.accounts.AccountManagerService: android.content.pm.PackageManager mPackageManager>;

        r10 = virtualinvoke $r21.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r9, 0);

        if r10 == null goto label12;

        $r23 = r10.<android.content.pm.PackageInfo: java.lang.String restrictedAccountType>;

        if $r23 == null goto label12;

        r33 = r10.<android.content.pm.PackageInfo: java.lang.String restrictedAccountType>;

        goto label13;

     label12:
        i4 = i4 + 1;

        goto label11;

     label13:
        goto label15;

     label14:
        $r28 := @caughtexception;

     label15:
        r37 = r2;

        i13 = lengthof r37;

        i14 = 0;

     label16:
        if i14 >= i13 goto label22;

        r38 = r37[i14];

        $r19 = r38.<android.accounts.Account: java.lang.String type>;

        $z1 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r33);

        if $z1 == 0 goto label17;

        virtualinvoke r31.<java.util.ArrayList: boolean add(java.lang.Object)>(r38);

        goto label21;

     label17:
        z6 = 0;

        r11 = r32;

        i5 = lengthof r11;

        i6 = 0;

     label18:
        if i6 >= i5 goto label20;

        r12 = r11[i6];

        $z4 = virtualinvoke r12.<android.accounts.Account: boolean equals(java.lang.Object)>(r38);

        if $z4 == 0 goto label19;

        z6 = 1;

        goto label20;

     label19:
        i6 = i6 + 1;

        goto label18;

     label20:
        if z6 != 0 goto label21;

        virtualinvoke r31.<java.util.ArrayList: boolean add(java.lang.Object)>(r38);

     label21:
        i14 = i14 + 1;

        goto label16;

     label22:
        $i12 = virtualinvoke r31.<java.util.ArrayList: int size()>();

        r39 = newarray (android.accounts.Account)[$i12];

        virtualinvoke r31.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r39);

        return r39;

     label23:
        return r2;

        catch android.content.pm.PackageManager$NameNotFoundException from label08 to label13 with label14;
    }

    protected android.accounts.Account[] getAccountsFromCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts, java.lang.String, int, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        java.lang.String r2, r3;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        android.accounts.Account[] r4, r6, r7, $r12, $r14, $r19, $r20, $r21, r22;
        java.util.Iterator r5, r23;
        java.util.HashMap $r8, $r10, $r17;
        java.util.Collection $r9, $r11;
        boolean $z0, $z1;
        java.lang.Object $r13, $r15, $r16;
        java.lang.Object[] $r18;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        if r2 == null goto label2;

        $r17 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r16 = virtualinvoke $r17.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r4 = (android.accounts.Account[]) $r16;

        if r4 != null goto label1;

        $r21 = <com.android.server.accounts.AccountManagerService: android.accounts.Account[] EMPTY_ACCOUNT_ARRAY>;

        return $r21;

     label1:
        $i4 = lengthof r4;

        $r18 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r4, $i4);

        $r20 = (android.accounts.Account[]) $r18;

        $r19 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] filterSharedAccounts(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account[],int,java.lang.String)>(r1, $r20, i0, r3);

        return $r19;

     label2:
        i5 = 0;

        $r8 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.util.Collection values()>();

        r5 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r15 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.accounts.Account[]) $r15;

        $i3 = lengthof r6;

        i5 = i5 + $i3;

        goto label3;

     label4:
        if i5 != 0 goto label5;

        $r14 = <com.android.server.accounts.AccountManagerService: android.accounts.Account[] EMPTY_ACCOUNT_ARRAY>;

        return $r14;

     label5:
        r22 = newarray (android.accounts.Account)[i5];

        i6 = 0;

        $r10 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$600(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.util.Collection values()>();

        r23 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r13 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.accounts.Account[]) $r13;

        $i1 = lengthof r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r22, i6, $i1);

        $i2 = lengthof r7;

        i6 = i6 + $i2;

        goto label6;

     label7:
        $r12 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.accounts.Account[] filterSharedAccounts(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account[],int,java.lang.String)>(r1, r22, i0, r3);

        return $r12;
    }

    protected void writeUserDataIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts, android.database.sqlite.SQLiteDatabase, android.accounts.Account, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.database.sqlite.SQLiteDatabase r2;
        android.accounts.Account r3;
        java.lang.String r4, r5;
        java.util.HashMap r6, $r7, $r11;
        java.lang.Object $r8;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.database.sqlite.SQLiteDatabase;

        r3 := @parameter2: android.accounts.Account;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $r7 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$700(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        r6 = (java.util.HashMap) $r8;

        if r6 != null goto label1;

        r6 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.HashMap readUserDataForAccountFromDatabaseLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)>(r2, r3);

        $r11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$700(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r6);

     label1:
        if r5 != null goto label2;

        virtualinvoke r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r4);

        goto label3;

     label2:
        virtualinvoke r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

     label3:
        return;
    }

    protected void writeAuthTokenIntoCacheLocked(com.android.server.accounts.AccountManagerService$UserAccounts, android.database.sqlite.SQLiteDatabase, android.accounts.Account, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.database.sqlite.SQLiteDatabase r2;
        android.accounts.Account r3;
        java.lang.String r4, r5;
        java.util.HashMap r6, $r7, $r11;
        java.lang.Object $r8;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.database.sqlite.SQLiteDatabase;

        r3 := @parameter2: android.accounts.Account;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $r7 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        r6 = (java.util.HashMap) $r8;

        if r6 != null goto label1;

        r6 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.HashMap readAuthTokensForAccountFromDatabaseLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)>(r2, r3);

        $r11 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r6);

     label1:
        if r5 != null goto label2;

        virtualinvoke r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r4);

        goto label3;

     label2:
        virtualinvoke r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

     label3:
        return;
    }

    protected java.lang.String readAuthTokenInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.String r3, $r12;
        java.lang.Object r4, $r8, $r10, $r11;
        java.util.HashMap r5, $r9, $r14;
        android.database.sqlite.SQLiteDatabase r6;
        java.lang.Throwable r7, $r15;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r13;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.String;

        $r8 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r4 = $r8;

        entermonitor $r8;

     label1:
        $r9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.util.HashMap) $r10;

        if r5 != null goto label2;

        $r13 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r6 = virtualinvoke $r13.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r5 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.HashMap readAuthTokensForAccountFromDatabaseLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)>(r6, r2);

        $r14 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$800(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5);

     label2:
        $r11 = virtualinvoke r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        $r12 = (java.lang.String) $r11;

        exitmonitor r4;

     label3:
        return $r12;

     label4:
        $r15 := @caughtexception;

        r7 = $r15;

        exitmonitor r4;

     label5:
        throw r7;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected java.lang.String readUserDataInternal(com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.String r3, $r12;
        java.lang.Object r4, $r8, $r10, $r11;
        java.util.HashMap r5, $r9, $r14;
        android.database.sqlite.SQLiteDatabase r6;
        java.lang.Throwable r7, $r15;
        com.android.server.accounts.AccountManagerService$DatabaseHelper $r13;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter1: android.accounts.Account;

        r3 := @parameter2: java.lang.String;

        $r8 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.lang.Object access$300(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r4 = $r8;

        entermonitor $r8;

     label1:
        $r9 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$700(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.util.HashMap) $r10;

        if r5 != null goto label2;

        $r13 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: com.android.server.accounts.AccountManagerService$DatabaseHelper access$400(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        r6 = virtualinvoke $r13.<com.android.server.accounts.AccountManagerService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r5 = virtualinvoke r0.<com.android.server.accounts.AccountManagerService: java.util.HashMap readUserDataForAccountFromDatabaseLocked(android.database.sqlite.SQLiteDatabase,android.accounts.Account)>(r6, r2);

        $r14 = staticinvoke <com.android.server.accounts.AccountManagerService$UserAccounts: java.util.HashMap access$700(com.android.server.accounts.AccountManagerService$UserAccounts)>(r1);

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5);

     label2:
        $r11 = virtualinvoke r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        $r12 = (java.lang.String) $r11;

        exitmonitor r4;

     label3:
        return $r12;

     label4:
        $r15 := @caughtexception;

        r7 = $r15;

        exitmonitor r4;

     label5:
        throw r7;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected java.util.HashMap readUserDataForAccountFromDatabaseLocked(android.database.sqlite.SQLiteDatabase, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.database.sqlite.SQLiteDatabase r1;
        android.accounts.Account r2;
        java.util.HashMap r3, $r8;
        android.database.Cursor r4;
        java.lang.String r5, r6, $r10, $r11;
        java.lang.Throwable r7, $r14;
        java.lang.String[] $r9, $r12;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: android.accounts.Account;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r3 = $r8;

        $r12 = <com.android.server.accounts.AccountManagerService: java.lang.String[] COLUMNS_EXTRAS_KEY_AND_VALUE>;

        $r9 = newarray (java.lang.String)[2];

        $r10 = r2.<android.accounts.Account: java.lang.String name>;

        $r9[0] = $r10;

        $r11 = r2.<android.accounts.Account: java.lang.String type>;

        $r9[1] = $r11;

        r4 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("extras", $r12, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", $r9, null, null, null);

     label1:
        $z0 = interfaceinvoke r4.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label2;

        r5 = interfaceinvoke r4.<android.database.Cursor: java.lang.String getString(int)>(0);

        r6 = interfaceinvoke r4.<android.database.Cursor: java.lang.String getString(int)>(1);

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

        goto label1;

     label2:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

        goto label5;

     label3:
        $r14 := @caughtexception;

        r7 = $r14;

     label4:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

        throw r7;

     label5:
        return r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected java.util.HashMap readAuthTokensForAccountFromDatabaseLocked(android.database.sqlite.SQLiteDatabase, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.database.sqlite.SQLiteDatabase r1;
        android.accounts.Account r2;
        java.util.HashMap r3, $r8;
        android.database.Cursor r4;
        java.lang.String r5, r6, $r10, $r11;
        java.lang.Throwable r7, $r14;
        java.lang.String[] $r9, $r12;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: android.accounts.Account;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r3 = $r8;

        $r12 = <com.android.server.accounts.AccountManagerService: java.lang.String[] COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN>;

        $r9 = newarray (java.lang.String)[2];

        $r10 = r2.<android.accounts.Account: java.lang.String name>;

        $r9[0] = $r10;

        $r11 = r2.<android.accounts.Account: java.lang.String type>;

        $r9[1] = $r11;

        r4 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("authtokens", $r12, "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)", $r9, null, null, null);

     label1:
        $z0 = interfaceinvoke r4.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label2;

        r5 = interfaceinvoke r4.<android.database.Cursor: java.lang.String getString(int)>(0);

        r6 = interfaceinvoke r4.<android.database.Cursor: java.lang.String getString(int)>(1);

        virtualinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

        goto label1;

     label2:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

        goto label5;

     label3:
        $r14 := @caughtexception;

        r7 = $r14;

     label4:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

        throw r7;

     label5:
        return r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private android.content.Context getContextForUser(android.os.UserHandle)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.os.UserHandle r1;
        android.content.Context $r3, $r4, $r6, $r8;
        java.lang.String $r5;
        android.content.pm.PackageManager$NameNotFoundException $r7;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: android.os.UserHandle;

     label1:
        $r4 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r3 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        $r6 = virtualinvoke $r4.<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>($r5, 0, r1);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        return $r8;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public volatile void onServiceChanged(java.lang.Object, int, boolean)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.lang.Object r1;
        int i0;
        boolean z0;
        android.accounts.AuthenticatorDescription $r2;

        r0 := @this: com.android.server.accounts.AccountManagerService;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = (android.accounts.AuthenticatorDescription) r1;

        virtualinvoke r0.<com.android.server.accounts.AccountManagerService: void onServiceChanged(android.accounts.AuthenticatorDescription,int,boolean)>($r2, i0, z0);

        return;
    }

    static void access$000(com.android.server.accounts.AccountManagerService)
    {
        com.android.server.accounts.AccountManagerService r0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void purgeOldGrantsAll()>();

        return;
    }

    static void access$100(com.android.server.accounts.AccountManagerService, android.content.Intent)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.content.Intent r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: android.content.Intent;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void onUserRemoved(android.content.Intent)>(r1);

        return;
    }

    static void access$200(com.android.server.accounts.AccountManagerService, android.content.Intent)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.content.Intent r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: android.content.Intent;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void onUserStarted(android.content.Intent)>(r1);

        return;
    }

    static void access$1100(com.android.server.accounts.AccountManagerService, com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter2: android.accounts.Account;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void removeAccountInternal(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r1, r2);

        return;
    }

    static android.content.Intent access$1200(com.android.server.accounts.AccountManagerService, android.accounts.Account, int, android.accounts.AccountAuthenticatorResponse, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0;
        android.accounts.AccountAuthenticatorResponse r2;
        java.lang.String r3, r4;
        android.content.Intent $r5;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: android.accounts.Account;

        i0 := @parameter2: int;

        r2 := @parameter3: android.accounts.AccountAuthenticatorResponse;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String;

        $r5 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: android.content.Intent newGrantCredentialsPermissionIntent(android.accounts.Account,int,android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String)>(r1, i0, r2, r3, r4);

        return $r5;
    }

    static boolean access$1300(com.android.server.accounts.AccountManagerService, com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.String, java.lang.String)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.String r3, r4;
        boolean $z0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter2: android.accounts.Account;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean saveAuthTokenToDatabase(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        return $z0;
    }

    static void access$1400(com.android.server.accounts.AccountManagerService, com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account, java.lang.CharSequence, android.content.Intent, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.CharSequence r3;
        android.content.Intent r4;
        int i0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter2: android.accounts.Account;

        r3 := @parameter3: java.lang.CharSequence;

        r4 := @parameter4: android.content.Intent;

        i0 := @parameter5: int;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService: void doNotification(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.CharSequence,android.content.Intent,int)>(r1, r2, r3, r4, i0);

        return;
    }

    static java.util.LinkedHashMap access$1600(com.android.server.accounts.AccountManagerService)
    {
        com.android.server.accounts.AccountManagerService r0;
        java.util.LinkedHashMap $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: java.util.LinkedHashMap mSessions>;

        return $r1;
    }

    static android.content.Context access$1700(com.android.server.accounts.AccountManagerService)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: android.content.Context mContext>;

        return $r1;
    }

    static com.android.server.accounts.AccountManagerService$MessageHandler access$1800(com.android.server.accounts.AccountManagerService)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$MessageHandler $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.AccountManagerService$MessageHandler mMessageHandler>;

        return $r1;
    }

    static java.lang.Integer access$1900(com.android.server.accounts.AccountManagerService, com.android.server.accounts.AccountManagerService$UserAccounts, android.accounts.Account)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.AccountManagerService$UserAccounts r1;
        android.accounts.Account r2;
        java.lang.Integer $r3;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: com.android.server.accounts.AccountManagerService$UserAccounts;

        r2 := @parameter2: android.accounts.Account;

        $r3 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: java.lang.Integer getSigninRequiredNotificationId(com.android.server.accounts.AccountManagerService$UserAccounts,android.accounts.Account)>(r1, r2);

        return $r3;
    }

    static com.android.server.accounts.IAccountAuthenticatorCache access$2000(com.android.server.accounts.AccountManagerService)
    {
        com.android.server.accounts.AccountManagerService r0;
        com.android.server.accounts.IAccountAuthenticatorCache $r1;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        $r1 = r0.<com.android.server.accounts.AccountManagerService: com.android.server.accounts.IAccountAuthenticatorCache mAuthenticatorCache>;

        return $r1;
    }

    static boolean access$2100(com.android.server.accounts.AccountManagerService, android.accounts.Account, int, int)
    {
        com.android.server.accounts.AccountManagerService r0;
        android.accounts.Account r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accounts.AccountManagerService;

        r1 := @parameter1: android.accounts.Account;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = specialinvoke r0.<com.android.server.accounts.AccountManagerService: boolean copyAccountToUser(android.accounts.Account,int,int)>(r1, i0, i1);

        return $z0;
    }

    static java.lang.String access$2200(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.android.server.accounts.AccountManagerService: java.lang.String getDatabaseName(int)>(i0);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1, $r2;
        java.util.concurrent.atomic.AtomicReference $r3;
        android.accounts.Account[] $r4;
        android.content.Intent $r5, $r6;

        <com.android.server.accounts.AccountManagerService: java.lang.String SELECTION_USERDATA_BY_ACCOUNT> = "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)";

        <com.android.server.accounts.AccountManagerService: java.lang.String SELECTION_AUTHTOKENS_BY_ACCOUNT> = "accounts_id=(select _id FROM accounts WHERE name=? AND type=?)";

        <com.android.server.accounts.AccountManagerService: java.lang.String COUNT_OF_MATCHING_GRANTS> = "SELECT COUNT(*) FROM grants, accounts WHERE accounts_id=_id AND uid=? AND auth_token_type=? AND name=? AND type=?";

        <com.android.server.accounts.AccountManagerService: java.lang.String TABLE_SHARED_ACCOUNTS> = "shared_accounts";

        <com.android.server.accounts.AccountManagerService: java.lang.String META_VALUE> = "value";

        <com.android.server.accounts.AccountManagerService: java.lang.String META_KEY> = "key";

        <com.android.server.accounts.AccountManagerService: java.lang.String TABLE_META> = "meta";

        <com.android.server.accounts.AccountManagerService: java.lang.String EXTRAS_VALUE> = "value";

        <com.android.server.accounts.AccountManagerService: java.lang.String EXTRAS_KEY> = "key";

        <com.android.server.accounts.AccountManagerService: java.lang.String EXTRAS_ACCOUNTS_ID> = "accounts_id";

        <com.android.server.accounts.AccountManagerService: java.lang.String EXTRAS_ID> = "_id";

        <com.android.server.accounts.AccountManagerService: java.lang.String TABLE_EXTRAS> = "extras";

        <com.android.server.accounts.AccountManagerService: java.lang.String GRANTS_GRANTEE_UID> = "uid";

        <com.android.server.accounts.AccountManagerService: java.lang.String GRANTS_AUTH_TOKEN_TYPE> = "auth_token_type";

        <com.android.server.accounts.AccountManagerService: java.lang.String GRANTS_ACCOUNTS_ID> = "accounts_id";

        <com.android.server.accounts.AccountManagerService: java.lang.String TABLE_GRANTS> = "grants";

        <com.android.server.accounts.AccountManagerService: java.lang.String AUTHTOKENS_AUTHTOKEN> = "authtoken";

        <com.android.server.accounts.AccountManagerService: java.lang.String AUTHTOKENS_TYPE> = "type";

        <com.android.server.accounts.AccountManagerService: java.lang.String AUTHTOKENS_ACCOUNTS_ID> = "accounts_id";

        <com.android.server.accounts.AccountManagerService: java.lang.String AUTHTOKENS_ID> = "_id";

        <com.android.server.accounts.AccountManagerService: java.lang.String TABLE_AUTHTOKENS> = "authtokens";

        <com.android.server.accounts.AccountManagerService: java.lang.String ACCOUNTS_PREVIOUS_NAME> = "previous_name";

        <com.android.server.accounts.AccountManagerService: java.lang.String ACCOUNTS_PASSWORD> = "password";

        <com.android.server.accounts.AccountManagerService: java.lang.String ACCOUNTS_TYPE_COUNT> = "count(type)";

        <com.android.server.accounts.AccountManagerService: java.lang.String ACCOUNTS_TYPE> = "type";

        <com.android.server.accounts.AccountManagerService: java.lang.String ACCOUNTS_NAME> = "name";

        <com.android.server.accounts.AccountManagerService: java.lang.String ACCOUNTS_ID> = "_id";

        <com.android.server.accounts.AccountManagerService: java.lang.String TABLE_ACCOUNTS> = "accounts";

        <com.android.server.accounts.AccountManagerService: int MESSAGE_COPY_SHARED_ACCOUNT> = 4;

        <com.android.server.accounts.AccountManagerService: int MESSAGE_TIMED_OUT> = 3;

        <com.android.server.accounts.AccountManagerService: int DATABASE_VERSION> = 6;

        <com.android.server.accounts.AccountManagerService: java.lang.String DATABASE_NAME> = "accounts.db";

        <com.android.server.accounts.AccountManagerService: int TIMEOUT_DELAY_MS> = 60000;

        <com.android.server.accounts.AccountManagerService: java.lang.String TAG> = "AccountManagerService";

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "type";

        $r0[1] = "count(type)";

        <com.android.server.accounts.AccountManagerService: java.lang.String[] ACCOUNT_TYPE_COUNT_PROJECTION> = $r0;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "type";

        $r1[1] = "authtoken";

        <com.android.server.accounts.AccountManagerService: java.lang.String[] COLUMNS_AUTHTOKENS_TYPE_AND_AUTHTOKEN> = $r1;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "key";

        $r2[1] = "value";

        <com.android.server.accounts.AccountManagerService: java.lang.String[] COLUMNS_EXTRAS_KEY_AND_VALUE> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        <com.android.server.accounts.AccountManagerService: java.util.concurrent.atomic.AtomicReference sThis> = $r3;

        $r4 = newarray (android.accounts.Account)[0];

        <com.android.server.accounts.AccountManagerService: android.accounts.Account[] EMPTY_ACCOUNT_ARRAY> = $r4;

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.accounts.LOGIN_ACCOUNTS_CHANGED");

        <com.android.server.accounts.AccountManagerService: android.content.Intent ACCOUNTS_CHANGED_INTENT> = $r5;

        $r6 = <com.android.server.accounts.AccountManagerService: android.content.Intent ACCOUNTS_CHANGED_INTENT>;

        virtualinvoke $r6.<android.content.Intent: android.content.Intent setFlags(int)>(67108864);

        return;
    }
}
