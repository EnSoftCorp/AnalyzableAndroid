final class com.android.server.am.CoreSettingsObserver extends android.database.ContentObserver
{
    private static final java.lang.String LOG_TAG;
    private static final java.util.Map sSecureSettingToTypeMap;
    private static final java.util.Map sSystemSettingToTypeMap;
    private static final java.util.Map sGlobalSettingToTypeMap;
    private final android.os.Bundle mCoreSettings;
    private final com.android.server.am.ActivityManagerService mActivityManagerService;

    public void <init>(com.android.server.am.ActivityManagerService)
    {
        com.android.server.am.CoreSettingsObserver r0;
        com.android.server.am.ActivityManagerService r1;
        com.android.server.am.ActivityManagerService$MainHandler $r2;
        android.os.Bundle $r3;

        r0 := @this: com.android.server.am.CoreSettingsObserver;

        r1 := @parameter0: com.android.server.am.ActivityManagerService;

        $r2 = r1.<com.android.server.am.ActivityManagerService: com.android.server.am.ActivityManagerService$MainHandler mHandler>;

        specialinvoke r0.<android.database.ContentObserver: void <init>(android.os.Handler)>($r2);

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        r0.<com.android.server.am.CoreSettingsObserver: android.os.Bundle mCoreSettings> = $r3;

        r0.<com.android.server.am.CoreSettingsObserver: com.android.server.am.ActivityManagerService mActivityManagerService> = r1;

        specialinvoke r0.<com.android.server.am.CoreSettingsObserver: void beginObserveCoreSettings()>();

        specialinvoke r0.<com.android.server.am.CoreSettingsObserver: void sendCoreSettings()>();

        return;
    }

    public android.os.Bundle getCoreSettingsLocked()
    {
        com.android.server.am.CoreSettingsObserver r0;
        android.os.Bundle $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.server.am.CoreSettingsObserver;

        $r1 = r0.<com.android.server.am.CoreSettingsObserver: android.os.Bundle mCoreSettings>;

        $r2 = virtualinvoke $r1.<android.os.Bundle: java.lang.Object clone()>();

        $r3 = (android.os.Bundle) $r2;

        return $r3;
    }

    public void onChange(boolean)
    {
        com.android.server.am.CoreSettingsObserver r0;
        boolean z0;
        com.android.server.am.ActivityManagerService r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.am.CoreSettingsObserver;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.am.CoreSettingsObserver: com.android.server.am.ActivityManagerService mActivityManagerService>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<com.android.server.am.CoreSettingsObserver: void sendCoreSettings()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void sendCoreSettings()
    {
        com.android.server.am.CoreSettingsObserver r0;
        java.util.Map $r1, $r3, $r5;
        android.os.Bundle $r2, $r4, $r6, $r7;
        com.android.server.am.ActivityManagerService $r8;

        r0 := @this: com.android.server.am.CoreSettingsObserver;

        $r2 = r0.<com.android.server.am.CoreSettingsObserver: android.os.Bundle mCoreSettings>;

        $r1 = <com.android.server.am.CoreSettingsObserver: java.util.Map sSecureSettingToTypeMap>;

        specialinvoke r0.<com.android.server.am.CoreSettingsObserver: void populateSettings(android.os.Bundle,java.util.Map)>($r2, $r1);

        $r4 = r0.<com.android.server.am.CoreSettingsObserver: android.os.Bundle mCoreSettings>;

        $r3 = <com.android.server.am.CoreSettingsObserver: java.util.Map sSystemSettingToTypeMap>;

        specialinvoke r0.<com.android.server.am.CoreSettingsObserver: void populateSettings(android.os.Bundle,java.util.Map)>($r4, $r3);

        $r6 = r0.<com.android.server.am.CoreSettingsObserver: android.os.Bundle mCoreSettings>;

        $r5 = <com.android.server.am.CoreSettingsObserver: java.util.Map sGlobalSettingToTypeMap>;

        specialinvoke r0.<com.android.server.am.CoreSettingsObserver: void populateSettings(android.os.Bundle,java.util.Map)>($r6, $r5);

        $r8 = r0.<com.android.server.am.CoreSettingsObserver: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r7 = r0.<com.android.server.am.CoreSettingsObserver: android.os.Bundle mCoreSettings>;

        virtualinvoke $r8.<com.android.server.am.ActivityManagerService: void onCoreSettingsChange(android.os.Bundle)>($r7);

        return;
    }

    private void beginObserveCoreSettings()
    {
        com.android.server.am.CoreSettingsObserver r0;
        java.util.Iterator r1, r22, r25;
        java.lang.String r2, r23, r26;
        android.net.Uri r3, r24, r27;
        java.util.Map $r4, $r6, $r8;
        java.util.Set $r5, $r7, $r9;
        boolean $z0, $z1, $z2;
        java.lang.Object $r10, $r13, $r18;
        android.content.Context $r11, $r17, $r19;
        com.android.server.am.ActivityManagerService $r12, $r15, $r20;
        android.content.ContentResolver $r14, $r16, $r21;

        r0 := @this: com.android.server.am.CoreSettingsObserver;

        $r4 = <com.android.server.am.CoreSettingsObserver: java.util.Map sSecureSettingToTypeMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r18 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r18;

        r3 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>(r2);

        $r20 = r0.<com.android.server.am.CoreSettingsObserver: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r19 = $r20.<com.android.server.am.ActivityManagerService: android.content.Context mContext>;

        $r21 = virtualinvoke $r19.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r21.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>(r3, 0, r0);

        goto label1;

     label2:
        $r6 = <com.android.server.am.CoreSettingsObserver: java.util.Map sSystemSettingToTypeMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        r22 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r13 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.lang.String) $r13;

        r24 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>(r23);

        $r15 = r0.<com.android.server.am.CoreSettingsObserver: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r17 = $r15.<com.android.server.am.ActivityManagerService: android.content.Context mContext>;

        $r16 = virtualinvoke $r17.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r16.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>(r24, 0, r0);

        goto label3;

     label4:
        $r8 = <com.android.server.am.CoreSettingsObserver: java.util.Map sGlobalSettingToTypeMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        r25 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r10 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.lang.String) $r10;

        r27 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>(r26);

        $r12 = r0.<com.android.server.am.CoreSettingsObserver: com.android.server.am.ActivityManagerService mActivityManagerService>;

        $r11 = $r12.<com.android.server.am.ActivityManagerService: android.content.Context mContext>;

        $r14 = virtualinvoke $r11.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r14.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>(r27, 0, r0);

        goto label5;

     label6:
        return;
    }

    private void populateSettings(android.os.Bundle, java.util.Map)
    {
        com.android.server.am.CoreSettingsObserver r0;
        android.os.Bundle r1;
        java.util.Map r2, $r17, $r18, $r22, $r23, $r28, $r29, $r33, $r34;
        android.content.Context r3;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        java.lang.String r6, r8, $r38, $r41;
        java.lang.Class r7, $r13, $r15, $r16;
        com.android.server.am.ActivityManagerService $r9;
        java.util.Set $r10;
        boolean $z0;
        java.lang.Object $r11, $r12, $r14;
        android.content.ContentResolver $r19, $r20, $r21, $r24, $r25, $r26, $r27, $r30, $r31, $r32, $r35, $r36;
        java.lang.StringBuilder $r37, $r39, $r42, $r43;
        android.provider.Settings$SettingNotFoundException $r40, r44;
        int i1;
        float f0;
        long l2;

        r0 := @this: com.android.server.am.CoreSettingsObserver;

        r1 := @parameter0: android.os.Bundle;

        r2 := @parameter1: java.util.Map;

        $r9 = r0.<com.android.server.am.CoreSettingsObserver: com.android.server.am.ActivityManagerService mActivityManagerService>;

        r3 = $r9.<com.android.server.am.ActivityManagerService: android.content.Context mContext>;

        $r10 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label21;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.String) $r12;

        $r14 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r7 = (java.lang.Class) $r14;

     label02:
        if r7 != class "java/lang/String" goto label06;

        $r33 = <com.android.server.am.CoreSettingsObserver: java.util.Map sSecureSettingToTypeMap>;

        if r2 != $r33 goto label03;

        $r35 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r8 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r35, r6);

        goto label05;

     label03:
        $r34 = <com.android.server.am.CoreSettingsObserver: java.util.Map sSystemSettingToTypeMap>;

        if r2 != $r34 goto label04;

        $r36 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r8 = staticinvoke <android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r36, r6);

        goto label05;

     label04:
        $r32 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r8 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r32, r6);

     label05:
        virtualinvoke r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>(r6, r8);

        goto label18;

     label06:
        $r13 = <java.lang.Integer: java.lang.Class TYPE>;

        if r7 != $r13 goto label10;

        $r28 = <com.android.server.am.CoreSettingsObserver: java.util.Map sSecureSettingToTypeMap>;

        if r2 != $r28 goto label07;

        $r30 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i1 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)>($r30, r6);

        goto label09;

     label07:
        $r29 = <com.android.server.am.CoreSettingsObserver: java.util.Map sSystemSettingToTypeMap>;

        if r2 != $r29 goto label08;

        $r31 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i1 = staticinvoke <android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)>($r31, r6);

        goto label09;

     label08:
        $r27 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String)>($r27, r6);

     label09:
        virtualinvoke r1.<android.os.Bundle: void putInt(java.lang.String,int)>(r6, i1);

        goto label18;

     label10:
        $r16 = <java.lang.Float: java.lang.Class TYPE>;

        if r7 != $r16 goto label14;

        $r23 = <com.android.server.am.CoreSettingsObserver: java.util.Map sSecureSettingToTypeMap>;

        if r2 != $r23 goto label11;

        $r25 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        f0 = staticinvoke <android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)>($r25, r6);

        goto label13;

     label11:
        $r22 = <com.android.server.am.CoreSettingsObserver: java.util.Map sSystemSettingToTypeMap>;

        if r2 != $r22 goto label12;

        $r26 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        f0 = staticinvoke <android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)>($r26, r6);

        goto label13;

     label12:
        $r24 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        f0 = staticinvoke <android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String)>($r24, r6);

     label13:
        virtualinvoke r1.<android.os.Bundle: void putFloat(java.lang.String,float)>(r6, f0);

        goto label18;

     label14:
        $r15 = <java.lang.Long: java.lang.Class TYPE>;

        if r7 != $r15 goto label18;

        $r18 = <com.android.server.am.CoreSettingsObserver: java.util.Map sSecureSettingToTypeMap>;

        if r2 != $r18 goto label15;

        $r21 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        l2 = staticinvoke <android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)>($r21, r6);

        goto label17;

     label15:
        $r17 = <com.android.server.am.CoreSettingsObserver: java.util.Map sSystemSettingToTypeMap>;

        if r2 != $r17 goto label16;

        $r20 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        l2 = staticinvoke <android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)>($r20, r6);

        goto label17;

     label16:
        $r19 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        l2 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)>($r19, r6);

     label17:
        virtualinvoke r1.<android.os.Bundle: void putLong(java.lang.String,long)>(r6, l2);

     label18:
        goto label20;

     label19:
        $r40 := @caughtexception;

        r44 = $r40;

        $r38 = <com.android.server.am.CoreSettingsObserver: java.lang.String LOG_TAG>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find setting \"");

        $r43 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>($r38, $r41, r44);

     label20:
        goto label01;

     label21:
        return;

        catch android.provider.Settings$SettingNotFoundException from label02 to label18 with label19;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r5, $r10;
        java.lang.String $r1;
        java.util.HashMap $r2, $r3, $r4;
        java.util.Map $r6, $r8, $r11;

        $r0 = class "com/android/server/am/CoreSettingsObserver";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.am.CoreSettingsObserver: java.lang.String LOG_TAG> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <com.android.server.am.CoreSettingsObserver: java.util.Map sSecureSettingToTypeMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <com.android.server.am.CoreSettingsObserver: java.util.Map sSystemSettingToTypeMap> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <com.android.server.am.CoreSettingsObserver: java.util.Map sGlobalSettingToTypeMap> = $r4;

        $r6 = <com.android.server.am.CoreSettingsObserver: java.util.Map sSecureSettingToTypeMap>;

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("long_press_timeout", $r5);

        $r8 = <com.android.server.am.CoreSettingsObserver: java.util.Map sSystemSettingToTypeMap>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("time_12_24", class "java/lang/String");

        $r11 = <com.android.server.am.CoreSettingsObserver: java.util.Map sGlobalSettingToTypeMap>;

        $r10 = <java.lang.Integer: java.lang.Class TYPE>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("debug_view_attributes", $r10);

        return;
    }
}
