class com.android.server.job.JobStore$ReadJobMapFromDiskRunnable extends java.lang.Object implements java.lang.Runnable
{
    private final android.util.ArraySet jobSet;
    final com.android.server.job.JobStore this$0;

    void <init>(com.android.server.job.JobStore, android.util.ArraySet)
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        com.android.server.job.JobStore r1;
        android.util.ArraySet r2;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        r1 := @parameter0: com.android.server.job.JobStore;

        r2 := @parameter1: android.util.ArraySet;

        r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: android.util.ArraySet jobSet> = r2;

        return;
    }

    public void run()
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        java.util.List r1;
        java.io.FileInputStream r2;
        com.android.server.job.JobStore r3, $r5, $r7;
        int i0, $i1;
        java.lang.Throwable r4, $r10;
        android.util.AtomicFile $r6;
        android.util.ArraySet $r8;
        java.lang.Object $r9;
        java.io.FileNotFoundException $r11;
        java.io.IOException $r12;
        org.xmlpull.v1.XmlPullParserException $r13;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

     label01:
        $r5 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0>;

        $r6 = staticinvoke <com.android.server.job.JobStore: android.util.AtomicFile access$100(com.android.server.job.JobStore)>($r5);

        r2 = virtualinvoke $r6.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        $r7 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0>;

        r3 = $r7;

        entermonitor $r7;

     label02:
        r1 = specialinvoke r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: java.util.List readJobMapImpl(java.io.FileInputStream)>(r2);

        if r1 == null goto label04;

        i0 = 0;

     label03:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 >= $i1 goto label04;

        $r8 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: android.util.ArraySet jobSet>;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        virtualinvoke $r8.<android.util.ArraySet: boolean add(java.lang.Object)>($r9);

        i0 = i0 + 1;

        goto label03;

     label04:
        exitmonitor r3;

     label05:
        goto label08;

     label06:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r3;

     label07:
        throw r4;

     label08:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label09:
        goto label13;

     label10:
        $r11 := @caughtexception;

        goto label13;

     label11:
        $r13 := @caughtexception;

        goto label13;

     label12:
        $r12 := @caughtexception;

     label13:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.io.FileNotFoundException from label01 to label09 with label10;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label09 with label11;
        catch java.io.IOException from label01 to label09 with label12;
    }

    private java.util.List readJobMapImpl(java.io.FileInputStream) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        java.io.FileInputStream r1;
        org.xmlpull.v1.XmlPullParser r2;
        int i0, i1, i6;
        java.lang.String r3, $r5, $r7, $r9, $r10, r13;
        java.util.ArrayList r4, $r6;
        boolean $z0, $z1;
        java.lang.Integer $r8;
        java.lang.NumberFormatException $r11;
        com.android.server.job.controllers.JobStatus r14;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        r1 := @parameter0: java.io.FileInputStream;

        r2 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r1, null);

        i0 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

     label01:
        if i0 == 2 goto label02;

        if i0 == 1 goto label02;

        i0 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int next()>();

        $r10 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", $r10);

        goto label01;

     label02:
        if i0 != 1 goto label03;

        return null;

     label03:
        r3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r5 = "job-info";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label12;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r4 = $r6;

     label04:
        $r7 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "version");

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r7);

        i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if i1 == 0 goto label06;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", "Invalid version number, aborting jobs file read.");

     label05:
        return null;

     label06:
        goto label08;

     label07:
        $r11 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("JobStore", "Invalid version number, aborting jobs file read.");

        return null;

     label08:
        i6 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int next()>();

     label09:
        if i6 != 2 goto label11;

        r13 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r9 = "job";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z1 == 0 goto label11;

        r14 = specialinvoke r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.controllers.JobStatus restoreJobFromXml(org.xmlpull.v1.XmlPullParser)>(r2);

        if r14 == null goto label10;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r14);

        goto label11;

     label10:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", "Error reading job from file.");

     label11:
        i6 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i6 != 1 goto label09;

        return r4;

     label12:
        return null;

        catch java.lang.NumberFormatException from label04 to label05 with label07;
    }

    private com.android.server.job.controllers.JobStatus restoreJobFromXml(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.app.job.JobInfo$Builder r2;
        int i0, i21, i22, i23;
        java.lang.String $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r19, $r21, r42;
        java.lang.Integer $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r15, $r17, $r23, $r25, $r29, $r30;
        long $l2, $l4, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16;
        java.lang.Long $r16, $r18, $r26, $r27, $r28, $r32, $r33;
        byte $b3, $b5;
        android.app.job.JobInfo $r22;
        com.android.server.job.controllers.JobStatus $r24;
        java.lang.NumberFormatException $r35, $r36, $r38, $r39, $r40;
        android.util.Pair r41;
        android.os.PersistableBundle r45;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

     label01:
        r2 = specialinvoke r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: android.app.job.JobInfo$Builder buildBuilderFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

        virtualinvoke r2.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPersisted(boolean)>(1);

        $r7 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "uid");

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r7);

        i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

     label02:
        goto label04;

     label03:
        $r35 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("JobStore", "Error parsing job\'s required fields, skipping");

        return null;

     label04:
        i21 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i21 == 4 goto label04;

        if i21 != 2 goto label05;

        $r9 = "constraints";

        $r10 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label06;

     label05:
        return null;

     label06:
        specialinvoke r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: void buildConstraintsFromXml(android.app.job.JobInfo$Builder,org.xmlpull.v1.XmlPullParser)>(r2, r1);

     label07:
        goto label09;

     label08:
        $r38 := @caughtexception;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", "Error reading constraints, skipping.");

        return null;

     label09:
        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

     label10:
        i22 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i22 == 4 goto label10;

        if i22 == 2 goto label11;

        return null;

     label11:
        r41 = specialinvoke r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: android.util.Pair buildExecutionTimesFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

     label12:
        goto label14;

     label13:
        $r39 := @caughtexception;

        return null;

     label14:
        $r11 = "periodic";

        $r12 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z1 == 0 goto label18;

     label15:
        r42 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "period");

        $r33 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r42);

        $l16 = virtualinvoke $r33.<java.lang.Long: long longValue()>();

        virtualinvoke r2.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPeriodic(long)>($l16);

     label16:
        goto label24;

     label17:
        $r40 := @caughtexception;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", "Error reading periodic execution criteria, skipping.");

        return null;

     label18:
        $r14 = "one-off";

        $r13 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z2 == 0 goto label23;

     label19:
        $r15 = r41.<android.util.Pair: java.lang.Object first>;

        $r16 = (java.lang.Long) $r15;

        $l2 = virtualinvoke $r16.<java.lang.Long: long longValue()>();

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label20;

        $r30 = r41.<android.util.Pair: java.lang.Object first>;

        $r32 = (java.lang.Long) $r30;

        $l15 = virtualinvoke $r32.<java.lang.Long: long longValue()>();

        $l14 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l13 = $l15 - $l14;

        virtualinvoke r2.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setMinimumLatency(long)>($l13);

     label20:
        $r17 = r41.<android.util.Pair: java.lang.Object second>;

        $r18 = (java.lang.Long) $r17;

        $l4 = virtualinvoke $r18.<java.lang.Long: long longValue()>();

        $b5 = $l4 cmp 9223372036854775807L;

        if $b5 == 0 goto label21;

        $r29 = r41.<android.util.Pair: java.lang.Object second>;

        $r28 = (java.lang.Long) $r29;

        $l9 = virtualinvoke $r28.<java.lang.Long: long longValue()>();

        $l12 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l11 = $l9 - $l12;

        virtualinvoke r2.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setOverrideDeadline(long)>($l11);

     label21:
        goto label24;

     label22:
        $r36 := @caughtexception;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", "Error reading job execution criteria, skipping.");

        return null;

     label23:
        return null;

     label24:
        specialinvoke r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: void maybeBuildBackoffPolicyFromXml(android.app.job.JobInfo$Builder,org.xmlpull.v1.XmlPullParser)>(r2, r1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

     label25:
        i23 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i23 == 4 goto label25;

        if i23 != 2 goto label26;

        $r19 = "extras";

        $r21 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z3 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z3 != 0 goto label27;

     label26:
        return null;

     label27:
        r45 = staticinvoke <android.os.PersistableBundle: android.os.PersistableBundle restoreFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

        virtualinvoke r2.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setExtras(android.os.PersistableBundle)>(r45);

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        $r24 = new com.android.server.job.controllers.JobStatus;

        $r22 = virtualinvoke r2.<android.app.job.JobInfo$Builder: android.app.job.JobInfo build()>();

        $r23 = r41.<android.util.Pair: java.lang.Object first>;

        $r27 = (java.lang.Long) $r23;

        $l8 = virtualinvoke $r27.<java.lang.Long: long longValue()>();

        $r25 = r41.<android.util.Pair: java.lang.Object second>;

        $r26 = (java.lang.Long) $r25;

        $l10 = virtualinvoke $r26.<java.lang.Long: long longValue()>();

        specialinvoke $r24.<com.android.server.job.controllers.JobStatus: void <init>(android.app.job.JobInfo,int,long,long)>($r22, i0, $l8, $l10);

        return $r24;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label06 to label07 with label08;
        catch java.lang.NumberFormatException from label11 to label12 with label13;
        catch java.lang.NumberFormatException from label15 to label16 with label17;
        catch java.lang.NumberFormatException from label19 to label21 with label22;
    }

    private android.app.job.JobInfo$Builder buildBuilderFromXml(org.xmlpull.v1.XmlPullParser) throws java.lang.NumberFormatException
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0;
        java.lang.String r2, r3, $r5;
        android.content.ComponentName r4, $r7;
        java.lang.Integer $r6;
        android.app.job.JobInfo$Builder $r8;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "jobid");

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r5);

        i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        r2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "package");

        r3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "class");

        $r7 = new android.content.ComponentName;

        specialinvoke $r7.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        r4 = $r7;

        $r8 = new android.app.job.JobInfo$Builder;

        specialinvoke $r8.<android.app.job.JobInfo$Builder: void <init>(int,android.content.ComponentName)>(i0, r4);

        return $r8;
    }

    private void buildConstraintsFromXml(android.app.job.JobInfo$Builder, org.xmlpull.v1.XmlPullParser)
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        android.app.job.JobInfo$Builder r1;
        org.xmlpull.v1.XmlPullParser r2;
        java.lang.String r3, r8, r9, r10;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        r1 := @parameter0: android.app.job.JobInfo$Builder;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "unmetered");

        if r3 == null goto label1;

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetworkType(int)>(2);

     label1:
        r8 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "connectivity");

        if r8 == null goto label2;

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetworkType(int)>(1);

     label2:
        r9 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "idle");

        if r9 == null goto label3;

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresDeviceIdle(boolean)>(1);

     label3:
        r10 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "charging");

        if r10 == null goto label4;

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresCharging(boolean)>(1);

     label4:
        return;
    }

    private void maybeBuildBackoffPolicyFromXml(android.app.job.JobInfo$Builder, org.xmlpull.v1.XmlPullParser)
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        android.app.job.JobInfo$Builder r1;
        org.xmlpull.v1.XmlPullParser r2;
        java.lang.String r3, r7;
        long l0;
        int i1;
        java.lang.Long $r4;
        java.lang.Integer $r5;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        r1 := @parameter0: android.app.job.JobInfo$Builder;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "initial-backoff");

        if r3 == null goto label1;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r3);

        l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        r7 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "backoff-policy");

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r7);

        i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setBackoffCriteria(long,int)>(l0, i1);

     label1:
        return;
    }

    private android.util.Pair buildExecutionTimesFromXml(org.xmlpull.v1.XmlPullParser) throws java.lang.NumberFormatException
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        org.xmlpull.v1.XmlPullParser r1;
        long l0, l1, l2, l3, l4, l5, $l6, $l7, l8, l9;
        java.lang.String r2, r8;
        java.lang.Long $r3, $r5, $r6, $r7;
        android.util.Pair $r4;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l2 = 0L;

        l3 = 9223372036854775807L;

        r2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "deadline");

        if r2 == null goto label1;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r2);

        l4 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $l7 = l4 - l0;

        l5 = staticinvoke <java.lang.Math: long max(long,long)>($l7, 0L);

        l3 = l1 + l5;

     label1:
        r8 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "delay");

        if r8 == null goto label2;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r8);

        l8 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $l6 = l8 - l0;

        l9 = staticinvoke <java.lang.Math: long max(long,long)>($l6, 0L);

        l2 = l1 + l9;

     label2:
        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r4 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r3, $r5);

        return $r4;
    }
}
