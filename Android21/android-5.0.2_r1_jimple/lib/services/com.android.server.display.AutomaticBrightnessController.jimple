class com.android.server.display.AutomaticBrightnessController extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static final boolean DEBUG_PRETEND_LIGHT_SENSOR_ABSENT;
    private static final boolean USE_SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT;
    private static final float SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT_MAX_GAMMA;
    private static final int LIGHT_SENSOR_RATE_MILLIS;
    private static final int AMBIENT_LIGHT_HORIZON;
    private static final long BRIGHTENING_LIGHT_DEBOUNCE;
    private static final long DARKENING_LIGHT_DEBOUNCE;
    private static final float BRIGHTENING_LIGHT_HYSTERESIS;
    private static final float DARKENING_LIGHT_HYSTERESIS;
    private static final int WEIGHTING_INTERCEPT;
    private static final long AMBIENT_LIGHT_PREDICTION_TIME_MILLIS;
    private static final boolean USE_TWILIGHT_ADJUSTMENT;
    private static final float TWILIGHT_ADJUSTMENT_MAX_GAMMA;
    private static final long TWILIGHT_ADJUSTMENT_TIME;
    private static final int MSG_UPDATE_AMBIENT_LUX;
    private final com.android.server.display.AutomaticBrightnessController$Callbacks mCallbacks;
    private final android.hardware.SensorManager mSensorManager;
    private final android.hardware.Sensor mLightSensor;
    private final com.android.server.twilight.TwilightManager mTwilight;
    private final android.util.Spline mScreenAutoBrightnessSpline;
    private final int mScreenBrightnessRangeMinimum;
    private final int mScreenBrightnessRangeMaximum;
    private int mLightSensorWarmUpTimeConfig;
    private boolean mLightSensorEnabled;
    private long mLightSensorEnableTime;
    private float mAmbientLux;
    private boolean mAmbientLuxValid;
    private float mBrighteningLuxThreshold;
    private float mDarkeningLuxThreshold;
    private float mLastObservedLux;
    private long mLastObservedLuxTime;
    private int mRecentLightSamples;
    private com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer;
    private com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler mHandler;
    private int mScreenAutoBrightness;
    private float mScreenAutoBrightnessAdjustment;
    private float mLastScreenAutoBrightnessGamma;
    private final android.hardware.SensorEventListener mLightSensorListener;
    private final com.android.server.twilight.TwilightListener mTwilightListener;

    public void <init>(com.android.server.display.AutomaticBrightnessController$Callbacks, android.os.Looper, android.hardware.SensorManager, android.util.Spline, int, int, int)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        com.android.server.display.AutomaticBrightnessController$Callbacks r1;
        android.os.Looper r2;
        android.hardware.SensorManager r3, $r11;
        android.util.Spline r4;
        int i0, i1, i2;
        com.android.server.display.AutomaticBrightnessController$1 $r5;
        com.android.server.display.AutomaticBrightnessController$2 $r6;
        java.lang.Object $r7;
        com.android.server.twilight.TwilightManager $r8, $r14;
        com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler $r9, $r13;
        com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer $r10;
        android.hardware.Sensor $r12;
        boolean $z0;
        com.android.server.twilight.TwilightListener $r15;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        r1 := @parameter0: com.android.server.display.AutomaticBrightnessController$Callbacks;

        r2 := @parameter1: android.os.Looper;

        r3 := @parameter2: android.hardware.SensorManager;

        r4 := @parameter3: android.util.Spline;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.display.AutomaticBrightnessController: int mScreenAutoBrightness> = -1;

        r0.<com.android.server.display.AutomaticBrightnessController: float mScreenAutoBrightnessAdjustment> = 0.0F;

        r0.<com.android.server.display.AutomaticBrightnessController: float mLastScreenAutoBrightnessGamma> = 1.0F;

        $r5 = new com.android.server.display.AutomaticBrightnessController$1;

        specialinvoke $r5.<com.android.server.display.AutomaticBrightnessController$1: void <init>(com.android.server.display.AutomaticBrightnessController)>(r0);

        r0.<com.android.server.display.AutomaticBrightnessController: android.hardware.SensorEventListener mLightSensorListener> = $r5;

        $r6 = new com.android.server.display.AutomaticBrightnessController$2;

        specialinvoke $r6.<com.android.server.display.AutomaticBrightnessController$2: void <init>(com.android.server.display.AutomaticBrightnessController)>(r0);

        r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.twilight.TwilightListener mTwilightListener> = $r6;

        r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$Callbacks mCallbacks> = r1;

        $r7 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "com/android/server/twilight/TwilightManager");

        $r8 = (com.android.server.twilight.TwilightManager) $r7;

        r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.twilight.TwilightManager mTwilight> = $r8;

        r0.<com.android.server.display.AutomaticBrightnessController: android.hardware.SensorManager mSensorManager> = r3;

        r0.<com.android.server.display.AutomaticBrightnessController: android.util.Spline mScreenAutoBrightnessSpline> = r4;

        r0.<com.android.server.display.AutomaticBrightnessController: int mScreenBrightnessRangeMinimum> = i1;

        r0.<com.android.server.display.AutomaticBrightnessController: int mScreenBrightnessRangeMaximum> = i2;

        r0.<com.android.server.display.AutomaticBrightnessController: int mLightSensorWarmUpTimeConfig> = i0;

        $r9 = new com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler;

        specialinvoke $r9.<com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler: void <init>(com.android.server.display.AutomaticBrightnessController,android.os.Looper)>(r0, r2);

        r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler mHandler> = $r9;

        $r10 = new com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer;

        specialinvoke $r10.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: void <init>()>();

        r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer> = $r10;

        $r11 = r0.<com.android.server.display.AutomaticBrightnessController: android.hardware.SensorManager mSensorManager>;

        $r12 = virtualinvoke $r11.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(5);

        r0.<com.android.server.display.AutomaticBrightnessController: android.hardware.Sensor mLightSensor> = $r12;

        $z0 = <com.android.server.display.AutomaticBrightnessController: boolean USE_TWILIGHT_ADJUSTMENT>;

        if $z0 == 0 goto label1;

        $r14 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.twilight.TwilightManager mTwilight>;

        $r15 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.twilight.TwilightListener mTwilightListener>;

        $r13 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler mHandler>;

        interfaceinvoke $r14.<com.android.server.twilight.TwilightManager: void registerListener(com.android.server.twilight.TwilightListener,android.os.Handler)>($r15, $r13);

     label1:
        return;
    }

    public int getAutomaticScreenBrightness()
    {
        com.android.server.display.AutomaticBrightnessController r0;
        int $i0;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        $i0 = r0.<com.android.server.display.AutomaticBrightnessController: int mScreenAutoBrightness>;

        return $i0;
    }

    public void configure(boolean, float)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        boolean z0, z1, $z2, z3;
        float f0;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        z1 = specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: boolean setLightSensorEnabled(boolean)>(z0);

        $z2 = specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: boolean setScreenAutoBrightnessAdjustment(float)>(f0);

        z3 = z1 | $z2;

        if z3 == 0 goto label1;

        specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: void updateAutoBrightness(boolean)>(0);

     label1:
        return;
    }

    public void dump(java.io.PrintWriter)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r16, $r18, $r19, $r20, $r21, $r23, $r26, $r27, $r29, $r31, $r32, $r33, $r34, $r36, $r39, $r40, $r41, $r42, $r43, $r45, $r46, $r48, $r49, $r51, $r53, $r54, $r55, $r57, $r58, $r59, $r60, $r62, $r64, $r66, $r68, $r69, $r71, $r72, $r73, $r74, $r75, $r78, $r79, $r80;
        android.util.Spline $r4;
        java.lang.String $r6, $r10, $r15, $r17, $r24, $r30, $r35, $r37, $r38, $r44, $r47, $r50, $r52, $r56, $r61, $r65, $r67, $r70, $r76, $r77;
        int $i0, $i1, $i2, $i5, $i6;
        android.hardware.Sensor $r22;
        com.android.server.twilight.TwilightManager $r25;
        com.android.server.twilight.TwilightState $r28;
        boolean $z0;
        long $l3, $l4;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer $r63;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Automatic Brightness Controller Configuration:");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenAutoBrightnessSpline=");

        $r4 = r0.<com.android.server.display.AutomaticBrightnessController: android.util.Spline mScreenAutoBrightnessSpline>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessRangeMinimum=");

        $i0 = r0.<com.android.server.display.AutomaticBrightnessController: int mScreenBrightnessRangeMinimum>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessRangeMaximum=");

        $i1 = r0.<com.android.server.display.AutomaticBrightnessController: int mScreenBrightnessRangeMaximum>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLightSensorWarmUpTimeConfig=");

        $i2 = r0.<com.android.server.display.AutomaticBrightnessController: int mLightSensorWarmUpTimeConfig>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r17);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Automatic Brightness Controller State:");

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLightSensor=");

        $r22 = r0.<com.android.server.display.AutomaticBrightnessController: android.hardware.Sensor mLightSensor>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r24);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mTwilight.getCurrentState()=");

        $r25 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.twilight.TwilightManager mTwilight>;

        $r28 = interfaceinvoke $r25.<com.android.server.twilight.TwilightManager: com.android.server.twilight.TwilightState getCurrentState()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r30);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLightSensorEnabled=");

        $z0 = r0.<com.android.server.display.AutomaticBrightnessController: boolean mLightSensorEnabled>;

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r35);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLightSensorEnableTime=");

        $l3 = r0.<com.android.server.display.AutomaticBrightnessController: long mLightSensorEnableTime>;

        $r38 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l3);

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r37);

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAmbientLux=");

        $f0 = r0.<com.android.server.display.AutomaticBrightnessController: float mAmbientLux>;

        $r39 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r44);

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBrighteningLuxThreshold=");

        $f1 = r0.<com.android.server.display.AutomaticBrightnessController: float mBrighteningLuxThreshold>;

        $r48 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r47);

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDarkeningLuxThreshold=");

        $f2 = r0.<com.android.server.display.AutomaticBrightnessController: float mDarkeningLuxThreshold>;

        $r51 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r50);

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastObservedLux=");

        $f3 = r0.<com.android.server.display.AutomaticBrightnessController: float mLastObservedLux>;

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        $r52 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r52);

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastObservedLuxTime=");

        $l4 = r0.<com.android.server.display.AutomaticBrightnessController: long mLastObservedLuxTime>;

        $r61 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l4);

        $r55 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r56);

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mRecentLightSamples=");

        $i5 = r0.<com.android.server.display.AutomaticBrightnessController: int mRecentLightSamples>;

        $r66 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r67);

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAmbientLightRingBuffer=");

        $r63 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r63);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r65);

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r72 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenAutoBrightness=");

        $i6 = r0.<com.android.server.display.AutomaticBrightnessController: int mScreenAutoBrightness>;

        $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r70 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r70);

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenAutoBrightnessAdjustment=");

        $f4 = r0.<com.android.server.display.AutomaticBrightnessController: float mScreenAutoBrightnessAdjustment>;

        $r78 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f4);

        $r77 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r77);

        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        $r79 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastScreenAutoBrightnessGamma=");

        $f5 = r0.<com.android.server.display.AutomaticBrightnessController: float mLastScreenAutoBrightnessGamma>;

        $r75 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f5);

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r76);

        return;
    }

    private boolean setLightSensorEnabled(boolean)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        boolean z0, $z1, $z2;
        com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer $r1;
        com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler $r2, $r5;
        android.hardware.SensorEventListener $r3, $r7;
        android.hardware.SensorManager $r4, $r8;
        long $l0;
        android.hardware.Sensor $r6;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $z2 = r0.<com.android.server.display.AutomaticBrightnessController: boolean mLightSensorEnabled>;

        if $z2 != 0 goto label2;

        r0.<com.android.server.display.AutomaticBrightnessController: boolean mLightSensorEnabled> = 1;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.server.display.AutomaticBrightnessController: long mLightSensorEnableTime> = $l0;

        $r8 = r0.<com.android.server.display.AutomaticBrightnessController: android.hardware.SensorManager mSensorManager>;

        $r7 = r0.<com.android.server.display.AutomaticBrightnessController: android.hardware.SensorEventListener mLightSensorListener>;

        $r6 = r0.<com.android.server.display.AutomaticBrightnessController: android.hardware.Sensor mLightSensor>;

        $r5 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler mHandler>;

        virtualinvoke $r8.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>($r7, $r6, 1000000, $r5);

        return 1;

     label1:
        $z1 = r0.<com.android.server.display.AutomaticBrightnessController: boolean mLightSensorEnabled>;

        if $z1 == 0 goto label2;

        r0.<com.android.server.display.AutomaticBrightnessController: boolean mLightSensorEnabled> = 0;

        r0.<com.android.server.display.AutomaticBrightnessController: boolean mAmbientLuxValid> = 0;

        r0.<com.android.server.display.AutomaticBrightnessController: int mRecentLightSamples> = 0;

        $r1 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        virtualinvoke $r1.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: void clear()>();

        $r2 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler mHandler>;

        virtualinvoke $r2.<com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler: void removeMessages(int)>(1);

        $r4 = r0.<com.android.server.display.AutomaticBrightnessController: android.hardware.SensorManager mSensorManager>;

        $r3 = r0.<com.android.server.display.AutomaticBrightnessController: android.hardware.SensorEventListener mLightSensorListener>;

        virtualinvoke $r4.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>($r3);

     label2:
        return 0;
    }

    private void handleLightSensorEvent(long, float)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        long l0;
        float f0;
        com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler $r1;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        $r1 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler mHandler>;

        virtualinvoke $r1.<com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler: void removeMessages(int)>(1);

        specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: void applyLightSensorMeasurement(long,float)>(l0, f0);

        specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: void updateAmbientLux(long)>(l0);

        return;
    }

    private void applyLightSensorMeasurement(long, float)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        long l0, $l3;
        float f0;
        int $i1, $i2;
        com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer $r1, $r2;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        $i1 = r0.<com.android.server.display.AutomaticBrightnessController: int mRecentLightSamples>;

        $i2 = $i1 + 1;

        r0.<com.android.server.display.AutomaticBrightnessController: int mRecentLightSamples> = $i2;

        $r1 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        $l3 = l0 - 10000L;

        virtualinvoke $r1.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: void prune(long)>($l3);

        $r2 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        virtualinvoke $r2.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: void push(long,float)>(l0, f0);

        r0.<com.android.server.display.AutomaticBrightnessController: float mLastObservedLux> = f0;

        r0.<com.android.server.display.AutomaticBrightnessController: long mLastObservedLuxTime> = l0;

        return;
    }

    private boolean setScreenAutoBrightnessAdjustment(float)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        float f0, $f1;
        byte $b0;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        f0 := @parameter0: float;

        $f1 = r0.<com.android.server.display.AutomaticBrightnessController: float mScreenAutoBrightnessAdjustment>;

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        r0.<com.android.server.display.AutomaticBrightnessController: float mScreenAutoBrightnessAdjustment> = f0;

        return 1;

     label1:
        return 0;
    }

    private void setAmbientLux(float)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        float f0, $f1, $f2, $f3, $f4;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        f0 := @parameter0: float;

        r0.<com.android.server.display.AutomaticBrightnessController: float mAmbientLux> = f0;

        $f1 = r0.<com.android.server.display.AutomaticBrightnessController: float mAmbientLux>;

        $f2 = $f1 * 1.1F;

        r0.<com.android.server.display.AutomaticBrightnessController: float mBrighteningLuxThreshold> = $f2;

        $f3 = r0.<com.android.server.display.AutomaticBrightnessController: float mAmbientLux>;

        $f4 = $f3 * 0.8F;

        r0.<com.android.server.display.AutomaticBrightnessController: float mDarkeningLuxThreshold> = $f4;

        return;
    }

    private float calculateAmbientLux(long)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        long l0, l2, l4, $l5;
        int i1, i3;
        float f0, f1, f2, $f4, $f5, $f6;
        com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer $r1, $r2, $r3, $r4;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        i1 = virtualinvoke $r1.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: int size()>();

        if i1 != 0 goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AutomaticBrightnessController", "calculateAmbientLux: No ambient light readings available");

        return -1.0F;

     label1:
        f0 = 0.0F;

        f1 = 0.0F;

        l2 = 100L;

        i3 = i1 - 1;

     label2:
        if i3 < 0 goto label3;

        $r2 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        $l5 = virtualinvoke $r2.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: long getTime(int)>(i3);

        l4 = $l5 - l0;

        f2 = staticinvoke <com.android.server.display.AutomaticBrightnessController: float calculateWeight(long,long)>(l4, l2);

        $r3 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        virtualinvoke $r3.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: float getLux(int)>(i3);

        f1 = f1 + f2;

        $r4 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        $f6 = virtualinvoke $r4.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: float getLux(int)>(i3);

        $f5 = $f6 * f2;

        f0 = f0 + $f5;

        l2 = l4;

        i3 = i3 + -1;

        goto label2;

     label3:
        $f4 = f0 / f1;

        return $f4;
    }

    private static float calculateWeight(long, long)
    {
        long l0, l1;
        float $f0, $f1, $f2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $f0 = staticinvoke <com.android.server.display.AutomaticBrightnessController: float weightIntegral(long)>(l1);

        $f1 = staticinvoke <com.android.server.display.AutomaticBrightnessController: float weightIntegral(long)>(l0);

        $f2 = $f0 - $f1;

        return $f2;
    }

    private static float weightIntegral(long)
    {
        long l0;
        float $f0, $f1, $f2, $f3, $f4;

        l0 := @parameter0: long;

        $f3 = (float) l0;

        $f0 = (float) l0;

        $f1 = $f0 * 0.5F;

        $f2 = $f1 + 10000.0F;

        $f4 = $f3 * $f2;

        return $f4;
    }

    private long nextAmbientLightBrighteningTransition(long)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        long l0, l2, $l4;
        int i1, i3;
        com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer $r1, $r2, $r3;
        float $f0, $f1;
        byte $b5;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        i1 = virtualinvoke $r1.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: int size()>();

        l2 = l0;

        i3 = i1 - 1;

     label1:
        if i3 < 0 goto label3;

        $r2 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        $f0 = virtualinvoke $r2.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: float getLux(int)>(i3);

        $f1 = r0.<com.android.server.display.AutomaticBrightnessController: float mBrighteningLuxThreshold>;

        $b5 = $f0 cmpg $f1;

        if $b5 > 0 goto label2;

        goto label3;

     label2:
        $r3 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        l2 = virtualinvoke $r3.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: long getTime(int)>(i3);

        i3 = i3 + -1;

        goto label1;

     label3:
        $l4 = l2 + 4000L;

        return $l4;
    }

    private long nextAmbientLightDarkeningTransition(long)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        long l0, l2, $l4;
        int i1, i3;
        com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer $r1, $r2, $r3;
        float $f0, $f1;
        byte $b5;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        i1 = virtualinvoke $r1.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: int size()>();

        l2 = l0;

        i3 = i1 - 1;

     label1:
        if i3 < 0 goto label3;

        $r2 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        $f0 = virtualinvoke $r2.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: float getLux(int)>(i3);

        $f1 = r0.<com.android.server.display.AutomaticBrightnessController: float mDarkeningLuxThreshold>;

        $b5 = $f0 cmpl $f1;

        if $b5 < 0 goto label2;

        goto label3;

     label2:
        $r3 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        l2 = virtualinvoke $r3.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: long getTime(int)>(i3);

        i3 = i3 + -1;

        goto label1;

     label3:
        $l4 = l2 + 8000L;

        return $l4;
    }

    private void updateAmbientLux()
    {
        com.android.server.display.AutomaticBrightnessController r0;
        long l0, $l1;
        com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer $r1;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r1 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer mAmbientLightRingBuffer>;

        $l1 = l0 - 10000L;

        virtualinvoke $r1.<com.android.server.display.AutomaticBrightnessController$AmbientLightRingBuffer: void prune(long)>($l1);

        specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: void updateAmbientLux(long)>(l0);

        return;
    }

    private void updateAmbientLux(long)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        long l0, l1, l2, l3, $l8, $l11, $l12, l14, l15;
        float f0, $f1, $f2, $f3;
        boolean $z0;
        byte $b4, $b5, $b6, $b7, $b10, $b13;
        com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler $r1, $r2;
        int $i9;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        l0 := @parameter0: long;

        $z0 = r0.<com.android.server.display.AutomaticBrightnessController: boolean mAmbientLuxValid>;

        if $z0 != 0 goto label2;

        $i9 = r0.<com.android.server.display.AutomaticBrightnessController: int mLightSensorWarmUpTimeConfig>;

        $l11 = (long) $i9;

        $l12 = r0.<com.android.server.display.AutomaticBrightnessController: long mLightSensorEnableTime>;

        l1 = $l11 + $l12;

        $b13 = l0 cmp l1;

        if $b13 >= 0 goto label1;

        $r2 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler mHandler>;

        virtualinvoke $r2.<com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler: boolean sendEmptyMessageAtTime(int,long)>(1, l1);

        return;

     label1:
        $f3 = specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: float calculateAmbientLux(long)>(l0);

        specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: void setAmbientLux(float)>($f3);

        r0.<com.android.server.display.AutomaticBrightnessController: boolean mAmbientLuxValid> = 1;

        specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: void updateAutoBrightness(boolean)>(1);

     label2:
        l14 = specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: long nextAmbientLightBrighteningTransition(long)>(l0);

        l2 = specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: long nextAmbientLightDarkeningTransition(long)>(l0);

        f0 = specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: float calculateAmbientLux(long)>(l0);

        $f1 = r0.<com.android.server.display.AutomaticBrightnessController: float mBrighteningLuxThreshold>;

        $b4 = f0 cmpl $f1;

        if $b4 < 0 goto label3;

        $b10 = l14 cmp l0;

        if $b10 <= 0 goto label4;

     label3:
        $f2 = r0.<com.android.server.display.AutomaticBrightnessController: float mDarkeningLuxThreshold>;

        $b5 = f0 cmpg $f2;

        if $b5 > 0 goto label5;

        $b7 = l2 cmp l0;

        if $b7 > 0 goto label5;

     label4:
        specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: void setAmbientLux(float)>(f0);

        specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: void updateAutoBrightness(boolean)>(1);

        l14 = specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: long nextAmbientLightBrighteningTransition(long)>(l0);

        l2 = specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: long nextAmbientLightDarkeningTransition(long)>(l0);

     label5:
        l3 = staticinvoke <java.lang.Math: long min(long,long)>(l2, l14);

        $b6 = l3 cmp l0;

        if $b6 <= 0 goto label6;

        $l8 = l3;

        goto label7;

     label6:
        $l8 = l0 + 1000L;

     label7:
        l15 = $l8;

        $r1 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler mHandler>;

        virtualinvoke $r1.<com.android.server.display.AutomaticBrightnessController$AutomaticBrightnessHandler: boolean sendEmptyMessageAtTime(int,long)>(1, l15);

        return;
    }

    private void updateAutoBrightness(boolean)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        boolean z0, $z1, $z2, $z3;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        long l0, $l5, $l6, $l7, $l8;
        android.util.Spline $r1;
        byte $b1, $b2;
        int $i3, $i4, i9;
        com.android.server.display.AutomaticBrightnessController$Callbacks $r2;
        com.android.server.twilight.TwilightManager $r3;
        com.android.server.twilight.TwilightState r4;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.display.AutomaticBrightnessController: boolean mAmbientLuxValid>;

        if $z1 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.display.AutomaticBrightnessController: android.util.Spline mScreenAutoBrightnessSpline>;

        $f5 = r0.<com.android.server.display.AutomaticBrightnessController: float mAmbientLux>;

        f0 = virtualinvoke $r1.<android.util.Spline: float interpolate(float)>($f5);

        f1 = 1.0F;

        $f6 = r0.<com.android.server.display.AutomaticBrightnessController: float mScreenAutoBrightnessAdjustment>;

        $b1 = $f6 cmpl 0.0F;

        if $b1 == 0 goto label2;

        $f8 = r0.<com.android.server.display.AutomaticBrightnessController: float mScreenAutoBrightnessAdjustment>;

        $f9 = neg $f8;

        $f11 = staticinvoke <java.lang.Math: float max(float,float)>(-1.0F, $f9);

        $f12 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f11);

        f2 = staticinvoke <android.util.MathUtils: float pow(float,float)>(3.0F, $f12);

        f1 = f1 * f2;

     label2:
        $z2 = <com.android.server.display.AutomaticBrightnessController: boolean USE_TWILIGHT_ADJUSTMENT>;

        if $z2 == 0 goto label3;

        $r3 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.twilight.TwilightManager mTwilight>;

        r4 = interfaceinvoke $r3.<com.android.server.twilight.TwilightManager: com.android.server.twilight.TwilightState getCurrentState()>();

        if r4 == null goto label3;

        $z3 = virtualinvoke r4.<com.android.server.twilight.TwilightState: boolean isNight()>();

        if $z3 == 0 goto label3;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = virtualinvoke r4.<com.android.server.twilight.TwilightState: long getYesterdaySunset()>();

        $l6 = virtualinvoke r4.<com.android.server.twilight.TwilightState: long getTodaySunrise()>();

        f3 = staticinvoke <com.android.server.display.AutomaticBrightnessController: float getTwilightGamma(long,long,long)>(l0, $l5, $l6);

        $l8 = virtualinvoke r4.<com.android.server.twilight.TwilightState: long getTodaySunset()>();

        $l7 = virtualinvoke r4.<com.android.server.twilight.TwilightState: long getTomorrowSunrise()>();

        f4 = staticinvoke <com.android.server.display.AutomaticBrightnessController: float getTwilightGamma(long,long,long)>(l0, $l8, $l7);

        $f10 = f3 * f4;

        f1 = f1 * $f10;

     label3:
        $b2 = f1 cmpl 1.0F;

        if $b2 == 0 goto label4;

        f0 = staticinvoke <android.util.MathUtils: float pow(float,float)>(f0, f1);

     label4:
        $f7 = f0 * 255.0F;

        $i3 = staticinvoke <java.lang.Math: int round(float)>($f7);

        i9 = specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: int clampScreenBrightness(int)>($i3);

        $i4 = r0.<com.android.server.display.AutomaticBrightnessController: int mScreenAutoBrightness>;

        if $i4 == i9 goto label5;

        r0.<com.android.server.display.AutomaticBrightnessController: int mScreenAutoBrightness> = i9;

        r0.<com.android.server.display.AutomaticBrightnessController: float mLastScreenAutoBrightnessGamma> = f1;

        if z0 == 0 goto label5;

        $r2 = r0.<com.android.server.display.AutomaticBrightnessController: com.android.server.display.AutomaticBrightnessController$Callbacks mCallbacks>;

        interfaceinvoke $r2.<com.android.server.display.AutomaticBrightnessController$Callbacks: void updateBrightness()>();

     label5:
        return;
    }

    private int clampScreenBrightness(int)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.display.AutomaticBrightnessController;

        i0 := @parameter0: int;

        $i2 = r0.<com.android.server.display.AutomaticBrightnessController: int mScreenBrightnessRangeMinimum>;

        $i1 = r0.<com.android.server.display.AutomaticBrightnessController: int mScreenBrightnessRangeMaximum>;

        $i3 = staticinvoke <android.util.MathUtils: int constrain(int,int,int)>(i0, $i2, $i1);

        return $i3;
    }

    private static float getTwilightGamma(long, long, long)
    {
        long l0, l1, l2, $l7, $l9, $l11, $l12;
        byte $b3, $b4, $b5, $b6, $b8, $b10;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $b3 = l1 cmp 0L;

        if $b3 < 0 goto label1;

        $b4 = l2 cmp 0L;

        if $b4 < 0 goto label1;

        $b5 = l0 cmp l1;

        if $b5 < 0 goto label1;

        $b6 = l0 cmp l2;

        if $b6 <= 0 goto label2;

     label1:
        return 1.0F;

     label2:
        $l7 = l1 + 7200000L;

        $b8 = l0 cmp $l7;

        if $b8 >= 0 goto label3;

        $l12 = l0 - l1;

        $f3 = (float) $l12;

        $f5 = $f3 / 7200000.0F;

        $f4 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>(1.0F, 1.5F, $f5);

        return $f4;

     label3:
        $l9 = l2 - 7200000L;

        $b10 = l0 cmp $l9;

        if $b10 <= 0 goto label4;

        $l11 = l2 - l0;

        $f0 = (float) $l11;

        $f2 = $f0 / 7200000.0F;

        $f1 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>(1.0F, 1.5F, $f2);

        return $f1;

     label4:
        return 1.5F;
    }

    static void access$000(com.android.server.display.AutomaticBrightnessController)
    {
        com.android.server.display.AutomaticBrightnessController r0;

        r0 := @parameter0: com.android.server.display.AutomaticBrightnessController;

        specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: void updateAmbientLux()>();

        return;
    }

    static boolean access$100(com.android.server.display.AutomaticBrightnessController)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.display.AutomaticBrightnessController;

        $z0 = r0.<com.android.server.display.AutomaticBrightnessController: boolean mLightSensorEnabled>;

        return $z0;
    }

    static void access$200(com.android.server.display.AutomaticBrightnessController, long, float)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        long l0;
        float f0;

        r0 := @parameter0: com.android.server.display.AutomaticBrightnessController;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: void handleLightSensorEvent(long,float)>(l0, f0);

        return;
    }

    static void access$300(com.android.server.display.AutomaticBrightnessController, boolean)
    {
        com.android.server.display.AutomaticBrightnessController r0;
        boolean z0;

        r0 := @parameter0: com.android.server.display.AutomaticBrightnessController;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.display.AutomaticBrightnessController: void updateAutoBrightness(boolean)>(z0);

        return;
    }

    static void <clinit>()
    {
        boolean $z0;

        <com.android.server.display.AutomaticBrightnessController: int MSG_UPDATE_AMBIENT_LUX> = 1;

        <com.android.server.display.AutomaticBrightnessController: long TWILIGHT_ADJUSTMENT_TIME> = 7200000L;

        <com.android.server.display.AutomaticBrightnessController: float TWILIGHT_ADJUSTMENT_MAX_GAMMA> = 1.5F;

        <com.android.server.display.AutomaticBrightnessController: long AMBIENT_LIGHT_PREDICTION_TIME_MILLIS> = 100L;

        <com.android.server.display.AutomaticBrightnessController: int WEIGHTING_INTERCEPT> = 10000;

        <com.android.server.display.AutomaticBrightnessController: float DARKENING_LIGHT_HYSTERESIS> = 0.2F;

        <com.android.server.display.AutomaticBrightnessController: float BRIGHTENING_LIGHT_HYSTERESIS> = 0.1F;

        <com.android.server.display.AutomaticBrightnessController: long DARKENING_LIGHT_DEBOUNCE> = 8000L;

        <com.android.server.display.AutomaticBrightnessController: long BRIGHTENING_LIGHT_DEBOUNCE> = 4000L;

        <com.android.server.display.AutomaticBrightnessController: int AMBIENT_LIGHT_HORIZON> = 10000;

        <com.android.server.display.AutomaticBrightnessController: int LIGHT_SENSOR_RATE_MILLIS> = 1000;

        <com.android.server.display.AutomaticBrightnessController: float SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT_MAX_GAMMA> = 3.0F;

        <com.android.server.display.AutomaticBrightnessController: boolean USE_SCREEN_AUTO_BRIGHTNESS_ADJUSTMENT> = 1;

        <com.android.server.display.AutomaticBrightnessController: boolean DEBUG_PRETEND_LIGHT_SENSOR_ABSENT> = 0;

        <com.android.server.display.AutomaticBrightnessController: boolean DEBUG> = 0;

        <com.android.server.display.AutomaticBrightnessController: java.lang.String TAG> = "AutomaticBrightnessController";

        $z0 = staticinvoke <android.os.PowerManager: boolean useTwilightAdjustmentFeature()>();

        <com.android.server.display.AutomaticBrightnessController: boolean USE_TWILIGHT_ADJUSTMENT> = $z0;

        return;
    }
}
