public class com.android.server.pm.PackageInstallerSession extends android.content.pm.IPackageInstallerSession$Stub
{
    private static final java.lang.String TAG;
    private static final boolean LOGD;
    private static final int MSG_COMMIT;
    private final com.android.server.pm.PackageInstallerService$InternalCallback mCallback;
    private final android.content.Context mContext;
    private final com.android.server.pm.PackageManagerService mPm;
    private final android.os.Handler mHandler;
    final int sessionId;
    final int userId;
    final java.lang.String installerPackageName;
    final int installerUid;
    final android.content.pm.PackageInstaller$SessionParams params;
    final long createdMillis;
    final java.io.File stageDir;
    final java.lang.String stageCid;
    private final java.util.concurrent.atomic.AtomicInteger mActiveCount;
    private final java.lang.Object mLock;
    private float mClientProgress;
    private float mInternalProgress;
    private float mProgress;
    private float mReportedProgress;
    private boolean mPrepared;
    private boolean mSealed;
    private boolean mPermissionsAccepted;
    private boolean mDestroyed;
    private int mFinalStatus;
    private java.lang.String mFinalMessage;
    private java.util.ArrayList mBridges;
    private android.content.pm.IPackageInstallObserver2 mRemoteObserver;
    private java.lang.String mPackageName;
    private int mVersionCode;
    private android.content.pm.Signature[] mSignatures;
    private java.io.File mResolvedBaseFile;
    private java.io.File mResolvedStageDir;
    private final java.util.List mResolvedStagedFiles;
    private final java.util.List mResolvedInheritedFiles;
    private final android.os.Handler$Callback mHandlerCallback;

    public void <init>(com.android.server.pm.PackageInstallerService$InternalCallback, android.content.Context, com.android.server.pm.PackageManagerService, android.os.Looper, int, int, java.lang.String, int, android.content.pm.PackageInstaller$SessionParams, long, java.io.File, java.lang.String, boolean, boolean)
    {
        com.android.server.pm.PackageInstallerSession r0;
        com.android.server.pm.PackageInstallerService$InternalCallback r1;
        android.content.Context r2;
        com.android.server.pm.PackageManagerService r3, $r17;
        android.os.Looper r4;
        int i0, i1, i2, $i4;
        java.lang.String r5, r8;
        android.content.pm.PackageInstaller$SessionParams r6;
        long l3;
        java.io.File r7;
        boolean z0, z1, $z2, $z3;
        java.lang.Object $r9;
        java.util.concurrent.atomic.AtomicInteger $r10;
        java.util.ArrayList $r11, $r12, $r14;
        com.android.server.pm.PackageInstallerSession$1 $r13;
        android.os.Handler$Callback $r15;
        android.os.Handler $r16;
        java.lang.IllegalArgumentException $r18;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: com.android.server.pm.PackageInstallerService$InternalCallback;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: com.android.server.pm.PackageManagerService;

        r4 := @parameter3: android.os.Looper;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        r5 := @parameter6: java.lang.String;

        i2 := @parameter7: int;

        r6 := @parameter8: android.content.pm.PackageInstaller$SessionParams;

        l3 := @parameter9: long;

        r7 := @parameter10: java.io.File;

        r8 := @parameter11: java.lang.String;

        z0 := @parameter12: boolean;

        z1 := @parameter13: boolean;

        specialinvoke r0.<android.content.pm.IPackageInstallerSession$Stub: void <init>()>();

        $r10 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: java.util.concurrent.atomic.AtomicInteger mActiveCount> = $r10;

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock> = $r9;

        r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress> = 0.0F;

        r0.<com.android.server.pm.PackageInstallerSession: float mInternalProgress> = 0.0F;

        r0.<com.android.server.pm.PackageInstallerSession: float mProgress> = 0.0F;

        r0.<com.android.server.pm.PackageInstallerSession: float mReportedProgress> = -1.0F;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mPrepared> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mPermissionsAccepted> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed> = 0;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mBridges> = $r12;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedStagedFiles> = $r11;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles> = $r14;

        $r13 = new com.android.server.pm.PackageInstallerSession$1;

        specialinvoke $r13.<com.android.server.pm.PackageInstallerSession$1: void <init>(com.android.server.pm.PackageInstallerSession)>(r0);

        r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler$Callback mHandlerCallback> = $r13;

        r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback> = r1;

        r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext> = r2;

        r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm> = r3;

        $r16 = new android.os.Handler;

        $r15 = r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler$Callback mHandlerCallback>;

        specialinvoke $r16.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>(r4, $r15);

        r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler mHandler> = $r16;

        r0.<com.android.server.pm.PackageInstallerSession: int sessionId> = i0;

        r0.<com.android.server.pm.PackageInstallerSession: int userId> = i1;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String installerPackageName> = r5;

        r0.<com.android.server.pm.PackageInstallerSession: int installerUid> = i2;

        r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params> = r6;

        r0.<com.android.server.pm.PackageInstallerSession: long createdMillis> = l3;

        r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir> = r7;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid> = r8;

        if r7 != null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if r8 != null goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        if $z3 != $z2 goto label5;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Exactly one of stageDir or stageCid stage must be set");

        throw $r18;

     label5:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mPrepared> = z0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed> = z1;

        $r17 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $i4 = virtualinvoke $r17.<com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>("android.permission.INSTALL_PACKAGES", i2);

        if $i4 == 0 goto label6;

        if i2 != 0 goto label7;

     label6:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mPermissionsAccepted> = 1;

        goto label8;

     label7:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mPermissionsAccepted> = 0;

     label8:
        return;
    }

    public android.content.pm.PackageInstaller$SessionInfo generateInfo()
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.pm.PackageInstaller$SessionInfo r1, $r4;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r18;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r13, $r16, $r19;
        java.io.File $r7, $r17;
        float $f0;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicInteger $r8;
        android.content.pm.PackageInstaller$SessionParams $r9, $r10, $r11, $r12, $r14;
        long $l3;
        android.graphics.Bitmap $r15;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r4 = new android.content.pm.PackageInstaller$SessionInfo;

        specialinvoke $r4.<android.content.pm.PackageInstaller$SessionInfo: void <init>()>();

        r1 = $r4;

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        r1.<android.content.pm.PackageInstaller$SessionInfo: int sessionId> = $i0;

        $r6 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String installerPackageName>;

        r1.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String installerPackageName> = $r6;

        $r7 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile>;

        if $r7 == null goto label2;

        $r17 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile>;

        $r19 = virtualinvoke $r17.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label3;

     label2:
        $r19 = null;

     label3:
        r1.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String resolvedBaseCodePath> = $r19;

        $f0 = r0.<com.android.server.pm.PackageInstallerSession: float mProgress>;

        r1.<android.content.pm.PackageInstaller$SessionInfo: float progress> = $f0;

        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        r1.<android.content.pm.PackageInstaller$SessionInfo: boolean sealed> = $z0;

        $r8 = r0.<com.android.server.pm.PackageInstallerSession: java.util.concurrent.atomic.AtomicInteger mActiveCount>;

        $i1 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i1 <= 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        r1.<android.content.pm.PackageInstaller$SessionInfo: boolean active> = $z1;

        $r9 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i2 = $r9.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        r1.<android.content.pm.PackageInstaller$SessionInfo: int mode> = $i2;

        $r10 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $l3 = $r10.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        r1.<android.content.pm.PackageInstaller$SessionInfo: long sizeBytes> = $l3;

        $r11 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r13 = $r11.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        r1.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String appPackageName> = $r13;

        $r12 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r15 = $r12.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        r1.<android.content.pm.PackageInstaller$SessionInfo: android.graphics.Bitmap appIcon> = $r15;

        $r14 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r16 = $r14.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appLabel>;

        r1.<android.content.pm.PackageInstaller$SessionInfo: java.lang.CharSequence appLabel> = $r16;

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r18 := @caughtexception;

        r3 = $r18;

        exitmonitor r2;

     label8:
        throw r3;

     label9:
        return r1;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public boolean isPrepared()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mPrepared>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isSealed()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void assertPreparedAndNotSealed(java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1, $r9, $r13;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r15;
        boolean $z0, $z1;
        java.lang.SecurityException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r14;
        java.lang.IllegalStateException $r10;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mPrepared>;

        if $z0 != 0 goto label2;

        $r10 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" before prepared");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r10;

     label2:
        $z1 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        if $z1 == 0 goto label3;

        $r5 = new java.lang.SecurityException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not allowed after commit");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r15 := @caughtexception;

        r3 = $r15;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private java.io.File resolveStageDir() throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1, $r4;
        java.lang.String r2, $r8, $r12, $r15;
        java.lang.Throwable r3, $r16;
        java.io.File $r5, $r6, $r7, $r14, $r17;
        java.io.IOException $r9;
        java.lang.StringBuilder $r10, $r11, $r13;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedStageDir>;

        if $r5 != null goto label4;

        $r7 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        if $r7 == null goto label2;

        $r17 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedStageDir> = $r17;

        goto label4;

     label2:
        $r8 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        r2 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String getSdDir(java.lang.String)>($r8);

        if r2 == null goto label3;

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>(r2);

        r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedStageDir> = $r14;

        goto label4;

     label3:
        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resolve path to container ");

        $r12 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label4:
        $r6 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedStageDir>;

        exitmonitor r1;

     label5:
        return $r6;

     label6:
        $r16 := @caughtexception;

        r3 = $r16;

        exitmonitor r1;

     label7:
        throw r3;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setClientProgress(float)
    {
        com.android.server.pm.PackageInstallerSession r0;
        float f0, $f1;
        java.lang.Object r1, $r3;
        boolean z0, $z1;
        java.lang.Throwable r2, $r4;
        byte $b0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        f0 := @parameter0: float;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $f1 = r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress>;

        $b0 = $f1 cmpl 0.0F;

        if $b0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

        r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress> = f0;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void computeProgressLocked(boolean)>(z0);

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void addClientProgress(float)
    {
        com.android.server.pm.PackageInstallerSession r0;
        float f0, $f1, $f2;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        f0 := @parameter0: float;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $f1 = r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress>;

        $f2 = $f1 + f0;

        virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: void setClientProgress(float)>($f2);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void computeProgressLocked(boolean)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean z0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        com.android.server.pm.PackageInstallerService$InternalCallback $r1;
        byte $b0;
        double $d0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        z0 := @parameter0: boolean;

        $f0 = r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress>;

        $f1 = $f0 * 0.8F;

        $f2 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>($f1, 0.0F, 0.8F);

        $f3 = r0.<com.android.server.pm.PackageInstallerSession: float mInternalProgress>;

        $f4 = $f3 * 0.2F;

        $f5 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>($f4, 0.0F, 0.2F);

        $f6 = $f2 + $f5;

        r0.<com.android.server.pm.PackageInstallerSession: float mProgress> = $f6;

        if z0 != 0 goto label1;

        $f10 = r0.<com.android.server.pm.PackageInstallerSession: float mProgress>;

        $f9 = r0.<com.android.server.pm.PackageInstallerSession: float mReportedProgress>;

        $f11 = $f10 - $f9;

        $f12 = staticinvoke <java.lang.Math: float abs(float)>($f11);

        $d0 = (double) $f12;

        $b0 = $d0 cmpl 0.01;

        if $b0 < 0 goto label2;

     label1:
        $f7 = r0.<com.android.server.pm.PackageInstallerSession: float mProgress>;

        r0.<com.android.server.pm.PackageInstallerSession: float mReportedProgress> = $f7;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        $f8 = r0.<com.android.server.pm.PackageInstallerSession: float mProgress>;

        virtualinvoke $r1.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionProgressChanged(com.android.server.pm.PackageInstallerSession,float)>(r0, $f8);

     label2:
        return;
    }

    public java.lang.String[] getNames()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.io.IOException r1, $r4;
        java.io.File $r2;
        java.lang.String[] $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotSealed(java.lang.String)>("getNames");

     label1:
        $r2 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.io.File resolveStageDir()>();

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String[] list()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r1);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.os.ParcelFileDescriptor openWrite(java.lang.String, long, long)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1;
        long l0, l1;
        java.io.IOException r2, $r4;
        android.os.ParcelFileDescriptor $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

     label1:
        $r3 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: android.os.ParcelFileDescriptor openWriteInternal(java.lang.String,long,long)>(r1, l0, l1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r2);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private android.os.ParcelFileDescriptor openWriteInternal(java.lang.String, long, long) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1, $r11, $r13, $r26;
        long l0, l1, l2, $l11;
        android.os.FileBridge r2, $r7;
        java.lang.Object r3, $r6;
        java.lang.Throwable r4, $r24;
        android.system.StructStat r5;
        java.util.ArrayList $r8;
        boolean $z1;
        java.io.File $r9, $r10, $r19, r29;
        libcore.io.Os $r12, $r16, $r17, $r18;
        int $i3, $i4, $i5, $i8;
        byte $b6, $b7, $b10;
        android.os.ParcelFileDescriptor $r14;
        java.io.FileDescriptor $r15, r30;
        java.lang.StringBuilder $r20, $r21, $r25;
        com.android.server.pm.PackageManagerService $r22;
        java.lang.IllegalArgumentException $r23;
        java.io.IOException $r27;
        android.system.ErrnoException $r28, r31;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r6 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        r3 = $r6;

        entermonitor $r6;

     label01:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotSealed(java.lang.String)>("openWrite");

        $r7 = new android.os.FileBridge;

        specialinvoke $r7.<android.os.FileBridge: void <init>()>();

        r2 = $r7;

        $r8 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mBridges>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        exitmonitor r3;

     label02:
        goto label05;

     label03:
        $r24 := @caughtexception;

        r4 = $r24;

        exitmonitor r3;

     label04:
        throw r4;

     label05:
        $z1 = staticinvoke <android.os.FileUtils: boolean isValidExtFilename(java.lang.String)>(r1);

        if $z1 != 0 goto label06;

        $r23 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid name: ");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r23;

     label06:
        $r10 = new java.io.File;

        $r9 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.io.File resolveStageDir()>();

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, r1);

        r29 = $r10;

        $r12 = <libcore.io.Libcore: libcore.io.Os os>;

        $r11 = virtualinvoke r29.<java.io.File: java.lang.String getAbsolutePath()>();

        $i3 = <android.system.OsConstants: int O_CREAT>;

        $i4 = <android.system.OsConstants: int O_WRONLY>;

        $i5 = $i3 | $i4;

        r30 = interfaceinvoke $r12.<libcore.io.Os: java.io.FileDescriptor open(java.lang.String,int,int)>($r11, $i5, 420);

        $r13 = virtualinvoke r29.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void chmod(java.lang.String,int)>($r13, 420);

        $b6 = l1 cmp 0L;

        if $b6 <= 0 goto label08;

        $r16 = <libcore.io.Libcore: libcore.io.Os os>;

        r5 = interfaceinvoke $r16.<libcore.io.Os: android.system.StructStat fstat(java.io.FileDescriptor)>(r30);

        $l11 = r5.<android.system.StructStat: long st_size>;

        l2 = l1 - $l11;

        $r19 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        if $r19 == null goto label07;

        $b10 = l2 cmp 0L;

        if $b10 <= 0 goto label07;

        $r22 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        virtualinvoke $r22.<com.android.server.pm.PackageManagerService: void freeStorage(long)>(l2);

     label07:
        $r18 = <libcore.io.Libcore: libcore.io.Os os>;

        interfaceinvoke $r18.<libcore.io.Os: void posix_fallocate(java.io.FileDescriptor,long,long)>(r30, 0L, l1);

     label08:
        $b7 = l0 cmp 0L;

        if $b7 <= 0 goto label09;

        $r17 = <libcore.io.Libcore: libcore.io.Os os>;

        $i8 = <android.system.OsConstants: int SEEK_SET>;

        interfaceinvoke $r17.<libcore.io.Os: long lseek(java.io.FileDescriptor,long,int)>(r30, l0, $i8);

     label09:
        virtualinvoke r2.<android.os.FileBridge: void setTargetFile(java.io.FileDescriptor)>(r30);

        virtualinvoke r2.<android.os.FileBridge: void start()>();

        $r14 = new android.os.ParcelFileDescriptor;

        $r15 = virtualinvoke r2.<android.os.FileBridge: java.io.FileDescriptor getClientSocket()>();

        specialinvoke $r14.<android.os.ParcelFileDescriptor: void <init>(java.io.FileDescriptor)>($r15);

     label10:
        return $r14;

     label11:
        $r28 := @caughtexception;

        r31 = $r28;

        $r27 = virtualinvoke r31.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r27;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch android.system.ErrnoException from label05 to label10 with label11;
    }

    public android.os.ParcelFileDescriptor openRead(java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1;
        java.io.IOException r2, $r4;
        android.os.ParcelFileDescriptor $r3;
        java.lang.RuntimeException $r5;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: android.os.ParcelFileDescriptor openReadInternal(java.lang.String)>(r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r2);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private android.os.ParcelFileDescriptor openReadInternal(java.lang.String) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1, $r7, $r14;
        java.io.File r2, $r4, $r5;
        java.io.FileDescriptor r3;
        boolean $z0;
        libcore.io.Os $r6;
        int $i0;
        android.os.ParcelFileDescriptor $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        android.system.ErrnoException $r13, r16;
        java.io.IOException $r15;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotSealed(java.lang.String)>("openRead");

     label1:
        $z0 = staticinvoke <android.os.FileUtils: boolean isValidExtFilename(java.lang.String)>(r1);

        if $z0 != 0 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid name: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label2:
        $r4 = new java.io.File;

        $r5 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.io.File resolveStageDir()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, r1);

        r2 = $r4;

        $r6 = <libcore.io.Libcore: libcore.io.Os os>;

        $r7 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $i0 = <android.system.OsConstants: int O_RDONLY>;

        r3 = interfaceinvoke $r6.<libcore.io.Os: java.io.FileDescriptor open(java.lang.String,int,int)>($r7, $i0, 0);

        $r8 = new android.os.ParcelFileDescriptor;

        specialinvoke $r8.<android.os.ParcelFileDescriptor: void <init>(java.io.FileDescriptor)>(r3);

     label3:
        return $r8;

     label4:
        $r13 := @caughtexception;

        r16 = $r13;

        $r15 = virtualinvoke r16.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r15;

        catch android.system.ErrnoException from label1 to label3 with label4;
    }

    public void commit(android.content.IntentSender)
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.IntentSender r1;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r2, $r7, $r16;
        java.util.Iterator r3;
        android.os.FileBridge r4;
        java.lang.Throwable r5, $r17;
        java.util.concurrent.atomic.AtomicInteger $r8;
        com.android.server.pm.PackageInstallerService$PackageInstallObserverAdapter $r9, r19;
        int $i1;
        android.content.Context $r10;
        android.os.Handler $r11;
        android.os.Message $r12;
        android.content.pm.IPackageInstallObserver2 $r13;
        java.util.ArrayList $r14;
        com.android.server.pm.PackageInstallerService$InternalCallback $r15;
        java.lang.SecurityException $r18;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: android.content.IntentSender;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r7 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        $z1 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        if $z1 != 0 goto label05;

        $r14 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mBridges>;

        r3 = virtualinvoke $r14.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label04;

        $r16 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.os.FileBridge) $r16;

        $z3 = virtualinvoke r4.<android.os.FileBridge: boolean isClosed()>();

        if $z3 != 0 goto label03;

        $r18 = new java.lang.SecurityException;

        specialinvoke $r18.<java.lang.SecurityException: void <init>(java.lang.String)>("Files still open");

        throw $r18;

     label03:
        goto label02;

     label04:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed> = 1;

     label05:
        r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress> = 1.0F;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void computeProgressLocked(boolean)>(1);

        exitmonitor r2;

     label06:
        goto label09;

     label07:
        $r17 := @caughtexception;

        r5 = $r17;

        exitmonitor r2;

     label08:
        throw r5;

     label09:
        if z0 != 0 goto label10;

        $r15 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r15.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionSealedBlocking(com.android.server.pm.PackageInstallerSession)>(r0);

     label10:
        $r8 = r0.<com.android.server.pm.PackageInstallerSession: java.util.concurrent.atomic.AtomicInteger mActiveCount>;

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r9 = new com.android.server.pm.PackageInstallerService$PackageInstallObserverAdapter;

        $r10 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        specialinvoke $r9.<com.android.server.pm.PackageInstallerService$PackageInstallObserverAdapter: void <init>(android.content.Context,android.content.IntentSender,int)>($r10, r1, $i1);

        r19 = $r9;

        $r11 = r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler mHandler>;

        $r13 = virtualinvoke r19.<com.android.server.pm.PackageInstallerService$PackageInstallObserverAdapter: android.content.pm.IPackageInstallObserver2 getBinder()>();

        $r12 = virtualinvoke $r11.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(0, $r13);

        virtualinvoke $r12.<android.os.Message: void sendToTarget()>();

        return;

        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    private void commitLocked() throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.io.IOException r1, $r38, $r41, r44;
        boolean $z0, $z1, $z2;
        java.lang.String $r4, $r10, $r12, $r14, $r19, $r20, $r22, $r24, $r27, $r32;
        android.content.pm.Signature[] $r6;
        java.io.File $r8, $r15, $r23, $r28, $r29;
        android.content.pm.PackageInstaller$SessionParams $r11, $r13, $r16, $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.server.pm.PackageInstallerSession$2 $r17, r45;
        android.os.UserHandle $r18, r46;
        java.util.List $r25, $r30;
        com.android.server.pm.PackageManagerService $r26;
        android.content.Intent $r33, r43;
        com.android.server.pm.PackageManagerException $r34, $r35, $r40, $r42;
        android.content.pm.IPackageInstallObserver2 $r37;
        android.os.RemoteException $r39;
        long l6;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed>;

        if $z0 == 0 goto label01;

        $r35 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r35.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-110, "Session destroyed");

        throw $r35;

     label01:
        $z1 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        if $z1 != 0 goto label02;

        $r34 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r34.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-110, "Session not sealed");

        throw $r34;

     label02:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.io.File resolveStageDir()>();

     label03:
        goto label05;

     label04:
        $r41 := @caughtexception;

        r1 = $r41;

        $r40 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r40.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(-18, "Failed to resolve stage location", r1);

        throw $r40;

     label05:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void validateInstallLocked()>();

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4);

        $r6 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.Signature[] mSignatures>;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r6);

        $r8 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile>;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r8);

        $z2 = r0.<com.android.server.pm.PackageInstallerSession: boolean mPermissionsAccepted>;

        if $z2 != 0 goto label10;

        $r33 = new android.content.Intent;

        specialinvoke $r33.<android.content.Intent: void <init>(java.lang.String)>("android.content.pm.action.CONFIRM_PERMISSIONS");

        r43 = $r33;

        virtualinvoke r43.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>("com.android.packageinstaller");

        $i5 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke r43.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.SESSION_ID", $i5);

     label06:
        $r37 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.IPackageInstallObserver2 mRemoteObserver>;

        interfaceinvoke $r37.<android.content.pm.IPackageInstallObserver2: void onUserActionRequired(android.content.Intent)>(r43);

     label07:
        goto label09;

     label08:
        $r39 := @caughtexception;

     label09:
        virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: void close()>();

        return;

     label10:
        $r10 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        if $r10 == null goto label11;

        l6 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: long calculateInstalledSize()>();

        $r32 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        staticinvoke <com.android.server.pm.PackageInstallerSession: void resizeContainer(java.lang.String,long)>($r32, l6);

     label11:
        $r11 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i0 = $r11.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        if $i0 != 2 goto label16;

     label12:
        $r24 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        if $r24 == null goto label13;

        $r30 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles>;

        $r28 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.io.File resolveStageDir()>();

        staticinvoke <com.android.server.pm.PackageInstallerSession: void copyFiles(java.util.List,java.io.File)>($r30, $r28);

        goto label14;

     label13:
        $r25 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles>;

        $r29 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.io.File resolveStageDir()>();

        staticinvoke <com.android.server.pm.PackageInstallerSession: void linkFiles(java.util.List,java.io.File)>($r25, $r29);

     label14:
        goto label16;

     label15:
        $r38 := @caughtexception;

        r44 = $r38;

        $r42 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r42.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(-4, "Failed to inherit existing install", r44);

        throw $r42;

     label16:
        r0.<com.android.server.pm.PackageInstallerSession: float mInternalProgress> = 0.5F;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void computeProgressLocked(boolean)>(1);

        $r15 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedStageDir>;

        $r13 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r12 = $r13.<android.content.pm.PackageInstaller$SessionParams: java.lang.String abiOverride>;

        staticinvoke <com.android.server.pm.PackageInstallerSession: void extractNativeLibraries(java.io.File,java.lang.String)>($r15, $r12);

        $r14 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        if $r14 == null goto label17;

        $r27 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void finalizeAndFixContainer(java.lang.String)>($r27);

     label17:
        $r17 = new com.android.server.pm.PackageInstallerSession$2;

        specialinvoke $r17.<com.android.server.pm.PackageInstallerSession$2: void <init>(com.android.server.pm.PackageInstallerSession)>(r0);

        r45 = $r17;

        $r16 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i2 = $r16.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i1 = $i2 & 64;

        if $i1 == 0 goto label18;

        r46 = <android.os.UserHandle: android.os.UserHandle ALL>;

        goto label19;

     label18:
        $r18 = new android.os.UserHandle;

        $i3 = r0.<com.android.server.pm.PackageInstallerSession: int userId>;

        specialinvoke $r18.<android.os.UserHandle: void <init>(int)>($i3);

        r46 = $r18;

     label19:
        $r26 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $r22 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        $r23 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r20 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        $r21 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r19 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String installerPackageName>;

        $i4 = r0.<com.android.server.pm.PackageInstallerSession: int installerUid>;

        virtualinvoke $r26.<com.android.server.pm.PackageManagerService: void installStage(java.lang.String,java.io.File,java.lang.String,android.content.pm.IPackageInstallObserver2,android.content.pm.PackageInstaller$SessionParams,java.lang.String,int,android.os.UserHandle)>($r22, $r23, $r20, r45, $r21, $r19, $i4, r46);

        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.io.IOException from label12 to label14 with label15;
    }

    private void validateInstallLocked() throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.io.File[] r1, r3;
        android.util.ArraySet r2, $r11;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        java.io.File r4, r7, $r10, $r16, $r17, $r20, $r22, $r27, $r29, $r45, $r46, r77;
        android.content.pm.PackageParser$ApkLite r5, r74;
        android.content.pm.PackageParser$PackageParserException r6, $r64, $r69, r75;
        java.util.List $r8, $r9, $r25, $r28, $r54;
        boolean $z0, $z1, $z3, $z5, $z6, $z7, $z8, $z9;
        android.content.pm.PackageInstaller$SessionParams $r12;
        java.lang.String $r13, $r15, $r18, $r26, $r30, $r33, $r35, $r39, $r40, $r43, $r44, $r47, $r53, $r57, $r59, $r62, $r65, r71, r76;
        com.android.server.pm.PackageManagerService $r14;
        java.lang.String[] $r19, $r21, $r23, $r24;
        java.lang.StringBuilder $r31, $r34, $r36, $r41, $r42, $r48, $r49, $r51, $r52, $r56, $r58, $r66, $r67, $r68;
        com.android.server.pm.PackageManagerException $r32, $r37, $r50, $r55, $r61, $r63, $r70;
        android.content.pm.Signature[] $r38, $r60;
        android.content.pm.ApplicationInfo r72;
        android.content.pm.PackageParser$PackageLite r73;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName> = null;

        r0.<com.android.server.pm.PackageInstallerSession: int mVersionCode> = -1;

        r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.Signature[] mSignatures> = null;

        r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile> = null;

        $r8 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedStagedFiles>;

        interfaceinvoke $r8.<java.util.List: void clear()>();

        $r9 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles>;

        interfaceinvoke $r9.<java.util.List: void clear()>();

        $r10 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedStageDir>;

        r1 = virtualinvoke $r10.<java.io.File: java.io.File[] listFiles()>();

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r1);

        if $z0 == 0 goto label01;

        $r61 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r61.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, "No packages staged");

        throw $r61;

     label01:
        $r11 = new android.util.ArraySet;

        specialinvoke $r11.<android.util.ArraySet: void <init>()>();

        r2 = $r11;

        r3 = r1;

        i0 = lengthof r3;

        i1 = 0;

     label02:
        if i1 >= i0 goto label16;

        r4 = r3[i1];

        $z5 = virtualinvoke r4.<java.io.File: boolean isDirectory()>();

        if $z5 == 0 goto label03;

        goto label15;

     label03:
        r5 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$ApkLite parseApkLite(java.io.File,int)>(r4, 256);

     label04:
        goto label06;

     label05:
        $r69 := @caughtexception;

        r6 = $r69;

        $r70 = staticinvoke <com.android.server.pm.PackageManagerException: com.android.server.pm.PackageManagerException 'from'(android.content.pm.PackageParser$PackageParserException)>(r6);

        throw $r70;

     label06:
        $r40 = r5.<android.content.pm.PackageParser$ApkLite: java.lang.String splitName>;

        $z7 = virtualinvoke r2.<android.util.ArraySet: boolean add(java.lang.Object)>($r40);

        if $z7 != 0 goto label07;

        $r55 = new com.android.server.pm.PackageManagerException;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Split ");

        $r65 = r5.<android.content.pm.PackageParser$ApkLite: java.lang.String splitName>;

        $r68 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r65);

        $r67 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was defined multiple times");

        $r62 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r55.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r62);

        throw $r55;

     label07:
        $r39 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        if $r39 != null goto label08;

        $r59 = r5.<android.content.pm.PackageParser$ApkLite: java.lang.String packageName>;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName> = $r59;

        $i5 = r5.<android.content.pm.PackageParser$ApkLite: int versionCode>;

        r0.<com.android.server.pm.PackageInstallerSession: int mVersionCode> = $i5;

     label08:
        $r38 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.Signature[] mSignatures>;

        if $r38 != null goto label09;

        $r60 = r5.<android.content.pm.PackageParser$ApkLite: android.content.pm.Signature[] signatures>;

        r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.Signature[] mSignatures> = $r60;

     label09:
        $r44 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4);

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertApkConsistent(java.lang.String,android.content.pm.PackageParser$ApkLite)>($r44, r5);

        $r43 = r5.<android.content.pm.PackageParser$ApkLite: java.lang.String splitName>;

        if $r43 != null goto label10;

        r71 = "base.apk";

        goto label11;

     label10:
        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("split_");

        $r47 = r5.<android.content.pm.PackageParser$ApkLite: java.lang.String splitName>;

        $r48 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".apk");

        r71 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        $z8 = staticinvoke <android.os.FileUtils: boolean isValidExtFilename(java.lang.String)>(r71);

        if $z8 != 0 goto label12;

        $r50 = new com.android.server.pm.PackageManagerException;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid filename: ");

        $r58 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        $r57 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r50.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r57);

        throw $r50;

     label12:
        $r45 = new java.io.File;

        $r46 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedStageDir>;

        specialinvoke $r45.<java.io.File: void <init>(java.io.File,java.lang.String)>($r46, r71);

        r7 = $r45;

        $z9 = virtualinvoke r4.<java.io.File: boolean equals(java.lang.Object)>(r7);

        if $z9 != 0 goto label13;

        virtualinvoke r4.<java.io.File: boolean renameTo(java.io.File)>(r7);

     label13:
        $r53 = r5.<android.content.pm.PackageParser$ApkLite: java.lang.String splitName>;

        if $r53 != null goto label14;

        r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile> = r7;

     label14:
        $r54 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedStagedFiles>;

        interfaceinvoke $r54.<java.util.List: boolean add(java.lang.Object)>(r7);

     label15:
        i1 = i1 + 1;

        goto label02;

     label16:
        $r12 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i2 = $r12.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        if $i2 != 1 goto label17;

        $z6 = virtualinvoke r2.<android.util.ArraySet: boolean contains(java.lang.Object)>(null);

        if $z6 != 0 goto label25;

        $r37 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r37.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, "Full install must include a base package");

        throw $r37;

     label17:
        $r14 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $r13 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        $i3 = r0.<com.android.server.pm.PackageInstallerSession: int userId>;

        r72 = virtualinvoke $r14.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>($r13, 0, $i3);

        if r72 != null goto label18;

        $r32 = new com.android.server.pm.PackageManagerException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing existing base package for ");

        $r35 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        $r34 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r33);

        throw $r32;

     label18:
        $r16 = new java.io.File;

        $r15 = virtualinvoke r72.<android.content.pm.ApplicationInfo: java.lang.String getCodePath()>();

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>($r15);

        r73 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(java.io.File,int)>($r16, 0);

        $r17 = new java.io.File;

        $r18 = virtualinvoke r72.<android.content.pm.ApplicationInfo: java.lang.String getBaseCodePath()>();

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>($r18);

        r74 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$ApkLite parseApkLite(java.io.File,int)>($r17, 256);

     label19:
        goto label21;

     label20:
        $r64 := @caughtexception;

        r75 = $r64;

        $r63 = staticinvoke <com.android.server.pm.PackageManagerException: com.android.server.pm.PackageManagerException 'from'(android.content.pm.PackageParser$PackageParserException)>(r75);

        throw $r63;

     label21:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertApkConsistent(java.lang.String,android.content.pm.PackageParser$ApkLite)>("Existing base", r74);

        $r20 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile>;

        if $r20 != null goto label22;

        $r29 = new java.io.File;

        $r30 = virtualinvoke r72.<android.content.pm.ApplicationInfo: java.lang.String getBaseCodePath()>();

        specialinvoke $r29.<java.io.File: void <init>(java.lang.String)>($r30);

        r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile> = $r29;

        $r28 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles>;

        $r27 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile>;

        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>($r27);

     label22:
        $r19 = r73.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitNames>;

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r19);

        if $z1 != 0 goto label25;

        i6 = 0;

     label23:
        $r21 = r73.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitNames>;

        $i4 = lengthof $r21;

        if i6 >= $i4 goto label25;

        $r24 = r73.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitNames>;

        r76 = $r24[i6];

        $r22 = new java.io.File;

        $r23 = r73.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitCodePaths>;

        $r26 = $r23[i6];

        specialinvoke $r22.<java.io.File: void <init>(java.lang.String)>($r26);

        r77 = $r22;

        $z3 = virtualinvoke r2.<android.util.ArraySet: boolean contains(java.lang.Object)>(r76);

        if $z3 != 0 goto label24;

        $r25 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles>;

        interfaceinvoke $r25.<java.util.List: boolean add(java.lang.Object)>(r77);

     label24:
        i6 = i6 + 1;

        goto label23;

     label25:
        return;

        catch android.content.pm.PackageParser$PackageParserException from label03 to label04 with label05;
        catch android.content.pm.PackageParser$PackageParserException from label18 to label19 with label20;
    }

    private void assertApkConsistent(java.lang.String, android.content.pm.PackageParser$ApkLite) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1, $r3, $r4, $r12, $r18, $r26, $r27, $r28;
        android.content.pm.PackageParser$ApkLite r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3;
        android.content.pm.Signature[] $r5, $r6;
        com.android.server.pm.PackageManagerException $r7, $r11, $r21;
        java.lang.StringBuilder $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r22, $r23, $r24, $r25, $r29;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.PackageParser$ApkLite;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        $r3 = r2.<android.content.pm.PackageParser$ApkLite: java.lang.String packageName>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r21 = new com.android.server.pm.PackageManagerException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" package ");

        $r26 = r2.<android.content.pm.PackageParser$ApkLite: java.lang.String packageName>;

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inconsistent with ");

        $r28 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r27);

        throw $r21;

     label1:
        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int mVersionCode>;

        $i0 = r2.<android.content.pm.PackageParser$ApkLite: int versionCode>;

        if $i1 == $i0 goto label2;

        $r11 = new com.android.server.pm.PackageManagerException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version code ");

        $i2 = r2.<android.content.pm.PackageParser$ApkLite: int versionCode>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inconsistent with ");

        $i3 = r0.<com.android.server.pm.PackageInstallerSession: int mVersionCode>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r18);

        throw $r11;

     label2:
        $r6 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.Signature[] mSignatures>;

        $r5 = r2.<android.content.pm.PackageParser$ApkLite: android.content.pm.Signature[] signatures>;

        $z1 = staticinvoke <android.content.pm.Signature: boolean areExactMatch(android.content.pm.Signature[],android.content.pm.Signature[])>($r6, $r5);

        if $z1 != 0 goto label3;

        $r7 = new com.android.server.pm.PackageManagerException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signatures are inconsistent");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r12);

        throw $r7;

     label3:
        return;
    }

    private long calculateInstalledSize() throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.pm.PackageParser$ApkLite r1;
        android.content.pm.PackageParser$PackageParserException r2, $r26;
        java.util.Iterator r3, r30;
        java.io.File r4, $r6, $r8, $r21, $r24, r31;
        java.io.IOException r5, $r27;
        java.util.ArrayList $r9, r29;
        java.util.List $r10, $r11;
        boolean $z0, $z1, $z2, $z4, $z5, z7;
        android.content.pm.PackageParser$PackageLite $r12, r32;
        java.lang.String[] $r13, $r14;
        int $i0, $i1, $i2;
        java.lang.Object[] $r15;
        android.content.pm.PackageInstaller$SessionParams $r16, $r17;
        long $l3;
        java.lang.String $r18, $r20, $r22;
        java.lang.Object $r19, $r23;
        com.android.server.pm.PackageManagerException $r25, $r28;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r6 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile>;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r6);

     label01:
        $r8 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile>;

        r1 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$ApkLite parseApkLite(java.io.File,int)>($r8, 0);

     label02:
        goto label04;

     label03:
        $r26 := @caughtexception;

        r2 = $r26;

        $r28 = staticinvoke <com.android.server.pm.PackageManagerException: com.android.server.pm.PackageManagerException 'from'(android.content.pm.PackageParser$PackageParserException)>(r2);

        throw $r28;

     label04:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r29 = $r9;

        $r10 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedStagedFiles>;

        r3 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r23 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.io.File) $r23;

        $r24 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile>;

        $z5 = virtualinvoke $r24.<java.io.File: boolean equals(java.lang.Object)>(r4);

        if $z5 == 0 goto label06;

        goto label05;

     label06:
        $r22 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        interfaceinvoke r29.<java.util.List: boolean add(java.lang.Object)>($r22);

        goto label05;

     label07:
        $r11 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles>;

        r30 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r19 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r31 = (java.io.File) $r19;

        $r21 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile>;

        $z4 = virtualinvoke $r21.<java.io.File: boolean equals(java.lang.Object)>(r31);

        if $z4 == 0 goto label09;

        goto label08;

     label09:
        $r20 = virtualinvoke r31.<java.io.File: java.lang.String getAbsolutePath()>();

        interfaceinvoke r29.<java.util.List: boolean add(java.lang.Object)>($r20);

        goto label08;

     label10:
        $r12 = new android.content.pm.PackageParser$PackageLite;

        $i0 = interfaceinvoke r29.<java.util.List: int size()>();

        $r13 = newarray (java.lang.String)[$i0];

        $r15 = interfaceinvoke r29.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r14 = (java.lang.String[]) $r15;

        specialinvoke $r12.<android.content.pm.PackageParser$PackageLite: void <init>(java.lang.String,android.content.pm.PackageParser$ApkLite,java.lang.String[],java.lang.String[])>(null, r1, null, $r14);

        r32 = $r12;

        $r16 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i1 = $r16.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label11;

        $z2 = 1;

        goto label12;

     label11:
        $z2 = 0;

     label12:
        z7 = $z2;

     label13:
        $r17 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r18 = $r17.<android.content.pm.PackageInstaller$SessionParams: java.lang.String abiOverride>;

        $l3 = staticinvoke <com.android.internal.content.PackageHelper: long calculateInstalledSize(android.content.pm.PackageParser$PackageLite,boolean,java.lang.String)>(r32, z7, $r18);

     label14:
        return $l3;

     label15:
        $r27 := @caughtexception;

        r5 = $r27;

        $r25 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r25.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(-2, "Failed to calculate install size", r5);

        throw $r25;

        catch android.content.pm.PackageParser$PackageParserException from label01 to label02 with label03;
        catch java.io.IOException from label13 to label14 with label15;
    }

    private static void linkFiles(java.util.List, java.io.File) throws java.io.IOException
    {
        java.util.List r0;
        java.io.File r1, r3, r4, $r14;
        java.util.Iterator r2;
        android.system.ErrnoException r5, $r24;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r15, $r16, $r17, $r18, $r19, $r25, $r26, $r27, $r28, $r29;
        int $i0;
        java.lang.String $r11, $r13, $r20, $r21, $r22, $r30;
        java.lang.Object $r12;
        java.io.IOException $r23;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.io.File;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.io.File) $r12;

        $r14 = new java.io.File;

        $r13 = virtualinvoke r3.<java.io.File: java.lang.String getName()>();

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r13);

        r4 = $r14;

     label2:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Linking ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageInstaller", $r20);

        $r22 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r21 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void link(java.lang.String,java.lang.String)>($r22, $r21);

     label3:
        goto label5;

     label4:
        $r24 := @caughtexception;

        r5 = $r24;

        $r23 = new java.io.IOException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to link ");

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r30, r5);

        throw $r23;

     label5:
        goto label1;

     label6:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Linked ");

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" files into ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageInstaller", $r11);

        return;

        catch android.system.ErrnoException from label2 to label3 with label4;
    }

    private static void copyFiles(java.util.List, java.io.File) throws java.io.IOException
    {
        java.util.List r0;
        java.io.File r1, r3, $r17, r41, r42, r43;
        java.io.File[] r2;
        int i0, i1, $i2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r18, $r20, $r21, $r22, $r23, $r25, $r26, $r28, $r31, $r32, $r33, $r34, $r35, $r36, $r39;
        java.lang.String $r9, $r16, $r19, $r24, $r29, $r37, $r38;
        java.lang.Object $r10;
        java.io.IOException $r27, $r30;
        java.util.Iterator r40;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.io.File;

        r2 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $r37 = virtualinvoke r3.<java.io.File: java.lang.String getName()>();

        $z3 = virtualinvoke $r37.<java.lang.String: boolean endsWith(java.lang.String)>(".tmp");

        if $z3 == 0 goto label2;

        virtualinvoke r3.<java.io.File: boolean delete()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r40 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r10 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        r41 = (java.io.File) $r10;

        r42 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("inherit", ".tmp", r1);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Copying ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r42);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageInstaller", $r16);

        $z1 = staticinvoke <android.os.FileUtils: boolean copyFile(java.io.File,java.io.File)>(r41, r42);

        if $z1 != 0 goto label5;

        $r30 = new java.io.IOException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to copy ");

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r41);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r39 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r42);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.io.IOException: void <init>(java.lang.String)>($r38);

        throw $r30;

     label5:
        $r17 = new java.io.File;

        $r19 = virtualinvoke r41.<java.io.File: java.lang.String getName()>();

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r19);

        r43 = $r17;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Renaming ");

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r42);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r43);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageInstaller", $r24);

        $z2 = virtualinvoke r42.<java.io.File: boolean renameTo(java.io.File)>(r43);

        if $z2 != 0 goto label6;

        $r27 = new java.io.IOException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to rename ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r42);

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r43);

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r29);

        throw $r27;

     label6:
        goto label4;

     label7:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Copied ");

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" files into ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageInstaller", $r9);

        return;
    }

    private static void extractNativeLibraries(java.io.File, java.lang.String) throws com.android.server.pm.PackageManagerException
    {
        java.io.File r0, r2, $r5;
        java.lang.String r1, $r10;
        com.android.internal.content.NativeLibraryHelper$Handle r3;
        int i0;
        java.lang.Throwable r4, $r13;
        com.android.server.pm.PackageManagerException $r6, $r12;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.io.IOException $r11, r14;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, "lib");

        r2 = $r5;

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void removeNativeBinariesFromDirLI(java.io.File,boolean)>(r2, 1);

        r3 = null;

     label1:
        r3 = staticinvoke <com.android.internal.content.NativeLibraryHelper$Handle: com.android.internal.content.NativeLibraryHelper$Handle create(java.io.File)>(r0);

        i0 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesWithOverride(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String)>(r3, r2, r1);

        if i0 == 1 goto label2;

        $r6 = new com.android.server.pm.PackageManagerException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to extract native libraries, res=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(i0, $r10);

        throw $r6;

     label2:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        goto label6;

     label3:
        $r11 := @caughtexception;

        r14 = $r11;

        $r12 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r12.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(-110, "Failed to extract native libraries", r14);

        throw $r12;

     label4:
        $r13 := @caughtexception;

        r4 = $r13;

     label5:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        throw r4;

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    private static void resizeContainer(java.lang.String, long) throws com.android.server.pm.PackageManagerException
    {
        java.lang.String r0, r1, $r3, $r4, $r9, $r19, $r25, $r32, $r36, r37;
        long l0, l1;
        java.io.File $r2;
        byte $b2;
        boolean $z0, $z1;
        com.android.server.pm.PackageManagerException $r5, $r12, $r18, $r30;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r29, $r31, $r33, $r34, $r35;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r1 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String getSdDir(java.lang.String)>(r0);

        if r1 != null goto label1;

        $r30 = new com.android.server.pm.PackageManagerException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find mounted ");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-18, $r36);

        throw $r30;

     label1:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1);

        l1 = virtualinvoke $r2.<java.io.File: long getTotalSpace()>();

        $b2 = l1 cmp l0;

        if $b2 <= 0 goto label2;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current size ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r26 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is larger than target size ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; skipping resize");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r32);

        return;

     label2:
        $z0 = staticinvoke <com.android.internal.content.PackageHelper: boolean unMountSdDir(java.lang.String)>(r0);

        if $z0 != 0 goto label3;

        $r18 = new com.android.server.pm.PackageManagerException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to unmount ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" before resize");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-18, $r25);

        throw $r18;

     label3:
        $r3 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>();

        $z1 = staticinvoke <com.android.internal.content.PackageHelper: boolean resizeSdDir(long,java.lang.String,java.lang.String)>(l0, r0, $r3);

        if $z1 != 0 goto label4;

        $r12 = new com.android.server.pm.PackageManagerException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resize ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-18, $r19);

        throw $r12;

     label4:
        $r4 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>();

        r37 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String mountSdDir(java.lang.String,java.lang.String,int,boolean)>(r0, $r4, 1000, 0);

        if r37 != null goto label5;

        $r5 = new com.android.server.pm.PackageManagerException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to mount ");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" after resize");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-18, $r9);

        throw $r5;

     label5:
        return;
    }

    private void finalizeAndFixContainer(java.lang.String) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1, $r7, $r12;
        int i0, i1;
        boolean $z0, $z1;
        com.android.server.pm.PackageManagerService $r2;
        com.android.server.pm.PackageManagerException $r3, $r8;
        java.lang.StringBuilder $r4, $r5, $r6, $r9, $r10, $r11;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.android.internal.content.PackageHelper: boolean finalizeSdDir(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r8 = new com.android.server.pm.PackageManagerException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to finalize container ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-18, $r12);

        throw $r8;

     label1:
        $r2 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        i0 = virtualinvoke $r2.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>("com.android.defcontainer", 0);

        i1 = staticinvoke <android.os.UserHandle: int getSharedAppGid(int)>(i0);

        $z1 = staticinvoke <com.android.internal.content.PackageHelper: boolean fixSdPermissions(java.lang.String,int,java.lang.String)>(r1, i1, null);

        if $z1 != 0 goto label2;

        $r3 = new com.android.server.pm.PackageManagerException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to fix permissions on container ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-18, $r7);

        throw $r3;

     label2:
        return;
    }

    void setPermissionsResult(boolean)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean z0, $z1;
        android.os.Handler $r1;
        android.os.Message $r2;
        java.lang.SecurityException $r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        if $z1 != 0 goto label1;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Must be sealed to accept permissions");

        throw $r3;

     label1:
        if z0 == 0 goto label2;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mPermissionsAccepted> = 1;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int)>(0);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        goto label3;

     label2:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void destroyInternal()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dispatchSessionFinished(int,java.lang.String,android.os.Bundle)>(-115, "User rejected permissions", null);

     label3:
        return;
    }

    public void open() throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r12;
        java.util.concurrent.atomic.AtomicInteger $r3;
        int $i0;
        boolean $z0;
        java.io.File $r5, $r11;
        java.lang.String $r6, $r9;
        java.lang.IllegalArgumentException $r7;
        android.content.pm.PackageInstaller$SessionParams $r8;
        long $l1;
        com.android.server.pm.PackageInstallerService$InternalCallback $r10, $r13;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.util.concurrent.atomic.AtomicInteger mActiveCount>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        if $i0 != 0 goto label01;

        $r13 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r13.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionActiveChanged(com.android.server.pm.PackageInstallerSession,boolean)>(r0, 1);

     label01:
        $r4 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label02:
        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mPrepared>;

        if $z0 != 0 goto label06;

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        if $r5 == null goto label03;

        $r11 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        staticinvoke <com.android.server.pm.PackageInstallerService: void prepareInternalStageDir(java.io.File)>($r11);

        goto label05;

     label03:
        $r6 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        if $r6 == null goto label04;

        $r9 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        $r8 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $l1 = $r8.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        staticinvoke <com.android.server.pm.PackageInstallerService: void prepareExternalStageCid(java.lang.String,long)>($r9, $l1);

        r0.<com.android.server.pm.PackageInstallerSession: float mInternalProgress> = 0.25F;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void computeProgressLocked(boolean)>(1);

        goto label05;

     label04:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Exactly one of stageDir or stageCid stage must be set");

        throw $r7;

     label05:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mPrepared> = 1;

        $r10 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r10.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionPrepared(com.android.server.pm.PackageInstallerSession)>(r0);

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r12 := @caughtexception;

        r2 = $r12;

        exitmonitor r1;

     label09:
        throw r2;

     label10:
        return;

        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void close()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        com.android.server.pm.PackageInstallerService$InternalCallback $r2;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: java.util.concurrent.atomic.AtomicInteger mActiveCount>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i0 != 0 goto label1;

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r2.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionActiveChanged(com.android.server.pm.PackageInstallerSession,boolean)>(r0, 0);

     label1:
        return;
    }

    public void abandon()
    {
        com.android.server.pm.PackageInstallerSession r0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void destroyInternal()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dispatchSessionFinished(int,java.lang.String,android.os.Bundle)>(-115, "Session was abandoned", null);

        return;
    }

    private void dispatchSessionFinished(int, java.lang.String, android.os.Bundle)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0;
        java.lang.String r1, $r6;
        android.os.Bundle r2;
        android.content.pm.IPackageInstallObserver2 $r4, $r7;
        com.android.server.pm.PackageInstallerService$InternalCallback $r5;
        boolean $z0, z1;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        r0.<com.android.server.pm.PackageInstallerSession: int mFinalStatus> = i0;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mFinalMessage> = r1;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.IPackageInstallObserver2 mRemoteObserver>;

        if $r4 == null goto label4;

     label1:
        $r7 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.IPackageInstallObserver2 mRemoteObserver>;

        $r6 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        interfaceinvoke $r7.<android.content.pm.IPackageInstallObserver2: void onPackageInstalled(java.lang.String,int,java.lang.String,android.os.Bundle)>($r6, i0, r1, r2);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        if i0 != 1 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        z1 = $z0;

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r5.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionFinished(com.android.server.pm.PackageInstallerSession,boolean)>(r0, z1);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void destroyInternal()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1, $r5, $r13;
        java.util.Iterator r2;
        android.os.FileBridge r3;
        java.lang.Throwable r4, $r12;
        java.util.ArrayList $r6;
        boolean $z0;
        java.io.File $r7, $r10, $r11;
        java.lang.String $r8, $r9;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed> = 1;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed> = 1;

        $r6 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mBridges>;

        r2 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.os.FileBridge) $r13;

        virtualinvoke r3.<android.os.FileBridge: void forceClose()>();

        goto label2;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r1;

     label6:
        throw r4;

     label7:
        $r7 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        if $r7 == null goto label8;

        $r10 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        staticinvoke <android.os.FileUtils: boolean deleteContents(java.io.File)>($r10);

        $r11 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        virtualinvoke $r11.<java.io.File: boolean delete()>();

     label8:
        $r8 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        if $r8 == null goto label9;

        $r9 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r9);

     label9:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.pm.PackageInstallerSession r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dumpLocked(com.android.internal.util.IndentingPrintWriter)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void dumpLocked(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.pm.PackageInstallerSession r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i4, $i5;
        java.lang.String $r6, $r8, $r11, $r22;
        java.lang.Integer $r7, $r9, $r19, $r21;
        long $l3;
        java.lang.Long $r10;
        java.io.File $r12;
        float $f0, $f1;
        android.content.pm.PackageInstaller$SessionParams $r13;
        java.lang.Float $r14, $r15;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r16, $r17, $r18;
        java.util.ArrayList $r20;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session ");

        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int userId>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("userId", $r7);

        $r8 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String installerPackageName>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("installerPackageName", $r8);

        $i2 = r0.<com.android.server.pm.PackageInstallerSession: int installerUid>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("installerUid", $r9);

        $l3 = r0.<com.android.server.pm.PackageInstallerSession: long createdMillis>;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("createdMillis", $r10);

        $r12 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("stageDir", $r12);

        $r11 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("stageCid", $r11);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r13 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        virtualinvoke $r13.<android.content.pm.PackageInstaller$SessionParams: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        $f0 = r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress>;

        $r14 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("mClientProgress", $r14);

        $f1 = r0.<com.android.server.pm.PackageInstallerSession: float mProgress>;

        $r15 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("mProgress", $r15);

        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("mSealed", $r16);

        $z1 = r0.<com.android.server.pm.PackageInstallerSession: boolean mPermissionsAccepted>;

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("mPermissionsAccepted", $r18);

        $z2 = r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed>;

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("mDestroyed", $r17);

        $r20 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mBridges>;

        $i4 = virtualinvoke $r20.<java.util.ArrayList: int size()>();

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("mBridges", $r19);

        $i5 = r0.<com.android.server.pm.PackageInstallerSession: int mFinalStatus>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("mFinalStatus", $r21);

        $r22 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mFinalMessage>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("mFinalMessage", $r22);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        return;
    }

    static java.lang.Object access$000(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        return $r1;
    }

    static android.content.pm.IPackageInstallObserver2 access$102(com.android.server.pm.PackageInstallerSession, android.content.pm.IPackageInstallObserver2)
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.pm.IPackageInstallObserver2 r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter1: android.content.pm.IPackageInstallObserver2;

        r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.IPackageInstallObserver2 mRemoteObserver> = r1;

        return r1;
    }

    static void access$200(com.android.server.pm.PackageInstallerSession) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void commitLocked()>();

        return;
    }

    static void access$300(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void destroyInternal()>();

        return;
    }

    static void access$400(com.android.server.pm.PackageInstallerSession, int, java.lang.String, android.os.Bundle)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0;
        java.lang.String r1;
        android.os.Bundle r2;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: android.os.Bundle;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dispatchSessionFinished(int,java.lang.String,android.os.Bundle)>(i0, r1, r2);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.PackageInstallerSession: int MSG_COMMIT> = 0;

        <com.android.server.pm.PackageInstallerSession: boolean LOGD> = 1;

        <com.android.server.pm.PackageInstallerSession: java.lang.String TAG> = "PackageInstaller";

        return;
    }
}
