public class com.android.server.net.NetworkPolicyManagerService extends android.net.INetworkPolicyManager$Stub
{
    private static final java.lang.String TAG;
    private static final boolean LOGD;
    private static final boolean LOGV;
    private static final int VERSION_INIT;
    private static final int VERSION_ADDED_SNOOZE;
    private static final int VERSION_ADDED_RESTRICT_BACKGROUND;
    private static final int VERSION_ADDED_METERED;
    private static final int VERSION_SPLIT_SNOOZE;
    private static final int VERSION_ADDED_TIMEZONE;
    private static final int VERSION_ADDED_INFERRED;
    private static final int VERSION_SWITCH_APP_ID;
    private static final int VERSION_ADDED_NETWORK_ID;
    private static final int VERSION_SWITCH_UID;
    private static final int VERSION_LATEST;
    public static final int TYPE_WARNING;
    public static final int TYPE_LIMIT;
    public static final int TYPE_LIMIT_SNOOZED;
    private static final java.lang.String TAG_POLICY_LIST;
    private static final java.lang.String TAG_NETWORK_POLICY;
    private static final java.lang.String TAG_UID_POLICY;
    private static final java.lang.String TAG_APP_POLICY;
    private static final java.lang.String ATTR_VERSION;
    private static final java.lang.String ATTR_RESTRICT_BACKGROUND;
    private static final java.lang.String ATTR_NETWORK_TEMPLATE;
    private static final java.lang.String ATTR_SUBSCRIBER_ID;
    private static final java.lang.String ATTR_NETWORK_ID;
    private static final java.lang.String ATTR_CYCLE_DAY;
    private static final java.lang.String ATTR_CYCLE_TIMEZONE;
    private static final java.lang.String ATTR_WARNING_BYTES;
    private static final java.lang.String ATTR_LIMIT_BYTES;
    private static final java.lang.String ATTR_LAST_SNOOZE;
    private static final java.lang.String ATTR_LAST_WARNING_SNOOZE;
    private static final java.lang.String ATTR_LAST_LIMIT_SNOOZE;
    private static final java.lang.String ATTR_METERED;
    private static final java.lang.String ATTR_INFERRED;
    private static final java.lang.String ATTR_UID;
    private static final java.lang.String ATTR_APP_ID;
    private static final java.lang.String ATTR_POLICY;
    private static final java.lang.String TAG_ALLOW_BACKGROUND;
    private static final java.lang.String ACTION_ALLOW_BACKGROUND;
    private static final java.lang.String ACTION_SNOOZE_WARNING;
    private static final long TIME_CACHE_MAX_AGE;
    private static final int MSG_RULES_CHANGED;
    private static final int MSG_METERED_IFACES_CHANGED;
    private static final int MSG_LIMIT_REACHED;
    private static final int MSG_RESTRICT_BACKGROUND_CHANGED;
    private static final int MSG_ADVISE_PERSIST_THRESHOLD;
    private static final int MSG_SCREEN_ON_CHANGED;
    private final android.content.Context mContext;
    private final android.app.IActivityManager mActivityManager;
    private final android.os.IPowerManager mPowerManager;
    private final android.net.INetworkStatsService mNetworkStats;
    private final android.os.INetworkManagementService mNetworkManager;
    private final android.util.TrustedTime mTime;
    private android.net.IConnectivityManager mConnManager;
    private android.app.INotificationManager mNotifManager;
    private android.os.PowerManagerInternal mPowerManagerInternal;
    final java.lang.Object mRulesLock;
    volatile boolean mScreenOn;
    volatile boolean mRestrictBackground;
    volatile boolean mRestrictPower;
    private final boolean mSuppressDefaultPolicy;
    final android.util.ArrayMap mNetworkPolicy;
    private final android.util.ArrayMap mNetworkRules;
    final android.util.SparseIntArray mUidPolicy;
    private final android.util.SparseIntArray mUidRules;
    private final android.util.SparseBooleanArray mPowerSaveWhitelistAppIds;
    private android.util.ArraySet mMeteredIfaces;
    private final android.util.ArraySet mOverLimitNotified;
    private final android.util.ArraySet mActiveNotifs;
    private final android.util.SparseIntArray mUidState;
    final android.util.SparseArray mUidPidState;
    private int mCurForegroundState;
    private final android.os.RemoteCallbackList mListeners;
    final android.os.Handler mHandler;
    private final android.util.AtomicFile mPolicyFile;
    private android.app.IProcessObserver mProcessObserver;
    private android.content.BroadcastReceiver mScreenReceiver;
    private android.content.BroadcastReceiver mPackageReceiver;
    private android.content.BroadcastReceiver mUidRemovedReceiver;
    private android.content.BroadcastReceiver mUserReceiver;
    private android.content.BroadcastReceiver mStatsReceiver;
    private android.content.BroadcastReceiver mAllowReceiver;
    private android.content.BroadcastReceiver mSnoozeWarningReceiver;
    private android.content.BroadcastReceiver mWifiConfigReceiver;
    private android.content.BroadcastReceiver mWifiStateReceiver;
    private android.net.INetworkManagementEventObserver mAlertObserver;
    private android.content.BroadcastReceiver mConnReceiver;
    private android.os.Handler$Callback mHandlerCallback;

    public void <init>(android.content.Context, android.app.IActivityManager, android.os.IPowerManager, android.net.INetworkStatsService, android.os.INetworkManagementService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.Context r1;
        android.app.IActivityManager r2;
        android.os.IPowerManager r3;
        android.net.INetworkStatsService r4;
        android.os.INetworkManagementService r5;
        android.util.NtpTrustedTime $r6;
        java.io.File $r7;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.app.IActivityManager;

        r3 := @parameter2: android.os.IPowerManager;

        r4 := @parameter3: android.net.INetworkStatsService;

        r5 := @parameter4: android.os.INetworkManagementService;

        $r6 = staticinvoke <android.util.NtpTrustedTime: android.util.NtpTrustedTime getInstance(android.content.Context)>(r1);

        $r7 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: java.io.File getSystemDir()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void <init>(android.content.Context,android.app.IActivityManager,android.os.IPowerManager,android.net.INetworkStatsService,android.os.INetworkManagementService,android.util.TrustedTime,java.io.File,boolean)>(r1, r2, r3, r4, r5, $r6, $r7, 0);

        return;
    }

    private static java.io.File getSystemDir()
    {
        java.io.File $r0, $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "system");

        return $r0;
    }

    public void <init>(android.content.Context, android.app.IActivityManager, android.os.IPowerManager, android.net.INetworkStatsService, android.os.INetworkManagementService, android.util.TrustedTime, java.io.File, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.Context r1, $r37;
        android.app.IActivityManager r2, $r35;
        android.os.IPowerManager r3, $r41;
        android.net.INetworkStatsService r4, $r39;
        android.os.INetworkManagementService r5, $r45;
        android.util.TrustedTime r6, $r43;
        java.io.File r7, $r51;
        boolean z0;
        android.os.HandlerThread r8, $r44;
        java.lang.Object $r9, $r32, $r36, $r38, $r40, $r42, $r46;
        android.util.ArrayMap $r10, $r11;
        android.util.SparseIntArray $r12, $r13, $r17;
        android.util.SparseBooleanArray $r14;
        android.util.ArraySet $r15, $r16, $r18;
        android.os.RemoteCallbackList $r19;
        android.util.SparseArray $r20;
        com.android.server.net.NetworkPolicyManagerService$3 $r21;
        com.android.server.net.NetworkPolicyManagerService$2 $r22;
        com.android.server.net.NetworkPolicyManagerService$5 $r23;
        com.android.server.net.NetworkPolicyManagerService$4 $r24;
        com.android.server.net.NetworkPolicyManagerService$7 $r25;
        com.android.server.net.NetworkPolicyManagerService$6 $r26;
        com.android.server.net.NetworkPolicyManagerService$9 $r27;
        com.android.server.net.NetworkPolicyManagerService$8 $r28;
        com.android.server.net.NetworkPolicyManagerService$11 $r29;
        com.android.server.net.NetworkPolicyManagerService$10 $r30;
        com.android.server.net.NetworkPolicyManagerService$14 $r31;
        com.android.server.net.NetworkPolicyManagerService$12 $r33;
        com.android.server.net.NetworkPolicyManagerService$13 $r34;
        android.util.AtomicFile $r47;
        android.os.Handler$Callback $r48;
        android.os.Looper $r49;
        android.os.Handler $r50;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.app.IActivityManager;

        r3 := @parameter2: android.os.IPowerManager;

        r4 := @parameter3: android.net.INetworkStatsService;

        r5 := @parameter4: android.os.INetworkManagementService;

        r6 := @parameter5: android.util.TrustedTime;

        r7 := @parameter6: java.io.File;

        z0 := @parameter7: boolean;

        specialinvoke r0.<android.net.INetworkPolicyManager$Stub: void <init>()>();

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock> = $r9;

        $r10 = new android.util.ArrayMap;

        specialinvoke $r10.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy> = $r10;

        $r11 = new android.util.ArrayMap;

        specialinvoke $r11.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkRules> = $r11;

        $r12 = new android.util.SparseIntArray;

        specialinvoke $r12.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy> = $r12;

        $r13 = new android.util.SparseIntArray;

        specialinvoke $r13.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules> = $r13;

        $r14 = new android.util.SparseBooleanArray;

        specialinvoke $r14.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds> = $r14;

        $r16 = new android.util.ArraySet;

        specialinvoke $r16.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces> = $r16;

        $r15 = new android.util.ArraySet;

        specialinvoke $r15.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mOverLimitNotified> = $r15;

        $r18 = new android.util.ArraySet;

        specialinvoke $r18.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mActiveNotifs> = $r18;

        $r17 = new android.util.SparseIntArray;

        specialinvoke $r17.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState> = $r17;

        $r20 = new android.util.SparseArray;

        specialinvoke $r20.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mUidPidState> = $r20;

        r0.<com.android.server.net.NetworkPolicyManagerService: int mCurForegroundState> = 2;

        $r19 = new android.os.RemoteCallbackList;

        specialinvoke $r19.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.RemoteCallbackList mListeners> = $r19;

        $r22 = new com.android.server.net.NetworkPolicyManagerService$2;

        specialinvoke $r22.<com.android.server.net.NetworkPolicyManagerService$2: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.app.IProcessObserver mProcessObserver> = $r22;

        $r21 = new com.android.server.net.NetworkPolicyManagerService$3;

        specialinvoke $r21.<com.android.server.net.NetworkPolicyManagerService$3: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mScreenReceiver> = $r21;

        $r24 = new com.android.server.net.NetworkPolicyManagerService$4;

        specialinvoke $r24.<com.android.server.net.NetworkPolicyManagerService$4: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mPackageReceiver> = $r24;

        $r23 = new com.android.server.net.NetworkPolicyManagerService$5;

        specialinvoke $r23.<com.android.server.net.NetworkPolicyManagerService$5: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mUidRemovedReceiver> = $r23;

        $r26 = new com.android.server.net.NetworkPolicyManagerService$6;

        specialinvoke $r26.<com.android.server.net.NetworkPolicyManagerService$6: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mUserReceiver> = $r26;

        $r25 = new com.android.server.net.NetworkPolicyManagerService$7;

        specialinvoke $r25.<com.android.server.net.NetworkPolicyManagerService$7: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mStatsReceiver> = $r25;

        $r28 = new com.android.server.net.NetworkPolicyManagerService$8;

        specialinvoke $r28.<com.android.server.net.NetworkPolicyManagerService$8: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mAllowReceiver> = $r28;

        $r27 = new com.android.server.net.NetworkPolicyManagerService$9;

        specialinvoke $r27.<com.android.server.net.NetworkPolicyManagerService$9: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mSnoozeWarningReceiver> = $r27;

        $r30 = new com.android.server.net.NetworkPolicyManagerService$10;

        specialinvoke $r30.<com.android.server.net.NetworkPolicyManagerService$10: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mWifiConfigReceiver> = $r30;

        $r29 = new com.android.server.net.NetworkPolicyManagerService$11;

        specialinvoke $r29.<com.android.server.net.NetworkPolicyManagerService$11: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mWifiStateReceiver> = $r29;

        $r33 = new com.android.server.net.NetworkPolicyManagerService$12;

        specialinvoke $r33.<com.android.server.net.NetworkPolicyManagerService$12: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkManagementEventObserver mAlertObserver> = $r33;

        $r34 = new com.android.server.net.NetworkPolicyManagerService$13;

        specialinvoke $r34.<com.android.server.net.NetworkPolicyManagerService$13: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mConnReceiver> = $r34;

        $r31 = new com.android.server.net.NetworkPolicyManagerService$14;

        specialinvoke $r31.<com.android.server.net.NetworkPolicyManagerService$14: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler$Callback mHandlerCallback> = $r31;

        $r32 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "missing context");

        $r37 = (android.content.Context) $r32;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext> = $r37;

        $r38 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "missing activityManager");

        $r35 = (android.app.IActivityManager) $r38;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.app.IActivityManager mActivityManager> = $r35;

        $r36 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "missing powerManager");

        $r41 = (android.os.IPowerManager) $r36;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.IPowerManager mPowerManager> = $r41;

        $r42 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "missing networkStats");

        $r39 = (android.net.INetworkStatsService) $r42;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkStatsService mNetworkStats> = $r39;

        $r40 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "missing networkManagement");

        $r45 = (android.os.INetworkManagementService) $r40;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager> = $r45;

        $r46 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "missing TrustedTime");

        $r43 = (android.util.TrustedTime) $r46;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.TrustedTime mTime> = $r43;

        $r44 = new android.os.HandlerThread;

        specialinvoke $r44.<android.os.HandlerThread: void <init>(java.lang.String)>("NetworkPolicy");

        r8 = $r44;

        virtualinvoke r8.<android.os.HandlerThread: void start()>();

        $r50 = new android.os.Handler;

        $r49 = virtualinvoke r8.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r48 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler$Callback mHandlerCallback>;

        specialinvoke $r50.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>($r49, $r48);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler> = $r50;

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mSuppressDefaultPolicy> = z0;

        $r47 = new android.util.AtomicFile;

        $r51 = new java.io.File;

        specialinvoke $r51.<java.io.File: void <init>(java.io.File,java.lang.String)>(r7, "netpolicy.xml");

        specialinvoke $r47.<android.util.AtomicFile: void <init>(java.io.File)>($r51);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile> = $r47;

        return;
    }

    public void bindConnectivityManager(android.net.IConnectivityManager)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.IConnectivityManager r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.IConnectivityManager;

        $r2 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "missing IConnectivityManager");

        $r3 = (android.net.IConnectivityManager) $r2;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.net.IConnectivityManager mConnManager> = $r3;

        return;
    }

    public void bindNotificationManager(android.app.INotificationManager)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.app.INotificationManager r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.app.INotificationManager;

        $r2 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "missing INotificationManager");

        $r3 = (android.app.INotificationManager) $r2;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.app.INotificationManager mNotifManager> = $r3;

        return;
    }

    public void systemReady()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.pm.PackageManager r1;
        java.lang.Object r2, $r11, $r13, $r71;
        com.android.server.SystemConfig r3;
        android.util.ArraySet r4;
        int i0, $i1, $i2, $i4, $i5, $i6;
        java.lang.String r5;
        android.content.pm.ApplicationInfo r6;
        java.lang.Throwable r7, $r74;
        android.content.IntentFilter r8, r9, $r22, $r23, $r28, $r37, $r41, $r44, $r47, $r56, $r59, $r68, r77, r78, r79, r80, r81, r82, r83;
        boolean $z0, $z1, $z2, $z3;
        android.content.Context $r10, $r25, $r30, $r31, $r38, $r46, $r49, $r52, $r62, $r64, $r66;
        android.os.PowerManagerInternal $r12, $r14, $r16;
        com.android.server.net.NetworkPolicyManagerService$1 $r15;
        android.app.IActivityManager $r17;
        android.app.IProcessObserver $r18;
        android.os.INetworkManagementService $r19;
        android.net.INetworkManagementEventObserver $r20;
        android.content.BroadcastReceiver $r21, $r29, $r34, $r35, $r39, $r50, $r53, $r58, $r61, $r63;
        android.os.Handler $r24, $r33, $r36, $r40, $r43, $r54, $r57, $r60, $r69;
        android.util.SparseBooleanArray $r70;
        android.os.RemoteException $r72;
        android.content.pm.PackageManager$NameNotFoundException $r73;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $z0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isBandwidthControlEnabled()>();

        if $z0 != 0 goto label01;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", "bandwidth controls disabled, unable to enforce policy");

        return;

     label01:
        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r10.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r2 = $r11;

        entermonitor $r11;

     label02:
        r3 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        r4 = virtualinvoke r3.<com.android.server.SystemConfig: android.util.ArraySet getAllowInPowerSave()>();

        i0 = 0;

     label03:
        $i1 = virtualinvoke r4.<android.util.ArraySet: int size()>();

        if i0 >= $i1 goto label08;

        $r71 = virtualinvoke r4.<android.util.ArraySet: java.lang.Object valueAt(int)>(i0);

        r5 = (java.lang.String) $r71;

     label04:
        r6 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r5, 0);

        $i6 = r6.<android.content.pm.ApplicationInfo: int flags>;

        $i5 = $i6 & 1;

        if $i5 == 0 goto label05;

        $r70 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        $i2 = r6.<android.content.pm.ApplicationInfo: int uid>;

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i2);

        virtualinvoke $r70.<android.util.SparseBooleanArray: void put(int,boolean)>($i4, 1);

     label05:
        goto label07;

     label06:
        $r73 := @caughtexception;

     label07:
        i0 = i0 + 1;

        goto label03;

     label08:
        $r13 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "android/os/PowerManagerInternal");

        $r12 = (android.os.PowerManagerInternal) $r13;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.PowerManagerInternal mPowerManagerInternal> = $r12;

        $r14 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        $r15 = new com.android.server.net.NetworkPolicyManagerService$1;

        specialinvoke $r15.<com.android.server.net.NetworkPolicyManagerService$1: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        virtualinvoke $r14.<android.os.PowerManagerInternal: void registerLowPowerModeObserver(android.os.PowerManagerInternal$LowPowerModeListener)>($r15);

        $r16 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        $z1 = virtualinvoke $r16.<android.os.PowerManagerInternal: boolean getLowPowerModeEnabled()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictPower> = $z1;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void readPolicyLocked()>();

        $z2 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z2 != 0 goto label09;

        $z3 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictPower>;

        if $z3 == 0 goto label10;

     label09:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForGlobalChangeLocked(boolean)>(1);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()>();

     label10:
        exitmonitor r2;

     label11:
        goto label14;

     label12:
        $r74 := @caughtexception;

        r7 = $r74;

        exitmonitor r2;

     label13:
        throw r7;

     label14:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateScreenOn()>();

     label15:
        $r17 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.IActivityManager mActivityManager>;

        $r18 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.IProcessObserver mProcessObserver>;

        interfaceinvoke $r17.<android.app.IActivityManager: void registerProcessObserver(android.app.IProcessObserver)>($r18);

        $r19 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        $r20 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkManagementEventObserver mAlertObserver>;

        interfaceinvoke $r19.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>($r20);

     label16:
        goto label18;

     label17:
        $r72 := @caughtexception;

     label18:
        $r22 = new android.content.IntentFilter;

        specialinvoke $r22.<android.content.IntentFilter: void <init>()>();

        r77 = $r22;

        virtualinvoke r77.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_ON");

        virtualinvoke r77.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_OFF");

        $r25 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r21 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mScreenReceiver>;

        virtualinvoke $r25.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r21, r77);

        $r23 = new android.content.IntentFilter;

        specialinvoke $r23.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE_IMMEDIATE");

        r78 = $r23;

        $r30 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r29 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mConnReceiver>;

        $r24 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r30.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r29, r78, "android.permission.CONNECTIVITY_INTERNAL", $r24);

        $r28 = new android.content.IntentFilter;

        specialinvoke $r28.<android.content.IntentFilter: void <init>()>();

        r79 = $r28;

        virtualinvoke r79.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        virtualinvoke r79.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r31 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r34 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mPackageReceiver>;

        $r33 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r31.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r34, r79, null, $r33);

        $r38 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r35 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mUidRemovedReceiver>;

        $r37 = new android.content.IntentFilter;

        specialinvoke $r37.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.UID_REMOVED");

        $r36 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r38.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r35, $r37, null, $r36);

        $r41 = new android.content.IntentFilter;

        specialinvoke $r41.<android.content.IntentFilter: void <init>()>();

        r80 = $r41;

        virtualinvoke r80.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        virtualinvoke r80.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        $r46 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r39 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mUserReceiver>;

        $r40 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r46.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r39, r80, null, $r40);

        $r44 = new android.content.IntentFilter;

        specialinvoke $r44.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.action.NETWORK_STATS_UPDATED");

        r81 = $r44;

        $r49 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r50 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mStatsReceiver>;

        $r43 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r49.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r50, r81, "android.permission.READ_NETWORK_USAGE_HISTORY", $r43);

        $r47 = new android.content.IntentFilter;

        specialinvoke $r47.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.net.action.ALLOW_BACKGROUND");

        r82 = $r47;

        $r52 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r53 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mAllowReceiver>;

        $r54 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r52.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r53, r82, "android.permission.MANAGE_NETWORK_POLICY", $r54);

        $r59 = new android.content.IntentFilter;

        specialinvoke $r59.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.net.action.SNOOZE_WARNING");

        r83 = $r59;

        $r62 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r61 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mSnoozeWarningReceiver>;

        $r60 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r62.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r61, r83, "android.permission.MANAGE_NETWORK_POLICY", $r60);

        $r56 = new android.content.IntentFilter;

        specialinvoke $r56.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.wifi.CONFIGURED_NETWORKS_CHANGE");

        r8 = $r56;

        $r66 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r58 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mWifiConfigReceiver>;

        $r57 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r66.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r58, r8, null, $r57);

        $r68 = new android.content.IntentFilter;

        specialinvoke $r68.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.wifi.STATE_CHANGE");

        r9 = $r68;

        $r64 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r63 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mWifiStateReceiver>;

        $r69 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r64.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r63, r9, null, $r69);

        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label06;
        catch java.lang.Throwable from label02 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch android.os.RemoteException from label15 to label16 with label17;
    }

    void updateNotificationsLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.ArraySet r1, $r3, $r4, $r5, $r7;
        long l0, l2, l3, l4, $l7, $l9;
        int i1, $i5, $i6, i11;
        android.net.NetworkPolicy r2;
        android.util.ArrayMap $r6, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r8, $r11;
        android.net.NetworkTemplate $r10, $r12, $r13, $r14;
        byte $b8, $b10;
        java.lang.String r15;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r3 = new android.util.ArraySet;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mActiveNotifs>;

        specialinvoke $r3.<android.util.ArraySet: void <init>(android.util.ArraySet)>($r4);

        r1 = $r3;

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mActiveNotifs>;

        virtualinvoke $r5.<android.util.ArraySet: void clear()>();

        l0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long currentTimeMillis()>();

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i5 = virtualinvoke $r6.<android.util.ArrayMap: int size()>();

        i1 = $i5 - 1;

     label01:
        if i1 < 0 goto label07;

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r11 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        r2 = (android.net.NetworkPolicy) $r11;

        $r10 = r2.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $z3 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isTemplateRelevant(android.net.NetworkTemplate)>($r10);

        if $z3 != 0 goto label02;

        goto label06;

     label02:
        $z2 = virtualinvoke r2.<android.net.NetworkPolicy: boolean hasCycle()>();

        if $z2 != 0 goto label03;

        goto label06;

     label03:
        l2 = staticinvoke <android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)>(l0, r2);

        l3 = l0;

        $r12 = r2.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        l4 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(android.net.NetworkTemplate,long,long)>($r12, l2, l3);

        $z4 = virtualinvoke r2.<android.net.NetworkPolicy: boolean isOverLimit(long)>(l4);

        if $z4 == 0 goto label05;

        $l9 = r2.<android.net.NetworkPolicy: long lastLimitSnooze>;

        $b10 = $l9 cmp l2;

        if $b10 < 0 goto label04;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enqueueNotification(android.net.NetworkPolicy,int,long)>(r2, 3, l4);

        goto label06;

     label04:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enqueueNotification(android.net.NetworkPolicy,int,long)>(r2, 2, l4);

        $r14 = r2.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void notifyOverLimitLocked(android.net.NetworkTemplate)>($r14);

        goto label06;

     label05:
        $r13 = r2.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void notifyUnderLimitLocked(android.net.NetworkTemplate)>($r13);

        $z5 = virtualinvoke r2.<android.net.NetworkPolicy: boolean isOverWarning(long)>(l4);

        if $z5 == 0 goto label06;

        $l7 = r2.<android.net.NetworkPolicy: long lastWarningSnooze>;

        $b8 = $l7 cmp l2;

        if $b8 >= 0 goto label06;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enqueueNotification(android.net.NetworkPolicy,int,long)>(r2, 1, l4);

     label06:
        i1 = i1 + -1;

        goto label01;

     label07:
        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z0 == 0 goto label08;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enqueueRestrictedNotification(java.lang.String)>("NetworkPolicy:allowBackground");

     label08:
        $i6 = virtualinvoke r1.<android.util.ArraySet: int size()>();

        i11 = $i6 - 1;

     label09:
        if i11 < 0 goto label11;

        $r8 = virtualinvoke r1.<android.util.ArraySet: java.lang.Object valueAt(int)>(i11);

        r15 = (java.lang.String) $r8;

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mActiveNotifs>;

        $z1 = virtualinvoke $r7.<android.util.ArraySet: boolean contains(java.lang.Object)>(r15);

        if $z1 != 0 goto label10;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void cancelNotification(java.lang.String)>(r15);

     label10:
        i11 = i11 + -1;

        goto label09;

     label11:
        return;
    }

    private boolean isTemplateRelevant(android.net.NetworkTemplate)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        android.telephony.TelephonyManager r2;
        android.content.Context $r3;
        int $i0, $i1;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r2 = staticinvoke <android.telephony.TelephonyManager: android.telephony.TelephonyManager 'from'(android.content.Context)>($r3);

        $i0 = virtualinvoke r1.<android.net.NetworkTemplate: int getMatchRule()>();

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            default: goto label3;
        };

     label1:
        $i1 = virtualinvoke r2.<android.telephony.TelephonyManager: int getSimState()>();

        if $i1 != 5 goto label2;

        $r4 = virtualinvoke r2.<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>();

        $r5 = virtualinvoke r1.<android.net.NetworkTemplate: java.lang.String getSubscriberId()>();

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r5);

        return $z0;

     label2:
        return 0;

     label3:
        return 1;
    }

    private void notifyOverLimitLocked(android.net.NetworkTemplate)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        android.util.ArraySet $r2, $r5;
        boolean $z0;
        android.content.Context $r3;
        android.content.Intent $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mOverLimitNotified>;

        $z0 = virtualinvoke $r2.<android.util.ArraySet: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r4 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildNetworkOverLimitIntent(android.net.NetworkTemplate)>(r1);

        virtualinvoke $r3.<android.content.Context: void startActivity(android.content.Intent)>($r4);

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mOverLimitNotified>;

        virtualinvoke $r5.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    private void notifyUnderLimitLocked(android.net.NetworkTemplate)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        android.util.ArraySet $r2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mOverLimitNotified>;

        virtualinvoke $r2.<android.util.ArraySet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private java.lang.String buildNotificationTag(android.net.NetworkPolicy, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkPolicy r1;
        int i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7;
        android.net.NetworkTemplate $r4;
        java.lang.String $r8;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkPolicy;

        i0 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NetworkPolicy:");

        $r4 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $i1 = virtualinvoke $r4.<android.net.NetworkTemplate: int hashCode()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private void enqueueNotification(android.net.NetworkPolicy, int, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkPolicy r1;
        int i0, $i2, $i4, $i5, i6;
        long l1, $l3, l7;
        java.lang.String r2, r6, $r37, r61, r63;
        android.app.Notification$Builder r3, $r10;
        android.content.res.Resources r4, $r14;
        java.lang.CharSequence r5, r58, r59, r62;
        android.content.Intent r7, r8, r9, r60;
        android.content.Context $r11, $r15, $r17, $r25, $r29, $r31, $r34, $r45, $r55;
        android.net.NetworkTemplate $r22, $r24, $r36, $r41, $r44, $r51;
        android.app.PendingIntent $r26, $r27, $r46, $r57;
        android.app.INotificationManager $r30;
        android.app.Notification $r32;
        android.util.ArraySet $r33;
        java.lang.Object[] $r35;
        android.os.RemoteException $r54;
        int[] r64;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkPolicy;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.String buildNotificationTag(android.net.NetworkPolicy,int)>(r1, i0);

        $r10 = new android.app.Notification$Builder;

        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        specialinvoke $r10.<android.app.Notification$Builder: void <init>(android.content.Context)>($r11);

        r3 = $r10;

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)>(1);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>(0L);

        $r15 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r14 = virtualinvoke $r15.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke $r14.<android.content.res.Resources: int getColor(int)>(17170520);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i2);

        $r17 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r4 = virtualinvoke $r17.<android.content.Context: android.content.res.Resources getResources()>();

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label09;
            default: goto label16;
        };

     label01:
        r5 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040787);

        r6 = virtualinvoke r4.<android.content.res.Resources: java.lang.String getString(int)>(17040788);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17301624);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>(r5);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r5);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r6);

        $r22 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        r7 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildSnoozeWarningIntent(android.net.NetworkTemplate)>($r22);

        $r25 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r26 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r25, 0, r7, 134217728);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)>($r26);

        $r24 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        r8 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildViewDataUsageIntent(android.net.NetworkTemplate)>($r24);

        $r29 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r27 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r29, 0, r8, 134217728);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r27);

        goto label16;

     label02:
        r58 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040793);

        i6 = 17303118;

        $r44 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $i5 = virtualinvoke $r44.<android.net.NetworkTemplate: int getMatchRule()>();

        tableswitch($i5)
        {
            case 1: goto label05;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label06;
            default: goto label07;
        };

     label03:
        r59 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040789);

        goto label08;

     label04:
        r59 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040790);

        goto label08;

     label05:
        r59 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040791);

        goto label08;

     label06:
        r59 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040792);

        i6 = 17301624;

        goto label08;

     label07:
        r59 = null;

     label08:
        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(i6);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>(r59);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r59);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r58);

        $r51 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        r60 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildNetworkOverLimitIntent(android.net.NetworkTemplate)>($r51);

        $r55 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r57 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r55, 0, r60, 134217728);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r57);

        goto label16;

     label09:
        $l3 = r1.<android.net.NetworkPolicy: long limitBytes>;

        l7 = l1 - $l3;

        $r35 = newarray (java.lang.Object)[1];

        $r34 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r37 = staticinvoke <android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long)>($r34, l7);

        $r35[0] = $r37;

        r61 = virtualinvoke r4.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17040798, $r35);

        $r36 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $i4 = virtualinvoke $r36.<android.net.NetworkTemplate: int getMatchRule()>();

        tableswitch($i4)
        {
            case 1: goto label12;
            case 2: goto label10;
            case 3: goto label11;
            case 4: goto label13;
            default: goto label14;
        };

     label10:
        r62 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040794);

        goto label15;

     label11:
        r62 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040795);

        goto label15;

     label12:
        r62 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040796);

        goto label15;

     label13:
        r62 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040797);

        goto label15;

     label14:
        r62 = null;

     label15:
        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17301624);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>(r62);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r62);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r61);

        $r41 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        r9 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildViewDataUsageIntent(android.net.NetworkTemplate)>($r41);

        $r45 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r46 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r45, 0, r9, 134217728);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r46);

        goto label16;

     label16:
        $r31 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r63 = virtualinvoke $r31.<android.content.Context: java.lang.String getPackageName()>();

        r64 = newarray (int)[1];

        $r30 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.INotificationManager mNotifManager>;

        $r32 = virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification getNotification()>();

        interfaceinvoke $r30.<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int[],int)>(r63, r63, r2, 0, $r32, r64, 0);

        $r33 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mActiveNotifs>;

        virtualinvoke $r33.<android.util.ArraySet: boolean add(java.lang.Object)>(r2);

     label17:
        goto label19;

     label18:
        $r54 := @caughtexception;

     label19:
        return;

        catch android.os.RemoteException from label16 to label17 with label18;
    }

    private void enqueueRestrictedNotification(java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String r1, r5, r7;
        android.content.res.Resources r2, $r19;
        android.app.Notification$Builder r3, $r10;
        java.lang.CharSequence r4;
        android.content.Intent r6;
        int[] r8;
        android.content.Context $r9, $r11, $r17, $r22, $r23;
        int $i0;
        android.app.PendingIntent $r21;
        android.app.INotificationManager $r25;
        android.util.ArraySet $r26;
        android.app.Notification $r27;
        android.os.RemoteException $r28;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.lang.String;

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r2 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources getResources()>();

        $r10 = new android.app.Notification$Builder;

        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        specialinvoke $r10.<android.app.Notification$Builder: void <init>(android.content.Context)>($r11);

        r3 = $r10;

        r4 = virtualinvoke r2.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040799);

        r5 = virtualinvoke r2.<android.content.res.Resources: java.lang.String getString(int)>(17040800);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)>(1);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17301624);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>(r4);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r4);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r5);

        $r17 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r19 = virtualinvoke $r17.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r19.<android.content.res.Resources: int getColor(int)>(17170520);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i0);

        r6 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildAllowBackgroundDataIntent()>();

        $r22 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r21 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r22, 0, r6, 134217728);

        virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r21);

     label1:
        $r23 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r7 = virtualinvoke $r23.<android.content.Context: java.lang.String getPackageName()>();

        r8 = newarray (int)[1];

        $r25 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.INotificationManager mNotifManager>;

        $r27 = virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification getNotification()>();

        interfaceinvoke $r25.<android.app.INotificationManager: void enqueueNotificationWithTag(java.lang.String,java.lang.String,java.lang.String,int,android.app.Notification,int[],int)>(r7, r7, r1, 0, $r27, r8, 0);

        $r26 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mActiveNotifs>;

        virtualinvoke $r26.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

     label2:
        goto label4;

     label3:
        $r28 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void cancelNotification(java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String r1, r2;
        android.content.Context $r3;
        android.app.INotificationManager $r4;
        android.os.RemoteException $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r2 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.INotificationManager mNotifManager>;

        interfaceinvoke $r4.<android.app.INotificationManager: void cancelNotificationWithTag(java.lang.String,java.lang.String,int,int)>(r2, r1, 0, 0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void updateNetworkEnabledLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0, l2, l3, l4, $l7, $l9;
        int i1, $i5;
        android.net.NetworkPolicy r1;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        android.util.ArrayMap $r2, $r4;
        java.lang.Object $r3;
        byte $b6, $b8;
        android.net.NetworkTemplate $r5, $r6, $r7;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        l0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long currentTimeMillis()>();

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i5 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        i1 = $i5 - 1;

     label1:
        if i1 < 0 goto label9;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r3 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        r1 = (android.net.NetworkPolicy) $r3;

        $l7 = r1.<android.net.NetworkPolicy: long limitBytes>;

        $b6 = $l7 cmp -1L;

        if $b6 == 0 goto label2;

        $z2 = virtualinvoke r1.<android.net.NetworkPolicy: boolean hasCycle()>();

        if $z2 != 0 goto label3;

     label2:
        $r5 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setNetworkTemplateEnabled(android.net.NetworkTemplate,boolean)>($r5, 1);

        goto label8;

     label3:
        l2 = staticinvoke <android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)>(l0, r1);

        l3 = l0;

        $r6 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        l4 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(android.net.NetworkTemplate,long,long)>($r6, l2, l3);

        $z3 = virtualinvoke r1.<android.net.NetworkPolicy: boolean isOverLimit(long)>(l4);

        if $z3 == 0 goto label4;

        $l9 = r1.<android.net.NetworkPolicy: long lastLimitSnooze>;

        $b8 = $l9 cmp l2;

        if $b8 >= 0 goto label4;

        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        z0 = $z5;

        if z0 != 0 goto label6;

        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        z1 = $z4;

        $r7 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setNetworkTemplateEnabled(android.net.NetworkTemplate,boolean)>($r7, z1);

     label8:
        i1 = i1 + -1;

        goto label1;

     label9:
        return;
    }

    private void setNetworkTemplateEnabled(android.net.NetworkTemplate, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        boolean z0, $z1;
        android.telephony.TelephonyManager r2;
        android.content.Context $r3;
        int $i0, $i1;
        java.lang.String $r4, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r2 = staticinvoke <android.telephony.TelephonyManager: android.telephony.TelephonyManager 'from'(android.content.Context)>($r3);

        $i0 = virtualinvoke r1.<android.net.NetworkTemplate: int getMatchRule()>();

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label3;
            default: goto label4;
        };

     label1:
        $i1 = virtualinvoke r2.<android.telephony.TelephonyManager: int getSimState()>();

        if $i1 != 5 goto label5;

        $r4 = virtualinvoke r2.<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>();

        $r5 = virtualinvoke r1.<android.net.NetworkTemplate: java.lang.String getSubscriberId()>();

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $z1 == 0 goto label5;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setPolicyDataEnable(int,boolean)>(0, z0);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setPolicyDataEnable(int,boolean)>(6, z0);

        goto label5;

     label2:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setPolicyDataEnable(int,boolean)>(1, z0);

        goto label5;

     label3:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setPolicyDataEnable(int,boolean)>(9, z0);

        goto label5;

     label4:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unexpected template");

        throw $r6;

     label5:
        return;
    }

    void updateNetworkRulesLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkState[] r1, r5;
        java.util.ArrayList r3, $r16, r59;
        android.util.ArraySet r4, $r17, $r20, $r24, $r26, $r27, $r34, r63;
        int i0, i1, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i26, $i28, $i29, $i30, i31, i32, i35, i37, i38;
        android.net.NetworkState r6;
        android.net.NetworkIdentity r7, $r45;
        java.lang.String r8, r12, r14, r66, r67;
        java.util.List r9;
        java.util.Iterator r10;
        android.net.LinkProperties r11, $r51, $r52;
        long l2, l3, $l14, $l16, $l18, $l20, $l22, $l24, $l25, l33, l34, l36;
        boolean z0, z1, $z2, $z3, $z5, $z6, $z7, $z10, $z11, $z12, $z16, $z17, $z18, z21;
        java.lang.String[] r13, $r31, $r41, r62, r65, r68;
        android.net.IConnectivityManager $r15;
        android.util.ArrayMap $r18, $r19, $r22, $r35, $r37, $r42, $r49;
        android.os.Handler $r21, $r29;
        android.os.Message $r23, $r28;
        java.lang.Long $r25;
        java.lang.Object[] $r30, $r40;
        java.lang.Object $r32, $r33, $r36, $r38, $r43, $r44, $r47, $r48, $r56;
        byte $b15, $b17, $b19, $b21, $b23;
        android.net.NetworkTemplate $r39, $r46;
        android.content.Context $r53;
        android.net.NetworkInfo $r54;
        android.util.Pair $r55, $r58, r61;
        android.os.RemoteException $r57;
        android.net.NetworkPolicy r60, r64;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

     label01:
        $r15 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.IConnectivityManager mConnManager>;

        r1 = interfaceinvoke $r15.<android.net.IConnectivityManager: android.net.NetworkState[] getAllNetworkState()>();

     label02:
        goto label04;

     label03:
        $r57 := @caughtexception;

        return;

     label04:
        $z2 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictPower>;

        if $z2 == 0 goto label05;

        $z18 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z18 != 0 goto label05;

        $z17 = 1;

        goto label06;

     label05:
        $z17 = 0;

     label06:
        z21 = $z17;

        $r16 = new java.util.ArrayList;

        $i6 = lengthof r1;

        specialinvoke $r16.<java.util.ArrayList: void <init>(int)>($i6);

        r3 = $r16;

        $r17 = new android.util.ArraySet;

        $i7 = lengthof r1;

        specialinvoke $r17.<android.util.ArraySet: void <init>(int)>($i7);

        r4 = $r17;

        r5 = r1;

        i0 = lengthof r5;

        i1 = 0;

     label07:
        if i1 >= i0 goto label12;

        r6 = r5[i1];

        $r54 = r6.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        $z12 = virtualinvoke $r54.<android.net.NetworkInfo: boolean isConnected()>();

        if $z12 == 0 goto label11;

        $r53 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r7 = staticinvoke <android.net.NetworkIdentity: android.net.NetworkIdentity buildNetworkIdentity(android.content.Context,android.net.NetworkState)>($r53, r6);

        $r52 = r6.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        r8 = virtualinvoke $r52.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        if r8 == null goto label08;

        $r58 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r8, r7);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r58);

        if z21 == 0 goto label08;

        virtualinvoke r4.<android.util.ArraySet: boolean add(java.lang.Object)>(r8);

     label08:
        $r51 = r6.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        r9 = virtualinvoke $r51.<android.net.LinkProperties: java.util.List getStackedLinks()>();

        r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z16 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label11;

        $r56 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (android.net.LinkProperties) $r56;

        r12 = virtualinvoke r11.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        if r12 == null goto label10;

        $r55 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r12, r7);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r55);

        if z21 == 0 goto label10;

        virtualinvoke r4.<android.util.ArraySet: boolean add(java.lang.Object)>(r12);

     label10:
        goto label09;

     label11:
        i1 = i1 + 1;

        goto label07;

     label12:
        $r19 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkRules>;

        virtualinvoke $r19.<android.util.ArrayMap: void clear()>();

        r59 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        $r18 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i9 = virtualinvoke $r18.<android.util.ArrayMap: int size()>();

        i31 = $i9 - 1;

     label13:
        if i31 < 0 goto label18;

        $r42 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r43 = virtualinvoke $r42.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i31);

        r60 = (android.net.NetworkPolicy) $r43;

        virtualinvoke r59.<java.util.ArrayList: void clear()>();

        $i30 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        i32 = $i30 - 1;

     label14:
        if i32 < 0 goto label16;

        $r47 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i32);

        r61 = (android.util.Pair) $r47;

        $r46 = r60.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $r48 = r61.<android.util.Pair: java.lang.Object second>;

        $r45 = (android.net.NetworkIdentity) $r48;

        $z11 = virtualinvoke $r46.<android.net.NetworkTemplate: boolean matches(android.net.NetworkIdentity)>($r45);

        if $z11 == 0 goto label15;

        $r44 = r61.<android.util.Pair: java.lang.Object first>;

        virtualinvoke r59.<java.util.ArrayList: boolean add(java.lang.Object)>($r44);

     label15:
        i32 = i32 + -1;

        goto label14;

     label16:
        $i29 = virtualinvoke r59.<java.util.ArrayList: int size()>();

        if $i29 <= 0 goto label17;

        $i28 = virtualinvoke r59.<java.util.ArrayList: int size()>();

        $r41 = newarray (java.lang.String)[$i28];

        $r40 = virtualinvoke r59.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r41);

        r62 = (java.lang.String[]) $r40;

        $r49 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkRules>;

        virtualinvoke $r49.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r60, r62);

     label17:
        i31 = i31 + -1;

        goto label13;

     label18:
        l33 = 9223372036854775807L;

        $r20 = new android.util.ArraySet;

        $i8 = lengthof r1;

        specialinvoke $r20.<android.util.ArraySet: void <init>(int)>($i8);

        r63 = $r20;

        l34 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long currentTimeMillis()>();

        $r22 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkRules>;

        $i11 = virtualinvoke $r22.<android.util.ArrayMap: int size()>();

        i35 = $i11 - 1;

     label19:
        if i35 < 0 goto label36;

        $r37 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkRules>;

        $r36 = virtualinvoke $r37.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i35);

        r64 = (android.net.NetworkPolicy) $r36;

        $r35 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkRules>;

        $r38 = virtualinvoke $r35.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i35);

        r65 = (java.lang.String[]) $r38;

        $z5 = virtualinvoke r64.<android.net.NetworkPolicy: boolean hasCycle()>();

        if $z5 == 0 goto label20;

        l36 = staticinvoke <android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)>(l34, r64);

        $r39 = r64.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        l2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(android.net.NetworkTemplate,long,long)>($r39, l36, l34);

        goto label21;

     label20:
        l36 = 9223372036854775807L;

        l2 = 0L;

     label21:
        $l18 = r64.<android.net.NetworkPolicy: long warningBytes>;

        $b19 = $l18 cmp -1L;

        if $b19 == 0 goto label22;

        $z6 = 1;

        goto label23;

     label22:
        $z6 = 0;

     label23:
        z1 = $z6;

        $l14 = r64.<android.net.NetworkPolicy: long limitBytes>;

        $b15 = $l14 cmp -1L;

        if $b15 == 0 goto label24;

        $z7 = 1;

        goto label25;

     label24:
        $z7 = 0;

     label25:
        z0 = $z7;

        if z0 != 0 goto label26;

        $z10 = r64.<android.net.NetworkPolicy: boolean metered>;

        if $z10 == 0 goto label33;

     label26:
        if z0 != 0 goto label27;

        l3 = 9223372036854775807L;

        goto label29;

     label27:
        $l16 = r64.<android.net.NetworkPolicy: long lastLimitSnooze>;

        $b17 = $l16 cmp l36;

        if $b17 < 0 goto label28;

        l3 = 9223372036854775807L;

        goto label29;

     label28:
        $l24 = r64.<android.net.NetworkPolicy: long limitBytes>;

        $l25 = $l24 - l2;

        l3 = staticinvoke <java.lang.Math: long max(long,long)>(1L, $l25);

     label29:
        $i26 = lengthof r65;

        if $i26 <= 1 goto label30;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", "shared quota unsupported; generating rule for each iface");

     label30:
        r13 = r65;

        i4 = lengthof r13;

        i5 = 0;

     label31:
        if i5 >= i4 goto label33;

        r14 = r13[i5];

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void removeInterfaceQuota(java.lang.String)>(r14);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setInterfaceQuota(java.lang.String,long)>(r14, l3);

        virtualinvoke r63.<android.util.ArraySet: boolean add(java.lang.Object)>(r14);

        if z21 == 0 goto label32;

        virtualinvoke r4.<android.util.ArraySet: boolean remove(java.lang.Object)>(r14);

     label32:
        i5 = i5 + 1;

        goto label31;

     label33:
        if z1 == 0 goto label34;

        $l22 = r64.<android.net.NetworkPolicy: long warningBytes>;

        $b23 = $l22 cmp l33;

        if $b23 >= 0 goto label34;

        l33 = r64.<android.net.NetworkPolicy: long warningBytes>;

     label34:
        if z0 == 0 goto label35;

        $l20 = r64.<android.net.NetworkPolicy: long limitBytes>;

        $b21 = $l20 cmp l33;

        if $b21 >= 0 goto label35;

        l33 = r64.<android.net.NetworkPolicy: long limitBytes>;

     label35:
        i35 = i35 + -1;

        goto label19;

     label36:
        $i10 = virtualinvoke r4.<android.util.ArraySet: int size()>();

        i37 = $i10 - 1;

     label37:
        if i37 < 0 goto label38;

        $r32 = virtualinvoke r4.<android.util.ArraySet: java.lang.Object valueAt(int)>(i37);

        r66 = (java.lang.String) $r32;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void removeInterfaceQuota(java.lang.String)>(r66);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setInterfaceQuota(java.lang.String,long)>(r66, 9223372036854775807L);

        virtualinvoke r63.<android.util.ArraySet: boolean add(java.lang.Object)>(r66);

        i37 = i37 + -1;

        goto label37;

     label38:
        $r21 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l33);

        $r23 = virtualinvoke $r21.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(7, $r25);

        virtualinvoke $r23.<android.os.Message: void sendToTarget()>();

        $r24 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces>;

        $i13 = virtualinvoke $r24.<android.util.ArraySet: int size()>();

        i38 = $i13 - 1;

     label39:
        if i38 < 0 goto label41;

        $r34 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces>;

        $r33 = virtualinvoke $r34.<android.util.ArraySet: java.lang.Object valueAt(int)>(i38);

        r67 = (java.lang.String) $r33;

        $z3 = virtualinvoke r63.<android.util.ArraySet: boolean contains(java.lang.Object)>(r67);

        if $z3 != 0 goto label40;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void removeInterfaceQuota(java.lang.String)>(r67);

     label40:
        i38 = i38 + -1;

        goto label39;

     label41:
        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces> = r63;

        $r26 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces>;

        $r27 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces>;

        $i12 = virtualinvoke $r27.<android.util.ArraySet: int size()>();

        $r31 = newarray (java.lang.String)[$i12];

        $r30 = virtualinvoke $r26.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>($r31);

        r68 = (java.lang.String[]) $r30;

        $r29 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r28 = virtualinvoke $r29.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r68);

        virtualinvoke $r28.<android.os.Message: void sendToTarget()>();

        return;

        catch android.os.RemoteException from label01 to label02 with label03;
    }

    private void ensureActiveMobilePolicyLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.telephony.TelephonyManager r1;
        java.lang.String r2, r5;
        android.net.NetworkIdentity r3, $r9;
        boolean z0, $z1, $z2;
        int i0, i1, $i2, $i3, $i5;
        android.text.format.Time r4, $r13;
        android.net.NetworkTemplate r6, $r17;
        android.net.NetworkPolicy r7, $r14, $r18;
        android.content.Context $r8, $r11;
        android.util.ArrayMap $r10, $r16;
        android.content.res.Resources $r12;
        long $l6, l7;
        java.lang.Object $r15;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $z1 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mSuppressDefaultPolicy>;

        if $z1 == 0 goto label1;

        return;

     label1:
        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r1 = staticinvoke <android.telephony.TelephonyManager: android.telephony.TelephonyManager 'from'(android.content.Context)>($r8);

        $i2 = virtualinvoke r1.<android.telephony.TelephonyManager: int getSimState()>();

        if $i2 == 5 goto label2;

        return;

     label2:
        r2 = virtualinvoke r1.<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>();

        $r9 = new android.net.NetworkIdentity;

        specialinvoke $r9.<android.net.NetworkIdentity: void <init>(int,int,java.lang.String,java.lang.String,boolean)>(0, 0, r2, null, 0);

        r3 = $r9;

        z0 = 0;

        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i3 = virtualinvoke $r10.<android.util.ArrayMap: int size()>();

        i0 = $i3 - 1;

     label3:
        if i0 < 0 goto label5;

        $r16 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r15 = virtualinvoke $r16.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i0);

        $r18 = (android.net.NetworkPolicy) $r15;

        $r17 = $r18.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $z2 = virtualinvoke $r17.<android.net.NetworkTemplate: boolean matches(android.net.NetworkIdentity)>(r3);

        if $z2 == 0 goto label4;

        z0 = 1;

        goto label5;

     label4:
        i0 = i0 + -1;

        goto label3;

     label5:
        if z0 != 0 goto label6;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("NetworkPolicy", "no policy for active mobile network; generating default policy");

        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: android.content.res.Resources getResources()>();

        $i5 = virtualinvoke $r12.<android.content.res.Resources: int getInteger(int)>(17694822);

        $l6 = (long) $i5;

        l7 = $l6 * 1048576L;

        $r13 = new android.text.format.Time;

        specialinvoke $r13.<android.text.format.Time: void <init>()>();

        r4 = $r13;

        virtualinvoke r4.<android.text.format.Time: void setToNow()>();

        i1 = r4.<android.text.format.Time: int monthDay>;

        r5 = r4.<android.text.format.Time: java.lang.String timezone>;

        r6 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateMobileAll(java.lang.String)>(r2);

        $r14 = new android.net.NetworkPolicy;

        specialinvoke $r14.<android.net.NetworkPolicy: void <init>(android.net.NetworkTemplate,int,java.lang.String,long,long,long,long,boolean,boolean)>(r6, i1, r5, l7, -1L, -1L, -1L, 1, 1);

        r7 = $r14;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void addNetworkPolicyLocked(android.net.NetworkPolicy)>(r7);

     label6:
        return;
    }

    private void readPolicyLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.io.FileInputStream r1;
        org.xmlpull.v1.XmlPullParser r2;
        int i0, i1, i2, i3, $i8, i13, i14, i15, i16, i17;
        java.lang.String r3, r4, r5, r6, $r12, $r13, $r14, $r15, $r18, $r24;
        long l4, l5, l6, l7;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.net.NetworkTemplate r7, $r26;
        android.util.ArrayMap $r8, $r28;
        java.lang.Throwable r9, $r30;
        android.util.AtomicFile $r10;
        android.util.SparseIntArray $r11;
        java.lang.StringBuilder $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r25;
        android.net.NetworkPolicy $r27;
        org.xmlpull.v1.XmlPullParserException $r31, r36;
        java.io.IOException $r32, r35;
        java.io.FileNotFoundException $r33;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        virtualinvoke $r8.<android.util.ArrayMap: void clear()>();

        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        virtualinvoke $r11.<android.util.SparseIntArray: void clear()>();

        r1 = null;

     label01:
        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile>;

        r1 = virtualinvoke $r10.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        r2 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r1, null);

        i1 = 1;

     label02:
        $i8 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int next()>();

        i0 = $i8;

        if $i8 == 1 goto label26;

        r3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        if i0 != 2 goto label25;

        $r12 = "policy-list";

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label04;

        i1 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "version");

        if i1 < 3 goto label03;

        $z8 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "restrictBackground");

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground> = $z8;

        goto label25;

     label03:
        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground> = 0;

        goto label25;

     label04:
        $r14 = "network-policy";

        $z4 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z4 == 0 goto label20;

        i2 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "networkTemplate");

        r4 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "subscriberId");

        if i1 < 9 goto label05;

        r5 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "networkId");

        goto label06;

     label05:
        r5 = null;

     label06:
        i3 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "cycleDay");

        if i1 < 6 goto label07;

        r6 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "cycleTimezone");

        goto label08;

     label07:
        r6 = "UTC";

     label08:
        l4 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "warningBytes");

        l5 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "limitBytes");

        if i1 < 5 goto label09;

        l6 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "lastLimitSnooze");

        goto label11;

     label09:
        if i1 < 2 goto label10;

        l6 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "lastSnooze");

        goto label11;

     label10:
        l6 = -1L;

     label11:
        if i1 < 4 goto label12;

        z0 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "metered");

        goto label15;

     label12:
        tableswitch(i2)
        {
            case 1: goto label13;
            case 2: goto label13;
            case 3: goto label13;
            default: goto label14;
        };

     label13:
        z0 = 1;

        goto label15;

     label14:
        z0 = 0;

     label15:
        if i1 < 5 goto label16;

        l7 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "lastWarningSnooze");

        goto label17;

     label16:
        l7 = -1L;

     label17:
        if i1 < 7 goto label18;

        z1 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "inferred");

        goto label19;

     label18:
        z1 = 0;

     label19:
        $r26 = new android.net.NetworkTemplate;

        specialinvoke $r26.<android.net.NetworkTemplate: void <init>(int,java.lang.String,java.lang.String)>(i2, r4, r5);

        r7 = $r26;

        $r28 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r27 = new android.net.NetworkPolicy;

        specialinvoke $r27.<android.net.NetworkPolicy: void <init>(android.net.NetworkTemplate,int,java.lang.String,long,long,long,long,boolean,boolean)>(r7, i3, r6, l4, l5, l7, l6, z0, z1);

        virtualinvoke $r28.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r27);

        goto label25;

     label20:
        $r13 = "uid-policy";

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z3 == 0 goto label23;

        i13 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "uid");

        i14 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "policy");

        $z7 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i13);

        if $z7 == 0 goto label21;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUncheckedLocked(int,int,boolean)>(i13, i14, 0);

        goto label22;

     label21:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to apply policy to UID ");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ignoring");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r24);

     label22:
        goto label25;

     label23:
        $r15 = "app-policy";

        $z5 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z5 == 0 goto label25;

        i15 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "appId");

        i16 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "policy");

        i17 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(0, i15);

        $z6 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i17);

        if $z6 == 0 goto label24;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUncheckedLocked(int,int,boolean)>(i17, i16, 0);

        goto label25;

     label24:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to apply policy to UID ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ignoring");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r18);

     label25:
        goto label02;

     label26:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        goto label35;

     label27:
        $r33 := @caughtexception;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void upgradeLegacyBackgroundData()>();

     label28:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        goto label35;

     label29:
        $r32 := @caughtexception;

        r35 = $r32;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem reading network policy", r35);

     label30:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        goto label35;

     label31:
        $r31 := @caughtexception;

        r36 = $r31;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem reading network policy", r36);

     label32:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        goto label35;

     label33:
        $r30 := @caughtexception;

        r9 = $r30;

     label34:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw r9;

     label35:
        return;

        catch java.io.FileNotFoundException from label01 to label26 with label27;
        catch java.io.IOException from label01 to label26 with label29;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label26 with label31;
        catch java.lang.Throwable from label01 to label26 with label33;
        catch java.lang.Throwable from label27 to label28 with label33;
        catch java.lang.Throwable from label29 to label30 with label33;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label33 to label34 with label33;
    }

    private void upgradeLegacyBackgroundData()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.Intent r1, $r4;
        android.content.Context $r2, $r6;
        android.content.ContentResolver $r3;
        int $i0;
        boolean $z0, $z1;
        android.os.UserHandle $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r3, "background_data", 1);

        if $i0 == 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground> = $z1;

        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z0 == 0 goto label3;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.net.conn.BACKGROUND_DATA_SETTING_CHANGED");

        r1 = $r4;

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r6.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r5);

     label3:
        return;
    }

    void writePolicyLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.io.FileOutputStream r1;
        com.android.internal.util.FastXmlSerializer r2, $r8;
        int i0, $i1, $i2, $i3, $i4, i9, i10, i11;
        android.net.NetworkPolicy r3;
        android.net.NetworkTemplate r4;
        java.lang.String r5, r6, $r22;
        android.util.AtomicFile $r7, $r15, $r26;
        java.lang.Boolean $r9;
        boolean $z0, $z1, $z2;
        android.util.ArrayMap $r11, $r18;
        android.util.SparseIntArray $r12, $r14, $r16;
        java.lang.Object $r21;
        long $l5, $l6, $l7, $l8;
        java.io.IOException $r25;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 = null;

     label01:
        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile>;

        r1 = virtualinvoke $r7.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

        $r8 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r8.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r2 = $r8;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r1, "utf-8");

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r9);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "policy-list");

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r2, "version", 10);

        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r2, "restrictBackground", $z0);

        i0 = 0;

     label02:
        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i1 = virtualinvoke $r11.<android.util.ArrayMap: int size()>();

        if i0 >= $i1 goto label05;

        $r18 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r21 = virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i0);

        r3 = (android.net.NetworkPolicy) $r21;

        r4 = r3.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "network-policy");

        $i3 = virtualinvoke r4.<android.net.NetworkTemplate: int getMatchRule()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r2, "networkTemplate", $i3);

        r5 = virtualinvoke r4.<android.net.NetworkTemplate: java.lang.String getSubscriberId()>();

        if r5 == null goto label03;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "subscriberId", r5);

     label03:
        r6 = virtualinvoke r4.<android.net.NetworkTemplate: java.lang.String getNetworkId()>();

        if r6 == null goto label04;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "networkId", r6);

     label04:
        $i4 = r3.<android.net.NetworkPolicy: int cycleDay>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r2, "cycleDay", $i4);

        $r22 = r3.<android.net.NetworkPolicy: java.lang.String cycleTimezone>;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "cycleTimezone", $r22);

        $l7 = r3.<android.net.NetworkPolicy: long warningBytes>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r2, "warningBytes", $l7);

        $l5 = r3.<android.net.NetworkPolicy: long limitBytes>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r2, "limitBytes", $l5);

        $l6 = r3.<android.net.NetworkPolicy: long lastWarningSnooze>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r2, "lastWarningSnooze", $l6);

        $l8 = r3.<android.net.NetworkPolicy: long lastLimitSnooze>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r2, "lastLimitSnooze", $l8);

        $z2 = r3.<android.net.NetworkPolicy: boolean metered>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r2, "metered", $z2);

        $z1 = r3.<android.net.NetworkPolicy: boolean inferred>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r2, "inferred", $z1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "network-policy");

        i0 = i0 + 1;

        goto label02;

     label05:
        i9 = 0;

     label06:
        $r12 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        $i2 = virtualinvoke $r12.<android.util.SparseIntArray: int size()>();

        if i9 >= $i2 goto label09;

        $r14 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i10 = virtualinvoke $r14.<android.util.SparseIntArray: int keyAt(int)>(i9);

        $r16 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i11 = virtualinvoke $r16.<android.util.SparseIntArray: int valueAt(int)>(i9);

        if i11 != 0 goto label07;

        goto label08;

     label07:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "uid-policy");

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r2, "uid", i10);

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r2, "policy", i11);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "uid-policy");

     label08:
        i9 = i9 + 1;

        goto label06;

     label09:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "policy-list");

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        $r15 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile>;

        virtualinvoke $r15.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r1);

     label10:
        goto label12;

     label11:
        $r25 := @caughtexception;

        if r1 == null goto label12;

        $r26 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile>;

        virtualinvoke $r26.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r1);

     label12:
        return;

        catch java.io.IOException from label01 to label10 with label11;
    }

    public void setUidPolicy(int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r10;
        android.content.Context $r3;
        boolean $z0;
        android.util.SparseIntArray $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r11;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        $z0 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i0);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot apply policy to UID ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label1:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r1 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i2 = virtualinvoke $r5.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        if i2 == i1 goto label3;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUncheckedLocked(int,int,boolean)>(i0, i1, 1);

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void addUidPolicy(int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, i3;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r10;
        android.content.Context $r3;
        boolean $z0;
        android.util.SparseIntArray $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r11;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        $z0 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i0);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot apply policy to UID ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label1:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r1 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i2 = virtualinvoke $r5.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        i3 = i1 | i2;

        if i2 == i3 goto label3;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUncheckedLocked(int,int,boolean)>(i0, i3, 1);

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void removeUidPolicy(int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, $i3, i4;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r11;
        android.content.Context $r3;
        boolean $z0;
        android.util.SparseIntArray $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        $z0 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i0);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot apply policy to UID ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label1:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r1 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i2 = virtualinvoke $r5.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        $i3 = i1 ^ -1;

        i4 = i2 & $i3;

        if i2 == i4 goto label3;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUncheckedLocked(int,int,boolean)>(i0, i4, 1);

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void setUidPolicyUncheckedLocked(int, int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1;
        boolean z0;
        android.util.SparseIntArray $r1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        virtualinvoke $r1.<android.util.SparseIntArray: void put(int,int)>(i0, i1);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>(i0);

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

     label1:
        return;
    }

    public int getUidPolicy(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r6;
        android.content.Context $r3;
        android.util.SparseIntArray $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        $i1 = virtualinvoke $r5.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        exitmonitor r1;

     label2:
        return $i1;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int[] getUidsWithPolicy(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, i3, $i4;
        int[] r1;
        java.lang.Object r2, $r5;
        java.lang.Throwable r3, $r9;
        android.content.Context $r4;
        android.util.SparseIntArray $r6, $r7, $r8;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        r1 = newarray (int)[0];

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        i1 = 0;

     label2:
        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        $i4 = virtualinvoke $r6.<android.util.SparseIntArray: int size()>();

        if i1 >= $i4 goto label4;

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i2 = virtualinvoke $r7.<android.util.SparseIntArray: int keyAt(int)>(i1);

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i3 = virtualinvoke $r8.<android.util.SparseIntArray: int valueAt(int)>(i1);

        if i3 != i0 goto label3;

        r1 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r1, i2);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label7:
        throw r3;

     label8:
        return r1;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int[] getPowerSaveAppIdWhitelist()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Object r1, $r5;
        int i0, i1, $i2;
        int[] r2;
        java.lang.Throwable r3, $r8;
        android.content.Context $r4;
        android.util.SparseBooleanArray $r6, $r7;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        i0 = virtualinvoke $r6.<android.util.SparseBooleanArray: int size()>();

        r2 = newarray (int)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        $i2 = virtualinvoke $r7.<android.util.SparseBooleanArray: int keyAt(int)>(i1);

        r2[i1] = $i2;

        i1 = i1 + 1;

        goto label2;

     label3:
        exitmonitor r1;

     label4:
        return r2;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r1;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void removePoliciesForUserLocked(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, i8;
        int[] r1, r5;
        android.util.SparseIntArray $r2, $r3, $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        r1 = newarray (int)[0];

        i1 = 0;

     label1:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        $i5 = virtualinvoke $r2.<android.util.SparseIntArray: int size()>();

        if i1 >= $i5 goto label3;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i2 = virtualinvoke $r4.<android.util.SparseIntArray: int keyAt(int)>(i1);

        $i7 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i2);

        if $i7 != i0 goto label2;

        r1 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r1, i2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i6 = lengthof r1;

        if $i6 <= 0 goto label6;

        r5 = r1;

        i8 = lengthof r5;

        i3 = 0;

     label4:
        if i3 >= i8 goto label5;

        i4 = r5[i3];

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        virtualinvoke $r3.<android.util.SparseIntArray: void delete(int)>(i4);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>(i4);

        i3 = i3 + 1;

        goto label4;

     label5:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

     label6:
        return;
    }

    public void registerListener(android.net.INetworkPolicyListener)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.INetworkPolicyListener r1;
        android.content.Context $r2;
        android.os.RemoteCallbackList $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.INetworkPolicyListener;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkPolicy");

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.RemoteCallbackList mListeners>;

        virtualinvoke $r3.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        return;
    }

    public void unregisterListener(android.net.INetworkPolicyListener)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.INetworkPolicyListener r1;
        android.content.Context $r2;
        android.os.RemoteCallbackList $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.INetworkPolicyListener;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkPolicy");

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.RemoteCallbackList mListeners>;

        virtualinvoke $r3.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r1);

        return;
    }

    public void setNetworkPolicies(android.net.NetworkPolicy[])
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkPolicy[] r1, r3;
        java.lang.Object r2, $r7;
        int i0, i1;
        android.net.NetworkPolicy r4;
        java.lang.Throwable r5, $r12;
        android.content.Context $r6;
        android.util.ArrayMap $r8, $r10;
        android.net.NetworkTemplate $r9;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkPolicy[];

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void maybeRefreshTrustedTime()>();

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r2 = $r7;

        entermonitor $r7;

     label1:
        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        virtualinvoke $r8.<android.util.ArrayMap: void clear()>();

        r3 = r1;

        i0 = lengthof r3;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r4 = r3[i1];

        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r9 = r4.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkEnabledLocked()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        r5 = $r12;

        exitmonitor r2;

     label6:
        throw r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void addNetworkPolicyLocked(android.net.NetworkPolicy)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkPolicy r1;
        android.net.NetworkTemplate $r2;
        android.util.ArrayMap $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkPolicy;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r2 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkEnabledLocked()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

        return;
    }

    public android.net.NetworkPolicy[] getNetworkPolicies()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r12;
        android.content.Context $r3, $r4;
        android.util.ArrayMap $r6, $r8;
        java.util.Collection $r7;
        int $i0;
        android.net.NetworkPolicy[] $r9, $r11;
        java.lang.Object[] $r10;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.READ_PHONE_STATE", "NetworkPolicy");

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.util.Collection values()>();

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i0 = virtualinvoke $r8.<android.util.ArrayMap: int size()>();

        $r9 = newarray (android.net.NetworkPolicy)[$i0];

        $r10 = interfaceinvoke $r7.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (android.net.NetworkPolicy[]) $r10;

        exitmonitor r1;

     label2:
        return $r11;

     label3:
        $r12 := @caughtexception;

        r2 = $r12;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void snoozeLimit(android.net.NetworkTemplate)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        long l0;
        java.lang.Throwable r2, $r4;
        android.content.Context $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void performSnooze(android.net.NetworkTemplate,int)>(r1, 2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void performSnooze(android.net.NetworkTemplate, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        int i0;
        long l1;
        java.lang.Object r2, $r5, $r7;
        android.net.NetworkPolicy r3;
        java.lang.Throwable r4, $r13;
        android.util.ArrayMap $r6;
        java.lang.IllegalArgumentException $r8, $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r14;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void maybeRefreshTrustedTime()>();

        l1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long currentTimeMillis()>();

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (android.net.NetworkPolicy) $r7;

        if r3 != null goto label02;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to find policy for ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label02:
        lookupswitch(i0)
        {
            case 1: goto label03;
            case 2: goto label04;
            default: goto label05;
        };

     label03:
        r3.<android.net.NetworkPolicy: long lastWarningSnooze> = l1;

        goto label06;

     label04:
        r3.<android.net.NetworkPolicy: long lastLimitSnooze> = l1;

        goto label06;

     label05:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unexpected type");

        throw $r8;

     label06:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkEnabledLocked()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r2;

     label09:
        throw r4;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void setRestrictBackground(boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r7;
        android.content.Context $r3;
        android.os.Handler $r5;
        android.os.Message $r6;
        byte $b0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void maybeRefreshTrustedTime()>();

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground> = z0;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForGlobalChangeLocked(boolean)>(0);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        if z0 == 0 goto label6;

        $b0 = 1;

        goto label7;

     label6:
        $b0 = 0;

     label7:
        $r6 = virtualinvoke $r5.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(6, $b0, 0);

        virtualinvoke $r6.<android.os.Message: void sendToTarget()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean getRestrictBackground()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        android.content.Context $r3;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private android.net.NetworkPolicy findPolicyForNetworkLocked(android.net.NetworkIdentity)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkIdentity r1;
        int i0, $i1;
        android.net.NetworkPolicy r2;
        android.util.ArrayMap $r3, $r4;
        java.lang.Object $r5;
        android.net.NetworkTemplate $r6;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkIdentity;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i1 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        i0 = $i1 - 1;

     label1:
        if i0 < 0 goto label3;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i0);

        r2 = (android.net.NetworkPolicy) $r5;

        $r6 = r2.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $z0 = virtualinvoke $r6.<android.net.NetworkTemplate: boolean matches(android.net.NetworkIdentity)>(r1);

        if $z0 == 0 goto label2;

        return r2;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        return null;
    }

    public android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkState r1;
        long l0;
        android.net.NetworkQuotaInfo r2;
        java.lang.Throwable r3, $r5;
        android.content.Context $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkState;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_NETWORK_STATE", "NetworkPolicy");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfoUnchecked(android.net.NetworkState)>(r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r2;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private android.net.NetworkQuotaInfo getNetworkQuotaInfoUnchecked(android.net.NetworkState)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkState r1;
        android.net.NetworkIdentity r2;
        android.net.NetworkPolicy r3;
        java.lang.Object r4, $r7;
        java.lang.Throwable r5, $r10;
        long l0, l1, l2, l3, l4, $l6, $l8, $l9, $l10, l11;
        android.content.Context $r6;
        boolean $z0;
        android.net.NetworkTemplate $r8;
        byte $b5, $b7;
        android.net.NetworkQuotaInfo $r9;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkState;

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r2 = staticinvoke <android.net.NetworkIdentity: android.net.NetworkIdentity buildNetworkIdentity(android.content.Context,android.net.NetworkState)>($r6, r1);

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r4 = $r7;

        entermonitor $r7;

     label01:
        r3 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy findPolicyForNetworkLocked(android.net.NetworkIdentity)>(r2);

        exitmonitor r4;

     label02:
        goto label05;

     label03:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r4;

     label04:
        throw r5;

     label05:
        if r3 == null goto label06;

        $z0 = virtualinvoke r3.<android.net.NetworkPolicy: boolean hasCycle()>();

        if $z0 != 0 goto label07;

     label06:
        return null;

     label07:
        l11 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long currentTimeMillis()>();

        l0 = staticinvoke <android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)>(l11, r3);

        l1 = l11;

        $r8 = r3.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        l2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(android.net.NetworkTemplate,long,long)>($r8, l0, l1);

        $l6 = r3.<android.net.NetworkPolicy: long warningBytes>;

        $b5 = $l6 cmp -1L;

        if $b5 == 0 goto label08;

        $l10 = r3.<android.net.NetworkPolicy: long warningBytes>;

        goto label09;

     label08:
        $l10 = -1L;

     label09:
        l3 = $l10;

        $l8 = r3.<android.net.NetworkPolicy: long limitBytes>;

        $b7 = $l8 cmp -1L;

        if $b7 == 0 goto label10;

        $l9 = r3.<android.net.NetworkPolicy: long limitBytes>;

        goto label11;

     label10:
        $l9 = -1L;

     label11:
        l4 = $l9;

        $r9 = new android.net.NetworkQuotaInfo;

        specialinvoke $r9.<android.net.NetworkQuotaInfo: void <init>(long,long,long)>(l2, l3, l4);

        return $r9;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
    }

    public boolean isNetworkMetered(android.net.NetworkState)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkState r1;
        android.net.NetworkIdentity r2;
        android.net.NetworkPolicy r3;
        java.lang.Object r4, $r7;
        java.lang.Throwable r5, $r9;
        android.content.Context $r6;
        boolean $z0, $z1, $z2;
        android.net.NetworkInfo $r8;
        int i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkState;

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r2 = staticinvoke <android.net.NetworkIdentity: android.net.NetworkIdentity buildNetworkIdentity(android.content.Context,android.net.NetworkState)>($r6, r1);

        $z0 = virtualinvoke r2.<android.net.NetworkIdentity: boolean getRoaming()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r4 = $r7;

        entermonitor $r7;

     label2:
        r3 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy findPolicyForNetworkLocked(android.net.NetworkIdentity)>(r2);

        exitmonitor r4;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        r5 = $r9;

        exitmonitor r4;

     label5:
        throw r5;

     label6:
        if r3 == null goto label7;

        $z2 = r3.<android.net.NetworkPolicy: boolean metered>;

        return $z2;

     label7:
        $r8 = r1.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        i0 = virtualinvoke $r8.<android.net.NetworkInfo: int getType()>();

        $z1 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>(i0);

        if $z1 != 0 goto label8;

        if i0 != 6 goto label9;

     label8:
        return 1;

     label9:
        return 0;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3, r6;
        com.android.internal.util.IndentingPrintWriter r4, $r11;
        android.util.ArraySet r5, $r10, $r15;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22;
        java.lang.String r7, $r14, $r28, $r35;
        java.lang.Throwable r8, $r39;
        android.content.Context $r9;
        java.lang.Object $r12, $r25, $r37, $r41, r42;
        boolean $z0, $z1, $z2, $z3;
        android.util.ArrayMap $r13, $r32, $r34, $r40;
        android.util.SparseIntArray $r16, $r18, $r20, $r21, $r24, $r26, $r29, $r30, $r33;
        android.util.SparseBooleanArray $r17, $r19, $r27, $r31, r43;
        android.util.SparseArray $r22, $r23;
        android.net.NetworkPolicy $r36, $r38;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r9.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "NetworkPolicy");

        $r11 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r11.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r2, "  ");

        r4 = $r11;

        $r10 = new android.util.ArraySet;

        $i6 = lengthof r3;

        specialinvoke $r10.<android.util.ArraySet: void <init>(int)>($i6);

        r5 = $r10;

        r6 = r3;

        i0 = lengthof r6;

        i1 = 0;

     label01:
        if i1 >= i0 goto label02;

        r7 = r6[i1];

        virtualinvoke r5.<android.util.ArraySet: boolean add(java.lang.Object)>(r7);

        i1 = i1 + 1;

        goto label01;

     label02:
        $r12 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r42 = $r12;

        entermonitor $r12;

     label03:
        $z1 = virtualinvoke r5.<android.util.ArraySet: boolean contains(java.lang.Object)>("--unsnooze");

        if $z1 == 0 goto label07;

        $r34 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i12 = virtualinvoke $r34.<android.util.ArrayMap: int size()>();

        i13 = $i12 - 1;

     label04:
        if i13 < 0 goto label05;

        $r40 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r41 = virtualinvoke $r40.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i13);

        $r38 = (android.net.NetworkPolicy) $r41;

        virtualinvoke $r38.<android.net.NetworkPolicy: void clearSnooze()>();

        i13 = i13 + -1;

        goto label04;

     label05:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkEnabledLocked()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Cleared snooze timestamps");

        exitmonitor r42;

     label06:
        return;

     label07:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Restrict background: ");

        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z0);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Restrict power: ");

        $z2 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictPower>;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z2);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Current foreground state: ");

        $i7 = r0.<com.android.server.net.NetworkPolicyManagerService: int mCurForegroundState>;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i7);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Network policies:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        i14 = 0;

     label08:
        $r13 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i8 = virtualinvoke $r13.<android.util.ArrayMap: int size()>();

        if i14 >= $i8 goto label09;

        $r32 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r37 = virtualinvoke $r32.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i14);

        $r36 = (android.net.NetworkPolicy) $r37;

        $r35 = virtualinvoke $r36.<android.net.NetworkPolicy: java.lang.String toString()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r35);

        i14 = i14 + 1;

        goto label08;

     label09:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Metered ifaces: ");

        $r15 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces>;

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r15);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r14);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Policy for UIDs:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r16 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i15 = virtualinvoke $r16.<android.util.SparseIntArray: int size()>();

        i16 = 0;

     label10:
        if i16 >= i15 goto label11;

        $r30 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i17 = virtualinvoke $r30.<android.util.SparseIntArray: int keyAt(int)>(i16);

        $r33 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i2 = virtualinvoke $r33.<android.util.SparseIntArray: int valueAt(int)>(i16);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UID=");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i17);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" policy=");

        staticinvoke <android.net.NetworkPolicyManager: void dumpPolicy(java.io.PrintWriter,int)>(r4, i2);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        i16 = i16 + 1;

        goto label10;

     label11:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        $r17 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        i18 = virtualinvoke $r17.<android.util.SparseBooleanArray: int size()>();

        if i18 <= 0 goto label14;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Power save whitelist app ids:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        i19 = 0;

     label12:
        if i19 >= i18 goto label13;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UID=");

        $r27 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        $i11 = virtualinvoke $r27.<android.util.SparseBooleanArray: int keyAt(int)>(i19);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>($i11);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(": ");

        $r31 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        $z3 = virtualinvoke $r31.<android.util.SparseBooleanArray: boolean valueAt(int)>(i19);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(boolean)>($z3);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        i19 = i19 + 1;

        goto label12;

     label13:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

     label14:
        $r19 = new android.util.SparseBooleanArray;

        specialinvoke $r19.<android.util.SparseBooleanArray: void <init>()>();

        r43 = $r19;

        $r20 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        staticinvoke <com.android.server.net.NetworkPolicyManagerService: void collectKeys(android.util.SparseIntArray,android.util.SparseBooleanArray)>($r20, r43);

        $r18 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        staticinvoke <com.android.server.net.NetworkPolicyManagerService: void collectKeys(android.util.SparseIntArray,android.util.SparseBooleanArray)>($r18, r43);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Status for known UIDs:");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        i20 = virtualinvoke r43.<android.util.SparseBooleanArray: int size()>();

        i21 = 0;

     label15:
        if i21 >= i20 goto label22;

        i22 = virtualinvoke r43.<android.util.SparseBooleanArray: int keyAt(int)>(i21);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UID=");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i22);

        $r21 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        i3 = virtualinvoke $r21.<android.util.SparseIntArray: int get(int,int)>(i22, 13);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" state=");

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i3);

        $i9 = r0.<com.android.server.net.NetworkPolicyManagerService: int mCurForegroundState>;

        if i3 > $i9 goto label16;

        $r28 = " (fg)";

        goto label17;

     label16:
        $r28 = " (bg)";

     label17:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r28);

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" pids=");

        $r23 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mUidPidState>;

        i4 = virtualinvoke $r23.<android.util.SparseArray: int indexOfKey(int)>(i22);

        if i4 >= 0 goto label18;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UNKNOWN");

        goto label19;

     label18:
        $r22 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mUidPidState>;

        $r25 = virtualinvoke $r22.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        $r26 = (android.util.SparseIntArray) $r25;

        staticinvoke <com.android.server.net.NetworkPolicyManagerService: void dumpSparseIntArray(java.io.PrintWriter,android.util.SparseIntArray)>(r4, $r26);

     label19:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" rules=");

        $r24 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        i5 = virtualinvoke $r24.<android.util.SparseIntArray: int indexOfKey(int)>(i22);

        if i5 >= 0 goto label20;

        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UNKNOWN");

        goto label21;

     label20:
        $r29 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        $i10 = virtualinvoke $r29.<android.util.SparseIntArray: int valueAt(int)>(i5);

        staticinvoke <android.net.NetworkPolicyManager: void dumpRules(java.io.PrintWriter,int)>(r4, $i10);

     label21:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        i21 = i21 + 1;

        goto label15;

     label22:
        virtualinvoke r4.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        exitmonitor r42;

     label23:
        goto label26;

     label24:
        $r39 := @caughtexception;

        r8 = $r39;

        exitmonitor r42;

     label25:
        throw r8;

     label26:
        return;

        catch java.lang.Throwable from label03 to label06 with label24;
        catch java.lang.Throwable from label07 to label23 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
    }

    public boolean isUidForeground(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        android.content.Context $r3;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidForegroundLocked(int)>(i0);

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    boolean isUidForegroundLocked(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        android.util.SparseIntArray $r1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mScreenOn>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        $i1 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>(i0, 13);

        $i2 = r0.<com.android.server.net.NetworkPolicyManagerService: int mCurForegroundState>;

        if $i1 > $i2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    void computeUidStateLocked(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, i3, i4, $i5, $i6, i7;
        android.util.SparseIntArray r1, $r4, $r5;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        boolean $z0, $z1, z2, z3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mUidPidState>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.util.SparseIntArray) $r3;

        i1 = 13;

        if r1 == null goto label3;

        i2 = virtualinvoke r1.<android.util.SparseIntArray: int size()>();

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        i4 = virtualinvoke r1.<android.util.SparseIntArray: int valueAt(int)>(i3);

        if i4 >= i1 goto label2;

        i1 = i4;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        i7 = virtualinvoke $r4.<android.util.SparseIntArray: int get(int,int)>(i0, 13);

        if i7 == i1 goto label8;

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        virtualinvoke $r5.<android.util.SparseIntArray: void put(int,int)>(i0, i1);

        $i5 = r0.<com.android.server.net.NetworkPolicyManagerService: int mCurForegroundState>;

        if i7 > $i5 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        z2 = $z1;

        $i6 = r0.<com.android.server.net.NetworkPolicyManagerService: int mCurForegroundState>;

        if i1 > $i6 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        z3 = $z0;

        if z2 == z3 goto label8;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>(i0);

     label8:
        return;
    }

    private void updateScreenOn()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r3, $r7;
        android.os.IPowerManager $r5;
        boolean $z0;
        android.os.RemoteException $r6;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mRulesLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.IPowerManager mPowerManager>;

        $z0 = interfaceinvoke $r5.<android.os.IPowerManager: boolean isInteractive()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mScreenOn> = $z0;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForScreenLocked()>();

        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label7:
        throw r3;

     label8:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void updateRulesForScreenLocked()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, $i3, $i4;
        android.util.SparseIntArray $r1, $r2, $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        i0 = virtualinvoke $r1.<android.util.SparseIntArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        $i3 = virtualinvoke $r2.<android.util.SparseIntArray: int valueAt(int)>(i1);

        $i4 = r0.<com.android.server.net.NetworkPolicyManagerService: int mCurForegroundState>;

        if $i3 > $i4 goto label2;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        i2 = virtualinvoke $r3.<android.util.SparseIntArray: int keyAt(int)>(i1);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>(i2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    void updateRulesForGlobalChangeLocked(boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4;
        android.content.pm.PackageManager r1;
        android.os.UserManager r2;
        java.util.List r3, r4;
        java.util.Iterator r5, r7;
        android.content.pm.UserInfo r6;
        android.content.pm.ApplicationInfo r8;
        int i0, $i1, $i2;
        android.content.Context $r9, $r10;
        java.lang.Object $r11, $r12, $r13;
        byte $b3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        z0 := @parameter0: boolean;

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r9.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        r2 = (android.os.UserManager) $r11;

        $z1 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z1 != 0 goto label1;

        $z4 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictPower>;

        if $z4 == 0 goto label1;

        $b3 = 3;

        goto label2;

     label1:
        $b3 = 2;

     label2:
        r0.<com.android.server.net.NetworkPolicyManagerService: int mCurForegroundState> = $b3;

        r3 = virtualinvoke r2.<android.os.UserManager: java.util.List getUsers()>();

        r4 = virtualinvoke r1.<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>(8704);

        r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.content.pm.UserInfo) $r12;

        r7 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r13 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (android.content.pm.ApplicationInfo) $r13;

        $i1 = r6.<android.content.pm.UserInfo: int id>;

        $i2 = r8.<android.content.pm.ApplicationInfo: int uid>;

        i0 = staticinvoke <android.os.UserHandle: int getUid(int,int)>($i1, $i2);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>(i0);

        goto label4;

     label5:
        goto label3;

     label6:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>(1013);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForUidLocked(int)>(1019);

        if z0 == 0 goto label7;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()>();

     label7:
        return;
    }

    private static boolean isUidValidForRules(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 1013 goto label1;

        if i0 == 1019 goto label1;

        $z0 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    void updateRulesForUidLocked(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, $i4, $i5, $i6;
        boolean z0, z1, $z2, $z3, $z4, $z5, z6;
        byte b2, $b3;
        android.util.SparseIntArray $r2, $r3, $r7;
        android.os.Handler $r4;
        android.net.INetworkStatsService $r5;
        android.os.Message $r6;
        android.util.SparseBooleanArray $r8;
        android.os.RemoteException $r9;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $z2 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean isUidValidForRules(int)>(i0);

        if $z2 != 0 goto label01;

        return;

     label01:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i1 = virtualinvoke $r2.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        z0 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidForegroundLocked(int)>(i0);

        b2 = 0;

        if z0 != 0 goto label02;

        $i6 = i1 & 1;

        if $i6 == 0 goto label02;

        b2 = 1;

        goto label04;

     label02:
        $z3 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z3 == 0 goto label03;

        if z0 != 0 goto label04;

        b2 = 1;

        goto label04;

     label03:
        $z4 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictPower>;

        if $z4 == 0 goto label04;

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        z1 = virtualinvoke $r8.<android.util.SparseBooleanArray: boolean get(int)>($i4);

        if z1 != 0 goto label04;

        if z0 != 0 goto label04;

        $i5 = i1 & 2;

        if $i5 != 0 goto label04;

        b2 = 1;

     label04:
        if b2 != 0 goto label05;

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        virtualinvoke $r7.<android.util.SparseIntArray: void delete(int)>(i0);

        goto label06;

     label05:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        virtualinvoke $r3.<android.util.SparseIntArray: void put(int,int)>(i0, b2);

     label06:
        $b3 = b2 & 1;

        if $b3 == 0 goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        z6 = $z5;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidNetworkRules(int,boolean)>(i0, z6);

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r6 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(1, i0, b2);

        virtualinvoke $r6.<android.os.Message: void sendToTarget()>();

     label09:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkStatsService mNetworkStats>;

        interfaceinvoke $r5.<android.net.INetworkStatsService: void setUidForeground(int,boolean)>(i0, z0);

     label10:
        goto label12;

     label11:
        $r9 := @caughtexception;

     label12:
        return;

        catch android.os.RemoteException from label09 to label10 with label11;
    }

    private void setInterfaceQuota(java.lang.String, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String r1;
        long l0;
        java.lang.IllegalStateException r2, $r5;
        android.os.INetworkManagementService $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

     label1:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r3.<android.os.INetworkManagementService: void setInterfaceQuota(java.lang.String,long)>(r1, l0);

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem setting interface quota", r2);

        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private void removeInterfaceQuota(java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String r1;
        java.lang.IllegalStateException r2, $r4;
        android.os.INetworkManagementService $r3;
        android.os.RemoteException $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r3.<android.os.INetworkManagementService: void removeInterfaceQuota(java.lang.String)>(r1);

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem removing interface quota", r2);

        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private void setUidNetworkRules(int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean z0;
        java.lang.IllegalStateException r1, $r3;
        android.os.INetworkManagementService $r2;
        android.os.RemoteException $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r2.<android.os.INetworkManagementService: void setUidNetworkRules(int,boolean)>(i0, z0);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem setting uid rules", r1);

        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private void setPolicyDataEnable(int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.IConnectivityManager mConnManager>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void setPolicyDataEnable(int,boolean)>(i0, z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private long getTotalBytes(android.net.NetworkTemplate, long, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        long l0, l1, $l2;
        java.lang.RuntimeException r2, $r4;
        android.net.INetworkStatsService $r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        android.os.RemoteException $r9;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

     label1:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkStatsService mNetworkStats>;

        $l2 = interfaceinvoke $r3.<android.net.INetworkStatsService: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)>(r1, l0, l1);

     label2:
        return $l2;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem reading network stats: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r8);

        return 0L;

     label4:
        $r9 := @caughtexception;

        return 0L;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private boolean isBandwidthControlEnabled()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0;
        boolean z0, z1;
        java.lang.Throwable r1, $r4;
        android.os.INetworkManagementService $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        z0 = interfaceinvoke $r2.<android.os.INetworkManagementService: boolean isBandwidthControlEnabled()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label3:
        $r3 := @caughtexception;

        z1 = 0;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z1;

     label5:
        $r4 := @caughtexception;

        r1 = $r4;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void maybeRefreshTrustedTime()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.TrustedTime $r1, $r2;
        long $l0;
        byte $b1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.TrustedTime mTime>;

        $l0 = interfaceinvoke $r1.<android.util.TrustedTime: long getCacheAge()>();

        $b1 = $l0 cmp 86400000L;

        if $b1 <= 0 goto label1;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.TrustedTime mTime>;

        interfaceinvoke $r2.<android.util.TrustedTime: boolean forceRefresh()>();

     label1:
        return;
    }

    private long currentTimeMillis()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.TrustedTime $r1, $r2;
        boolean $z0;
        long $l0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.TrustedTime mTime>;

        $z0 = interfaceinvoke $r1.<android.util.TrustedTime: boolean hasCache()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.TrustedTime mTime>;

        $l0 = interfaceinvoke $r2.<android.util.TrustedTime: long currentTimeMillis()>();

        goto label2;

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label2:
        return $l0;
    }

    private static android.content.Intent buildAllowBackgroundDataIntent()
    {
        android.content.Intent $r0;

        $r0 = new android.content.Intent;

        specialinvoke $r0.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.net.action.ALLOW_BACKGROUND");

        return $r0;
    }

    private static android.content.Intent buildSnoozeWarningIntent(android.net.NetworkTemplate)
    {
        android.net.NetworkTemplate r0;
        android.content.Intent r1, $r2;

        r0 := @parameter0: android.net.NetworkTemplate;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.net.action.SNOOZE_WARNING");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.NETWORK_TEMPLATE", r0);

        return r1;
    }

    private static android.content.Intent buildNetworkOverLimitIntent(android.net.NetworkTemplate)
    {
        android.net.NetworkTemplate r0;
        android.content.Intent r1, $r2;
        android.content.ComponentName $r3;

        r0 := @parameter0: android.net.NetworkTemplate;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        r1 = $r2;

        $r3 = new android.content.ComponentName;

        specialinvoke $r3.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("com.android.systemui", "com.android.systemui.net.NetworkOverLimitActivity");

        virtualinvoke r1.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r3);

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.NETWORK_TEMPLATE", r0);

        return r1;
    }

    private static android.content.Intent buildViewDataUsageIntent(android.net.NetworkTemplate)
    {
        android.net.NetworkTemplate r0;
        android.content.Intent r1, $r2;
        android.content.ComponentName $r3;

        r0 := @parameter0: android.net.NetworkTemplate;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        r1 = $r2;

        $r3 = new android.content.ComponentName;

        specialinvoke $r3.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("com.android.settings", "com.android.settings.Settings$DataUsageSummaryActivity");

        virtualinvoke r1.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r3);

        virtualinvoke r1.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.NETWORK_TEMPLATE", r0);

        return r1;
    }

    public void addIdleHandler(android.os.MessageQueue$IdleHandler)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.os.MessageQueue$IdleHandler r1;
        android.os.Handler $r2;
        android.os.Looper $r3;
        android.os.MessageQueue $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.os.MessageQueue$IdleHandler;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Looper getLooper()>();

        $r4 = virtualinvoke $r3.<android.os.Looper: android.os.MessageQueue getQueue()>();

        virtualinvoke $r4.<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>(r1);

        return;
    }

    private static void collectKeys(android.util.SparseIntArray, android.util.SparseBooleanArray)
    {
        android.util.SparseIntArray r0;
        android.util.SparseBooleanArray r1;
        int i0, i1, $i2;

        r0 := @parameter0: android.util.SparseIntArray;

        r1 := @parameter1: android.util.SparseBooleanArray;

        i0 = virtualinvoke r0.<android.util.SparseIntArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $i2 = virtualinvoke r0.<android.util.SparseIntArray: int keyAt(int)>(i1);

        virtualinvoke r1.<android.util.SparseBooleanArray: void put(int,boolean)>($i2, 1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static void dumpSparseIntArray(java.io.PrintWriter, android.util.SparseIntArray)
    {
        java.io.PrintWriter r0;
        android.util.SparseIntArray r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: android.util.SparseIntArray;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("[");

        i0 = virtualinvoke r1.<android.util.SparseIntArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i2 = virtualinvoke r1.<android.util.SparseIntArray: int keyAt(int)>(i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $i3 = virtualinvoke r1.<android.util.SparseIntArray: int valueAt(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        $i4 = i0 - 1;

        if i1 >= $i4 goto label2;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(",");

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("]");

        return;
    }

    static android.content.Context access$000(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        return $r1;
    }

    static void access$100(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void ensureActiveMobilePolicyLocked()>();

        return;
    }

    static android.os.RemoteCallbackList access$200(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.os.RemoteCallbackList $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.RemoteCallbackList mListeners>;

        return $r1;
    }

    static android.util.ArraySet access$300(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.ArraySet $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces>;

        return $r1;
    }

    static android.net.INetworkStatsService access$400(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.INetworkStatsService $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkStatsService mNetworkStats>;

        return $r1;
    }

    static void access$500(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateScreenOn()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.net.NetworkPolicyManagerService: int MSG_SCREEN_ON_CHANGED> = 8;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_ADVISE_PERSIST_THRESHOLD> = 7;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_RESTRICT_BACKGROUND_CHANGED> = 6;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_LIMIT_REACHED> = 5;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_METERED_IFACES_CHANGED> = 2;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_RULES_CHANGED> = 1;

        <com.android.server.net.NetworkPolicyManagerService: long TIME_CACHE_MAX_AGE> = 86400000L;

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ACTION_SNOOZE_WARNING> = "com.android.server.net.action.SNOOZE_WARNING";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ACTION_ALLOW_BACKGROUND> = "com.android.server.net.action.ALLOW_BACKGROUND";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_ALLOW_BACKGROUND> = "NetworkPolicy:allowBackground";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_POLICY> = "policy";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_APP_ID> = "appId";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_UID> = "uid";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_INFERRED> = "inferred";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_METERED> = "metered";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_LAST_LIMIT_SNOOZE> = "lastLimitSnooze";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_LAST_WARNING_SNOOZE> = "lastWarningSnooze";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_LAST_SNOOZE> = "lastSnooze";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_LIMIT_BYTES> = "limitBytes";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_WARNING_BYTES> = "warningBytes";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_CYCLE_TIMEZONE> = "cycleTimezone";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_CYCLE_DAY> = "cycleDay";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_NETWORK_ID> = "networkId";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_SUBSCRIBER_ID> = "subscriberId";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_NETWORK_TEMPLATE> = "networkTemplate";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_RESTRICT_BACKGROUND> = "restrictBackground";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_VERSION> = "version";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_APP_POLICY> = "app-policy";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_UID_POLICY> = "uid-policy";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_NETWORK_POLICY> = "network-policy";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_POLICY_LIST> = "policy-list";

        <com.android.server.net.NetworkPolicyManagerService: int TYPE_LIMIT_SNOOZED> = 3;

        <com.android.server.net.NetworkPolicyManagerService: int TYPE_LIMIT> = 2;

        <com.android.server.net.NetworkPolicyManagerService: int TYPE_WARNING> = 1;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_LATEST> = 10;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_SWITCH_UID> = 10;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_NETWORK_ID> = 9;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_SWITCH_APP_ID> = 8;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_INFERRED> = 7;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_TIMEZONE> = 6;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_SPLIT_SNOOZE> = 5;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_METERED> = 4;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_RESTRICT_BACKGROUND> = 3;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_SNOOZE> = 2;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_INIT> = 1;

        <com.android.server.net.NetworkPolicyManagerService: boolean LOGV> = 0;

        <com.android.server.net.NetworkPolicyManagerService: boolean LOGD> = 0;

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG> = "NetworkPolicy";

        return;
    }
}
