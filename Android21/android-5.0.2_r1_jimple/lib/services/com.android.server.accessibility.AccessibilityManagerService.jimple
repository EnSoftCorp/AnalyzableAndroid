public class com.android.server.accessibility.AccessibilityManagerService extends android.view.accessibility.IAccessibilityManager$Stub
{
    private static final boolean DEBUG;
    private static final java.lang.String LOG_TAG;
    private static final int WAIT_FOR_USER_STATE_FULLY_INITIALIZED_MILLIS;
    private static final int WAIT_WINDOWS_TIMEOUT_MILLIS;
    private static final java.lang.String FUNCTION_REGISTER_UI_TEST_AUTOMATION_SERVICE;
    private static final java.lang.String TEMPORARY_ENABLE_ACCESSIBILITY_UNTIL_KEYGUARD_REMOVED;
    private static final java.lang.String GET_WINDOW_TOKEN;
    private static final android.content.ComponentName sFakeAccessibilityServiceComponentName;
    private static final java.lang.String FUNCTION_DUMP;
    private static final char COMPONENT_NAME_SEPARATOR;
    private static final int OWN_PROCESS_ID;
    private static final int MAX_POOL_SIZE;
    private static final int WINDOW_ID_UNKNOWN;
    private static int sIdCounter;
    private static int sNextWindowId;
    private final android.content.Context mContext;
    private final java.lang.Object mLock;
    private final android.util.Pools$Pool mPendingEventPool;
    private final android.text.TextUtils$SimpleStringSplitter mStringColonSplitter;
    private final java.util.List mEnabledServicesForFeedbackTempList;
    private final android.graphics.Region mTempRegion;
    private final android.graphics.Rect mTempRect;
    private final android.graphics.Point mTempPoint;
    private final android.content.pm.PackageManager mPackageManager;
    private final android.view.WindowManagerInternal mWindowManagerService;
    private final com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy;
    private final com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler;
    private com.android.server.accessibility.AccessibilityManagerService$InteractionBridge mInteractionBridge;
    private android.app.AlertDialog mEnableTouchExplorationDialog;
    private com.android.server.accessibility.AccessibilityInputFilter mInputFilter;
    private boolean mHasInputFilter;
    private final java.util.Set mTempComponentNameSet;
    private final java.util.List mTempAccessibilityServiceInfoList;
    private final android.os.RemoteCallbackList mGlobalClients;
    private final android.util.SparseArray mGlobalInteractionConnections;
    private final android.util.SparseArray mGlobalWindowTokens;
    private final android.util.SparseArray mUserStates;
    private final android.os.UserManager mUserManager;
    private final com.android.internal.widget.LockPatternUtils mLockPatternUtils;
    private int mCurrentUserId;
    private boolean mInitialized;
    private com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback mWindowsForAccessibilityCallback;

    private com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int $i0;
        com.android.server.accessibility.AccessibilityManagerService$UserState $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        $r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getUserStateLocked(int)>($i0);

        return $r1;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.content.Context r1, $r15, $r22;
        java.lang.Object $r2, $r16, $r18;
        android.util.Pools$SimplePool $r3;
        android.text.TextUtils$SimpleStringSplitter $r4;
        java.util.ArrayList $r5, $r10;
        android.graphics.Region $r6;
        android.graphics.Rect $r7;
        android.graphics.Point $r8;
        java.util.HashSet $r9;
        android.os.RemoteCallbackList $r11;
        android.util.SparseArray $r12, $r13, $r14;
        android.content.pm.PackageManager $r17;
        android.view.WindowManagerInternal $r19;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r20;
        android.os.UserManager $r21;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r23, $r26;
        com.android.internal.widget.LockPatternUtils $r24;
        android.os.Looper $r25;
        com.android.server.accessibility.AccessibilityManagerService$AccessibilityContentObserver $r27;
        android.content.ContentResolver $r28;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.view.accessibility.IAccessibilityManager$Stub: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock> = $r2;

        $r3 = new android.util.Pools$SimplePool;

        specialinvoke $r3.<android.util.Pools$SimplePool: void <init>(int)>(10);

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.Pools$Pool mPendingEventPool> = $r3;

        $r4 = new android.text.TextUtils$SimpleStringSplitter;

        specialinvoke $r4.<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>(58);

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.text.TextUtils$SimpleStringSplitter mStringColonSplitter> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mEnabledServicesForFeedbackTempList> = $r5;

        $r6 = new android.graphics.Region;

        specialinvoke $r6.<android.graphics.Region: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Region mTempRegion> = $r6;

        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Rect mTempRect> = $r7;

        $r8 = new android.graphics.Point;

        specialinvoke $r8.<android.graphics.Point: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Point mTempPoint> = $r8;

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet> = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList> = $r10;

        $r11 = new android.os.RemoteCallbackList;

        specialinvoke $r11.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.RemoteCallbackList mGlobalClients> = $r11;

        $r12 = new android.util.SparseArray;

        specialinvoke $r12.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mGlobalInteractionConnections> = $r12;

        $r13 = new android.util.SparseArray;

        specialinvoke $r13.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mGlobalWindowTokens> = $r13;

        $r14 = new android.util.SparseArray;

        specialinvoke $r14.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates> = $r14;

        r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId> = 0;

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext> = r1;

        $r15 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r17 = virtualinvoke $r15.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.pm.PackageManager mPackageManager> = $r17;

        $r16 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "android/view/WindowManagerInternal");

        $r19 = (android.view.WindowManagerInternal) $r16;

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.view.WindowManagerInternal mWindowManagerService> = $r19;

        $r18 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r21 = (android.os.UserManager) $r18;

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.UserManager mUserManager> = $r21;

        $r20 = new com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        specialinvoke $r20.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void <init>(com.android.server.accessibility.AccessibilityManagerService)>(r0);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy> = $r20;

        $r23 = new com.android.server.accessibility.AccessibilityManagerService$MainHandler;

        $r22 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r25 = virtualinvoke $r22.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r23.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.os.Looper)>(r0, $r25);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler> = $r23;

        $r24 = new com.android.internal.widget.LockPatternUtils;

        specialinvoke $r24.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>(r1);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.internal.widget.LockPatternUtils mLockPatternUtils> = $r24;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void registerBroadcastReceivers()>();

        $r27 = new com.android.server.accessibility.AccessibilityManagerService$AccessibilityContentObserver;

        $r26 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        specialinvoke $r27.<com.android.server.accessibility.AccessibilityManagerService$AccessibilityContentObserver: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.os.Handler)>(r0, $r26);

        $r28 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r27.<com.android.server.accessibility.AccessibilityManagerService$AccessibilityContentObserver: void register(android.content.ContentResolver)>($r28);

        return;
    }

    private com.android.server.accessibility.AccessibilityManagerService$UserState getUserStateLocked(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1, $r4;
        android.util.SparseArray $r2, $r5;
        java.lang.Object $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.accessibility.AccessibilityManagerService$UserState) $r3;

        if r1 != null goto label1;

        $r4 = new com.android.server.accessibility.AccessibilityManagerService$UserState;

        specialinvoke $r4.<com.android.server.accessibility.AccessibilityManagerService$UserState: void <init>(com.android.server.accessibility.AccessibilityManagerService,int)>(r0, i0);

        r1 = $r4;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1);

     label1:
        return r1;
    }

    private void registerBroadcastReceivers()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$1 r1, $r3;
        android.content.IntentFilter r2, $r6;
        android.os.UserHandle $r4, $r9;
        android.content.Context $r5, $r8;
        com.android.server.accessibility.AccessibilityManagerService$2 $r7;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r3 = new com.android.server.accessibility.AccessibilityManagerService$1;

        specialinvoke $r3.<com.android.server.accessibility.AccessibilityManagerService$1: void <init>(com.android.server.accessibility.AccessibilityManagerService)>(r0);

        r1 = $r3;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r4 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke r1.<com.android.internal.content.PackageMonitor: void register(android.content.Context,android.os.Looper,android.os.UserHandle,boolean)>($r5, null, $r4, 1);

        $r6 = new android.content.IntentFilter;

        specialinvoke $r6.<android.content.IntentFilter: void <init>()>();

        r2 = $r6;

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_SWITCHED");

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_PRESENT");

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r7 = new com.android.server.accessibility.AccessibilityManagerService$2;

        specialinvoke $r7.<com.android.server.accessibility.AccessibilityManagerService$2: void <init>(com.android.server.accessibility.AccessibilityManagerService)>(r0);

        $r9 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r8.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r7, $r9, r2, null, null);

        return;
    }

    public int addClient(android.view.accessibility.IAccessibilityManagerClient, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.accessibility.IAccessibilityManagerClient r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object r2, $r5;
        com.android.server.accessibility.AccessibilityManagerService$UserState r3;
        java.lang.Throwable r4, $r10;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r6, $r7;
        boolean $z0;
        android.os.RemoteCallbackList $r8, $r9;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.accessibility.IAccessibilityManagerClient;

        i0 := @parameter1: int;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        i1 = virtualinvoke $r6.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>(i0);

        r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getUserStateLocked(int)>(i1);

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        $z0 = virtualinvoke $r7.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean isCallerInteractingAcrossUsers(int)>(i0);

        if $z0 == 0 goto label3;

        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.RemoteCallbackList mGlobalClients>;

        virtualinvoke $r9.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        $i4 = virtualinvoke r3.<com.android.server.accessibility.AccessibilityManagerService$UserState: int getClientState()>();

        exitmonitor r2;

     label2:
        return $i4;

     label3:
        $r8 = r3.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.os.RemoteCallbackList mClients>;

        virtualinvoke $r8.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        $i2 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        if i1 != $i2 goto label4;

        $i3 = virtualinvoke r3.<com.android.server.accessibility.AccessibilityManagerService$UserState: int getClientState()>();

        goto label5;

     label4:
        $i3 = 0;

     label5:
        exitmonitor r2;

     label6:
        return $i3;

     label7:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label8:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.accessibility.AccessibilityEvent r1, $r10;
        int i0, i1, $i2, $i3, $i4, $i6, $i7;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r14;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r5, $r6, $r11, $r13;
        boolean $z0, $z1, $z2;
        com.android.server.accessibility.AccessibilityManagerService$UserState $r7;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r8;
        com.android.server.accessibility.AccessibilityInputFilter $r9;
        android.os.Message $r12;
        long $l5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        i0 := @parameter1: int;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        i1 = virtualinvoke $r5.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>(i0);

        $i2 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        if i1 == $i2 goto label03;

        exitmonitor r2;

     label02:
        return 1;

     label03:
        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        $z0 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean access$1000(com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy,android.view.accessibility.AccessibilityEvent)>($r6, r1);

        if $z0 == 0 goto label04;

        $r11 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        $i6 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getWindowId()>();

        $l5 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: long getSourceNodeId()>();

        $i7 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        virtualinvoke $r11.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void updateActiveAndAccessibilityFocusedWindowLocked(int,long,int)>($i6, $l5, $i7);

        $r13 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        virtualinvoke $r13.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void updateEventSourceLocked(android.view.accessibility.AccessibilityEvent)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void notifyAccessibilityServicesDelayedLocked(android.view.accessibility.AccessibilityEvent,boolean)>(r1, 0);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void notifyAccessibilityServicesDelayedLocked(android.view.accessibility.AccessibilityEvent,boolean)>(r1, 1);

     label04:
        $z1 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter>;

        if $z1 == 0 goto label05;

        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        if $r9 == null goto label05;

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r10 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)>(r1);

        $r12 = virtualinvoke $r8.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r10);

        virtualinvoke $r12.<android.os.Message: void sendToTarget()>();

     label05:
        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void recycle()>();

        $r7 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getUserStateLocked(int)>(i1);

        $r7.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mHandledFeedbackTypes> = 0;

        exitmonitor r2;

     label06:
        goto label09;

     label07:
        $r14 := @caughtexception;

        r3 = $r14;

        exitmonitor r2;

     label08:
        throw r3;

     label09:
        $i3 = <com.android.server.accessibility.AccessibilityManagerService: int OWN_PROCESS_ID>;

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        if $i3 == $i4 goto label10;

        $z2 = 1;

        goto label11;

     label10:
        $z2 = 0;

     label11:
        return $z2;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public java.util.List getInstalledAccessibilityServiceList(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1;
        java.lang.Object r1, $r5;
        com.android.server.accessibility.AccessibilityManagerService$UserState r2;
        java.util.ArrayList r3, $r9;
        java.lang.Throwable r4, $r13;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r6;
        com.android.server.accessibility.AccessibilityManagerService$Service $r7, $r11;
        java.util.List $r8, $r10;
        android.accessibilityservice.AccessibilityServiceInfo $r12;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        i1 = virtualinvoke $r6.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>(i0);

        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getUserStateLocked(int)>(i1);

        $r7 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: com.android.server.accessibility.AccessibilityManagerService$Service access$300(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r2);

        if $r7 == null goto label3;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r3 = $r9;

        $r10 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.List mInstalledServices>;

        interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        $r11 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: com.android.server.accessibility.AccessibilityManagerService$Service access$300(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r2);

        $r12 = $r11.<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

        interfaceinvoke r3.<java.util.List: boolean remove(java.lang.Object)>($r12);

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r8 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.List mInstalledServices>;

        exitmonitor r1;

     label4:
        return $r8;

     label5:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r1;

     label6:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.List getEnabledAccessibilityServiceList(int, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        java.lang.Object r1, $r6, $r9;
        com.android.server.accessibility.AccessibilityManagerService$UserState r2;
        java.util.concurrent.CopyOnWriteArrayList r3;
        com.android.server.accessibility.AccessibilityManagerService$Service r4, $r8;
        java.lang.Throwable r5, $r12;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r7;
        android.accessibilityservice.AccessibilityServiceInfo $r10;
        java.util.List $r11, r13;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r1 = $r6;

        entermonitor $r6;

     label01:
        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        i2 = virtualinvoke $r7.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>(i1);

        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getUserStateLocked(int)>(i2);

        $r8 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: com.android.server.accessibility.AccessibilityManagerService$Service access$300(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r2);

        if $r8 == null goto label03;

        $r11 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r1;

     label02:
        return $r11;

     label03:
        r13 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mEnabledServicesForFeedbackTempList>;

        interfaceinvoke r13.<java.util.List: void clear()>();

        r3 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

     label04:
        if i0 == 0 goto label08;

        $i7 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i0);

        i3 = 1 << $i7;

        $i6 = i3 ^ -1;

        i0 = i0 & $i6;

        i4 = interfaceinvoke r3.<java.util.List: int size()>();

        i5 = 0;

     label05:
        if i5 >= i4 goto label07;

        $r9 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i5);

        r4 = (com.android.server.accessibility.AccessibilityManagerService$Service) $r9;

        $i9 = r4.<com.android.server.accessibility.AccessibilityManagerService$Service: int mFeedbackType>;

        $i8 = $i9 & i3;

        if $i8 == 0 goto label06;

        $r10 = r4.<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

        interfaceinvoke r13.<java.util.List: boolean add(java.lang.Object)>($r10);

     label06:
        i5 = i5 + 1;

        goto label05;

     label07:
        goto label04;

     label08:
        exitmonitor r1;

     label09:
        goto label12;

     label10:
        $r12 := @caughtexception;

        r5 = $r12;

        exitmonitor r1;

     label11:
        throw r5;

     label12:
        return r13;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void interrupt(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1, $i2, i4, i5;
        java.util.concurrent.CopyOnWriteArrayList r1;
        java.lang.Object r2, $r5, $r8;
        java.lang.Throwable r3, $r10;
        android.os.RemoteException r4, $r11;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r6;
        com.android.server.accessibility.AccessibilityManagerService$UserState $r7;
        android.accessibilityservice.IAccessibilityServiceClient $r9;
        java.lang.StringBuilder $r12, $r14, $r16;
        android.os.IBinder $r13;
        java.lang.String $r15;
        com.android.server.accessibility.AccessibilityManagerService$Service r17;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        i1 = virtualinvoke $r6.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>(i0);

        $i2 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        if i1 == $i2 goto label03;

        exitmonitor r2;

     label02:
        return;

     label03:
        $r7 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getUserStateLocked(int)>(i1);

        r1 = $r7.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        exitmonitor r2;

     label04:
        goto label07;

     label05:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r2;

     label06:
        throw r3;

     label07:
        i4 = 0;

        i5 = virtualinvoke r1.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

     label08:
        if i4 >= i5 goto label13;

        $r8 = virtualinvoke r1.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(i4);

        r17 = (com.android.server.accessibility.AccessibilityManagerService$Service) $r8;

     label09:
        $r9 = r17.<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.IAccessibilityServiceClient mServiceInterface>;

        interfaceinvoke $r9.<android.accessibilityservice.IAccessibilityServiceClient: void onInterrupt()>();

     label10:
        goto label12;

     label11:
        $r11 := @caughtexception;

        r4 = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error during sending interrupt request to ");

        $r13 = r17.<com.android.server.accessibility.AccessibilityManagerService$Service: android.os.IBinder mService>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManagerService", $r15, r4);

     label12:
        i4 = i4 + 1;

        goto label08;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch android.os.RemoteException from label09 to label10 with label11;
    }

    public int addAccessibilityInteractionConnection(android.view.IWindow, android.view.accessibility.IAccessibilityInteractionConnection, int) throws android.os.RemoteException
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.IWindow r1;
        android.view.accessibility.IAccessibilityInteractionConnection r2;
        int i0, i1, i2, $i3, $i4;
        java.lang.Object r3, $r7;
        com.android.server.accessibility.AccessibilityManagerService$AccessibilityConnectionWrapper r4, $r10, $r14, r19;
        com.android.server.accessibility.AccessibilityManagerService$UserState r5;
        java.lang.Throwable r6, $r17;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r8, $r9;
        boolean $z0;
        android.util.SparseArray $r11, $r13, $r15, $r16;
        android.os.IBinder $r12, $r18;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.view.accessibility.IAccessibilityInteractionConnection;

        i0 := @parameter2: int;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r3 = $r7;

        entermonitor $r7;

     label1:
        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        i1 = virtualinvoke $r8.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>(i0);

        $i3 = <com.android.server.accessibility.AccessibilityManagerService: int sNextWindowId>;

        $i4 = $i3 + 1;

        <com.android.server.accessibility.AccessibilityManagerService: int sNextWindowId> = $i4;

        i2 = $i3;

        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        $z0 = virtualinvoke $r9.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean isCallerInteractingAcrossUsers(int)>(i0);

        if $z0 == 0 goto label2;

        $r14 = new com.android.server.accessibility.AccessibilityManagerService$AccessibilityConnectionWrapper;

        specialinvoke $r14.<com.android.server.accessibility.AccessibilityManagerService$AccessibilityConnectionWrapper: void <init>(com.android.server.accessibility.AccessibilityManagerService,int,android.view.accessibility.IAccessibilityInteractionConnection,int)>(r0, i2, r2, -1);

        r4 = $r14;

        virtualinvoke r4.<com.android.server.accessibility.AccessibilityManagerService$AccessibilityConnectionWrapper: void linkToDeath()>();

        $r16 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mGlobalInteractionConnections>;

        virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r4);

        $r15 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mGlobalWindowTokens>;

        $r18 = interfaceinvoke r1.<android.view.IWindow: android.os.IBinder asBinder()>();

        virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, $r18);

        goto label3;

     label2:
        $r10 = new com.android.server.accessibility.AccessibilityManagerService$AccessibilityConnectionWrapper;

        specialinvoke $r10.<com.android.server.accessibility.AccessibilityManagerService$AccessibilityConnectionWrapper: void <init>(com.android.server.accessibility.AccessibilityManagerService,int,android.view.accessibility.IAccessibilityInteractionConnection,int)>(r0, i2, r2, i1);

        r19 = $r10;

        virtualinvoke r19.<com.android.server.accessibility.AccessibilityManagerService$AccessibilityConnectionWrapper: void linkToDeath()>();

        r5 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getUserStateLocked(int)>(i1);

        $r11 = r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.util.SparseArray mInteractionConnections>;

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r19);

        $r13 = r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.util.SparseArray mWindowTokens>;

        $r12 = interfaceinvoke r1.<android.view.IWindow: android.os.IBinder asBinder()>();

        virtualinvoke $r13.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, $r12);

     label3:
        exitmonitor r3;

     label4:
        return i2;

     label5:
        $r17 := @caughtexception;

        r6 = $r17;

        exitmonitor r3;

     label6:
        throw r6;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void removeAccessibilityInteractionConnection(android.view.IWindow)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.IWindow r1;
        java.lang.Object r2, $r6, $r13;
        android.os.IBinder r3;
        int i0, i1, i2, i3, $i4;
        com.android.server.accessibility.AccessibilityManagerService$UserState r4;
        java.lang.Throwable r5, $r15;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r7;
        android.util.SparseArray $r8, $r9, $r10, $r11, $r12, $r14;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.IWindow;

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r2 = $r6;

        entermonitor $r6;

     label01:
        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        $i4 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        virtualinvoke $r7.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>($i4);

        r3 = interfaceinvoke r1.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mGlobalWindowTokens>;

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mGlobalInteractionConnections>;

        i0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: int removeAccessibilityInteractionConnectionInternalLocked(android.os.IBinder,android.util.SparseArray,android.util.SparseArray)>(r3, $r9, $r8);

        if i0 < 0 goto label03;

        exitmonitor r2;

     label02:
        return;

     label03:
        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates>;

        i1 = virtualinvoke $r10.<android.util.SparseArray: int size()>();

        i2 = 0;

     label04:
        if i2 >= i1 goto label07;

        $r11 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates>;

        $r13 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r4 = (com.android.server.accessibility.AccessibilityManagerService$UserState) $r13;

        $r14 = r4.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.util.SparseArray mWindowTokens>;

        $r12 = r4.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.util.SparseArray mInteractionConnections>;

        i3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: int removeAccessibilityInteractionConnectionInternalLocked(android.os.IBinder,android.util.SparseArray,android.util.SparseArray)>(r3, $r14, $r12);

        if i3 < 0 goto label06;

        exitmonitor r2;

     label05:
        return;

     label06:
        i2 = i2 + 1;

        goto label04;

     label07:
        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r15 := @caughtexception;

        r5 = $r15;

        exitmonitor r2;

     label10:
        throw r5;

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label05 with label09;
        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private int removeAccessibilityInteractionConnectionInternalLocked(android.os.IBinder, android.util.SparseArray, android.util.SparseArray)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.os.IBinder r1;
        android.util.SparseArray r2, r3;
        int i0, i1, i2;
        com.android.server.accessibility.AccessibilityManagerService$AccessibilityConnectionWrapper r4;
        java.lang.Object $r5, $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.util.SparseArray;

        r3 := @parameter2: android.util.SparseArray;

        i0 = virtualinvoke r2.<android.util.SparseArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r5 = virtualinvoke r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        if $r5 != r1 goto label2;

        i2 = virtualinvoke r2.<android.util.SparseArray: int keyAt(int)>(i1);

        virtualinvoke r2.<android.util.SparseArray: void removeAt(int)>(i1);

        $r6 = virtualinvoke r3.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        r4 = (com.android.server.accessibility.AccessibilityManagerService$AccessibilityConnectionWrapper) $r6;

        virtualinvoke r4.<com.android.server.accessibility.AccessibilityManagerService$AccessibilityConnectionWrapper: void unlinkToDeath()>();

        virtualinvoke r3.<android.util.SparseArray: void remove(int)>(i2);

        return i2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public void registerUiTestAutomationService(android.os.IBinder, android.accessibilityservice.IAccessibilityServiceClient, android.accessibilityservice.AccessibilityServiceInfo)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.os.IBinder r1;
        android.accessibilityservice.IAccessibilityServiceClient r2;
        android.accessibilityservice.AccessibilityServiceInfo r3;
        java.lang.Object r4, $r10;
        com.android.server.accessibility.AccessibilityManagerService$UserState r5;
        android.os.RemoteException r6, $r27;
        java.lang.Throwable r7, $r28;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r8;
        android.content.ComponentName $r9, $r16, $r20;
        com.android.server.accessibility.AccessibilityManagerService$Service $r11;
        android.os.IBinder$DeathRecipient $r12;
        java.util.List $r15;
        java.util.Set $r17, $r18, $r19;
        java.lang.StringBuilder $r21, $r23, $r24, $r26;
        java.lang.IllegalStateException $r22;
        java.lang.String $r25;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.accessibilityservice.IAccessibilityServiceClient;

        r3 := @parameter2: android.accessibilityservice.AccessibilityServiceInfo;

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        staticinvoke <com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void access$1100(com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy,java.lang.String,java.lang.String)>($r8, "android.permission.RETRIEVE_WINDOW_CONTENT", "registerUiTestAutomationService");

        $r9 = <com.android.server.accessibility.AccessibilityManagerService: android.content.ComponentName sFakeAccessibilityServiceComponentName>;

        virtualinvoke r3.<android.accessibilityservice.AccessibilityServiceInfo: void setComponentName(android.content.ComponentName)>($r9);

        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r4 = $r10;

        entermonitor $r10;

     label01:
        r5 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        $r11 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: com.android.server.accessibility.AccessibilityManagerService$Service access$300(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r5);

        if $r11 == null goto label02;

        $r22 = new java.lang.IllegalStateException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UiAutomationService ");

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("already registered!");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r22;

     label02:
        $r12 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: android.os.IBinder$DeathRecipient access$1200(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r5);

        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r12, 0);

     label03:
        goto label06;

     label04:
        $r27 := @caughtexception;

        r6 = $r27;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManagerService", "Couldn\'t register for the death of a UiTestAutomationService!", r6);

        exitmonitor r4;

     label05:
        return;

     label06:
        staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: android.os.IBinder access$1302(com.android.server.accessibility.AccessibilityManagerService$UserState,android.os.IBinder)>(r5, r1);

        staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: android.accessibilityservice.IAccessibilityServiceClient access$1402(com.android.server.accessibility.AccessibilityManagerService$UserState,android.accessibilityservice.IAccessibilityServiceClient)>(r5, r2);

        r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsAccessibilityEnabled> = 1;

        r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsTouchExplorationEnabled> = 0;

        r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsEnhancedWebAccessibilityEnabled> = 0;

        r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsDisplayMagnificationEnabled> = 0;

        $r15 = r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.List mInstalledServices>;

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>(r3);

        $r17 = r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mEnabledServices>;

        interfaceinvoke $r17.<java.util.Set: void clear()>();

        $r18 = r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mEnabledServices>;

        $r16 = <com.android.server.accessibility.AccessibilityManagerService: android.content.ComponentName sFakeAccessibilityServiceComponentName>;

        interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>($r16);

        $r19 = r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mTouchExplorationGrantedServices>;

        $r20 = <com.android.server.accessibility.AccessibilityManagerService: android.content.ComponentName sFakeAccessibilityServiceComponentName>;

        interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>($r20);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r5);

        exitmonitor r4;

     label07:
        goto label10;

     label08:
        $r28 := @caughtexception;

        r7 = $r28;

        exitmonitor r4;

     label09:
        throw r7;

     label10:
        return;

        catch android.os.RemoteException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.accessibilityservice.IAccessibilityServiceClient r1, $r14, $r15;
        java.lang.Object r2, $r5;
        com.android.server.accessibility.AccessibilityManagerService$UserState r3;
        java.lang.Throwable r4, $r20;
        com.android.server.accessibility.AccessibilityManagerService$Service $r6, $r13, $r16, $r19;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.lang.String $r12;
        android.os.IBinder $r17, $r18;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.accessibilityservice.IAccessibilityServiceClient;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        $r6 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: com.android.server.accessibility.AccessibilityManagerService$Service access$300(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r3);

        if $r6 == null goto label2;

        if r1 == null goto label2;

        $r13 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: com.android.server.accessibility.AccessibilityManagerService$Service access$300(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r3);

        $r14 = $r13.<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.IAccessibilityServiceClient mServiceInterface>;

        if $r14 == null goto label2;

        $r16 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: com.android.server.accessibility.AccessibilityManagerService$Service access$300(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r3);

        $r15 = $r16.<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.IAccessibilityServiceClient mServiceInterface>;

        $r18 = interfaceinvoke $r15.<android.accessibilityservice.IAccessibilityServiceClient: android.os.IBinder asBinder()>();

        $r17 = interfaceinvoke r1.<android.accessibilityservice.IAccessibilityServiceClient: android.os.IBinder asBinder()>();

        if $r18 != $r17 goto label2;

        $r19 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: com.android.server.accessibility.AccessibilityManagerService$Service access$300(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r3);

        virtualinvoke $r19.<com.android.server.accessibility.AccessibilityManagerService$Service: void binderDied()>();

        goto label3;

     label2:
        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UiAutomationService ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not registered!");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r20 := @caughtexception;

        r4 = $r20;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName, boolean)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.content.ComponentName r1;
        boolean z0, $z1;
        java.lang.Object r2, $r7;
        com.android.server.accessibility.AccessibilityManagerService$UserState r3;
        java.lang.Throwable r4, $r14;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r5;
        android.view.WindowManagerInternal $r6;
        com.android.server.accessibility.AccessibilityManagerService$Service $r8;
        java.util.Set $r9, $r10, $r11, $r12, $r13;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        staticinvoke <com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void access$1100(com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy,java.lang.String,java.lang.String)>($r5, "android.permission.TEMPORARY_ENABLE_ACCESSIBILITY", "temporaryEnableAccessibilityStateUntilKeyguardRemoved");

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.view.WindowManagerInternal mWindowManagerService>;

        $z1 = virtualinvoke $r6.<android.view.WindowManagerInternal: boolean isKeyguardLocked()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r2 = $r7;

        entermonitor $r7;

     label2:
        r3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        $r8 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: com.android.server.accessibility.AccessibilityManagerService$Service access$300(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r3);

        if $r8 == null goto label4;

        exitmonitor r2;

     label3:
        return;

     label4:
        r3.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsAccessibilityEnabled> = 1;

        r3.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsTouchExplorationEnabled> = z0;

        r3.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsEnhancedWebAccessibilityEnabled> = 0;

        r3.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsDisplayMagnificationEnabled> = 0;

        $r9 = r3.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mEnabledServices>;

        interfaceinvoke $r9.<java.util.Set: void clear()>();

        $r10 = r3.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mEnabledServices>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r11 = r3.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mBindingServices>;

        interfaceinvoke $r11.<java.util.Set: void clear()>();

        $r13 = r3.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mTouchExplorationGrantedServices>;

        interfaceinvoke $r13.<java.util.Set: void clear()>();

        $r12 = r3.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mTouchExplorationGrantedServices>;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r3);

        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public android.os.IBinder getWindowToken(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1, $r5, $r10, $r13;
        android.os.IBinder r2, $r14;
        java.lang.Throwable r3, $r15;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r4, $r6, $r7;
        android.view.accessibility.AccessibilityWindowInfo $r8;
        android.util.SparseArray $r9, $r11;
        com.android.server.accessibility.AccessibilityManagerService$UserState $r12;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        staticinvoke <com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void access$1100(com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy,java.lang.String,java.lang.String)>($r4, "android.permission.RETRIEVE_WINDOW_TOKEN", "getWindowToken");

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        i1 = virtualinvoke $r6.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int resolveCallingUserIdEnforcingPermissionsLocked(int)>($i2);

        $i3 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        if i1 == $i3 goto label03;

        exitmonitor r1;

     label02:
        return null;

     label03:
        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        $r8 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: android.view.accessibility.AccessibilityWindowInfo access$1500(com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy,int)>($r7, i0);

        if $r8 != null goto label05;

        exitmonitor r1;

     label04:
        return null;

     label05:
        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mGlobalWindowTokens>;

        $r10 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (android.os.IBinder) $r10;

        if r2 == null goto label07;

        exitmonitor r1;

     label06:
        return r2;

     label07:
        $r12 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        $r11 = $r12.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.util.SparseArray mWindowTokens>;

        $r13 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r14 = (android.os.IBinder) $r13;

        exitmonitor r1;

     label08:
        return $r14;

     label09:
        $r15 := @caughtexception;

        r3 = $r15;

        exitmonitor r1;

     label10:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    boolean onGesture(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        java.lang.Object r1, $r3;
        boolean z0;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean notifyGestureLocked(int,boolean)>(i0, 0);

        if z0 != 0 goto label2;

        z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean notifyGestureLocked(int,boolean)>(i0, 1);

     label2:
        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    boolean notifyKeyEvent(android.view.KeyEvent, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.KeyEvent r1, r3;
        int i0;
        java.lang.Object r2, $r5;
        boolean z0;
        java.lang.Throwable r4, $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        r3 = staticinvoke <android.view.KeyEvent: android.view.KeyEvent obtain(android.view.KeyEvent)>(r1);

        z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean notifyKeyEventLocked(android.view.KeyEvent,int,boolean)>(r3, i0, 0);

        if z0 != 0 goto label2;

        z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean notifyKeyEventLocked(android.view.KeyEvent,int,boolean)>(r3, i0, 1);

     label2:
        exitmonitor r2;

     label3:
        return z0;

     label4:
        $r6 := @caughtexception;

        r4 = $r6;

        exitmonitor r2;

     label5:
        throw r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    boolean getAccessibilityFocusClickPointInScreen(android.graphics.Point)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.graphics.Point r1;
        com.android.server.accessibility.AccessibilityManagerService$InteractionBridge $r2;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.graphics.Point;

        $r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$InteractionBridge getInteractionBridgeLocked()>();

        $z0 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilityManagerService$InteractionBridge: boolean getAccessibilityFocusClickPointInScreenNotLocked(android.graphics.Point)>(r1);

        return $z0;
    }

    boolean getActiveWindowBounds(android.graphics.Rect)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.graphics.Rect r1;
        android.os.IBinder r2;
        java.lang.Object r3, $r5, $r8, $r12;
        int i0;
        java.lang.Throwable r4, $r13;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r6;
        android.util.SparseArray $r7, $r11;
        android.view.WindowManagerInternal $r9;
        boolean $z0;
        com.android.server.accessibility.AccessibilityManagerService$UserState $r10;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.graphics.Rect;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        i0 = $r6.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mGlobalWindowTokens>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (android.os.IBinder) $r8;

        if r2 != null goto label2;

        $r10 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        $r11 = $r10.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.util.SparseArray mWindowTokens>;

        $r12 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (android.os.IBinder) $r12;

     label2:
        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r3;

     label5:
        throw r4;

     label6:
        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.view.WindowManagerInternal mWindowManagerService>;

        virtualinvoke $r9.<android.view.WindowManagerInternal: void getWindowFrame(android.os.IBinder,android.graphics.Rect)>(r2, r1);

        $z0 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 != 0 goto label7;

        return 1;

     label7:
        return 0;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    boolean accessibilityFocusOnlyInActiveWindow()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback $r4;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback mWindowsForAccessibilityCallback>;

        if $r4 != null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor r1;

     label4:
        return $z0;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    int getActiveWindowId()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r1;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        $i0 = virtualinvoke $r1.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int getActiveWindowId()>();

        return $i0;
    }

    void onTouchInteractionStart()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        virtualinvoke $r1.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void onTouchInteractionStart()>();

        return;
    }

    void onTouchInteractionEnd()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        virtualinvoke $r1.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void onTouchInteractionEnd()>();

        return;
    }

    void onMagnificationStateChanged()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void notifyClearAccessibilityCacheLocked()>();

        return;
    }

    private void switchUser(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1, $r6, $r9;
        com.android.server.accessibility.AccessibilityManagerService$UserState r2, r4;
        android.os.UserManager r3;
        boolean z0, $z3, $z4;
        java.lang.Throwable r5, $r16;
        android.os.RemoteCallbackList $r7;
        android.content.Context $r8;
        java.util.List $r10;
        com.android.server.accessibility.AccessibilityManagerService$Service $r11, $r13;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r12, $r15;
        android.os.Message $r14;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r1 = $r6;

        entermonitor $r6;

     label01:
        $i1 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        if $i1 != i0 goto label03;

        $z4 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mInitialized>;

        if $z4 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        virtualinvoke r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: void onSwitchToAnotherUser()>();

        $r7 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.os.RemoteCallbackList mClients>;

        $i2 = virtualinvoke $r7.<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>();

        if $i2 <= 0 goto label04;

        $r15 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $i4 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        $r14 = virtualinvoke $r15.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: android.os.Message obtainMessage(int,int,int)>(3, $i4, 0);

        virtualinvoke $r14.<android.os.Message: void sendToTarget()>();

     label04:
        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        r3 = (android.os.UserManager) $r9;

        $r10 = virtualinvoke r3.<android.os.UserManager: java.util.List getUsers()>();

        $i3 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i3 <= 1 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        z0 = $z3;

        r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId> = i0;

        r4 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        $r11 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: com.android.server.accessibility.AccessibilityManagerService$Service access$300(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r4);

        if $r11 == null goto label07;

        $r13 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: com.android.server.accessibility.AccessibilityManagerService$Service access$300(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r4);

        virtualinvoke $r13.<com.android.server.accessibility.AccessibilityManagerService$Service: void binderDied()>();

     label07:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readConfigurationForUserStateLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r4);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r4);

        if z0 == 0 goto label08;

        $r12 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        virtualinvoke $r12.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: boolean sendEmptyMessageDelayed(int,long)>(5, 3000L);

     label08:
        exitmonitor r1;

     label09:
        goto label12;

     label10:
        $r16 := @caughtexception;

        r5 = $r16;

        exitmonitor r1;

     label11:
        throw r5;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void removeUser(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        android.util.SparseArray $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates>;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private com.android.server.accessibility.AccessibilityManagerService$InteractionBridge getInteractionBridgeLocked()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$InteractionBridge $r1, $r2, $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$InteractionBridge mInteractionBridge>;

        if $r1 != null goto label1;

        $r3 = new com.android.server.accessibility.AccessibilityManagerService$InteractionBridge;

        specialinvoke $r3.<com.android.server.accessibility.AccessibilityManagerService$InteractionBridge: void <init>(com.android.server.accessibility.AccessibilityManagerService)>(r0);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$InteractionBridge mInteractionBridge> = $r3;

     label1:
        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$InteractionBridge mInteractionBridge>;

        return $r2;
    }

    private boolean notifyGestureLocked(int, boolean)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1, $i2;
        boolean z0, $z1, $z2;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        com.android.server.accessibility.AccessibilityManagerService$Service r2;
        java.util.concurrent.CopyOnWriteArrayList $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        $r3 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        $i2 = virtualinvoke $r3.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        i1 = $i2 - 1;

     label1:
        if i1 < 0 goto label3;

        $r4 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.accessibility.AccessibilityManagerService$Service) $r5;

        $z1 = r2.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean mRequestTouchExplorationMode>;

        if $z1 == 0 goto label2;

        $z2 = r2.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean mIsDefault>;

        if $z2 != z0 goto label2;

        virtualinvoke r2.<com.android.server.accessibility.AccessibilityManagerService$Service: void notifyGesture(int)>(i0);

        return 1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return 0;
    }

    private boolean notifyKeyEventLocked(android.view.KeyEvent, int, boolean)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.KeyEvent r1;
        int i0, i1, $i2, $i3, $i4;
        boolean z0, $z1, $z2;
        com.android.server.accessibility.AccessibilityManagerService$UserState r2;
        com.android.server.accessibility.AccessibilityManagerService$Service r3;
        java.util.concurrent.CopyOnWriteArrayList $r4, $r5;
        java.lang.Object $r6;
        android.accessibilityservice.AccessibilityServiceInfo $r7;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        $r4 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        $i2 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        i1 = $i2 - 1;

     label1:
        if i1 < 0 goto label4;

        $r5 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.accessibility.AccessibilityManagerService$Service) $r6;

        $z1 = r3.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean mRequestFilterKeyEvents>;

        if $z1 == 0 goto label3;

        $r7 = r3.<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

        $i3 = virtualinvoke $r7.<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>();

        $i4 = $i3 & 8;

        if $i4 != 0 goto label2;

        goto label3;

     label2:
        $z2 = r3.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean mIsDefault>;

        if $z2 != z0 goto label3;

        virtualinvoke r3.<com.android.server.accessibility.AccessibilityManagerService$Service: void notifyKeyEvent(android.view.KeyEvent,int)>(r1, i0);

        return 1;

     label3:
        i1 = i1 + -1;

        goto label1;

     label4:
        return 0;
    }

    private void notifyClearAccessibilityCacheLocked()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        int i0, $i1;
        com.android.server.accessibility.AccessibilityManagerService$Service r2;
        java.util.concurrent.CopyOnWriteArrayList $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        $r3 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        $i1 = virtualinvoke $r3.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        i0 = $i1 - 1;

     label1:
        if i0 < 0 goto label2;

        $r4 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.accessibility.AccessibilityManagerService$Service) $r5;

        virtualinvoke r2.<com.android.server.accessibility.AccessibilityManagerService$Service: void notifyClearAccessibilityNodeInfoCache()>();

        i0 = i0 + -1;

        goto label1;

     label2:
        return;
    }

    private void removeAccessibilityInteractionConnectionLocked(int, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        android.util.SparseArray $r2, $r3, $r4, $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != -1 goto label1;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mGlobalWindowTokens>;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>(i0);

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mGlobalInteractionConnections>;

        virtualinvoke $r5.<android.util.SparseArray: void remove(int)>(i0);

        goto label2;

     label1:
        r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        $r2 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.util.SparseArray mWindowTokens>;

        virtualinvoke $r2.<android.util.SparseArray: void remove(int)>(i0);

        $r3 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.util.SparseArray mInteractionConnections>;

        virtualinvoke $r3.<android.util.SparseArray: void remove(int)>(i0);

     label2:
        return;
    }

    private boolean readInstalledAccessibilityServiceLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        java.util.List r2, $r7, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r22;
        int i0, i1, $i2;
        android.content.pm.ResolveInfo r3;
        android.content.pm.ServiceInfo r4;
        android.accessibilityservice.AccessibilityServiceInfo r5, $r21;
        java.lang.Exception r6, $r33;
        android.content.Intent $r8;
        android.content.pm.PackageManager $r9;
        boolean $z0, $z2;
        java.lang.String $r17, $r19, $r26, $r28, $r29, $r30;
        java.lang.Object $r18;
        android.content.Context $r20;
        java.lang.StringBuilder $r23, $r25, $r27, $r31, $r32;
        android.content.ComponentName $r24;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList>;

        interfaceinvoke $r7.<java.util.List: void clear()>();

        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.pm.PackageManager mPackageManager>;

        $r8 = new android.content.Intent;

        specialinvoke $r8.<android.content.Intent: void <init>(java.lang.String)>("android.accessibilityservice.AccessibilityService");

        $i2 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        r2 = virtualinvoke $r9.<android.content.pm.PackageManager: java.util.List queryIntentServicesAsUser(android.content.Intent,int,int)>($r8, 132, $i2);

        i0 = 0;

        i1 = interfaceinvoke r2.<java.util.List: int size()>();

     label1:
        if i0 >= i1 goto label6;

        $r18 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (android.content.pm.ResolveInfo) $r18;

        r4 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r19 = "android.permission.BIND_ACCESSIBILITY_SERVICE";

        $r17 = r4.<android.content.pm.ServiceInfo: java.lang.String permission>;

        $z2 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z2 != 0 goto label2;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping accessibilty service ");

        $r24 = new android.content.ComponentName;

        $r29 = r4.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r28 = r4.<android.content.pm.ServiceInfo: java.lang.String name>;

        specialinvoke $r24.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r29, $r28);

        $r26 = virtualinvoke $r24.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": it does not require the permission ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.BIND_ACCESSIBILITY_SERVICE");

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AccessibilityManagerService", $r30);

        goto label5;

     label2:
        $r21 = new android.accessibilityservice.AccessibilityServiceInfo;

        $r20 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        specialinvoke $r21.<android.accessibilityservice.AccessibilityServiceInfo: void <init>(android.content.pm.ResolveInfo,android.content.Context)>(r3, $r20);

        r5 = $r21;

        $r22 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList>;

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>(r5);

     label3:
        goto label5;

     label4:
        $r33 := @caughtexception;

        r6 = $r33;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManagerService", "Error while initializing AccessibilityServiceInfo", r6);

     label5:
        i0 = i0 + 1;

        goto label1;

     label6:
        $r11 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList>;

        $r10 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.List mInstalledServices>;

        $z0 = interfaceinvoke $r11.<java.util.List: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label7;

        $r12 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.List mInstalledServices>;

        interfaceinvoke $r12.<java.util.List: void clear()>();

        $r14 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.List mInstalledServices>;

        $r15 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList>;

        interfaceinvoke $r14.<java.util.List: boolean addAll(java.util.Collection)>($r15);

        $r16 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList>;

        interfaceinvoke $r16.<java.util.List: void clear()>();

        return 1;

     label7:
        $r13 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.List mTempAccessibilityServiceInfoList>;

        interfaceinvoke $r13.<java.util.List: void clear()>();

        return 0;

        catch org.xmlpull.v1.XmlPullParserException from label2 to label3 with label4;
        catch java.io.IOException from label2 to label3 with label4;
    }

    private boolean readEnabledAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        java.util.Set $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void readComponentNamesFromSettingLocked(java.lang.String,int,java.util.Set)>("enabled_accessibility_services", $i0, $r3);

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        $r4 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mEnabledServices>;

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r7 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mEnabledServices>;

        interfaceinvoke $r7.<java.util.Set: void clear()>();

        $r9 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mEnabledServices>;

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r9.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r10.<java.util.Set: void clear()>();

        return 1;

     label1:
        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r6.<java.util.Set: void clear()>();

        return 0;
    }

    private boolean readTouchExplorationGrantedAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        java.util.Set $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void readComponentNamesFromSettingLocked(java.lang.String,int,java.util.Set)>("touch_exploration_granted_accessibility_services", $i0, $r3);

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        $r4 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mTouchExplorationGrantedServices>;

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r7 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mTouchExplorationGrantedServices>;

        interfaceinvoke $r7.<java.util.Set: void clear()>();

        $r9 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mTouchExplorationGrantedServices>;

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r9.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r10.<java.util.Set: void clear()>();

        return 1;

     label1:
        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.util.Set mTempComponentNameSet>;

        interfaceinvoke $r6.<java.util.Set: void clear()>();

        return 0;
    }

    private void notifyAccessibilityServicesDelayedLocked(android.view.accessibility.AccessibilityEvent, boolean)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.accessibility.AccessibilityEvent r1;
        boolean z0, $z1, $z2;
        com.android.server.accessibility.AccessibilityManagerService$UserState r2;
        int i0, i1, $i2, $i3, $i4, $i5;
        com.android.server.accessibility.AccessibilityManagerService$Service r3;
        java.util.concurrent.CopyOnWriteArrayList $r4, $r5;
        java.lang.Object $r6;
        java.lang.IndexOutOfBoundsException $r7;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        z0 := @parameter1: boolean;

     label1:
        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        i0 = 0;

        $r4 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        i1 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

     label2:
        if i0 >= i1 goto label4;

        $r5 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.accessibility.AccessibilityManagerService$Service) $r6;

        $z1 = r3.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean mIsDefault>;

        if $z1 != z0 goto label3;

        $i2 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mHandledFeedbackTypes>;

        $z2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean canDispatchEventToServiceLocked(com.android.server.accessibility.AccessibilityManagerService$Service,android.view.accessibility.AccessibilityEvent,int)>(r3, r1, $i2);

        if $z2 == 0 goto label3;

        $i5 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mHandledFeedbackTypes>;

        $i3 = r3.<com.android.server.accessibility.AccessibilityManagerService$Service: int mFeedbackType>;

        $i4 = $i5 | $i3;

        r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mHandledFeedbackTypes> = $i4;

        virtualinvoke r3.<com.android.server.accessibility.AccessibilityManagerService$Service: void notifyAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

     label6:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label4 with label5;
    }

    private void addServiceLocked(com.android.server.accessibility.AccessibilityManagerService$Service, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        com.android.server.accessibility.AccessibilityManagerService$UserState r2;
        java.util.concurrent.CopyOnWriteArrayList $r4;
        android.content.ComponentName $r5;
        java.util.Map $r6;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$Service;

        r2 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

     label1:
        virtualinvoke r1.<com.android.server.accessibility.AccessibilityManagerService$Service: void linkToOwnDeathLocked()>();

        $r4 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

        $r6 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Map mComponentNameToServiceMap>;

        $r5 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: android.content.ComponentName mComponentName>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void removeServiceLocked(com.android.server.accessibility.AccessibilityManagerService$Service, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        com.android.server.accessibility.AccessibilityManagerService$UserState r2;
        java.util.concurrent.CopyOnWriteArrayList $r3;
        android.content.ComponentName $r4;
        java.util.Map $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$Service;

        r2 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r3 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        virtualinvoke $r3.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);

        $r5 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Map mComponentNameToServiceMap>;

        $r4 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: android.content.ComponentName mComponentName>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r4);

        virtualinvoke r1.<com.android.server.accessibility.AccessibilityManagerService$Service: void unlinkToOwnDeathLocked()>();

        return;
    }

    private boolean canDispatchEventToServiceLocked(com.android.server.accessibility.AccessibilityManagerService$Service, android.view.accessibility.AccessibilityEvent, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        android.view.accessibility.AccessibilityEvent r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Set r3;
        java.lang.String r4, $r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.CharSequence $r5, $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$Service;

        r2 := @parameter1: android.view.accessibility.AccessibilityEvent;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean canReceiveEventsLocked()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i3 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: int getWindowId()>();

        if $i3 == -1 goto label2;

        $z3 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: boolean isImportantForAccessibility()>();

        if $z3 != 0 goto label2;

        $i8 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: int mFetchFlags>;

        $i7 = $i8 & 8;

        if $i7 != 0 goto label2;

        return 0;

     label2:
        i1 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        $i4 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: int mEventTypes>;

        $i5 = $i4 & i1;

        if $i5 == i1 goto label3;

        return 0;

     label3:
        r3 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: java.util.Set mPackageNames>;

        $r5 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>();

        if $r5 == null goto label4;

        $r6 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>();

        $r7 = interfaceinvoke $r6.<java.lang.CharSequence: java.lang.String toString()>();

        goto label5;

     label4:
        $r7 = null;

     label5:
        r4 = $r7;

        $z1 = interfaceinvoke r3.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label6;

        $z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z2 == 0 goto label8;

     label6:
        i2 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: int mFeedbackType>;

        $i6 = i0 & i2;

        if $i6 != i2 goto label7;

        if i2 != 16 goto label8;

     label7:
        return 1;

     label8:
        return 0;
    }

    private void unbindAllServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        java.util.concurrent.CopyOnWriteArrayList r2;
        int i0, i1;
        com.android.server.accessibility.AccessibilityManagerService$Service r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        r2 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        i0 = 0;

        i1 = interfaceinvoke r2.<java.util.List: int size()>();

     label1:
        if i0 >= i1 goto label3;

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.accessibility.AccessibilityManagerService$Service) $r4;

        $z0 = virtualinvoke r3.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean unbindLocked()>();

        if $z0 == 0 goto label2;

        i0 = i0 + -1;

        i1 = i1 + -1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    private void readComponentNamesFromSettingLocked(java.lang.String, int, java.util.Set)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.String r1, r3, r5;
        int i0, $i1;
        java.util.Set r2;
        android.text.TextUtils$SimpleStringSplitter r4;
        android.content.ComponentName r6;
        android.content.Context $r7;
        android.content.ContentResolver $r8;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Set;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r3 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r8, r1, i0);

        interfaceinvoke r2.<java.util.Set: void clear()>();

        if r3 == null goto label4;

        r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.text.TextUtils$SimpleStringSplitter mStringColonSplitter>;

        virtualinvoke r4.<android.text.TextUtils$SimpleStringSplitter: void setString(java.lang.String)>(r3);

     label1:
        $z0 = virtualinvoke r4.<android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>();

        if $z0 == 0 goto label4;

        r5 = virtualinvoke r4.<android.text.TextUtils$SimpleStringSplitter: java.lang.String next()>();

        if r5 == null goto label1;

        $i1 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i1 > 0 goto label2;

        goto label1;

     label2:
        r6 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r5);

        if r6 == null goto label3;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r6);

     label3:
        goto label1;

     label4:
        return;
    }

    private void persistComponentNamesToSettingLocked(java.lang.String, java.util.Set, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.String r1, $r9, $r12;
        java.util.Set r2;
        int i0, $i1;
        java.lang.StringBuilder r3, $r6;
        java.util.Iterator r4;
        android.content.ComponentName r5;
        boolean $z0;
        android.content.Context $r7;
        android.content.ContentResolver $r8;
        java.lang.Object $r10;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Set;

        i0 := @parameter2: int;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        r3 = $r6;

        r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.ComponentName) $r10;

        $i1 = virtualinvoke r3.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label2;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

     label2:
        $r12 = virtualinvoke r5.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        goto label1;

     label3:
        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>($r8, r1, $r9, i0);

        return;
    }

    private void manageServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        java.util.Map r2;
        boolean z0, $z1, $z2, $z6, $z8, $z10;
        int i0, i1, $i2, $i3;
        android.accessibilityservice.AccessibilityServiceInfo r3;
        android.content.ComponentName r4;
        com.android.server.accessibility.AccessibilityManagerService$Service r5, $r18;
        java.util.List $r6, $r11;
        java.util.concurrent.CopyOnWriteArrayList $r7, $r19;
        java.util.Set $r8, $r15, $r16, $r17;
        android.content.Context $r9;
        android.content.ContentResolver $r10;
        java.lang.String $r12;
        java.lang.Object $r13, $r14;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        r2 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Map mComponentNameToServiceMap>;

        z0 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsAccessibilityEnabled>;

        i0 = 0;

        $r6 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.List mInstalledServices>;

        i1 = interfaceinvoke $r6.<java.util.List: int size()>();

     label01:
        if i0 >= i1 goto label09;

        $r11 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.List mInstalledServices>;

        $r13 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i0);

        r3 = (android.accessibilityservice.AccessibilityServiceInfo) $r13;

        $r12 = virtualinvoke r3.<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getId()>();

        r4 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r12);

        $r14 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (com.android.server.accessibility.AccessibilityManagerService$Service) $r14;

        if z0 == 0 goto label06;

        $r16 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mBindingServices>;

        $z6 = interfaceinvoke $r16.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z6 == 0 goto label02;

        goto label08;

     label02:
        $r17 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mEnabledServices>;

        $z8 = interfaceinvoke $r17.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z8 == 0 goto label05;

        if r5 != null goto label03;

        $r18 = new com.android.server.accessibility.AccessibilityManagerService$Service;

        $i3 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        specialinvoke $r18.<com.android.server.accessibility.AccessibilityManagerService$Service: void <init>(com.android.server.accessibility.AccessibilityManagerService,int,android.content.ComponentName,android.accessibilityservice.AccessibilityServiceInfo)>(r0, $i3, r4, r3);

        r5 = $r18;

        goto label04;

     label03:
        $r19 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        $z10 = virtualinvoke $r19.<java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>(r5);

        if $z10 == 0 goto label04;

        goto label08;

     label04:
        virtualinvoke r5.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean bindLocked()>();

        goto label08;

     label05:
        if r5 == null goto label08;

        virtualinvoke r5.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean unbindLocked()>();

        goto label08;

     label06:
        if r5 == null goto label07;

        virtualinvoke r5.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean unbindLocked()>();

        goto label08;

     label07:
        $r15 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mBindingServices>;

        interfaceinvoke $r15.<java.util.Set: boolean remove(java.lang.Object)>(r4);

     label08:
        i0 = i0 + 1;

        goto label01;

     label09:
        if z0 == 0 goto label10;

        $r7 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        $z1 = virtualinvoke $r7.<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label10;

        $r8 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mBindingServices>;

        $z2 = interfaceinvoke $r8.<java.util.Set: boolean isEmpty()>();

        if $z2 == 0 goto label10;

        r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsAccessibilityEnabled> = 0;

        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i2 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r10, "accessibility_enabled", 0, $i2);

     label10:
        return;
    }

    private void scheduleUpdateClientsIfNeededLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        int i0, $i1, $i2, $i3, $i4;
        android.os.RemoteCallbackList $r2, $r5;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r3;
        android.os.Message $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        i0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int getClientState()>();

        $i1 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mLastSentClientState>;

        if $i1 == i0 goto label2;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.RemoteCallbackList mGlobalClients>;

        $i2 = virtualinvoke $r2.<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>();

        if $i2 > 0 goto label1;

        $r5 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.os.RemoteCallbackList mClients>;

        $i4 = virtualinvoke $r5.<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>();

        if $i4 <= 0 goto label2;

     label1:
        r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mLastSentClientState> = i0;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $i3 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        $r4 = virtualinvoke $r3.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: android.os.Message obtainMessage(int,int,int)>(2, i0, $i3);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

     label2:
        return;
    }

    private void scheduleUpdateInputFilter(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r3 = virtualinvoke $r2.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: android.os.Message obtainMessage(int,java.lang.Object)>(6, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void updateInputFilter(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.server.accessibility.AccessibilityInputFilter r2, $r7, $r8, $r9, $r11;
        java.lang.Object r3, $r5;
        byte b0;
        java.lang.Throwable r4, $r12;
        android.view.WindowManagerInternal $r6;
        android.content.Context $r10;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        z0 = 0;

        r2 = null;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r3 = $r5;

        entermonitor $r5;

     label01:
        b0 = 0;

        $z1 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsDisplayMagnificationEnabled>;

        if $z1 == 0 goto label02;

        b0 = b0 | 1;

     label02:
        $z2 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsAccessibilityEnabled>;

        if $z2 == 0 goto label03;

        $z6 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsTouchExplorationEnabled>;

        if $z6 == 0 goto label03;

        b0 = b0 | 2;

     label03:
        $z3 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsFilterKeyEventsEnabled>;

        if $z3 == 0 goto label04;

        b0 = b0 | 4;

     label04:
        if b0 == 0 goto label07;

        $z5 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter>;

        if $z5 != 0 goto label06;

        r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter> = 1;

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        if $r8 != null goto label05;

        $r11 = new com.android.server.accessibility.AccessibilityInputFilter;

        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        specialinvoke $r11.<com.android.server.accessibility.AccessibilityInputFilter: void <init>(android.content.Context,com.android.server.accessibility.AccessibilityManagerService)>($r10, r0);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter> = $r11;

     label05:
        r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        z0 = 1;

     label06:
        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        virtualinvoke $r9.<com.android.server.accessibility.AccessibilityInputFilter: void setEnabledFeatures(int)>(b0);

        goto label08;

     label07:
        $z4 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter>;

        if $z4 == 0 goto label08;

        r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter> = 0;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        virtualinvoke $r7.<com.android.server.accessibility.AccessibilityInputFilter: void disableFeatures()>();

        r2 = null;

        z0 = 1;

     label08:
        exitmonitor r3;

     label09:
        goto label12;

     label10:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r3;

     label11:
        throw r4;

     label12:
        if z0 == 0 goto label13;

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.view.WindowManagerInternal mWindowManagerService>;

        virtualinvoke $r6.<android.view.WindowManagerInternal: void setInputFilter(android.view.IInputFilter)>(r2);

     label13:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void showEnableTouchExplorationDialog(com.android.server.accessibility.AccessibilityManagerService$Service)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        java.lang.Object r2, $r6;
        java.lang.String r3, $r21;
        com.android.server.accessibility.AccessibilityManagerService$UserState r4;
        java.lang.Throwable r5, $r33;
        android.content.Context $r7, $r14, $r22;
        android.content.pm.ResolveInfo $r8;
        android.content.pm.PackageManager $r9;
        java.lang.CharSequence $r10;
        boolean $z0, $z1;
        android.app.AlertDialog $r11, $r23, $r26, $r28, $r30, $r31, $r32;
        android.app.AlertDialog$Builder $r12, $r13, $r17, $r18, $r20, $r24;
        com.android.server.accessibility.AccessibilityManagerService$4 $r15;
        com.android.server.accessibility.AccessibilityManagerService$3 $r16;
        java.lang.Object[] $r19;
        android.view.Window $r25, $r29;
        android.view.WindowManager$LayoutParams $r27;
        int $i0, $i1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$Service;

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        $r8 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: android.content.pm.ResolveInfo mResolveInfo>;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r9 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r10 = virtualinvoke $r8.<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>($r9);

        r3 = interfaceinvoke $r10.<java.lang.CharSequence: java.lang.String toString()>();

        r4 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        $z0 = r4.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsTouchExplorationEnabled>;

        if $z0 == 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r11 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog>;

        if $r11 == null goto label5;

        $r32 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog>;

        $z1 = virtualinvoke $r32.<android.app.AlertDialog: boolean isShowing()>();

        if $z1 == 0 goto label5;

        exitmonitor r2;

     label4:
        return;

     label5:
        $r12 = new android.app.AlertDialog$Builder;

        $r14 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        specialinvoke $r12.<android.app.AlertDialog$Builder: void <init>(android.content.Context)>($r14);

        $r13 = virtualinvoke $r12.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIconAttribute(int)>(16843605);

        $r15 = new com.android.server.accessibility.AccessibilityManagerService$4;

        specialinvoke $r15.<com.android.server.accessibility.AccessibilityManagerService$4: void <init>(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState,com.android.server.accessibility.AccessibilityManagerService$Service)>(r0, r4, r1);

        $r17 = virtualinvoke $r13.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>(17039370, $r15);

        $r16 = new com.android.server.accessibility.AccessibilityManagerService$3;

        specialinvoke $r16.<com.android.server.accessibility.AccessibilityManagerService$3: void <init>(com.android.server.accessibility.AccessibilityManagerService)>(r0);

        $r18 = virtualinvoke $r17.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>(17039360, $r16);

        $r20 = virtualinvoke $r18.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)>(17040437);

        $r22 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = r3;

        $r21 = virtualinvoke $r22.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(17040438, $r19);

        $r24 = virtualinvoke $r20.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>($r21);

        $r23 = virtualinvoke $r24.<android.app.AlertDialog$Builder: android.app.AlertDialog create()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog> = $r23;

        $r26 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog>;

        $r25 = virtualinvoke $r26.<android.app.AlertDialog: android.view.Window getWindow()>();

        virtualinvoke $r25.<android.view.Window: void setType(int)>(2003);

        $r28 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog>;

        $r29 = virtualinvoke $r28.<android.app.AlertDialog: android.view.Window getWindow()>();

        $r27 = virtualinvoke $r29.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        $i0 = $r27.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i1 = $i0 | 16;

        $r27.<android.view.WindowManager$LayoutParams: int privateFlags> = $i1;

        $r31 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog>;

        virtualinvoke $r31.<android.app.AlertDialog: void setCanceledOnTouchOutside(boolean)>(1);

        $r30 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog>;

        virtualinvoke $r30.<android.app.AlertDialog: void show()>();

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r33 := @caughtexception;

        r5 = $r33;

        exitmonitor r2;

     label8:
        throw r5;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mInitialized> = 1;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateLegacyCapabilitiesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateWindowsForAccessibilityCallbackLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateAccessibilityFocusBehaviorLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateFilterKeyEventsLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateTouchExplorationLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateEnhancedWebAccessibilityLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateDisplayColorAdjustmentSettingsLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void scheduleUpdateInputFilter(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void scheduleUpdateClientsIfNeededLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        return;
    }

    private void updateAccessibilityFocusBehaviorLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        java.util.concurrent.CopyOnWriteArrayList r2;
        int i0, i1;
        com.android.server.accessibility.AccessibilityManagerService$Service r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        r2 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.accessibility.AccessibilityManagerService$Service) $r4;

        $z0 = virtualinvoke r3.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean canRetrieveInteractiveWindowsLocked()>();

        if $z0 == 0 goto label2;

        r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mAccessibilityFocusOnlyInActiveWindow> = 0;

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mAccessibilityFocusOnlyInActiveWindow> = 1;

        return;
    }

    private void updateWindowsForAccessibilityCallbackLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean z0, $z1, $z2;
        java.util.concurrent.CopyOnWriteArrayList r2;
        int i0, i1;
        com.android.server.accessibility.AccessibilityManagerService$Service r3;
        com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback $r4, $r7, $r8, $r9;
        android.view.WindowManagerInternal $r5, $r10;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r6;
        java.lang.Object $r11;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $z1 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsAccessibilityEnabled>;

        if $z1 == 0 goto label5;

        z0 = 0;

        r2 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.accessibility.AccessibilityManagerService$Service) $r11;

        $z2 = virtualinvoke r3.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean canRetrieveInteractiveWindowsLocked()>();

        if $z2 == 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        if z0 == 0 goto label5;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback mWindowsForAccessibilityCallback>;

        if $r7 != null goto label4;

        $r8 = new com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback;

        specialinvoke $r8.<com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback: void <init>(com.android.server.accessibility.AccessibilityManagerService)>(r0);

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback mWindowsForAccessibilityCallback> = $r8;

        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.view.WindowManagerInternal mWindowManagerService>;

        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback mWindowsForAccessibilityCallback>;

        virtualinvoke $r10.<android.view.WindowManagerInternal: void setWindowsForAccessibilityCallback(android.view.WindowManagerInternal$WindowsForAccessibilityCallback)>($r9);

     label4:
        return;

     label5:
        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback mWindowsForAccessibilityCallback>;

        if $r4 == null goto label6;

        r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback mWindowsForAccessibilityCallback> = null;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.view.WindowManagerInternal mWindowManagerService>;

        virtualinvoke $r5.<android.view.WindowManagerInternal: void setWindowsForAccessibilityCallback(android.view.WindowManagerInternal$WindowsForAccessibilityCallback)>(null);

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        virtualinvoke $r6.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void clearWindowsLocked()>();

     label6:
        return;
    }

    private void updateLegacyCapabilitiesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        android.accessibilityservice.AccessibilityServiceInfo r2;
        android.content.pm.ResolveInfo r3;
        android.content.ComponentName r4, $r10;
        java.util.List $r5, $r6;
        java.lang.Object $r7;
        android.content.pm.ServiceInfo $r8, $r11, $r12;
        android.content.pm.ApplicationInfo $r9;
        java.lang.String $r13, $r14;
        boolean $z0;
        java.util.Set $r15;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r5 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.List mInstalledServices>;

        i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r6 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.List mInstalledServices>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (android.accessibilityservice.AccessibilityServiceInfo) $r7;

        r3 = virtualinvoke r2.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $i2 = virtualinvoke r2.<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>();

        $i3 = $i2 & 2;

        if $i3 != 0 goto label2;

        $r8 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r9 = $r8.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i4 = $r9.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i4 > 17 goto label2;

        $r10 = new android.content.ComponentName;

        $r12 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r13 = $r12.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r11 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r14 = $r11.<android.content.pm.ServiceInfo: java.lang.String name>;

        specialinvoke $r10.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r13, $r14);

        r4 = $r10;

        $r15 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mTouchExplorationGrantedServices>;

        $z0 = interfaceinvoke $r15.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        $i6 = virtualinvoke r2.<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>();

        $i5 = $i6 | 2;

        virtualinvoke r2.<android.accessibilityservice.AccessibilityServiceInfo: void setCapabilities(int)>($i5);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void updateFilterKeyEventsLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        int i0, i1, $i2, $i3;
        com.android.server.accessibility.AccessibilityManagerService$Service r2;
        java.util.concurrent.CopyOnWriteArrayList $r3, $r4;
        java.lang.Object $r5;
        boolean $z0;
        android.accessibilityservice.AccessibilityServiceInfo $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r3 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        i0 = virtualinvoke $r3.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.accessibility.AccessibilityManagerService$Service) $r5;

        $z0 = r2.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean mRequestFilterKeyEvents>;

        if $z0 == 0 goto label2;

        $r6 = r2.<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

        $i2 = virtualinvoke $r6.<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>();

        $i3 = $i2 & 8;

        if $i3 == 0 goto label2;

        r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsFilterKeyEventsEnabled> = 1;

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsFilterKeyEventsEnabled> = 0;

        return;
    }

    private void updateServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $z0 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsAccessibilityEnabled>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void manageServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void unbindAllServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

     label2:
        return;
    }

    private boolean readConfigurationForUserStateLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z10, z11, z12, z13, z14, z15, z16;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readAccessibilityEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        $z1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readInstalledAccessibilityServiceLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        z9 = z0 | $z1;

        $z2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readEnabledAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        z10 = z9 | $z2;

        $z3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readTouchExplorationGrantedAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        z11 = z10 | $z3;

        $z4 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readTouchExplorationEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        z12 = z11 | $z4;

        $z5 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readHighTextContrastEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        z13 = z12 | $z5;

        $z6 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readEnhancedWebAccessibilityEnabledChangedLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        z14 = z13 | $z6;

        $z7 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readDisplayMagnificationEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        z15 = z14 | $z7;

        $z8 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readDisplayColorAdjustmentSettingsLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        z16 = z15 | $z8;

        return z16;
    }

    private boolean readAccessibilityEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean z0, $z1, $z2;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        int $i0, $i1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "accessibility_enabled", 0, $i0);

        if $i1 != 1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $z1 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsAccessibilityEnabled>;

        if z0 == $z1 goto label3;

        r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsAccessibilityEnabled> = z0;

        return 1;

     label3:
        return 0;
    }

    private boolean readTouchExplorationEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean z0, $z1, $z2;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        int $i0, $i1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "touch_exploration_enabled", 0, $i0);

        if $i1 != 1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $z1 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsTouchExplorationEnabled>;

        if z0 == $z1 goto label3;

        r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsTouchExplorationEnabled> = z0;

        return 1;

     label3:
        return 0;
    }

    private boolean readDisplayMagnificationEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean z0, $z1, $z2;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        int $i0, $i1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "accessibility_display_magnification_enabled", 0, $i0);

        if $i1 != 1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $z1 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsDisplayMagnificationEnabled>;

        if z0 == $z1 goto label3;

        r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsDisplayMagnificationEnabled> = z0;

        return 1;

     label3:
        return 0;
    }

    private boolean readEnhancedWebAccessibilityEnabledChangedLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean z0, $z1, $z2;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        int $i0, $i1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "accessibility_script_injection", 0, $i0);

        if $i1 != 1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $z1 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsEnhancedWebAccessibilityEnabled>;

        if z0 == $z1 goto label3;

        r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsEnhancedWebAccessibilityEnabled> = z0;

        return 1;

     label3:
        return 0;
    }

    private boolean readDisplayColorAdjustmentSettingsLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean z0, $z1;
        int $i0;
        android.content.Context $r2;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $i0 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        z0 = staticinvoke <com.android.server.accessibility.DisplayAdjustmentUtils: boolean hasAdjustments(android.content.Context,int)>($r2, $i0);

        $z1 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mHasDisplayColorAdjustment>;

        if z0 == $z1 goto label1;

        r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mHasDisplayColorAdjustment> = z0;

        return 1;

     label1:
        return z0;
    }

    private boolean readHighTextContrastEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean z0, $z1, $z2;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        int $i0, $i1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "high_text_contrast_enabled", 0, $i0);

        if $i1 != 1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $z1 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsTextHighContrastEnabled>;

        if z0 == $z1 goto label3;

        r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsTextHighContrastEnabled> = z0;

        return 1;

     label3:
        return 0;
    }

    private void updateTouchExplorationLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean z0, $z1, $z3;
        int i0, i1, $i2;
        com.android.server.accessibility.AccessibilityManagerService$Service r2;
        java.util.concurrent.CopyOnWriteArrayList $r3, $r6;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        byte $b3;
        java.lang.Object $r7;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        z0 = 0;

        $r3 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        i0 = virtualinvoke $r3.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r6 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.accessibility.AccessibilityManagerService$Service) $r7;

        $z3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean canRequestAndRequestsTouchExplorationLocked(com.android.server.accessibility.AccessibilityManagerService$Service)>(r2);

        if $z3 == 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z1 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsTouchExplorationEnabled>;

        if z0 == $z1 goto label6;

        r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsTouchExplorationEnabled> = z0;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        if z0 == 0 goto label4;

        $b3 = 1;

        goto label5;

     label4:
        $b3 = 0;

     label5:
        $i2 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r5, "touch_exploration_enabled", $b3, $i2);

     label6:
        return;
    }

    private boolean canRequestAndRequestsTouchExplorationLocked(com.android.server.accessibility.AccessibilityManagerService$Service)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        com.android.server.accessibility.AccessibilityManagerService$UserState r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.content.pm.ResolveInfo $r3;
        android.content.pm.ServiceInfo $r4;
        android.content.pm.ApplicationInfo $r5;
        int $i0, $i1, $i2, $i3;
        android.accessibilityservice.AccessibilityServiceInfo $r6;
        android.content.ComponentName $r7;
        java.util.Set $r8;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r9;
        android.app.AlertDialog $r10, $r11;
        android.os.Message $r12;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$Service;

        $z0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean canReceiveEventsLocked()>();

        if $z0 == 0 goto label1;

        $z1 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean mRequestTouchExplorationMode>;

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $z2 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean mIsAutomation>;

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $r3 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: android.content.pm.ResolveInfo mResolveInfo>;

        $r4 = $r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r5 = $r4.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 > 17 goto label7;

        $i3 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: int mUserId>;

        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getUserStateLocked(int)>($i3);

        $r8 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mTouchExplorationGrantedServices>;

        $r7 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: android.content.ComponentName mComponentName>;

        $z3 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog>;

        if $r10 == null goto label5;

        $r11 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.app.AlertDialog mEnableTouchExplorationDialog>;

        $z4 = virtualinvoke $r11.<android.app.AlertDialog: boolean isShowing()>();

        if $z4 != 0 goto label6;

     label5:
        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        $r12 = virtualinvoke $r9.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: android.os.Message obtainMessage(int,java.lang.Object)>(7, r1);

        virtualinvoke $r12.<android.os.Message: void sendToTarget()>();

     label6:
        goto label8;

     label7:
        $r6 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

        $i1 = virtualinvoke $r6.<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>();

        $i2 = $i1 & 2;

        if $i2 == 0 goto label8;

        return 1;

     label8:
        return 0;
    }

    private void updateEnhancedWebAccessibilityLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean z0, $z1, $z3;
        int i0, i1, $i2;
        com.android.server.accessibility.AccessibilityManagerService$Service r2;
        java.util.concurrent.CopyOnWriteArrayList $r3, $r6;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        byte $b3;
        java.lang.Object $r7;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        z0 = 0;

        $r3 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        i0 = virtualinvoke $r3.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r6 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.accessibility.AccessibilityManagerService$Service) $r7;

        $z3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean canRequestAndRequestsEnhancedWebAccessibilityLocked(com.android.server.accessibility.AccessibilityManagerService$Service)>(r2);

        if $z3 == 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $z1 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsEnhancedWebAccessibilityEnabled>;

        if z0 == $z1 goto label6;

        r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsEnhancedWebAccessibilityEnabled> = z0;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        if z0 == 0 goto label4;

        $b3 = 1;

        goto label5;

     label4:
        $b3 = 0;

     label5:
        $i2 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r5, "accessibility_script_injection", $b3, $i2);

     label6:
        return;
    }

    private boolean canRequestAndRequestsEnhancedWebAccessibilityLocked(com.android.server.accessibility.AccessibilityManagerService$Service)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        boolean $z0, $z1, $z2;
        android.accessibilityservice.AccessibilityServiceInfo $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$Service;

        $z0 = virtualinvoke r1.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean canReceiveEventsLocked()>();

        if $z0 == 0 goto label1;

        $z1 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean mRequestEnhancedWebAccessibility>;

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $z2 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean mIsAutomation>;

        if $z2 != 0 goto label3;

        $r2 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

        $i0 = virtualinvoke $r2.<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>();

        $i1 = $i0 & 4;

        if $i1 == 0 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    private void updateDisplayColorAdjustmentSettingsLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        int $i0;
        android.content.Context $r2;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        $i0 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        staticinvoke <com.android.server.accessibility.DisplayAdjustmentUtils: void applyAdjustments(android.content.Context,int)>($r2, $i0);

        return;
    }

    private boolean hasRunningServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0, $z1, $z2;
        java.util.Set $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $r2 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = r1.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.Set mBindingServices>;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private android.view.MagnificationSpec getCompatibleMagnificationSpecLocked(int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        android.os.IBinder r1;
        android.util.SparseArray $r2, $r7;
        java.lang.Object $r3, $r8;
        android.view.WindowManagerInternal $r4;
        android.view.MagnificationSpec $r5;
        com.android.server.accessibility.AccessibilityManagerService$UserState $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mGlobalWindowTokens>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.os.IBinder) $r3;

        if r1 != null goto label1;

        $r6 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        $r7 = $r6.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.util.SparseArray mWindowTokens>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.os.IBinder) $r8;

     label1:
        if r1 == null goto label2;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.view.WindowManagerInternal mWindowManagerService>;

        $r5 = virtualinvoke $r4.<android.view.WindowManagerInternal: android.view.MagnificationSpec getCompatibleMagnificationSpecForWindow(android.os.IBinder)>(r1);

        return $r5;

     label2:
        return null;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.Object r4, $r9, $r17, $r23, $r52;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, i8;
        com.android.server.accessibility.AccessibilityManagerService$UserState r5;
        com.android.server.accessibility.AccessibilityManagerService$Service r6, $r47, $r59;
        java.lang.Throwable r7, $r60;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r8, $r12, $r13, $r15;
        android.util.SparseArray $r10, $r24;
        java.util.List $r11, $r14, $r18;
        java.lang.String $r20, $r30, $r33, $r39, $r41, $r49;
        java.lang.StringBuilder $r25, $r26, $r27, $r28, $r29, $r32, $r34, $r36, $r37, $r40, $r42, $r43, $r44, $r45, $r50;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.CopyOnWriteArrayList $r51, $r57;
        android.view.accessibility.AccessibilityWindowInfo r61;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        staticinvoke <com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void access$1100(com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy,java.lang.String,java.lang.String)>($r8, "android.permission.DUMP", "dump");

        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r4 = $r9;

        entermonitor $r9;

     label01:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("ACCESSIBILITY MANAGER (dumpsys accessibility)");

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates>;

        i0 = virtualinvoke $r10.<android.util.SparseArray: int size()>();

        i1 = 0;

     label02:
        if i1 >= i0 goto label09;

        $r24 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mUserStates>;

        $r23 = virtualinvoke $r24.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r5 = (com.android.server.accessibility.AccessibilityManagerService$UserState) $r23;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User state[attributes:{id=");

        $i4 = r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r30);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", currentUser=");

        $i6 = r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: int mUserId>;

        $i5 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        if $i6 != $i5 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r33);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", accessibilityEnabled=");

        $z0 = r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsAccessibilityEnabled>;

        $r40 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r39);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", touchExplorationEnabled=");

        $z1 = r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsTouchExplorationEnabled>;

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r41);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", displayMagnificationEnabled=");

        $z2 = r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mIsDisplayMagnificationEnabled>;

        $r50 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r49);

        $r47 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: com.android.server.accessibility.AccessibilityManagerService$Service access$300(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r5);

        if $r47 == null goto label05;

        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", ");

        $r59 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService$UserState: com.android.server.accessibility.AccessibilityManagerService$Service access$300(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r5);

        virtualinvoke $r59.<com.android.server.accessibility.AccessibilityManagerService$Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

     label05:
        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("}");

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("           services:{");

        $r57 = r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        i2 = virtualinvoke $r57.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        i3 = 0;

     label06:
        if i3 >= i2 goto label08;

        if i3 <= 0 goto label07;

        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(", ");

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("                     ");

     label07:
        $r51 = r5.<com.android.server.accessibility.AccessibilityManagerService$UserState: java.util.concurrent.CopyOnWriteArrayList mBoundServices>;

        $r52 = virtualinvoke $r51.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(i3);

        r6 = (com.android.server.accessibility.AccessibilityManagerService$Service) $r52;

        virtualinvoke r6.<com.android.server.accessibility.AccessibilityManagerService$Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        i3 = i3 + 1;

        goto label06;

     label08:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("}]");

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        i1 = i1 + 1;

        goto label02;

     label09:
        $r12 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        $r11 = $r12.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        if $r11 == null goto label12;

        $r13 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        $r14 = $r13.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        i7 = interfaceinvoke $r14.<java.util.List: int size()>();

        i8 = 0;

     label10:
        if i8 >= i7 goto label12;

        if i8 <= 0 goto label11;

        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(char)>(44);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

     label11:
        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("Window[");

        $r15 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        $r18 = $r15.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        $r17 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i8);

        r61 = (android.view.accessibility.AccessibilityWindowInfo) $r17;

        $r20 = virtualinvoke r61.<android.view.accessibility.AccessibilityWindowInfo: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r20);

        virtualinvoke r2.<java.io.PrintWriter: java.io.PrintWriter append(char)>(93);

        i8 = i8 + 1;

        goto label10;

     label12:
        exitmonitor r4;

     label13:
        goto label16;

     label14:
        $r60 := @caughtexception;

        r7 = $r60;

        exitmonitor r4;

     label15:
        throw r7;

     label16:
        return;

        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    private com.android.server.accessibility.AccessibilityManagerService$PendingEvent obtainPendingEventLocked(android.view.KeyEvent, int, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.KeyEvent r1;
        int i0, i1;
        com.android.server.accessibility.AccessibilityManagerService$PendingEvent r2, $r5;
        android.util.Pools$Pool $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.Pools$Pool mPendingEventPool>;

        $r4 = interfaceinvoke $r3.<android.util.Pools$Pool: java.lang.Object acquire()>();

        r2 = (com.android.server.accessibility.AccessibilityManagerService$PendingEvent) $r4;

        if r2 != null goto label1;

        $r5 = new com.android.server.accessibility.AccessibilityManagerService$PendingEvent;

        specialinvoke $r5.<com.android.server.accessibility.AccessibilityManagerService$PendingEvent: void <init>(com.android.server.accessibility.AccessibilityManagerService$1)>(null);

        r2 = $r5;

     label1:
        r2.<com.android.server.accessibility.AccessibilityManagerService$PendingEvent: android.view.KeyEvent event> = r1;

        r2.<com.android.server.accessibility.AccessibilityManagerService$PendingEvent: int policyFlags> = i0;

        r2.<com.android.server.accessibility.AccessibilityManagerService$PendingEvent: int sequence> = i1;

        return r2;
    }

    private void recyclePendingEventLocked(com.android.server.accessibility.AccessibilityManagerService$PendingEvent)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$PendingEvent r1;
        android.util.Pools$Pool $r2;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$PendingEvent;

        virtualinvoke r1.<com.android.server.accessibility.AccessibilityManagerService$PendingEvent: void clear()>();

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.Pools$Pool mPendingEventPool>;

        interfaceinvoke $r2.<android.util.Pools$Pool: boolean release(java.lang.Object)>(r1);

        return;
    }

    private int findWindowIdLocked(android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.os.IBinder r1;
        int i0, i1, $i2, $i3;
        com.android.server.accessibility.AccessibilityManagerService$UserState r2;
        android.util.SparseArray $r3, $r4, $r5, $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mGlobalWindowTokens>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int indexOfValue(java.lang.Object)>(r1);

        if i0 < 0 goto label1;

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mGlobalWindowTokens>;

        $i3 = virtualinvoke $r6.<android.util.SparseArray: int keyAt(int)>(i0);

        return $i3;

     label1:
        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        $r4 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.util.SparseArray mWindowTokens>;

        i1 = virtualinvoke $r4.<android.util.SparseArray: int indexOfValue(java.lang.Object)>(r1);

        if i1 < 0 goto label2;

        $r5 = r2.<com.android.server.accessibility.AccessibilityManagerService$UserState: android.util.SparseArray mWindowTokens>;

        $i2 = virtualinvoke $r5.<android.util.SparseArray: int keyAt(int)>(i1);

        return $i2;

     label2:
        return -1;
    }

    private void ensureWindowsAvailableTimed()
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object r1, $r5, $r12;
        com.android.server.accessibility.AccessibilityManagerService$UserState r2;
        long l0, l1, $l2, l4;
        java.lang.Throwable r4, $r13;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r6, $r11;
        java.util.List $r7, $r10;
        com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback $r8, $r9;
        byte $b3;
        java.lang.InterruptedException $r14;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        $r7 = $r6.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        if $r7 == null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback mWindowsForAccessibilityCallback>;

        if $r8 != null goto label04;

        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r2);

     label04:
        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback mWindowsForAccessibilityCallback>;

        if $r9 != null goto label06;

        exitmonitor r1;

     label05:
        return;

     label06:
        l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label07:
        $r11 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        $r10 = $r11.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        if $r10 != null goto label13;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l0 = $l2 - l4;

        l1 = 5000L - l0;

        $b3 = l1 cmp 0L;

        if $b3 > 0 goto label09;

        exitmonitor r1;

     label08:
        return;

     label09:
        $r12 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        virtualinvoke $r12.<java.lang.Object: void wait(long)>(l1);

     label10:
        goto label12;

     label11:
        $r14 := @caughtexception;

     label12:
        goto label07;

     label13:
        exitmonitor r1;

     label14:
        goto label17;

     label15:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r1;

     label16:
        throw r4;

     label17:
        return;

        catch java.lang.InterruptedException from label09 to label10 with label11;
        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label05 with label15;
        catch java.lang.Throwable from label06 to label08 with label15;
        catch java.lang.Throwable from label09 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    static java.lang.Object access$000(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static int access$100(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int $i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService: int mCurrentUserId>;

        return $i0;
    }

    static com.android.server.accessibility.AccessibilityManagerService$UserState access$200(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getCurrentUserStateLocked()>();

        return $r1;
    }

    static boolean access$400(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readConfigurationForUserStateLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        return $z0;
    }

    static void access$500(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        return;
    }

    static com.android.server.accessibility.AccessibilityManagerService$UserState access$600(com.android.server.accessibility.AccessibilityManagerService, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        com.android.server.accessibility.AccessibilityManagerService$UserState $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState getUserStateLocked(int)>(i0);

        return $r1;
    }

    static void access$700(com.android.server.accessibility.AccessibilityManagerService, java.lang.String, java.util.Set, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        java.lang.String r1;
        java.util.Set r2;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Set;

        i0 := @parameter3: int;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void persistComponentNamesToSettingLocked(java.lang.String,java.util.Set,int)>(r1, r2, i0);

        return;
    }

    static void access$800(com.android.server.accessibility.AccessibilityManagerService, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void switchUser(int)>(i0);

        return;
    }

    static void access$900(com.android.server.accessibility.AccessibilityManagerService, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void removeUser(int)>(i0);

        return;
    }

    static android.content.Context access$1600(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.content.Context mContext>;

        return $r1;
    }

    static void access$1700(com.android.server.accessibility.AccessibilityManagerService, int, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void removeAccessibilityInteractionConnectionLocked(int,int)>(i0, i1);

        return;
    }

    static boolean access$1800(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $z0 = r0.<com.android.server.accessibility.AccessibilityManagerService: boolean mHasInputFilter>;

        return $z0;
    }

    static com.android.server.accessibility.AccessibilityInputFilter access$1900(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityInputFilter $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityInputFilter mInputFilter>;

        return $r1;
    }

    static android.os.RemoteCallbackList access$2000(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.os.RemoteCallbackList $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.RemoteCallbackList mGlobalClients>;

        return $r1;
    }

    static void access$2100(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateInputFilter(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        return;
    }

    static void access$2200(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$Service)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$Service;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void showEnableTouchExplorationDialog(com.android.server.accessibility.AccessibilityManagerService$Service)>(r1);

        return;
    }

    static com.android.server.accessibility.AccessibilityManagerService$InteractionBridge access$2300(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$InteractionBridge $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$InteractionBridge getInteractionBridgeLocked()>();

        return $r1;
    }

    static com.android.server.accessibility.AccessibilityManagerService$MainHandler access$2600(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler mMainHandler>;

        return $r1;
    }

    static int access$2808()
    {
        int $i0, $i1;

        $i0 = <com.android.server.accessibility.AccessibilityManagerService: int sIdCounter>;

        $i1 = $i0 + 1;

        <com.android.server.accessibility.AccessibilityManagerService: int sIdCounter> = $i1;

        return $i0;
    }

    static android.content.ComponentName access$2900()
    {
        android.content.ComponentName $r0;

        $r0 = <com.android.server.accessibility.AccessibilityManagerService: android.content.ComponentName sFakeAccessibilityServiceComponentName>;

        return $r0;
    }

    static void access$3000(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$Service, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        com.android.server.accessibility.AccessibilityManagerService$UserState r2;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$Service;

        r2 := @parameter2: com.android.server.accessibility.AccessibilityManagerService$UserState;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void removeServiceLocked(com.android.server.accessibility.AccessibilityManagerService$Service,com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1, r2);

        return;
    }

    static com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy access$3100(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy mSecurityPolicy>;

        return $r1;
    }

    static void access$3200(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$Service, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        com.android.server.accessibility.AccessibilityManagerService$UserState r2;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$Service;

        r2 := @parameter2: com.android.server.accessibility.AccessibilityManagerService$UserState;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void addServiceLocked(com.android.server.accessibility.AccessibilityManagerService$Service,com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1, r2);

        return;
    }

    static void access$3300(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void ensureWindowsAvailableTimed()>();

        return;
    }

    static android.graphics.Region access$3400(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.graphics.Region $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Region mTempRegion>;

        return $r1;
    }

    static android.view.MagnificationSpec access$3500(com.android.server.accessibility.AccessibilityManagerService, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        int i0;
        android.view.MagnificationSpec $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: android.view.MagnificationSpec getCompatibleMagnificationSpecLocked(int)>(i0);

        return $r1;
    }

    static android.view.WindowManagerInternal access$3600(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.WindowManagerInternal $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.view.WindowManagerInternal mWindowManagerService>;

        return $r1;
    }

    static android.util.SparseArray access$3700(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray mGlobalInteractionConnections>;

        return $r1;
    }

    static com.android.server.accessibility.AccessibilityManagerService$PendingEvent access$4200(com.android.server.accessibility.AccessibilityManagerService, android.view.KeyEvent, int, int)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.view.KeyEvent r1;
        int i0, i1;
        com.android.server.accessibility.AccessibilityManagerService$PendingEvent $r2;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$PendingEvent obtainPendingEventLocked(android.view.KeyEvent,int,int)>(r1, i0, i1);

        return $r2;
    }

    static void access$4300(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$PendingEvent)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$PendingEvent r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$PendingEvent;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void recyclePendingEventLocked(com.android.server.accessibility.AccessibilityManagerService$PendingEvent)>(r1);

        return;
    }

    static int access$4400(com.android.server.accessibility.AccessibilityManagerService, android.os.IBinder)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.os.IBinder r1;
        int $i0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: android.os.IBinder;

        $i0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: int findWindowIdLocked(android.os.IBinder)>(r1);

        return $i0;
    }

    static android.graphics.Rect access$4500(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.graphics.Rect $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Rect mTempRect>;

        return $r1;
    }

    static android.graphics.Point access$4600(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.graphics.Point $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.graphics.Point mTempPoint>;

        return $r1;
    }

    static com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback access$4700(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback mWindowsForAccessibilityCallback>;

        return $r1;
    }

    static android.os.UserManager access$4800(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        android.os.UserManager $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService: android.os.UserManager mUserManager>;

        return $r1;
    }

    static int access$4900()
    {
        int $i0;

        $i0 = <com.android.server.accessibility.AccessibilityManagerService: int OWN_PROCESS_ID>;

        return $i0;
    }

    static void access$5000(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void unbindAllServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        return;
    }

    static boolean access$5100(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readAccessibilityEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        return $z0;
    }

    static boolean access$5200(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readTouchExplorationEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        return $z0;
    }

    static boolean access$5300(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readDisplayMagnificationEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        return $z0;
    }

    static boolean access$5400(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readEnabledAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        return $z0;
    }

    static boolean access$5500(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readTouchExplorationGrantedAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        return $z0;
    }

    static boolean access$5600(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readEnhancedWebAccessibilityEnabledChangedLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        return $z0;
    }

    static boolean access$5700(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readDisplayColorAdjustmentSettingsLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        return $z0;
    }

    static void access$5800(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: void updateDisplayColorAdjustmentSettingsLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        return;
    }

    static boolean access$5900(com.android.server.accessibility.AccessibilityManagerService, com.android.server.accessibility.AccessibilityManagerService$UserState)
    {
        com.android.server.accessibility.AccessibilityManagerService r0;
        com.android.server.accessibility.AccessibilityManagerService$UserState r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r1 := @parameter1: com.android.server.accessibility.AccessibilityManagerService$UserState;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService: boolean readHighTextContrastEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)>(r1);

        return $z0;
    }

    static void <clinit>()
    {
        android.content.ComponentName $r0;
        int $i0;

        <com.android.server.accessibility.AccessibilityManagerService: int WINDOW_ID_UNKNOWN> = -1;

        <com.android.server.accessibility.AccessibilityManagerService: int MAX_POOL_SIZE> = 10;

        <com.android.server.accessibility.AccessibilityManagerService: char COMPONENT_NAME_SEPARATOR> = 58;

        <com.android.server.accessibility.AccessibilityManagerService: java.lang.String FUNCTION_DUMP> = "dump";

        <com.android.server.accessibility.AccessibilityManagerService: java.lang.String GET_WINDOW_TOKEN> = "getWindowToken";

        <com.android.server.accessibility.AccessibilityManagerService: java.lang.String TEMPORARY_ENABLE_ACCESSIBILITY_UNTIL_KEYGUARD_REMOVED> = "temporaryEnableAccessibilityStateUntilKeyguardRemoved";

        <com.android.server.accessibility.AccessibilityManagerService: java.lang.String FUNCTION_REGISTER_UI_TEST_AUTOMATION_SERVICE> = "registerUiTestAutomationService";

        <com.android.server.accessibility.AccessibilityManagerService: int WAIT_WINDOWS_TIMEOUT_MILLIS> = 5000;

        <com.android.server.accessibility.AccessibilityManagerService: int WAIT_FOR_USER_STATE_FULLY_INITIALIZED_MILLIS> = 3000;

        <com.android.server.accessibility.AccessibilityManagerService: java.lang.String LOG_TAG> = "AccessibilityManagerService";

        <com.android.server.accessibility.AccessibilityManagerService: boolean DEBUG> = 0;

        $r0 = new android.content.ComponentName;

        specialinvoke $r0.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("foo.bar", "FakeService");

        <com.android.server.accessibility.AccessibilityManagerService: android.content.ComponentName sFakeAccessibilityServiceComponentName> = $r0;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        <com.android.server.accessibility.AccessibilityManagerService: int OWN_PROCESS_ID> = $i0;

        <com.android.server.accessibility.AccessibilityManagerService: int sIdCounter> = 0;

        return;
    }
}
