public class com.android.server.wm.WindowManagerService extends android.view.IWindowManager$Stub implements com.android.server.Watchdog$Monitor, android.view.WindowManagerPolicy$WindowManagerFuncs
{
    static final java.lang.String TAG;
    static final boolean DEBUG;
    static final boolean DEBUG_ADD_REMOVE;
    static final boolean DEBUG_FOCUS;
    static final boolean DEBUG_FOCUS_LIGHT;
    static final boolean DEBUG_ANIM;
    static final boolean DEBUG_LAYOUT;
    static final boolean DEBUG_RESIZE;
    static final boolean DEBUG_LAYERS;
    static final boolean DEBUG_INPUT;
    static final boolean DEBUG_INPUT_METHOD;
    static final boolean DEBUG_VISIBILITY;
    static final boolean DEBUG_WINDOW_MOVEMENT;
    static final boolean DEBUG_TOKEN_MOVEMENT;
    static final boolean DEBUG_ORIENTATION;
    static final boolean DEBUG_APP_ORIENTATION;
    static final boolean DEBUG_CONFIGURATION;
    static final boolean DEBUG_APP_TRANSITIONS;
    static final boolean DEBUG_STARTING_WINDOW;
    static final boolean DEBUG_REORDER;
    static final boolean DEBUG_WALLPAPER;
    static final boolean DEBUG_WALLPAPER_LIGHT;
    static final boolean DEBUG_DRAG;
    static final boolean DEBUG_SCREEN_ON;
    static final boolean DEBUG_SCREENSHOT;
    static final boolean DEBUG_BOOT;
    static final boolean DEBUG_LAYOUT_REPEATS;
    static final boolean DEBUG_SURFACE_TRACE;
    static final boolean DEBUG_WINDOW_TRACE;
    static final boolean DEBUG_TASK_MOVEMENT;
    static final boolean DEBUG_STACK;
    static final boolean DEBUG_DISPLAY;
    static final boolean SHOW_SURFACE_ALLOC;
    static final boolean SHOW_TRANSACTIONS;
    static final boolean SHOW_LIGHT_TRANSACTIONS;
    static final boolean HIDE_STACK_CRAWLS;
    static final int LAYOUT_REPEAT_THRESHOLD;
    static final boolean PROFILE_ORIENTATION;
    static final boolean localLOGV;
    static final int TYPE_LAYER_MULTIPLIER;
    static final int TYPE_LAYER_OFFSET;
    static final int WINDOW_LAYER_MULTIPLIER;
    static final int LAYER_OFFSET_DIM;
    static final int LAYER_OFFSET_BLUR;
    static final int LAYER_OFFSET_FOCUSED_STACK;
    static final int LAYER_OFFSET_THUMBNAIL;
    static final int FREEZE_LAYER;
    static final int MASK_LAYER;
    static final int MAX_ANIMATION_DURATION;
    static final int DEFAULT_FADE_IN_OUT_DURATION;
    static final int WINDOW_FREEZE_TIMEOUT_DURATION;
    static final boolean CUSTOM_SCREEN_ROTATION;
    private static final int INPUT_DEVICES_READY_FOR_SAFE_MODE_DETECTION_TIMEOUT_MILLIS;
    static final long DEFAULT_INPUT_DISPATCHING_TIMEOUT_NANOS;
    private static final int BOOT_ANIMATION_POLL_INTERVAL;
    private static final java.lang.String BOOT_ANIMATION_SERVICE;
    public static final float STACK_WEIGHT_MIN;
    public static final float STACK_WEIGHT_MAX;
    static final int UPDATE_FOCUS_NORMAL;
    static final int UPDATE_FOCUS_WILL_ASSIGN_LAYERS;
    static final int UPDATE_FOCUS_PLACING_SURFACES;
    static final int UPDATE_FOCUS_WILL_PLACE_SURFACES;
    private static final java.lang.String SYSTEM_SECURE;
    private static final java.lang.String SYSTEM_DEBUGGABLE;
    private static final java.lang.String DENSITY_OVERRIDE;
    private static final java.lang.String SIZE_OVERRIDE;
    private static final int MAX_SCREENSHOT_RETRIES;
    private static final int SYSTEM_UI_FLAGS_LAYOUT_STABLE_FULLSCREEN;
    private static final java.lang.String PROPERTY_EMULATOR_CIRCULAR;
    private final com.android.server.wm.KeyguardDisableHandler mKeyguardDisableHandler;
    final android.content.BroadcastReceiver mBroadcastReceiver;
    int mCurrentUserId;
    int[] mCurrentProfileIds;
    final android.content.Context mContext;
    final boolean mHaveInputMethods;
    final boolean mHasPermanentDpad;
    final boolean mAllowBootMessages;
    final boolean mLimitedAlphaCompositing;
    final android.view.WindowManagerPolicy mPolicy;
    final android.app.IActivityManager mActivityManager;
    final com.android.internal.app.IBatteryStats mBatteryStats;
    final android.app.AppOpsManager mAppOps;
    final com.android.server.wm.DisplaySettings mDisplaySettings;
    final android.util.ArraySet mSessions;
    final java.util.HashMap mWindowMap;
    final java.util.HashMap mTokenMap;
    final java.util.ArrayList mFinishedStarting;
    final java.util.ArrayList mFakeWindows;
    final java.util.ArrayList mResizingWindows;
    final java.util.ArrayList mPendingRemove;
    final android.util.ArraySet mPendingStacksRemove;
    com.android.server.wm.WindowState[] mPendingRemoveTmp;
    final java.util.ArrayList mDestroySurface;
    java.util.ArrayList mLosingFocus;
    java.util.ArrayList mForceRemoves;
    java.util.ArrayList mWaitingForDrawn;
    java.lang.Runnable mWaitingForDrawnCallback;
    final java.util.ArrayList mRelayoutWhileAnimating;
    com.android.server.wm.WindowState[] mRebuildTmp;
    android.util.SparseArray mScreenCaptureDisabled;
    com.android.internal.view.IInputMethodManager mInputMethodManager;
    com.android.server.wm.AccessibilityController mAccessibilityController;
    final android.view.SurfaceSession mFxSession;
    com.android.server.wm.Watermark mWatermark;
    com.android.server.wm.StrictModeFlash mStrictModeFlash;
    com.android.server.wm.CircularDisplayMask mCircularDisplayMask;
    com.android.server.wm.EmulatorDisplayOverlay mEmulatorDisplayOverlay;
    com.android.server.wm.FocusedStackFrame mFocusedStackFrame;
    int mFocusedStackLayer;
    final float[] mTmpFloats;
    final android.graphics.Rect mTmpContentRect;
    boolean mDisplayReady;
    boolean mSafeMode;
    boolean mDisplayEnabled;
    boolean mSystemBooted;
    boolean mForceDisplayEnabled;
    boolean mShowingBootMessages;
    boolean mBootAnimationStopped;
    java.lang.String mLastANRState;
    android.util.SparseArray mDisplayContents;
    int mRotation;
    int mForcedAppOrientation;
    boolean mAltOrientation;
    private boolean mKeyguardWaitingForActivityDrawn;
    java.util.ArrayList mRotationWatchers;
    int mDeferredRotationPauseCount;
    int mSystemDecorLayer;
    final android.graphics.Rect mScreenRect;
    boolean mTraversalScheduled;
    boolean mDisplayFrozen;
    long mDisplayFreezeTime;
    int mLastDisplayFreezeDuration;
    java.lang.Object mLastFinishedFreezeSource;
    boolean mWaitingForConfig;
    boolean mWindowsFreezingScreen;
    boolean mClientFreezingScreen;
    int mAppsFreezingScreen;
    int mLastWindowForcedOrientation;
    int mLayoutSeq;
    int mLastStatusBarVisibility;
    boolean mFocusMayChange;
    android.content.res.Configuration mCurConfiguration;
    private final android.os.PowerManager$WakeLock mScreenFrozenLock;
    final com.android.server.wm.AppTransition mAppTransition;
    boolean mStartingIconInTransition;
    boolean mSkipAppTransitionAnimation;
    final android.util.ArraySet mOpeningApps;
    final android.util.ArraySet mClosingApps;
    boolean mIsTouchDevice;
    final android.util.DisplayMetrics mDisplayMetrics;
    final android.util.DisplayMetrics mRealDisplayMetrics;
    final android.util.DisplayMetrics mTmpDisplayMetrics;
    final android.util.DisplayMetrics mCompatDisplayMetrics;
    final com.android.server.wm.WindowManagerService$H mH;
    final android.view.Choreographer mChoreographer;
    com.android.server.wm.WindowState mCurrentFocus;
    com.android.server.wm.WindowState mLastFocus;
    com.android.server.wm.WindowState mInputMethodTarget;
    boolean mInputMethodTargetWaitingAnim;
    int mInputMethodAnimLayerAdjustment;
    com.android.server.wm.WindowState mInputMethodWindow;
    final java.util.ArrayList mInputMethodDialogs;
    boolean mHardKeyboardAvailable;
    boolean mShowImeWithHardKeyboard;
    com.android.server.wm.WindowManagerService$OnHardKeyboardStatusChangeListener mHardKeyboardStatusChangeListener;
    com.android.server.wm.WindowManagerService$SettingsObserver mSettingsObserver;
    final java.util.ArrayList mWallpaperTokens;
    com.android.server.wm.WindowState mWallpaperTarget;
    com.android.server.wm.WindowState mLowerWallpaperTarget;
    com.android.server.wm.WindowState mUpperWallpaperTarget;
    int mWallpaperAnimLayerAdjustment;
    float mLastWallpaperX;
    float mLastWallpaperY;
    float mLastWallpaperXStep;
    float mLastWallpaperYStep;
    int mLastWallpaperDisplayOffsetX;
    int mLastWallpaperDisplayOffsetY;
    com.android.server.wm.WindowState mWaitingOnWallpaper;
    long mLastWallpaperTimeoutTime;
    static final long WALLPAPER_TIMEOUT;
    static final long WALLPAPER_TIMEOUT_RECOVERY;
    boolean mAnimateWallpaperWithTarget;
    com.android.server.wm.AppWindowToken mFocusedApp;
    android.os.PowerManager mPowerManager;
    android.os.PowerManagerInternal mPowerManagerInternal;
    float mWindowAnimationScaleSetting;
    float mTransitionAnimationScaleSetting;
    float mAnimatorDurationScaleSetting;
    boolean mAnimationsDisabled;
    final com.android.server.input.InputManagerService mInputManager;
    final android.hardware.display.DisplayManagerInternal mDisplayManagerInternal;
    final android.hardware.display.DisplayManager mDisplayManager;
    com.android.server.wm.Session mHoldingScreenOn;
    android.os.PowerManager$WakeLock mHoldingScreenWakeLock;
    boolean mTurnOnScreen;
    com.android.server.wm.DragState mDragState;
    int mExitAnimId;
    int mEnterAnimId;
    final com.android.server.wm.WindowManagerService$LayoutFields mInnerFields;
    boolean mAnimationScheduled;
    private int mTransactionSequence;
    private int mLayoutRepeatCount;
    final com.android.server.wm.WindowAnimator mAnimator;
    android.util.SparseArray mTaskIdToTask;
    android.util.SparseArray mStackIdToStack;
    private final com.android.server.wm.PointerEventDispatcher mPointerEventDispatcher;
    private android.view.WindowContentFrameStats mTempWindowRenderStats;
    boolean mInTouchMode;
    private com.android.server.wm.ViewServer mViewServer;
    private final java.util.ArrayList mWindowChangeListeners;
    private boolean mWindowsChanged;
    final android.content.res.Configuration mTempConfiguration;
    float mCompatibleScreenScale;
    final boolean mOnlyCore;
    static final int ADJUST_WALLPAPER_LAYERS_CHANGED;
    static final int ADJUST_WALLPAPER_VISIBILITY_CHANGED;
    final com.android.server.wm.InputMonitor mInputMonitor;
    private boolean mEventDispatchingEnabled;
    private boolean mInLayout;

    public static com.android.server.wm.WindowManagerService main(android.content.Context, com.android.server.input.InputManagerService, boolean, boolean, boolean)
    {
        android.content.Context r0;
        com.android.server.input.InputManagerService r1;
        boolean z0, z1, z2;
        com.android.server.wm.WindowManagerService[] r2;
        android.os.Handler $r3;
        com.android.server.wm.WindowManagerService$2 $r4;
        com.android.server.wm.WindowManagerService $r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.server.input.InputManagerService;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        r2 = newarray (com.android.server.wm.WindowManagerService)[1];

        $r3 = staticinvoke <com.android.server.DisplayThread: android.os.Handler getHandler()>();

        $r4 = new com.android.server.wm.WindowManagerService$2;

        specialinvoke $r4.<com.android.server.wm.WindowManagerService$2: void <init>(com.android.server.wm.WindowManagerService[],android.content.Context,com.android.server.input.InputManagerService,boolean,boolean,boolean)>(r2, r0, r1, z0, z1, z2);

        virtualinvoke $r3.<android.os.Handler: boolean runWithScissors(java.lang.Runnable,long)>($r4, 0L);

        $r5 = r2[0];

        return $r5;
    }

    private void initPolicy()
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.Handler $r1;
        com.android.server.wm.WindowManagerService$3 $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = staticinvoke <com.android.server.UiThread: android.os.Handler getHandler()>();

        $r2 = new com.android.server.wm.WindowManagerService$3;

        specialinvoke $r2.<com.android.server.wm.WindowManagerService$3: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        virtualinvoke $r1.<android.os.Handler: boolean runWithScissors(java.lang.Runnable,long)>($r2, 0L);

        return;
    }

    private void <init>(android.content.Context, com.android.server.input.InputManagerService, boolean, boolean, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        android.content.Context r1, $r59, $r86;
        com.android.server.input.InputManagerService r2, $r54;
        boolean z0, z1, z2, $z3, $z4, $z5;
        android.view.Display[] r3, r4;
        int i0, i1;
        android.view.Display r5, $r98;
        java.lang.Throwable r6, $r96;
        com.android.server.wm.WindowManagerService$1 $r7;
        int[] $r8;
        android.view.WindowManagerPolicy $r9, $r56, $r58;
        android.util.ArraySet $r10, $r18, $r33, $r34;
        java.util.HashMap $r11, $r12;
        java.util.ArrayList $r13, $r14, $r15, $r16, $r19, $r20, $r21, $r22, $r30, $r41, $r42, $r45;
        com.android.server.wm.WindowState[] $r17, $r24;
        android.util.SparseArray $r23, $r29, $r40, $r46;
        android.graphics.Rect $r25, $r27;
        float[] $r26;
        android.content.res.Configuration $r28, $r44;
        android.util.DisplayMetrics $r31, $r32, $r37, $r38;
        com.android.server.wm.WindowManagerService$H $r35, $r72;
        android.view.Choreographer $r36;
        com.android.server.wm.WindowManagerService$LayoutFields $r39;
        com.android.server.wm.InputMonitor $r43;
        android.content.res.Resources $r47, $r48;
        com.android.server.wm.DisplaySettings $r49, $r50;
        android.hardware.display.DisplayManagerInternal $r51;
        java.lang.Object $r52, $r61, $r67, $r69, $r73;
        android.view.InputChannel $r53;
        com.android.server.wm.PointerEventDispatcher $r55;
        com.android.server.wm.KeyguardDisableHandler $r57;
        android.view.SurfaceSession $r60, $r97;
        android.hardware.display.DisplayManager $r62, $r63;
        com.android.server.wm.WindowManagerService$4 $r64;
        android.os.PowerManagerInternal $r65, $r66, $r70;
        android.os.PowerManager $r68, $r76, $r92;
        android.app.IActivityManager $r71;
        com.android.internal.app.IBatteryStats $r74;
        android.os.PowerManager$WakeLock $r75, $r78, $r90, $r93;
        com.android.server.wm.AppTransition $r77;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.content.ContentResolver $r79, $r80, $r88;
        com.android.server.wm.WindowManagerService$5 $r81, r102;
        android.app.AppOpsManager $r82, $r83, $r84;
        android.content.BroadcastReceiver $r85;
        android.content.IntentFilter $r87, r103;
        com.android.server.wm.WindowManagerService$LocalService $r89;
        com.android.server.wm.WindowAnimator $r91;
        com.android.server.wm.WindowManagerService$SettingsObserver $r95;
        com.android.server.wm.DisplayContent $r99;
        com.android.server.wm.FocusedStackFrame $r100;
        com.android.server.Watchdog $r101;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.input.InputManagerService;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        specialinvoke r0.<android.view.IWindowManager$Stub: void <init>()>();

        $r7 = new com.android.server.wm.WindowManagerService$1;

        specialinvoke $r7.<com.android.server.wm.WindowManagerService$1: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: android.content.BroadcastReceiver mBroadcastReceiver> = $r7;

        $r8 = newarray (int)[1];

        $r8[0] = 0;

        r0.<com.android.server.wm.WindowManagerService: int[] mCurrentProfileIds> = $r8;

        $r9 = staticinvoke <com.android.internal.policy.PolicyManager: android.view.WindowManagerPolicy makeNewWindowManager()>();

        r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy> = $r9;

        $r10 = new android.util.ArraySet;

        specialinvoke $r10.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mSessions> = $r10;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap> = $r12;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap> = $r11;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mFinishedStarting> = $r14;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mFakeWindows> = $r13;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows> = $r16;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove> = $r15;

        $r18 = new android.util.ArraySet;

        specialinvoke $r18.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mPendingStacksRemove> = $r18;

        $r17 = newarray (com.android.server.wm.WindowState)[20];

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mPendingRemoveTmp> = $r17;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface> = $r20;

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mLosingFocus> = $r19;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWaitingForDrawn> = $r22;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRelayoutWhileAnimating> = $r21;

        $r24 = newarray (com.android.server.wm.WindowState)[20];

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mRebuildTmp> = $r24;

        $r23 = new android.util.SparseArray;

        specialinvoke $r23.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mScreenCaptureDisabled> = $r23;

        $r26 = newarray (float)[9];

        r0.<com.android.server.wm.WindowManagerService: float[] mTmpFloats> = $r26;

        $r25 = new android.graphics.Rect;

        specialinvoke $r25.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.graphics.Rect mTmpContentRect> = $r25;

        r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mForceDisplayEnabled> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mBootAnimationStopped> = 0;

        $r29 = new android.util.SparseArray;

        specialinvoke $r29.<android.util.SparseArray: void <init>(int)>(2);

        r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents> = $r29;

        r0.<com.android.server.wm.WindowManagerService: int mRotation> = 0;

        r0.<com.android.server.wm.WindowManagerService: int mForcedAppOrientation> = -1;

        r0.<com.android.server.wm.WindowManagerService: boolean mAltOrientation> = 0;

        $r30 = new java.util.ArrayList;

        specialinvoke $r30.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRotationWatchers> = $r30;

        r0.<com.android.server.wm.WindowManagerService: int mSystemDecorLayer> = 0;

        $r27 = new android.graphics.Rect;

        specialinvoke $r27.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.graphics.Rect mScreenRect> = $r27;

        r0.<com.android.server.wm.WindowManagerService: boolean mTraversalScheduled> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen> = 0;

        r0.<com.android.server.wm.WindowManagerService: long mDisplayFreezeTime> = 0L;

        r0.<com.android.server.wm.WindowManagerService: int mLastDisplayFreezeDuration> = 0;

        r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource> = null;

        r0.<com.android.server.wm.WindowManagerService: boolean mWaitingForConfig> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsFreezingScreen> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen> = 0;

        r0.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen> = 0;

        r0.<com.android.server.wm.WindowManagerService: int mLastWindowForcedOrientation> = -1;

        r0.<com.android.server.wm.WindowManagerService: int mLayoutSeq> = 0;

        r0.<com.android.server.wm.WindowManagerService: int mLastStatusBarVisibility> = 0;

        $r28 = new android.content.res.Configuration;

        specialinvoke $r28.<android.content.res.Configuration: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mCurConfiguration> = $r28;

        r0.<com.android.server.wm.WindowManagerService: boolean mStartingIconInTransition> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mSkipAppTransitionAnimation> = 0;

        $r33 = new android.util.ArraySet;

        specialinvoke $r33.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps> = $r33;

        $r34 = new android.util.ArraySet;

        specialinvoke $r34.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps> = $r34;

        $r31 = new android.util.DisplayMetrics;

        specialinvoke $r31.<android.util.DisplayMetrics: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.util.DisplayMetrics mDisplayMetrics> = $r31;

        $r32 = new android.util.DisplayMetrics;

        specialinvoke $r32.<android.util.DisplayMetrics: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.util.DisplayMetrics mRealDisplayMetrics> = $r32;

        $r37 = new android.util.DisplayMetrics;

        specialinvoke $r37.<android.util.DisplayMetrics: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.util.DisplayMetrics mTmpDisplayMetrics> = $r37;

        $r38 = new android.util.DisplayMetrics;

        specialinvoke $r38.<android.util.DisplayMetrics: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.util.DisplayMetrics mCompatDisplayMetrics> = $r38;

        $r35 = new com.android.server.wm.WindowManagerService$H;

        specialinvoke $r35.<com.android.server.wm.WindowManagerService$H: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH> = $r35;

        $r36 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

        r0.<com.android.server.wm.WindowManagerService: android.view.Choreographer mChoreographer> = $r36;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus> = null;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLastFocus> = null;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget> = null;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow> = null;

        $r41 = new java.util.ArrayList;

        specialinvoke $r41.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mInputMethodDialogs> = $r41;

        $r42 = new java.util.ArrayList;

        specialinvoke $r42.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens> = $r42;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget> = null;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget> = null;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mUpperWallpaperTarget> = null;

        r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperX> = -1.0F;

        r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperY> = -1.0F;

        r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperXStep> = -1.0F;

        r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperYStep> = -1.0F;

        r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetX> = -2147483648;

        r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetY> = -2147483648;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken mFocusedApp> = null;

        r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting> = 1.0F;

        r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting> = 1.0F;

        r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting> = 1.0F;

        r0.<com.android.server.wm.WindowManagerService: boolean mAnimationsDisabled> = 0;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState> = null;

        $r39 = new com.android.server.wm.WindowManagerService$LayoutFields;

        specialinvoke $r39.<com.android.server.wm.WindowManagerService$LayoutFields: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields> = $r39;

        $r40 = new android.util.SparseArray;

        specialinvoke $r40.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask> = $r40;

        $r46 = new android.util.SparseArray;

        specialinvoke $r46.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack> = $r46;

        r0.<com.android.server.wm.WindowManagerService: boolean mInTouchMode> = 1;

        $r45 = new java.util.ArrayList;

        specialinvoke $r45.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners> = $r45;

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 0;

        $r44 = new android.content.res.Configuration;

        specialinvoke $r44.<android.content.res.Configuration: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mTempConfiguration> = $r44;

        $r43 = new com.android.server.wm.InputMonitor;

        specialinvoke $r43.<com.android.server.wm.InputMonitor: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor> = $r43;

        r0.<com.android.server.wm.WindowManagerService: boolean mInLayout> = 0;

        r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext> = r1;

        r0.<com.android.server.wm.WindowManagerService: boolean mHaveInputMethods> = z0;

        r0.<com.android.server.wm.WindowManagerService: boolean mAllowBootMessages> = z1;

        r0.<com.android.server.wm.WindowManagerService: boolean mOnlyCore> = z2;

        $r48 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z4 = virtualinvoke $r48.<android.content.res.Resources: boolean getBoolean(int)>(17956877);

        r0.<com.android.server.wm.WindowManagerService: boolean mLimitedAlphaCompositing> = $z4;

        $r47 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z3 = virtualinvoke $r47.<android.content.res.Resources: boolean getBoolean(int)>(17956971);

        r0.<com.android.server.wm.WindowManagerService: boolean mHasPermanentDpad> = $z3;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager> = r2;

        $r52 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "android/hardware/display/DisplayManagerInternal");

        $r51 = (android.hardware.display.DisplayManagerInternal) $r52;

        r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal> = $r51;

        $r50 = new com.android.server.wm.DisplaySettings;

        specialinvoke $r50.<com.android.server.wm.DisplaySettings: void <init>(android.content.Context)>(r1);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplaySettings mDisplaySettings> = $r50;

        $r49 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplaySettings mDisplaySettings>;

        virtualinvoke $r49.<com.android.server.wm.DisplaySettings: void readSettingsLocked()>();

        $r56 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "android/view/WindowManagerPolicy", $r56);

        $r55 = new com.android.server.wm.PointerEventDispatcher;

        $r54 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        $r53 = virtualinvoke $r54.<com.android.server.input.InputManagerService: android.view.InputChannel monitorInput(java.lang.String)>("WindowManager");

        specialinvoke $r55.<com.android.server.wm.PointerEventDispatcher: void <init>(android.view.InputChannel)>($r53);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.PointerEventDispatcher mPointerEventDispatcher> = $r55;

        $r60 = new android.view.SurfaceSession;

        specialinvoke $r60.<android.view.SurfaceSession: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceSession mFxSession> = $r60;

        $r61 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        $r62 = (android.hardware.display.DisplayManager) $r61;

        r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManager mDisplayManager> = $r62;

        $r63 = r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManager mDisplayManager>;

        r3 = virtualinvoke $r63.<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()>();

        r4 = r3;

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r5 = r4[i1];

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void createDisplayContentLocked(android.view.Display)>(r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r57 = new com.android.server.wm.KeyguardDisableHandler;

        $r59 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r58 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        specialinvoke $r57.<com.android.server.wm.KeyguardDisableHandler: void <init>(android.content.Context,android.view.WindowManagerPolicy)>($r59, $r58);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.KeyguardDisableHandler mKeyguardDisableHandler> = $r57;

        $r67 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r68 = (android.os.PowerManager) $r67;

        r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager mPowerManager> = $r68;

        $r69 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "android/os/PowerManagerInternal");

        $r70 = (android.os.PowerManagerInternal) $r69;

        r0.<com.android.server.wm.WindowManagerService: android.os.PowerManagerInternal mPowerManagerInternal> = $r70;

        $r65 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        $r64 = new com.android.server.wm.WindowManagerService$4;

        specialinvoke $r64.<com.android.server.wm.WindowManagerService$4: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        virtualinvoke $r65.<android.os.PowerManagerInternal: void registerLowPowerModeObserver(android.os.PowerManagerInternal$LowPowerModeListener)>($r64);

        $r66 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        $z5 = virtualinvoke $r66.<android.os.PowerManagerInternal: boolean getLowPowerModeEnabled()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mAnimationsDisabled> = $z5;

        $r76 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager mPowerManager>;

        $r75 = virtualinvoke $r76.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "SCREEN_FROZEN");

        r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mScreenFrozenLock> = $r75;

        $r78 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mScreenFrozenLock>;

        virtualinvoke $r78.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        $r77 = new com.android.server.wm.AppTransition;

        $r72 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        specialinvoke $r77.<com.android.server.wm.AppTransition: void <init>(android.content.Context,android.os.Handler)>(r1, $r72);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition> = $r77;

        $r71 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        r0.<com.android.server.wm.WindowManagerService: android.app.IActivityManager mActivityManager> = $r71;

        $r74 = staticinvoke <com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>();

        r0.<com.android.server.wm.WindowManagerService: com.android.internal.app.IBatteryStats mBatteryStats> = $r74;

        $r73 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r82 = (android.app.AppOpsManager) $r73;

        r0.<com.android.server.wm.WindowManagerService: android.app.AppOpsManager mAppOps> = $r82;

        $r81 = new com.android.server.wm.WindowManagerService$5;

        specialinvoke $r81.<com.android.server.wm.WindowManagerService$5: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r102 = $r81;

        $r84 = r0.<com.android.server.wm.WindowManagerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r84.<android.app.AppOpsManager: void startWatchingMode(int,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)>(24, null, r102);

        $r83 = r0.<com.android.server.wm.WindowManagerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r83.<android.app.AppOpsManager: void startWatchingMode(int,java.lang.String,android.app.AppOpsManager$OnOpChangedListener)>(45, null, r102);

        $r79 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $f0 = r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting>;

        $f1 = staticinvoke <android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>($r79, "window_animation_scale", $f0);

        r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting> = $f1;

        $r80 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $f4 = r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting>;

        $f5 = staticinvoke <android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>($r80, "transition_animation_scale", $f4);

        r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting> = $f5;

        $r88 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $f3 = r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting>;

        $f2 = staticinvoke <android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>($r88, "animator_duration_scale", $f3);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void setAnimatorDurationScale(float)>($f2);

        $r87 = new android.content.IntentFilter;

        specialinvoke $r87.<android.content.IntentFilter: void <init>()>();

        r103 = $r87;

        virtualinvoke r103.<android.content.IntentFilter: void addAction(java.lang.String)>("android.app.action.DEVICE_POLICY_MANAGER_STATE_CHANGED");

        $r86 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r85 = r0.<com.android.server.wm.WindowManagerService: android.content.BroadcastReceiver mBroadcastReceiver>;

        virtualinvoke $r86.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r85, r103);

        $r95 = new com.android.server.wm.WindowManagerService$SettingsObserver;

        specialinvoke $r95.<com.android.server.wm.WindowManagerService$SettingsObserver: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$SettingsObserver mSettingsObserver> = $r95;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void updateShowImeWithHardKeyboard()>();

        $r92 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager mPowerManager>;

        $r93 = virtualinvoke $r92.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(536870922, "WindowManager");

        r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mHoldingScreenWakeLock> = $r93;

        $r90 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mHoldingScreenWakeLock>;

        virtualinvoke $r90.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        $r91 = new com.android.server.wm.WindowAnimator;

        specialinvoke $r91.<com.android.server.wm.WindowAnimator: void <init>(com.android.server.wm.WindowManagerService)>(r0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator> = $r91;

        $r89 = new com.android.server.wm.WindowManagerService$LocalService;

        specialinvoke $r89.<com.android.server.wm.WindowManagerService$LocalService: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.WindowManagerService$1)>(r0, null);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "android/view/WindowManagerInternal", $r89);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void initPolicy()>();

        $r101 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r101.<com.android.server.Watchdog: void addMonitor(com.android.server.Watchdog$Monitor)>(r0);

        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

     label3:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void createWatermarkInTransaction()>();

        $r100 = new com.android.server.wm.FocusedStackFrame;

        $r99 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r98 = virtualinvoke $r99.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $r97 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceSession mFxSession>;

        specialinvoke $r100.<com.android.server.wm.FocusedStackFrame: void <init>(android.view.Display,android.view.SurfaceSession)>($r98, $r97);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.FocusedStackFrame mFocusedStackFrame> = $r100;

     label4:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        goto label7;

     label5:
        $r96 := @caughtexception;

        r6 = $r96;

     label6:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        throw r6;

     label7:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void showCircularDisplayMaskIfNeeded()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void showEmulatorDisplayOverlayIfNeeded()>();

        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public com.android.server.wm.InputMonitor getInputMonitor()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.InputMonitor $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        return $r1;
    }

    public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        java.lang.RuntimeException r3, $r4;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Parcel;

        r2 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

     label1:
        $z0 = specialinvoke r0.<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r1, r2, i1);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $z1 = r3 instanceof java.lang.SecurityException;

        if $z1 != 0 goto label4;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Window Manager Crash", r3);

     label4:
        throw r3;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private void placeWindowAfter(com.android.server.wm.WindowState, com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, r2;
        com.android.server.wm.WindowList r3;
        int i0, $i1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 := @parameter1: com.android.server.wm.WindowState;

        r3 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        i0 = virtualinvoke r3.<com.android.server.wm.WindowList: int indexOf(java.lang.Object)>(r1);

        $i1 = i0 + 1;

        virtualinvoke r3.<com.android.server.wm.WindowList: void add(int,java.lang.Object)>($i1, r2);

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        return;
    }

    private void placeWindowBefore(com.android.server.wm.WindowState, com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, r2;
        com.android.server.wm.WindowList r3;
        int i0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 := @parameter1: com.android.server.wm.WindowState;

        r3 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        i0 = virtualinvoke r3.<com.android.server.wm.WindowList: int indexOf(java.lang.Object)>(r1);

        if i0 >= 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("placeWindowBefore: Unable to find ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r9);

        i0 = 0;

     label1:
        virtualinvoke r3.<com.android.server.wm.WindowList: void add(int,java.lang.Object)>(i0, r2);

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        return;
    }

    private int findIdxBasedOnAppTokens(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, r3;
        com.android.server.wm.WindowList r2;
        int i0, $i1;
        java.lang.Object $r4;
        com.android.server.wm.AppWindowToken $r5, $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        $i1 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        i0 = $i1 - 1;

     label1:
        if i0 < 0 goto label3;

        $r4 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.wm.WindowState) $r4;

        $r6 = r3.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r5 = r1.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r6 != $r5 goto label2;

        return i0;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        return -1;
    }

    com.android.server.wm.WindowList getTokenWindowsOnDisplay(com.android.server.wm.WindowToken, com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowToken r1;
        com.android.server.wm.DisplayContent r2, $r9;
        com.android.server.wm.WindowList r3, $r5, $r6, $r7;
        int i0, i1;
        com.android.server.wm.WindowState r4;
        java.lang.Object $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowToken;

        r2 := @parameter1: com.android.server.wm.DisplayContent;

        $r5 = new com.android.server.wm.WindowList;

        specialinvoke $r5.<com.android.server.wm.WindowList: void <init>()>();

        r3 = $r5;

        $r6 = r1.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        i0 = virtualinvoke $r6.<com.android.server.wm.WindowList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r7 = r1.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r4 = (com.android.server.wm.WindowState) $r8;

        $r9 = virtualinvoke r4.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if $r9 != r2 goto label2;

        virtualinvoke r3.<com.android.server.wm.WindowList: boolean add(java.lang.Object)>(r4);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r3;
    }

    private int indexOfWinInWindowList(com.android.server.wm.WindowState, com.android.server.wm.WindowList)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, r3;
        com.android.server.wm.WindowList r2, $r5, $r6;
        int i0, $i1, $i2;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 := @parameter1: com.android.server.wm.WindowList;

        $i1 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        i0 = $i1 - 1;

     label1:
        if i0 < 0 goto label4;

        $r4 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.wm.WindowState) $r4;

        if r3 != r1 goto label2;

        return i0;

     label2:
        $r5 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        $z0 = virtualinvoke $r5.<com.android.server.wm.WindowList: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r6 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        $i2 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int indexOfWinInWindowList(com.android.server.wm.WindowState,com.android.server.wm.WindowList)>(r1, $r6);

        if $i2 < 0 goto label3;

        return i0;

     label3:
        i0 = i0 + -1;

        goto label1;

     label4:
        return -1;
    }

    private int addAppWindowToListLocked(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, r7, r8, r11, $r42, $r43, r46, r55, r56;
        android.view.IWindow r2, $r13, $r26;
        com.android.server.wm.WindowToken r3, r49, r54;
        com.android.server.wm.DisplayContent r4;
        com.android.server.wm.WindowList r5, r6, $r16, $r18, $r37, $r41, $r44, r48, r50, r53;
        int i0, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, i22, i23, i24;
        byte b1;
        com.android.server.wm.AppTokenList r9, $r33, r51;
        com.android.server.wm.AppWindowToken r10, r45, r52;
        boolean $z0, $z1;
        java.lang.Object $r12, $r17, $r19, $r21, $r22, $r23, $r25, $r28, $r29, $r31, $r32, $r35, $r36, $r39, $r40;
        android.os.IBinder $r14, $r24;
        java.util.HashMap $r15, $r27;
        com.android.server.wm.Task $r20, $r30, $r34;
        android.view.WindowManager$LayoutParams $r38;
        java.util.ArrayList r47;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 = r1.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        r3 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        r4 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r4 != null goto label01;

        return 0;

     label01:
        r5 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        i0 = virtualinvoke r5.<com.android.server.wm.WindowList: int size()>();

        r6 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getTokenWindowsOnDisplay(com.android.server.wm.WindowToken,com.android.server.wm.DisplayContent)>(r3, r4);

        b1 = 0;

        i2 = virtualinvoke r6.<com.android.server.wm.WindowList: int size()>();

        $z0 = virtualinvoke r6.<com.android.server.wm.WindowList: boolean isEmpty()>();

        if $z0 != 0 goto label07;

        $r38 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i15 = $r38.<android.view.WindowManager$LayoutParams: int type>;

        if $i15 != 1 goto label02;

        $r40 = virtualinvoke r6.<com.android.server.wm.WindowList: java.lang.Object get(int)>(0);

        r7 = (com.android.server.wm.WindowState) $r40;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void placeWindowBefore(com.android.server.wm.WindowState,com.android.server.wm.WindowState)>(r7, r1);

        $r41 = r3.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        i18 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int indexOfWinInWindowList(com.android.server.wm.WindowState,com.android.server.wm.WindowList)>(r7, $r41);

        goto label06;

     label02:
        r45 = r1.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $i16 = i2 - 1;

        $r39 = virtualinvoke r6.<com.android.server.wm.WindowList: java.lang.Object get(int)>($i16);

        r8 = (com.android.server.wm.WindowState) $r39;

        if r45 == null goto label03;

        $r43 = r45.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow>;

        if r8 != $r43 goto label03;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void placeWindowBefore(com.android.server.wm.WindowState,com.android.server.wm.WindowState)>(r8, r1);

        $r44 = r3.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        i18 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int indexOfWinInWindowList(com.android.server.wm.WindowState,com.android.server.wm.WindowList)>(r8, $r44);

        goto label06;

     label03:
        i3 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int findIdxBasedOnAppTokens(com.android.server.wm.WindowState)>(r1);

        $i14 = i3 + 1;

        virtualinvoke r5.<com.android.server.wm.WindowList: void add(int,java.lang.Object)>($i14, r1);

        if i3 >= 0 goto label04;

        i18 = 0;

        goto label05;

     label04:
        $r36 = virtualinvoke r5.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        $r42 = (com.android.server.wm.WindowState) $r36;

        $r37 = r3.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        $i17 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int indexOfWinInWindowList(com.android.server.wm.WindowState,com.android.server.wm.WindowList)>($r42, $r37);

        i18 = $i17 + 1;

     label05:
        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

     label06:
        return i18;

     label07:
        r46 = null;

        r47 = virtualinvoke r4.<com.android.server.wm.DisplayContent: java.util.ArrayList getTasks()>();

        i4 = -1;

        $i5 = virtualinvoke r47.<java.util.ArrayList: int size()>();

        i19 = $i5 - 1;

     label08:
        if i19 < 0 goto label14;

        $r31 = virtualinvoke r47.<java.util.ArrayList: java.lang.Object get(int)>(i19);

        $r30 = (com.android.server.wm.Task) $r31;

        r9 = $r30.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        $i11 = virtualinvoke r9.<com.android.server.wm.AppTokenList: int size()>();

        i4 = $i11 - 1;

     label09:
        if i4 < 0 goto label12;

        $r29 = virtualinvoke r9.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i4);

        r10 = (com.android.server.wm.AppWindowToken) $r29;

        if r10 != r3 goto label10;

        i4 = i4 + -1;

        if i4 >= 0 goto label12;

        i19 = i19 + -1;

        if i19 < 0 goto label12;

        $r35 = virtualinvoke r47.<java.util.ArrayList: java.lang.Object get(int)>(i19);

        $r34 = (com.android.server.wm.Task) $r35;

        $r33 = $r34.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        $i13 = virtualinvoke $r33.<com.android.server.wm.AppTokenList: int size()>();

        i4 = $i13 - 1;

        goto label12;

     label10:
        r48 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getTokenWindowsOnDisplay(com.android.server.wm.WindowToken,com.android.server.wm.DisplayContent)>(r10, r4);

        $z1 = r10.<com.android.server.wm.AppWindowToken: boolean sendingToBottom>;

        if $z1 != 0 goto label11;

        $i12 = virtualinvoke r48.<com.android.server.wm.WindowList: int size()>();

        if $i12 <= 0 goto label11;

        $r32 = virtualinvoke r48.<com.android.server.wm.WindowList: java.lang.Object get(int)>(0);

        r46 = (com.android.server.wm.WindowState) $r32;

     label11:
        i4 = i4 + -1;

        goto label09;

     label12:
        if i4 < 0 goto label13;

        goto label14;

     label13:
        i19 = i19 + -1;

        goto label08;

     label14:
        if r46 == null goto label16;

        $r27 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $r26 = r46.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r24 = interfaceinvoke $r26.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r25 = virtualinvoke $r27.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r24);

        r49 = (com.android.server.wm.WindowToken) $r25;

        if r49 == null goto label15;

        r50 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getTokenWindowsOnDisplay(com.android.server.wm.WindowToken,com.android.server.wm.DisplayContent)>(r49, r4);

        i20 = virtualinvoke r50.<com.android.server.wm.WindowList: int size()>();

        if i20 <= 0 goto label15;

        $r28 = virtualinvoke r50.<com.android.server.wm.WindowList: java.lang.Object get(int)>(0);

        r11 = (com.android.server.wm.WindowState) $r28;

        $i10 = r11.<com.android.server.wm.WindowState: int mSubLayer>;

        if $i10 >= 0 goto label15;

        r46 = r11;

     label15:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void placeWindowBefore(com.android.server.wm.WindowState,com.android.server.wm.WindowState)>(r46, r1);

        return b1;

     label16:
        if i19 < 0 goto label21;

        $r22 = virtualinvoke r47.<java.util.ArrayList: java.lang.Object get(int)>(i19);

        $r20 = (com.android.server.wm.Task) $r22;

        r51 = $r20.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

     label17:
        if i4 < 0 goto label19;

        $r21 = virtualinvoke r51.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i4);

        r52 = (com.android.server.wm.AppWindowToken) $r21;

        r53 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getTokenWindowsOnDisplay(com.android.server.wm.WindowToken,com.android.server.wm.DisplayContent)>(r52, r4);

        i21 = virtualinvoke r53.<com.android.server.wm.WindowList: int size()>();

        if i21 <= 0 goto label18;

        $i9 = i21 - 1;

        $r23 = virtualinvoke r53.<com.android.server.wm.WindowList: java.lang.Object get(int)>($i9);

        r46 = (com.android.server.wm.WindowState) $r23;

        goto label19;

     label18:
        i4 = i4 + -1;

        goto label17;

     label19:
        if i4 < 0 goto label20;

        goto label21;

     label20:
        i19 = i19 + -1;

        goto label16;

     label21:
        if r46 == null goto label23;

        $r15 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $r13 = r46.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r14 = interfaceinvoke $r13.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r17 = virtualinvoke $r15.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14);

        r54 = (com.android.server.wm.WindowToken) $r17;

        if r54 == null goto label22;

        $r16 = r54.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        i22 = virtualinvoke $r16.<com.android.server.wm.WindowList: int size()>();

        if i22 <= 0 goto label22;

        $r18 = r54.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        $i7 = i22 - 1;

        $r19 = virtualinvoke $r18.<com.android.server.wm.WindowList: java.lang.Object get(int)>($i7);

        r55 = (com.android.server.wm.WindowState) $r19;

        $i8 = r55.<com.android.server.wm.WindowState: int mSubLayer>;

        if $i8 < 0 goto label22;

        r46 = r55;

     label22:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void placeWindowAfter(com.android.server.wm.WindowState,com.android.server.wm.WindowState)>(r46, r1);

        return b1;

     label23:
        i23 = r1.<com.android.server.wm.WindowState: int mBaseLayer>;

        i24 = 0;

     label24:
        if i24 >= i0 goto label26;

        $r12 = virtualinvoke r5.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i24);

        r56 = (com.android.server.wm.WindowState) $r12;

        $i6 = r56.<com.android.server.wm.WindowState: int mBaseLayer>;

        if $i6 <= i23 goto label25;

        goto label26;

     label25:
        i24 = i24 + 1;

        goto label24;

     label26:
        virtualinvoke r5.<com.android.server.wm.WindowList: void add(int,java.lang.Object)>(i24, r1);

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        return b1;
    }

    private void addFreeWindowToListLocked(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, $r4;
        com.android.server.wm.WindowList r2;
        int i0, i1, $i2, $i3, i4;
        java.lang.Object $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        i0 = r1.<com.android.server.wm.WindowState: int mBaseLayer>;

        $i2 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        i1 = $i2 - 1;

     label1:
        if i1 < 0 goto label3;

        $r3 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.wm.WindowState) $r3;

        $i3 = $r4.<com.android.server.wm.WindowState: int mBaseLayer>;

        if $i3 > i0 goto label2;

        goto label3;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        i4 = i1 + 1;

        virtualinvoke r2.<com.android.server.wm.WindowList: void add(int,java.lang.Object)>(i4, r1);

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        return;
    }

    private void addAttachedWindowToListLocked(com.android.server.wm.WindowState, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, r4, r6, r7, $r8, $r13;
        boolean z0;
        com.android.server.wm.WindowToken r2;
        com.android.server.wm.DisplayContent r3;
        com.android.server.wm.WindowList r5, $r9, $r10, $r12;
        int i0, i1, i2, i3, i4;
        java.lang.Object $r11;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z0 := @parameter1: boolean;

        r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        r3 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r3 != null goto label01;

        return;

     label01:
        r4 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mAttachedWindow>;

        r5 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getTokenWindowsOnDisplay(com.android.server.wm.WindowToken,com.android.server.wm.DisplayContent)>(r2, r3);

        i0 = virtualinvoke r5.<com.android.server.wm.WindowList: int size()>();

        i1 = r1.<com.android.server.wm.WindowState: int mSubLayer>;

        i2 = -2147483648;

        r6 = null;

        i3 = 0;

     label02:
        if i3 >= i0 goto label10;

        $r11 = virtualinvoke r5.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.wm.WindowState) $r11;

        i4 = r7.<com.android.server.wm.WindowState: int mSubLayer>;

        if i4 < i2 goto label03;

        i2 = i4;

        r6 = r7;

     label03:
        if i1 >= 0 goto label07;

        if i4 < i1 goto label09;

        if z0 == 0 goto label04;

        $r12 = r2.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        virtualinvoke $r12.<com.android.server.wm.WindowList: void add(int,java.lang.Object)>(i3, r1);

     label04:
        if i4 < 0 goto label05;

        $r13 = r4;

        goto label06;

     label05:
        $r13 = r7;

     label06:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void placeWindowBefore(com.android.server.wm.WindowState,com.android.server.wm.WindowState)>($r13, r1);

        goto label10;

     label07:
        if i4 <= i1 goto label09;

        if z0 == 0 goto label08;

        $r10 = r2.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        virtualinvoke $r10.<com.android.server.wm.WindowList: void add(int,java.lang.Object)>(i3, r1);

     label08:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void placeWindowBefore(com.android.server.wm.WindowState,com.android.server.wm.WindowState)>(r7, r1);

        goto label10;

     label09:
        i3 = i3 + 1;

        goto label02;

     label10:
        if i3 < i0 goto label15;

        if z0 == 0 goto label11;

        $r9 = r2.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        virtualinvoke $r9.<com.android.server.wm.WindowList: boolean add(java.lang.Object)>(r1);

     label11:
        if i1 >= 0 goto label12;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void placeWindowBefore(com.android.server.wm.WindowState,com.android.server.wm.WindowState)>(r4, r1);

        goto label15;

     label12:
        if i2 < 0 goto label13;

        $r8 = r6;

        goto label14;

     label13:
        $r8 = r4;

     label14:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void placeWindowAfter(com.android.server.wm.WindowState,com.android.server.wm.WindowState)>($r8, r1);

     label15:
        return;
    }

    private void addWindowToListInOrderLocked(com.android.server.wm.WindowState, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, $r3;
        boolean z0;
        com.android.server.wm.WindowToken r2;
        int i0;
        com.android.server.wm.AppWindowToken $r4, $r5, $r7;
        com.android.server.wm.WindowList $r6, $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z0 := @parameter1: boolean;

        $r3 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mAttachedWindow>;

        if $r3 != null goto label4;

        r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        i0 = 0;

        $r7 = r2.<com.android.server.wm.WindowToken: com.android.server.wm.AppWindowToken appWindowToken>;

        if $r7 == null goto label1;

        i0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int addAppWindowToListLocked(com.android.server.wm.WindowState)>(r1);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void addFreeWindowToListLocked(com.android.server.wm.WindowState)>(r1);

     label2:
        if z0 == 0 goto label3;

        $r8 = r2.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        virtualinvoke $r8.<com.android.server.wm.WindowList: void add(int,java.lang.Object)>(i0, r1);

     label3:
        goto label5;

     label4:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void addAttachedWindowToListLocked(com.android.server.wm.WindowState,boolean)>(r1, z0);

     label5:
        $r4 = r1.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r4 == null goto label6;

        if z0 == 0 goto label6;

        $r5 = r1.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r6 = $r5.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        virtualinvoke $r6.<com.android.server.wm.WindowList: boolean add(java.lang.Object)>(r1);

     label6:
        return;
    }

    static boolean canBeImeTarget(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowState r0;
        int i0, $i1, $i2;
        android.view.WindowManager$LayoutParams $r1, $r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.WindowState;

        $r1 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r1.<android.view.WindowManager$LayoutParams: int flags>;

        i0 = $i1 & 131080;

        if i0 == 0 goto label1;

        if i0 == 131080 goto label1;

        $r2 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 != 3 goto label2;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isVisibleOrAdding()>();

        return $z0;

     label2:
        return 0;
    }

    int findDesiredInputMethodWindowIndexLocked(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.android.server.wm.WindowList r1, r6;
        com.android.server.wm.WindowState r2, r3, r4, r5, r7, r30;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        com.android.server.wm.AppWindowToken $r8, $r10, $r16, $r20, $r27, $r28, r31;
        com.android.server.wm.AppWindowAnimator $r9, $r11, $r21;
        com.android.server.wm.AppTransition $r12;
        com.android.server.wm.WindowStateAnimator $r13, $r14, $r15, $r18, $r19, $r23, $r25;
        java.lang.Object $r17, $r24, $r29;
        android.view.animation.Animation $r22;
        android.view.WindowManager$LayoutParams $r26;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()>();

        r2 = null;

        $i3 = virtualinvoke r1.<com.android.server.wm.WindowList: int size()>();

        i0 = $i3 - 1;

     label01:
        if i0 < 0 goto label04;

        $r24 = virtualinvoke r1.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.wm.WindowState) $r24;

        $z7 = staticinvoke <com.android.server.wm.WindowManagerService: boolean canBeImeTarget(com.android.server.wm.WindowState)>(r3);

        if $z7 == 0 goto label03;

        r2 = r3;

        if z0 != 0 goto label04;

        $r26 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i17 = $r26.<android.view.WindowManager$LayoutParams: int type>;

        if $i17 != 3 goto label04;

        if i0 <= 0 goto label04;

        $i16 = i0 - 1;

        $r29 = virtualinvoke r1.<com.android.server.wm.WindowList: java.lang.Object get(int)>($i16);

        r4 = (com.android.server.wm.WindowState) $r29;

        $r27 = r4.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r28 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r27 != $r28 goto label02;

        $z8 = staticinvoke <com.android.server.wm.WindowManagerService: boolean canBeImeTarget(com.android.server.wm.WindowState)>(r4);

        if $z8 == 0 goto label02;

        i0 = i0 + -1;

        r2 = r4;

     label02:
        goto label04;

     label03:
        i0 = i0 + -1;

        goto label01;

     label04:
        r30 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget>;

        if r30 == null goto label06;

        $z5 = virtualinvoke r30.<com.android.server.wm.WindowState: boolean isDisplayedLw()>();

        if $z5 == 0 goto label06;

        $z6 = virtualinvoke r30.<com.android.server.wm.WindowState: boolean isClosing()>();

        if $z6 == 0 goto label06;

        if r2 == null goto label05;

        $r23 = r30.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i14 = $r23.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        $r25 = r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i15 = $r25.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        if $i14 <= $i15 goto label06;

     label05:
        $i13 = virtualinvoke r1.<com.android.server.wm.WindowList: int indexOf(java.lang.Object)>(r30);

        $i12 = $i13 + 1;

        return $i12;

     label06:
        if z0 == 0 goto label16;

        if r2 == null goto label16;

        if r30 != null goto label07;

        $r20 = null;

        goto label08;

     label07:
        $r20 = r30.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

     label08:
        r31 = $r20;

        if r31 == null goto label16;

        r5 = null;

        i1 = 0;

        $r11 = r31.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $z1 = $r11.<com.android.server.wm.AppWindowAnimator: boolean animating>;

        if $z1 != 0 goto label09;

        $r21 = r31.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r22 = $r21.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        if $r22 == null goto label14;

     label09:
        r6 = virtualinvoke r30.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        i2 = virtualinvoke r6.<com.android.server.wm.WindowList: int indexOf(java.lang.Object)>(r30);

     label10:
        if i2 < 0 goto label14;

        $r17 = virtualinvoke r6.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r7 = (com.android.server.wm.WindowState) $r17;

        $r16 = r7.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r16 == r31 goto label11;

        goto label14;

     label11:
        $z4 = r7.<com.android.server.wm.WindowState: boolean mRemoved>;

        if $z4 != 0 goto label13;

        if r5 == null goto label12;

        $r18 = r7.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i11 = $r18.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        $r19 = r5.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i10 = $r19.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        if $i11 <= $i10 goto label13;

     label12:
        r5 = r7;

        i1 = i2;

     label13:
        i2 = i2 + -1;

        goto label10;

     label14:
        if r5 == null goto label16;

        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z2 = virtualinvoke $r12.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z2 == 0 goto label15;

        r0.<com.android.server.wm.WindowManagerService: boolean mInputMethodTargetWaitingAnim> = 1;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget> = r5;

        $i9 = i1 + 1;

        return $i9;

     label15:
        $r13 = r5.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z3 = virtualinvoke $r13.<com.android.server.wm.WindowStateAnimator: boolean isAnimating()>();

        if $z3 == 0 goto label16;

        $r14 = r5.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i8 = $r14.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        $r15 = r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i6 = $r15.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        if $i8 <= $i6 goto label16;

        r0.<com.android.server.wm.WindowManagerService: boolean mInputMethodTargetWaitingAnim> = 1;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget> = r5;

        $i7 = i1 + 1;

        return $i7;

     label16:
        if r2 == null goto label19;

        if z0 == 0 goto label18;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget> = r2;

        r0.<com.android.server.wm.WindowManagerService: boolean mInputMethodTargetWaitingAnim> = 0;

        $r8 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r8 == null goto label17;

        $r10 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r9 = $r10.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $i5 = $r9.<com.android.server.wm.AppWindowAnimator: int animLayerAdjustment>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void setInputMethodAnimLayerAdjustment(int)>($i5);

        goto label18;

     label17:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void setInputMethodAnimLayerAdjustment(int)>(0);

     label18:
        $i4 = i0 + 1;

        return $i4;

     label19:
        if z0 == 0 goto label20;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget> = null;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void setInputMethodAnimLayerAdjustment(int)>(0);

     label20:
        return -1;
    }

    void addInputMethodWindowToListLocked(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, $r2;
        int i0, $i1;
        com.android.server.wm.AppWindowToken $r3;
        com.android.server.wm.WindowList $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        i0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: int findDesiredInputMethodWindowIndexLocked(boolean)>(1);

        if i0 < 0 goto label1;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget>;

        $r3 = $r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        r1.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mTargetAppToken> = $r3;

        $r4 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()>();

        virtualinvoke $r4.<com.android.server.wm.WindowList: void add(int,java.lang.Object)>(i0, r1);

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        $i1 = i0 + 1;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void moveInputMethodDialogsLocked(int)>($i1);

        return;

     label1:
        r1.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mTargetAppToken> = null;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void addWindowToListInOrderLocked(com.android.server.wm.WindowState,boolean)>(r1, 1);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void moveInputMethodDialogsLocked(int)>(i0);

        return;
    }

    void setInputMethodAnimLayerAdjustment(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        com.android.server.wm.WindowState r1, r2, r12;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5, $r10;
        com.android.server.wm.WindowStateAnimator $r6, $r7, $r11;
        com.android.server.wm.WindowList $r8, $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r0.<com.android.server.wm.WindowManagerService: int mInputMethodAnimLayerAdjustment> = i0;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow>;

        if r1 == null goto label2;

        $r7 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i4 = r1.<com.android.server.wm.WindowState: int mLayer>;

        $i5 = $i4 + i0;

        $r7.<com.android.server.wm.WindowStateAnimator: int mAnimLayer> = $i5;

        $r8 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        i1 = virtualinvoke $r8.<com.android.server.wm.WindowList: int size()>();

     label1:
        if i1 <= 0 goto label2;

        i1 = i1 + -1;

        $r9 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        $r10 = virtualinvoke $r9.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.wm.WindowState) $r10;

        $r11 = r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i6 = r2.<com.android.server.wm.WindowState: int mLayer>;

        $i7 = $i6 + i0;

        $r11.<com.android.server.wm.WindowStateAnimator: int mAnimLayer> = $i7;

        goto label1;

     label2:
        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        i8 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

     label3:
        if i8 <= 0 goto label4;

        i8 = i8 + -1;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        r12 = (com.android.server.wm.WindowState) $r5;

        $r6 = r12.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i2 = r12.<com.android.server.wm.WindowState: int mLayer>;

        $i3 = $i2 + i0;

        $r6.<com.android.server.wm.WindowStateAnimator: int mAnimLayer> = $i3;

        goto label3;

     label4:
        return;
    }

    private int tmpRemoveWindowLocked(int, com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3;
        com.android.server.wm.WindowState r1, r3;
        com.android.server.wm.WindowList r2, $r5, $r6;
        java.lang.Object $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.WindowState;

        r2 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        i1 = virtualinvoke r2.<com.android.server.wm.WindowList: int indexOf(java.lang.Object)>(r1);

        if i1 < 0 goto label5;

        if i1 >= i0 goto label1;

        i0 = i0 + -1;

     label1:
        virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object remove(int)>(i1);

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        $r5 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        i2 = virtualinvoke $r5.<com.android.server.wm.WindowList: int size()>();

     label2:
        if i2 <= 0 goto label5;

        i2 = i2 + -1;

        $r6 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r3 = (com.android.server.wm.WindowState) $r7;

        i3 = virtualinvoke r2.<com.android.server.wm.WindowList: int indexOf(java.lang.Object)>(r3);

        if i3 < 0 goto label4;

        if i3 >= i0 goto label3;

        i0 = i0 + -1;

     label3:
        virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object remove(int)>(i3);

     label4:
        goto label2;

     label5:
        return i0;
    }

    private void reAddWindowToListInOrderLocked(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.WindowList r2;
        int i0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void addWindowToListInOrderLocked(com.android.server.wm.WindowState,boolean)>(r1, 0);

        r2 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        i0 = virtualinvoke r2.<com.android.server.wm.WindowList: int indexOf(java.lang.Object)>(r1);

        if i0 < 0 goto label1;

        virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object remove(int)>(i0);

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: int reAddWindowLocked(int,com.android.server.wm.WindowState)>(i0, r1);

     label1:
        return;
    }

    void logWindowList(com.android.server.wm.WindowList, java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowList r1;
        java.lang.String r2, $r10;
        int i0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r9;
        java.lang.Object $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowList;

        r2 := @parameter1: java.lang.String;

        i0 = virtualinvoke r1.<com.android.server.wm.WindowList: int size()>();

     label1:
        if i0 <= 0 goto label2;

        i0 = i0 + -1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = virtualinvoke r1.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowManager", $r10);

        goto label1;

     label2:
        return;
    }

    void moveInputMethodDialogsLocked(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, $i3, i4, i5;
        java.util.ArrayList r1;
        com.android.server.wm.WindowList r2;
        com.android.server.wm.WindowState r3, r4, $r6, $r7, $r9, $r11, $r12, $r13, r16;
        java.lang.Object $r5, $r8, $r10, $r14;
        com.android.server.wm.AppWindowToken r15;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()>();

        i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i2 = 0;

     label01:
        if i2 >= i1 goto label02;

        $r14 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r13 = (com.android.server.wm.WindowState) $r14;

        i0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int tmpRemoveWindowLocked(int,com.android.server.wm.WindowState)>(i0, $r13);

        i2 = i2 + 1;

        goto label01;

     label02:
        if i0 < 0 goto label08;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget>;

        r15 = $r6.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow>;

        if $r7 == null goto label05;

     label03:
        $i3 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        if i0 >= $i3 goto label05;

        $r10 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.wm.WindowState) $r10;

        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow>;

        if r3 == $r9 goto label04;

        $r11 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mAttachedWindow>;

        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow>;

        if $r11 != $r12 goto label05;

     label04:
        i0 = i0 + 1;

        goto label03;

     label05:
        i4 = 0;

     label06:
        if i4 >= i1 goto label07;

        $r8 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r4 = (com.android.server.wm.WindowState) $r8;

        r4.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mTargetAppToken> = r15;

        i0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int reAddWindowLocked(int,com.android.server.wm.WindowState)>(i0, r4);

        i4 = i4 + 1;

        goto label06;

     label07:
        return;

     label08:
        i5 = 0;

     label09:
        if i5 >= i1 goto label10;

        $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        r16 = (com.android.server.wm.WindowState) $r5;

        r16.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mTargetAppToken> = null;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void reAddWindowToListInOrderLocked(com.android.server.wm.WindowState)>(r16);

        i5 = i5 + 1;

        goto label09;

     label10:
        return;
    }

    boolean moveInputMethodWindowsIfNeededLocked(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1, $z2;
        com.android.server.wm.WindowState r1, r3, r4, r5, $r10, $r12, $r15, $r16, $r20, $r21;
        int i0, i1, i2, $i4, $i6, $i7, i8, i9, i10;
        com.android.server.wm.WindowList r2, $r9, $r19;
        java.util.ArrayList $r6, $r8;
        java.lang.Object $r7, $r13, $r17, $r18, $r22;
        com.android.server.wm.AppWindowToken $r11, $r14;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow>;

        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        i0 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if r1 != null goto label01;

        if i0 != 0 goto label01;

        return 0;

     label01:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()>();

        i1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: int findDesiredInputMethodWindowIndexLocked(boolean)>(1);

        if i1 < 0 goto label17;

        i2 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        if i1 >= i2 goto label02;

        $r22 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        $r20 = (com.android.server.wm.WindowState) $r22;

        goto label03;

     label02:
        $r20 = null;

     label03:
        r3 = $r20;

        if r1 == null goto label04;

        $r21 = r1;

        goto label05;

     label04:
        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        $r7 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r21 = (com.android.server.wm.WindowState) $r7;

     label05:
        r4 = $r21;

        $r9 = r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        $i4 = virtualinvoke $r9.<com.android.server.wm.WindowList: int size()>();

        if $i4 <= 0 goto label06;

        $r19 = r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        $r18 = virtualinvoke $r19.<com.android.server.wm.WindowList: java.lang.Object get(int)>(0);

        r5 = (com.android.server.wm.WindowState) $r18;

        $i7 = r5.<com.android.server.wm.WindowState: int mSubLayer>;

        if $i7 >= 0 goto label06;

        r4 = r5;

     label06:
        if r3 != r4 goto label14;

        i8 = i1 + 1;

     label07:
        if i8 >= i2 goto label09;

        $r17 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i8);

        $r16 = (com.android.server.wm.WindowState) $r17;

        $z2 = $r16.<com.android.server.wm.WindowState: boolean mIsImWindow>;

        if $z2 != 0 goto label08;

        goto label09;

     label08:
        i8 = i8 + 1;

        goto label07;

     label09:
        i9 = i8 + 1;

     label10:
        if i9 >= i2 goto label12;

        $r13 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i9);

        $r15 = (com.android.server.wm.WindowState) $r13;

        $z1 = $r15.<com.android.server.wm.WindowState: boolean mIsImWindow>;

        if $z1 == 0 goto label11;

        goto label12;

     label11:
        i9 = i9 + 1;

        goto label10;

     label12:
        if i9 < i2 goto label14;

        if r1 == null goto label13;

        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget>;

        $r14 = $r12.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        r1.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mTargetAppToken> = $r14;

     label13:
        return 0;

     label14:
        if r1 == null goto label15;

        i10 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int tmpRemoveWindowLocked(int,com.android.server.wm.WindowState)>(i1, r1);

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget>;

        $r11 = $r10.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        r1.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mTargetAppToken> = $r11;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: int reAddWindowLocked(int,com.android.server.wm.WindowState)>(i10, r1);

        if i0 <= 0 goto label16;

        $i6 = i10 + 1;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void moveInputMethodDialogsLocked(int)>($i6);

        goto label16;

     label15:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void moveInputMethodDialogsLocked(int)>(i1);

     label16:
        goto label19;

     label17:
        if r1 == null goto label18;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: int tmpRemoveWindowLocked(int,com.android.server.wm.WindowState)>(0, r1);

        r1.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mTargetAppToken> = null;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void reAddWindowToListInOrderLocked(com.android.server.wm.WindowState)>(r1);

        if i0 <= 0 goto label19;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void moveInputMethodDialogsLocked(int)>(-1);

        goto label19;

     label18:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void moveInputMethodDialogsLocked(int)>(-1);

     label19:
        if z0 == 0 goto label20;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void assignLayersLocked(com.android.server.wm.WindowList)>(r2);

     label20:
        return 1;
    }

    final boolean isWallpaperVisible(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, $r2, $r3;
        boolean $z0, $z1;
        com.android.server.wm.AppWindowToken $r4, $r5;
        com.android.server.wm.AppWindowAnimator $r6;
        android.view.animation.Animation $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        if r1 == null goto label1;

        $z1 = r1.<com.android.server.wm.WindowState: boolean mObscured>;

        if $z1 == 0 goto label2;

        $r4 = r1.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r4 == null goto label1;

        $r5 = r1.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r6 = $r5.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r7 = $r6.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        if $r7 != null goto label2;

     label1:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mUpperWallpaperTarget>;

        if $r2 != null goto label2;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget>;

        if $r3 == null goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    int adjustWallpaperWindowsLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1, z2, z3, $z4, $z5, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z17;
        android.view.DisplayInfo r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, $i13, $i14, $i15, $i16, $i17, $i19, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i36;
        com.android.server.wm.WindowList r2, $r14, $r16;
        com.android.server.wm.WindowState r3, r4, r5, r6, $r9, $r11, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r33, $r34, $r36, $r38, $r42, $r44, $r45, $r49, $r50, $r52, $r53, $r54, $r58, $r60, $r61, $r62, r73, r74, r75;
        com.android.server.wm.DisplayContent $r7, $r22;
        com.android.server.wm.WindowManagerService$LayoutFields $r8;
        java.util.ArrayList $r10, $r13;
        java.lang.Object $r12, $r15, $r20, $r32, $r35, $r57;
        com.android.server.wm.WindowStateAnimator $r17, $r69, $r71;
        android.view.WindowManager$LayoutParams $r18, $r19, $r43, $r56, $r64;
        byte $b18, $b20, b35;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.view.WindowManagerPolicy $r37;
        com.android.server.wm.WindowToken $r39, $r40, $r41, r76;
        com.android.server.wm.AppWindowAnimator $r46, $r66;
        com.android.server.wm.AppWindowToken $r47, $r48, $r51, $r59, $r65, $r67, $r70, $r72;
        com.android.server.wm.WindowAnimator $r55, $r63;
        android.view.animation.Animation $r68;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r8.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mWallpaperMayChange> = 0;

        z0 = 0;

        $r7 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        r1 = virtualinvoke $r7.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        i0 = r1.<android.view.DisplayInfo: int logicalWidth>;

        i1 = r1.<android.view.DisplayInfo: int logicalHeight>;

        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()>();

        i2 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        r3 = null;

        r4 = null;

        i3 = 0;

        r5 = null;

        i4 = 0;

        i5 = -1;

        i6 = i2;

     label01:
        if i6 <= 0 goto label10;

        i6 = i6 + -1;

        $r57 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i6);

        r3 = (com.android.server.wm.WindowState) $r57;

        $r56 = r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i31 = $r56.<android.view.WindowManager$LayoutParams: int type>;

        if $i31 != 2013 goto label02;

        if r5 != null goto label01;

        r5 = r3;

        i4 = i6;

        goto label01;

     label02:
        r5 = null;

        $r55 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r54 = $r55.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowState mWindowDetachedWallpaper>;

        if r3 == $r54 goto label03;

        $r72 = r3.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r72 == null goto label03;

        $r65 = r3.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $z12 = $r65.<com.android.server.wm.AppWindowToken: boolean hidden>;

        if $z12 == 0 goto label03;

        $r67 = r3.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r66 = $r67.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r68 = $r66.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        if $r68 != null goto label03;

        goto label01;

     label03:
        $r64 = r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i33 = $r64.<android.view.WindowManager$LayoutParams: int flags>;

        $i32 = $i33 & 1048576;

        if $i32 != 0 goto label04;

        $r70 = r3.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r70 == null goto label05;

        $r71 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z16 = $r71.<com.android.server.wm.WindowStateAnimator: boolean keyguardGoingAwayAnimation>;

        if $z16 == 0 goto label05;

     label04:
        $z15 = 1;

        goto label06;

     label05:
        $z15 = 0;

     label06:
        z1 = $z15;

        if z1 == 0 goto label08;

        $z11 = virtualinvoke r3.<com.android.server.wm.WindowState: boolean isOnScreen()>();

        if $z11 == 0 goto label08;

        $r61 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        if $r61 == r3 goto label07;

        $z14 = virtualinvoke r3.<com.android.server.wm.WindowState: boolean isDrawFinishedLw()>();

        if $z14 == 0 goto label08;

     label07:
        r4 = r3;

        i3 = i6;

        $r60 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        if r3 != $r60 goto label10;

        $r69 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z13 = virtualinvoke $r69.<com.android.server.wm.WindowStateAnimator: boolean isAnimating()>();

        if $z13 == 0 goto label10;

        goto label01;

     label08:
        $r63 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r62 = $r63.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowState mWindowDetachedWallpaper>;

        if r3 != $r62 goto label09;

        i5 = i6;

     label09:
        goto label01;

     label10:
        if r4 != null goto label11;

        if i5 < 0 goto label11;

        r4 = r3;

        i3 = i5;

     label11:
        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        if $r9 == r4 goto label16;

        $r52 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget>;

        if $r52 == null goto label12;

        $r58 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget>;

        if $r58 == r4 goto label16;

     label12:
        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget> = null;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mUpperWallpaperTarget> = null;

        r73 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget> = r4;

        z0 = 1;

        if r4 == null goto label15;

        if r73 == null goto label15;

        z2 = virtualinvoke r73.<com.android.server.wm.WindowState: boolean isAnimatingLw()>();

        z3 = virtualinvoke r4.<com.android.server.wm.WindowState: boolean isAnimatingLw()>();

        if z3 == 0 goto label15;

        if z2 == 0 goto label15;

        i7 = virtualinvoke r2.<com.android.server.wm.WindowList: int indexOf(java.lang.Object)>(r73);

        if i7 < 0 goto label15;

        $r51 = r4.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r51 == null goto label13;

        $r59 = r4.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $z10 = $r59.<com.android.server.wm.AppWindowToken: boolean hiddenRequested>;

        if $z10 == 0 goto label13;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget> = r73;

        r4 = r73;

        i3 = i7;

        goto label15;

     label13:
        if i3 <= i7 goto label14;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mUpperWallpaperTarget> = r4;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget> = r73;

        r4 = r73;

        i3 = i7;

        goto label15;

     label14:
        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mUpperWallpaperTarget> = r73;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget> = r4;

     label15:
        goto label18;

     label16:
        $r11 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget>;

        if $r11 == null goto label18;

        $r45 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget>;

        $z9 = virtualinvoke $r45.<com.android.server.wm.WindowState: boolean isAnimatingLw()>();

        if $z9 == 0 goto label17;

        $r53 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mUpperWallpaperTarget>;

        $z8 = virtualinvoke $r53.<com.android.server.wm.WindowState: boolean isAnimatingLw()>();

        if $z8 != 0 goto label18;

     label17:
        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget> = null;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mUpperWallpaperTarget> = null;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget> = r4;

        z0 = 1;

     label18:
        if r4 == null goto label19;

        $z7 = 1;

        goto label20;

     label19:
        $z7 = 0;

     label20:
        z17 = $z7;

        if z17 == 0 goto label26;

        z17 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean isWallpaperVisible(com.android.server.wm.WindowState)>(r4);

        $r38 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget>;

        if $r38 != null goto label21;

        $r47 = r4.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r47 == null goto label21;

        $r48 = r4.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r46 = $r48.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $i30 = $r46.<com.android.server.wm.AppWindowAnimator: int animLayerAdjustment>;

        goto label22;

     label21:
        $i30 = 0;

     label22:
        r0.<com.android.server.wm.WindowManagerService: int mWallpaperAnimLayerAdjustment> = $i30;

        $r37 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i26 = interfaceinvoke $r37.<android.view.WindowManagerPolicy: int getMaxWallpaperLayer()>();

        $i25 = $i26 * 10000;

        i34 = $i25 + 1000;

     label23:
        if i3 <= 0 goto label26;

        $i27 = i3 - 1;

        $r35 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>($i27);

        r74 = (com.android.server.wm.WindowState) $r35;

        $i29 = r74.<com.android.server.wm.WindowState: int mBaseLayer>;

        if $i29 >= i34 goto label25;

        $r42 = r74.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mAttachedWindow>;

        if $r42 == r4 goto label25;

        $r44 = r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mAttachedWindow>;

        if $r44 == null goto label24;

        $r50 = r74.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mAttachedWindow>;

        $r49 = r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mAttachedWindow>;

        if $r50 == $r49 goto label25;

     label24:
        $r43 = r74.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i28 = $r43.<android.view.WindowManager$LayoutParams: int type>;

        if $i28 != 3 goto label26;

        $r39 = r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        if $r39 == null goto label26;

        $r40 = r74.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $r41 = r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        if $r40 == $r41 goto label25;

        goto label26;

     label25:
        r4 = r74;

        i3 = i3 + -1;

        goto label23;

     label26:
        if r4 != null goto label27;

        if r5 == null goto label27;

        r75 = r5;

        i3 = i4 + 1;

        goto label30;

     label27:
        if i3 <= 0 goto label28;

        $i24 = i3 - 1;

        $r32 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>($i24);

        $r36 = (com.android.server.wm.WindowState) $r32;

        goto label29;

     label28:
        $r36 = null;

     label29:
        r75 = $r36;

     label30:
        if z17 == 0 goto label34;

        $r25 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $f0 = $r25.<com.android.server.wm.WindowState: float mWallpaperX>;

        $b18 = $f0 cmpl 0.0F;

        if $b18 < 0 goto label31;

        $r34 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $f5 = $r34.<com.android.server.wm.WindowState: float mWallpaperX>;

        r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperX> = $f5;

        $r31 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $f3 = $r31.<com.android.server.wm.WindowState: float mWallpaperXStep>;

        r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperXStep> = $f3;

     label31:
        $r24 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $f1 = $r24.<com.android.server.wm.WindowState: float mWallpaperY>;

        $b20 = $f1 cmpl 0.0F;

        if $b20 < 0 goto label32;

        $r28 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $f2 = $r28.<com.android.server.wm.WindowState: float mWallpaperY>;

        r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperY> = $f2;

        $r33 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $f4 = $r33.<com.android.server.wm.WindowState: float mWallpaperYStep>;

        r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperYStep> = $f4;

     label32:
        $r26 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $i19 = $r26.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        if $i19 == -2147483648 goto label33;

        $r27 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $i21 = $r27.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetX> = $i21;

     label33:
        $r29 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $i22 = $r29.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        if $i22 == -2147483648 goto label34;

        $r30 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $i23 = $r30.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetY> = $i23;

     label34:
        b35 = 0;

        $r10 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        i36 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

     label35:
        if i36 <= 0 goto label48;

        i36 = i36 + -1;

        $r13 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        $r12 = virtualinvoke $r13.<java.util.ArrayList: java.lang.Object get(int)>(i36);

        r76 = (com.android.server.wm.WindowToken) $r12;

        $z4 = r76.<com.android.server.wm.WindowToken: boolean hidden>;

        if $z4 != z17 goto label38;

        b35 = b35 | 4;

        if z17 != 0 goto label36;

        $z5 = 1;

        goto label37;

     label36:
        $z5 = 0;

     label37:
        r76.<com.android.server.wm.WindowToken: boolean hidden> = $z5;

        $r22 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r22.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label38:
        $r16 = r76.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        i8 = virtualinvoke $r16.<com.android.server.wm.WindowList: int size()>();

     label39:
        if i8 <= 0 goto label47;

        i8 = i8 + -1;

        $r14 = r76.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        $r15 = virtualinvoke $r14.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i8);

        r6 = (com.android.server.wm.WindowState) $r15;

        if z17 == 0 goto label40;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateWallpaperOffsetLocked(com.android.server.wm.WindowState,int,int,boolean)>(r6, i0, i1, 0);

     label40:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dispatchWallpaperVisibility(com.android.server.wm.WindowState,boolean)>(r6, z17);

        $r17 = r6.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i15 = r6.<com.android.server.wm.WindowState: int mLayer>;

        $i14 = r0.<com.android.server.wm.WindowManagerService: int mWallpaperAnimLayerAdjustment>;

        $i13 = $i15 + $i14;

        $r17.<com.android.server.wm.WindowStateAnimator: int mAnimLayer> = $i13;

        if r6 != r75 goto label43;

        i3 = i3 + -1;

        if i3 <= 0 goto label41;

        $i17 = i3 - 1;

        $r20 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>($i17);

        $r23 = (com.android.server.wm.WindowState) $r20;

        goto label42;

     label41:
        $r23 = null;

     label42:
        r75 = $r23;

        goto label39;

     label43:
        i10 = virtualinvoke r2.<com.android.server.wm.WindowList: int indexOf(java.lang.Object)>(r6);

        if i10 < 0 goto label44;

        virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object remove(int)>(i10);

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        if i10 >= i3 goto label44;

        i3 = i3 + -1;

     label44:
        i9 = 0;

        if z17 == 0 goto label46;

        if r75 == null goto label46;

        $r19 = r75.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i12 = $r19.<android.view.WindowManager$LayoutParams: int type>;

        $r18 = r75.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i11 = $r18.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i16 = i11 & 1024;

        if $i16 != 0 goto label45;

        if i12 != 2029 goto label46;

     label45:
        i9 = virtualinvoke r2.<com.android.server.wm.WindowList: int indexOf(java.lang.Object)>(r75);

     label46:
        virtualinvoke r2.<com.android.server.wm.WindowList: void add(int,java.lang.Object)>(i9, r6);

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        b35 = b35 | 2;

        goto label39;

     label47:
        goto label35;

     label48:
        if z0 == 0 goto label49;

     label49:
        return b35;
    }

    void setWallpaperAnimLayerAdjustmentLocked(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, $i3, $i4;
        com.android.server.wm.WindowToken r1;
        com.android.server.wm.WindowState r2;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5, $r8;
        com.android.server.wm.WindowList $r6, $r7;
        com.android.server.wm.WindowStateAnimator $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r0.<com.android.server.wm.WindowManagerService: int mWallpaperAnimLayerAdjustment> = i0;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

     label1:
        if i1 <= 0 goto label4;

        i1 = i1 + -1;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r1 = (com.android.server.wm.WindowToken) $r5;

        $r6 = r1.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        i2 = virtualinvoke $r6.<com.android.server.wm.WindowList: int size()>();

     label2:
        if i2 <= 0 goto label3;

        i2 = i2 + -1;

        $r7 = r1.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        $r8 = virtualinvoke $r7.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r2 = (com.android.server.wm.WindowState) $r8;

        $r9 = r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i3 = r2.<com.android.server.wm.WindowState: int mLayer>;

        $i4 = $i3 + i0;

        $r9.<com.android.server.wm.WindowStateAnimator: int mAnimLayer> = $i4;

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    boolean updateWallpaperOffsetLocked(com.android.server.wm.WindowState, int, int, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, $r8;
        int i0, i1, i2, i3, i4, $i8, $i9, $i10, $i11, $i12, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i30, $i34, $i35, $i36, $i37, $i38, i39;
        boolean z0, z2, $z3, z4;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25;
        long l5, $l25, $l26, $l28, $l29;
        byte $b6, $b7, $b13, $b14, $b15, $b20, $b24, $b27, $b32, $b33;
        android.graphics.Rect $r3, $r4, $r5, $r6;
        android.view.WindowManager$LayoutParams $r7;
        android.view.IWindow $r9;
        java.util.HashMap $r10;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.String $r14;
        java.lang.InterruptedException $r15;
        android.os.RemoteException $r16;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z2 = 0;

        $f4 = r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperX>;

        $b6 = $f4 cmpl 0.0F;

        if $b6 < 0 goto label01;

        $f22 = r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperX>;

        goto label02;

     label01:
        $f22 = 0.5F;

     label02:
        f0 = $f22;

        $f5 = r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperXStep>;

        $b7 = $f5 cmpl 0.0F;

        if $b7 < 0 goto label03;

        $f21 = r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperXStep>;

        goto label04;

     label03:
        $f21 = -1.0F;

     label04:
        f1 = $f21;

        $r3 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mFrame>;

        $i10 = $r3.<android.graphics.Rect: int right>;

        $r4 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mFrame>;

        $i8 = $r4.<android.graphics.Rect: int left>;

        $i9 = $i10 - $i8;

        i2 = $i9 - i0;

        if i2 <= 0 goto label05;

        $f24 = (float) i2;

        $f23 = $f24 * f0;

        $f25 = $f23 + 0.5F;

        $i38 = (int) $f25;

        $i37 = neg $i38;

        goto label06;

     label05:
        $i37 = 0;

     label06:
        i3 = $i37;

        $i12 = r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetX>;

        if $i12 == -2147483648 goto label07;

        $i34 = r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetX>;

        i3 = i3 + $i34;

     label07:
        $i11 = r1.<com.android.server.wm.WindowState: int mXOffset>;

        if $i11 == i3 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        z4 = $z3;

        if z4 == 0 goto label10;

        r1.<com.android.server.wm.WindowState: int mXOffset> = i3;

     label10:
        $f6 = r1.<com.android.server.wm.WindowState: float mWallpaperX>;

        $b13 = $f6 cmpl f0;

        if $b13 != 0 goto label11;

        $f18 = r1.<com.android.server.wm.WindowState: float mWallpaperXStep>;

        $b33 = $f18 cmpl f1;

        if $b33 == 0 goto label12;

     label11:
        r1.<com.android.server.wm.WindowState: float mWallpaperX> = f0;

        r1.<com.android.server.wm.WindowState: float mWallpaperXStep> = f1;

        z2 = 1;

     label12:
        $f7 = r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperY>;

        $b14 = $f7 cmpl 0.0F;

        if $b14 < 0 goto label13;

        $f20 = r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperY>;

        goto label14;

     label13:
        $f20 = 0.5F;

     label14:
        f2 = $f20;

        $f8 = r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperYStep>;

        $b15 = $f8 cmpl 0.0F;

        if $b15 < 0 goto label15;

        $f19 = r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperYStep>;

        goto label16;

     label15:
        $f19 = -1.0F;

     label16:
        f3 = $f19;

        $r5 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mFrame>;

        $i19 = $r5.<android.graphics.Rect: int bottom>;

        $r6 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mFrame>;

        $i18 = $r6.<android.graphics.Rect: int top>;

        $i16 = $i19 - $i18;

        i4 = $i16 - i1;

        if i4 <= 0 goto label17;

        $f14 = (float) i4;

        $f15 = $f14 * f2;

        $f16 = $f15 + 0.5F;

        $i35 = (int) $f16;

        $i36 = neg $i35;

        goto label18;

     label17:
        $i36 = 0;

     label18:
        i39 = $i36;

        $i17 = r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetY>;

        if $i17 == -2147483648 goto label19;

        $i30 = r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetY>;

        i39 = i39 + $i30;

     label19:
        $i21 = r1.<com.android.server.wm.WindowState: int mYOffset>;

        if $i21 == i39 goto label20;

        z4 = 1;

        r1.<com.android.server.wm.WindowState: int mYOffset> = i39;

     label20:
        $f9 = r1.<com.android.server.wm.WindowState: float mWallpaperY>;

        $b20 = $f9 cmpl f2;

        if $b20 != 0 goto label21;

        $f17 = r1.<com.android.server.wm.WindowState: float mWallpaperYStep>;

        $b32 = $f17 cmpl f3;

        if $b32 == 0 goto label22;

     label21:
        r1.<com.android.server.wm.WindowState: float mWallpaperY> = f2;

        r1.<com.android.server.wm.WindowState: float mWallpaperYStep> = f3;

        z2 = 1;

     label22:
        if z2 == 0 goto label32;

        $r7 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i22 = $r7.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i23 = $i22 & 4;

        if $i23 == 0 goto label32;

     label23:
        if z0 == 0 goto label24;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWaitingOnWallpaper> = r1;

     label24:
        $r9 = r1.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $f12 = r1.<com.android.server.wm.WindowState: float mWallpaperX>;

        $f13 = r1.<com.android.server.wm.WindowState: float mWallpaperY>;

        $f11 = r1.<com.android.server.wm.WindowState: float mWallpaperXStep>;

        $f10 = r1.<com.android.server.wm.WindowState: float mWallpaperYStep>;

        interfaceinvoke $r9.<android.view.IWindow: void dispatchWallpaperOffsets(float,float,float,float,boolean)>($f12, $f13, $f11, $f10, z0);

        if z0 == 0 goto label30;

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWaitingOnWallpaper>;

        if $r8 == null goto label30;

        l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l26 = r0.<com.android.server.wm.WindowManagerService: long mLastWallpaperTimeoutTime>;

        $l25 = $l26 + 10000L;

        $b24 = $l25 cmp l5;

        if $b24 >= 0 goto label29;

     label25:
        $r10 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        virtualinvoke $r10.<java.lang.Object: void wait(long)>(150L);

     label26:
        goto label28;

     label27:
        $r15 := @caughtexception;

     label28:
        $l29 = l5 + 150L;

        $l28 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $b27 = $l29 cmp $l28;

        if $b27 >= 0 goto label29;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout waiting for wallpaper to offset: ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r14);

        r0.<com.android.server.wm.WindowManagerService: long mLastWallpaperTimeoutTime> = l5;

     label29:
        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWaitingOnWallpaper> = null;

     label30:
        goto label32;

     label31:
        $r16 := @caughtexception;

     label32:
        return z4;

        catch java.lang.InterruptedException from label25 to label26 with label27;
        catch android.os.RemoteException from label23 to label30 with label31;
    }

    void wallpaperOffsetsComplete(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1, $r8;
        java.util.HashMap r2, $r4, $r9;
        java.lang.Throwable r3, $r10;
        com.android.server.wm.WindowState $r5, $r6;
        android.view.IWindow $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWaitingOnWallpaper>;

        if $r5 == null goto label2;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWaitingOnWallpaper>;

        $r7 = $r6.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r8 = interfaceinvoke $r7.<android.view.IWindow: android.os.IBinder asBinder()>();

        if $r8 != r1 goto label2;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWaitingOnWallpaper> = null;

        $r9 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        virtualinvoke $r9.<java.lang.Object: void notifyAll()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void updateWallpaperOffsetLocked(com.android.server.wm.WindowState, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, r4, r6;
        boolean z0, $z1;
        com.android.server.wm.DisplayContent r2;
        android.view.DisplayInfo r3;
        int i0, i1, i2, i3, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15;
        com.android.server.wm.WindowToken r5;
        com.android.server.wm.WindowStateAnimator r7;
        java.util.ArrayList $r8, $r9;
        com.android.server.wm.WindowList $r10, $r12;
        java.lang.Object $r11, $r13;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.graphics.RectF $r14;
        byte $b4, $b5, $b6, $b9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r2 != null goto label01;

        return;

     label01:
        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        i0 = r3.<android.view.DisplayInfo: int logicalWidth>;

        i1 = r3.<android.view.DisplayInfo: int logicalHeight>;

        r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        if r4 == null goto label09;

        $f0 = r4.<com.android.server.wm.WindowState: float mWallpaperX>;

        $b4 = $f0 cmpl 0.0F;

        if $b4 < 0 goto label02;

        $f7 = r4.<com.android.server.wm.WindowState: float mWallpaperX>;

        r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperX> = $f7;

        goto label03;

     label02:
        $f1 = r1.<com.android.server.wm.WindowState: float mWallpaperX>;

        $b5 = $f1 cmpl 0.0F;

        if $b5 < 0 goto label03;

        $f5 = r1.<com.android.server.wm.WindowState: float mWallpaperX>;

        r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperX> = $f5;

     label03:
        $f2 = r4.<com.android.server.wm.WindowState: float mWallpaperY>;

        $b6 = $f2 cmpl 0.0F;

        if $b6 < 0 goto label04;

        $f4 = r4.<com.android.server.wm.WindowState: float mWallpaperY>;

        r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperY> = $f4;

        goto label05;

     label04:
        $f3 = r1.<com.android.server.wm.WindowState: float mWallpaperY>;

        $b9 = $f3 cmpl 0.0F;

        if $b9 < 0 goto label05;

        $f6 = r1.<com.android.server.wm.WindowState: float mWallpaperY>;

        r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperY> = $f6;

     label05:
        $i10 = r4.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        if $i10 == -2147483648 goto label06;

        $i15 = r4.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetX> = $i15;

        goto label07;

     label06:
        $i7 = r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        if $i7 == -2147483648 goto label07;

        $i12 = r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetX> = $i12;

     label07:
        $i8 = r4.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        if $i8 == -2147483648 goto label08;

        $i11 = r4.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetY> = $i11;

        goto label09;

     label08:
        $i13 = r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        if $i13 == -2147483648 goto label09;

        $i14 = r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetY> = $i14;

     label09:
        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        i2 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

     label10:
        if i2 <= 0 goto label14;

        i2 = i2 + -1;

        $r9 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        $r11 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r5 = (com.android.server.wm.WindowToken) $r11;

        $r10 = r5.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        i3 = virtualinvoke $r10.<com.android.server.wm.WindowList: int size()>();

     label11:
        if i3 <= 0 goto label13;

        i3 = i3 + -1;

        $r12 = r5.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        $r13 = virtualinvoke $r12.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        r6 = (com.android.server.wm.WindowState) $r13;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateWallpaperOffsetLocked(com.android.server.wm.WindowState,int,int,boolean)>(r6, i0, i1, z0);

        if $z1 == 0 goto label12;

        r7 = r6.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke r7.<com.android.server.wm.WindowStateAnimator: void computeShownFrameLocked()>();

        $r14 = r6.<com.android.server.wm.WindowState: android.graphics.RectF mShownFrame>;

        virtualinvoke r7.<com.android.server.wm.WindowStateAnimator: void setWallpaperOffset(android.graphics.RectF)>($r14);

        z0 = 0;

     label12:
        goto label11;

     label13:
        goto label10;

     label14:
        return;
    }

    void dispatchWallpaperVisibility(com.android.server.wm.WindowState, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1;
        boolean z0, $z1;
        android.view.IWindow $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        z0 := @parameter1: boolean;

        $z1 = r1.<com.android.server.wm.WindowState: boolean mWallpaperVisible>;

        if $z1 == z0 goto label4;

        r1.<com.android.server.wm.WindowState: boolean mWallpaperVisible> = z0;

     label1:
        $r3 = r1.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r3.<android.view.IWindow: void dispatchAppVisibility(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void updateWallpaperVisibilityLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1, $z3;
        com.android.server.wm.DisplayContent r1, $r13;
        android.view.DisplayInfo r2;
        int i0, i1, i2, i3;
        com.android.server.wm.WindowToken r3;
        com.android.server.wm.WindowState r4, $r5, $r6;
        java.util.ArrayList $r7, $r8;
        java.lang.Object $r9, $r11;
        com.android.server.wm.WindowList $r10, $r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean isWallpaperVisible(com.android.server.wm.WindowState)>($r5);

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        r1 = virtualinvoke $r6.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r1 != null goto label1;

        return;

     label1:
        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        i0 = r2.<android.view.DisplayInfo: int logicalWidth>;

        i1 = r2.<android.view.DisplayInfo: int logicalHeight>;

        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        i2 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

     label2:
        if i2 <= 0 goto label9;

        i2 = i2 + -1;

        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r3 = (com.android.server.wm.WindowToken) $r9;

        $z1 = r3.<com.android.server.wm.WindowToken: boolean hidden>;

        if $z1 != z0 goto label5;

        if z0 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        r3.<com.android.server.wm.WindowToken: boolean hidden> = $z3;

        $r13 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r13.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label5:
        $r10 = r3.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        i3 = virtualinvoke $r10.<com.android.server.wm.WindowList: int size()>();

     label6:
        if i3 <= 0 goto label8;

        i3 = i3 + -1;

        $r12 = r3.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        $r11 = virtualinvoke $r12.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        r4 = (com.android.server.wm.WindowState) $r11;

        if z0 == 0 goto label7;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateWallpaperOffsetLocked(com.android.server.wm.WindowState,int,int,boolean)>(r4, i0, i1, 0);

     label7:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dispatchWallpaperVisibility(com.android.server.wm.WindowState,boolean)>(r4, z0);

        goto label6;

     label8:
        goto label2;

     label9:
        return;
    }

    public int addWindow(com.android.server.wm.Session, android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, android.graphics.Rect, android.view.InputChannel)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1;
        android.view.IWindow r2;
        int i0, i1, i2, i3, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31;
        android.view.WindowManager$LayoutParams r3, $r23, $r128, $r129;
        android.graphics.Rect r4;
        android.view.InputChannel r5, $r50, $r51, $r52;
        int[] r6;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, z15, z16;
        com.android.server.wm.WindowState r7, $r20, $r31, $r39, $r41, r163;
        long l4;
        java.util.HashMap r8, $r15, $r16, $r18, $r30, $r46;
        com.android.server.wm.DisplayContent r9, $r26;
        com.android.server.wm.AppWindowToken r10, $r22, $r32, $r38, $r42, $r43;
        com.android.server.wm.WindowToken r11, $r64, $r105;
        java.lang.Throwable r12, $r151;
        android.view.InputChannel[] r13;
        android.view.WindowManagerPolicy $r14, $r24, $r27, $r28, $r40;
        android.os.IBinder $r17, $r19, $r29, $r45, $r54, $r69, $r73, $r79, $r83, $r96, $r100, $r109, $r112, $r124, $r130, $r134, $r139, $r143;
        java.lang.Object $r21;
        com.android.server.wm.WindowState$DeathRecipient $r25;
        com.android.server.wm.WindowStateAnimator $r33;
        com.android.server.wm.InputMonitor $r34, $r36, $r37;
        com.android.server.wm.WindowList $r35;
        java.util.ArrayList $r44;
        android.app.AppOpsManager $r47;
        java.lang.String $r48, $r59, $r65, $r70, $r74, $r86, $r91, $r92, $r99, $r106, $r110, $r121, $r126, $r131, $r135, $r142, $r148, $r155, $r160, r164;
        com.android.server.input.InputWindowHandle $r49;
        java.lang.StringBuilder $r53, $r55, $r57, $r58, $r60, $r61, $r62, $r63, $r66, $r67, $r68, $r71, $r72, $r75, $r76, $r77, $r78, $r80, $r81, $r82, $r84, $r85, $r87, $r88, $r89, $r90, $r93, $r94, $r95, $r97, $r98, $r101, $r102, $r103, $r104, $r107, $r108, $r111, $r113, $r114, $r115, $r116, $r117, $r118, $r119, $r120, $r122, $r123, $r125, $r127, $r132, $r133, $r136, $r137, $r138, $r140, $r141, $r144, $r145, $r146, $r147, $r149, $r150, $r153, $r154, $r156, $r157, $r158, $r159, $r161, $r162;
        com.android.server.input.InputManagerService $r56;
        java.lang.IllegalStateException $r152;
        byte b32;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        r2 := @parameter1: android.view.IWindow;

        i0 := @parameter2: int;

        r3 := @parameter3: android.view.WindowManager$LayoutParams;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r4 := @parameter6: android.graphics.Rect;

        r5 := @parameter7: android.view.InputChannel;

        r6 = newarray (int)[1];

        $r14 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        i3 = interfaceinvoke $r14.<android.view.WindowManagerPolicy: int checkAddPermission(android.view.WindowManager$LayoutParams,int[])>(r3, r6);

        if i3 == 0 goto label01;

        return i3;

     label01:
        z0 = 0;

        r7 = null;

        i5 = r3.<android.view.WindowManager$LayoutParams: int type>;

        $r15 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r8 = $r15;

        entermonitor $r15;

     label02:
        $z2 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayReady>;

        if $z2 != 0 goto label03;

        $r152 = new java.lang.IllegalStateException;

        specialinvoke $r152.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Display has not been initialialized");

        throw $r152;

     label03:
        r9 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i2);

        if r9 != null goto label05;

        $r147 = new java.lang.StringBuilder;

        specialinvoke $r147.<java.lang.StringBuilder: void <init>()>();

        $r146 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add window to a display that does not exist: ");

        $r150 = virtualinvoke $r146.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r149 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r148 = virtualinvoke $r149.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r148);

        exitmonitor r8;

     label04:
        return -9;

     label05:
        $i6 = r1.<com.android.server.wm.Session: int mUid>;

        $z3 = virtualinvoke r9.<com.android.server.wm.DisplayContent: boolean hasAccess(int)>($i6);

        if $z3 != 0 goto label07;

        $r159 = new java.lang.StringBuilder;

        specialinvoke $r159.<java.lang.StringBuilder: void <init>()>();

        $r158 = virtualinvoke $r159.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add window to a display for which the application does not have access: ");

        $r161 = virtualinvoke $r158.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r162 = virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r160 = virtualinvoke $r162.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r160);

        exitmonitor r8;

     label06:
        return -9;

     label07:
        $r16 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r19 = interfaceinvoke r2.<android.view.IWindow: android.os.IBinder asBinder()>();

        $z4 = virtualinvoke $r16.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r19);

        if $z4 == 0 goto label09;

        $r154 = new java.lang.StringBuilder;

        specialinvoke $r154.<java.lang.StringBuilder: void <init>()>();

        $r153 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Window ");

        $r156 = virtualinvoke $r153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r157 = virtualinvoke $r156.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already added");

        $r155 = virtualinvoke $r157.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r155);

        exitmonitor r8;

     label08:
        return -5;

     label09:
        if i5 < 1000 goto label13;

        if i5 > 1999 goto label13;

        $r130 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        r7 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.os.IBinder,boolean)>(null, $r130, 0);

        if r7 != null goto label11;

        $r140 = new java.lang.StringBuilder;

        specialinvoke $r140.<java.lang.StringBuilder: void <init>()>();

        $r138 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add window with token that is not a window: ");

        $r139 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r136 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r139);

        $r137 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r135 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r135);

        exitmonitor r8;

     label10:
        return -2;

     label11:
        $r129 = r7.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i30 = $r129.<android.view.WindowManager$LayoutParams: int type>;

        if $i30 < 1000 goto label13;

        $r128 = r7.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i29 = $r128.<android.view.WindowManager$LayoutParams: int type>;

        if $i29 > 1999 goto label13;

        $r127 = new java.lang.StringBuilder;

        specialinvoke $r127.<java.lang.StringBuilder: void <init>()>();

        $r145 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add window with token that is a sub-window: ");

        $r143 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r144 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r143);

        $r141 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r142 = virtualinvoke $r141.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r142);

        exitmonitor r8;

     label12:
        return -2;

     label13:
        if i5 != 2030 goto label15;

        $z14 = virtualinvoke r9.<com.android.server.wm.DisplayContent: boolean isPrivate()>();

        if $z14 != 0 goto label15;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Attempted to add private presentation window to a non-private display.  Aborting.");

        exitmonitor r8;

     label14:
        return -8;

     label15:
        z1 = 0;

        $r18 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $r17 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r21 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r17);

        r11 = (com.android.server.wm.WindowToken) $r21;

        if r11 != null goto label26;

        if i5 < 1 goto label17;

        if i5 > 99 goto label17;

        $r117 = new java.lang.StringBuilder;

        specialinvoke $r117.<java.lang.StringBuilder: void <init>()>();

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add application window with unknown token ");

        $r134 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r133 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r134);

        $r132 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r131 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r131);

        exitmonitor r8;

     label16:
        return -1;

     label17:
        if i5 != 2011 goto label19;

        $r122 = new java.lang.StringBuilder;

        specialinvoke $r122.<java.lang.StringBuilder: void <init>()>();

        $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add input method window with unknown token ");

        $r124 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r119 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r124);

        $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r121 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r121);

        exitmonitor r8;

     label18:
        return -1;

     label19:
        if i5 != 2031 goto label21;

        $r111 = new java.lang.StringBuilder;

        specialinvoke $r111.<java.lang.StringBuilder: void <init>()>();

        $r107 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add voice interaction window with unknown token ");

        $r109 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r109);

        $r125 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r126);

        exitmonitor r8;

     label20:
        return -1;

     label21:
        if i5 != 2013 goto label23;

        $r116 = new java.lang.StringBuilder;

        specialinvoke $r116.<java.lang.StringBuilder: void <init>()>();

        $r113 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add wallpaper window with unknown token ");

        $r112 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r115 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r112);

        $r114 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r110 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r110);

        exitmonitor r8;

     label22:
        return -1;

     label23:
        if i5 != 2023 goto label25;

        $r97 = new java.lang.StringBuilder;

        specialinvoke $r97.<java.lang.StringBuilder: void <init>()>();

        $r95 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add Dream window with unknown token ");

        $r100 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r101 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r100);

        $r98 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r99);

        exitmonitor r8;

     label24:
        return -1;

     label25:
        $r105 = new com.android.server.wm.WindowToken;

        $r96 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        specialinvoke $r105.<com.android.server.wm.WindowToken: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder,int,boolean)>(r0, $r96, -1, 0);

        r11 = $r105;

        z1 = 1;

        goto label42;

     label26:
        if i5 < 1 goto label33;

        if i5 > 99 goto label33;

        r10 = r11.<com.android.server.wm.WindowToken: com.android.server.wm.AppWindowToken appWindowToken>;

        if r10 != null goto label28;

        $r90 = new java.lang.StringBuilder;

        specialinvoke $r90.<java.lang.StringBuilder: void <init>()>();

        $r104 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add window with non-application token ");

        $r102 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r106 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r106);

        exitmonitor r8;

     label27:
        return -3;

     label28:
        $z13 = r10.<com.android.server.wm.AppWindowToken: boolean removed>;

        if $z13 == 0 goto label30;

        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        $r89 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add window with exiting application token ");

        $r88 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r87 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r91 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r91);

        exitmonitor r8;

     label29:
        return -4;

     label30:
        if i5 != 3 goto label32;

        $z12 = r10.<com.android.server.wm.AppWindowToken: boolean firstWindowDrawn>;

        if $z12 == 0 goto label32;

        exitmonitor r8;

     label31:
        return -6;

     label32:
        goto label42;

     label33:
        if i5 != 2011 goto label35;

        $i27 = r11.<com.android.server.wm.WindowToken: int windowType>;

        if $i27 == 2011 goto label42;

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add input method window with bad token ");

        $r79 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r80 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r79);

        $r93 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r92 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r92);

        exitmonitor r8;

     label34:
        return -1;

     label35:
        if i5 != 2031 goto label37;

        $i28 = r11.<com.android.server.wm.WindowToken: int windowType>;

        if $i28 == 2031 goto label42;

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add voice interaction window with bad token ");

        $r83 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r84 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r83);

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r86);

        exitmonitor r8;

     label36:
        return -1;

     label37:
        if i5 != 2013 goto label39;

        $i26 = r11.<com.android.server.wm.WindowToken: int windowType>;

        if $i26 == 2013 goto label42;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add wallpaper window with bad token ");

        $r69 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r69);

        $r71 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r70 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r70);

        exitmonitor r8;

     label38:
        return -1;

     label39:
        if i5 != 2023 goto label41;

        $i25 = r11.<com.android.server.wm.WindowToken: int windowType>;

        if $i25 == 2023 goto label42;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add Dream window with bad token ");

        $r73 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r72 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r73);

        $r75 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r74 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r74);

        exitmonitor r8;

     label40:
        return -1;

     label41:
        $r22 = r11.<com.android.server.wm.WindowToken: com.android.server.wm.AppWindowToken appWindowToken>;

        if $r22 == null goto label42;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-null appWindowToken for system window of type=");

        $r66 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r65 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r65);

        r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = null;

        $r64 = new com.android.server.wm.WindowToken;

        specialinvoke $r64.<com.android.server.wm.WindowToken: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder,int,boolean)>(r0, null, -1, 0);

        r11 = $r64;

        z1 = 1;

     label42:
        $r20 = new com.android.server.wm.WindowState;

        $i7 = r6[0];

        specialinvoke $r20.<com.android.server.wm.WindowState: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.Session,android.view.IWindow,com.android.server.wm.WindowToken,com.android.server.wm.WindowState,int,int,android.view.WindowManager$LayoutParams,int,com.android.server.wm.DisplayContent)>(r0, r1, r2, r11, r7, $i7, i0, r3, i1, r9);

        r163 = $r20;

        $r25 = r163.<com.android.server.wm.WindowState: com.android.server.wm.WindowState$DeathRecipient mDeathRecipient>;

        if $r25 != null goto label44;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding window client ");

        $r54 = interfaceinvoke r2.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r61 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54);

        $r60 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that is dead, aborting.");

        $r59 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r59);

        exitmonitor r8;

     label43:
        return -4;

     label44:
        $r26 = virtualinvoke r163.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if $r26 != null goto label46;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Adding window to Display that has been removed.");

        exitmonitor r8;

     label45:
        return -9;

     label46:
        $r24 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r23 = r163.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        interfaceinvoke $r24.<android.view.WindowManagerPolicy: void adjustWindowParamsLw(android.view.WindowManager$LayoutParams)>($r23);

        $r28 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z5 = interfaceinvoke $r28.<android.view.WindowManagerPolicy: boolean checkShowToOwnerOnly(android.view.WindowManager$LayoutParams)>(r3);

        virtualinvoke r163.<com.android.server.wm.WindowState: void setShowToOwnerOnlyLocked(boolean)>($z5);

        $r27 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        i31 = interfaceinvoke $r27.<android.view.WindowManagerPolicy: int prepareAddWindowLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>(r163, r3);

        if i31 == 0 goto label48;

        exitmonitor r8;

     label47:
        return i31;

     label48:
        if r5 == null goto label49;

        $i23 = r3.<android.view.WindowManager$LayoutParams: int inputFeatures>;

        $i24 = $i23 & 2;

        if $i24 != 0 goto label49;

        r164 = virtualinvoke r163.<com.android.server.wm.WindowState: java.lang.String makeInputChannelName()>();

        r13 = staticinvoke <android.view.InputChannel: android.view.InputChannel[] openInputChannelPair(java.lang.String)>(r164);

        $r51 = r13[0];

        virtualinvoke r163.<com.android.server.wm.WindowState: void setInputChannel(android.view.InputChannel)>($r51);

        $r52 = r13[1];

        virtualinvoke $r52.<android.view.InputChannel: void transferTo(android.view.InputChannel)>(r5);

        $r56 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        $r50 = r163.<com.android.server.wm.WindowState: android.view.InputChannel mInputChannel>;

        $r49 = r163.<com.android.server.wm.WindowState: com.android.server.input.InputWindowHandle mInputWindowHandle>;

        virtualinvoke $r56.<com.android.server.input.InputManagerService: void registerInputChannel(android.view.InputChannel,com.android.server.input.InputWindowHandle)>($r50, $r49);

     label49:
        b32 = 0;

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if z1 == 0 goto label50;

        $r46 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $r45 = r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        virtualinvoke $r46.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r45, r11);

     label50:
        virtualinvoke r163.<com.android.server.wm.WindowState: void attach()>();

        $r30 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r29 = interfaceinvoke r2.<android.view.IWindow: android.os.IBinder asBinder()>();

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, r163);

        $i10 = r163.<com.android.server.wm.WindowState: int mAppOp>;

        if $i10 == -1 goto label51;

        $r47 = r0.<com.android.server.wm.WindowManagerService: android.app.AppOpsManager mAppOps>;

        $i21 = r163.<com.android.server.wm.WindowState: int mAppOp>;

        $i22 = virtualinvoke r163.<com.android.server.wm.WindowState: int getOwningUid()>();

        $r48 = virtualinvoke r163.<com.android.server.wm.WindowState: java.lang.String getOwningPackage()>();

        $i20 = virtualinvoke $r47.<android.app.AppOpsManager: int startOpNoThrow(int,int,java.lang.String)>($i21, $i22, $r48);

        if $i20 == 0 goto label51;

        virtualinvoke r163.<com.android.server.wm.WindowState: void setAppOpVisibilityLw(boolean)>(0);

     label51:
        if i5 != 3 goto label52;

        $r43 = r11.<com.android.server.wm.WindowToken: com.android.server.wm.AppWindowToken appWindowToken>;

        if $r43 == null goto label52;

        $r42 = r11.<com.android.server.wm.WindowToken: com.android.server.wm.AppWindowToken appWindowToken>;

        $r42.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow> = r163;

     label52:
        z15 = 1;

        if i5 != 2011 goto label53;

        r163.<com.android.server.wm.WindowState: boolean mGivenInsetsPending> = 1;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow> = r163;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void addInputMethodWindowToListLocked(com.android.server.wm.WindowState)>(r163);

        z15 = 0;

        goto label57;

     label53:
        if i5 != 2012 goto label54;

        $r44 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        virtualinvoke $r44.<java.util.ArrayList: boolean add(java.lang.Object)>(r163);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void addWindowToListInOrderLocked(com.android.server.wm.WindowState,boolean)>(r163, 1);

        $i16 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: int findDesiredInputMethodWindowIndexLocked(boolean)>(1);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void moveInputMethodDialogsLocked(int)>($i16);

        z15 = 0;

        goto label57;

     label54:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void addWindowToListInOrderLocked(com.android.server.wm.WindowState,boolean)>(r163, 1);

        if i5 != 2013 goto label55;

        r0.<com.android.server.wm.WindowManagerService: long mLastWallpaperTimeoutTime> = 0L;

        $i17 = r9.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i19 = $i17 | 4;

        r9.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i19;

        goto label57;

     label55:
        $i9 = r3.<android.view.WindowManager$LayoutParams: int flags>;

        $i8 = $i9 & 1048576;

        if $i8 == 0 goto label56;

        $i14 = r9.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i18 = $i14 | 4;

        r9.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i18;

        goto label57;

     label56:
        $r31 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        if $r31 == null goto label57;

        $r41 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $i11 = $r41.<com.android.server.wm.WindowState: int mLayer>;

        $i15 = r163.<com.android.server.wm.WindowState: int mBaseLayer>;

        if $i11 < $i15 goto label57;

        $i12 = r9.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i13 = $i12 | 4;

        r9.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i13;

     label57:
        $r33 = r163.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r33.<com.android.server.wm.WindowStateAnimator: boolean mEnterAnimationPending> = 1;

        $z7 = r9.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z7 == 0 goto label58;

        $r40 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r40.<android.view.WindowManagerPolicy: void getContentInsetHintLw(android.view.WindowManager$LayoutParams,android.graphics.Rect)>(r3, r4);

        goto label59;

     label58:
        virtualinvoke r4.<android.graphics.Rect: void setEmpty()>();

     label59:
        $z6 = r0.<com.android.server.wm.WindowManagerService: boolean mInTouchMode>;

        if $z6 == 0 goto label60;

        b32 = 1;

     label60:
        $r32 = r163.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r32 == null goto label61;

        $r38 = r163.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $z11 = $r38.<com.android.server.wm.AppWindowToken: boolean clientHidden>;

        if $z11 != 0 goto label62;

     label61:
        b32 = b32 | 2;

     label62:
        $r36 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r36.<com.android.server.wm.InputMonitor: void setUpdateInputWindowsNeededLw()>();

        z16 = 0;

        $z8 = virtualinvoke r163.<com.android.server.wm.WindowState: boolean canReceiveKeys()>();

        if $z8 == 0 goto label63;

        z16 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(1, 0);

        if z16 == 0 goto label63;

        z15 = 0;

     label63:
        if z15 == 0 goto label64;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean moveInputMethodWindowsIfNeededLocked(boolean)>(0);

     label64:
        $r35 = virtualinvoke r9.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void assignLayersLocked(com.android.server.wm.WindowList)>($r35);

        if z16 == 0 goto label65;

        $r37 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        $r39 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        virtualinvoke $r37.<com.android.server.wm.InputMonitor: void setInputFocusLw(com.android.server.wm.WindowState,boolean)>($r39, 0);

     label65:
        $r34 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r34.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(0);

        $z9 = virtualinvoke r163.<com.android.server.wm.WindowState: boolean isVisibleOrAdding()>();

        if $z9 == 0 goto label66;

        $z10 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateOrientationFromAppTokensLocked(boolean)>(0);

        if $z10 == 0 goto label66;

        z0 = 1;

     label66:
        exitmonitor r8;

     label67:
        goto label70;

     label68:
        $r151 := @caughtexception;

        r12 = $r151;

        exitmonitor r8;

     label69:
        throw r12;

     label70:
        if z0 == 0 goto label71;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void sendNewConfiguration()>();

     label71:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        return b32;

        catch java.lang.Throwable from label02 to label04 with label68;
        catch java.lang.Throwable from label05 to label06 with label68;
        catch java.lang.Throwable from label07 to label08 with label68;
        catch java.lang.Throwable from label09 to label10 with label68;
        catch java.lang.Throwable from label11 to label12 with label68;
        catch java.lang.Throwable from label13 to label14 with label68;
        catch java.lang.Throwable from label15 to label16 with label68;
        catch java.lang.Throwable from label17 to label18 with label68;
        catch java.lang.Throwable from label19 to label20 with label68;
        catch java.lang.Throwable from label21 to label22 with label68;
        catch java.lang.Throwable from label23 to label24 with label68;
        catch java.lang.Throwable from label25 to label27 with label68;
        catch java.lang.Throwable from label28 to label29 with label68;
        catch java.lang.Throwable from label30 to label31 with label68;
        catch java.lang.Throwable from label32 to label34 with label68;
        catch java.lang.Throwable from label35 to label36 with label68;
        catch java.lang.Throwable from label37 to label38 with label68;
        catch java.lang.Throwable from label39 to label40 with label68;
        catch java.lang.Throwable from label41 to label43 with label68;
        catch java.lang.Throwable from label44 to label45 with label68;
        catch java.lang.Throwable from label46 to label47 with label68;
        catch java.lang.Throwable from label48 to label67 with label68;
        catch java.lang.Throwable from label68 to label69 with label68;
    }

    boolean isScreenCaptureDisabledLocked(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        java.lang.Boolean r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mScreenCaptureDisabled>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (java.lang.Boolean) $r3;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public void setScreenCaptureDisabled(int, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        boolean z0;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r7;
        android.util.SparseArray $r4;
        java.lang.Boolean $r5;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i1 == 1000 goto label1;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Only system can call setScreenCaptureDisabled.");

        throw $r6;

     label1:
        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        $r4 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mScreenCaptureDisabled>;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r5);

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void removeWindow(com.android.server.wm.Session, android.view.IWindow)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1;
        android.view.IWindow r2;
        java.util.HashMap r3, $r6;
        com.android.server.wm.WindowState r4;
        java.lang.Throwable r5, $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        r2 := @parameter1: android.view.IWindow;

        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        r4 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r1, r2, 0);

        if r4 != null goto label3;

        exitmonitor r3;

     label2:
        return;

     label3:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void removeWindowLocked(com.android.server.wm.Session,com.android.server.wm.WindowState)>(r1, r4);

        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r5 = $r7;

        exitmonitor r3;

     label6:
        throw r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void removeWindowLocked(com.android.server.wm.Session, com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1;
        com.android.server.wm.WindowState r2;
        long l0;
        boolean z0, z1, $z2, $z4, $z6, $z7, $z8, $z9;
        byte b1;
        android.view.WindowManager$LayoutParams $r3, $r9;
        int $i2, $i3, $i4;
        com.android.server.wm.WindowManagerService$H $r4;
        com.android.server.wm.AppWindowToken $r5, $r6;
        com.android.server.wm.InputMonitor $r7;
        com.android.server.wm.WindowStateAnimator $r8, $r10;
        com.android.server.wm.AccessibilityController $r11, $r12;
        com.android.server.wm.DisplayContent r13;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        r2 := @parameter1: com.android.server.wm.WindowState;

        $r3 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 != 3 goto label01;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        virtualinvoke r2.<com.android.server.wm.WindowState: void disposeInputChannel()>();

        z0 = 0;

        $z2 = r2.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z2 == 0 goto label09;

        $z6 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean okToDisplay()>();

        if $z6 == 0 goto label09;

        z0 = virtualinvoke r2.<com.android.server.wm.WindowState: boolean isWinVisibleLw()>();

        if z0 == 0 goto label04;

        b1 = 2;

        $r9 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i3 = $r9.<android.view.WindowManager$LayoutParams: int type>;

        if $i3 != 3 goto label02;

        b1 = 5;

     label02:
        $r10 = r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z9 = virtualinvoke $r10.<com.android.server.wm.WindowStateAnimator: boolean applyAnimationLocked(int,boolean)>(b1, 0);

        if $z9 == 0 goto label03;

        r2.<com.android.server.wm.WindowState: boolean mExiting> = 1;

     label03:
        $r11 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r11 == null goto label04;

        $i4 = virtualinvoke r2.<com.android.server.wm.WindowState: int getDisplayId()>();

        if $i4 != 0 goto label04;

        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r12.<com.android.server.wm.AccessibilityController: void onWindowTransitionLocked(com.android.server.wm.WindowState,int)>(r2, b1);

     label04:
        $z7 = r2.<com.android.server.wm.WindowState: boolean mExiting>;

        if $z7 != 0 goto label05;

        $r8 = r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z8 = virtualinvoke $r8.<com.android.server.wm.WindowStateAnimator: boolean isAnimating()>();

        if $z8 == 0 goto label09;

     label05:
        r2.<com.android.server.wm.WindowState: boolean mExiting> = 1;

        r2.<com.android.server.wm.WindowState: boolean mRemoveOnExit> = 1;

        r13 = virtualinvoke r2.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r13 == null goto label06;

        r13.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label06:
        z1 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(3, 0);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        $r5 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r5 == null goto label07;

        $r6 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        virtualinvoke $r6.<com.android.server.wm.AppWindowToken: void updateReportedVisibilityLocked()>();

     label07:
        if z1 == 0 goto label08;

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r7.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(0);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label09:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void removeWindowInnerLocked(com.android.server.wm.Session,com.android.server.wm.WindowState)>(r1, r2);

        if z0 == 0 goto label10;

        $z4 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateOrientationFromAppTokensLocked(boolean)>(0);

        if $z4 == 0 goto label10;

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(18);

     label10:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(0, 1);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;
    }

    void removeWindowInnerLocked(com.android.server.wm.Session, com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1, $r43;
        com.android.server.wm.WindowState r2, r3, $r7, $r15, $r26;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        com.android.server.wm.WindowList r4, $r6, $r17, $r18, $r27, $r29, $r34, $r41;
        com.android.server.wm.DisplayContent r5, $r24, $r25;
        boolean $z0, $z5, $z6;
        android.view.WindowManagerPolicy $r8;
        android.view.IWindow $r9;
        java.util.HashMap $r10, $r30;
        android.os.IBinder $r11, $r31;
        java.util.ArrayList $r13, $r14, $r33;
        android.view.WindowManager$LayoutParams $r16, $r19, $r20;
        com.android.server.wm.InputMonitor $r21;
        com.android.server.wm.AppWindowToken $r22, $r23, r48;
        android.view.View $r28;
        com.android.server.wm.StartingData $r32;
        android.app.AppOpsManager $r36;
        java.lang.StringBuilder $r37, $r38, $r39, $r44, $r45;
        java.lang.String $r40, $r46;
        java.lang.Object $r42;
        com.android.server.wm.WindowToken r47;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        r2 := @parameter1: com.android.server.wm.WindowState;

        $z0 = r2.<com.android.server.wm.WindowState: boolean mRemoved>;

        if $z0 == 0 goto label01;

        return;

     label01:
        $r6 = r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        $i1 = virtualinvoke $r6.<com.android.server.wm.WindowList: int size()>();

        i0 = $i1 - 1;

     label02:
        if i0 < 0 goto label03;

        $r41 = r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        $r42 = virtualinvoke $r41.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.wm.WindowState) $r42;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Force-removing child win ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from container ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r46);

        $r43 = r3.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void removeWindowInnerLocked(com.android.server.wm.Session,com.android.server.wm.WindowState)>($r43, r3);

        i0 = i0 + -1;

        goto label02;

     label03:
        r2.<com.android.server.wm.WindowState: boolean mRemoved> = 1;

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget>;

        if $r7 != r2 goto label04;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean moveInputMethodWindowsIfNeededLocked(boolean)>(0);

     label04:
        $r8 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r8.<android.view.WindowManagerPolicy: void removeWindowLw(android.view.WindowManagerPolicy$WindowState)>(r2);

        virtualinvoke r2.<com.android.server.wm.WindowState: void removeLocked()>();

        $r10 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r9 = r2.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r11 = interfaceinvoke $r9.<android.view.IWindow: android.os.IBinder asBinder()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r11);

        $i2 = r2.<com.android.server.wm.WindowState: int mAppOp>;

        if $i2 == -1 goto label05;

        $r36 = r0.<com.android.server.wm.WindowManagerService: android.app.AppOpsManager mAppOps>;

        $i15 = r2.<com.android.server.wm.WindowState: int mAppOp>;

        $i14 = virtualinvoke r2.<com.android.server.wm.WindowState: int getOwningUid()>();

        $r40 = virtualinvoke r2.<com.android.server.wm.WindowState: java.lang.String getOwningPackage()>();

        virtualinvoke $r36.<android.app.AppOpsManager: void finishOp(int,int,java.lang.String)>($i15, $i14, $r40);

     label05:
        $r13 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        virtualinvoke $r13.<java.util.ArrayList: boolean remove(java.lang.Object)>(r2);

        $r14 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        virtualinvoke $r14.<java.util.ArrayList: boolean remove(java.lang.Object)>(r2);

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        $r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow>;

        if $r15 != r2 goto label06;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow> = null;

        goto label07;

     label06:
        $r16 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i3 = $r16.<android.view.WindowManager$LayoutParams: int type>;

        if $i3 != 2012 goto label07;

        $r33 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        virtualinvoke $r33.<java.util.ArrayList: boolean remove(java.lang.Object)>(r2);

     label07:
        r47 = r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        r48 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r17 = r47.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        virtualinvoke $r17.<com.android.server.wm.WindowList: boolean remove(java.lang.Object)>(r2);

        if r48 == null goto label08;

        $r34 = r48.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        virtualinvoke $r34.<com.android.server.wm.WindowList: boolean remove(java.lang.Object)>(r2);

     label08:
        $r18 = r47.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        $i4 = virtualinvoke $r18.<com.android.server.wm.WindowList: int size()>();

        if $i4 != 0 goto label10;

        $z6 = r47.<com.android.server.wm.WindowToken: boolean explicit>;

        if $z6 != 0 goto label09;

        $r30 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $r31 = r47.<com.android.server.wm.WindowToken: android.os.IBinder token>;

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r31);

        goto label10;

     label09:
        if r48 == null goto label10;

        r48.<com.android.server.wm.AppWindowToken: boolean firstWindowDrawn> = 0;

     label10:
        if r48 == null goto label13;

        $r26 = r48.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow>;

        if $r26 != r2 goto label11;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void scheduleRemoveStartingWindowLocked(com.android.server.wm.AppWindowToken)>(r48);

        goto label13;

     label11:
        $r27 = r48.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        $i13 = virtualinvoke $r27.<com.android.server.wm.WindowList: int size()>();

        if $i13 != 0 goto label12;

        $r32 = r48.<com.android.server.wm.AppWindowToken: com.android.server.wm.StartingData startingData>;

        if $r32 == null goto label12;

        r48.<com.android.server.wm.AppWindowToken: com.android.server.wm.StartingData startingData> = null;

        goto label13;

     label12:
        $r29 = r48.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        $i12 = virtualinvoke $r29.<com.android.server.wm.WindowList: int size()>();

        if $i12 != 1 goto label13;

        $r28 = r48.<com.android.server.wm.AppWindowToken: android.view.View startingView>;

        if $r28 == null goto label13;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void scheduleRemoveStartingWindowLocked(com.android.server.wm.AppWindowToken)>(r48);

     label13:
        $r19 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i5 = $r19.<android.view.WindowManager$LayoutParams: int type>;

        if $i5 != 2013 goto label14;

        r0.<com.android.server.wm.WindowManagerService: long mLastWallpaperTimeoutTime> = 0L;

        $r24 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $i10 = $r24.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i11 = $i10 | 4;

        $r24.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i11;

        goto label15;

     label14:
        $r20 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i6 = $r20.<android.view.WindowManager$LayoutParams: int flags>;

        $i7 = $i6 & 1048576;

        if $i7 == 0 goto label15;

        $r25 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $i9 = $r25.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i8 = $i9 | 4;

        $r25.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i8;

     label15:
        r4 = virtualinvoke r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        if r4 == null goto label17;

        virtualinvoke r4.<com.android.server.wm.WindowList: boolean remove(java.lang.Object)>(r2);

        $z5 = r0.<com.android.server.wm.WindowManagerService: boolean mInLayout>;

        if $z5 != 0 goto label17;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void assignLayersLocked(com.android.server.wm.WindowList)>(r4);

        r5 = virtualinvoke r2.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r5 == null goto label16;

        r5.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label16:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        $r22 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r22 == null goto label17;

        $r23 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        virtualinvoke $r23.<com.android.server.wm.AppWindowToken: void updateReportedVisibilityLocked()>();

     label17:
        $r21 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r21.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        return;
    }

    public void updateAppOpsState()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r5;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        com.android.server.wm.WindowList r2;
        com.android.server.wm.WindowState r3;
        java.lang.Throwable r4, $r13;
        android.util.SparseArray $r6, $r7;
        java.lang.Object $r8, $r10;
        com.android.server.wm.DisplayContent $r9;
        android.app.AppOpsManager $r11;
        java.lang.String $r12;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i0 = virtualinvoke $r6.<android.util.SparseArray: int size()>();

        i1 = 0;

     label02:
        if i1 >= i0 goto label08;

        $r7 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r9 = (com.android.server.wm.DisplayContent) $r8;

        r2 = virtualinvoke $r9.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        i2 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        i3 = 0;

     label03:
        if i3 >= i2 goto label07;

        $r10 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        r3 = (com.android.server.wm.WindowState) $r10;

        $i5 = r3.<com.android.server.wm.WindowState: int mAppOp>;

        if $i5 == -1 goto label06;

        $r11 = r0.<com.android.server.wm.WindowManagerService: android.app.AppOpsManager mAppOps>;

        $i7 = r3.<com.android.server.wm.WindowState: int mAppOp>;

        $i6 = virtualinvoke r3.<com.android.server.wm.WindowState: int getOwningUid()>();

        $r12 = virtualinvoke r3.<com.android.server.wm.WindowState: java.lang.String getOwningPackage()>();

        i4 = virtualinvoke $r11.<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>($i7, $i6, $r12);

        if i4 != 0 goto label04;

        $z0 = 1;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        virtualinvoke r3.<com.android.server.wm.WindowState: void setAppOpVisibilityLw(boolean)>($z0);

     label06:
        i3 = i3 + 1;

        goto label03;

     label07:
        i1 = i1 + 1;

        goto label02;

     label08:
        exitmonitor r1;

     label09:
        goto label12;

     label10:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r1;

     label11:
        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    static void logSurface(com.android.server.wm.WindowState, java.lang.String, java.lang.RuntimeException)
    {
        com.android.server.wm.WindowState r0;
        java.lang.String r1, r3;
        java.lang.RuntimeException r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: com.android.server.wm.WindowState;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  SURFACE ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        if r2 == null goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", r3, r2);

        goto label2;

     label1:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", r3);

     label2:
        return;
    }

    static void logSurface(android.view.SurfaceControl, java.lang.String, java.lang.String, java.lang.RuntimeException)
    {
        android.view.SurfaceControl r0;
        java.lang.String r1, r2, r4;
        java.lang.RuntimeException r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @parameter0: android.view.SurfaceControl;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.RuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  SURFACE ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        if r3 == null goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", r4, r3);

        goto label2;

     label1:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", r4);

     label2:
        return;
    }

    void setTransparentRegionWindow(com.android.server.wm.Session, android.view.IWindow, android.graphics.Region)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1;
        android.view.IWindow r2;
        android.graphics.Region r3;
        long l0;
        java.util.HashMap r4, $r8;
        com.android.server.wm.WindowState r5;
        java.lang.Throwable r6, r7, $r10, $r11;
        boolean $z0;
        com.android.server.wm.WindowStateAnimator $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        r2 := @parameter1: android.view.IWindow;

        r3 := @parameter2: android.graphics.Region;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r4 = $r8;

        entermonitor $r8;

     label02:
        r5 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r1, r2, 0);

        if r5 == null goto label03;

        $z0 = r5.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z0 == 0 goto label03;

        $r9 = r5.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r9.<com.android.server.wm.WindowStateAnimator: void setTransparentRegionHintLocked(android.graphics.Region)>(r3);

     label03:
        exitmonitor r4;

     label04:
        goto label07;

     label05:
        $r10 := @caughtexception;

        r6 = $r10;

        exitmonitor r4;

     label06:
        throw r6;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label10;

     label08:
        $r11 := @caughtexception;

        r7 = $r11;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r7;

     label10:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    void setInsetsWindow(com.android.server.wm.Session, android.view.IWindow, int, android.graphics.Rect, android.graphics.Rect, android.graphics.Region)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1;
        android.view.IWindow r2;
        int i0;
        android.graphics.Rect r3, r4, $r12, $r13, $r15, $r16;
        android.graphics.Region r5, $r14, $r18;
        long l1;
        java.util.HashMap r6, $r11;
        com.android.server.wm.WindowState r7;
        com.android.server.wm.DisplayContent r8;
        java.lang.Throwable r9, r10, $r17, $r19;
        byte $b2;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        r2 := @parameter1: android.view.IWindow;

        i0 := @parameter2: int;

        r3 := @parameter3: android.graphics.Rect;

        r4 := @parameter4: android.graphics.Rect;

        r5 := @parameter5: android.graphics.Region;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r11 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r6 = $r11;

        entermonitor $r11;

     label02:
        r7 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r1, r2, 0);

        if r7 == null goto label05;

        r7.<com.android.server.wm.WindowState: boolean mGivenInsetsPending> = 0;

        $r13 = r7.<com.android.server.wm.WindowState: android.graphics.Rect mGivenContentInsets>;

        virtualinvoke $r13.<android.graphics.Rect: void set(android.graphics.Rect)>(r3);

        $r12 = r7.<com.android.server.wm.WindowState: android.graphics.Rect mGivenVisibleInsets>;

        virtualinvoke $r12.<android.graphics.Rect: void set(android.graphics.Rect)>(r4);

        $r14 = r7.<com.android.server.wm.WindowState: android.graphics.Region mGivenTouchableRegion>;

        virtualinvoke $r14.<android.graphics.Region: boolean set(android.graphics.Region)>(r5);

        r7.<com.android.server.wm.WindowState: int mTouchableInsets> = i0;

        $f0 = r7.<com.android.server.wm.WindowState: float mGlobalScale>;

        $b2 = $f0 cmpl 1.0F;

        if $b2 == 0 goto label03;

        $r15 = r7.<com.android.server.wm.WindowState: android.graphics.Rect mGivenContentInsets>;

        $f1 = r7.<com.android.server.wm.WindowState: float mGlobalScale>;

        virtualinvoke $r15.<android.graphics.Rect: void scale(float)>($f1);

        $r16 = r7.<com.android.server.wm.WindowState: android.graphics.Rect mGivenVisibleInsets>;

        $f2 = r7.<com.android.server.wm.WindowState: float mGlobalScale>;

        virtualinvoke $r16.<android.graphics.Rect: void scale(float)>($f2);

        $r18 = r7.<com.android.server.wm.WindowState: android.graphics.Region mGivenTouchableRegion>;

        $f3 = r7.<com.android.server.wm.WindowState: float mGlobalScale>;

        virtualinvoke $r18.<android.graphics.Region: void scale(float)>($f3);

     label03:
        r8 = virtualinvoke r7.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r8 == null goto label04;

        r8.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label04:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

     label05:
        exitmonitor r6;

     label06:
        goto label09;

     label07:
        $r19 := @caughtexception;

        r9 = $r19;

        exitmonitor r6;

     label08:
        throw r9;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label12;

     label10:
        $r17 := @caughtexception;

        r10 = $r17;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r10;

     label12:
        return;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void getWindowDisplayFrame(com.android.server.wm.Session, android.view.IWindow, android.graphics.Rect)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1;
        android.view.IWindow r2;
        android.graphics.Rect r3, $r8;
        java.util.HashMap r4, $r7;
        com.android.server.wm.WindowState r5;
        java.lang.Throwable r6, $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        r2 := @parameter1: android.view.IWindow;

        r3 := @parameter2: android.graphics.Rect;

        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r4 = $r7;

        entermonitor $r7;

     label1:
        r5 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r1, r2, 0);

        if r5 != null goto label3;

        virtualinvoke r3.<android.graphics.Rect: void setEmpty()>();

        exitmonitor r4;

     label2:
        return;

     label3:
        $r8 = r5.<com.android.server.wm.WindowState: android.graphics.Rect mDisplayFrame>;

        virtualinvoke r3.<android.graphics.Rect: void set(android.graphics.Rect)>($r8);

        exitmonitor r4;

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        r6 = $r9;

        exitmonitor r4;

     label6:
        throw r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setWindowWallpaperPositionLocked(com.android.server.wm.WindowState, float, float, float, float)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1;
        float f0, f1, f2, f3, $f4, $f5;
        byte $b0, $b1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        $f4 = r1.<com.android.server.wm.WindowState: float mWallpaperX>;

        $b0 = $f4 cmpl f0;

        if $b0 != 0 goto label1;

        $f5 = r1.<com.android.server.wm.WindowState: float mWallpaperY>;

        $b1 = $f5 cmpl f1;

        if $b1 == 0 goto label2;

     label1:
        r1.<com.android.server.wm.WindowState: float mWallpaperX> = f0;

        r1.<com.android.server.wm.WindowState: float mWallpaperY> = f1;

        r1.<com.android.server.wm.WindowState: float mWallpaperXStep> = f2;

        r1.<com.android.server.wm.WindowState: float mWallpaperYStep> = f3;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void updateWallpaperOffsetLocked(com.android.server.wm.WindowState,boolean)>(r1, 1);

     label2:
        return;
    }

    void wallpaperCommandComplete(android.os.IBinder, android.os.Bundle)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1, $r9;
        android.os.Bundle r2;
        java.util.HashMap r3, $r5, $r10;
        java.lang.Throwable r4, $r11;
        com.android.server.wm.WindowState $r6, $r7;
        android.view.IWindow $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.os.Bundle;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWaitingOnWallpaper>;

        if $r6 == null goto label2;

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWaitingOnWallpaper>;

        $r8 = $r7.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r9 = interfaceinvoke $r8.<android.view.IWindow: android.os.IBinder asBinder()>();

        if $r9 != r1 goto label2;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWaitingOnWallpaper> = null;

        $r10 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        virtualinvoke $r10.<java.lang.Object: void notifyAll()>();

     label2:
        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r3;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setWindowWallpaperDisplayOffsetLocked(com.android.server.wm.WindowState, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1;
        int i0, i1, $i2, $i3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX>;

        if $i2 != i0 goto label1;

        $i3 = r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY>;

        if $i3 == i1 goto label2;

     label1:
        r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetX> = i0;

        r1.<com.android.server.wm.WindowState: int mWallpaperDisplayOffsetY> = i1;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void updateWallpaperOffsetLocked(com.android.server.wm.WindowState,boolean)>(r1, 1);

     label2:
        return;
    }

    public android.os.Bundle sendWindowWallpaperCommandLocked(com.android.server.wm.WindowState, java.lang.String, int, int, int, android.os.Bundle, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1, r5, $r7, $r15, $r16;
        java.lang.String r2;
        int i0, i1, i2, i3, i4;
        android.os.Bundle r3;
        boolean z0, z1;
        com.android.server.wm.WindowToken r4;
        java.util.ArrayList $r8, $r9;
        com.android.server.wm.WindowList $r10, $r12;
        java.lang.Object $r11, $r14;
        android.view.IWindow $r13;
        android.os.RemoteException $r17;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.os.Bundle;

        z0 := @parameter6: boolean;

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        if r1 == $r7 goto label01;

        $r16 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget>;

        if r1 == $r16 goto label01;

        $r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mUpperWallpaperTarget>;

        if r1 != $r15 goto label10;

     label01:
        z1 = z0;

        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        i3 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

     label02:
        if i3 <= 0 goto label09;

        i3 = i3 + -1;

        $r9 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        $r11 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r4 = (com.android.server.wm.WindowToken) $r11;

        $r10 = r4.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        i4 = virtualinvoke $r10.<com.android.server.wm.WindowList: int size()>();

     label03:
        if i4 <= 0 goto label08;

        i4 = i4 + -1;

        $r12 = r4.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        $r14 = virtualinvoke $r12.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i4);

        r5 = (com.android.server.wm.WindowState) $r14;

     label04:
        $r13 = r5.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r13.<android.view.IWindow: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)>(r2, i0, i1, i2, r3, z0);

        z0 = 0;

     label05:
        goto label07;

     label06:
        $r17 := @caughtexception;

     label07:
        goto label03;

     label08:
        goto label02;

     label09:
        if z1 == 0 goto label10;

     label10:
        return null;

        catch android.os.RemoteException from label04 to label05 with label06;
    }

    public void setUniverseTransformLocked(com.android.server.wm.WindowState, float, float, float, float, float, float, float)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1;
        float f0, f1, f2, f3, f4, f5, f6, $f7, $f8, $f9, $f10, $f11, $f12;
        android.view.animation.Transformation r2;
        android.graphics.Matrix r3;
        com.android.server.wm.DisplayContent r4;
        android.view.DisplayInfo r5;
        android.graphics.RectF r6, $r16;
        com.android.server.wm.WindowStateAnimator $r7;
        float[] $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.graphics.Region $r17, $r19;
        android.graphics.Region$Op $r18;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        f4 := @parameter5: float;

        f5 := @parameter6: float;

        f6 := @parameter7: float;

        $r7 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        r2 = $r7.<com.android.server.wm.WindowStateAnimator: android.view.animation.Transformation mUniverseTransform>;

        virtualinvoke r2.<android.view.animation.Transformation: void setAlpha(float)>(f0);

        r3 = virtualinvoke r2.<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>();

        $r9 = r0.<com.android.server.wm.WindowManagerService: float[] mTmpFloats>;

        virtualinvoke r3.<android.graphics.Matrix: void getValues(float[])>($r9);

        $r8 = r0.<com.android.server.wm.WindowManagerService: float[] mTmpFloats>;

        $r8[2] = f1;

        $r11 = r0.<com.android.server.wm.WindowManagerService: float[] mTmpFloats>;

        $r11[5] = f2;

        $r10 = r0.<com.android.server.wm.WindowManagerService: float[] mTmpFloats>;

        $r10[0] = f3;

        $r13 = r0.<com.android.server.wm.WindowManagerService: float[] mTmpFloats>;

        $r13[3] = f4;

        $r12 = r0.<com.android.server.wm.WindowManagerService: float[] mTmpFloats>;

        $r12[1] = f5;

        $r15 = r0.<com.android.server.wm.WindowManagerService: float[] mTmpFloats>;

        $r15[4] = f6;

        $r14 = r0.<com.android.server.wm.WindowManagerService: float[] mTmpFloats>;

        virtualinvoke r3.<android.graphics.Matrix: void setValues(float[])>($r14);

        r4 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r4 != null goto label1;

        return;

     label1:
        r5 = virtualinvoke r4.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        $r16 = new android.graphics.RectF;

        $i0 = r5.<android.view.DisplayInfo: int logicalWidth>;

        $f8 = (float) $i0;

        $i1 = r5.<android.view.DisplayInfo: int logicalHeight>;

        $f7 = (float) $i1;

        specialinvoke $r16.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f8, $f7);

        r6 = $r16;

        virtualinvoke r3.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r6);

        $r17 = r1.<com.android.server.wm.WindowState: android.graphics.Region mGivenTouchableRegion>;

        $i3 = r5.<android.view.DisplayInfo: int logicalWidth>;

        $i2 = r5.<android.view.DisplayInfo: int logicalHeight>;

        virtualinvoke $r17.<android.graphics.Region: boolean set(int,int,int,int)>(0, 0, $i3, $i2);

        $r19 = r1.<com.android.server.wm.WindowState: android.graphics.Region mGivenTouchableRegion>;

        $f11 = r6.<android.graphics.RectF: float left>;

        $i7 = (int) $f11;

        $f12 = r6.<android.graphics.RectF: float top>;

        $i5 = (int) $f12;

        $f9 = r6.<android.graphics.RectF: float right>;

        $i4 = (int) $f9;

        $f10 = r6.<android.graphics.RectF: float bottom>;

        $i6 = (int) $f10;

        $r18 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke $r19.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>($i7, $i5, $i4, $i6, $r18);

        r1.<com.android.server.wm.WindowState: int mTouchableInsets> = 3;

        r4.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        return;
    }

    public void onRectangleOnScreenRequested(android.os.IBinder, android.graphics.Rect)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        android.graphics.Rect r2;
        java.util.HashMap r3, $r6, $r8;
        com.android.server.wm.WindowState r4;
        java.lang.Throwable r5, $r11;
        com.android.server.wm.AccessibilityController $r7, $r10;
        java.lang.Object $r9;
        int $i0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.graphics.Rect;

        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r7 == null goto label2;

        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.wm.WindowState) $r9;

        if r4 == null goto label2;

        $i0 = virtualinvoke r4.<com.android.server.wm.WindowState: int getDisplayId()>();

        if $i0 != 0 goto label2;

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r10.<com.android.server.wm.AccessibilityController: void onRectangleOnScreenRequestedLocked(android.graphics.Rect)>(r2);

     label2:
        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r3;

     label5:
        throw r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public android.view.IWindowId getWindowId(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        java.util.HashMap r2, $r5, $r6;
        com.android.server.wm.WindowState r3;
        java.lang.Throwable r4, $r9;
        java.lang.Object $r7;
        android.view.IWindowId $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.wm.WindowState) $r7;

        if r3 == null goto label2;

        $r8 = r3.<com.android.server.wm.WindowState: android.view.IWindowId mWindowId>;

        goto label3;

     label2:
        $r8 = null;

     label3:
        exitmonitor r2;

     label4:
        return $r8;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r2;

     label6:
        throw r4;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int relayoutWindow(com.android.server.wm.Session, android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, int, int, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.content.res.Configuration, android.view.Surface)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1;
        android.view.IWindow r2;
        int i0, i1, i2, i3, i4, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63;
        android.view.WindowManager$LayoutParams r3, r17, $r19, $r20, $r36, $r43, $r50, $r51, $r54, $r57, $r58, $r59, $r62, $r70;
        android.graphics.Rect r4, r5, r6, r7, r8, $r22, $r26, $r27, $r28, $r29;
        android.content.res.Configuration r9, $r52;
        android.view.Surface r10;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, $z11, $z12, $z13, $z14, $z15, $z17, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, z44;
        long l5;
        com.android.server.wm.WindowState r11, $r40, $r42, $r45, $r47, $r55;
        java.util.HashMap r12, $r18;
        com.android.server.wm.WindowStateAnimator r13, $r33, $r35, $r38;
        java.lang.Throwable r14, $r61;
        android.content.Context $r15;
        android.view.SurfaceControl r16, $r21;
        com.android.server.wm.AppWindowToken $r23, $r31, $r44, $r46, $r48, $r49, $r56;
        com.android.server.wm.WindowAnimator $r24;
        com.android.server.wm.InputMonitor $r25, $r72;
        byte $b22, $b23, $b24, $b25, $b26, $b27, $b28, b66;
        java.util.ArrayList $r30, $r32, $r53;
        com.android.server.wm.DisplayContent $r34, r76;
        com.android.server.wm.WindowList $r37;
        com.android.server.wm.AccessibilityController $r39, $r41;
        float $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.view.WindowManagerPolicy $r60;
        java.lang.IllegalArgumentException $r63;
        java.lang.StringBuilder $r64, $r67, $r68, $r69, $r71, $r74;
        java.lang.CharSequence $r65;
        java.lang.String $r66;
        java.lang.Exception $r73, r75;
        android.view.DisplayInfo r77;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        r2 := @parameter1: android.view.IWindow;

        i0 := @parameter2: int;

        r3 := @parameter3: android.view.WindowManager$LayoutParams;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        i4 := @parameter7: int;

        r4 := @parameter8: android.graphics.Rect;

        r5 := @parameter9: android.graphics.Rect;

        r6 := @parameter10: android.graphics.Rect;

        r7 := @parameter11: android.graphics.Rect;

        r8 := @parameter12: android.graphics.Rect;

        r9 := @parameter13: android.content.res.Configuration;

        r10 := @parameter14: android.view.Surface;

        z1 = 0;

        z2 = 0;

        $r15 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i10 = virtualinvoke $r15.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.STATUS_BAR");

        if $i10 != 0 goto label01;

        $z42 = 1;

        goto label02;

     label01:
        $z42 = 0;

     label02:
        z4 = $z42;

        l5 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r18 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r12 = $r18;

        entermonitor $r18;

     label03:
        r11 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r1, r2, 0);

        if r11 != null goto label05;

        exitmonitor r12;

     label04:
        return 0;

     label05:
        r13 = r11.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i12 = r11.<com.android.server.wm.WindowState: int mRequestedWidth>;

        if $i12 != i1 goto label06;

        $i57 = r11.<com.android.server.wm.WindowState: int mRequestedHeight>;

        if $i57 == i2 goto label07;

     label06:
        r11.<com.android.server.wm.WindowState: boolean mLayoutNeeded> = 1;

        r11.<com.android.server.wm.WindowState: int mRequestedWidth> = i1;

        r11.<com.android.server.wm.WindowState: int mRequestedHeight> = i2;

     label07:
        if r3 == null goto label08;

        $r60 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r60.<android.view.WindowManagerPolicy: void adjustWindowParamsLw(android.view.WindowManager$LayoutParams)>(r3);

     label08:
        i6 = 0;

        if r3 == null goto label09;

        $i58 = r3.<android.view.WindowManager$LayoutParams: int systemUiVisibility>;

        $i63 = r3.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        i6 = $i58 | $i63;

        $i59 = i6 & 67043328;

        if $i59 == 0 goto label09;

        if z4 != 0 goto label09;

        i6 = i6 & -67043329;

     label09:
        if r3 == null goto label10;

        $i62 = r11.<com.android.server.wm.WindowState: int mSeq>;

        if i0 != $i62 goto label10;

        r11.<com.android.server.wm.WindowState: int mSystemUiVisibility> = i6;

     label10:
        $i13 = i4 & 2;

        if $i13 == 0 goto label11;

        $z43 = 1;

        goto label12;

     label11:
        $z43 = 0;

     label12:
        r13.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceDestroyDeferred> = $z43;

        i8 = 0;

        i7 = 0;

        if r3 == null goto label14;

        $r58 = r11.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i55 = $r58.<android.view.WindowManager$LayoutParams: int type>;

        $i52 = r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i55 == $i52 goto label13;

        $r63 = new java.lang.IllegalArgumentException;

        specialinvoke $r63.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Window type can not be changed after the window is added.");

        throw $r63;

     label13:
        $r59 = r11.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i53 = $r59.<android.view.WindowManager$LayoutParams: int flags>;

        $i54 = r3.<android.view.WindowManager$LayoutParams: int flags>;

        $i61 = $i53 ^ $i54;

        $r59.<android.view.WindowManager$LayoutParams: int flags> = $i61;

        i7 = $i61;

        $r62 = r11.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i8 = virtualinvoke $r62.<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>(r3);

        $i60 = i8 & 16385;

        if $i60 == 0 goto label14;

        r11.<com.android.server.wm.WindowState: boolean mLayoutNeeded> = 1;

     label14:
        $r19 = r11.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i11 = $r19.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i16 = $i11 & 128;

        if $i16 == 0 goto label15;

        $z40 = 1;

        goto label16;

     label15:
        $z40 = 0;

     label16:
        r11.<com.android.server.wm.WindowState: boolean mEnforceSizeCompat> = $z40;

        $i15 = i8 & 128;

        if $i15 == 0 goto label17;

        $f1 = r3.<android.view.WindowManager$LayoutParams: float alpha>;

        r13.<com.android.server.wm.WindowStateAnimator: float mAlpha> = $f1;

     label17:
        $r20 = r11.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i14 = $r20.<android.view.WindowManager$LayoutParams: int flags>;

        $i18 = $i14 & 16384;

        if $i18 == 0 goto label18;

        $z41 = 1;

        goto label19;

     label18:
        $z41 = 0;

     label19:
        z7 = $z41;

        if z7 == 0 goto label24;

        $i47 = r3.<android.view.WindowManager$LayoutParams: int width>;

        if $i47 == i1 goto label20;

        $i56 = r3.<android.view.WindowManager$LayoutParams: int width>;

        $f6 = (float) $i56;

        $f7 = (float) i1;

        $f5 = $f6 / $f7;

        goto label21;

     label20:
        $f5 = 1.0F;

     label21:
        r11.<com.android.server.wm.WindowState: float mHScale> = $f5;

        $i48 = r3.<android.view.WindowManager$LayoutParams: int height>;

        if $i48 == i2 goto label22;

        $i49 = r3.<android.view.WindowManager$LayoutParams: int height>;

        $f3 = (float) $i49;

        $f4 = (float) i2;

        $f2 = $f3 / $f4;

        goto label23;

     label22:
        $f2 = 1.0F;

     label23:
        r11.<com.android.server.wm.WindowState: float mVScale> = $f2;

        goto label25;

     label24:
        r11.<com.android.server.wm.WindowState: float mVScale> = 1.0F;

        r11.<com.android.server.wm.WindowState: float mHScale> = 1.0F;

     label25:
        $i17 = i7 & 131080;

        if $i17 == 0 goto label26;

        $z35 = 1;

        goto label27;

     label26:
        $z35 = 0;

     label27:
        z6 = $z35;

        z9 = virtualinvoke r11.<com.android.server.wm.WindowState: boolean isDefaultDisplay()>();

        if z9 == 0 goto label29;

        $i45 = r11.<com.android.server.wm.WindowState: int mViewVisibility>;

        if $i45 != i3 goto label28;

        $i46 = i7 & 8;

        if $i46 != 0 goto label28;

        $z34 = r11.<com.android.server.wm.WindowState: boolean mRelayoutCalled>;

        if $z34 != 0 goto label29;

     label28:
        $z33 = 1;

        goto label30;

     label29:
        $z33 = 0;

     label30:
        z10 = $z33;

        $i20 = r11.<com.android.server.wm.WindowState: int mViewVisibility>;

        if $i20 == i3 goto label31;

        $r57 = r11.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i50 = $r57.<android.view.WindowManager$LayoutParams: int flags>;

        $i51 = $i50 & 1048576;

        if $i51 == 0 goto label31;

        $z39 = 1;

        goto label32;

     label31:
        $z39 = 0;

     label32:
        z8 = $z39;

        $i19 = i7 & 1048576;

        if $i19 == 0 goto label33;

        $z38 = 1;

        goto label34;

     label33:
        $z38 = 0;

     label34:
        z44 = z8 | $z38;

        r11.<com.android.server.wm.WindowState: boolean mRelayoutCalled> = 1;

        i9 = r11.<com.android.server.wm.WindowState: int mViewVisibility>;

        r11.<com.android.server.wm.WindowState: int mViewVisibility> = i3;

        if i3 != 0 goto label53;

        $r44 = r11.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r44 == null goto label35;

        $r56 = r11.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $z37 = $r56.<com.android.server.wm.AppWindowToken: boolean clientHidden>;

        if $z37 != 0 goto label53;

     label35:
        $z28 = virtualinvoke r11.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z28 != 0 goto label36;

        $z36 = 1;

        goto label37;

     label36:
        $z36 = 0;

     label37:
        z1 = $z36;

        $z27 = r11.<com.android.server.wm.WindowState: boolean mExiting>;

        if $z27 == 0 goto label38;

        virtualinvoke r13.<com.android.server.wm.WindowStateAnimator: void cancelExitAnimationForNextAnimationLocked()>();

        r11.<com.android.server.wm.WindowState: boolean mExiting> = 0;

     label38:
        $z26 = r11.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z26 == 0 goto label39;

        r11.<com.android.server.wm.WindowState: boolean mDestroying> = 0;

        $r53 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        virtualinvoke $r53.<java.util.ArrayList: boolean remove(java.lang.Object)>(r11);

     label39:
        if i9 != 8 goto label40;

        r13.<com.android.server.wm.WindowStateAnimator: boolean mEnterAnimationPending> = 1;

     label40:
        if z1 == 0 goto label43;

        $z32 = virtualinvoke r11.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z32 == 0 goto label41;

        $z30 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean okToDisplay()>();

        if $z30 == 0 goto label41;

        virtualinvoke r13.<com.android.server.wm.WindowStateAnimator: void applyEnterAnimationLocked()>();

     label41:
        $r51 = r11.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i38 = $r51.<android.view.WindowManager$LayoutParams: int flags>;

        $i39 = $i38 & 2097152;

        if $i39 == 0 goto label42;

        r11.<com.android.server.wm.WindowState: boolean mTurnOnScreen> = 1;

     label42:
        $z29 = virtualinvoke r11.<com.android.server.wm.WindowState: boolean isConfigChanged()>();

        if $z29 == 0 goto label43;

        $r52 = r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mCurConfiguration>;

        virtualinvoke r9.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>($r52);

     label43:
        $i35 = i8 & 8;

        if $i35 == 0 goto label44;

        virtualinvoke r13.<com.android.server.wm.WindowStateAnimator: void destroySurfaceLocked()>();

        z1 = 1;

        z2 = 1;

     label44:
        $z25 = r11.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z25 != 0 goto label45;

        z2 = 1;

     label45:
        r16 = virtualinvoke r13.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl createSurfaceLocked()>();

        if r16 == null goto label46;

        virtualinvoke r10.<android.view.Surface: void copyFrom(android.view.SurfaceControl)>(r16);

        goto label47;

     label46:
        virtualinvoke r10.<android.view.Surface: void release()>();

     label47:
        goto label50;

     label48:
        $r73 := @caughtexception;

        r75 = $r73;

        $r72 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r72.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown when creating surface for client ");

        $r68 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r71 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r70 = r11.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r65 = virtualinvoke $r70.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r64 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r65);

        $r67 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r66 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r66, r75);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        exitmonitor r12;

     label49:
        return 0;

     label50:
        if z1 == 0 goto label51;

        z10 = z9;

     label51:
        $r43 = r11.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i37 = $r43.<android.view.WindowManager$LayoutParams: int type>;

        if $i37 != 2011 goto label52;

        $r55 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow>;

        if $r55 != null goto label52;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow> = r11;

        z6 = 1;

     label52:
        $r50 = r11.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i36 = $r50.<android.view.WindowManager$LayoutParams: int type>;

        if $i36 != 1 goto label61;

        $r49 = r11.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r49 == null goto label61;

        $r48 = r11.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r47 = $r48.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow>;

        if $r47 == null goto label61;

        $r46 = r11.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r45 = $r46.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow>;

        r17 = $r45.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i40 = r17.<android.view.WindowManager$LayoutParams: int flags>;

        $i44 = $i40 & -4718594;

        $r54 = r11.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i42 = $r54.<android.view.WindowManager$LayoutParams: int flags>;

        $i41 = $i42 & 4718593;

        $i43 = $i44 | $i41;

        r17.<android.view.WindowManager$LayoutParams: int flags> = $i43;

        goto label61;

     label53:
        r13.<com.android.server.wm.WindowStateAnimator: boolean mEnterAnimationPending> = 0;

        $r21 = r13.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl>;

        if $r21 == null goto label60;

        $z21 = r11.<com.android.server.wm.WindowState: boolean mExiting>;

        if $z21 != 0 goto label60;

        z2 = 1;

        b66 = 2;

        $r36 = r11.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i33 = $r36.<android.view.WindowManager$LayoutParams: int type>;

        if $i33 != 3 goto label54;

        b66 = 5;

     label54:
        $z19 = virtualinvoke r11.<com.android.server.wm.WindowState: boolean isWinVisibleLw()>();

        if $z19 == 0 goto label55;

        $z23 = virtualinvoke r13.<com.android.server.wm.WindowStateAnimator: boolean applyAnimationLocked(int,boolean)>(b66, 0);

        if $z23 == 0 goto label55;

        z10 = z9;

        r11.<com.android.server.wm.WindowState: boolean mExiting> = 1;

        goto label59;

     label55:
        $r35 = r11.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z24 = virtualinvoke $r35.<com.android.server.wm.WindowStateAnimator: boolean isAnimating()>();

        if $z24 == 0 goto label56;

        r11.<com.android.server.wm.WindowState: boolean mExiting> = 1;

        goto label59;

     label56:
        $r42 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        if r11 != $r42 goto label57;

        r11.<com.android.server.wm.WindowState: boolean mExiting> = 1;

        $r38 = r11.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r38.<com.android.server.wm.WindowStateAnimator: boolean mAnimating> = 1;

        goto label59;

     label57:
        $r40 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow>;

        if $r40 != r11 goto label58;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow> = null;

     label58:
        virtualinvoke r13.<com.android.server.wm.WindowStateAnimator: void destroySurfaceLocked()>();

     label59:
        $r41 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r41 == null goto label60;

        $i34 = virtualinvoke r11.<com.android.server.wm.WindowState: int getDisplayId()>();

        if $i34 != 0 goto label60;

        $r39 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r39.<com.android.server.wm.AccessibilityController: void onWindowTransitionLocked(com.android.server.wm.WindowState,int)>(r11, b66);

     label60:
        virtualinvoke r10.<android.view.Surface: void release()>();

     label61:
        if z10 == 0 goto label62;

        $z20 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(3, 0);

        if $z20 == 0 goto label62;

        z6 = 0;

     label62:
        if z6 == 0 goto label64;

        $z22 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean moveInputMethodWindowsIfNeededLocked(boolean)>(0);

        if $z22 != 0 goto label63;

        if z1 == 0 goto label64;

     label63:
        $r37 = virtualinvoke r11.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void assignLayersLocked(com.android.server.wm.WindowList)>($r37);

     label64:
        if z44 == 0 goto label65;

        $r34 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $i30 = $r34.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i29 = $i30 | 4;

        $r34.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i29;

     label65:
        r76 = virtualinvoke r11.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r76 == null goto label66;

        r76.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label66:
        $i21 = i4 & 1;

        if $i21 == 0 goto label67;

        $z17 = 1;

        goto label68;

     label67:
        $z17 = 0;

     label68:
        r11.<com.android.server.wm.WindowState: boolean mGivenInsetsPending> = $z17;

        z3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateOrientationFromAppTokensLocked(boolean)>(0);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        if z1 == 0 goto label69;

        $z14 = r11.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z14 == 0 goto label69;

        r77 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: android.view.DisplayInfo getDefaultDisplayInfoLocked()>();

        $i32 = r77.<android.view.DisplayInfo: int logicalWidth>;

        $i31 = r77.<android.view.DisplayInfo: int logicalHeight>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateWallpaperOffsetLocked(com.android.server.wm.WindowState,int,int,boolean)>(r11, $i32, $i31, 0);

     label69:
        $r23 = r11.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r23 == null goto label70;

        $r31 = r11.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        virtualinvoke $r31.<com.android.server.wm.AppWindowToken: void updateReportedVisibilityLocked()>();

     label70:
        $r22 = r11.<com.android.server.wm.WindowState: android.graphics.Rect mCompatFrame>;

        virtualinvoke r4.<android.graphics.Rect: void set(android.graphics.Rect)>($r22);

        $r26 = r11.<com.android.server.wm.WindowState: android.graphics.Rect mOverscanInsets>;

        virtualinvoke r5.<android.graphics.Rect: void set(android.graphics.Rect)>($r26);

        $r27 = r11.<com.android.server.wm.WindowState: android.graphics.Rect mContentInsets>;

        virtualinvoke r6.<android.graphics.Rect: void set(android.graphics.Rect)>($r27);

        $r28 = r11.<com.android.server.wm.WindowState: android.graphics.Rect mVisibleInsets>;

        virtualinvoke r7.<android.graphics.Rect: void set(android.graphics.Rect)>($r28);

        $r29 = r11.<com.android.server.wm.WindowState: android.graphics.Rect mStableInsets>;

        virtualinvoke r8.<android.graphics.Rect: void set(android.graphics.Rect)>($r29);

        z0 = r0.<com.android.server.wm.WindowManagerService: boolean mInTouchMode>;

        $r24 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $z11 = $r24.<com.android.server.wm.WindowAnimator: boolean mAnimating>;

        if $z11 == 0 goto label71;

        $r33 = r11.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z13 = virtualinvoke $r33.<com.android.server.wm.WindowStateAnimator: boolean isAnimating()>();

        if $z13 == 0 goto label71;

        $z12 = 1;

        goto label72;

     label71:
        $z12 = 0;

     label72:
        z5 = $z12;

        if z5 == 0 goto label73;

        $r30 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRelayoutWhileAnimating>;

        $z15 = virtualinvoke $r30.<java.util.ArrayList: boolean contains(java.lang.Object)>(r11);

        if $z15 != 0 goto label73;

        $r32 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRelayoutWhileAnimating>;

        virtualinvoke $r32.<java.util.ArrayList: boolean add(java.lang.Object)>(r11);

     label73:
        $r25 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r25.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        exitmonitor r12;

     label74:
        goto label77;

     label75:
        $r61 := @caughtexception;

        r14 = $r61;

        exitmonitor r12;

     label76:
        throw r14;

     label77:
        if z3 == 0 goto label78;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void sendNewConfiguration()>();

     label78:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        if z0 == 0 goto label79;

        $b24 = 1;

        goto label80;

     label79:
        $b24 = 0;

     label80:
        if z1 == 0 goto label81;

        $b23 = 2;

        goto label82;

     label81:
        $b23 = 0;

     label82:
        $b25 = $b24 | $b23;

        if z2 == 0 goto label83;

        $b22 = 4;

        goto label84;

     label83:
        $b22 = 0;

     label84:
        $b26 = $b25 | $b22;

        if z5 == 0 goto label85;

        $b28 = 8;

        goto label86;

     label85:
        $b28 = 0;

     label86:
        $b27 = $b26 | $b28;

        return $b27;

        catch java.lang.Exception from label44 to label47 with label48;
        catch java.lang.Throwable from label03 to label04 with label75;
        catch java.lang.Throwable from label05 to label49 with label75;
        catch java.lang.Throwable from label50 to label74 with label75;
        catch java.lang.Throwable from label75 to label76 with label75;
    }

    public void performDeferredDestroyWindow(com.android.server.wm.Session, android.view.IWindow)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1;
        android.view.IWindow r2;
        long l0;
        java.util.HashMap r3, $r7;
        com.android.server.wm.WindowState r4;
        java.lang.Throwable r5, r6, $r9, $r10;
        com.android.server.wm.WindowStateAnimator $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        r2 := @parameter1: android.view.IWindow;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r7;

        entermonitor $r7;

     label02:
        r4 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r1, r2, 0);

        if r4 != null goto label04;

        exitmonitor r3;

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label04:
        $r8 = r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r8.<com.android.server.wm.WindowStateAnimator: void destroyDeferredSurfaceLocked()>();

        exitmonitor r3;

     label05:
        goto label08;

     label06:
        $r9 := @caughtexception;

        r5 = $r9;

        exitmonitor r3;

     label07:
        throw r5;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label11;

     label09:
        $r10 := @caughtexception;

        r6 = $r10;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r6;

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public boolean outOfMemoryWindow(com.android.server.wm.Session, android.view.IWindow)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1;
        android.view.IWindow r2;
        long l0;
        java.util.HashMap r3, $r7;
        com.android.server.wm.WindowState r4;
        boolean z0, z1;
        java.lang.Throwable r5, r6, $r9, $r10;
        com.android.server.wm.WindowStateAnimator $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        r2 := @parameter1: android.view.IWindow;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r7;

        entermonitor $r7;

     label2:
        r4 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r1, r2, 0);

        if r4 != null goto label4;

        z0 = 0;

        exitmonitor r3;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label4:
        $r8 = r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean reclaimSomeSurfaceMemoryLocked(com.android.server.wm.WindowStateAnimator,java.lang.String,boolean)>($r8, "from-client", 0);

        exitmonitor r3;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z1;

     label6:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r3;

     label7:
        throw r5;

     label8:
        $r9 := @caughtexception;

        r6 = $r9;

     label9:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r6;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
        catch java.lang.Throwable from label1 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label9 with label8;
    }

    public void finishDrawingWindow(com.android.server.wm.Session, android.view.IWindow)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1;
        android.view.IWindow r2;
        long l0;
        java.util.HashMap r3, $r8;
        com.android.server.wm.WindowState r4;
        com.android.server.wm.DisplayContent r5, $r11;
        java.lang.Throwable r6, r7, $r12, $r13;
        com.android.server.wm.WindowStateAnimator $r9;
        boolean $z0;
        int $i1, $i2, $i3, $i4;
        android.view.WindowManager$LayoutParams $r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        r2 := @parameter1: android.view.IWindow;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r8;

        entermonitor $r8;

     label02:
        r4 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>(r1, r2, 0);

        if r4 == null goto label05;

        $r9 = r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z0 = virtualinvoke $r9.<com.android.server.wm.WindowStateAnimator: boolean finishDrawingLocked()>();

        if $z0 == 0 goto label05;

        $r10 = r4.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r10.<android.view.WindowManager$LayoutParams: int flags>;

        $i2 = $i1 & 1048576;

        if $i2 == 0 goto label03;

        $r11 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $i3 = $r11.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i4 = $i3 | 4;

        $r11.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i4;

     label03:
        r5 = virtualinvoke r4.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r5 == null goto label04;

        r5.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label04:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void requestTraversalLocked()>();

     label05:
        exitmonitor r3;

     label06:
        goto label09;

     label07:
        $r13 := @caughtexception;

        r6 = $r13;

        exitmonitor r3;

     label08:
        throw r6;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label12;

     label10:
        $r12 := @caughtexception;

        r7 = $r12;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r7;

     label12:
        return;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private boolean applyAnimationLocked(com.android.server.wm.AppWindowToken, android.view.WindowManager$LayoutParams, int, boolean, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.AppWindowToken r1;
        android.view.WindowManager$LayoutParams r2, $r18;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6;
        android.view.DisplayInfo r3;
        com.android.server.wm.WindowState r4;
        android.graphics.Rect r5, r6, $r11, $r12, $r15, $r17, $r19, $r20;
        android.view.animation.Animation r7, $r9;
        com.android.server.wm.AppWindowAnimator $r8, $r10, $r16;
        android.content.res.Configuration $r13;
        com.android.server.wm.AppTransition $r14;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.AppWindowToken;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $z3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean okToDisplay()>();

        if $z3 == 0 goto label09;

        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: android.view.DisplayInfo getDefaultDisplayInfoLocked()>();

        i1 = r3.<android.view.DisplayInfo: int appWidth>;

        i2 = r3.<android.view.DisplayInfo: int appHeight>;

        r4 = virtualinvoke r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState findMainWindow()>();

        $r11 = new android.graphics.Rect;

        specialinvoke $r11.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, i1, i2);

        r5 = $r11;

        $r12 = new android.graphics.Rect;

        specialinvoke $r12.<android.graphics.Rect: void <init>()>();

        r6 = $r12;

        z2 = 1;

        if r4 == null goto label06;

        $r15 = r4.<com.android.server.wm.WindowState: android.graphics.Rect mContainingFrame>;

        if $r15 == null goto label01;

        $r19 = r4.<com.android.server.wm.WindowState: android.graphics.Rect mContainingFrame>;

        virtualinvoke r5.<android.graphics.Rect: void set(android.graphics.Rect)>($r19);

     label01:
        $r17 = r4.<com.android.server.wm.WindowState: android.graphics.Rect mContentInsets>;

        if $r17 == null goto label02;

        $r20 = r4.<com.android.server.wm.WindowState: android.graphics.Rect mContentInsets>;

        virtualinvoke r6.<android.graphics.Rect: void set(android.graphics.Rect)>($r20);

     label02:
        $i4 = r4.<com.android.server.wm.WindowState: int mSystemUiVisibility>;

        $i7 = $i4 & 1280;

        if $i7 == 1280 goto label03;

        $r18 = r4.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i5 = $r18.<android.view.WindowManager$LayoutParams: int flags>;

        $i6 = $i5 & -2147483648;

        if $i6 == 0 goto label04;

     label03:
        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        z2 = $z6;

     label06:
        $z5 = r1.<com.android.server.wm.AppWindowToken: boolean mLaunchTaskBehind>;

        if $z5 == 0 goto label07;

        z0 = 0;

     label07:
        $r14 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $r13 = r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mCurConfiguration>;

        $i3 = $r13.<android.content.res.Configuration: int orientation>;

        r7 = virtualinvoke $r14.<com.android.server.wm.AppTransition: android.view.animation.Animation loadAnimation(android.view.WindowManager$LayoutParams,int,boolean,int,int,int,android.graphics.Rect,android.graphics.Rect,boolean,boolean)>(r2, i0, z0, i1, i2, $i3, r5, r6, z2, z1);

        if r7 == null goto label08;

        $r16 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        virtualinvoke $r16.<com.android.server.wm.AppWindowAnimator: void setAnimation(android.view.animation.Animation,int,int)>(r7, i1, i2);

     label08:
        goto label10;

     label09:
        $r8 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        virtualinvoke $r8.<com.android.server.wm.AppWindowAnimator: void clearAnimation()>();

     label10:
        $r10 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r9 = $r10.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        if $r9 == null goto label11;

        $z4 = 1;

        goto label12;

     label11:
        $z4 = 0;

     label12:
        return $z4;
    }

    public void validateAppTokens(int, java.util.List)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i11, $i12;
        java.util.List r1;
        java.util.HashMap r2, $r12;
        com.android.server.wm.TaskGroup r3, r47;
        com.android.server.wm.Task r4, $r33, $r35;
        com.android.server.wm.DisplayContent r5, r9;
        java.util.ArrayList r6, r8, $r39;
        com.android.server.wm.AppTokenList r7;
        java.lang.Throwable r10, $r46;
        com.android.server.wm.AppWindowToken r11;
        android.util.SparseArray $r13, $r17, $r37;
        java.lang.Object $r14, $r15, $r16, $r32, $r34, $r36, $r38, $r41;
        com.android.server.wm.TaskStack $r18;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r24, $r26, $r27, $r28, $r31, $r42, $r44, $r45;
        java.lang.String $r23, $r25, $r29, $r30, $r43;
        android.os.IBinder $r40;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        $r12 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r12;

        entermonitor $r12;

     label01:
        $i6 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = $i6 - 1;

        if i1 >= 0 goto label03;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "validateAppTokens: empty task list");

        exitmonitor r2;

     label02:
        return;

     label03:
        $r14 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        r3 = (com.android.server.wm.TaskGroup) $r14;

        i2 = r3.<com.android.server.wm.TaskGroup: int taskId>;

        $r13 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        $r15 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        r4 = (com.android.server.wm.Task) $r15;

        r5 = virtualinvoke r4.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r5 != null goto label05;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("validateAppTokens: no Display for taskId=");

        $r42 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r43);

        exitmonitor r2;

     label04:
        return;

     label05:
        $r17 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        $r16 = virtualinvoke $r17.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r18 = (com.android.server.wm.TaskStack) $r16;

        r6 = virtualinvoke $r18.<com.android.server.wm.TaskStack: java.util.ArrayList getTasks()>();

        $i7 = virtualinvoke r6.<java.util.ArrayList: int size()>();

        i3 = $i7 - 1;

     label06:
        if i3 < 0 goto label14;

        if i1 < 0 goto label14;

        $r34 = virtualinvoke r6.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r33 = (com.android.server.wm.Task) $r34;

        r7 = $r33.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        $r32 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r47 = (com.android.server.wm.TaskGroup) $r32;

        r8 = r47.<com.android.server.wm.TaskGroup: java.util.ArrayList tokens>;

        r9 = r5;

        $r37 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        $r36 = virtualinvoke $r37.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        $r35 = (com.android.server.wm.Task) $r36;

        r5 = virtualinvoke $r35.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r5 == r9 goto label08;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "validateAppTokens: displayContent changed in TaskGroup list!");

        exitmonitor r2;

     label07:
        return;

     label08:
        $i12 = virtualinvoke r7.<com.android.server.wm.AppTokenList: int size()>();

        i4 = $i12 - 1;

        $r39 = r47.<com.android.server.wm.TaskGroup: java.util.ArrayList tokens>;

        $i11 = virtualinvoke $r39.<java.util.ArrayList: int size()>();

        i5 = $i11 - 1;

     label09:
        if i4 < 0 goto label12;

        if i5 < 0 goto label12;

        $r38 = virtualinvoke r7.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i4);

        r11 = (com.android.server.wm.AppWindowToken) $r38;

        $z0 = r11.<com.android.server.wm.AppWindowToken: boolean removed>;

        if $z0 == 0 goto label10;

        i4 = i4 + -1;

        goto label09;

     label10:
        $r41 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(i5);

        $r40 = r11.<com.android.server.wm.AppWindowToken: android.os.IBinder token>;

        if $r41 == $r40 goto label11;

        goto label12;

     label11:
        i4 = i4 + -1;

        i5 = i5 + -1;

        goto label09;

     label12:
        if i4 >= 0 goto label14;

        if i5 < 0 goto label13;

        goto label14;

     label13:
        i3 = i3 + -1;

        i1 = i1 + -1;

        goto label06;

     label14:
        if i3 >= 0 goto label15;

        if i1 < 0 goto label16;

     label15:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("validateAppTokens: Mismatch! ActivityManager=");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r23);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("validateAppTokens: Mismatch! WindowManager=");

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r25);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("validateAppTokens: Mismatch! Callers=");

        $r30 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(4);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r29);

     label16:
        exitmonitor r2;

     label17:
        goto label20;

     label18:
        $r46 := @caughtexception;

        r10 = $r46;

        exitmonitor r2;

     label19:
        throw r10;

     label20:
        return;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label07 with label18;
        catch java.lang.Throwable from label08 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public void validateStackOrder(java.lang.Integer[])
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.Integer[] r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.lang.Integer[];

        return;
    }

    boolean checkCallingPermission(java.lang.String, java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.String r1, r2, r3;
        int $i0, $i1, $i2, $i3, $i4;
        android.content.Context $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        $r4 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r4.<android.content.Context: int checkCallingPermission(java.lang.String)>(r1);

        if $i2 != 0 goto label2;

        return 1;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from pid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r3 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", r3);

        return 0;
    }

    boolean okToDisplay()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0, $z1, $z2, $z3;
        android.view.WindowManagerPolicy $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        if $z1 == 0 goto label1;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z2 = interfaceinvoke $r1.<android.view.WindowManagerPolicy: boolean isScreenOn()>();

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        com.android.server.wm.WindowToken r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        com.android.server.wm.AppWindowToken $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.wm.WindowToken) $r4;

        if r2 != null goto label1;

        return null;

     label1:
        $r5 = r2.<com.android.server.wm.WindowToken: com.android.server.wm.AppWindowToken appWindowToken>;

        return $r5;
    }

    public void addWindowToken(android.os.IBinder, int)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        int i0;
        java.util.HashMap r2, $r5, $r6, $r9;
        com.android.server.wm.WindowToken r3, $r8, r18;
        java.lang.Throwable r4, $r17;
        boolean $z0;
        java.lang.Object $r7;
        java.util.ArrayList $r11;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.String $r15;
        java.lang.SecurityException $r16;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "addWindowToken()");

        if $z0 != 0 goto label1;

        $r16 = new java.lang.SecurityException;

        specialinvoke $r16.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r16;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label2:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.wm.WindowToken) $r7;

        if r3 == null goto label4;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add existing input method token: ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r15);

        exitmonitor r2;

     label3:
        return;

     label4:
        $r8 = new com.android.server.wm.WindowToken;

        specialinvoke $r8.<com.android.server.wm.WindowToken: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder,int,boolean)>(r0, r1, i0, 1);

        r18 = $r8;

        $r9 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r18);

        if i0 != 2013 goto label5;

        $r11 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r18);

     label5:
        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r17 := @caughtexception;

        r4 = $r17;

        exitmonitor r2;

     label8:
        throw r4;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void removeWindowToken(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        long l0;
        java.util.HashMap r2, $r7, $r9;
        com.android.server.wm.DisplayContent r3;
        com.android.server.wm.WindowToken r4;
        boolean z0, z1, $z2, $z3, $z7, $z9, $z10;
        int i1, i2, $i4;
        com.android.server.wm.WindowState r5;
        java.lang.Throwable r6, $r24;
        java.lang.Object $r8, $r20;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;
        com.android.server.wm.WindowList $r14, $r17;
        com.android.server.wm.InputMonitor $r15;
        java.util.ArrayList $r16, $r18;
        com.android.server.wm.WindowStateAnimator $r19, $r22;
        com.android.server.wm.AccessibilityController $r21, $r25;
        java.lang.SecurityException $r23;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "removeWindowToken()");

        if $z2 != 0 goto label01;

        $r23 = new java.lang.SecurityException;

        specialinvoke $r23.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r23;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r7;

        entermonitor $r7;

     label02:
        r3 = null;

        $r9 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $r8 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (com.android.server.wm.WindowToken) $r8;

        if r4 == null goto label11;

        z0 = 0;

        $z3 = r4.<com.android.server.wm.WindowToken: boolean hidden>;

        if $z3 != 0 goto label10;

        $r14 = r4.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        i1 = virtualinvoke $r14.<com.android.server.wm.WindowList: int size()>();

        z1 = 0;

        i2 = 0;

     label03:
        if i2 >= i1 goto label07;

        $r17 = r4.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        $r20 = virtualinvoke $r17.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r5 = (com.android.server.wm.WindowState) $r20;

        r3 = virtualinvoke r5.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r19 = r5.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z7 = virtualinvoke $r19.<com.android.server.wm.WindowStateAnimator: boolean isAnimating()>();

        if $z7 == 0 goto label04;

        z0 = 1;

     label04:
        $z9 = virtualinvoke r5.<com.android.server.wm.WindowState: boolean isVisibleNow()>();

        if $z9 == 0 goto label06;

        $r22 = r5.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r22.<com.android.server.wm.WindowStateAnimator: boolean applyAnimationLocked(int,boolean)>(2, 0);

        $r21 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r21 == null goto label05;

        $z10 = virtualinvoke r5.<com.android.server.wm.WindowState: boolean isDefaultDisplay()>();

        if $z10 == 0 goto label05;

        $r25 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r25.<com.android.server.wm.AccessibilityController: void onWindowTransitionLocked(com.android.server.wm.WindowState,int)>(r5, 2);

     label05:
        z1 = 1;

        if r3 == null goto label06;

        r3.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label06:
        i2 = i2 + 1;

        goto label03;

     label07:
        r4.<com.android.server.wm.WindowToken: boolean hidden> = 1;

        if z1 == 0 goto label08;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(0, 0);

     label08:
        if z0 == 0 goto label09;

        if r3 == null goto label10;

        $r18 = r3.<com.android.server.wm.DisplayContent: java.util.ArrayList mExitingTokens>;

        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        goto label10;

     label09:
        $i4 = r4.<com.android.server.wm.WindowToken: int windowType>;

        if $i4 != 2013 goto label10;

        $r16 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        virtualinvoke $r16.<java.util.ArrayList: boolean remove(java.lang.Object)>(r4);

     label10:
        $r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r15.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        goto label12;

     label11:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to remove non-existing token: ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r13);

     label12:
        exitmonitor r2;

     label13:
        goto label16;

     label14:
        $r24 := @caughtexception;

        r6 = $r24;

        exitmonitor r2;

     label15:
        throw r6;

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

        catch java.lang.Throwable from label02 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    private com.android.server.wm.Task createTask(int, int, int, com.android.server.wm.AppWindowToken)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2;
        com.android.server.wm.AppWindowToken r1;
        com.android.server.wm.TaskStack r2;
        com.android.server.wm.Task r3, $r10;
        android.util.SparseArray $r4, $r9;
        java.lang.Object $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r7, $r8;
        boolean $z0, $z1;
        java.lang.StringBuilder $r11, $r13, $r14;
        java.lang.IllegalArgumentException $r12;
        java.lang.String $r15;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: com.android.server.wm.AppWindowToken;

        $r4 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.wm.TaskStack) $r5;

        if r2 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addAppToken: invalid stackId=");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r12;

     label1:
        $r6 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6[1] = $r8;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(31001, $r6);

        $r10 = new com.android.server.wm.Task;

        specialinvoke $r10.<com.android.server.wm.Task: void <init>(com.android.server.wm.AppWindowToken,com.android.server.wm.TaskStack,int)>(r1, r2, i2);

        r3 = $r10;

        $r9 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r3);

        $z1 = r1.<com.android.server.wm.AppWindowToken: boolean mLaunchTaskBehind>;

        if $z1 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        virtualinvoke r2.<com.android.server.wm.TaskStack: void addTask(com.android.server.wm.Task,boolean)>(r3, $z0);

        return r3;
    }

    public void addAppToken(int, android.view.IApplicationToken, int, int, int, boolean, boolean, int, int, boolean, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3, i4, i5, $i8;
        android.view.IApplicationToken r1;
        boolean z0, z1, z2, z3, $z4, $z5;
        long l6, $l7;
        android.os.RemoteException r2, $r21;
        com.android.server.wm.AppWindowToken r3, $r8, r23;
        java.lang.Throwable r4, $r19;
        com.android.server.wm.Task r5;
        android.os.IBinder $r6, $r13;
        java.util.HashMap $r7, $r10, r22;
        android.util.SparseArray $r9;
        java.lang.Object $r11;
        java.lang.StringBuilder $r15, $r16, $r17;
        java.lang.String $r18;
        java.lang.SecurityException $r20;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.IApplicationToken;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        i4 := @parameter7: int;

        i5 := @parameter8: int;

        z2 := @parameter9: boolean;

        z3 := @parameter10: boolean;

        $z4 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "addAppToken()");

        if $z4 != 0 goto label01;

        $r20 = new java.lang.SecurityException;

        specialinvoke $r20.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r20;

     label01:
        $l7 = interfaceinvoke r1.<android.view.IApplicationToken: long getKeyDispatchingTimeout()>();

        l6 = $l7 * 1000000L;

     label02:
        goto label04;

     label03:
        $r21 := @caughtexception;

        r2 = $r21;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Could not get dispatching timeout.", r2);

        l6 = 5000000000L;

     label04:
        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r22 = $r7;

        entermonitor $r7;

     label05:
        $r6 = interfaceinvoke r1.<android.view.IApplicationToken: android.os.IBinder asBinder()>();

        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>($r6);

        if r3 == null goto label07;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add existing app token: ");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r18);

        exitmonitor r22;

     label06:
        return;

     label07:
        $r8 = new com.android.server.wm.AppWindowToken;

        specialinvoke $r8.<com.android.server.wm.AppWindowToken: void <init>(com.android.server.wm.WindowManagerService,android.view.IApplicationToken,boolean)>(r0, r1, z2);

        r23 = $r8;

        r23.<com.android.server.wm.AppWindowToken: long inputDispatchingTimeoutNanos> = l6;

        r23.<com.android.server.wm.AppWindowToken: int groupId> = i1;

        r23.<com.android.server.wm.AppWindowToken: boolean appFullscreen> = z0;

        r23.<com.android.server.wm.AppWindowToken: boolean showWhenLocked> = z1;

        r23.<com.android.server.wm.AppWindowToken: int requestedOrientation> = i3;

        $i8 = i5 & 1152;

        if $i8 == 0 goto label08;

        $z5 = 1;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        r23.<com.android.server.wm.AppWindowToken: boolean layoutConfigChanges> = $z5;

        r23.<com.android.server.wm.AppWindowToken: boolean mLaunchTaskBehind> = z3;

        $r9 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        $r11 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r5 = (com.android.server.wm.Task) $r11;

        if r5 != null goto label10;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.Task createTask(int,int,int,com.android.server.wm.AppWindowToken)>(i1, i2, i4, r23);

        goto label11;

     label10:
        virtualinvoke r5.<com.android.server.wm.Task: void addAppToken(int,com.android.server.wm.AppWindowToken)>(i0, r23);

     label11:
        $r10 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $r13 = interfaceinvoke r1.<android.view.IApplicationToken: android.os.IBinder asBinder()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r23);

        r23.<com.android.server.wm.AppWindowToken: boolean hidden> = 1;

        r23.<com.android.server.wm.AppWindowToken: boolean hiddenRequested> = 1;

        exitmonitor r22;

     label12:
        goto label15;

     label13:
        $r19 := @caughtexception;

        r4 = $r19;

        exitmonitor r22;

     label14:
        throw r4;

     label15:
        return;

        catch android.os.RemoteException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void setAppGroupId(android.os.IBinder, int)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        int i0, $i1, $i2, $i3;
        java.util.HashMap r2, $r7;
        com.android.server.wm.AppWindowToken r3;
        com.android.server.wm.Task r4, r5;
        java.lang.Throwable r6, $r19;
        boolean $z0;
        android.util.SparseArray $r8, $r10;
        java.lang.Object $r9, $r12;
        com.android.server.wm.AppTokenList $r11;
        com.android.server.wm.TaskStack $r13;
        java.lang.StringBuilder $r14, $r15, $r16;
        java.lang.String $r17;
        java.lang.SecurityException $r18;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setAppGroupId()");

        if $z0 != 0 goto label01;

        $r18 = new java.lang.SecurityException;

        specialinvoke $r18.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r18;

     label01:
        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r7;

        entermonitor $r7;

     label02:
        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>(r1);

        if r3 != null goto label04;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set group id of non-existing app token: ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r17);

        exitmonitor r2;

     label03:
        return;

     label04:
        $r8 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        $i1 = r3.<com.android.server.wm.AppWindowToken: int groupId>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        r4 = (com.android.server.wm.Task) $r9;

        virtualinvoke r4.<com.android.server.wm.Task: boolean removeAppToken(com.android.server.wm.AppWindowToken)>(r3);

        r3.<com.android.server.wm.AppWindowToken: int groupId> = i0;

        $r10 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        $r12 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.wm.Task) $r12;

        if r5 != null goto label05;

        $r13 = r4.<com.android.server.wm.Task: com.android.server.wm.TaskStack mStack>;

        $i3 = $r13.<com.android.server.wm.TaskStack: int mStackId>;

        $i2 = r4.<com.android.server.wm.Task: int mUserId>;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.Task createTask(int,int,int,com.android.server.wm.AppWindowToken)>(i0, $i3, $i2, r3);

        goto label06;

     label05:
        $r11 = r5.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        virtualinvoke $r11.<com.android.server.wm.AppTokenList: boolean add(java.lang.Object)>(r3);

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r19 := @caughtexception;

        r6 = $r19;

        exitmonitor r2;

     label09:
        throw r6;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public int getOrientationFromWindowsLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowList r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        com.android.server.wm.WindowState r2;
        boolean $z0, $z1, $z2;
        android.util.ArraySet $r3, $r4;
        java.lang.Object $r5;
        com.android.server.wm.AppWindowToken $r6;
        android.view.WindowManager$LayoutParams $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        $i3 = virtualinvoke $r3.<android.util.ArraySet: int size()>();

        if $i3 > 0 goto label1;

        $r4 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps>;

        $i4 = virtualinvoke $r4.<android.util.ArraySet: int size()>();

        if $i4 <= 0 goto label2;

     label1:
        $i2 = r0.<com.android.server.wm.WindowManagerService: int mLastWindowForcedOrientation>;

        return $i2;

     label2:
        r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()>();

        $i5 = virtualinvoke r1.<com.android.server.wm.WindowList: int size()>();

        i0 = $i5 - 1;

     label3:
        if i0 < 0 goto label7;

        $r5 = virtualinvoke r1.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.WindowState) $r5;

        i0 = i0 + -1;

        $r6 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r6 == null goto label4;

        r0.<com.android.server.wm.WindowManagerService: int mLastWindowForcedOrientation> = -1;

        return -1;

     label4:
        $z2 = virtualinvoke r2.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z2 == 0 goto label3;

        $z1 = r2.<com.android.server.wm.WindowState: boolean mPolicyVisibilityAfterAnim>;

        if $z1 != 0 goto label5;

        goto label3;

     label5:
        $r7 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i1 = $r7.<android.view.WindowManager$LayoutParams: int screenOrientation>;

        if i1 == -1 goto label3;

        if i1 != 3 goto label6;

        goto label3;

     label6:
        r0.<com.android.server.wm.WindowManagerService: int mLastWindowForcedOrientation> = i1;

        return i1;

     label7:
        r0.<com.android.server.wm.WindowManagerService: int mLastWindowForcedOrientation> = -1;

        return -1;
    }

    public int getOrientationFromAppTokensLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3, i4, $i5, $i6;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        com.android.server.wm.DisplayContent r1;
        java.util.ArrayList r2;
        com.android.server.wm.AppTokenList r3;
        com.android.server.wm.AppWindowToken r4;
        java.lang.Object $r5, $r7;
        com.android.server.wm.Task $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 = -1;

        z0 = 0;

        z1 = 0;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: java.util.ArrayList getTasks()>();

        $i5 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i1 = $i5 - 1;

     label01:
        if i1 < 0 goto label13;

        $r5 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r6 = (com.android.server.wm.Task) $r5;

        r3 = $r6.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        $i6 = virtualinvoke r3.<com.android.server.wm.AppTokenList: int size()>();

        i2 = $i6 - 1;

        i3 = i2;

     label02:
        if i3 < 0 goto label12;

        $r7 = virtualinvoke r3.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i3);

        r4 = (com.android.server.wm.AppWindowToken) $r7;

        if z0 != 0 goto label03;

        $z6 = r4.<com.android.server.wm.AppWindowToken: boolean hidden>;

        if $z6 != 0 goto label03;

        $z5 = r4.<com.android.server.wm.AppWindowToken: boolean hiddenRequested>;

        if $z5 == 0 goto label03;

        goto label11;

     label03:
        if i3 != i2 goto label04;

        if i0 == 3 goto label04;

        if z1 == 0 goto label04;

        return i0;

     label04:
        $z2 = r4.<com.android.server.wm.AppWindowToken: boolean hiddenRequested>;

        if $z2 != 0 goto label11;

        $z4 = r4.<com.android.server.wm.AppWindowToken: boolean willBeHidden>;

        if $z4 == 0 goto label05;

        goto label11;

     label05:
        if i3 != 0 goto label06;

        i0 = r4.<com.android.server.wm.AppWindowToken: int requestedOrientation>;

     label06:
        i4 = r4.<com.android.server.wm.AppWindowToken: int requestedOrientation>;

        z1 = r4.<com.android.server.wm.AppWindowToken: boolean appFullscreen>;

        if z1 == 0 goto label07;

        if i4 == 3 goto label07;

        return i4;

     label07:
        if i4 == -1 goto label08;

        if i4 == 3 goto label08;

        return i4;

     label08:
        if i4 != 3 goto label09;

        $z3 = 1;

        goto label10;

     label09:
        $z3 = 0;

     label10:
        z0 = z0 | $z3;

     label11:
        i3 = i3 + -1;

        goto label02;

     label12:
        i1 = i1 + -1;

        goto label01;

     label13:
        return -1;
    }

    public android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration, android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.content.res.Configuration r1, r8;
        android.os.IBinder r2;
        long l0;
        java.util.HashMap r3, $r5;
        java.lang.Throwable r4, $r7;
        boolean $z0;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: android.os.IBinder;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "updateOrientationFromAppTokens()");

        if $z0 != 0 goto label1;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r6;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r5;

        entermonitor $r5;

     label2:
        r8 = specialinvoke r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokensLocked(android.content.res.Configuration,android.os.IBinder)>(r1, r2);

        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r3;

     label5:
        throw r4;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r8;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private android.content.res.Configuration updateOrientationFromAppTokensLocked(android.content.res.Configuration, android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.content.res.Configuration r1, r3, $r6, $r7, $r8, $r9, $r11, $r12;
        android.os.IBinder r2;
        com.android.server.wm.AppWindowToken r4;
        int[] r5;
        boolean $z0, $z1, $z2;
        float $f0;
        int $i0, $i1, $i2;
        android.view.WindowManagerPolicy $r10;
        com.android.server.wm.DisplayContent r13;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: android.os.IBinder;

        r3 = null;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateOrientationFromAppTokensLocked(boolean)>(0);

        if $z0 == 0 goto label2;

        if r2 == null goto label1;

        r4 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>(r2);

        if r4 == null goto label1;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void startAppFreezingScreenLocked(com.android.server.wm.AppWindowToken)>(r4);

     label1:
        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfigurationLocked()>();

        goto label5;

     label2:
        if r1 == null goto label5;

        $r6 = r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mTempConfiguration>;

        virtualinvoke $r6.<android.content.res.Configuration: void setToDefaults()>();

        $r7 = r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mTempConfiguration>;

        $f0 = r1.<android.content.res.Configuration: float fontScale>;

        $r7.<android.content.res.Configuration: float fontScale> = $f0;

        $r8 = r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mTempConfiguration>;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean computeScreenConfigurationLocked(android.content.res.Configuration)>($r8);

        if $z1 == 0 goto label5;

        $r9 = r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mTempConfiguration>;

        $i0 = virtualinvoke r1.<android.content.res.Configuration: int diff(android.content.res.Configuration)>($r9);

        if $i0 == 0 goto label5;

        r0.<com.android.server.wm.WindowManagerService: boolean mWaitingForConfig> = 1;

        r13 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        r13.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

        r5 = newarray (int)[2];

        $z2 = virtualinvoke r13.<com.android.server.wm.DisplayContent: boolean isDimming()>();

        if $z2 == 0 goto label3;

        r5[1] = 0;

        r5[0] = 0;

        goto label4;

     label3:
        $r10 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r10.<android.view.WindowManagerPolicy: void selectRotationAnimationLw(int[])>(r5);

     label4:
        $i2 = r5[0];

        $i1 = r5[1];

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void startFreezingDisplayLocked(boolean,int,int)>(0, $i2, $i1);

        $r11 = new android.content.res.Configuration;

        $r12 = r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mTempConfiguration>;

        specialinvoke $r11.<android.content.res.Configuration: void <init>(android.content.res.Configuration)>($r12);

        r3 = $r11;

     label5:
        return r3;
    }

    boolean updateOrientationFromAppTokensLocked(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1, $z2, z3;
        long l0;
        int i1, $i2;
        java.lang.Throwable r1, $r3;
        android.view.WindowManagerPolicy $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        i1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: int getOrientationFromWindowsLocked()>();

        if i1 != -1 goto label2;

        i1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: int getOrientationFromAppTokensLocked()>();

     label2:
        $i2 = r0.<com.android.server.wm.WindowManagerService: int mForcedAppOrientation>;

        if i1 == $i2 goto label4;

        r0.<com.android.server.wm.WindowManagerService: int mForcedAppOrientation> = i1;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r2.<android.view.WindowManagerPolicy: void setCurrentOrientationLw(int)>(i1);

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateRotationUncheckedLocked(boolean)>(z0);

        if $z2 == 0 goto label4;

        z1 = 1;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z1;

     label4:
        z3 = 0;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z3;

     label6:
        $r3 := @caughtexception;

        r1 = $r3;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setNewConfiguration(android.content.res.Configuration)
    {
        com.android.server.wm.WindowManagerService r0;
        android.content.res.Configuration r1, $r5;
        java.util.HashMap r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean $z0, $z1;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.content.res.Configuration;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setNewConfiguration()");

        if $z0 != 0 goto label1;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r6;

     label1:
        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        $r5 = new android.content.res.Configuration;

        specialinvoke $r5.<android.content.res.Configuration: void <init>(android.content.res.Configuration)>(r1);

        r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mCurConfiguration> = $r5;

        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mWaitingForConfig>;

        if $z1 == 0 goto label3;

        r0.<com.android.server.wm.WindowManagerService: boolean mWaitingForConfig> = 0;

        r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource> = "new-config";

     label3:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setAppOrientation(android.view.IApplicationToken, int)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IApplicationToken r1;
        int i0;
        java.util.HashMap r2, $r5;
        com.android.server.wm.AppWindowToken r3;
        java.lang.Throwable r4, $r11;
        boolean $z0;
        android.os.IBinder $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        java.lang.SecurityException $r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.IApplicationToken;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setAppOrientation()");

        if $z0 != 0 goto label1;

        $r12 = new java.lang.SecurityException;

        specialinvoke $r12.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r12;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label2:
        $r6 = interfaceinvoke r1.<android.view.IApplicationToken: android.os.IBinder asBinder()>();

        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>($r6);

        if r3 != null goto label4;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set orientation of non-existing app token: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r10);

        exitmonitor r2;

     label3:
        return;

     label4:
        r3.<com.android.server.wm.AppWindowToken: int requestedOrientation> = i0;

        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getAppOrientation(android.view.IApplicationToken)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IApplicationToken r1;
        java.util.HashMap r2, $r5;
        com.android.server.wm.AppWindowToken r3;
        java.lang.Throwable r4, $r7;
        android.os.IBinder $r6;
        int $i0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.IApplicationToken;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = interfaceinvoke r1.<android.view.IApplicationToken: android.os.IBinder asBinder()>();

        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>($r6);

        if r3 != null goto label3;

        exitmonitor r2;

     label2:
        return -1;

     label3:
        $i0 = r3.<com.android.server.wm.AppWindowToken: int requestedOrientation>;

        exitmonitor r2;

     label4:
        return $i0;

     label5:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label6:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void setFocusedStackLayer()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowList r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        com.android.server.wm.WindowState r2, $r8;
        com.android.server.wm.AppWindowToken $r3, $r5;
        com.android.server.wm.FocusedStackFrame $r4;
        java.lang.Object $r6;
        com.android.server.wm.WindowStateAnimator $r7;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r0.<com.android.server.wm.WindowManagerService: int mFocusedStackLayer> = 0;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken mFocusedApp>;

        if $r3 == null goto label3;

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken mFocusedApp>;

        r1 = $r5.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        $i3 = virtualinvoke r1.<com.android.server.wm.WindowList: int size()>();

        i0 = $i3 - 1;

     label1:
        if i0 < 0 goto label3;

        $r6 = virtualinvoke r1.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.WindowState) $r6;

        $r7 = r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        i1 = $r7.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        $r8 = r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mAttachedWindow>;

        if $r8 != null goto label2;

        $z0 = virtualinvoke r2.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z0 == 0 goto label2;

        $i4 = r0.<com.android.server.wm.WindowManagerService: int mFocusedStackLayer>;

        if i1 <= $i4 goto label2;

        $i5 = i1 + 1;

        r0.<com.android.server.wm.WindowManagerService: int mFocusedStackLayer> = $i5;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.FocusedStackFrame mFocusedStackFrame>;

        $i2 = r0.<com.android.server.wm.WindowManagerService: int mFocusedStackLayer>;

        virtualinvoke $r4.<com.android.server.wm.FocusedStackFrame: void setLayer(int)>($i2);

        return;
    }

    void setFocusedStackFrame()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.TaskStack r1;
        com.android.server.wm.Task r2;
        com.android.server.wm.DisplayContent r3;
        java.lang.Throwable r4, $r12;
        com.android.server.wm.AppWindowToken $r5, $r9;
        com.android.server.wm.FocusedStackFrame $r6, $r7, $r8;
        boolean $z0, $z1, z2;
        int $i0;
        android.util.SparseArray $r10;
        java.lang.Object $r11;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken mFocusedApp>;

        if $r5 == null goto label02;

        $r10 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken mFocusedApp>;

        $i0 = $r9.<com.android.server.wm.AppWindowToken: int groupId>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        r2 = (com.android.server.wm.Task) $r11;

        r1 = r2.<com.android.server.wm.Task: com.android.server.wm.TaskStack mStack>;

        r3 = virtualinvoke r2.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r3 == null goto label01;

        virtualinvoke r3.<com.android.server.wm.DisplayContent: void setTouchExcludeRegion(com.android.server.wm.TaskStack)>(r1);

     label01:
        goto label03;

     label02:
        r1 = null;

     label03:
        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

     label04:
        if r1 != null goto label05;

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.FocusedStackFrame mFocusedStackFrame>;

        virtualinvoke $r8.<com.android.server.wm.FocusedStackFrame: void setVisibility(boolean)>(0);

        goto label08;

     label05:
        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.FocusedStackFrame mFocusedStackFrame>;

        virtualinvoke $r6.<com.android.server.wm.FocusedStackFrame: void setBounds(com.android.server.wm.TaskStack)>(r1);

        $z0 = virtualinvoke r1.<com.android.server.wm.TaskStack: boolean isFullscreen()>();

        if $z0 != 0 goto label06;

        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        z2 = $z1;

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.FocusedStackFrame mFocusedStackFrame>;

        virtualinvoke $r7.<com.android.server.wm.FocusedStackFrame: void setVisibility(boolean)>(z2);

     label08:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        goto label11;

     label09:
        $r12 := @caughtexception;

        r4 = $r12;

     label10:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        throw r4;

     label11:
        return;

        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void setFocusedApp(android.os.IBinder, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        boolean z0, z1, $z2, $z4;
        java.util.HashMap r2, $r5;
        com.android.server.wm.AppWindowToken r3, $r6;
        long l0;
        java.lang.Throwable r4, $r12;
        com.android.server.wm.InputMonitor $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;
        java.lang.SecurityException $r13;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $z2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setFocusedApp()");

        if $z2 != 0 goto label01;

        $r13 = new java.lang.SecurityException;

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r13;

     label01:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label02:
        if r1 != null goto label03;

        r3 = null;

        goto label04;

     label03:
        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>(r1);

        if r3 != null goto label04;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set focus to non-existing app token: ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r11);

     label04:
        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken mFocusedApp>;

        if $r6 == r3 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        z1 = $z4;

        if z1 == 0 goto label07;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken mFocusedApp> = r3;

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r7.<com.android.server.wm.InputMonitor: void setFocusedAppLw(com.android.server.wm.AppWindowToken)>(r3);

     label07:
        if z0 == 0 goto label08;

        if z1 == 0 goto label08;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(0, 1);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label08:
        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r2;

     label11:
        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void prepareAppTransition(int, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        boolean z0, $z1, $z2, $z3, $z5, $z6, $z7;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r14;
        com.android.server.wm.AppTransition $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r13;
        com.android.server.wm.WindowManagerService$H $r7, $r8;
        java.lang.SecurityException $r15;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "prepareAppTransition()");

        if $z1 != 0 goto label01;

        $r15 = new java.lang.SecurityException;

        specialinvoke $r15.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r15;

     label01:
        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label02:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z2 = virtualinvoke $r4.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z2 == 0 goto label03;

        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z5 = virtualinvoke $r9.<com.android.server.wm.AppTransition: boolean isTransitionNone()>();

        if $z5 == 0 goto label04;

     label03:
        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r5.<com.android.server.wm.AppTransition: void setAppTransition(int)>(i0);

        goto label06;

     label04:
        if z0 != 0 goto label06;

        if i0 != 8 goto label05;

        $r11 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z7 = virtualinvoke $r11.<com.android.server.wm.AppTransition: boolean isTransitionEqual(int)>(9);

        if $z7 == 0 goto label05;

        $r13 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r13.<com.android.server.wm.AppTransition: void setAppTransition(int)>(i0);

        goto label06;

     label05:
        if i0 != 6 goto label06;

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z6 = virtualinvoke $r10.<com.android.server.wm.AppTransition: boolean isTransitionEqual(int)>(7);

        if $z6 == 0 goto label06;

        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r12.<com.android.server.wm.AppTransition: void setAppTransition(int)>(i0);

     label06:
        $z3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean okToDisplay()>();

        if $z3 == 0 goto label07;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r6.<com.android.server.wm.AppTransition: void prepare()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mStartingIconInTransition> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mSkipAppTransitionAnimation> = 0;

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r7.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(13);

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r8.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(13, 5000L);

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r14 := @caughtexception;

        r2 = $r14;

        exitmonitor r1;

     label10:
        throw r2;

     label11:
        return;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public int getPendingAppTransition()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.AppTransition $r1;
        int $i0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $i0 = virtualinvoke $r1.<com.android.server.wm.AppTransition: int getAppTransition()>();

        return $i0;
    }

    public void overridePendingAppTransition(java.lang.String, int, int, android.os.IRemoteCallback)
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.String r1;
        int i0, i1;
        android.os.IRemoteCallback r2;
        java.util.HashMap r3, $r5;
        java.lang.Throwable r4, $r7;
        com.android.server.wm.AppTransition $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.os.IRemoteCallback;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r6.<com.android.server.wm.AppTransition: void overridePendingAppTransition(java.lang.String,int,int,android.os.IRemoteCallback)>(r1, i0, i1, r2);

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void overridePendingAppTransitionScaleUp(int, int, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.server.wm.AppTransition $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r4.<com.android.server.wm.AppTransition: void overridePendingAppTransitionScaleUp(int,int,int,int)>(i0, i1, i2, i3);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void overridePendingAppTransitionThumb(android.graphics.Bitmap, int, int, android.os.IRemoteCallback, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        android.graphics.Bitmap r1;
        int i0, i1;
        android.os.IRemoteCallback r2;
        boolean z0;
        java.util.HashMap r3, $r5;
        java.lang.Throwable r4, $r7;
        com.android.server.wm.AppTransition $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.os.IRemoteCallback;

        z0 := @parameter4: boolean;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r6.<com.android.server.wm.AppTransition: void overridePendingAppTransitionThumb(android.graphics.Bitmap,int,int,android.os.IRemoteCallback,boolean)>(r1, i0, i1, r2, z0);

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void overridePendingAppTransitionAspectScaledThumb(android.graphics.Bitmap, int, int, int, int, android.os.IRemoteCallback, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        android.graphics.Bitmap r1;
        int i0, i1, i2, i3;
        android.os.IRemoteCallback r2;
        boolean z0;
        java.util.HashMap r3, $r5;
        java.lang.Throwable r4, $r7;
        com.android.server.wm.AppTransition $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.graphics.Bitmap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r2 := @parameter5: android.os.IRemoteCallback;

        z0 := @parameter6: boolean;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r6.<com.android.server.wm.AppTransition: void overridePendingAppTransitionAspectScaledThumb(android.graphics.Bitmap,int,int,int,int,android.os.IRemoteCallback,boolean)>(r1, i0, i1, i2, i3, r2, z0);

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void executeAppTransition()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r4;
        long l0;
        java.lang.Throwable r2, r3, $r8, $r9;
        boolean $z0, $z1;
        com.android.server.wm.AppTransition $r5, $r6;
        java.lang.SecurityException $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "executeAppTransition()");

        if $z0 != 0 goto label01;

        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r7;

     label01:
        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r4;

        entermonitor $r4;

     label02:
        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z1 = virtualinvoke $r5.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z1 == 0 goto label07;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r6.<com.android.server.wm.AppTransition: void setReady()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label07;

     label05:
        $r8 := @caughtexception;

        r2 = $r8;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r1;

     label10:
        throw r3;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void setAppStartingWindow(android.os.IBinder, java.lang.String, int, android.content.res.CompatibilityInfo, java.lang.CharSequence, int, int, int, int, android.os.IBinder, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1, r5;
        java.lang.String r2, $r47;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i9, $i10;
        android.content.res.CompatibilityInfo r3;
        java.lang.CharSequence r4;
        boolean z0, $z1, $z2, $z4, $z5, $z6, $z8, $z9, $z10, $z12, $z13, $z17, $z18, $z19, $z20, $z21, $z22;
        java.util.HashMap r6, $r14;
        com.android.server.wm.AppWindowToken r7, r8;
        com.android.server.wm.WindowState r9, $r23;
        com.android.server.wm.AppWindowAnimator r10, r11, r12, $r34, r51;
        long l5;
        java.lang.Throwable r13, $r45;
        com.android.server.wm.StartingData $r15, $r17, $r27, $r30, $r36;
        com.android.server.wm.WindowManagerService$H $r16, $r18, $r29, $r33;
        int[] $r19;
        com.android.server.AttributeCache $r20;
        android.content.res.TypedArray $r21, $r22, $r24;
        android.view.SurfaceControl $r25, $r26, $r28, $r31;
        android.view.animation.Animation $r32, $r42, $r43;
        com.android.server.wm.WindowStateAnimator $r35;
        android.view.View $r37;
        com.android.server.wm.WindowList $r38, $r39, $r40;
        com.android.server.wm.DisplayContent $r41;
        java.lang.StringBuilder $r44, $r48, $r49;
        java.lang.SecurityException $r46;
        android.os.Message r50, r53;
        com.android.server.AttributeCache$Entry r52;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.content.res.CompatibilityInfo;

        r4 := @parameter4: java.lang.CharSequence;

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        i3 := @parameter7: int;

        i4 := @parameter8: int;

        r5 := @parameter9: android.os.IBinder;

        z0 := @parameter10: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setAppStartingWindow()");

        if $z1 != 0 goto label01;

        $r46 = new java.lang.SecurityException;

        specialinvoke $r46.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r46;

     label01:
        $r14 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r6 = $r14;

        entermonitor $r14;

     label02:
        r7 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>(r1);

        if r7 != null goto label04;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set icon of non-existing app token: ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r47 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r47);

        exitmonitor r6;

     label03:
        return;

     label04:
        $z2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean okToDisplay()>();

        if $z2 != 0 goto label06;

        exitmonitor r6;

     label05:
        return;

     label06:
        $r15 = r7.<com.android.server.wm.AppWindowToken: com.android.server.wm.StartingData startingData>;

        if $r15 == null goto label08;

        exitmonitor r6;

     label07:
        return;

     label08:
        if r5 == null goto label20;

        r8 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>(r5);

        if r8 == null goto label20;

        r9 = r8.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow>;

        if r9 == null goto label16;

        $z10 = r0.<com.android.server.wm.WindowManagerService: boolean mStartingIconInTransition>;

        if $z10 == 0 goto label09;

        r0.<com.android.server.wm.WindowManagerService: boolean mSkipAppTransitionAnimation> = 1;

     label09:
        l5 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r36 = r8.<com.android.server.wm.AppWindowToken: com.android.server.wm.StartingData startingData>;

        r7.<com.android.server.wm.AppWindowToken: com.android.server.wm.StartingData startingData> = $r36;

        $r37 = r8.<com.android.server.wm.AppWindowToken: android.view.View startingView>;

        r7.<com.android.server.wm.AppWindowToken: android.view.View startingView> = $r37;

        $z8 = r8.<com.android.server.wm.AppWindowToken: boolean startingDisplayed>;

        r7.<com.android.server.wm.AppWindowToken: boolean startingDisplayed> = $z8;

        r8.<com.android.server.wm.AppWindowToken: boolean startingDisplayed> = 0;

        r7.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow> = r9;

        $z9 = r8.<com.android.server.wm.AppWindowToken: boolean reportedVisible>;

        r7.<com.android.server.wm.AppWindowToken: boolean reportedVisible> = $z9;

        r8.<com.android.server.wm.AppWindowToken: com.android.server.wm.StartingData startingData> = null;

        r8.<com.android.server.wm.AppWindowToken: android.view.View startingView> = null;

        r8.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow> = null;

        r8.<com.android.server.wm.AppWindowToken: boolean startingMoved> = 1;

        r9.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken> = r7;

        r9.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mRootToken> = r7;

        r9.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken> = r7;

        $r35 = r9.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r34 = r7.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r35.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.AppWindowAnimator mAppAnimator> = $r34;

        $r39 = virtualinvoke r9.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        virtualinvoke $r39.<com.android.server.wm.WindowList: boolean remove(java.lang.Object)>(r9);

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        $r40 = r8.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList windows>;

        virtualinvoke $r40.<com.android.server.wm.WindowList: boolean remove(java.lang.Object)>(r9);

        $r38 = r8.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        virtualinvoke $r38.<com.android.server.wm.WindowList: boolean remove(java.lang.Object)>(r9);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void addWindowToListInOrderLocked(com.android.server.wm.WindowState,boolean)>(r9, 1);

        $z12 = r8.<com.android.server.wm.AppWindowToken: boolean allDrawn>;

        if $z12 == 0 goto label10;

        r7.<com.android.server.wm.AppWindowToken: boolean allDrawn> = 1;

        $z21 = r8.<com.android.server.wm.AppWindowToken: boolean deferClearAllDrawn>;

        r7.<com.android.server.wm.AppWindowToken: boolean deferClearAllDrawn> = $z21;

     label10:
        $z13 = r8.<com.android.server.wm.AppWindowToken: boolean firstWindowDrawn>;

        if $z13 == 0 goto label11;

        r7.<com.android.server.wm.AppWindowToken: boolean firstWindowDrawn> = 1;

     label11:
        $z18 = r8.<com.android.server.wm.AppWindowToken: boolean hidden>;

        if $z18 != 0 goto label12;

        r7.<com.android.server.wm.AppWindowToken: boolean hidden> = 0;

        r7.<com.android.server.wm.AppWindowToken: boolean hiddenRequested> = 0;

        r7.<com.android.server.wm.AppWindowToken: boolean willBeHidden> = 0;

     label12:
        $z19 = r7.<com.android.server.wm.AppWindowToken: boolean clientHidden>;

        $z17 = r8.<com.android.server.wm.AppWindowToken: boolean clientHidden>;

        if $z19 == $z17 goto label13;

        $z22 = r8.<com.android.server.wm.AppWindowToken: boolean clientHidden>;

        r7.<com.android.server.wm.AppWindowToken: boolean clientHidden> = $z22;

        virtualinvoke r7.<com.android.server.wm.AppWindowToken: void sendAppVisibilityToClients()>();

     label13:
        r12 = r8.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        r11 = r7.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r43 = r12.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        if $r43 == null goto label14;

        $r42 = r12.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        r11.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation> = $r42;

        $z20 = r12.<com.android.server.wm.AppWindowAnimator: boolean animating>;

        r11.<com.android.server.wm.AppWindowAnimator: boolean animating> = $z20;

        $i10 = r12.<com.android.server.wm.AppWindowAnimator: int animLayerAdjustment>;

        r11.<com.android.server.wm.AppWindowAnimator: int animLayerAdjustment> = $i10;

        r12.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation> = null;

        r12.<com.android.server.wm.AppWindowAnimator: int animLayerAdjustment> = 0;

        virtualinvoke r11.<com.android.server.wm.AppWindowAnimator: void updateLayers()>();

        virtualinvoke r12.<com.android.server.wm.AppWindowAnimator: void updateLayers()>();

     label14:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(3, 1);

        $r41 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r41.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        exitmonitor r6;

     label15:
        return;

     label16:
        $r27 = r8.<com.android.server.wm.AppWindowToken: com.android.server.wm.StartingData startingData>;

        if $r27 == null goto label18;

        $r30 = r8.<com.android.server.wm.AppWindowToken: com.android.server.wm.StartingData startingData>;

        r7.<com.android.server.wm.AppWindowToken: com.android.server.wm.StartingData startingData> = $r30;

        r8.<com.android.server.wm.AppWindowToken: com.android.server.wm.StartingData startingData> = null;

        r8.<com.android.server.wm.AppWindowToken: boolean startingMoved> = 1;

        $r29 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        r50 = virtualinvoke $r29.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(5, r7);

        $r33 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r33.<com.android.server.wm.WindowManagerService$H: boolean sendMessageAtFrontOfQueue(android.os.Message)>(r50);

        exitmonitor r6;

     label17:
        return;

     label18:
        r51 = r8.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        r10 = r7.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r26 = r51.<com.android.server.wm.AppWindowAnimator: android.view.SurfaceControl thumbnail>;

        if $r26 == null goto label20;

        $r25 = r10.<com.android.server.wm.AppWindowAnimator: android.view.SurfaceControl thumbnail>;

        if $r25 == null goto label19;

        $r31 = r10.<com.android.server.wm.AppWindowAnimator: android.view.SurfaceControl thumbnail>;

        virtualinvoke $r31.<android.view.SurfaceControl: void destroy()>();

     label19:
        $r28 = r51.<com.android.server.wm.AppWindowAnimator: android.view.SurfaceControl thumbnail>;

        r10.<com.android.server.wm.AppWindowAnimator: android.view.SurfaceControl thumbnail> = $r28;

        $i9 = r51.<com.android.server.wm.AppWindowAnimator: int thumbnailX>;

        r10.<com.android.server.wm.AppWindowAnimator: int thumbnailX> = $i9;

        $i8 = r51.<com.android.server.wm.AppWindowAnimator: int thumbnailY>;

        r10.<com.android.server.wm.AppWindowAnimator: int thumbnailY> = $i8;

        $i7 = r51.<com.android.server.wm.AppWindowAnimator: int thumbnailLayer>;

        r10.<com.android.server.wm.AppWindowAnimator: int thumbnailLayer> = $i7;

        $r32 = r51.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation thumbnailAnimation>;

        r10.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation thumbnailAnimation> = $r32;

        r51.<com.android.server.wm.AppWindowAnimator: android.view.SurfaceControl thumbnail> = null;

     label20:
        if z0 != 0 goto label22;

        exitmonitor r6;

     label21:
        return;

     label22:
        if i0 == 0 goto label31;

        $r20 = staticinvoke <com.android.server.AttributeCache: com.android.server.AttributeCache instance()>();

        $r19 = <com.android.internal.R$styleable: int[] Window>;

        $i6 = r0.<com.android.server.wm.WindowManagerService: int mCurrentUserId>;

        r52 = virtualinvoke $r20.<com.android.server.AttributeCache: com.android.server.AttributeCache$Entry get(java.lang.String,int,int[],int)>(r2, i0, $r19, $i6);

        if r52 != null goto label24;

        exitmonitor r6;

     label23:
        return;

     label24:
        $r22 = r52.<com.android.server.AttributeCache$Entry: android.content.res.TypedArray array>;

        $z5 = virtualinvoke $r22.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(5, 0);

        if $z5 == 0 goto label26;

        exitmonitor r6;

     label25:
        return;

     label26:
        $r21 = r52.<com.android.server.AttributeCache$Entry: android.content.res.TypedArray array>;

        $z4 = virtualinvoke $r21.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(4, 0);

        if $z4 == 0 goto label28;

        exitmonitor r6;

     label27:
        return;

     label28:
        $r24 = r52.<com.android.server.AttributeCache$Entry: android.content.res.TypedArray array>;

        $z6 = virtualinvoke $r24.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(14, 0);

        if $z6 == 0 goto label31;

        $r23 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        if $r23 != null goto label29;

        i4 = i4 | 1048576;

        goto label31;

     label29:
        exitmonitor r6;

     label30:
        return;

     label31:
        r0.<com.android.server.wm.WindowManagerService: boolean mStartingIconInTransition> = 1;

        $r17 = new com.android.server.wm.StartingData;

        specialinvoke $r17.<com.android.server.wm.StartingData: void <init>(java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,int)>(r2, i0, r3, r4, i1, i2, i3, i4);

        r7.<com.android.server.wm.AppWindowToken: com.android.server.wm.StartingData startingData> = $r17;

        $r16 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        r53 = virtualinvoke $r16.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(5, r7);

        $r18 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r18.<com.android.server.wm.WindowManagerService$H: boolean sendMessageAtFrontOfQueue(android.os.Message)>(r53);

        exitmonitor r6;

     label32:
        goto label35;

     label33:
        $r45 := @caughtexception;

        r13 = $r45;

        exitmonitor r6;

     label34:
        throw r13;

     label35:
        return;

        catch java.lang.Throwable from label02 to label03 with label33;
        catch java.lang.Throwable from label04 to label05 with label33;
        catch java.lang.Throwable from label06 to label07 with label33;
        catch java.lang.Throwable from label08 to label15 with label33;
        catch java.lang.Throwable from label16 to label17 with label33;
        catch java.lang.Throwable from label18 to label21 with label33;
        catch java.lang.Throwable from label22 to label23 with label33;
        catch java.lang.Throwable from label24 to label25 with label33;
        catch java.lang.Throwable from label26 to label27 with label33;
        catch java.lang.Throwable from label28 to label30 with label33;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label33 to label34 with label33;
    }

    public void removeAppStartingWindow(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        java.util.HashMap r2, $r5, $r6;
        com.android.server.wm.AppWindowToken r3;
        java.lang.Throwable r4, $r10;
        java.lang.Object $r7;
        com.android.server.wm.WindowToken $r8;
        com.android.server.wm.WindowState $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (com.android.server.wm.WindowToken) $r7;

        r3 = $r8.<com.android.server.wm.WindowToken: com.android.server.wm.AppWindowToken appWindowToken>;

        $r9 = r3.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow>;

        if $r9 == null goto label2;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void scheduleRemoveStartingWindowLocked(com.android.server.wm.AppWindowToken)>(r3);

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setAppWillBeHidden(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        com.android.server.wm.AppWindowToken r2;
        java.util.HashMap r3, $r5;
        java.lang.Throwable r4, $r10;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        java.lang.SecurityException $r11;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setAppWillBeHidden()");

        if $z0 != 0 goto label1;

        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r11;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r5;

        entermonitor $r5;

     label2:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>(r1);

        if r2 != null goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set will be hidden of non-existing app token: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r9);

        exitmonitor r3;

     label3:
        return;

     label4:
        r2.<com.android.server.wm.AppWindowToken: boolean willBeHidden> = 1;

        exitmonitor r3;

     label5:
        goto label8;

     label6:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r3;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setAppFullscreen(android.os.IBinder, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        boolean z0;
        java.util.HashMap r2, $r5;
        com.android.server.wm.AppWindowToken r3;
        java.lang.Throwable r4, $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>(r1);

        if r3 == null goto label2;

        r3.<com.android.server.wm.AppWindowToken: boolean appFullscreen> = z0;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void setWindowOpaqueLocked(android.os.IBinder,boolean)>(r1, z0);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void requestTraversalLocked()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r4 = $r6;

        exitmonitor r2;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setWindowOpaque(android.os.IBinder, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        boolean z0;
        java.util.HashMap r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void setWindowOpaqueLocked(android.os.IBinder,boolean)>(r1, z0);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setWindowOpaqueLocked(android.os.IBinder, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        boolean z0;
        com.android.server.wm.AppWindowToken r2;
        com.android.server.wm.WindowState r3;
        com.android.server.wm.WindowStateAnimator $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>(r1);

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState findMainWindow()>();

        if r3 == null goto label1;

        $r4 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r4.<com.android.server.wm.WindowStateAnimator: void setOpaqueLocked(boolean)>(z0);

     label1:
        return;
    }

    boolean setTokenVisibilityLocked(com.android.server.wm.AppWindowToken, android.view.WindowManager$LayoutParams, boolean, int, boolean, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.AppWindowToken r1;
        android.view.WindowManager$LayoutParams r2;
        boolean z0, z1, z2, z3, z4, z5, $z6, $z7, $z8, $z9, $z10, $z12, $z14, $z16, $z17;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        com.android.server.wm.WindowState r3, r4, $r12, $r16, r32;
        com.android.server.wm.DisplayContent r5, r31;
        android.view.animation.Animation $r6, $r24, $r25;
        com.android.server.wm.AppWindowAnimator $r7, $r26, $r29;
        com.android.server.wm.WindowList $r8, $r10, $r13, $r17;
        java.lang.Object $r9, $r18;
        com.android.server.wm.WindowStateAnimator $r11, $r20, $r23;
        com.android.server.wm.InputMonitor $r14, $r15;
        com.android.server.wm.AccessibilityController $r19, $r21, $r22, $r27, $r28, $r30;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.AppWindowToken;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        z3 = 0;

        $z6 = r1.<com.android.server.wm.AppWindowToken: boolean clientHidden>;

        if $z6 != z0 goto label03;

        if z0 != 0 goto label01;

        $z17 = 1;

        goto label02;

     label01:
        $z17 = 0;

     label02:
        r1.<com.android.server.wm.AppWindowToken: boolean clientHidden> = $z17;

        virtualinvoke r1.<com.android.server.wm.AppWindowToken: void sendAppVisibilityToClients()>();

     label03:
        r1.<com.android.server.wm.AppWindowToken: boolean willBeHidden> = 0;

        $z7 = r1.<com.android.server.wm.AppWindowToken: boolean hidden>;

        if $z7 != z0 goto label21;

        z4 = 0;

        z5 = 0;

        if i0 == -1 goto label07;

        $r26 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r24 = $r26.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        $r25 = <com.android.server.wm.AppWindowAnimator: android.view.animation.Animation sDummyAnimation>;

        if $r24 != $r25 goto label04;

        $r29 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r29.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation> = null;

     label04:
        $z16 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean applyAnimationLocked(com.android.server.wm.AppWindowToken,android.view.WindowManager$LayoutParams,int,boolean,boolean)>(r1, r2, i0, z0, z2);

        if $z16 == 0 goto label05;

        z5 = 1;

        z3 = 1;

     label05:
        r3 = virtualinvoke r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState findMainWindow()>();

        if r3 == null goto label06;

        $r28 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r28 == null goto label06;

        $i5 = virtualinvoke r3.<com.android.server.wm.WindowState: int getDisplayId()>();

        if $i5 != 0 goto label06;

        $r30 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r30.<com.android.server.wm.AccessibilityController: void onAppWindowTransitionLocked(com.android.server.wm.WindowState,int)>(r3, i0);

     label06:
        z4 = 1;

     label07:
        $r13 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        i6 = virtualinvoke $r13.<com.android.server.wm.WindowList: int size()>();

        i1 = 0;

     label08:
        if i1 >= i6 goto label15;

        $r17 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        $r18 = virtualinvoke $r17.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r4 = (com.android.server.wm.WindowState) $r18;

        $r16 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow>;

        if r4 != $r16 goto label09;

        goto label14;

     label09:
        if z0 == 0 goto label12;

        $z14 = virtualinvoke r4.<com.android.server.wm.WindowState: boolean isVisibleNow()>();

        if $z14 != 0 goto label14;

        if z5 != 0 goto label10;

        $r23 = r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r23.<com.android.server.wm.WindowStateAnimator: boolean applyAnimationLocked(int,boolean)>(1, 1);

        $r22 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r22 == null goto label10;

        $i4 = virtualinvoke r4.<com.android.server.wm.WindowState: int getDisplayId()>();

        if $i4 != 0 goto label10;

        $r27 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r27.<com.android.server.wm.AccessibilityController: void onWindowTransitionLocked(com.android.server.wm.WindowState,int)>(r4, 1);

     label10:
        z4 = 1;

        r5 = virtualinvoke r4.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r5 == null goto label11;

        r5.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label11:
        goto label14;

     label12:
        $z12 = virtualinvoke r4.<com.android.server.wm.WindowState: boolean isVisibleNow()>();

        if $z12 == 0 goto label14;

        if z5 != 0 goto label13;

        $r20 = r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r20.<com.android.server.wm.WindowStateAnimator: boolean applyAnimationLocked(int,boolean)>(2, 0);

        $r19 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r19 == null goto label13;

        $i3 = virtualinvoke r4.<com.android.server.wm.WindowState: int getDisplayId()>();

        if $i3 != 0 goto label13;

        $r21 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r21.<com.android.server.wm.AccessibilityController: void onWindowTransitionLocked(com.android.server.wm.WindowState,int)>(r4, 2);

     label13:
        z4 = 1;

        r31 = virtualinvoke r4.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r31 == null goto label14;

        r31.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label14:
        i1 = i1 + 1;

        goto label08;

     label15:
        if z0 != 0 goto label16;

        $z9 = 1;

        goto label17;

     label16:
        $z9 = 0;

     label17:
        r1.<com.android.server.wm.AppWindowToken: boolean hiddenRequested> = $z9;

        r1.<com.android.server.wm.AppWindowToken: boolean hidden> = $z9;

        if z0 != 0 goto label18;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,boolean,boolean)>(r1, 1, 1);

        goto label19;

     label18:
        r32 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow>;

        if r32 == null goto label19;

        $z10 = virtualinvoke r32.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z10 != 0 goto label19;

        r32.<com.android.server.wm.WindowState: boolean mPolicyVisibility> = 0;

        r32.<com.android.server.wm.WindowState: boolean mPolicyVisibilityAfterAnim> = 0;

     label19:
        if z4 == 0 goto label21;

        $r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r15.<com.android.server.wm.InputMonitor: void setUpdateInputWindowsNeededLw()>();

        if z1 == 0 goto label20;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(3, 0);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

     label20:
        $r14 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r14.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(0);

     label21:
        $r7 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r6 = $r7.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        if $r6 == null goto label22;

        z3 = 1;

     label22:
        $r8 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        $i2 = virtualinvoke $r8.<com.android.server.wm.WindowList: int size()>();

        i7 = $i2 - 1;

     label23:
        if i7 < 0 goto label25;

        if z3 != 0 goto label25;

        $r10 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        $r9 = virtualinvoke $r10.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i7);

        $r12 = (com.android.server.wm.WindowState) $r9;

        $r11 = $r12.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z8 = virtualinvoke $r11.<com.android.server.wm.WindowStateAnimator: boolean isWindowAnimating()>();

        if $z8 == 0 goto label24;

        z3 = 1;

     label24:
        i7 = i7 + -1;

        goto label23;

     label25:
        return z3;
    }

    public void setAppVisibility(android.os.IBinder, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        boolean z0, $z1, $z2, $z3, $z5, $z6, $z11, $z14, $z15, $z16;
        com.android.server.wm.AppWindowToken r2, r5;
        java.util.HashMap r3, $r7;
        com.android.server.wm.WindowState r4;
        java.lang.Throwable r6, $r22;
        com.android.server.wm.AppTransition $r8, $r12;
        android.util.ArraySet $r9, $r10, $r11, $r14, $r15;
        int $i0;
        com.android.server.wm.DisplayContent $r13;
        com.android.server.wm.AppWindowAnimator $r16;
        java.lang.StringBuilder $r17, $r18, $r19;
        java.lang.SecurityException $r20;
        java.lang.String $r21;
        long l2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setAppVisibility()");

        if $z1 != 0 goto label01;

        $r20 = new java.lang.SecurityException;

        specialinvoke $r20.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r20;

     label01:
        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r7;

        entermonitor $r7;

     label02:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>(r1);

        if r2 != null goto label04;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set visibility of non-existing app token: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r21);

        exitmonitor r3;

     label03:
        return;

     label04:
        $z2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean okToDisplay()>();

        if $z2 == 0 goto label12;

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z5 = virtualinvoke $r8.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z5 == 0 goto label12;

        if z0 != 0 goto label05;

        $z14 = 1;

        goto label06;

     label05:
        $z14 = 0;

     label06:
        r2.<com.android.server.wm.AppWindowToken: boolean hiddenRequested> = $z14;

        $z6 = r2.<com.android.server.wm.AppWindowToken: boolean startingDisplayed>;

        if $z6 != 0 goto label07;

        $r16 = r2.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        virtualinvoke $r16.<com.android.server.wm.AppWindowAnimator: void setDummyAnimation()>();

     label07:
        $r9 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        virtualinvoke $r9.<android.util.ArraySet: boolean remove(java.lang.Object)>(r2);

        $r10 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps>;

        virtualinvoke $r10.<android.util.ArraySet: boolean remove(java.lang.Object)>(r2);

        r2.<com.android.server.wm.AppWindowToken: boolean waitingToHide> = 0;

        r2.<com.android.server.wm.AppWindowToken: boolean waitingToShow> = 0;

        r2.<com.android.server.wm.AppWindowToken: boolean inPendingTransaction> = 1;

        if z0 == 0 goto label08;

        $r14 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        virtualinvoke $r14.<android.util.ArraySet: boolean add(java.lang.Object)>(r2);

        r2.<com.android.server.wm.AppWindowToken: boolean startingMoved> = 0;

        r2.<com.android.server.wm.AppWindowToken: boolean mEnteringAnimation> = 1;

        $z15 = r2.<com.android.server.wm.AppWindowToken: boolean hidden>;

        if $z15 == 0 goto label09;

        r2.<com.android.server.wm.AppWindowToken: boolean allDrawn> = 0;

        r2.<com.android.server.wm.AppWindowToken: boolean deferClearAllDrawn> = 0;

        r2.<com.android.server.wm.AppWindowToken: boolean waitingToShow> = 1;

        $z16 = r2.<com.android.server.wm.AppWindowToken: boolean clientHidden>;

        if $z16 == 0 goto label09;

        r2.<com.android.server.wm.AppWindowToken: boolean clientHidden> = 0;

        virtualinvoke r2.<com.android.server.wm.AppWindowToken: void sendAppVisibilityToClients()>();

        goto label09;

     label08:
        $r11 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps>;

        virtualinvoke $r11.<android.util.ArraySet: boolean add(java.lang.Object)>(r2);

        r2.<com.android.server.wm.AppWindowToken: boolean mEnteringAnimation> = 0;

        $z11 = r2.<com.android.server.wm.AppWindowToken: boolean hidden>;

        if $z11 != 0 goto label09;

        r2.<com.android.server.wm.AppWindowToken: boolean waitingToHide> = 1;

     label09:
        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $i0 = virtualinvoke $r12.<com.android.server.wm.AppTransition: int getAppTransition()>();

        if $i0 != 16 goto label10;

        $r13 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        r4 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState findFocusedWindowLocked(com.android.server.wm.DisplayContent)>($r13);

        if r4 == null goto label10;

        r5 = r4.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if r5 == null goto label10;

        r5.<com.android.server.wm.AppWindowToken: boolean hidden> = 1;

        $r15 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        virtualinvoke $r15.<android.util.ArraySet: boolean add(java.lang.Object)>(r5);

     label10:
        exitmonitor r3;

     label11:
        return;

     label12:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $z3 = r2.<com.android.server.wm.AppWindowToken: boolean voiceInteraction>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.wm.AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean,boolean)>(r2, null, z0, -1, 1, $z3);

        virtualinvoke r2.<com.android.server.wm.AppWindowToken: void updateReportedVisibilityLocked()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r3;

     label13:
        goto label16;

     label14:
        $r22 := @caughtexception;

        r6 = $r22;

        exitmonitor r3;

     label15:
        throw r6;

     label16:
        return;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    void unsetAppFreezingScreenLocked(com.android.server.wm.AppWindowToken, boolean, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.AppWindowToken r1;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6;
        int i0, i1, $i5, $i6, $i7;
        com.android.server.wm.WindowState r2;
        com.android.server.wm.DisplayContent r3;
        com.android.server.wm.AppWindowAnimator $r4, $r6, $r7;
        com.android.server.wm.WindowList $r5, $r8;
        long $l2, $l3, $l4;
        java.lang.Object $r9;
        com.android.server.wm.WindowManagerService$LayoutFields $r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.AppWindowToken;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r4 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $z3 = $r4.<com.android.server.wm.AppWindowAnimator: boolean freezingScreen>;

        if $z3 == 0 goto label8;

        $r5 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        i0 = virtualinvoke $r5.<com.android.server.wm.WindowList: int size()>();

        z2 = 0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r8 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        $r9 = virtualinvoke $r8.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.wm.WindowState) $r9;

        $z4 = r2.<com.android.server.wm.WindowState: boolean mAppFreezing>;

        if $z4 == 0 goto label3;

        r2.<com.android.server.wm.WindowState: boolean mAppFreezing> = 0;

        $z5 = r2.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z5 == 0 goto label2;

        $z6 = r2.<com.android.server.wm.WindowState: boolean mOrientationChanging>;

        if $z6 != 0 goto label2;

        r2.<com.android.server.wm.WindowState: boolean mOrientationChanging> = 1;

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r10.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mOrientationChangeComplete> = 0;

     label2:
        r2.<com.android.server.wm.WindowState: int mLastFreezeDuration> = 0;

        z2 = 1;

        r3 = virtualinvoke r2.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r3 == null goto label3;

        r3.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        if z1 != 0 goto label5;

        if z2 == 0 goto label6;

     label5:
        $r6 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r6.<com.android.server.wm.AppWindowAnimator: boolean freezingScreen> = 0;

        $r7 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l4 = r0.<com.android.server.wm.WindowManagerService: long mDisplayFreezeTime>;

        $l3 = $l2 - $l4;

        $i6 = (int) $l3;

        $r7.<com.android.server.wm.AppWindowAnimator: int lastFreezeDuration> = $i6;

        $i5 = r0.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen>;

        $i7 = $i5 - 1;

        r0.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen> = $i7;

        r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource> = r1;

     label6:
        if z0 == 0 goto label8;

        if z2 == 0 goto label7;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

     label7:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void stopFreezingDisplayLocked()>();

     label8:
        return;
    }

    private void startAppFreezingScreenLocked(com.android.server.wm.AppWindowToken)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.AppWindowToken r1;
        int i0, i1, $i2, $i3, $i4;
        com.android.server.wm.WindowState r2;
        boolean $z0, $z1;
        com.android.server.wm.AppWindowAnimator $r3, $r7, $r8;
        com.android.server.wm.WindowList $r4, $r5;
        java.lang.Object $r6;
        com.android.server.wm.WindowManagerService$H $r9, $r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.AppWindowToken;

        $z0 = r1.<com.android.server.wm.AppWindowToken: boolean hiddenRequested>;

        if $z0 != 0 goto label3;

        $r3 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $z1 = $r3.<com.android.server.wm.AppWindowAnimator: boolean freezingScreen>;

        if $z1 != 0 goto label1;

        $r7 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r7.<com.android.server.wm.AppWindowAnimator: boolean freezingScreen> = 1;

        $r8 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r8.<com.android.server.wm.AppWindowAnimator: int lastFreezeDuration> = 0;

        $i2 = r0.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen>;

        $i3 = $i2 + 1;

        r0.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen> = $i3;

        $i4 = r0.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen>;

        if $i4 != 1 goto label1;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void startFreezingDisplayLocked(boolean,int,int)>(0, 0, 0);

        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r9.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(17);

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r10.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(17, 5000L);

     label1:
        $r4 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        i0 = virtualinvoke $r4.<com.android.server.wm.WindowList: int size()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r5 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.wm.WindowState) $r6;

        r2.<com.android.server.wm.WindowState: boolean mAppFreezing> = 1;

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public void startAppFreezingScreen(android.os.IBinder, int)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        int i0;
        java.util.HashMap r2, $r5;
        com.android.server.wm.AppWindowToken r3;
        long l1;
        java.lang.Throwable r4, $r12;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        android.view.IApplicationToken $r10;
        java.lang.SecurityException $r11;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setAppFreezingScreen()");

        if $z0 != 0 goto label01;

        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r11;

     label01:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label02:
        if i0 != 0 goto label04;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean okToDisplay()>();

        if $z1 == 0 goto label04;

        exitmonitor r2;

     label03:
        return;

     label04:
        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>(r1);

        if r3 == null goto label05;

        $r10 = r3.<com.android.server.wm.AppWindowToken: android.view.IApplicationToken appToken>;

        if $r10 != null goto label07;

     label05:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to freeze screen with non-existing app token: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r9);

        exitmonitor r2;

     label06:
        return;

     label07:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void startAppFreezingScreenLocked(com.android.server.wm.AppWindowToken)>(r3);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r2;

     label10:
        throw r4;

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void stopAppFreezingScreen(android.os.IBinder, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        boolean z0, $z1;
        java.util.HashMap r2, $r5;
        com.android.server.wm.AppWindowToken r3;
        long l0;
        java.lang.Throwable r4, $r8;
        android.view.IApplicationToken $r6;
        java.lang.SecurityException $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setAppFreezingScreen()");

        if $z1 != 0 goto label1;

        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r7;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label2:
        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>(r1);

        if r3 == null goto label3;

        $r6 = r3.<com.android.server.wm.AppWindowToken: android.view.IApplicationToken appToken>;

        if $r6 != null goto label5;

     label3:
        exitmonitor r2;

     label4:
        return;

     label5:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,boolean,boolean)>(r3, 1, z0);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r2;

     label8:
        throw r4;

     label9:
        return;

        catch java.lang.Throwable from label2 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    void removeAppFromTaskLocked(com.android.server.wm.AppWindowToken)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.AppWindowToken r1;
        com.android.server.wm.Task r2;
        int $i0;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.AppWindowToken;

        virtualinvoke r1.<com.android.server.wm.AppWindowToken: void removeAllWindows()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        $i0 = r1.<com.android.server.wm.AppWindowToken: int groupId>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        r2 = (com.android.server.wm.Task) $r4;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<com.android.server.wm.Task: boolean removeAppToken(com.android.server.wm.AppWindowToken)>(r1);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeAppFromTaskLocked: token=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", $r9);

     label1:
        return;
    }

    public void removeAppToken(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        com.android.server.wm.AppWindowToken r2, r3, $r15, $r23;
        boolean z0, $z1, $z2, $z4, $z5;
        long l0;
        java.util.HashMap r4, $r8, $r9;
        com.android.server.wm.WindowToken r5;
        com.android.server.wm.TaskStack r6;
        java.lang.Throwable r7, $r29;
        java.lang.Object $r10, $r19;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.String $r14;
        android.util.ArraySet $r16, $r17, $r30;
        com.android.server.wm.AppTransition $r18;
        com.android.server.wm.Task $r20;
        int $i2;
        android.util.SparseArray $r21;
        com.android.server.wm.StartingData $r22;
        com.android.server.wm.AppWindowAnimator $r24, $r25;
        com.android.server.wm.AppTokenList $r26;
        com.android.server.wm.InputMonitor $r27;
        java.lang.SecurityException $r28;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "removeAppToken()");

        if $z1 != 0 goto label01;

        $r28 = new java.lang.SecurityException;

        specialinvoke $r28.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r28;

     label01:
        r2 = null;

        r3 = null;

        z0 = 0;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r4 = $r8;

        entermonitor $r8;

     label02:
        $r9 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        r5 = (com.android.server.wm.WindowToken) $r10;

        if r5 == null goto label09;

        $r15 = r5.<com.android.server.wm.WindowToken: com.android.server.wm.AppWindowToken appWindowToken>;

        r2 = $r15;

        if $r15 == null goto label09;

        $z2 = r2.<com.android.server.wm.AppWindowToken: boolean voiceInteraction>;

        z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.wm.AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean,boolean)>(r2, null, 0, -1, 1, $z2);

        r2.<com.android.server.wm.AppWindowToken: boolean inPendingTransaction> = 0;

        $r16 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        virtualinvoke $r16.<android.util.ArraySet: boolean remove(java.lang.Object)>(r2);

        r2.<com.android.server.wm.AppWindowToken: boolean waitingToShow> = 0;

        $r17 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps>;

        $z4 = virtualinvoke $r17.<android.util.ArraySet: boolean contains(java.lang.Object)>(r2);

        if $z4 == 0 goto label03;

        z0 = 1;

        goto label04;

     label03:
        $r18 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z5 = virtualinvoke $r18.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z5 == 0 goto label04;

        $r30 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps>;

        virtualinvoke $r30.<android.util.ArraySet: boolean add(java.lang.Object)>(r2);

        r2.<com.android.server.wm.AppWindowToken: boolean waitingToHide> = 1;

        z0 = 1;

     label04:
        $r21 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        $i2 = r2.<com.android.server.wm.AppWindowToken: int groupId>;

        $r19 = virtualinvoke $r21.<android.util.SparseArray: java.lang.Object get(int)>($i2);

        $r20 = (com.android.server.wm.Task) $r19;

        r6 = $r20.<com.android.server.wm.Task: com.android.server.wm.TaskStack mStack>;

        if z0 == 0 goto label05;

        $r26 = r6.<com.android.server.wm.TaskStack: com.android.server.wm.AppTokenList mExitingAppTokens>;

        virtualinvoke $r26.<com.android.server.wm.AppTokenList: boolean add(java.lang.Object)>(r2);

        r2.<com.android.server.wm.AppWindowToken: boolean mDeferRemoval> = 1;

        goto label06;

     label05:
        $r24 = r2.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        virtualinvoke $r24.<com.android.server.wm.AppWindowAnimator: void clearAnimation()>();

        $r25 = r2.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r25.<com.android.server.wm.AppWindowAnimator: boolean animating> = 0;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void removeAppFromTaskLocked(com.android.server.wm.AppWindowToken)>(r2);

     label06:
        r2.<com.android.server.wm.AppWindowToken: boolean removed> = 1;

        $r22 = r2.<com.android.server.wm.AppWindowToken: com.android.server.wm.StartingData startingData>;

        if $r22 == null goto label07;

        r3 = r2;

     label07:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,boolean,boolean)>(r2, 1, 1);

        $r23 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken mFocusedApp>;

        if $r23 != r2 goto label08;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken mFocusedApp> = null;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(0, 1);

        $r27 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r27.<com.android.server.wm.InputMonitor: void setFocusedAppLw(com.android.server.wm.AppWindowToken)>(null);

     label08:
        goto label10;

     label09:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to remove non-existing app token: ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r14);

     label10:
        if z0 != 0 goto label11;

        if r2 == null goto label11;

        virtualinvoke r2.<com.android.server.wm.AppWindowToken: void updateReportedVisibilityLocked()>();

     label11:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void scheduleRemoveStartingWindowLocked(com.android.server.wm.AppWindowToken)>(r3);

        exitmonitor r4;

     label12:
        goto label15;

     label13:
        $r29 := @caughtexception;

        r7 = $r29;

        exitmonitor r4;

     label14:
        throw r7;

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

        catch java.lang.Throwable from label02 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    void scheduleRemoveStartingWindowLocked(com.android.server.wm.AppWindowToken)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.AppWindowToken r1;
        android.os.Message r2;
        com.android.server.wm.WindowManagerService$H $r3, $r5, $r6;
        boolean $z0;
        com.android.server.wm.WindowState $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.AppWindowToken;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $z0 = virtualinvoke $r3.<com.android.server.wm.WindowManagerService$H: boolean hasMessages(int,java.lang.Object)>(6, r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        if r1 == null goto label2;

        $r4 = r1.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow>;

        if $r4 == null goto label2;

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        r2 = virtualinvoke $r5.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(6, r1);

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r6.<com.android.server.wm.WindowManagerService$H: boolean sendMessage(android.os.Message)>(r2);

     label2:
        return;
    }

    private boolean tmpRemoveAppWindowsLocked(com.android.server.wm.WindowToken)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowToken r1;
        com.android.server.wm.WindowList r2, $r6, $r7, $r8, $r9;
        int i0, i1, i2;
        com.android.server.wm.WindowState r3, r4;
        boolean $z0;
        java.lang.Object $r5, $r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowToken;

        r2 = r1.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        i0 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        if i0 <= 0 goto label1;

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        $r5 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.wm.WindowState) $r5;

        $r6 = virtualinvoke r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        virtualinvoke $r6.<com.android.server.wm.WindowList: boolean remove(java.lang.Object)>(r3);

        $r7 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        i2 = virtualinvoke $r7.<com.android.server.wm.WindowList: int size()>();

     label3:
        if i2 <= 0 goto label4;

        i2 = i2 + -1;

        $r8 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        $r10 = virtualinvoke $r8.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r4 = (com.android.server.wm.WindowState) $r10;

        $r9 = virtualinvoke r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        virtualinvoke $r9.<com.android.server.wm.WindowList: boolean remove(java.lang.Object)>(r4);

        goto label3;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        if i0 <= 0 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        return $z0;
    }

    void dumpAppTokensLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i8;
        com.android.server.wm.TaskStack r1;
        java.util.ArrayList r2;
        com.android.server.wm.Task r3;
        com.android.server.wm.AppTokenList r4;
        android.util.SparseArray $r5, $r6;
        java.lang.Object $r7, $r13, $r25;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r24;
        java.lang.String $r11, $r19, $r27;
        android.os.IBinder $r23;
        com.android.server.wm.AppWindowToken $r26;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        i0 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        $r6 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r1 = (com.android.server.wm.TaskStack) $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Stack #");

        $i6 = r1.<com.android.server.wm.TaskStack: int mStackId>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tasks from bottom to top:");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowManager", $r11);

        r2 = virtualinvoke r1.<com.android.server.wm.TaskStack: java.util.ArrayList getTasks()>();

        i2 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i3 = 0;

     label2:
        if i3 >= i2 goto label5;

        $r13 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r3 = (com.android.server.wm.Task) $r13;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    Task #");

        $i8 = r3.<com.android.server.wm.Task: int taskId>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" activities from bottom to top:");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowManager", $r19);

        r4 = r3.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        i4 = virtualinvoke r4.<com.android.server.wm.AppTokenList: int size()>();

        i5 = 0;

     label3:
        if i5 >= i4 goto label4;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      activity #");

        $r20 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r25 = virtualinvoke r4.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i5);

        $r26 = (com.android.server.wm.AppWindowToken) $r25;

        $r23 = $r26.<com.android.server.wm.AppWindowToken: android.os.IBinder token>;

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowManager", $r27);

        i5 = i5 + 1;

        goto label3;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;
    }

    void dumpWindowsLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, $i3, $i5;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.WindowList r2;
        android.util.SparseArray $r3, $r4;
        java.lang.Object $r5, $r15;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14;
        java.lang.String $r9, $r16;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r4 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r1 = (com.android.server.wm.DisplayContent) $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Display #");

        $i3 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowManager", $r9);

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        $i5 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        i2 = $i5 - 1;

     label2:
        if i2 < 0 goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  #");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r15 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowManager", $r16);

        i2 = i2 + -1;

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    private int findAppWindowInsertionPointLocked(com.android.server.wm.AppWindowToken)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.AppWindowToken r1, r8;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i18, i19;
        com.android.server.wm.Task r2, r6;
        com.android.server.wm.DisplayContent r3;
        com.android.server.wm.WindowList r4, $r16, $r18, $r19, $r21;
        boolean z0, $z1, $z2;
        java.util.ArrayList r5;
        com.android.server.wm.AppTokenList r7;
        com.android.server.wm.WindowState r9, r10, $r13;
        android.util.SparseArray $r11;
        java.lang.Object $r12, $r14, $r15, $r17, $r20, $r22, $r23, $r24;
        java.lang.StringBuilder $r25, $r26, $r27, $r28, $r30, $r31, $r32, $r33;
        java.lang.String $r29, $r34;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.AppWindowToken;

        i0 = r1.<com.android.server.wm.AppWindowToken: int groupId>;

        $r11 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        $r12 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.Task) $r12;

        if r2 != null goto label01;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findAppWindowInsertionPointLocked: no Task for ");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" taskId=");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r34);

        return 0;

     label01:
        r3 = virtualinvoke r2.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r3 != null goto label02;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findAppWindowInsertionPointLocked: no DisplayContent for ");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r29);

        return 0;

     label02:
        r4 = virtualinvoke r3.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        i1 = virtualinvoke r4.<com.android.server.wm.WindowList: int size()>();

        z0 = 0;

        r5 = virtualinvoke r3.<com.android.server.wm.DisplayContent: java.util.ArrayList getTasks()>();

        $i7 = virtualinvoke r5.<java.util.ArrayList: int size()>();

        i2 = $i7 - 1;

     label03:
        if i2 < 0 goto label19;

        $r15 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r6 = (com.android.server.wm.Task) $r15;

        if z0 != 0 goto label04;

        $i14 = r6.<com.android.server.wm.Task: int taskId>;

        if $i14 == i0 goto label04;

        goto label18;

     label04:
        r7 = r6.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        $i9 = virtualinvoke r7.<com.android.server.wm.AppTokenList: int size()>();

        i3 = $i9 - 1;

     label05:
        if i3 < 0 goto label18;

        $r17 = virtualinvoke r7.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i3);

        r8 = (com.android.server.wm.AppWindowToken) $r17;

        if z0 != 0 goto label06;

        if r8 != r1 goto label06;

        z0 = 1;

     label06:
        if z0 == 0 goto label17;

        $z2 = r8.<com.android.server.wm.AppWindowToken: boolean sendingToBottom>;

        if $z2 == 0 goto label07;

        goto label17;

     label07:
        $r16 = r8.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList windows>;

        $i10 = virtualinvoke $r16.<com.android.server.wm.WindowList: int size()>();

        i4 = $i10 - 1;

     label08:
        if i4 < 0 goto label17;

        $r19 = r8.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList windows>;

        $r20 = virtualinvoke $r19.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i4);

        r9 = (com.android.server.wm.WindowState) $r20;

        $r18 = r9.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        $i11 = virtualinvoke $r18.<com.android.server.wm.WindowList: int size()>();

        i5 = $i11 - 1;

     label09:
        if i5 < 0 goto label13;

        $r21 = r9.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        $r22 = virtualinvoke $r21.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i5);

        r10 = (com.android.server.wm.WindowState) $r22;

        $i15 = r10.<com.android.server.wm.WindowState: int mSubLayer>;

        if $i15 < 0 goto label12;

        i6 = i1 - 1;

     label10:
        if i6 < 0 goto label12;

        $r24 = virtualinvoke r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i6);

        if $r24 != r10 goto label11;

        $i13 = i6 + 1;

        return $i13;

     label11:
        i6 = i6 + -1;

        goto label10;

     label12:
        i5 = i5 + -1;

        goto label09;

     label13:
        i18 = i1 - 1;

     label14:
        if i18 < 0 goto label16;

        $r23 = virtualinvoke r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i18);

        if $r23 != r9 goto label15;

        $i12 = i18 + 1;

        return $i12;

     label15:
        i18 = i18 + -1;

        goto label14;

     label16:
        i4 = i4 + -1;

        goto label08;

     label17:
        i3 = i3 + -1;

        goto label05;

     label18:
        i2 = i2 + -1;

        goto label03;

     label19:
        i19 = i1 - 1;

     label20:
        if i19 < 0 goto label22;

        $r14 = virtualinvoke r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i19);

        $r13 = (com.android.server.wm.WindowState) $r14;

        $z1 = $r13.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z1 == 0 goto label21;

        $i8 = i19 + 1;

        return $i8;

     label21:
        i19 = i19 + -1;

        goto label20;

     label22:
        return 0;
    }

    private final int reAddWindowLocked(int, com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, $i3;
        com.android.server.wm.WindowState r1, r3;
        com.android.server.wm.WindowList r2, $r4, $r5;
        boolean z0;
        java.lang.Object $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.wm.WindowState;

        r2 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        $r4 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        i1 = virtualinvoke $r4.<com.android.server.wm.WindowList: int size()>();

        z0 = 0;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        $r5 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        $r6 = virtualinvoke $r5.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r3 = (com.android.server.wm.WindowState) $r6;

        if z0 != 0 goto label2;

        $i3 = r3.<com.android.server.wm.WindowState: int mSubLayer>;

        if $i3 < 0 goto label2;

        r1.<com.android.server.wm.WindowState: boolean mRebuilding> = 0;

        virtualinvoke r2.<com.android.server.wm.WindowList: void add(int,java.lang.Object)>(i0, r1);

        i0 = i0 + 1;

        z0 = 1;

     label2:
        r3.<com.android.server.wm.WindowState: boolean mRebuilding> = 0;

        virtualinvoke r2.<com.android.server.wm.WindowList: void add(int,java.lang.Object)>(i0, r3);

        i0 = i0 + 1;

        i2 = i2 + 1;

        goto label1;

     label3:
        if z0 != 0 goto label4;

        r1.<com.android.server.wm.WindowState: boolean mRebuilding> = 0;

        virtualinvoke r2.<com.android.server.wm.WindowList: void add(int,java.lang.Object)>(i0, r1);

        i0 = i0 + 1;

     label4:
        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        return i0;
    }

    private final int reAddAppWindowsLocked(com.android.server.wm.DisplayContent, int, com.android.server.wm.WindowToken)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1, r4;
        int i0, i1, i2;
        com.android.server.wm.WindowToken r2;
        com.android.server.wm.WindowState r3;
        com.android.server.wm.WindowList $r5, $r6;
        java.lang.Object $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.server.wm.WindowToken;

        $r5 = r2.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        i1 = virtualinvoke $r5.<com.android.server.wm.WindowList: int size()>();

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        $r6 = r2.<com.android.server.wm.WindowToken: com.android.server.wm.WindowList windows>;

        $r7 = virtualinvoke $r6.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r3 = (com.android.server.wm.WindowState) $r7;

        r4 = virtualinvoke r3.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r4 == r1 goto label2;

        if r4 != null goto label3;

     label2:
        r3.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent mDisplayContent> = r1;

        i0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int reAddWindowLocked(int,com.android.server.wm.WindowState)>(i0, r3);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return i0;
    }

    void tmpRemoveTaskWindowsLocked(com.android.server.wm.Task)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Task r1;
        com.android.server.wm.AppTokenList r2;
        int i0, $i1;
        java.lang.Object $r3;
        com.android.server.wm.WindowToken $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Task;

        r2 = r1.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        $i1 = virtualinvoke r2.<com.android.server.wm.AppTokenList: int size()>();

        i0 = $i1 - 1;

     label1:
        if i0 < 0 goto label2;

        $r3 = virtualinvoke r2.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i0);

        $r4 = (com.android.server.wm.WindowToken) $r3;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean tmpRemoveAppWindowsLocked(com.android.server.wm.WindowToken)>($r4);

        i0 = i0 + -1;

        goto label1;

     label2:
        return;
    }

    void moveStackWindowsLocked(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        java.util.ArrayList r2;
        int i0, i1, i2, i3, i4, i5, i6;
        com.android.server.wm.AppTokenList r3;
        com.android.server.wm.AppWindowToken r4, $r10;
        boolean $z0;
        com.android.server.wm.InputMonitor $r5, $r6;
        java.lang.Object $r7, $r11, $r12, $r13;
        com.android.server.wm.WindowList $r8;
        com.android.server.wm.Task $r9, $r14;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: java.util.ArrayList getTasks()>();

        i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label01:
        if i1 >= i0 goto label02;

        $r13 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r14 = (com.android.server.wm.Task) $r13;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void tmpRemoveTaskWindowsLocked(com.android.server.wm.Task)>($r14);

        i1 = i1 + 1;

        goto label01;

     label02:
        i6 = 0;

     label03:
        if i6 >= i0 goto label09;

        $r7 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        $r9 = (com.android.server.wm.Task) $r7;

        r3 = $r9.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        i2 = virtualinvoke r3.<com.android.server.wm.AppTokenList: int size()>();

        if i2 != 0 goto label04;

        goto label08;

     label04:
        $r11 = virtualinvoke r3.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(0);

        $r10 = (com.android.server.wm.AppWindowToken) $r11;

        i3 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int findAppWindowInsertionPointLocked(com.android.server.wm.AppWindowToken)>($r10);

        i4 = 0;

     label05:
        if i4 >= i2 goto label08;

        $r12 = virtualinvoke r3.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i4);

        r4 = (com.android.server.wm.AppWindowToken) $r12;

        if r4 == null goto label07;

        i5 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int reAddAppWindowsLocked(com.android.server.wm.DisplayContent,int,com.android.server.wm.WindowToken)>(r1, i3, r4);

        if i5 == i3 goto label06;

        r1.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label06:
        i3 = i5;

     label07:
        i4 = i4 + 1;

        goto label05;

     label08:
        i6 = i6 + 1;

        goto label03;

     label09:
        $z0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(3, 0);

        if $z0 != 0 goto label10;

        $r8 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void assignLayersLocked(com.android.server.wm.WindowList)>($r8);

     label10:
        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r5.<com.android.server.wm.InputMonitor: void setUpdateInputWindowsNeededLw()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r6.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(0);

        return;
    }

    public void moveTaskToTop(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        long l1;
        java.util.HashMap r1, $r8;
        com.android.server.wm.Task r2;
        com.android.server.wm.TaskStack r3, r5;
        com.android.server.wm.DisplayContent r4;
        java.lang.Throwable r6, r7, $r11, $r12;
        android.util.SparseArray $r9;
        java.lang.Object $r10;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r8;

        entermonitor $r8;

     label02:
        $r9 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        $r10 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.Task) $r10;

        if r2 != null goto label04;

        exitmonitor r1;

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label04:
        r3 = r2.<com.android.server.wm.Task: com.android.server.wm.TaskStack mStack>;

        r4 = virtualinvoke r2.<com.android.server.wm.Task: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke r4.<com.android.server.wm.DisplayContent: void moveStack(com.android.server.wm.TaskStack,boolean)>(r3, 1);

        $z0 = r4.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z0 == 0 goto label05;

        r5 = virtualinvoke r4.<com.android.server.wm.DisplayContent: com.android.server.wm.TaskStack getHomeStack()>();

        if r5 == r3 goto label05;

        virtualinvoke r4.<com.android.server.wm.DisplayContent: void moveStack(com.android.server.wm.TaskStack,boolean)>(r5, 0);

     label05:
        virtualinvoke r3.<com.android.server.wm.TaskStack: void moveTaskToTop(com.android.server.wm.Task)>(r2);

        exitmonitor r1;

     label06:
        goto label09;

     label07:
        $r11 := @caughtexception;

        r6 = $r11;

        exitmonitor r1;

     label08:
        throw r6;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label12;

     label10:
        $r12 := @caughtexception;

        r7 = $r12;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r7;

     label12:
        return;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label03 with label10;
        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void moveTaskToBottom(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        long l1;
        java.util.HashMap r1, $r6;
        com.android.server.wm.Task r2;
        com.android.server.wm.TaskStack r3;
        java.lang.Throwable r4, r5, $r15, $r16;
        android.util.SparseArray $r7;
        java.lang.Object $r8;
        com.android.server.wm.DisplayContent $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13;
        java.lang.String $r14;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r6;

        entermonitor $r6;

     label02:
        $r7 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.Task) $r8;

        if r2 != null goto label04;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("moveTaskToBottom: taskId=");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found in mTaskIdToTask");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", $r14);

        exitmonitor r1;

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label04:
        r3 = r2.<com.android.server.wm.Task: com.android.server.wm.TaskStack mStack>;

        virtualinvoke r3.<com.android.server.wm.TaskStack: void moveTaskToBottom(com.android.server.wm.Task)>(r2);

        $r9 = virtualinvoke r3.<com.android.server.wm.TaskStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void moveStackWindowsLocked(com.android.server.wm.DisplayContent)>($r9);

        exitmonitor r1;

     label05:
        goto label08;

     label06:
        $r15 := @caughtexception;

        r4 = $r15;

        exitmonitor r1;

     label07:
        throw r4;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label11;

     label09:
        $r16 := @caughtexception;

        r5 = $r16;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r5;

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void attachStack(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i3, $i4;
        long l2;
        java.util.HashMap r1, $r7;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.TaskStack r3, $r13;
        com.android.server.wm.WindowList r4;
        java.lang.Throwable r5, r6, $r15, $r17;
        android.util.SparseArray $r8, $r10, $r16;
        java.lang.Object $r9, $r11, $r12;
        com.android.server.wm.WindowState $r14;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r7;

        entermonitor $r7;

     label02:
        $r8 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.wm.DisplayContent) $r9;

        if r2 == null goto label05;

        $r10 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.wm.TaskStack) $r11;

        if r3 != null goto label03;

        $r13 = new com.android.server.wm.TaskStack;

        specialinvoke $r13.<com.android.server.wm.TaskStack: void <init>(com.android.server.wm.WindowManagerService,int)>(r0, i0);

        r3 = $r13;

        $r16 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r3);

     label03:
        virtualinvoke r3.<com.android.server.wm.TaskStack: void attachDisplayContent(com.android.server.wm.DisplayContent)>(r2);

        virtualinvoke r2.<com.android.server.wm.DisplayContent: void attachStack(com.android.server.wm.TaskStack)>(r3);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void moveStackWindowsLocked(com.android.server.wm.DisplayContent)>(r2);

        r4 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        $i4 = virtualinvoke r4.<com.android.server.wm.WindowList: int size()>();

        i3 = $i4 - 1;

     label04:
        if i3 < 0 goto label05;

        $r12 = virtualinvoke r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        $r14 = (com.android.server.wm.WindowState) $r12;

        virtualinvoke $r14.<com.android.server.wm.WindowState: void reportResized()>();

        i3 = i3 + -1;

        goto label04;

     label05:
        exitmonitor r1;

     label06:
        goto label09;

     label07:
        $r15 := @caughtexception;

        r5 = $r15;

        exitmonitor r1;

     label08:
        throw r5;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        goto label12;

     label10:
        $r17 := @caughtexception;

        r6 = $r17;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r6;

     label12:
        return;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    void detachStackLocked(com.android.server.wm.DisplayContent, com.android.server.wm.TaskStack)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.TaskStack r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        r2 := @parameter1: com.android.server.wm.TaskStack;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void detachStack(com.android.server.wm.TaskStack)>(r2);

        virtualinvoke r2.<com.android.server.wm.TaskStack: void detachDisplay()>();

        return;
    }

    public void detachStack(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        java.util.HashMap r1, $r5;
        com.android.server.wm.TaskStack r2;
        com.android.server.wm.DisplayContent r3;
        java.lang.Throwable r4, $r8;
        android.util.SparseArray $r6;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.TaskStack) $r7;

        if r2 == null goto label4;

        r3 = virtualinvoke r2.<com.android.server.wm.TaskStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r3 == null goto label4;

        $z0 = virtualinvoke r2.<com.android.server.wm.TaskStack: boolean isAnimating()>();

        if $z0 == 0 goto label3;

        r2.<com.android.server.wm.TaskStack: boolean mDeferDetach> = 1;

        exitmonitor r1;

     label2:
        return;

     label3:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void detachStackLocked(com.android.server.wm.DisplayContent,com.android.server.wm.TaskStack)>(r3, r2);

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r1;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void removeStack(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        android.util.SparseArray $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        virtualinvoke $r1.<android.util.SparseArray: void remove(int)>(i0);

        return;
    }

    void removeTaskLocked(com.android.server.wm.Task)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Task r1;
        int i0, $i2;
        com.android.server.wm.TaskStack r2, $r5;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        android.util.SparseArray $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Task;

        i0 = r1.<com.android.server.wm.Task: int taskId>;

        r2 = r1.<com.android.server.wm.Task: com.android.server.wm.TaskStack mStack>;

        $z0 = virtualinvoke r2.<com.android.server.wm.TaskStack: boolean isAnimating()>();

        if $z0 == 0 goto label1;

        r1.<com.android.server.wm.Task: boolean mDeferRemoval> = 1;

        return;

     label1:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        $r3[1] = "removeTask";

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(31003, $r3);

        r1.<com.android.server.wm.Task: boolean mDeferRemoval> = 0;

        $r5 = r1.<com.android.server.wm.Task: com.android.server.wm.TaskStack mStack>;

        virtualinvoke $r5.<com.android.server.wm.TaskStack: void removeTask(com.android.server.wm.Task)>(r1);

        $r6 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        $i2 = r1.<com.android.server.wm.Task: int taskId>;

        virtualinvoke $r6.<android.util.SparseArray: void delete(int)>($i2);

        return;
    }

    public void removeTask(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        java.util.HashMap r1, $r4;
        com.android.server.wm.Task r2;
        java.lang.Throwable r3, $r7;
        android.util.SparseArray $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.Task) $r6;

        if r2 != null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void removeTaskLocked(com.android.server.wm.Task)>(r2);

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void addTask(int, int, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        boolean z0;
        java.util.HashMap r1, $r6;
        com.android.server.wm.Task r2;
        com.android.server.wm.TaskStack r3;
        com.android.server.wm.DisplayContent r4;
        java.lang.Throwable r5, $r11;
        android.util.SparseArray $r7, $r9;
        java.lang.Object $r8, $r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mTaskIdToTask>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.Task) $r8;

        if r2 != null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r9 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        $r10 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.wm.TaskStack) $r10;

        virtualinvoke r3.<com.android.server.wm.TaskStack: void addTask(com.android.server.wm.Task,boolean)>(r2, z0);

        r4 = virtualinvoke r3.<com.android.server.wm.TaskStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        r4.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r1;

     label6:
        throw r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void resizeStack(int, android.graphics.Rect)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        android.graphics.Rect r1;
        java.util.HashMap r2, $r5;
        com.android.server.wm.TaskStack r3;
        java.lang.Throwable r4, $r15;
        android.util.SparseArray $r6;
        java.lang.Object $r7;
        boolean $z0;
        com.android.server.wm.DisplayContent $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r14;
        java.lang.String $r13;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.wm.TaskStack) $r7;

        if r3 != null goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resizeStack: stackId ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label2:
        $z0 = virtualinvoke r3.<com.android.server.wm.TaskStack: boolean setBounds(android.graphics.Rect)>(r1);

        if $z0 == 0 goto label3;

        virtualinvoke r3.<com.android.server.wm.TaskStack: void resizeWindows()>();

        $r8 = virtualinvoke r3.<com.android.server.wm.TaskStack: com.android.server.wm.DisplayContent getDisplayContent()>();

        $r8.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r15 := @caughtexception;

        r4 = $r15;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void getStackBounds(int, android.graphics.Rect)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        android.graphics.Rect r1;
        com.android.server.wm.TaskStack r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wm.TaskStack) $r4;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.wm.TaskStack: void getBounds(android.graphics.Rect)>(r1);

        return;

     label1:
        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

        return;
    }

    public void startFreezingScreen(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        java.util.HashMap r1, $r4;
        long l2;
        java.lang.Throwable r2, r3, $r7, $r9;
        boolean $z0, $z1;
        com.android.server.wm.WindowManagerService$H $r5, $r6;
        java.lang.SecurityException $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.FREEZE_SCREEN", "startFreezingScreen()");

        if $z0 != 0 goto label01;

        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires FREEZE_SCREEN permission");

        throw $r8;

     label01:
        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r4;

        entermonitor $r4;

     label02:
        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen>;

        if $z1 != 0 goto label07;

        r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen> = 1;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void startFreezingDisplayLocked(boolean,int,int)>(0, i0, i1);

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(30);

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r6.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(30, 5000L);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        goto label07;

     label05:
        $r7 := @caughtexception;

        r2 = $r7;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r2;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r1;

     label10:
        throw r3;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void stopFreezingScreen()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r4;
        long l0;
        java.lang.Throwable r2, r3, $r6, $r7;
        boolean $z0, $z1;
        java.lang.SecurityException $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.FREEZE_SCREEN", "stopFreezingScreen()");

        if $z0 != 0 goto label01;

        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires FREEZE_SCREEN permission");

        throw $r5;

     label01:
        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r4;

        entermonitor $r4;

     label02:
        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen>;

        if $z1 == 0 goto label07;

        r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen> = 0;

        r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource> = "client";

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void stopFreezingDisplayLocked()>();

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label07;

     label05:
        $r6 := @caughtexception;

        r2 = $r6;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label10:
        throw r3;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void disableKeyguard(android.os.IBinder, java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        java.lang.String r2;
        android.content.Context $r3;
        int $i0;
        android.util.Pair $r4;
        com.android.server.wm.KeyguardDisableHandler $r5, $r6;
        android.os.Message $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.SecurityException $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DISABLE_KEYGUARD");

        if $i0 == 0 goto label1;

        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires DISABLE_KEYGUARD permission");

        throw $r9;

     label1:
        if r1 != null goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("token == null");

        throw $r8;

     label2:
        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.KeyguardDisableHandler mKeyguardDisableHandler>;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.KeyguardDisableHandler mKeyguardDisableHandler>;

        $r4 = new android.util.Pair;

        specialinvoke $r4.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r1, r2);

        $r7 = virtualinvoke $r6.<com.android.server.wm.KeyguardDisableHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r4);

        virtualinvoke $r5.<com.android.server.wm.KeyguardDisableHandler: boolean sendMessage(android.os.Message)>($r7);

        return;
    }

    public void reenableKeyguard(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        android.content.Context $r2;
        int $i0;
        com.android.server.wm.KeyguardDisableHandler $r3, $r4;
        android.os.Message $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.SecurityException $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DISABLE_KEYGUARD");

        if $i0 == 0 goto label1;

        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires DISABLE_KEYGUARD permission");

        throw $r7;

     label1:
        if r1 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("token == null");

        throw $r6;

     label2:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.KeyguardDisableHandler mKeyguardDisableHandler>;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.KeyguardDisableHandler mKeyguardDisableHandler>;

        $r5 = virtualinvoke $r3.<com.android.server.wm.KeyguardDisableHandler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r1);

        virtualinvoke $r4.<com.android.server.wm.KeyguardDisableHandler: boolean sendMessage(android.os.Message)>($r5);

        return;
    }

    public void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IOnKeyguardExitResult r1;
        android.content.Context $r2;
        int $i0;
        com.android.server.wm.WindowManagerService$6 $r3;
        android.view.WindowManagerPolicy $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.IOnKeyguardExitResult;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DISABLE_KEYGUARD");

        if $i0 == 0 goto label1;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires DISABLE_KEYGUARD permission");

        throw $r6;

     label1:
        if r1 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback == null");

        throw $r5;

     label2:
        $r4 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r3 = new com.android.server.wm.WindowManagerService$6;

        specialinvoke $r3.<com.android.server.wm.WindowManagerService$6: void <init>(com.android.server.wm.WindowManagerService,android.view.IOnKeyguardExitResult)>(r0, r1);

        interfaceinvoke $r4.<android.view.WindowManagerPolicy: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)>($r3);

        return;
    }

    public boolean inKeyguardRestrictedInputMode()
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.WindowManagerPolicy $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy: boolean inKeyguardRestrictedKeyInputMode()>();

        return $z0;
    }

    public boolean isKeyguardLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.WindowManagerPolicy $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy: boolean isKeyguardLocked()>();

        return $z0;
    }

    public boolean isKeyguardSecure()
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.WindowManagerPolicy $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy: boolean isKeyguardSecure()>();

        return $z0;
    }

    public void dismissKeyguard()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r4;
        java.lang.Throwable r2, $r7;
        android.content.Context $r3;
        int $i0;
        android.view.WindowManagerPolicy $r5;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DISABLE_KEYGUARD");

        if $i0 == 0 goto label1;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires DISABLE_KEYGUARD permission");

        throw $r6;

     label1:
        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r5.<android.view.WindowManagerPolicy: void dismissKeyguardLw()>();

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void keyguardGoingAway(boolean, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1;
        java.util.HashMap r1, $r4;
        java.lang.Throwable r2, $r9;
        android.content.Context $r3;
        int $i0;
        com.android.server.wm.WindowAnimator $r5, $r6, $r7;
        java.lang.SecurityException $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DISABLE_KEYGUARD");

        if $i0 == 0 goto label1;

        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires DISABLE_KEYGUARD permission");

        throw $r8;

     label1:
        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r5.<com.android.server.wm.WindowAnimator: boolean mKeyguardGoingAway> = 1;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r6.<com.android.server.wm.WindowAnimator: boolean mKeyguardGoingAwayToNotificationShade> = z1;

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r7.<com.android.server.wm.WindowAnimator: boolean mKeyguardGoingAwayDisableWindowAnimations> = z0;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void requestTraversalLocked()>();

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void keyguardWaitingForActivityDrawn()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<com.android.server.wm.WindowManagerService: boolean mKeyguardWaitingForActivityDrawn> = 1;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void notifyActivityDrawnForKeyguard()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r5;
        boolean $z0;
        android.view.WindowManagerPolicy $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mKeyguardWaitingForActivityDrawn>;

        if $z0 == 0 goto label2;

        $r4 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r4.<android.view.WindowManagerPolicy: void notifyActivityDrawnForKeyguardLw()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mKeyguardWaitingForActivityDrawn> = 0;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void showGlobalActions()
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.WindowManagerPolicy $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r1.<android.view.WindowManagerPolicy: void showGlobalActions()>();

        return;
    }

    public void closeSystemDialogs(java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.String r1;
        java.util.HashMap r2, $r7;
        int i0, i1, i2, i3;
        com.android.server.wm.WindowList r3;
        com.android.server.wm.WindowState r4;
        java.lang.Throwable r6, $r13;
        android.util.SparseArray $r8, $r9;
        com.android.server.wm.DisplayContent $r10;
        java.lang.Object $r11, $r12;
        boolean $z0;
        android.view.IWindow $r14;
        android.os.RemoteException $r15;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.lang.String;

        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i0 = virtualinvoke $r8.<android.util.SparseArray: int size()>();

        i1 = 0;

     label02:
        if i1 >= i0 goto label09;

        $r9 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r11 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r10 = (com.android.server.wm.DisplayContent) $r11;

        r3 = virtualinvoke $r10.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        i2 = virtualinvoke r3.<com.android.server.wm.WindowList: int size()>();

        i3 = 0;

     label03:
        if i3 >= i2 goto label08;

        $r12 = virtualinvoke r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        r4 = (com.android.server.wm.WindowState) $r12;

        $z0 = r4.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z0 == 0 goto label07;

     label04:
        $r14 = r4.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r14.<android.view.IWindow: void closeSystemDialogs(java.lang.String)>(r1);

     label05:
        goto label07;

     label06:
        $r15 := @caughtexception;

     label07:
        i3 = i3 + 1;

        goto label03;

     label08:
        i1 = i1 + 1;

        goto label02;

     label09:
        exitmonitor r2;

     label10:
        goto label13;

     label11:
        $r13 := @caughtexception;

        r6 = $r13;

        exitmonitor r2;

     label12:
        throw r6;

     label13:
        return;

        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    static float fixScale(float)
    {
        float f0, $f1;
        byte $b0, $b1;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        f0 = 0.0F;

        goto label2;

     label1:
        $b1 = f0 cmpl 20.0F;

        if $b1 <= 0 goto label2;

        f0 = 20.0F;

     label2:
        $f1 = staticinvoke <java.lang.Math: float abs(float)>(f0);

        return $f1;
    }

    public void setAnimationScale(int, float)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        float f0, f1;
        boolean $z0;
        com.android.server.wm.WindowManagerService$H $r1;
        java.lang.SecurityException $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ANIMATION_SCALE", "setAnimationScale()");

        if $z0 != 0 goto label1;

        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_ANIMATION_SCALE permission");

        throw $r2;

     label1:
        f1 = staticinvoke <com.android.server.wm.WindowManagerService: float fixScale(float)>(f0);

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            default: goto label5;
        };

     label2:
        r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting> = f1;

        goto label5;

     label3:
        r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting> = f1;

        goto label5;

     label4:
        r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting> = f1;

     label5:
        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(14);

        return;
    }

    public void setAnimationScales(float[])
    {
        com.android.server.wm.WindowManagerService r0;
        float[] r1;
        boolean $z0;
        com.android.server.wm.WindowManagerService$H $r2;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        java.lang.SecurityException $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: float[];

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ANIMATION_SCALE", "setAnimationScale()");

        if $z0 != 0 goto label1;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_ANIMATION_SCALE permission");

        throw $r3;

     label1:
        if r1 == null goto label4;

        $i0 = lengthof r1;

        if $i0 < 1 goto label2;

        $f4 = r1[0];

        $f5 = staticinvoke <com.android.server.wm.WindowManagerService: float fixScale(float)>($f4);

        r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting> = $f5;

     label2:
        $i1 = lengthof r1;

        if $i1 < 2 goto label3;

        $f2 = r1[1];

        $f3 = staticinvoke <com.android.server.wm.WindowManagerService: float fixScale(float)>($f2);

        r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting> = $f3;

     label3:
        $i2 = lengthof r1;

        if $i2 < 3 goto label4;

        $f0 = r1[2];

        $f1 = staticinvoke <com.android.server.wm.WindowManagerService: float fixScale(float)>($f0);

        r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting> = $f1;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dispatchNewAnimatorScaleLocked(com.android.server.wm.Session)>(null);

     label4:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(14);

        return;
    }

    private void setAnimatorDurationScale(float)
    {
        com.android.server.wm.WindowManagerService r0;
        float f0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        f0 := @parameter0: float;

        r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting> = f0;

        staticinvoke <android.animation.ValueAnimator: void setDurationScale(float)>(f0);

        return;
    }

    public float getWindowAnimationScaleLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;
        float $f0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mAnimationsDisabled>;

        if $z0 == 0 goto label1;

        $f0 = 0.0F;

        goto label2;

     label1:
        $f0 = r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting>;

     label2:
        return $f0;
    }

    public float getTransitionAnimationScaleLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;
        float $f0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mAnimationsDisabled>;

        if $z0 == 0 goto label1;

        $f0 = 0.0F;

        goto label2;

     label1:
        $f0 = r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting>;

     label2:
        return $f0;
    }

    public float getAnimationScale(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        float $f0, $f1, $f2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $f0 = r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting>;

        return $f0;

     label2:
        $f2 = r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting>;

        return $f2;

     label3:
        $f1 = r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting>;

        return $f1;

     label4:
        return 0.0F;
    }

    public float[] getAnimationScales()
    {
        com.android.server.wm.WindowManagerService r0;
        float[] $r1;
        float $f0, $f1, $f2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = newarray (float)[3];

        $f0 = r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting>;

        $r1[0] = $f0;

        $f1 = r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting>;

        $r1[1] = $f1;

        $f2 = r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting>;

        $r1[2] = $f2;

        return $r1;
    }

    public float getCurrentAnimatorScale()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;
        float $f0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mAnimationsDisabled>;

        if $z0 == 0 goto label2;

        $f0 = 0.0F;

        goto label3;

     label2:
        $f0 = r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting>;

     label3:
        exitmonitor r1;

     label4:
        return $f0;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void dispatchNewAnimatorScaleLocked(com.android.server.wm.Session)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1;
        com.android.server.wm.WindowManagerService$H $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r3 = virtualinvoke $r2.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(34, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void registerPointerEventListener(android.view.WindowManagerPolicy$PointerEventListener)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.WindowManagerPolicy$PointerEventListener r1;
        com.android.server.wm.PointerEventDispatcher $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.WindowManagerPolicy$PointerEventListener;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.PointerEventDispatcher mPointerEventDispatcher>;

        virtualinvoke $r2.<com.android.server.wm.PointerEventDispatcher: void registerInputEventListener(android.view.WindowManagerPolicy$PointerEventListener)>(r1);

        return;
    }

    public void unregisterPointerEventListener(android.view.WindowManagerPolicy$PointerEventListener)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.WindowManagerPolicy$PointerEventListener r1;
        com.android.server.wm.PointerEventDispatcher $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.WindowManagerPolicy$PointerEventListener;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.PointerEventDispatcher mPointerEventDispatcher>;

        virtualinvoke $r2.<com.android.server.wm.PointerEventDispatcher: void unregisterInputEventListener(android.view.WindowManagerPolicy$PointerEventListener)>(r1);

        return;
    }

    public int getLidState()
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.input.InputManagerService $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i0 = virtualinvoke $r1.<com.android.server.input.InputManagerService: int getSwitchState(int,int,int)>(-1, -256, 0);

        if i0 <= 0 goto label1;

        return 0;

     label1:
        if i0 != 0 goto label2;

        return 1;

     label2:
        return -1;
    }

    public int getCameraLensCoverState()
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.input.InputManagerService $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i0 = virtualinvoke $r1.<com.android.server.input.InputManagerService: int getSwitchState(int,int,int)>(-1, -256, 9);

        if i0 <= 0 goto label1;

        return 1;

     label1:
        if i0 != 0 goto label2;

        return 0;

     label2:
        return -1;
    }

    public void switchKeyboardLayout(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        com.android.server.input.InputManagerService $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        virtualinvoke $r1.<com.android.server.input.InputManagerService: void switchKeyboardLayout(int,int)>(i0, i1);

        return;
    }

    public void shutdown(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        android.content.Context $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        staticinvoke <com.android.server.power.ShutdownThread: void shutdown(android.content.Context,boolean)>($r1, z0);

        return;
    }

    public void rebootSafeMode(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        android.content.Context $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        staticinvoke <com.android.server.power.ShutdownThread: void rebootSafeMode(android.content.Context,boolean)>($r1, z0);

        return;
    }

    public void setCurrentProfileIds(int[])
    {
        com.android.server.wm.WindowManagerService r0;
        int[] r1;
        java.util.HashMap r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: int[];

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        r0.<com.android.server.wm.WindowManagerService: int[] mCurrentProfileIds> = r1;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setCurrentUser(int, int[])
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2;
        int[] r1;
        java.util.HashMap r2, $r5;
        com.android.server.wm.DisplayContent r3;
        java.lang.Throwable r4, $r11;
        com.android.server.wm.AppTransition $r6;
        android.view.WindowManagerPolicy $r7;
        android.util.SparseArray $r8, $r9;
        java.lang.Object $r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        r0.<com.android.server.wm.WindowManagerService: int mCurrentUserId> = i0;

        r0.<com.android.server.wm.WindowManagerService: int[] mCurrentProfileIds> = r1;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r6.<com.android.server.wm.AppTransition: void setCurrentUser(int)>(i0);

        $r7 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r7.<android.view.WindowManagerPolicy: void setCurrentUserLw(int)>(i0);

        $r8 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i1 = virtualinvoke $r8.<android.util.SparseArray: int size()>();

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r9 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r10 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r3 = (com.android.server.wm.DisplayContent) $r10;

        virtualinvoke r3.<com.android.server.wm.DisplayContent: void switchUserStacks(int)>(i0);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void rebuildAppWindowListLocked(com.android.server.wm.DisplayContent)>(r3);

        i2 = i2 + 1;

        goto label2;

     label3:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    boolean isCurrentProfileLocked(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, $i2, $i3, $i4;
        int[] $r1, $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $i2 = r0.<com.android.server.wm.WindowManagerService: int mCurrentUserId>;

        if i0 != $i2 goto label1;

        return 1;

     label1:
        i1 = 0;

     label2:
        $r1 = r0.<com.android.server.wm.WindowManagerService: int[] mCurrentProfileIds>;

        $i3 = lengthof $r1;

        if i1 >= $i3 goto label4;

        $r2 = r0.<com.android.server.wm.WindowManagerService: int[] mCurrentProfileIds>;

        $i4 = $r2[i1];

        if $i4 != i0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public void enableScreenAfterBoot()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r6;
        boolean $z0;
        com.android.server.wm.WindowManagerService$H $r4;
        android.view.WindowManagerPolicy $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted> = 1;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void hideBootMessagesLocked()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(23, 30000L);

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        $r5 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r5.<android.view.WindowManagerPolicy: void systemBooted()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void performEnableScreen()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void enableScreenIfNeeded()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void enableScreenIfNeededLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void enableScreenIfNeededLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0, $z1, $z3;
        com.android.server.wm.WindowManagerService$H $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        if $z1 != 0 goto label2;

        $z3 = r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        if $z3 != 0 goto label2;

        return;

     label2:
        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(16);

        return;
    }

    public void performBootTimeout()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "***** BOOT TIMEOUT: forcing display enabled");

        r0.<com.android.server.wm.WindowManagerService: boolean mForceDisplayEnabled> = 1;

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void performEnableScreen()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean checkWaitingForWindowsLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        com.android.server.wm.WindowList r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        com.android.server.wm.WindowState r2;
        android.content.Context $r3;
        android.content.res.Resources $r4;
        java.lang.Object $r5;
        android.view.WindowManager$LayoutParams $r6, $r7, $r8, $r9;
        android.view.WindowManagerPolicy $r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 = 0;

        z1 = 0;

        z2 = 0;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $z5 = virtualinvoke $r4.<android.content.res.Resources: boolean getBoolean(int)>(17956920);

        if $z5 == 0 goto label01;

        $z12 = r0.<com.android.server.wm.WindowManagerService: boolean mOnlyCore>;

        if $z12 != 0 goto label01;

        $z13 = 1;

        goto label02;

     label01:
        $z13 = 0;

     label02:
        z3 = $z13;

        z4 = 1;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()>();

        i0 = virtualinvoke r1.<com.android.server.wm.WindowList: int size()>();

        i1 = 0;

     label03:
        if i1 >= i0 goto label09;

        $r5 = virtualinvoke r1.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.wm.WindowState) $r5;

        $z9 = virtualinvoke r2.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z9 == 0 goto label04;

        $z11 = r2.<com.android.server.wm.WindowState: boolean mObscured>;

        if $z11 != 0 goto label04;

        $z10 = virtualinvoke r2.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z10 != 0 goto label04;

        return 1;

     label04:
        $z8 = virtualinvoke r2.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z8 == 0 goto label08;

        $r6 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r6.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 != 2021 goto label05;

        z0 = 1;

        goto label08;

     label05:
        $r7 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i3 = $r7.<android.view.WindowManager$LayoutParams: int type>;

        if $i3 != 2 goto label06;

        z1 = 1;

        goto label08;

     label06:
        $r8 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i4 = $r8.<android.view.WindowManager$LayoutParams: int type>;

        if $i4 != 2013 goto label07;

        z2 = 1;

        goto label08;

     label07:
        $r9 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i5 = $r9.<android.view.WindowManager$LayoutParams: int type>;

        if $i5 != 2000 goto label08;

        $r10 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        z4 = interfaceinvoke $r10.<android.view.WindowManagerPolicy: boolean isKeyguardDrawnLw()>();

     label08:
        i1 = i1 + 1;

        goto label03;

     label09:
        $z6 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        if $z6 != 0 goto label10;

        if z0 != 0 goto label10;

        return 1;

     label10:
        $z7 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        if $z7 == 0 goto label13;

        if z1 != 0 goto label11;

        if z4 == 0 goto label12;

     label11:
        if z3 == 0 goto label13;

        if z2 != 0 goto label13;

     label12:
        return 1;

     label13:
        return 0;
    }

    public void performEnableScreen()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r5;
        android.os.IBinder r2;
        android.os.Parcel r3;
        java.lang.Throwable r4, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9;
        com.android.server.wm.InputMonitor $r6;
        android.app.IActivityManager $r7;
        android.view.WindowManagerPolicy $r8;
        android.os.RemoteException $r9, $r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        if $z1 != 0 goto label05;

        $z9 = r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        if $z9 != 0 goto label05;

        exitmonitor r1;

     label04:
        return;

     label05:
        $z2 = r0.<com.android.server.wm.WindowManagerService: boolean mForceDisplayEnabled>;

        if $z2 != 0 goto label07;

        $z7 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkWaitingForWindowsLocked()>();

        if $z7 == 0 goto label07;

        exitmonitor r1;

     label06:
        return;

     label07:
        $z3 = r0.<com.android.server.wm.WindowManagerService: boolean mBootAnimationStopped>;

        if $z3 != 0 goto label12;

     label08:
        r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("SurfaceFlinger");

        if r2 == null goto label09;

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r3.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.ui.ISurfaceComposer");

        interfaceinvoke r2.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, r3, null, 0);

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "Boot completed: SurfaceFlinger is dead!");

     label11:
        r0.<com.android.server.wm.WindowManagerService: boolean mBootAnimationStopped> = 1;

     label12:
        $z4 = r0.<com.android.server.wm.WindowManagerService: boolean mForceDisplayEnabled>;

        if $z4 != 0 goto label14;

        $z6 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkBootAnimationCompleteLocked()>();

        if $z6 != 0 goto label14;

        exitmonitor r1;

     label13:
        return;

     label14:
        r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled> = 1;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        $z5 = r0.<com.android.server.wm.WindowManagerService: boolean mEventDispatchingEnabled>;

        virtualinvoke $r6.<com.android.server.wm.InputMonitor: void setEventDispatchingLw(boolean)>($z5);

        exitmonitor r1;

     label15:
        goto label18;

     label16:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r1;

     label17:
        throw r4;

     label18:
        $r7 = r0.<com.android.server.wm.WindowManagerService: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r7.<android.app.IActivityManager: void bootAnimationComplete()>();

     label19:
        goto label21;

     label20:
        $r10 := @caughtexception;

     label21:
        $r8 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r8.<android.view.WindowManagerPolicy: void enableScreenAfterBoot()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void updateRotationUnchecked(boolean,boolean)>(0, 0);

        return;

        catch android.os.RemoteException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch android.os.RemoteException from label18 to label19 with label20;
    }

    private boolean checkBootAnimationCompleteLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;
        com.android.server.wm.WindowManagerService$H $r1, $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = staticinvoke <android.os.SystemService: boolean isRunning(java.lang.String)>("bootanim");

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(37);

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(37, 200L);

        return 0;

     label1:
        return 1;
    }

    public void showBootMessage(java.lang.CharSequence, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.CharSequence r1;
        boolean z0, z1, $z2, $z3, $z4;
        java.util.HashMap r2, $r4;
        java.lang.Throwable r3, $r6;
        android.view.WindowManagerPolicy $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.lang.CharSequence;

        z0 := @parameter1: boolean;

        z1 = 0;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        $z2 = r0.<com.android.server.wm.WindowManagerService: boolean mAllowBootMessages>;

        if $z2 != 0 goto label03;

        exitmonitor r2;

     label02:
        return;

     label03:
        $z3 = r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        if $z3 != 0 goto label06;

        if z0 != 0 goto label05;

        exitmonitor r2;

     label04:
        return;

     label05:
        z1 = 1;

     label06:
        $z4 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        if $z4 == 0 goto label08;

        exitmonitor r2;

     label07:
        return;

     label08:
        r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages> = 1;

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r5.<android.view.WindowManagerPolicy: void showBootMessage(java.lang.CharSequence,boolean)>(r1, z0);

        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label11:
        throw r3;

     label12:
        if z1 == 0 goto label13;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void performEnableScreen()>();

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void hideBootMessagesLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;
        android.view.WindowManagerPolicy $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.wm.WindowManagerService: boolean mShowingBootMessages> = 0;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r1.<android.view.WindowManagerPolicy: void hideBootMessages()>();

     label1:
        return;
    }

    public void setInTouchMode(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<com.android.server.wm.WindowManagerService: boolean mInTouchMode> = z0;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void showCircularDisplayMaskIfNeeded()
    {
        com.android.server.wm.WindowManagerService r0;
        android.content.Context $r1, $r3;
        android.content.res.Resources $r2, $r4;
        boolean $z0, $z1;
        com.android.server.wm.WindowManagerService$H $r5, $r6;
        android.os.Message $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17956972);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r4.<android.content.res.Resources: boolean getBoolean(int)>(17956974);

        if $z1 == 0 goto label1;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r7 = virtualinvoke $r5.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int)>(35);

        virtualinvoke $r6.<com.android.server.wm.WindowManagerService$H: boolean sendMessage(android.os.Message)>($r7);

     label1:
        return;
    }

    public void showEmulatorDisplayOverlayIfNeeded()
    {
        com.android.server.wm.WindowManagerService r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0, $z1, $z2;
        java.lang.String $r3;
        com.android.server.wm.WindowManagerService$H $r4, $r5;
        android.os.Message $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17956975);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.emulator.circular", 0);

        if $z1 == 0 goto label1;

        $r3 = <android.os.Build: java.lang.String HARDWARE>;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("goldfish");

        if $z2 == 0 goto label1;

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r6 = virtualinvoke $r4.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int)>(36);

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService$H: boolean sendMessage(android.os.Message)>($r6);

     label1:
        return;
    }

    public void showCircularMask()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r4;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r2, r3, $r14, $r15;
        com.android.server.wm.CircularDisplayMask $r5, $r6, $r9;
        android.content.Context $r7;
        android.content.res.Resources $r8;
        com.android.server.wm.DisplayContent $r10;
        android.view.Display $r11;
        android.view.WindowManagerPolicy $r12;
        android.view.SurfaceSession $r13;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

     label02:
        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.CircularDisplayMask mCircularDisplayMask>;

        if $r5 != null goto label03;

        $r7 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();

        i0 = virtualinvoke $r8.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105048);

        $r9 = new com.android.server.wm.CircularDisplayMask;

        $r10 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r11 = virtualinvoke $r10.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $r13 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceSession mFxSession>;

        $r12 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i1 = interfaceinvoke $r12.<android.view.WindowManagerPolicy: int windowTypeToLayerLw(int)>(2018);

        $i3 = $i1 * 10000;

        $i2 = $i3 + 10;

        specialinvoke $r9.<com.android.server.wm.CircularDisplayMask: void <init>(android.view.Display,android.view.SurfaceSession,int,int)>($r11, $r13, $i2, i0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.CircularDisplayMask mCircularDisplayMask> = $r9;

     label03:
        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.CircularDisplayMask mCircularDisplayMask>;

        virtualinvoke $r6.<com.android.server.wm.CircularDisplayMask: void setVisibility(boolean)>(1);

     label04:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        goto label07;

     label05:
        $r15 := @caughtexception;

        r2 = $r15;

     label06:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        throw r2;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r14 := @caughtexception;

        r3 = $r14;

        exitmonitor r1;

     label10:
        throw r3;

     label11:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void showEmulatorDisplayOverlay()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r4;
        java.lang.Throwable r2, r3, $r13, $r14;
        com.android.server.wm.EmulatorDisplayOverlay $r5, $r6, $r7;
        android.content.Context $r8;
        com.android.server.wm.DisplayContent $r9;
        android.view.Display $r10;
        android.view.WindowManagerPolicy $r11;
        android.view.SurfaceSession $r12;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

     label02:
        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmulatorDisplayOverlay mEmulatorDisplayOverlay>;

        if $r5 != null goto label03;

        $r7 = new com.android.server.wm.EmulatorDisplayOverlay;

        $r8 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r9 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r10 = virtualinvoke $r9.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $r12 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceSession mFxSession>;

        $r11 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i0 = interfaceinvoke $r11.<android.view.WindowManagerPolicy: int windowTypeToLayerLw(int)>(2018);

        $i1 = $i0 * 10000;

        $i2 = $i1 + 10;

        specialinvoke $r7.<com.android.server.wm.EmulatorDisplayOverlay: void <init>(android.content.Context,android.view.Display,android.view.SurfaceSession,int)>($r8, $r10, $r12, $i2);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmulatorDisplayOverlay mEmulatorDisplayOverlay> = $r7;

     label03:
        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmulatorDisplayOverlay mEmulatorDisplayOverlay>;

        virtualinvoke $r6.<com.android.server.wm.EmulatorDisplayOverlay: void setVisibility(boolean)>(1);

     label04:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        goto label07;

     label05:
        $r13 := @caughtexception;

        r2 = $r13;

     label06:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        throw r2;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r14 := @caughtexception;

        r3 = $r14;

        exitmonitor r1;

     label10:
        throw r3;

     label11:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void showStrictModeViolation(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        int i0;
        com.android.server.wm.WindowManagerService$H $r1, $r2;
        android.os.Message $r3;
        byte $b1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        if z0 == 0 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        $r3 = virtualinvoke $r1.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,int,int)>(25, $b1, i0);

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService$H: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    private void showStrictModeViolation(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3, i4, i5, $i6;
        boolean z0, z1, $z2, $z3;
        java.util.HashMap r1, $r6;
        com.android.server.wm.WindowList r2;
        com.android.server.wm.WindowState r3;
        java.lang.Throwable r4, r5, $r19, $r20;
        com.android.server.wm.StrictModeFlash $r7, $r8, $r10;
        com.android.server.wm.DisplayContent $r9, $r15;
        android.view.SurfaceSession $r11;
        android.view.Display $r12;
        android.util.SparseArray $r13, $r14;
        java.lang.Object $r16, $r18;
        com.android.server.wm.Session $r17;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z0 = $z2;

        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r6;

        entermonitor $r6;

     label03:
        if z0 == 0 goto label10;

        z1 = 0;

        $r13 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i2 = virtualinvoke $r13.<android.util.SparseArray: int size()>();

        i3 = 0;

     label04:
        if i3 >= i2 goto label08;

        $r14 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r16 = virtualinvoke $r14.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        $r15 = (com.android.server.wm.DisplayContent) $r16;

        r2 = virtualinvoke $r15.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        i4 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        i5 = 0;

     label05:
        if i5 >= i4 goto label07;

        $r18 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i5);

        r3 = (com.android.server.wm.WindowState) $r18;

        $r17 = r3.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i6 = $r17.<com.android.server.wm.Session: int mPid>;

        if $i6 != i1 goto label06;

        $z3 = virtualinvoke r3.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z3 == 0 goto label06;

        z1 = 1;

        goto label07;

     label06:
        i5 = i5 + 1;

        goto label05;

     label07:
        i3 = i3 + 1;

        goto label04;

     label08:
        if z1 != 0 goto label10;

        exitmonitor r1;

     label09:
        return;

     label10:
        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

     label11:
        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.StrictModeFlash mStrictModeFlash>;

        if $r7 != null goto label12;

        $r10 = new com.android.server.wm.StrictModeFlash;

        $r9 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r12 = virtualinvoke $r9.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $r11 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceSession mFxSession>;

        specialinvoke $r10.<com.android.server.wm.StrictModeFlash: void <init>(android.view.Display,android.view.SurfaceSession)>($r12, $r11);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.StrictModeFlash mStrictModeFlash> = $r10;

     label12:
        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.StrictModeFlash mStrictModeFlash>;

        virtualinvoke $r8.<com.android.server.wm.StrictModeFlash: void setVisibility(boolean)>(z0);

     label13:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        goto label16;

     label14:
        $r20 := @caughtexception;

        r4 = $r20;

     label15:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        throw r4;

     label16:
        exitmonitor r1;

     label17:
        goto label20;

     label18:
        $r19 := @caughtexception;

        r5 = $r19;

        exitmonitor r1;

     label19:
        throw r5;

     label20:
        return;

        catch java.lang.Throwable from label11 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label03 to label09 with label18;
        catch java.lang.Throwable from label10 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public void setStrictModeVisualIndicatorPreference(java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.String r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.strictmode.visual", r1);

        return;
    }

    private static void convertCropForSurfaceFlinger(android.graphics.Rect, int, int, int)
    {
        android.graphics.Rect r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22;

        r0 := @parameter0: android.graphics.Rect;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if i0 != 1 goto label1;

        i3 = r0.<android.graphics.Rect: int top>;

        $i16 = r0.<android.graphics.Rect: int right>;

        $i15 = i1 - $i16;

        r0.<android.graphics.Rect: int top> = $i15;

        $i18 = r0.<android.graphics.Rect: int bottom>;

        r0.<android.graphics.Rect: int right> = $i18;

        $i17 = r0.<android.graphics.Rect: int left>;

        $i19 = i1 - $i17;

        r0.<android.graphics.Rect: int bottom> = $i19;

        r0.<android.graphics.Rect: int left> = i3;

        goto label3;

     label1:
        if i0 != 2 goto label2;

        i20 = r0.<android.graphics.Rect: int top>;

        $i9 = r0.<android.graphics.Rect: int bottom>;

        $i10 = i2 - $i9;

        r0.<android.graphics.Rect: int top> = $i10;

        $i11 = i2 - i20;

        r0.<android.graphics.Rect: int bottom> = $i11;

        i21 = r0.<android.graphics.Rect: int right>;

        $i12 = r0.<android.graphics.Rect: int left>;

        $i13 = i1 - $i12;

        r0.<android.graphics.Rect: int right> = $i13;

        $i14 = i1 - i21;

        r0.<android.graphics.Rect: int left> = $i14;

        goto label3;

     label2:
        if i0 != 3 goto label3;

        i22 = r0.<android.graphics.Rect: int top>;

        $i4 = r0.<android.graphics.Rect: int left>;

        r0.<android.graphics.Rect: int top> = $i4;

        $i5 = r0.<android.graphics.Rect: int bottom>;

        $i6 = i2 - $i5;

        r0.<android.graphics.Rect: int left> = $i6;

        $i7 = r0.<android.graphics.Rect: int right>;

        r0.<android.graphics.Rect: int bottom> = $i7;

        $i8 = i2 - i22;

        r0.<android.graphics.Rect: int right> = $i8;

     label3:
        return;
    }

    public android.graphics.Bitmap screenshotApplications(android.os.IBinder, int, int, int, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1, $r49, $r50, $r62;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, i41, i42, i43;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12;
        com.android.server.wm.DisplayContent r2, $r20;
        android.view.DisplayInfo r3;
        android.graphics.Rect r4, r5, r8, r10, $r12, $r14, $r17, r65;
        com.android.server.wm.WindowList r6;
        com.android.server.wm.WindowState r7, $r13, $r48, $r56, $r59, r64;
        com.android.server.wm.WindowStateAnimator r9, $r33;
        java.lang.Throwable r11, $r54;
        android.view.WindowManagerPolicy $r15;
        java.util.HashMap $r16, r63;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        byte $b21, $b26;
        android.view.Display $r18;
        com.android.server.wm.WindowAnimator $r19;
        java.lang.StringBuilder $r21, $r22, $r23, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r38, $r39, $r42, $r44;
        android.graphics.Bitmap$Config $r24;
        java.lang.String $r25, $r41, $r43;
        java.lang.Object $r40;
        com.android.server.wm.AppWindowToken $r45, $r46, $r47, $r51, $r55, $r57, $r60;
        java.lang.SecurityException $r52;
        java.lang.InterruptedException $r53;
        android.view.IApplicationToken $r58, $r61;
        com.android.server.wm.ScreenRotationAnimation r66;
        android.graphics.Bitmap r67, r68;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $z3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.READ_FRAME_BUFFER", "screenshotApplications()");

        if $z3 != 0 goto label01;

        $r52 = new java.lang.SecurityException;

        specialinvoke $r52.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires READ_FRAME_BUFFER permission");

        throw $r52;

     label01:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        if r2 != null goto label02;

        return null;

     label02:
        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        i3 = r3.<android.view.DisplayInfo: int logicalWidth>;

        i4 = r3.<android.view.DisplayInfo: int logicalHeight>;

        if i3 == 0 goto label03;

        if i4 != 0 goto label04;

     label03:
        return null;

     label04:
        i5 = 0;

        $r14 = new android.graphics.Rect;

        specialinvoke $r14.<android.graphics.Rect: void <init>()>();

        r4 = $r14;

        $r12 = new android.graphics.Rect;

        specialinvoke $r12.<android.graphics.Rect: void <init>()>();

        r5 = $r12;

        if r1 != null goto label05;

        z1 = 1;

        i6 = 0;

        goto label06;

     label05:
        z1 = 0;

        i6 = 2147483647;

     label06:
        i7 = 0;

        $r13 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget>;

        if $r13 == null goto label07;

        $r48 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget>;

        $r55 = $r48.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r55 == null goto label07;

        $r56 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget>;

        $r57 = $r56.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r58 = $r57.<com.android.server.wm.AppWindowToken: android.view.IApplicationToken appToken>;

        if $r58 == null goto label07;

        $r59 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget>;

        $r60 = $r59.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r61 = $r60.<com.android.server.wm.AppWindowToken: android.view.IApplicationToken appToken>;

        $r62 = interfaceinvoke $r61.<android.view.IApplicationToken: android.os.IBinder asBinder()>();

        if $r62 != r1 goto label07;

        $z11 = 1;

        goto label08;

     label07:
        $z11 = 0;

     label08:
        z2 = $z11;

        $r15 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i16 = interfaceinvoke $r15.<android.view.WindowManagerPolicy: int windowTypeToLayerLw(int)>(2);

        $i14 = $i16 + 1;

        $i15 = $i14 * 10000;

        i8 = $i15 + 1000;

     label09:
        $i18 = i7;

        i7 = i7 + 1;

        if $i18 <= 0 goto label13;

     label10:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label11:
        goto label13;

     label12:
        $r53 := @caughtexception;

     label13:
        $r16 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r63 = $r16;

        entermonitor $r16;

     label14:
        r64 = null;

        r6 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        $i17 = virtualinvoke r6.<com.android.server.wm.WindowList: int size()>();

        i9 = $i17 - 1;

     label15:
        if i9 < 0 goto label26;

        $r40 = virtualinvoke r6.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i9);

        r7 = (com.android.server.wm.WindowState) $r40;

        $z9 = r7.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z9 != 0 goto label16;

        goto label25;

     label16:
        $i32 = r7.<com.android.server.wm.WindowState: int mLayer>;

        if $i32 < i8 goto label17;

        goto label25;

     label17:
        $z8 = r7.<com.android.server.wm.WindowState: boolean mIsImWindow>;

        if $z8 == 0 goto label18;

        if z2 != 0 goto label21;

        goto label25;

     label18:
        $z7 = r7.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z7 == 0 goto label19;

        goto label21;

     label19:
        if r1 == null goto label21;

        $r47 = r7.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r47 == null goto label25;

        $r46 = r7.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r49 = $r46.<com.android.server.wm.AppWindowToken: android.os.IBinder token>;

        if $r49 == r1 goto label20;

        goto label25;

     label20:
        r64 = r7;

     label21:
        r9 = r7.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i31 = r9.<com.android.server.wm.WindowStateAnimator: int mSurfaceLayer>;

        if i5 >= $i31 goto label22;

        i5 = r9.<com.android.server.wm.WindowStateAnimator: int mSurfaceLayer>;

     label22:
        $i30 = r9.<com.android.server.wm.WindowStateAnimator: int mSurfaceLayer>;

        if i6 <= $i30 goto label23;

        i6 = r9.<com.android.server.wm.WindowStateAnimator: int mSurfaceLayer>;

     label23:
        $z6 = r7.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z6 != 0 goto label24;

        r8 = r7.<com.android.server.wm.WindowState: android.graphics.Rect mFrame>;

        r10 = r7.<com.android.server.wm.WindowState: android.graphics.Rect mContentInsets>;

        $i38 = r8.<android.graphics.Rect: int left>;

        $i36 = r10.<android.graphics.Rect: int left>;

        i10 = $i38 + $i36;

        $i40 = r8.<android.graphics.Rect: int top>;

        $i37 = r10.<android.graphics.Rect: int top>;

        i12 = $i40 + $i37;

        $i34 = r8.<android.graphics.Rect: int right>;

        $i39 = r10.<android.graphics.Rect: int right>;

        i11 = $i34 - $i39;

        $i35 = r8.<android.graphics.Rect: int bottom>;

        $i33 = r10.<android.graphics.Rect: int bottom>;

        i13 = $i35 - $i33;

        virtualinvoke r4.<android.graphics.Rect: void union(int,int,int,int)>(i10, i12, i11, i13);

        virtualinvoke r7.<com.android.server.wm.WindowState: void getStackBounds(android.graphics.Rect)>(r5);

        virtualinvoke r4.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r5);

     label24:
        $r45 = r7.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r45 == null goto label25;

        $r51 = r7.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r50 = $r51.<com.android.server.wm.AppWindowToken: android.os.IBinder token>;

        if $r50 != r1 goto label25;

        $z10 = virtualinvoke r7.<com.android.server.wm.WindowState: boolean isDisplayedLw()>();

        if $z10 == 0 goto label25;

        z1 = 1;

     label25:
        i9 = i9 + -1;

        goto label15;

     label26:
        if r1 == null goto label28;

        if r64 != null goto label28;

        exitmonitor r63;

     label27:
        return null;

     label28:
        if z1 != 0 goto label34;

        if i7 <= 3 goto label32;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screenshot max retries ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r38 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r36 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" appWin=");

        if r64 != null goto label29;

        $r43 = "null";

        goto label30;

     label29:
        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r64);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" drawState=");

        $r33 = r64.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i29 = $r33.<com.android.server.wm.WindowStateAnimator: int mDrawState>;

        $r44 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i29);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

     label30:
        $r42 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r41);

        exitmonitor r63;

     label31:
        return null;

     label32:
        exitmonitor r63;

     label33:
        goto label09;

     label34:
        if i5 != 0 goto label36;

        exitmonitor r63;

     label35:
        return null;

     label36:
        virtualinvoke r4.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, i3, i4);

        $r17 = new android.graphics.Rect;

        specialinvoke $r17.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r4);

        r65 = $r17;

        $f0 = (float) i1;

        $i19 = virtualinvoke r4.<android.graphics.Rect: int width()>();

        $f3 = (float) $i19;

        $f2 = $f0 / $f3;

        $f1 = (float) i2;

        $i20 = virtualinvoke r4.<android.graphics.Rect: int height()>();

        $f6 = (float) $i20;

        $f5 = $f1 / $f6;

        $b21 = $f2 cmpg $f5;

        if $b21 >= 0 goto label37;

        $f14 = (float) i1;

        $f15 = (float) i2;

        $f11 = $f14 / $f15;

        $i25 = virtualinvoke r4.<android.graphics.Rect: int height()>();

        $f13 = (float) $i25;

        $f12 = $f11 * $f13;

        i41 = (int) $f12;

        $i27 = r65.<android.graphics.Rect: int left>;

        $i28 = $i27 + i41;

        r65.<android.graphics.Rect: int right> = $i28;

        goto label38;

     label37:
        $f9 = (float) i2;

        $f4 = (float) i1;

        $f8 = $f9 / $f4;

        $i22 = virtualinvoke r4.<android.graphics.Rect: int width()>();

        $f7 = (float) $i22;

        $f10 = $f8 * $f7;

        i42 = (int) $f10;

        $i23 = r65.<android.graphics.Rect: int top>;

        $i24 = $i23 + i42;

        r65.<android.graphics.Rect: int bottom> = $i24;

     label38:
        $r20 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r18 = virtualinvoke $r20.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        i43 = virtualinvoke $r18.<android.view.Display: int getRotation()>();

        if i43 == 1 goto label39;

        if i43 != 3 goto label42;

     label39:
        if i43 != 1 goto label40;

        $b26 = 3;

        goto label41;

     label40:
        $b26 = 1;

     label41:
        i43 = $b26;

     label42:
        staticinvoke <com.android.server.wm.WindowManagerService: void convertCropForSurfaceFlinger(android.graphics.Rect,int,int,int)>(r65, i43, i3, i4);

        $r19 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        r66 = virtualinvoke $r19.<com.android.server.wm.WindowAnimator: com.android.server.wm.ScreenRotationAnimation getScreenRotationAnimationLocked(int)>(0);

        if r66 == null goto label43;

        $z4 = virtualinvoke r66.<com.android.server.wm.ScreenRotationAnimation: boolean isAnimating()>();

        if $z4 == 0 goto label43;

        $z5 = 1;

        goto label44;

     label43:
        $z5 = 0;

     label44:
        z12 = $z5;

        r67 = staticinvoke <android.view.SurfaceControl: android.graphics.Bitmap screenshot(android.graphics.Rect,int,int,int,int,boolean,int)>(r65, i1, i2, i6, i5, z12, i43);

        if r67 != null goto label46;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screenshot failure taking screenshot for (");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to layer ");

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r25);

        exitmonitor r63;

     label45:
        return null;

     label46:
        exitmonitor r63;

     label47:
        goto label50;

     label48:
        $r54 := @caughtexception;

        r11 = $r54;

        exitmonitor r63;

     label49:
        throw r11;

     label50:
        goto label51;

     label51:
        $r24 = virtualinvoke r67.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        r68 = virtualinvoke r67.<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>($r24, 1);

        virtualinvoke r67.<android.graphics.Bitmap: void recycle()>();

        return r68;

        catch java.lang.InterruptedException from label10 to label11 with label12;
        catch java.lang.Throwable from label14 to label27 with label48;
        catch java.lang.Throwable from label28 to label31 with label48;
        catch java.lang.Throwable from label32 to label33 with label48;
        catch java.lang.Throwable from label34 to label35 with label48;
        catch java.lang.Throwable from label36 to label45 with label48;
        catch java.lang.Throwable from label46 to label47 with label48;
        catch java.lang.Throwable from label48 to label49 with label48;
    }

    public void freezeRotation(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i2;
        long l1;
        java.lang.Throwable r1, $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        android.view.WindowManagerPolicy $r3;
        java.lang.SecurityException $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ORIENTATION", "freezeRotation()");

        if $z0 != 0 goto label01;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_ORIENTATION permission");

        throw $r4;

     label01:
        if i0 < -1 goto label02;

        if i0 <= 3 goto label03;

     label02:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Rotation argument must be -1 or a valid rotation constant.");

        throw $r2;

     label03:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r3 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        if i0 != -1 goto label05;

        $i2 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        goto label06;

     label05:
        $i2 = i0;

     label06:
        interfaceinvoke $r3.<android.view.WindowManagerPolicy: void setUserRotationMode(int,int)>(1, $i2);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label10;

     label08:
        $r5 := @caughtexception;

        r1 = $r5;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

     label10:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void updateRotationUnchecked(boolean,boolean)>(0, 0);

        return;

        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void thawRotation()
    {
        com.android.server.wm.WindowManagerService r0;
        long l0;
        java.lang.Throwable r1, $r4;
        boolean $z0;
        android.view.WindowManagerPolicy $r2;
        java.lang.SecurityException $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ORIENTATION", "thawRotation()");

        if $z0 != 0 goto label1;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_ORIENTATION permission");

        throw $r3;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r2 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r2.<android.view.WindowManagerPolicy: void setUserRotationMode(int,int)>(0, 777);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label6;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

     label6:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void updateRotationUnchecked(boolean,boolean)>(0, 0);

        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void updateRotation(boolean, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void updateRotationUnchecked(boolean,boolean)>(z0, z1);

        return;
    }

    void pauseRotationLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $i0 = r0.<com.android.server.wm.WindowManagerService: int mDeferredRotationPauseCount>;

        $i1 = $i0 + 1;

        r0.<com.android.server.wm.WindowManagerService: int mDeferredRotationPauseCount> = $i1;

        return;
    }

    void resumeRotationLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;
        com.android.server.wm.WindowManagerService$H $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $i0 = r0.<com.android.server.wm.WindowManagerService: int mDeferredRotationPauseCount>;

        if $i0 <= 0 goto label1;

        $i1 = r0.<com.android.server.wm.WindowManagerService: int mDeferredRotationPauseCount>;

        $i2 = $i1 - 1;

        r0.<com.android.server.wm.WindowManagerService: int mDeferredRotationPauseCount> = $i2;

        $i3 = r0.<com.android.server.wm.WindowManagerService: int mDeferredRotationPauseCount>;

        if $i3 != 0 goto label1;

        z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateRotationUncheckedLocked(boolean)>(0);

        if z0 == 0 goto label1;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(18);

     label1:
        return;
    }

    public void updateRotationUnchecked(boolean, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1, z2;
        long l0;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.server.wm.DisplayContent $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        z2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateRotationUncheckedLocked(boolean)>(0);

        if z2 == 0 goto label2;

        if z1 == 0 goto label3;

     label2:
        $r4 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r4.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        if z2 != 0 goto label8;

        if z0 == 0 goto label9;

     label8:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void sendNewConfiguration()>();

     label9:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean updateRotationUncheckedLocked(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1, $z2, $z3, $z5, $z7, $z8, $z9, $z10, $z11, $z12;
        com.android.server.wm.ScreenRotationAnimation r1, r29;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        com.android.server.wm.DisplayContent r2, $r21;
        int[] r3;
        android.view.DisplayInfo r4;
        java.lang.Throwable r5, $r27;
        com.android.server.wm.WindowState r6;
        com.android.server.wm.WindowAnimator $r7, $r14;
        android.view.WindowManagerPolicy $r8, $r9, $r11, $r13;
        com.android.server.wm.WindowManagerService$H $r10, $r12;
        android.hardware.display.DisplayManagerInternal $r15;
        com.android.server.wm.AccessibilityController $r16, $r20;
        java.util.ArrayList $r17, $r18;
        java.lang.Object $r19, $r22;
        android.view.IRotationWatcher $r23;
        com.android.server.wm.WindowManagerService$RotationWatcher $r24;
        android.view.SurfaceSession $r25;
        com.android.server.wm.WindowManagerService$LayoutFields $r26;
        float $f0;
        android.os.RemoteException $r28;
        com.android.server.wm.WindowList r30;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $i2 = r0.<com.android.server.wm.WindowManagerService: int mDeferredRotationPauseCount>;

        if $i2 <= 0 goto label01;

        return 0;

     label01:
        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        r1 = virtualinvoke $r7.<com.android.server.wm.WindowAnimator: com.android.server.wm.ScreenRotationAnimation getScreenRotationAnimationLocked(int)>(0);

        if r1 == null goto label02;

        $z10 = virtualinvoke r1.<com.android.server.wm.ScreenRotationAnimation: boolean isAnimating()>();

        if $z10 == 0 goto label02;

        return 0;

     label02:
        $z2 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        if $z2 != 0 goto label03;

        return 0;

     label03:
        $r8 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i4 = r0.<com.android.server.wm.WindowManagerService: int mForcedAppOrientation>;

        $i3 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        i0 = interfaceinvoke $r8.<android.view.WindowManagerPolicy: int rotationForOrientationLw(int,int)>($i4, $i3);

        $r9 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i5 = r0.<com.android.server.wm.WindowManagerService: int mForcedAppOrientation>;

        $z3 = interfaceinvoke $r9.<android.view.WindowManagerPolicy: boolean rotationHasCompatibleMetricsLw(int,int)>($i5, i0);

        if $z3 != 0 goto label04;

        $z11 = 1;

        goto label05;

     label04:
        $z11 = 0;

     label05:
        z1 = $z11;

        $i7 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        if $i7 != i0 goto label06;

        $z12 = r0.<com.android.server.wm.WindowManagerService: boolean mAltOrientation>;

        if $z12 != z1 goto label06;

        return 0;

     label06:
        r0.<com.android.server.wm.WindowManagerService: int mRotation> = i0;

        r0.<com.android.server.wm.WindowManagerService: boolean mAltOrientation> = z1;

        $r11 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i6 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        interfaceinvoke $r11.<android.view.WindowManagerPolicy: void setRotationLw(int)>($i6);

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsFreezingScreen> = 1;

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r10.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(11);

        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r12.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(11, 2000L);

        r0.<com.android.server.wm.WindowManagerService: boolean mWaitingForConfig> = 1;

        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        r2.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

        r3 = newarray (int)[2];

        $z5 = virtualinvoke r2.<com.android.server.wm.DisplayContent: boolean isDimming()>();

        if $z5 == 0 goto label07;

        r3[1] = 0;

        r3[0] = 0;

        goto label08;

     label07:
        $r13 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r13.<android.view.WindowManagerPolicy: void selectRotationAnimationLw(int[])>(r3);

     label08:
        $i9 = r3[0];

        $i8 = r3[1];

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void startFreezingDisplayLocked(boolean,int,int)>(z0, $i9, $i8);

        $r14 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        r29 = virtualinvoke $r14.<com.android.server.wm.WindowAnimator: com.android.server.wm.ScreenRotationAnimation getScreenRotationAnimationLocked(int)>(0);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean computeScreenConfigurationLocked(android.content.res.Configuration)>(null);

        r4 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        if z0 != 0 goto label09;

        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

     label09:
        if r29 == null goto label10;

        $z8 = virtualinvoke r29.<com.android.server.wm.ScreenRotationAnimation: boolean hasScreenshot()>();

        if $z8 == 0 goto label10;

        $r25 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceSession mFxSession>;

        $f0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: float getTransitionAnimationScaleLocked()>();

        $i13 = r4.<android.view.DisplayInfo: int logicalWidth>;

        $i14 = r4.<android.view.DisplayInfo: int logicalHeight>;

        $z9 = virtualinvoke r29.<com.android.server.wm.ScreenRotationAnimation: boolean setRotationInTransaction(int,android.view.SurfaceSession,long,float,int,int)>(i0, $r25, 10000L, $f0, $i13, $i14);

        if $z9 == 0 goto label10;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void scheduleAnimationLocked()>();

     label10:
        $r15 = r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        virtualinvoke $r15.<android.hardware.display.DisplayManagerInternal: void performTraversalInTransactionFromWindowManager()>();

     label11:
        if z0 != 0 goto label15;

        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        goto label15;

     label12:
        $r27 := @caughtexception;

        r5 = $r27;

     label13:
        if z0 != 0 goto label14;

        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

     label14:
        throw r5;

     label15:
        r30 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        $i10 = virtualinvoke r30.<com.android.server.wm.WindowList: int size()>();

        i1 = $i10 - 1;

     label16:
        if i1 < 0 goto label18;

        $r22 = virtualinvoke r30.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r6 = (com.android.server.wm.WindowState) $r22;

        $z7 = r6.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z7 == 0 goto label17;

        r6.<com.android.server.wm.WindowState: boolean mOrientationChanging> = 1;

        $r26 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r26.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mOrientationChangeComplete> = 0;

     label17:
        r6.<com.android.server.wm.WindowState: int mLastFreezeDuration> = 0;

        i1 = i1 + -1;

        goto label16;

     label18:
        $r17 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRotationWatchers>;

        $i12 = virtualinvoke $r17.<java.util.ArrayList: int size()>();

        i15 = $i12 - 1;

     label19:
        if i15 < 0 goto label24;

     label20:
        $r18 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRotationWatchers>;

        $r19 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object get(int)>(i15);

        $r24 = (com.android.server.wm.WindowManagerService$RotationWatcher) $r19;

        $r23 = $r24.<com.android.server.wm.WindowManagerService$RotationWatcher: android.view.IRotationWatcher watcher>;

        interfaceinvoke $r23.<android.view.IRotationWatcher: void onRotationChanged(int)>(i0);

     label21:
        goto label23;

     label22:
        $r28 := @caughtexception;

     label23:
        i15 = i15 + -1;

        goto label19;

     label24:
        if r29 != null goto label25;

        $r16 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r16 == null goto label25;

        $i11 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        if $i11 != 0 goto label25;

        $r20 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $r21 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        virtualinvoke $r20.<com.android.server.wm.AccessibilityController: void onRotationChangedLocked(com.android.server.wm.DisplayContent,int)>($r21, i0);

     label25:
        return 1;

        catch java.lang.Throwable from label09 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch android.os.RemoteException from label20 to label21 with label22;
    }

    public int getRotation()
    {
        com.android.server.wm.WindowManagerService r0;
        int $i0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $i0 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        return $i0;
    }

    public boolean isRotationFrozen()
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.WindowManagerPolicy $r1;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy: int getUserRotationMode()>();

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int watchRotation(android.view.IRotationWatcher)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IRotationWatcher r1;
        android.os.IBinder r2, $r9;
        com.android.server.wm.WindowManagerService$7 r3, $r7;
        java.util.HashMap r4, $r8;
        java.lang.Throwable r6, $r12;
        com.android.server.wm.WindowManagerService$RotationWatcher $r10;
        java.util.ArrayList $r11;
        int $i0;
        android.os.RemoteException $r13;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.IRotationWatcher;

        r2 = interfaceinvoke r1.<android.view.IRotationWatcher: android.os.IBinder asBinder()>();

        $r7 = new com.android.server.wm.WindowManagerService$7;

        specialinvoke $r7.<com.android.server.wm.WindowManagerService$7: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder)>(r0, r2);

        r3 = $r7;

        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r4 = $r8;

        entermonitor $r8;

     label1:
        $r9 = interfaceinvoke r1.<android.view.IRotationWatcher: android.os.IBinder asBinder()>();

        interfaceinvoke $r9.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0);

        $r11 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRotationWatchers>;

        $r10 = new com.android.server.wm.WindowManagerService$RotationWatcher;

        specialinvoke $r10.<com.android.server.wm.WindowManagerService$RotationWatcher: void <init>(com.android.server.wm.WindowManagerService,android.view.IRotationWatcher,android.os.IBinder$DeathRecipient)>(r0, r1, r3);

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

     label4:
        $i0 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        exitmonitor r4;

     label5:
        return $i0;

     label6:
        $r12 := @caughtexception;

        r6 = $r12;

        exitmonitor r4;

     label7:
        throw r6;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void removeRotationWatcher(android.view.IRotationWatcher)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IRotationWatcher r1, $r13, $r16;
        android.os.IBinder r2, r6, $r12;
        java.util.HashMap r3, $r8;
        int i0, $i1;
        com.android.server.wm.WindowManagerService$RotationWatcher r4, r5;
        java.lang.Throwable r7, $r18;
        java.util.ArrayList $r9, $r10, $r15;
        java.lang.Object $r11, $r14;
        android.os.IBinder$DeathRecipient $r17;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.IRotationWatcher;

        r2 = interfaceinvoke r1.<android.view.IRotationWatcher: android.os.IBinder asBinder()>();

        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r8;

        entermonitor $r8;

     label1:
        i0 = 0;

     label2:
        $r9 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRotationWatchers>;

        $i1 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label5;

        $r10 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRotationWatchers>;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r4 = (com.android.server.wm.WindowManagerService$RotationWatcher) $r11;

        $r13 = r4.<com.android.server.wm.WindowManagerService$RotationWatcher: android.view.IRotationWatcher watcher>;

        $r12 = interfaceinvoke $r13.<android.view.IRotationWatcher: android.os.IBinder asBinder()>();

        if r2 != $r12 goto label4;

        $r15 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRotationWatchers>;

        $r14 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        r5 = (com.android.server.wm.WindowManagerService$RotationWatcher) $r14;

        $r16 = r5.<com.android.server.wm.WindowManagerService$RotationWatcher: android.view.IRotationWatcher watcher>;

        r6 = interfaceinvoke $r16.<android.view.IRotationWatcher: android.os.IBinder asBinder()>();

        if r6 == null goto label3;

        $r17 = r5.<com.android.server.wm.WindowManagerService$RotationWatcher: android.os.IBinder$DeathRecipient deathRecipient>;

        interfaceinvoke r6.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>($r17, 0);

     label3:
        i0 = i0 + -1;

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        exitmonitor r3;

     label6:
        goto label9;

     label7:
        $r18 := @caughtexception;

        r7 = $r18;

        exitmonitor r3;

     label8:
        throw r7;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int getPreferredOptionsPanelGravity()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r4;
        int i0, $i1, $i2;
        com.android.server.wm.DisplayContent r2;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        i0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: int getRotation()>();

        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $i2 = r2.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        $i1 = r2.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        if $i2 >= $i1 goto label10;

        tableswitch(i0)
        {
            case 0: goto label02;
            case 1: goto label04;
            case 2: goto label06;
            case 3: goto label08;
            default: goto label02;
        };

     label02:
        exitmonitor r1;

     label03:
        return 81;

     label04:
        exitmonitor r1;

     label05:
        return 85;

     label06:
        exitmonitor r1;

     label07:
        return 81;

     label08:
        exitmonitor r1;

     label09:
        return 8388691;

     label10:
        tableswitch(i0)
        {
            case 0: goto label11;
            case 1: goto label13;
            case 2: goto label15;
            case 3: goto label17;
            default: goto label11;
        };

     label11:
        exitmonitor r1;

     label12:
        return 85;

     label13:
        exitmonitor r1;

     label14:
        return 81;

     label15:
        exitmonitor r1;

     label16:
        return 8388691;

     label17:
        exitmonitor r1;

     label18:
        return 81;

     label19:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r1;

     label20:
        throw r3;

        catch java.lang.Throwable from label01 to label03 with label19;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label10 to label12 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    public boolean startViewServer(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.wm.ViewServer $r2, $r3, $r4, $r5, $r6;
        java.io.IOException $r7, $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean isSystemSecure()>();

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "startViewServer");

        if $z1 != 0 goto label02;

        return 0;

     label02:
        if i0 >= 1024 goto label03;

        return 0;

     label03:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ViewServer mViewServer>;

        if $r2 == null goto label08;

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ViewServer mViewServer>;

        $z3 = virtualinvoke $r5.<com.android.server.wm.ViewServer: boolean isRunning()>();

        if $z3 != 0 goto label07;

     label04:
        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ViewServer mViewServer>;

        $z4 = virtualinvoke $r6.<com.android.server.wm.ViewServer: boolean start()>();

     label05:
        return $z4;

     label06:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "View server did not start");

     label07:
        return 0;

     label08:
        $r3 = new com.android.server.wm.ViewServer;

        specialinvoke $r3.<com.android.server.wm.ViewServer: void <init>(com.android.server.wm.WindowManagerService,int)>(r0, i0);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ViewServer mViewServer> = $r3;

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ViewServer mViewServer>;

        $z2 = virtualinvoke $r4.<com.android.server.wm.ViewServer: boolean start()>();

     label09:
        return $z2;

     label10:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "View server did not start");

        return 0;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label08 to label09 with label10;
    }

    private boolean isSystemSecure()
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.String $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = "1";

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.secure", "1");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r3 = "0";

        $r4 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.debuggable", "0");

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean stopViewServer()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0, $z1, $z2;
        com.android.server.wm.ViewServer $r1, $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean isSystemSecure()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "stopViewServer");

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ViewServer mViewServer>;

        if $r1 == null goto label3;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ViewServer mViewServer>;

        $z2 = virtualinvoke $r2.<com.android.server.wm.ViewServer: boolean stop()>();

        return $z2;

     label3:
        return 0;
    }

    public boolean isViewServerRunning()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.wm.ViewServer $r1, $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean isSystemSecure()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "isViewServerRunning");

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ViewServer mViewServer>;

        if $r1 == null goto label3;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.ViewServer mViewServer>;

        $z2 = virtualinvoke $r2.<com.android.server.wm.ViewServer: boolean isRunning()>();

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    boolean viewServerListWindows(java.net.Socket)
    {
        com.android.server.wm.WindowManagerService r0;
        java.net.Socket r1;
        boolean z0, $z1;
        com.android.server.wm.WindowList r2, $r8, $r19;
        java.util.HashMap r3, $r9;
        int i0, i1, $i2, i3, i4;
        com.android.server.wm.DisplayContent r4;
        java.lang.Throwable r5, r6, $r23, $r24;
        android.util.SparseArray $r10, $r17;
        java.io.OutputStreamWriter $r11;
        java.io.BufferedWriter $r12, r27;
        java.lang.Object $r13, $r20;
        java.lang.String $r14;
        java.lang.CharSequence $r15;
        android.view.WindowManager$LayoutParams $r16;
        java.io.IOException $r21, $r22, $r26;
        java.lang.Exception $r25;
        java.io.OutputStream r28;
        com.android.server.wm.WindowState r29;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.net.Socket;

        $z1 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean isSystemSecure()>();

        if $z1 == 0 goto label01;

        return 0;

     label01:
        z0 = 1;

        $r8 = new com.android.server.wm.WindowList;

        specialinvoke $r8.<com.android.server.wm.WindowList: void <init>()>();

        r2 = $r8;

        $r9 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r9;

        entermonitor $r9;

     label02:
        $r10 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i0 = virtualinvoke $r10.<android.util.SparseArray: int size()>();

        i1 = 0;

     label03:
        if i1 >= i0 goto label04;

        $r17 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r20 = virtualinvoke $r17.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r4 = (com.android.server.wm.DisplayContent) $r20;

        $r19 = virtualinvoke r4.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        virtualinvoke r2.<com.android.server.wm.WindowList: boolean addAll(java.util.Collection)>($r19);

        i1 = i1 + 1;

        goto label03;

     label04:
        exitmonitor r3;

     label05:
        goto label08;

     label06:
        $r24 := @caughtexception;

        r5 = $r24;

        exitmonitor r3;

     label07:
        throw r5;

     label08:
        r27 = null;

     label09:
        r28 = virtualinvoke r1.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        $r12 = new java.io.BufferedWriter;

        $r11 = new java.io.OutputStreamWriter;

        specialinvoke $r11.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r28);

        specialinvoke $r12.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r11, 8192);

        r27 = $r12;

        i3 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        i4 = 0;

     label10:
        if i4 >= i3 goto label11;

        $r13 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i4);

        r29 = (com.android.server.wm.WindowState) $r13;

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r29);

        $r14 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke r27.<java.io.BufferedWriter: void write(java.lang.String)>($r14);

        virtualinvoke r27.<java.io.BufferedWriter: void write(int)>(32);

        $r16 = r29.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r15 = virtualinvoke $r16.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        virtualinvoke r27.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>($r15);

        virtualinvoke r27.<java.io.BufferedWriter: void write(int)>(10);

        i4 = i4 + 1;

        goto label10;

     label11:
        virtualinvoke r27.<java.io.BufferedWriter: void write(java.lang.String)>("DONE.\n");

        virtualinvoke r27.<java.io.BufferedWriter: void flush()>();

     label12:
        if r27 == null goto label27;

     label13:
        virtualinvoke r27.<java.io.BufferedWriter: void close()>();

     label14:
        goto label27;

     label15:
        $r22 := @caughtexception;

        z0 = 0;

        goto label27;

     label16:
        $r25 := @caughtexception;

        z0 = 0;

     label17:
        if r27 == null goto label27;

     label18:
        virtualinvoke r27.<java.io.BufferedWriter: void close()>();

     label19:
        goto label27;

     label20:
        $r21 := @caughtexception;

        z0 = 0;

        goto label27;

     label21:
        $r23 := @caughtexception;

        r6 = $r23;

     label22:
        if r27 == null goto label26;

     label23:
        virtualinvoke r27.<java.io.BufferedWriter: void close()>();

     label24:
        goto label26;

     label25:
        $r26 := @caughtexception;

     label26:
        throw r6;

     label27:
        return z0;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.lang.Exception from label09 to label12 with label16;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.lang.Throwable from label09 to label12 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.io.IOException from label23 to label24 with label25;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    boolean viewServerGetFocusedWindow(java.net.Socket)
    {
        com.android.server.wm.WindowManagerService r0;
        java.net.Socket r1;
        boolean z0, $z1;
        com.android.server.wm.WindowState r2;
        java.io.BufferedWriter r3, $r7;
        java.io.OutputStream r4;
        java.lang.Throwable r5, $r15;
        java.io.OutputStreamWriter $r8;
        int $i0;
        java.lang.String $r9;
        android.view.WindowManager$LayoutParams $r10;
        java.lang.CharSequence $r12;
        java.lang.Exception $r13;
        java.io.IOException $r14, $r16, $r17;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.net.Socket;

        $z1 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean isSystemSecure()>();

        if $z1 == 0 goto label01;

        return 0;

     label01:
        z0 = 1;

        r2 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState getFocusedWindow()>();

        r3 = null;

     label02:
        r4 = virtualinvoke r1.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        $r7 = new java.io.BufferedWriter;

        $r8 = new java.io.OutputStreamWriter;

        specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r4);

        specialinvoke $r7.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r8, 8192);

        r3 = $r7;

        if r2 == null goto label03;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r2);

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>($r9);

        virtualinvoke r3.<java.io.BufferedWriter: void write(int)>(32);

        $r10 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r12 = virtualinvoke $r10.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        virtualinvoke r3.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>($r12);

     label03:
        virtualinvoke r3.<java.io.BufferedWriter: void write(int)>(10);

        virtualinvoke r3.<java.io.BufferedWriter: void flush()>();

     label04:
        if r3 == null goto label19;

     label05:
        virtualinvoke r3.<java.io.BufferedWriter: void close()>();

     label06:
        goto label19;

     label07:
        $r17 := @caughtexception;

        z0 = 0;

        goto label19;

     label08:
        $r13 := @caughtexception;

        z0 = 0;

     label09:
        if r3 == null goto label19;

     label10:
        virtualinvoke r3.<java.io.BufferedWriter: void close()>();

     label11:
        goto label19;

     label12:
        $r16 := @caughtexception;

        z0 = 0;

        goto label19;

     label13:
        $r15 := @caughtexception;

        r5 = $r15;

     label14:
        if r3 == null goto label18;

     label15:
        virtualinvoke r3.<java.io.BufferedWriter: void close()>();

     label16:
        goto label18;

     label17:
        $r14 := @caughtexception;

     label18:
        throw r5;

     label19:
        return z0;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.Exception from label02 to label04 with label08;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label02 to label04 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    boolean viewServerWindowCommand(java.net.Socket, java.lang.String, java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        java.net.Socket r1;
        java.lang.String r2, r3, r7, $r26;
        boolean z0, z1, $z2, $z4;
        android.os.Parcel r4, r5;
        java.io.BufferedWriter r6, $r14;
        int i0, i1, $i3, $i4;
        com.android.server.wm.WindowState r8;
        java.lang.Throwable r10, $r19;
        long $l2;
        android.os.ParcelFileDescriptor $r12;
        android.view.IWindow $r13;
        java.io.OutputStream $r15;
        java.io.OutputStreamWriter $r16;
        java.io.IOException $r17, $r18, $r20, $r21;
        java.lang.StringBuilder $r22, $r24, $r25, $r27, $r28;
        java.lang.Exception $r23, r31;
        android.os.IBinder r29;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $z2 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean isSystemSecure()>();

        if $z2 == 0 goto label01;

        return 0;

     label01:
        z0 = 1;

        r4 = null;

        r5 = null;

        r6 = null;

     label02:
        i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(32);

        if i0 != -1 goto label03;

        i0 = virtualinvoke r3.<java.lang.String: int length()>();

     label03:
        r7 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r7, 16);

        i1 = (int) $l2;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        if i0 >= $i3 goto label04;

        $i4 = i0 + 1;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i4);

        goto label05;

     label04:
        r3 = "";

     label05:
        r8 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState findWindow(int)>(i1);

        if r8 != null goto label13;

        z1 = 0;

     label06:
        if r4 == null goto label07;

        virtualinvoke r4.<android.os.Parcel: void recycle()>();

     label07:
        if r5 == null goto label08;

        virtualinvoke r5.<android.os.Parcel: void recycle()>();

     label08:
        if r6 == null goto label12;

     label09:
        virtualinvoke r6.<java.io.BufferedWriter: void close()>();

     label10:
        goto label12;

     label11:
        $r21 := @caughtexception;

     label12:
        return z1;

     label13:
        r4 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r4.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.view.IWindow");

        virtualinvoke r4.<android.os.Parcel: void writeString(java.lang.String)>(r2);

        virtualinvoke r4.<android.os.Parcel: void writeString(java.lang.String)>(r3);

        virtualinvoke r4.<android.os.Parcel: void writeInt(int)>(1);

        $r12 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>(r1);

        virtualinvoke $r12.<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)>(r4, 0);

        r5 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        $r13 = r8.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        r29 = interfaceinvoke $r13.<android.view.IWindow: android.os.IBinder asBinder()>();

        interfaceinvoke r29.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, r4, r5, 0);

        virtualinvoke r5.<android.os.Parcel: void readException()>();

        $z4 = virtualinvoke r1.<java.net.Socket: boolean isOutputShutdown()>();

        if $z4 != 0 goto label14;

        $r14 = new java.io.BufferedWriter;

        $r16 = new java.io.OutputStreamWriter;

        $r15 = virtualinvoke r1.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke $r16.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r15);

        specialinvoke $r14.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r16);

        r6 = $r14;

        virtualinvoke r6.<java.io.BufferedWriter: void write(java.lang.String)>("DONE\n");

        virtualinvoke r6.<java.io.BufferedWriter: void flush()>();

     label14:
        if r4 == null goto label15;

        virtualinvoke r4.<android.os.Parcel: void recycle()>();

     label15:
        if r5 == null goto label16;

        virtualinvoke r5.<android.os.Parcel: void recycle()>();

     label16:
        if r6 == null goto label35;

     label17:
        virtualinvoke r6.<java.io.BufferedWriter: void close()>();

     label18:
        goto label35;

     label19:
        $r17 := @caughtexception;

        goto label35;

     label20:
        $r23 := @caughtexception;

        r31 = $r23;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not send command ");

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with parameters ");

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r26, r31);

        z0 = 0;

     label21:
        if r4 == null goto label22;

        virtualinvoke r4.<android.os.Parcel: void recycle()>();

     label22:
        if r5 == null goto label23;

        virtualinvoke r5.<android.os.Parcel: void recycle()>();

     label23:
        if r6 == null goto label35;

     label24:
        virtualinvoke r6.<java.io.BufferedWriter: void close()>();

     label25:
        goto label35;

     label26:
        $r18 := @caughtexception;

        goto label35;

     label27:
        $r19 := @caughtexception;

        r10 = $r19;

     label28:
        if r4 == null goto label29;

        virtualinvoke r4.<android.os.Parcel: void recycle()>();

     label29:
        if r5 == null goto label30;

        virtualinvoke r5.<android.os.Parcel: void recycle()>();

     label30:
        if r6 == null goto label34;

     label31:
        virtualinvoke r6.<java.io.BufferedWriter: void close()>();

     label32:
        goto label34;

     label33:
        $r20 := @caughtexception;

     label34:
        throw r10;

     label35:
        return z0;

        catch java.io.IOException from label09 to label10 with label11;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.lang.Exception from label02 to label06 with label20;
        catch java.lang.Exception from label13 to label14 with label20;
        catch java.io.IOException from label24 to label25 with label26;
        catch java.lang.Throwable from label02 to label06 with label27;
        catch java.lang.Throwable from label13 to label14 with label27;
        catch java.lang.Throwable from label20 to label21 with label27;
        catch java.io.IOException from label31 to label32 with label33;
        catch java.lang.Throwable from label27 to label28 with label27;
    }

    public void addWindowChangeListener(com.android.server.wm.WindowManagerService$WindowChangeListener)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerService$WindowChangeListener r1;
        java.util.HashMap r2, $r4;
        java.lang.Throwable r3, $r6;
        java.util.ArrayList $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowManagerService$WindowChangeListener;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void removeWindowChangeListener(com.android.server.wm.WindowManagerService$WindowChangeListener)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerService$WindowChangeListener r1;
        java.util.HashMap r2, $r4;
        java.lang.Throwable r3, $r6;
        java.util.ArrayList $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowManagerService$WindowChangeListener;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        virtualinvoke $r5.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void notifyWindowsChanged()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerService$WindowChangeListener[] r1, r11;
        java.util.HashMap r2, $r4;
        java.lang.Throwable r3, $r10;
        java.util.ArrayList $r5, $r6, $r7;
        boolean $z0;
        int $i0, i1, i2;
        java.lang.Object[] $r8;
        com.android.server.wm.WindowManagerService$WindowChangeListener $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        $z0 = virtualinvoke $r5.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        $i0 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        r1 = newarray (com.android.server.wm.WindowManagerService$WindowChangeListener)[$i0];

        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        r11 = (com.android.server.wm.WindowManagerService$WindowChangeListener[]) $r8;

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        i1 = lengthof r11;

        i2 = 0;

     label8:
        if i2 >= i1 goto label9;

        $r9 = r11[i2];

        interfaceinvoke $r9.<com.android.server.wm.WindowManagerService$WindowChangeListener: void windowsChanged()>();

        i2 = i2 + 1;

        goto label8;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void notifyFocusChanged()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerService$WindowChangeListener[] r1, r11;
        java.util.HashMap r2, $r4;
        java.lang.Throwable r3, $r10;
        java.util.ArrayList $r5, $r6, $r7;
        boolean $z0;
        int $i0, i1, i2;
        java.lang.Object[] $r8;
        com.android.server.wm.WindowManagerService$WindowChangeListener $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        $z0 = virtualinvoke $r5.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        $i0 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        r1 = newarray (com.android.server.wm.WindowManagerService$WindowChangeListener)[$i0];

        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        r11 = (com.android.server.wm.WindowManagerService$WindowChangeListener[]) $r8;

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        i1 = lengthof r11;

        i2 = 0;

     label8:
        if i2 >= i1 goto label9;

        $r9 = r11[i2];

        interfaceinvoke $r9.<com.android.server.wm.WindowManagerService$WindowChangeListener: void focusChanged()>();

        i2 = i2 + 1;

        goto label8;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private com.android.server.wm.WindowState findWindow(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3, i4, $i5;
        java.util.HashMap r1, $r5;
        com.android.server.wm.WindowList r2;
        com.android.server.wm.WindowState r3, $r12;
        java.lang.Throwable r4, $r11;
        android.util.SparseArray $r6, $r7;
        java.lang.Object $r8, $r10;
        com.android.server.wm.DisplayContent $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        if i0 != -1 goto label01;

        $r12 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState getFocusedWindow()>();

        return $r12;

     label01:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r5;

        entermonitor $r5;

     label02:
        $r6 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i1 = virtualinvoke $r6.<android.util.SparseArray: int size()>();

        i2 = 0;

     label03:
        if i2 >= i1 goto label08;

        $r7 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r9 = (com.android.server.wm.DisplayContent) $r8;

        r2 = virtualinvoke $r9.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        i3 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        i4 = 0;

     label04:
        if i4 >= i3 goto label07;

        $r10 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i4);

        r3 = (com.android.server.wm.WindowState) $r10;

        $i5 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r3);

        if $i5 != i0 goto label06;

        exitmonitor r1;

     label05:
        return r3;

     label06:
        i4 = i4 + 1;

        goto label04;

     label07:
        i2 = i2 + 1;

        goto label03;

     label08:
        exitmonitor r1;

     label09:
        goto label12;

     label10:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r1;

     label11:
        throw r4;

     label12:
        return null;

        catch java.lang.Throwable from label02 to label05 with label10;
        catch java.lang.Throwable from label06 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    void sendNewConfiguration()
    {
        com.android.server.wm.WindowManagerService r0;
        android.app.IActivityManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

     label1:
        $r2 = r0.<com.android.server.wm.WindowManagerService: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r2.<android.app.IActivityManager: void updateConfiguration(android.content.res.Configuration)>(null);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.res.Configuration computeNewConfiguration()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r4;
        android.content.res.Configuration r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfigurationLocked()>();

        if r2 != null goto label2;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mWaitingForConfig>;

        if $z0 == 0 goto label2;

        r0.<com.android.server.wm.WindowManagerService: boolean mWaitingForConfig> = 0;

        r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource> = "new-config";

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return r2;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r1;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    android.content.res.Configuration computeNewConfigurationLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        android.content.res.Configuration r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r2 = new android.content.res.Configuration;

        specialinvoke $r2.<android.content.res.Configuration: void <init>()>();

        r1 = $r2;

        r1.<android.content.res.Configuration: float fontScale> = 0.0F;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean computeScreenConfigurationLocked(android.content.res.Configuration)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        return r1;
    }

    private void adjustDisplaySizeRanges(android.view.DisplayInfo, int, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.DisplayInfo r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        android.view.WindowManagerPolicy $r2, $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.DisplayInfo;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        i3 = interfaceinvoke $r2.<android.view.WindowManagerPolicy: int getConfigDisplayWidth(int,int,int)>(i1, i2, i0);

        $i5 = r1.<android.view.DisplayInfo: int smallestNominalAppWidth>;

        if i3 >= $i5 goto label1;

        r1.<android.view.DisplayInfo: int smallestNominalAppWidth> = i3;

     label1:
        $i6 = r1.<android.view.DisplayInfo: int largestNominalAppWidth>;

        if i3 <= $i6 goto label2;

        r1.<android.view.DisplayInfo: int largestNominalAppWidth> = i3;

     label2:
        $r3 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        i4 = interfaceinvoke $r3.<android.view.WindowManagerPolicy: int getConfigDisplayHeight(int,int,int)>(i1, i2, i0);

        $i7 = r1.<android.view.DisplayInfo: int smallestNominalAppHeight>;

        if i4 >= $i7 goto label3;

        r1.<android.view.DisplayInfo: int smallestNominalAppHeight> = i4;

     label3:
        $i8 = r1.<android.view.DisplayInfo: int largestNominalAppHeight>;

        if i4 <= $i8 goto label4;

        r1.<android.view.DisplayInfo: int largestNominalAppHeight> = i4;

     label4:
        return;
    }

    private int reduceConfigLayout(int, int, float, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, i10, i11;
        float f0, $f1, $f2, $f3, $f4;
        android.view.WindowManagerPolicy $r1, $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        i4 = interfaceinvoke $r1.<android.view.WindowManagerPolicy: int getNonDecorDisplayWidth(int,int,int)>(i2, i3, i1);

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        i5 = interfaceinvoke $r2.<android.view.WindowManagerPolicy: int getNonDecorDisplayHeight(int,int,int)>(i2, i3, i1);

        i6 = i4;

        i7 = i5;

        if i6 >= i7 goto label1;

        i8 = i6;

        i6 = i7;

        i7 = i8;

     label1:
        $f1 = (float) i6;

        $f3 = $f1 / f0;

        i10 = (int) $f3;

        $f2 = (float) i7;

        $f4 = $f2 / f0;

        i11 = (int) $f4;

        $i9 = staticinvoke <android.content.res.Configuration: int reduceScreenLayout(int,int,int)>(i0, i10, i11);

        return $i9;
    }

    private void computeSizeRangesAndScreenLayout(android.view.DisplayInfo, boolean, int, int, float, android.content.res.Configuration)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.DisplayInfo r1;
        boolean z0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, i8, i9, i10, i11;
        float f0, $f1, $f2;
        android.content.res.Configuration r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.DisplayInfo;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        f0 := @parameter4: float;

        r2 := @parameter5: android.content.res.Configuration;

        if z0 == 0 goto label1;

        i2 = i1;

        i3 = i0;

        goto label2;

     label1:
        i2 = i0;

        i3 = i1;

     label2:
        r1.<android.view.DisplayInfo: int smallestNominalAppWidth> = 1073741824;

        r1.<android.view.DisplayInfo: int smallestNominalAppHeight> = 1073741824;

        r1.<android.view.DisplayInfo: int largestNominalAppWidth> = 0;

        r1.<android.view.DisplayInfo: int largestNominalAppHeight> = 0;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void adjustDisplaySizeRanges(android.view.DisplayInfo,int,int,int)>(r1, 0, i2, i3);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void adjustDisplaySizeRanges(android.view.DisplayInfo,int,int,int)>(r1, 1, i3, i2);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void adjustDisplaySizeRanges(android.view.DisplayInfo,int,int,int)>(r1, 2, i2, i3);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void adjustDisplaySizeRanges(android.view.DisplayInfo,int,int,int)>(r1, 3, i3, i2);

        $i5 = r2.<android.content.res.Configuration: int screenLayout>;

        i4 = staticinvoke <android.content.res.Configuration: int resetScreenLayout(int)>($i5);

        i8 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int reduceConfigLayout(int,int,float,int,int)>(i4, 0, f0, i2, i3);

        i9 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int reduceConfigLayout(int,int,float,int,int)>(i8, 1, f0, i3, i2);

        i10 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int reduceConfigLayout(int,int,float,int,int)>(i9, 2, f0, i2, i3);

        i11 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int reduceConfigLayout(int,int,float,int,int)>(i10, 3, f0, i3, i2);

        $i6 = r1.<android.view.DisplayInfo: int smallestNominalAppWidth>;

        $f1 = (float) $i6;

        $f2 = $f1 / f0;

        $i7 = (int) $f2;

        r2.<android.content.res.Configuration: int smallestScreenWidthDp> = $i7;

        r2.<android.content.res.Configuration: int screenLayout> = i11;

        return;
    }

    private int reduceCompatConfigWidthSize(int, int, android.util.DisplayMetrics, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        android.util.DisplayMetrics r1;
        float f0, $f1, $f2, $f3, $f4, $f5;
        android.view.WindowManagerPolicy $r2, $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.util.DisplayMetrics;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i5 = interfaceinvoke $r2.<android.view.WindowManagerPolicy: int getNonDecorDisplayWidth(int,int,int)>(i2, i3, i1);

        r1.<android.util.DisplayMetrics: int noncompatWidthPixels> = $i5;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i6 = interfaceinvoke $r3.<android.view.WindowManagerPolicy: int getNonDecorDisplayHeight(int,int,int)>(i2, i3, i1);

        r1.<android.util.DisplayMetrics: int noncompatHeightPixels> = $i6;

        f0 = staticinvoke <android.content.res.CompatibilityInfo: float computeCompatibleScaling(android.util.DisplayMetrics,android.util.DisplayMetrics)>(r1, null);

        $i7 = r1.<android.util.DisplayMetrics: int noncompatWidthPixels>;

        $f1 = (float) $i7;

        $f4 = $f1 / f0;

        $f2 = r1.<android.util.DisplayMetrics: float density>;

        $f3 = $f4 / $f2;

        $f5 = $f3 + 0.5F;

        i4 = (int) $f5;

        if i0 == 0 goto label1;

        if i4 >= i0 goto label2;

     label1:
        i0 = i4;

     label2:
        return i0;
    }

    private int computeCompatSmallestWidth(boolean, android.util.DisplayMetrics, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        android.util.DisplayMetrics r1, r2, $r3;
        int i0, i1, i2, i3, i4, i5, i6, i7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.util.DisplayMetrics;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.util.DisplayMetrics mTmpDisplayMetrics>;

        virtualinvoke $r3.<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>(r1);

        r2 = r0.<com.android.server.wm.WindowManagerService: android.util.DisplayMetrics mTmpDisplayMetrics>;

        if z0 == 0 goto label1;

        i2 = i1;

        i3 = i0;

        goto label2;

     label1:
        i2 = i0;

        i3 = i1;

     label2:
        i4 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int reduceCompatConfigWidthSize(int,int,android.util.DisplayMetrics,int,int)>(0, 0, r2, i2, i3);

        i5 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int reduceCompatConfigWidthSize(int,int,android.util.DisplayMetrics,int,int)>(i4, 1, r2, i3, i2);

        i6 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int reduceCompatConfigWidthSize(int,int,android.util.DisplayMetrics,int,int)>(i5, 2, r2, i2, i3);

        i7 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int reduceCompatConfigWidthSize(int,int,android.util.DisplayMetrics,int,int)>(i6, 3, r2, i3, i2);

        return i7;
    }

    boolean computeScreenConfigurationLocked(android.content.res.Configuration)
    {
        com.android.server.wm.WindowManagerService r0;
        android.content.res.Configuration r1;
        com.android.server.wm.DisplayContent r2;
        boolean z0, $z1, $z2, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12;
        int i0, i1, i2, i3, i4, i5, i7, i8, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i38, $i39, $i40, i41, i42;
        android.view.DisplayInfo r3;
        java.lang.Object r4, $r10;
        java.lang.Throwable r5, $r22;
        byte b6, b9, $b36, $b37, b43;
        android.view.InputDevice[] r6;
        android.view.InputDevice r7;
        android.view.WindowManagerPolicy $r8, $r9, $r15, $r17, $r21;
        android.content.res.CompatibilityInfo $r11;
        android.util.DisplayMetrics $r12, $r13, $r16, r23;
        android.hardware.display.DisplayManagerInternal $r14;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17;
        com.android.server.input.InputManagerService $r18;
        com.android.server.wm.WindowManagerService$H $r19, $r20;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.content.res.Configuration;

        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayReady>;

        if $z1 != 0 goto label01;

        return 0;

     label01:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $i11 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        if $i11 == 1 goto label02;

        $i38 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        if $i38 != 3 goto label03;

     label02:
        $z11 = 1;

        goto label04;

     label03:
        $z11 = 0;

     label04:
        z0 = $z11;

        if z0 == 0 goto label05;

        $i40 = r2.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        goto label06;

     label05:
        $i40 = r2.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

     label06:
        i0 = $i40;

        if z0 == 0 goto label07;

        $i39 = r2.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        goto label08;

     label07:
        $i39 = r2.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

     label08:
        i1 = $i39;

        i2 = i0;

        i3 = i1;

        $z2 = r0.<com.android.server.wm.WindowManagerService: boolean mAltOrientation>;

        if $z2 == 0 goto label11;

        if i0 <= i1 goto label10;

        $f17 = (float) i1;

        $f16 = $f17 / 1.3F;

        i4 = (int) $f16;

        if i4 >= i0 goto label09;

        i2 = i4;

     label09:
        goto label11;

     label10:
        $f15 = (float) i0;

        $f14 = $f15 / 1.3F;

        i41 = (int) $f14;

        if i41 >= i1 goto label11;

        i3 = i41;

     label11:
        if r1 == null goto label14;

        if i2 > i3 goto label12;

        $b36 = 1;

        goto label13;

     label12:
        $b36 = 2;

     label13:
        r1.<android.content.res.Configuration: int orientation> = $b36;

     label14:
        $r8 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i12 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        i42 = interfaceinvoke $r8.<android.view.WindowManagerPolicy: int getNonDecorDisplayWidth(int,int,int)>(i2, i3, $i12);

        $r9 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i13 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        i5 = interfaceinvoke $r9.<android.view.WindowManagerPolicy: int getNonDecorDisplayHeight(int,int,int)>(i2, i3, $i13);

        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        $r10 = r2.<com.android.server.wm.DisplayContent: java.lang.Object mDisplaySizeLock>;

        r4 = $r10;

        entermonitor $r10;

     label15:
        $i14 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        r3.<android.view.DisplayInfo: int rotation> = $i14;

        r3.<android.view.DisplayInfo: int logicalWidth> = i2;

        r3.<android.view.DisplayInfo: int logicalHeight> = i3;

        $i15 = r2.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        r3.<android.view.DisplayInfo: int logicalDensityDpi> = $i15;

        r3.<android.view.DisplayInfo: int appWidth> = i42;

        r3.<android.view.DisplayInfo: int appHeight> = i5;

        $r12 = r0.<com.android.server.wm.WindowManagerService: android.util.DisplayMetrics mRealDisplayMetrics>;

        $r11 = <android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo DEFAULT_COMPATIBILITY_INFO>;

        virtualinvoke r3.<android.view.DisplayInfo: void getLogicalMetrics(android.util.DisplayMetrics,android.content.res.CompatibilityInfo,android.os.IBinder)>($r12, $r11, null);

        $r13 = r0.<com.android.server.wm.WindowManagerService: android.util.DisplayMetrics mDisplayMetrics>;

        virtualinvoke r3.<android.view.DisplayInfo: void getAppMetrics(android.util.DisplayMetrics)>($r13);

        $r14 = r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $i16 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        virtualinvoke $r14.<android.hardware.display.DisplayManagerInternal: void setDisplayInfoOverrideFromWindowManager(int,android.view.DisplayInfo)>($i16, r3);

        exitmonitor r4;

     label16:
        goto label19;

     label17:
        $r22 := @caughtexception;

        r5 = $r22;

        exitmonitor r4;

     label18:
        throw r5;

     label19:
        r23 = r0.<com.android.server.wm.WindowManagerService: android.util.DisplayMetrics mDisplayMetrics>;

        $r16 = r0.<com.android.server.wm.WindowManagerService: android.util.DisplayMetrics mCompatDisplayMetrics>;

        $f0 = staticinvoke <android.content.res.CompatibilityInfo: float computeCompatibleScaling(android.util.DisplayMetrics,android.util.DisplayMetrics)>(r23, $r16);

        r0.<com.android.server.wm.WindowManagerService: float mCompatibleScreenScale> = $f0;

        if r1 == null goto label34;

        $r15 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i17 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        $i18 = interfaceinvoke $r15.<android.view.WindowManagerPolicy: int getConfigDisplayWidth(int,int,int)>(i2, i3, $i17);

        $f1 = (float) $i18;

        $f3 = r23.<android.util.DisplayMetrics: float density>;

        $f2 = $f1 / $f3;

        $i21 = (int) $f2;

        r1.<android.content.res.Configuration: int screenWidthDp> = $i21;

        $r17 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i20 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        $i19 = interfaceinvoke $r17.<android.view.WindowManagerPolicy: int getConfigDisplayHeight(int,int,int)>(i2, i3, $i20);

        $f5 = (float) $i19;

        $f6 = r23.<android.util.DisplayMetrics: float density>;

        $f4 = $f5 / $f6;

        $i22 = (int) $f4;

        r1.<android.content.res.Configuration: int screenHeightDp> = $i22;

        $f9 = r23.<android.util.DisplayMetrics: float density>;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void computeSizeRangesAndScreenLayout(android.view.DisplayInfo,boolean,int,int,float,android.content.res.Configuration)>(r3, z0, i2, i3, $f9, r1);

        $i23 = r1.<android.content.res.Configuration: int screenWidthDp>;

        $f7 = (float) $i23;

        $f8 = r0.<com.android.server.wm.WindowManagerService: float mCompatibleScreenScale>;

        $f11 = $f7 / $f8;

        $i25 = (int) $f11;

        r1.<android.content.res.Configuration: int compatScreenWidthDp> = $i25;

        $i24 = r1.<android.content.res.Configuration: int screenHeightDp>;

        $f12 = (float) $i24;

        $f10 = r0.<com.android.server.wm.WindowManagerService: float mCompatibleScreenScale>;

        $f13 = $f12 / $f10;

        $i28 = (int) $f13;

        r1.<android.content.res.Configuration: int compatScreenHeightDp> = $i28;

        $i29 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int computeCompatSmallestWidth(boolean,android.util.DisplayMetrics,int,int)>(z0, r23, i2, i3);

        r1.<android.content.res.Configuration: int compatSmallestScreenWidthDp> = $i29;

        $i26 = r2.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        r1.<android.content.res.Configuration: int densityDpi> = $i26;

        r1.<android.content.res.Configuration: int touchscreen> = 1;

        r1.<android.content.res.Configuration: int keyboard> = 1;

        r1.<android.content.res.Configuration: int navigation> = 1;

        b43 = 0;

        b6 = 0;

        $r18 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        r6 = virtualinvoke $r18.<com.android.server.input.InputManagerService: android.view.InputDevice[] getInputDevices()>();

        i7 = lengthof r6;

        i8 = 0;

     label20:
        if i8 >= i7 goto label28;

        r7 = r6[i8];

        $z8 = virtualinvoke r7.<android.view.InputDevice: boolean isVirtual()>();

        if $z8 != 0 goto label27;

        i10 = virtualinvoke r7.<android.view.InputDevice: int getSources()>();

        $z10 = virtualinvoke r7.<android.view.InputDevice: boolean isExternal()>();

        if $z10 == 0 goto label21;

        $b37 = 2;

        goto label22;

     label21:
        $b37 = 1;

     label22:
        b9 = $b37;

        $z7 = r0.<com.android.server.wm.WindowManagerService: boolean mIsTouchDevice>;

        if $z7 == 0 goto label23;

        $i34 = i10 & 4098;

        if $i34 != 4098 goto label24;

        r1.<android.content.res.Configuration: int touchscreen> = 3;

        goto label24;

     label23:
        r1.<android.content.res.Configuration: int touchscreen> = 1;

     label24:
        $i31 = i10 & 65540;

        if $i31 != 65540 goto label25;

        r1.<android.content.res.Configuration: int navigation> = 3;

        b6 = b6 | b9;

        goto label26;

     label25:
        $i33 = i10 & 513;

        if $i33 != 513 goto label26;

        $i35 = r1.<android.content.res.Configuration: int navigation>;

        if $i35 != 1 goto label26;

        r1.<android.content.res.Configuration: int navigation> = 2;

        b6 = b6 | b9;

     label26:
        $i32 = virtualinvoke r7.<android.view.InputDevice: int getKeyboardType()>();

        if $i32 != 2 goto label27;

        r1.<android.content.res.Configuration: int keyboard> = 2;

        b43 = b43 | b9;

     label27:
        i8 = i8 + 1;

        goto label20;

     label28:
        $i27 = r1.<android.content.res.Configuration: int navigation>;

        if $i27 != 1 goto label29;

        $z9 = r0.<com.android.server.wm.WindowManagerService: boolean mHasPermanentDpad>;

        if $z9 == 0 goto label29;

        r1.<android.content.res.Configuration: int navigation> = 2;

        b6 = b6 | 1;

     label29:
        $i30 = r1.<android.content.res.Configuration: int keyboard>;

        if $i30 == 1 goto label30;

        $z4 = 1;

        goto label31;

     label30:
        $z4 = 0;

     label31:
        z12 = $z4;

        $z5 = r0.<com.android.server.wm.WindowManagerService: boolean mHardKeyboardAvailable>;

        if z12 == $z5 goto label32;

        r0.<com.android.server.wm.WindowManagerService: boolean mHardKeyboardAvailable> = z12;

        $r19 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r19.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(22);

        $r20 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r20.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(22);

     label32:
        $z6 = r0.<com.android.server.wm.WindowManagerService: boolean mShowImeWithHardKeyboard>;

        if $z6 == 0 goto label33;

        r1.<android.content.res.Configuration: int keyboard> = 1;

     label33:
        r1.<android.content.res.Configuration: int keyboardHidden> = 1;

        r1.<android.content.res.Configuration: int hardKeyboardHidden> = 1;

        r1.<android.content.res.Configuration: int navigationHidden> = 1;

        $r21 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r21.<android.view.WindowManagerPolicy: void adjustConfigurationLw(android.content.res.Configuration,int,int)>(r1, b43, b6);

     label34:
        return 1;

        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public boolean isHardKeyboardAvailable()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mHardKeyboardAvailable>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void updateShowImeWithHardKeyboard()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1, $z3;
        java.util.HashMap r1, $r5;
        java.lang.Throwable r2, $r7;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        int $i0, $i1;
        com.android.server.wm.WindowManagerService$H $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = r0.<com.android.server.wm.WindowManagerService: int mCurrentUserId>;

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r4, "show_ime_with_hard_keyboard", 0, $i0);

        if $i1 != 1 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r5;

        entermonitor $r5;

     label3:
        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mShowImeWithHardKeyboard>;

        if $z1 == z0 goto label4;

        r0.<com.android.server.wm.WindowManagerService: boolean mShowImeWithHardKeyboard> = z0;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r6.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(18);

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setOnHardKeyboardStatusChangeListener(com.android.server.wm.WindowManagerService$OnHardKeyboardStatusChangeListener)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowManagerService$OnHardKeyboardStatusChangeListener r1;
        java.util.HashMap r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowManagerService$OnHardKeyboardStatusChangeListener;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$OnHardKeyboardStatusChangeListener mHardKeyboardStatusChangeListener> = r1;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void notifyHardKeyboardStatusChange()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;
        com.android.server.wm.WindowManagerService$OnHardKeyboardStatusChangeListener r1;
        java.util.HashMap r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$OnHardKeyboardStatusChangeListener mHardKeyboardStatusChangeListener>;

        z0 = r0.<com.android.server.wm.WindowManagerService: boolean mHardKeyboardAvailable>;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        if r1 == null goto label6;

        interfaceinvoke r1.<com.android.server.wm.WindowManagerService$OnHardKeyboardStatusChangeListener: void onHardKeyboardStatusChange(boolean)>(z0);

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    android.os.IBinder prepareDragSurface(android.view.IWindow, android.view.SurfaceSession, int, int, int, android.view.Surface)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IWindow r1;
        android.view.SurfaceSession r2;
        int i0, i1, i2, $i6;
        android.view.Surface r3;
        long l4;
        android.os.Binder r4, $r17, $r20;
        java.util.HashMap r5, $r13;
        com.android.server.wm.DisplayContent r6;
        android.view.Display r7;
        android.view.SurfaceControl r8, $r15;
        android.os.IBinder r9;
        java.lang.Throwable r10, r12, $r22, $r33;
        android.os.Message r11;
        com.android.server.wm.DragState $r14, $r16, $r21, $r30, $r31;
        com.android.server.wm.WindowManagerService$H $r18, $r19, $r23;
        java.lang.StringBuilder $r24, $r26, $r27, $r28, $r29;
        android.view.Surface$OutOfResourcesException $r25, r34;
        java.lang.String $r32;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.view.SurfaceSession;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.view.Surface;

        staticinvoke <android.os.Binder: int getCallingPid()>();

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r4 = null;

     label01:
        $r13 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r5 = $r13;

        entermonitor $r13;

     label02:
        $r14 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        if $r14 != null goto label03;

        r6 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        r7 = virtualinvoke r6.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $r15 = new android.view.SurfaceControl;

        specialinvoke $r15.<android.view.SurfaceControl: void <init>(android.view.SurfaceSession,java.lang.String,int,int,int,int)>(r2, "drag surface", i1, i2, -3, 4);

        r8 = $r15;

        $i6 = virtualinvoke r7.<android.view.Display: int getLayerStack()>();

        virtualinvoke r8.<android.view.SurfaceControl: void setLayerStack(int)>($i6);

        virtualinvoke r3.<android.view.Surface: void copyFrom(android.view.SurfaceControl)>(r8);

        r9 = interfaceinvoke r1.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r17 = new android.os.Binder;

        specialinvoke $r17.<android.os.Binder: void <init>()>();

        r4 = $r17;

        $r16 = new com.android.server.wm.DragState;

        specialinvoke $r16.<com.android.server.wm.DragState: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder,android.view.SurfaceControl,int,android.os.IBinder)>(r0, r4, r8, 0, r9);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState> = $r16;

        $r21 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        $r20 = new android.os.Binder;

        specialinvoke $r20.<android.os.Binder: void <init>()>();

        $r21.<com.android.server.wm.DragState: android.os.IBinder mToken> = $r20;

        r4 = $r20;

        $r18 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r18.<com.android.server.wm.WindowManagerService$H: void removeMessages(int,java.lang.Object)>(20, r9);

        $r19 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        r11 = virtualinvoke $r19.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(20, r9);

        $r23 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r23.<com.android.server.wm.WindowManagerService$H: boolean sendMessageDelayed(android.os.Message,long)>(r11, 5000L);

        goto label04;

     label03:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Drag already in progress");

     label04:
        goto label06;

     label05:
        $r25 := @caughtexception;

        r34 = $r25;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t allocate drag surface w=");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r26 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" h=");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r32, r34);

        $r31 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        if $r31 == null goto label06;

        $r30 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState>;

        virtualinvoke $r30.<com.android.server.wm.DragState: void reset()>();

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DragState mDragState> = null;

     label06:
        exitmonitor r5;

     label07:
        goto label10;

     label08:
        $r22 := @caughtexception;

        r10 = $r22;

        exitmonitor r5;

     label09:
        throw r10;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        goto label13;

     label11:
        $r33 := @caughtexception;

        r12 = $r33;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

        throw r12;

     label13:
        return r4;

        catch android.view.Surface$OutOfResourcesException from label02 to label04 with label05;
        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void pauseKeyDispatching(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        java.util.HashMap r2, $r5, $r6;
        com.android.server.wm.WindowToken r3;
        java.lang.Throwable r4, $r10;
        boolean $z0;
        java.lang.Object $r7;
        com.android.server.wm.InputMonitor $r8;
        java.lang.SecurityException $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "pauseKeyDispatching()");

        if $z0 != 0 goto label1;

        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r9;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label2:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.wm.WindowToken) $r7;

        if r3 == null goto label3;

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r8.<com.android.server.wm.InputMonitor: void pauseDispatchingLw(com.android.server.wm.WindowToken)>(r3);

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void resumeKeyDispatching(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        java.util.HashMap r2, $r5, $r6;
        com.android.server.wm.WindowToken r3;
        java.lang.Throwable r4, $r10;
        boolean $z0;
        java.lang.Object $r7;
        com.android.server.wm.InputMonitor $r8;
        java.lang.SecurityException $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "resumeKeyDispatching()");

        if $z0 != 0 goto label1;

        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r9;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label2:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.wm.WindowToken) $r7;

        if r3 == null goto label3;

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r8.<com.android.server.wm.InputMonitor: void resumeDispatchingLw(com.android.server.wm.WindowToken)>(r3);

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setEventDispatching(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1, $z2;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r6;
        com.android.server.wm.InputMonitor $r4;
        java.lang.SecurityException $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setEventDispatching()");

        if $z1 != 0 goto label1;

        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_APP_TOKENS permission");

        throw $r5;

     label1:
        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        r0.<com.android.server.wm.WindowManagerService: boolean mEventDispatchingEnabled> = z0;

        $z2 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        if $z2 == 0 goto label3;

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r4.<com.android.server.wm.InputMonitor: void setEventDispatchingLw(boolean)>(z0);

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private com.android.server.wm.WindowState getFocusedWindow()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.server.wm.WindowState $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState getFocusedWindowLocked()>();

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private com.android.server.wm.WindowState getFocusedWindowLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        return $r1;
    }

    public boolean detectSafeMode()
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3, i4, $i5;
        com.android.server.wm.InputMonitor $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.input.InputManagerService $r3, $r4, $r5, $r6, $r7;
        android.view.WindowManagerPolicy $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        java.lang.String $r19;
        java.lang.IllegalArgumentException $r20;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        $z0 = virtualinvoke $r2.<com.android.server.wm.InputMonitor: boolean waitForInputDevicesReady(long)>(1000L);

        if $z0 != 0 goto label01;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Devices still not ready after waiting 1000 milliseconds before attempting to detect safe mode.");

     label01:
        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i0 = virtualinvoke $r3.<com.android.server.input.InputManagerService: int getKeyCodeState(int,int,int)>(-1, -256, 82);

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i1 = virtualinvoke $r4.<com.android.server.input.InputManagerService: int getKeyCodeState(int,int,int)>(-1, -256, 47);

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i2 = virtualinvoke $r5.<com.android.server.input.InputManagerService: int getKeyCodeState(int,int,int)>(-1, 513, 23);

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i3 = virtualinvoke $r6.<com.android.server.input.InputManagerService: int getScanCodeState(int,int,int)>(-1, 65540, 272);

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        i4 = virtualinvoke $r7.<com.android.server.input.InputManagerService: int getKeyCodeState(int,int,int)>(-1, -256, 25);

        if i0 > 0 goto label02;

        if i1 > 0 goto label02;

        if i2 > 0 goto label02;

        if i3 > 0 goto label02;

        if i4 <= 0 goto label03;

     label02:
        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        r0.<com.android.server.wm.WindowManagerService: boolean mSafeMode> = $z4;

     label05:
        $i5 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.sys.safemode", 0);

        if $i5 == 0 goto label06;

        r0.<com.android.server.wm.WindowManagerService: boolean mSafeMode> = 1;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.safemode", "");

     label06:
        goto label08;

     label07:
        $r20 := @caughtexception;

     label08:
        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mSafeMode>;

        if $z1 == 0 goto label09;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SAFE MODE ENABLED (menu=");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" s=");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dpad=");

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trackball=");

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", $r19);

        goto label10;

     label09:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "SAFE MODE not enabled");

     label10:
        $r8 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z2 = r0.<com.android.server.wm.WindowManagerService: boolean mSafeMode>;

        interfaceinvoke $r8.<android.view.WindowManagerPolicy: void setSafeMode(boolean)>($z2);

        $z3 = r0.<com.android.server.wm.WindowManagerService: boolean mSafeMode>;

        return $z3;

        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
    }

    public void displayReady()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r5, $r7, r17;
        com.android.server.wm.DisplayContent r2, $r10;
        java.lang.Throwable r3, r4, $r12, $r13;
        android.app.IActivityManager $r6, $r11;
        android.content.Context $r8;
        android.content.pm.PackageManager $r9;
        boolean $z0;
        android.os.RemoteException $r14, $r15;

        r0 := @this: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void displayReady(int)>(0);

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void readForcedDisplaySizeAndDensityLocked(com.android.server.wm.DisplayContent)>(r2);

        r0.<com.android.server.wm.WindowManagerService: boolean mDisplayReady> = 1;

        exitmonitor r1;

     label02:
        goto label05;

     label03:
        $r13 := @caughtexception;

        r3 = $r13;

        exitmonitor r1;

     label04:
        throw r3;

     label05:
        $r6 = r0.<com.android.server.wm.WindowManagerService: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r6.<android.app.IActivityManager: void updateConfiguration(android.content.res.Configuration)>(null);

     label06:
        goto label08;

     label07:
        $r15 := @caughtexception;

     label08:
        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r17 = $r7;

        entermonitor $r7;

     label09:
        $r8 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r9.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.touchscreen");

        r0.<com.android.server.wm.WindowManagerService: boolean mIsTouchDevice> = $z0;

        $r10 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void configureDisplayPolicyLocked(com.android.server.wm.DisplayContent)>($r10);

        exitmonitor r17;

     label10:
        goto label13;

     label11:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r17;

     label12:
        throw r4;

     label13:
        $r11 = r0.<com.android.server.wm.WindowManagerService: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r11.<android.app.IActivityManager: void updateConfiguration(android.content.res.Configuration)>(null);

     label14:
        goto label16;

     label15:
        $r14 := @caughtexception;

     label16:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch android.os.RemoteException from label13 to label14 with label15;
    }

    private void displayReady(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.HashMap r1, $r8;
        com.android.server.wm.DisplayContent r2;
        java.lang.Object r3, $r10;
        android.view.DisplayInfo r4, r5;
        java.lang.Throwable r6, r7, $r13, $r14;
        com.android.server.wm.WindowAnimator $r9;
        android.hardware.display.DisplayManagerInternal $r11;
        android.graphics.Rect $r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r8;

        entermonitor $r8;

     label01:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        if r2 == null goto label07;

        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        virtualinvoke $r9.<com.android.server.wm.WindowAnimator: void addDisplayLocked(int)>(i0);

        $r10 = r2.<com.android.server.wm.DisplayContent: java.lang.Object mDisplaySizeLock>;

        r3 = $r10;

        entermonitor $r10;

     label02:
        r4 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        $r11 = r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        r5 = virtualinvoke $r11.<android.hardware.display.DisplayManagerInternal: android.view.DisplayInfo getDisplayInfo(int)>(i0);

        if r5 == null goto label03;

        virtualinvoke r4.<android.view.DisplayInfo: void copyFrom(android.view.DisplayInfo)>(r5);

     label03:
        $i1 = r4.<android.view.DisplayInfo: int logicalWidth>;

        r2.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth> = $i1;

        $i3 = r4.<android.view.DisplayInfo: int logicalHeight>;

        r2.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight> = $i3;

        $i2 = r4.<android.view.DisplayInfo: int logicalDensityDpi>;

        r2.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity> = $i2;

        $i5 = r2.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        r2.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth> = $i5;

        $i4 = r2.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        r2.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight> = $i4;

        $i7 = r2.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity>;

        r2.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity> = $i7;

        $r12 = r2.<com.android.server.wm.DisplayContent: android.graphics.Rect mBaseDisplayRect>;

        $i8 = r2.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        $i6 = r2.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        virtualinvoke $r12.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i8, $i6);

        exitmonitor r3;

     label04:
        goto label07;

     label05:
        $r14 := @caughtexception;

        r6 = $r14;

        exitmonitor r3;

     label06:
        throw r6;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r13 := @caughtexception;

        r7 = $r13;

        exitmonitor r1;

     label10:
        throw r7;

     label11:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void systemReady()
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.WindowManagerPolicy $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r1.<android.view.WindowManagerPolicy: void systemReady()>();

        return;
    }

    public android.view.IWindowSession openSession(android.view.IWindowSessionCallback, com.android.internal.view.IInputMethodClient, com.android.internal.view.IInputContext)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.IWindowSessionCallback r1;
        com.android.internal.view.IInputMethodClient r2;
        com.android.internal.view.IInputContext r3;
        com.android.server.wm.Session r4, $r5;
        java.lang.IllegalArgumentException $r6, $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.IWindowSessionCallback;

        r2 := @parameter1: com.android.internal.view.IInputMethodClient;

        r3 := @parameter2: com.android.internal.view.IInputContext;

        if r2 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null client");

        throw $r7;

     label1:
        if r3 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null inputContext");

        throw $r6;

     label2:
        $r5 = new com.android.server.wm.Session;

        specialinvoke $r5.<com.android.server.wm.Session: void <init>(com.android.server.wm.WindowManagerService,android.view.IWindowSessionCallback,com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext)>(r0, r1, r2, r3);

        r4 = $r5;

        return r4;
    }

    public boolean inputMethodClientHasFocus(com.android.internal.view.IInputMethodClient)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.internal.view.IInputMethodClient r1, $r10, $r12, $r19, $r21;
        java.util.HashMap r2, $r6;
        int i0, i1, $i2, $i3, $i4;
        com.android.server.wm.WindowState r3, r4, $r7, $r8, $r11;
        java.lang.Throwable r5, $r34;
        com.android.server.wm.Session $r9, $r13, $r20, $r22;
        android.os.IBinder $r14, $r15, $r23, $r24;
        com.android.server.wm.WindowList $r16, $r26, $r28;
        java.lang.Object $r17, $r29;
        android.view.WindowManager$LayoutParams $r18;
        com.android.server.wm.AppWindowToken $r25, $r27, $r30;
        java.lang.StringBuilder $r31, $r32, $r33;
        java.lang.String $r35;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.internal.view.IInputMethodClient;

        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r6;

        entermonitor $r6;

     label01:
        i0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: int findDesiredInputMethodWindowIndexLocked(boolean)>(0);

        if i0 <= 0 goto label06;

        $r16 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()>();

        $i2 = i0 - 1;

        $r17 = virtualinvoke $r16.<com.android.server.wm.WindowList: java.lang.Object get(int)>($i2);

        r3 = (com.android.server.wm.WindowState) $r17;

        if r3 == null goto label06;

        $r18 = r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i3 = $r18.<android.view.WindowManager$LayoutParams: int type>;

        if $i3 != 3 goto label04;

        $r27 = r3.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r27 == null goto label04;

        i1 = 0;

     label02:
        $r25 = r3.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r26 = $r25.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList windows>;

        $i4 = virtualinvoke $r26.<com.android.server.wm.WindowList: int size()>();

        if i1 >= $i4 goto label04;

        $r30 = r3.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r28 = $r30.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList windows>;

        $r29 = virtualinvoke $r28.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r4 = (com.android.server.wm.WindowState) $r29;

        if r4 == r3 goto label03;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Switching to real app window: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", $r35);

        r3 = r4;

        goto label04;

     label03:
        i1 = i1 + 1;

        goto label02;

     label04:
        $r20 = r3.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $r19 = $r20.<com.android.server.wm.Session: com.android.internal.view.IInputMethodClient mClient>;

        if $r19 == null goto label06;

        $r22 = r3.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $r21 = $r22.<com.android.server.wm.Session: com.android.internal.view.IInputMethodClient mClient>;

        $r24 = interfaceinvoke $r21.<com.android.internal.view.IInputMethodClient: android.os.IBinder asBinder()>();

        $r23 = interfaceinvoke r1.<com.android.internal.view.IInputMethodClient: android.os.IBinder asBinder()>();

        if $r24 != $r23 goto label06;

        exitmonitor r2;

     label05:
        return 1;

     label06:
        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        if $r7 == null goto label08;

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        $r9 = $r8.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $r10 = $r9.<com.android.server.wm.Session: com.android.internal.view.IInputMethodClient mClient>;

        if $r10 == null goto label08;

        $r11 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        $r13 = $r11.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $r12 = $r13.<com.android.server.wm.Session: com.android.internal.view.IInputMethodClient mClient>;

        $r15 = interfaceinvoke $r12.<com.android.internal.view.IInputMethodClient: android.os.IBinder asBinder()>();

        $r14 = interfaceinvoke r1.<com.android.internal.view.IInputMethodClient: android.os.IBinder asBinder()>();

        if $r15 != $r14 goto label08;

        exitmonitor r2;

     label07:
        return 1;

     label08:
        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r34 := @caughtexception;

        r5 = $r34;

        exitmonitor r2;

     label11:
        throw r5;

     label12:
        return 0;

        catch java.lang.Throwable from label01 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void getInitialDisplaySize(int, android.graphics.Point)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, $i2, $i3;
        android.graphics.Point r1;
        java.util.HashMap r2, $r7;
        com.android.server.wm.DisplayContent r3;
        java.lang.Object r4, $r8;
        java.lang.Throwable r5, r6, $r9, $r10;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Point;

        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        if r3 == null goto label06;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = virtualinvoke r3.<com.android.server.wm.DisplayContent: boolean hasAccess(int)>($i1);

        if $z0 == 0 goto label06;

        $r8 = r3.<com.android.server.wm.DisplayContent: java.lang.Object mDisplaySizeLock>;

        r4 = $r8;

        entermonitor $r8;

     label02:
        $i2 = r3.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        r1.<android.graphics.Point: int x> = $i2;

        $i3 = r3.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        r1.<android.graphics.Point: int y> = $i3;

        exitmonitor r4;

     label03:
        goto label06;

     label04:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r4;

     label05:
        throw r5;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r9 := @caughtexception;

        r6 = $r9;

        exitmonitor r2;

     label09:
        throw r6;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void getBaseDisplaySize(int, android.graphics.Point)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, $i2, $i3;
        android.graphics.Point r1;
        java.util.HashMap r2, $r7;
        com.android.server.wm.DisplayContent r3;
        java.lang.Object r4, $r8;
        java.lang.Throwable r5, r6, $r9, $r10;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Point;

        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        if r3 == null goto label06;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = virtualinvoke r3.<com.android.server.wm.DisplayContent: boolean hasAccess(int)>($i1);

        if $z0 == 0 goto label06;

        $r8 = r3.<com.android.server.wm.DisplayContent: java.lang.Object mDisplaySizeLock>;

        r4 = $r8;

        entermonitor $r8;

     label02:
        $i2 = r3.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        r1.<android.graphics.Point: int x> = $i2;

        $i3 = r3.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        r1.<android.graphics.Point: int y> = $i3;

        exitmonitor r4;

     label03:
        goto label06;

     label04:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r4;

     label05:
        throw r5;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r9 := @caughtexception;

        r6 = $r9;

        exitmonitor r2;

     label09:
        throw r6;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void setForcedDisplaySize(int, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        long l3;
        java.util.HashMap r1, $r6;
        com.android.server.wm.DisplayContent r2;
        java.lang.Throwable r3, r4, $r14, $r15;
        android.content.Context $r5, $r7;
        java.lang.StringBuilder $r8, $r10, $r12, $r13;
        android.content.ContentResolver $r9;
        java.lang.String $r11;
        java.lang.IllegalArgumentException $r16;
        java.lang.SecurityException $r17;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i7 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i7 == 0 goto label01;

        $r17 = new java.lang.SecurityException;

        specialinvoke $r17.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.WRITE_SECURE_SETTINGS");

        throw $r17;

     label01:
        if i0 == 0 goto label02;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only set the default display");

        throw $r16;

     label02:
        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r6;

        entermonitor $r6;

     label04:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        if r2 == null goto label05;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 200);

        $i10 = r2.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        $i9 = $i10 * 2;

        i14 = staticinvoke <java.lang.Math: int min(int,int)>($i8, $i9);

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>(i2, 200);

        $i13 = r2.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        $i12 = $i13 * 2;

        i15 = staticinvoke <java.lang.Math: int min(int,int)>($i11, $i12);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void setForcedDisplaySizeLocked(com.android.server.wm.DisplayContent,int,int)>(r2, i14, i15);

        $r7 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r9 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i15);

        $r11 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>($r9, "display_size_forced", $r11);

     label05:
        exitmonitor r1;

     label06:
        goto label09;

     label07:
        $r15 := @caughtexception;

        r3 = $r15;

        exitmonitor r1;

     label08:
        throw r3;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        goto label12;

     label10:
        $r14 := @caughtexception;

        r4 = $r14;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label04 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void readForcedDisplaySizeAndDensityLocked(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        java.lang.String r2, $r14, $r15, $r16, $r23, r29;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i12, $i13, i14;
        java.lang.Object r3, $r10, $r18, r30;
        java.lang.Throwable r4, r5, $r24, $r26;
        android.content.Context $r6, $r8;
        android.content.ContentResolver $r7, $r9;
        java.lang.StringBuilder $r11, $r12, $r13, $r17, $r19, $r20, $r21, $r22;
        java.lang.NumberFormatException $r25, $r27;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        $r6 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r2 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r7, "display_size_forced");

        if r2 == null goto label01;

        $i12 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i12 != 0 goto label02;

     label01:
        r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.config.size_override", null);

     label02:
        if r2 == null goto label12;

        $i6 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i6 <= 0 goto label12;

        i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(44);

        if i0 <= 0 goto label12;

        $i8 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(44);

        if $i8 != i0 goto label12;

     label03:
        $r16 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16);

        $i9 = i0 + 1;

        $r15 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i9);

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15);

        $r18 = r1.<com.android.server.wm.DisplayContent: java.lang.Object mDisplaySizeLock>;

        r3 = $r18;

        entermonitor $r18;

     label04:
        $i10 = r1.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        if $i10 != i1 goto label05;

        $i13 = r1.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        if $i13 == i2 goto label06;

     label05:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FORCED DISPLAY SIZE: ");

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r23);

        r1.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth> = i1;

        r1.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight> = i2;

     label06:
        exitmonitor r3;

     label07:
        goto label10;

     label08:
        $r26 := @caughtexception;

        r4 = $r26;

        exitmonitor r3;

     label09:
        throw r4;

     label10:
        goto label12;

     label11:
        $r27 := @caughtexception;

     label12:
        $r8 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r29 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r9, "display_density_forced");

        if r29 == null goto label13;

        $i7 = virtualinvoke r29.<java.lang.String: int length()>();

        if $i7 != 0 goto label14;

     label13:
        r29 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.config.density_override", null);

     label14:
        if r29 == null goto label23;

        $i3 = virtualinvoke r29.<java.lang.String: int length()>();

        if $i3 <= 0 goto label23;

     label15:
        i14 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r29);

        $r10 = r1.<com.android.server.wm.DisplayContent: java.lang.Object mDisplaySizeLock>;

        r30 = $r10;

        entermonitor $r10;

     label16:
        $i4 = r1.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        if $i4 == i14 goto label17;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FORCED DISPLAY DENSITY: ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r14);

        r1.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity> = i14;

     label17:
        exitmonitor r30;

     label18:
        goto label21;

     label19:
        $r24 := @caughtexception;

        r5 = $r24;

        exitmonitor r30;

     label20:
        throw r5;

     label21:
        goto label23;

     label22:
        $r25 := @caughtexception;

     label23:
        return;

        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.NumberFormatException from label03 to label10 with label11;
        catch java.lang.Throwable from label16 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.NumberFormatException from label15 to label21 with label22;
    }

    private void setForcedDisplaySizeLocked(com.android.server.wm.DisplayContent, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        int i0, i1;
        java.lang.Object r2, $r10;
        java.lang.Throwable r3, $r11;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using new display size: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r9);

        $r10 = r1.<com.android.server.wm.DisplayContent: java.lang.Object mDisplaySizeLock>;

        r2 = $r10;

        entermonitor $r10;

     label1:
        r1.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth> = i0;

        r1.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight> = i1;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void reconfigureDisplayLocked(com.android.server.wm.DisplayContent)>(r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void clearForcedDisplaySize(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i2, $i3, $i4;
        long l1;
        java.util.HashMap r1, $r6;
        com.android.server.wm.DisplayContent r2;
        java.lang.Throwable r3, r4, $r10, $r12;
        android.content.Context $r5, $r8;
        android.content.ContentResolver $r7;
        java.lang.IllegalArgumentException $r9;
        java.lang.SecurityException $r11;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i2 == 0 goto label01;

        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.WRITE_SECURE_SETTINGS");

        throw $r11;

     label01:
        if i0 == 0 goto label02;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only set the default display");

        throw $r9;

     label02:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r6;

        entermonitor $r6;

     label04:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        if r2 == null goto label05;

        $i4 = r2.<com.android.server.wm.DisplayContent: int mInitialDisplayWidth>;

        $i3 = r2.<com.android.server.wm.DisplayContent: int mInitialDisplayHeight>;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void setForcedDisplaySizeLocked(com.android.server.wm.DisplayContent,int,int)>(r2, $i4, $i3);

        $r8 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r7 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>($r7, "display_size_forced", "");

     label05:
        exitmonitor r1;

     label06:
        goto label09;

     label07:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r1;

     label08:
        throw r3;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label12;

     label10:
        $r12 := @caughtexception;

        r4 = $r12;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label04 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public int getInitialDisplayDensity(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, $i2;
        java.util.HashMap r1, $r6;
        com.android.server.wm.DisplayContent r2;
        java.lang.Object r3, $r7;
        java.lang.Throwable r4, r5, $r8, $r9;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r6;

        entermonitor $r6;

     label01:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        if r2 == null goto label07;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: boolean hasAccess(int)>($i1);

        if $z0 == 0 goto label07;

        $r7 = r2.<com.android.server.wm.DisplayContent: java.lang.Object mDisplaySizeLock>;

        r3 = $r7;

        entermonitor $r7;

     label02:
        $i2 = r2.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity>;

        exitmonitor r3;

     label03:
        exitmonitor r1;

     label04:
        return $i2;

     label05:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r3;

     label06:
        throw r4;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        r5 = $r8;

        exitmonitor r1;

     label10:
        throw r5;

     label11:
        return -1;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label04 with label09;
        catch java.lang.Throwable from label05 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public int getBaseDisplayDensity(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, $i2;
        java.util.HashMap r1, $r6;
        com.android.server.wm.DisplayContent r2;
        java.lang.Object r3, $r7;
        java.lang.Throwable r4, r5, $r8, $r9;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r6;

        entermonitor $r6;

     label01:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        if r2 == null goto label07;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: boolean hasAccess(int)>($i1);

        if $z0 == 0 goto label07;

        $r7 = r2.<com.android.server.wm.DisplayContent: java.lang.Object mDisplaySizeLock>;

        r3 = $r7;

        entermonitor $r7;

     label02:
        $i2 = r2.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        exitmonitor r3;

     label03:
        exitmonitor r1;

     label04:
        return $i2;

     label05:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r3;

     label06:
        throw r4;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        r5 = $r8;

        exitmonitor r1;

     label10:
        throw r5;

     label11:
        return -1;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label04 with label09;
        catch java.lang.Throwable from label05 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void setForcedDisplayDensity(int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, $i3;
        long l2;
        java.util.HashMap r1, $r6;
        com.android.server.wm.DisplayContent r2;
        java.lang.Throwable r3, r4, $r12, $r13;
        android.content.Context $r5, $r7;
        android.content.ContentResolver $r8;
        java.lang.String $r9;
        java.lang.SecurityException $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i3 == 0 goto label01;

        $r10 = new java.lang.SecurityException;

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.WRITE_SECURE_SETTINGS");

        throw $r10;

     label01:
        if i0 == 0 goto label02;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only set the default display");

        throw $r11;

     label02:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r6;

        entermonitor $r6;

     label04:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        if r2 == null goto label05;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void setForcedDisplayDensityLocked(com.android.server.wm.DisplayContent,int)>(r2, i1);

        $r7 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>($r8, "display_density_forced", $r9);

     label05:
        exitmonitor r1;

     label06:
        goto label09;

     label07:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r1;

     label08:
        throw r3;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        goto label12;

     label10:
        $r13 := @caughtexception;

        r4 = $r13;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label04 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void setForcedDisplayDensityLocked(com.android.server.wm.DisplayContent, int)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        int i0;
        java.lang.Object r2, $r8;
        java.lang.Throwable r3, $r9;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        i0 := @parameter1: int;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using new display density: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r7);

        $r8 = r1.<com.android.server.wm.DisplayContent: java.lang.Object mDisplaySizeLock>;

        r2 = $r8;

        entermonitor $r8;

     label1:
        r1.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity> = i0;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void reconfigureDisplayLocked(com.android.server.wm.DisplayContent)>(r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void clearForcedDisplayDensity(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i2, $i3;
        long l1;
        java.util.HashMap r1, $r6;
        com.android.server.wm.DisplayContent r2;
        java.lang.Throwable r3, r4, $r11, $r12;
        android.content.Context $r5, $r7;
        android.content.ContentResolver $r8;
        java.lang.SecurityException $r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i2 == 0 goto label01;

        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.WRITE_SECURE_SETTINGS");

        throw $r9;

     label01:
        if i0 == 0 goto label02;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only set the default display");

        throw $r10;

     label02:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r6;

        entermonitor $r6;

     label04:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        if r2 == null goto label05;

        $i3 = r2.<com.android.server.wm.DisplayContent: int mInitialDisplayDensity>;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void setForcedDisplayDensityLocked(com.android.server.wm.DisplayContent,int)>(r2, $i3);

        $r7 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>($r8, "display_density_forced", "");

     label05:
        exitmonitor r1;

     label06:
        goto label09;

     label07:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r1;

     label08:
        throw r3;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label12;

     label10:
        $r12 := @caughtexception;

        r4 = $r12;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label04 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void reconfigureDisplayLocked(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        boolean z0, $z1;
        android.content.res.Configuration $r2, $r3, $r4, $r5, $r7, $r8;
        float $f0;
        com.android.server.wm.WindowManagerService$H $r6;
        int $i0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void configureDisplayPolicyLocked(com.android.server.wm.DisplayContent)>(r1);

        r1.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

        z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateOrientationFromAppTokensLocked(boolean)>(0);

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mTempConfiguration>;

        virtualinvoke $r2.<android.content.res.Configuration: void setToDefaults()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mTempConfiguration>;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mCurConfiguration>;

        $f0 = $r3.<android.content.res.Configuration: float fontScale>;

        $r4.<android.content.res.Configuration: float fontScale> = $f0;

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mTempConfiguration>;

        $z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean computeScreenConfigurationLocked(android.content.res.Configuration)>($r5);

        if $z1 == 0 goto label1;

        $r8 = r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mCurConfiguration>;

        $r7 = r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mTempConfiguration>;

        $i0 = virtualinvoke $r8.<android.content.res.Configuration: int diff(android.content.res.Configuration)>($r7);

        if $i0 == 0 goto label1;

        z0 = 1;

     label1:
        if z0 == 0 goto label2;

        r0.<com.android.server.wm.WindowManagerService: boolean mWaitingForConfig> = 1;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void startFreezingDisplayLocked(boolean,int,int)>(0, 0, 0);

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r6.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(18);

     label2:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        return;
    }

    private void configureDisplayPolicyLocked(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        android.view.DisplayInfo r2;
        android.view.WindowManagerPolicy $r3, $r5;
        android.view.Display $r4, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r4 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $i2 = r1.<com.android.server.wm.DisplayContent: int mBaseDisplayWidth>;

        $i1 = r1.<com.android.server.wm.DisplayContent: int mBaseDisplayHeight>;

        $i0 = r1.<com.android.server.wm.DisplayContent: int mBaseDisplayDensity>;

        interfaceinvoke $r3.<android.view.WindowManagerPolicy: void setInitialDisplaySize(android.view.Display,int,int,int)>($r4, $i2, $i1, $i0);

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r6 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $i6 = r2.<android.view.DisplayInfo: int overscanLeft>;

        $i5 = r2.<android.view.DisplayInfo: int overscanTop>;

        $i4 = r2.<android.view.DisplayInfo: int overscanRight>;

        $i3 = r2.<android.view.DisplayInfo: int overscanBottom>;

        interfaceinvoke $r5.<android.view.WindowManagerPolicy: void setDisplayOverscan(android.view.Display,int,int,int,int)>($r6, $i6, $i5, $i4, $i3);

        return;
    }

    public void setOverscan(int, int, int, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3, i4, $i6;
        long l5;
        java.util.HashMap r1, $r6;
        com.android.server.wm.DisplayContent r2;
        java.lang.Throwable r3, r4, $r7, $r9;
        android.content.Context $r5;
        java.lang.SecurityException $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i6 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i6 == 0 goto label01;

        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>("Must hold permission android.permission.WRITE_SECURE_SETTINGS");

        throw $r8;

     label01:
        l5 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r6;

        entermonitor $r6;

     label03:
        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        if r2 == null goto label04;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void setOverscanLocked(com.android.server.wm.DisplayContent,int,int,int,int)>(r2, i1, i2, i3, i4);

     label04:
        exitmonitor r1;

     label05:
        goto label08;

     label06:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label07:
        throw r3;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        goto label11;

     label09:
        $r9 := @caughtexception;

        r4 = $r9;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

        throw r4;

     label11:
        return;

        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void setOverscanLocked(com.android.server.wm.DisplayContent, int, int, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        int i0, i1, i2, i3;
        android.view.DisplayInfo r2;
        java.lang.Object r3, $r5;
        java.lang.Throwable r4, $r9;
        java.lang.String $r6;
        com.android.server.wm.DisplaySettings $r7, $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        $r5 = r1.<com.android.server.wm.DisplayContent: java.lang.Object mDisplaySizeLock>;

        r3 = $r5;

        entermonitor $r5;

     label1:
        r2.<android.view.DisplayInfo: int overscanLeft> = i0;

        r2.<android.view.DisplayInfo: int overscanTop> = i1;

        r2.<android.view.DisplayInfo: int overscanRight> = i2;

        r2.<android.view.DisplayInfo: int overscanBottom> = i3;

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplaySettings mDisplaySettings>;

        $r6 = r2.<android.view.DisplayInfo: java.lang.String name>;

        virtualinvoke $r7.<com.android.server.wm.DisplaySettings: void setOverscanLocked(java.lang.String,int,int,int,int)>($r6, i0, i1, i2, i3);

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplaySettings mDisplaySettings>;

        virtualinvoke $r8.<com.android.server.wm.DisplaySettings: void writeSettingsLocked()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void reconfigureDisplayLocked(com.android.server.wm.DisplayContent)>(r1);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    final com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session, android.view.IWindow, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1;
        android.view.IWindow r2;
        boolean z0;
        android.os.IBinder $r3;
        com.android.server.wm.WindowState $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        r2 := @parameter1: android.view.IWindow;

        z0 := @parameter2: boolean;

        $r3 = interfaceinvoke r2.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r4 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.os.IBinder,boolean)>(r1, $r3, z0);

        return $r4;
    }

    final com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session, android.os.IBinder, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1, $r7, $r13;
        android.os.IBinder r2;
        boolean z0;
        com.android.server.wm.WindowState r3;
        java.lang.IllegalArgumentException r4, $r8, $r19, r24;
        java.util.HashMap $r5;
        java.lang.Object $r6;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r20, $r21, $r23;
        java.lang.String $r17, $r22;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        r2 := @parameter1: android.os.IBinder;

        z0 := @parameter2: boolean;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (com.android.server.wm.WindowState) $r6;

        if r3 != null goto label2;

        $r19 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested window ");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        r4 = $r19;

        if z0 == 0 goto label1;

        throw r4;

     label1:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Failed looking up window", r4);

        return null;

     label2:
        if r1 == null goto label4;

        $r7 = r3.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        if $r7 == r1 goto label4;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested window ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is in session ");

        $r13 = r3.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", not ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        r24 = $r8;

        if z0 == 0 goto label3;

        throw r24;

     label3:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Failed looking up window", r24);

        return null;

     label4:
        return r3;
    }

    final void rebuildAppWindowListLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void rebuildAppWindowListLocked(com.android.server.wm.DisplayContent)>($r1);

        return;
    }

    private void rebuildAppWindowListLocked(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.WindowList r2;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i16, $i17, $i18, $i19, i20, i21, i22, i23, i24, i25, i26, i27;
        com.android.server.wm.WindowState r3, r4, r46;
        com.android.server.wm.AppTokenList r5, r6;
        com.android.server.wm.AppWindowToken r7, $r36;
        com.android.server.wm.WindowState[] $r8, $r19, $r40, $r41;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r20, $r24, $r25;
        java.lang.Throwable $r16;
        java.lang.String $r17, $r23, $r27;
        java.lang.RuntimeException $r18;
        boolean $z0, $z1;
        java.io.StringWriter $r21, r47;
        com.android.internal.util.FastPrintWriter $r22, r48;
        com.android.server.wm.WindowStateAnimator $r26;
        com.android.server.wm.TaskStack $r28, $r33;
        java.lang.Object $r29, $r30, $r32, $r34, $r35, $r38, $r43;
        com.android.server.wm.Task $r31;
        android.view.WindowManager$LayoutParams $r37, $r42;
        com.android.server.wm.WindowToken $r39;
        java.util.ArrayList r44, r45;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        i0 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        i2 = -1;

        i3 = 0;

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mRebuildTmp>;

        $i9 = lengthof $r8;

        if $i9 >= i0 goto label01;

        $i17 = i0 + 10;

        $r41 = newarray (com.android.server.wm.WindowState)[$i17];

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mRebuildTmp> = $r41;

     label01:
        i1 = 0;

     label02:
        if i1 >= i0 goto label06;

        $r35 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.wm.WindowState) $r35;

        $r36 = r3.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r36 == null goto label03;

        $r43 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object remove(int)>(i1);

        r4 = (com.android.server.wm.WindowState) $r43;

        r4.<com.android.server.wm.WindowState: boolean mRebuilding> = 1;

        $r40 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mRebuildTmp>;

        $r40[i3] = r4;

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = 1;

        i0 = i0 + -1;

        i3 = i3 + 1;

        goto label02;

     label03:
        $i16 = i1 - 1;

        if i2 != $i16 goto label05;

        $r37 = r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i18 = $r37.<android.view.WindowManager$LayoutParams: int type>;

        if $i18 == 2013 goto label04;

        $r42 = r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i19 = $r42.<android.view.WindowManager$LayoutParams: int type>;

        if $i19 != 2025 goto label05;

     label04:
        i2 = i1;

     label05:
        i1 = i1 + 1;

        goto label02;

     label06:
        i20 = i2 + 1;

        i21 = i20;

        r44 = virtualinvoke r1.<com.android.server.wm.DisplayContent: java.util.ArrayList getStacks()>();

        i22 = virtualinvoke r44.<java.util.ArrayList: int size()>();

        i4 = 0;

     label07:
        if i4 >= i22 goto label10;

        $r34 = virtualinvoke r44.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r33 = (com.android.server.wm.TaskStack) $r34;

        r5 = $r33.<com.android.server.wm.TaskStack: com.android.server.wm.AppTokenList mExitingAppTokens>;

        i5 = virtualinvoke r5.<com.android.server.wm.AppTokenList: int size()>();

        i6 = 0;

     label08:
        if i6 >= i5 goto label09;

        $r38 = virtualinvoke r5.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i6);

        $r39 = (com.android.server.wm.WindowToken) $r38;

        i21 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int reAddAppWindowsLocked(com.android.server.wm.DisplayContent,int,com.android.server.wm.WindowToken)>(r1, i21, $r39);

        i6 = i6 + 1;

        goto label08;

     label09:
        i4 = i4 + 1;

        goto label07;

     label10:
        i23 = 0;

     label11:
        if i23 >= i22 goto label18;

        $r29 = virtualinvoke r44.<java.util.ArrayList: java.lang.Object get(int)>(i23);

        $r28 = (com.android.server.wm.TaskStack) $r29;

        r45 = virtualinvoke $r28.<com.android.server.wm.TaskStack: java.util.ArrayList getTasks()>();

        i24 = virtualinvoke r45.<java.util.ArrayList: int size()>();

        i25 = 0;

     label12:
        if i25 >= i24 goto label17;

        $r32 = virtualinvoke r45.<java.util.ArrayList: java.lang.Object get(int)>(i25);

        $r31 = (com.android.server.wm.Task) $r32;

        r6 = $r31.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        i7 = virtualinvoke r6.<com.android.server.wm.AppTokenList: int size()>();

        i8 = 0;

     label13:
        if i8 >= i7 goto label16;

        $r30 = virtualinvoke r6.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i8);

        r7 = (com.android.server.wm.AppWindowToken) $r30;

        $z1 = r7.<com.android.server.wm.AppWindowToken: boolean mDeferRemoval>;

        if $z1 == 0 goto label14;

        goto label15;

     label14:
        i21 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int reAddAppWindowsLocked(com.android.server.wm.DisplayContent,int,com.android.server.wm.WindowToken)>(r1, i21, r7);

     label15:
        i8 = i8 + 1;

        goto label13;

     label16:
        i25 = i25 + 1;

        goto label12;

     label17:
        i23 = i23 + 1;

        goto label11;

     label18:
        i26 = i21 - i20;

        if i26 == i3 goto label22;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("On display=");

        $i10 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Rebuild removed ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" windows but added ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i26);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String)>("here");

        $r16 = virtualinvoke $r18.<java.lang.RuntimeException: java.lang.Throwable fillInStackTrace()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r17, $r16);

        i27 = 0;

     label19:
        if i27 >= i3 goto label21;

        $r19 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mRebuildTmp>;

        r46 = $r19[i27];

        $z0 = r46.<com.android.server.wm.WindowState: boolean mRebuilding>;

        if $z0 == 0 goto label20;

        $r21 = new java.io.StringWriter;

        specialinvoke $r21.<java.io.StringWriter: void <init>()>();

        r47 = $r21;

        $r22 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r22.<com.android.internal.util.FastPrintWriter: void <init>(java.io.Writer,boolean,int)>(r47, 0, 1024);

        r48 = $r22;

        virtualinvoke r46.<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r48, "", 1);

        virtualinvoke r48.<java.io.PrintWriter: void flush()>();

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This window was lost: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r46);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r23);

        $r27 = virtualinvoke r47.<java.io.StringWriter: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r27);

        $r26 = r46.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r26.<com.android.server.wm.WindowStateAnimator: void destroySurfaceLocked()>();

     label20:
        i27 = i27 + 1;

        goto label19;

     label21:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Current app token list:");

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpAppTokensLocked()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Final window list:");

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpWindowsLocked()>();

     label22:
        return;
    }

    private final void assignLayersLocked(com.android.server.wm.WindowList)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowList r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        com.android.server.wm.WindowState r2, $r8;
        com.android.server.wm.WindowStateAnimator r3;
        com.android.server.wm.AppWindowToken r4, $r11, $r14;
        com.android.server.wm.TaskStack r5;
        com.android.server.wm.AccessibilityController $r6, $r10;
        java.lang.Object $r7, $r9;
        com.android.server.wm.AppWindowAnimator $r12, $r13;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowList;

        i0 = virtualinvoke r1.<com.android.server.wm.WindowList: int size()>();

        i1 = 0;

        i2 = 0;

        z0 = 0;

        i3 = 0;

     label01:
        if i3 >= i0 goto label13;

        $r9 = virtualinvoke r1.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        r2 = (com.android.server.wm.WindowState) $r9;

        r3 = r2.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        z1 = 0;

        i4 = r2.<com.android.server.wm.WindowState: int mLayer>;

        $i9 = r2.<com.android.server.wm.WindowState: int mBaseLayer>;

        if $i9 == i1 goto label02;

        $z5 = r2.<com.android.server.wm.WindowState: boolean mIsImWindow>;

        if $z5 != 0 goto label02;

        if i3 <= 0 goto label03;

        $z6 = r2.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z6 == 0 goto label03;

     label02:
        i2 = i2 + 5;

        r2.<com.android.server.wm.WindowState: int mLayer> = i2;

        goto label04;

     label03:
        $i22 = r2.<com.android.server.wm.WindowState: int mBaseLayer>;

        i2 = $i22;

        i1 = $i22;

        r2.<com.android.server.wm.WindowState: int mLayer> = i2;

     label04:
        $i8 = r2.<com.android.server.wm.WindowState: int mLayer>;

        if $i8 == i4 goto label05;

        z1 = 1;

        z0 = 1;

     label05:
        r4 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        i25 = r3.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        $r11 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mTargetAppToken>;

        if $r11 == null goto label06;

        $i23 = r2.<com.android.server.wm.WindowState: int mLayer>;

        $r14 = r2.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mTargetAppToken>;

        $r13 = $r14.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $i20 = $r13.<com.android.server.wm.AppWindowAnimator: int animLayerAdjustment>;

        $i24 = $i23 + $i20;

        r3.<com.android.server.wm.WindowStateAnimator: int mAnimLayer> = $i24;

        goto label08;

     label06:
        if r4 == null goto label07;

        $i18 = r2.<com.android.server.wm.WindowState: int mLayer>;

        $r12 = r4.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $i17 = $r12.<com.android.server.wm.AppWindowAnimator: int animLayerAdjustment>;

        $i21 = $i18 + $i17;

        r3.<com.android.server.wm.WindowStateAnimator: int mAnimLayer> = $i21;

        goto label08;

     label07:
        $i10 = r2.<com.android.server.wm.WindowState: int mLayer>;

        r3.<com.android.server.wm.WindowStateAnimator: int mAnimLayer> = $i10;

     label08:
        $z3 = r2.<com.android.server.wm.WindowState: boolean mIsImWindow>;

        if $z3 == 0 goto label09;

        $i14 = r3.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        $i13 = r0.<com.android.server.wm.WindowManagerService: int mInputMethodAnimLayerAdjustment>;

        $i19 = $i14 + $i13;

        r3.<com.android.server.wm.WindowStateAnimator: int mAnimLayer> = $i19;

        goto label10;

     label09:
        $z2 = r2.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z2 == 0 goto label10;

        $i15 = r3.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        $i12 = r0.<com.android.server.wm.WindowManagerService: int mWallpaperAnimLayerAdjustment>;

        $i16 = $i15 + $i12;

        r3.<com.android.server.wm.WindowStateAnimator: int mAnimLayer> = $i16;

     label10:
        $i11 = r3.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        if $i11 == i25 goto label11;

        z1 = 1;

        z0 = 1;

     label11:
        r5 = virtualinvoke r2.<com.android.server.wm.WindowState: com.android.server.wm.TaskStack getStack()>();

        if z1 == 0 goto label12;

        if r5 == null goto label12;

        $z4 = virtualinvoke r5.<com.android.server.wm.TaskStack: boolean isDimming(com.android.server.wm.WindowStateAnimator)>(r3);

        if $z4 == 0 goto label12;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void scheduleAnimationLocked()>();

     label12:
        i3 = i3 + 1;

        goto label01;

     label13:
        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r6 == null goto label14;

        if z0 == 0 goto label14;

        $i5 = virtualinvoke r1.<com.android.server.wm.WindowList: int size()>();

        $i6 = $i5 - 1;

        $r7 = virtualinvoke r1.<com.android.server.wm.WindowList: java.lang.Object get(int)>($i6);

        $r8 = (com.android.server.wm.WindowState) $r7;

        $i7 = virtualinvoke $r8.<com.android.server.wm.WindowState: int getDisplayId()>();

        if $i7 != 0 goto label14;

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r10.<com.android.server.wm.AccessibilityController: void onWindowLayersChangedLocked()>();

     label14:
        return;
    }

    private final void performLayoutAndPlaceSurfacesLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerService$H $r1;
        boolean $z0;
        com.android.server.wm.WindowManagerService$LayoutFields $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 = 6;

     label1:
        r0.<com.android.server.wm.WindowManagerService: boolean mTraversalScheduled> = 0;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLockedLoop()>();

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(4);

        i0 = i0 + -1;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mTraversalScheduled>;

        if $z0 == 0 goto label2;

        if i0 > 0 goto label1;

     label2:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r2.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mWallpaperActionPending> = 0;

        return;
    }

    private final void performLayoutAndPlaceSurfacesLockedLoop()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int i0, $i1, $i3, $i4;
        com.android.server.wm.WindowState r1;
        java.lang.Throwable r3, $r25;
        java.util.ArrayList $r4, $r5, $r8, $r12;
        com.android.server.wm.WindowManagerService$H $r6, $r7;
        java.lang.Object $r9, $r11, r27, r28;
        java.lang.StringBuilder $r13, $r14, $r15, $r17, $r20, $r21;
        com.android.server.wm.Session $r16;
        java.lang.String $r18, $r19, $r24;
        java.lang.InterruptedException $r22;
        java.lang.RuntimeException $r23, $r26, r29, r30;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mInLayout>;

        if $z1 == 0 goto label01;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("performLayoutAndPlaceSurfacesLocked called while in layout. Callers=");

        $r19 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(3);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r24);

        return;

     label01:
        $z2 = r0.<com.android.server.wm.WindowManagerService: boolean mWaitingForConfig>;

        if $z2 == 0 goto label02;

        return;

     label02:
        $z3 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayReady>;

        if $z3 != 0 goto label03;

        return;

     label03:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "wmLayout");

        r0.<com.android.server.wm.WindowManagerService: boolean mInLayout> = 1;

        z0 = 0;

     label04:
        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        if $r4 == null goto label14;

        z0 = 1;

        i0 = 0;

     label05:
        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $i4 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if i0 >= $i4 goto label06;

        $r12 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $r11 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.wm.WindowState) $r11;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Force removing: ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r18);

        $r16 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void removeWindowInnerLocked(com.android.server.wm.Session,com.android.server.wm.WindowState)>($r16, r1);

        i0 = i0 + 1;

        goto label05;

     label06:
        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves> = null;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Due to memory failure, waiting a bit for next layout");

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        r27 = $r9;

        r28 = r27;

        entermonitor r27;

     label07:
        virtualinvoke r27.<java.lang.Object: void wait(long)>(250L);

     label08:
        goto label10;

     label09:
        $r22 := @caughtexception;

     label10:
        exitmonitor r28;

     label11:
        goto label14;

     label12:
        $r25 := @caughtexception;

        r3 = $r25;

        exitmonitor r28;

     label13:
        throw r3;

     label14:
        goto label16;

     label15:
        $r23 := @caughtexception;

        r29 = $r23;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Unhandled exception while force removing for memory", r29);

     label16:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLockedInner(boolean)>(z0);

        r0.<com.android.server.wm.WindowManagerService: boolean mInLayout> = 0;

        $z4 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean needsLayout()>();

        if $z4 == 0 goto label18;

        $i1 = r0.<com.android.server.wm.WindowManagerService: int mLayoutRepeatCount>;

        $i3 = $i1 + 1;

        r0.<com.android.server.wm.WindowManagerService: int mLayoutRepeatCount> = $i3;

        if $i3 >= 6 goto label17;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void requestTraversalLocked()>();

        goto label19;

     label17:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WindowManager", "Performed 6 layouts in a row. Skipping");

        r0.<com.android.server.wm.WindowManagerService: int mLayoutRepeatCount> = 0;

        goto label19;

     label18:
        r0.<com.android.server.wm.WindowManagerService: int mLayoutRepeatCount> = 0;

     label19:
        $z5 = r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged>;

        if $z5 == 0 goto label20;

        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWindowChangeListeners>;

        $z6 = virtualinvoke $r5.<java.util.ArrayList: boolean isEmpty()>();

        if $z6 != 0 goto label20;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r6.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(19);

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r7.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(19);

     label20:
        goto label22;

     label21:
        $r26 := @caughtexception;

        r30 = $r26;

        r0.<com.android.server.wm.WindowManagerService: boolean mInLayout> = 0;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Unhandled exception while laying out windows", r30);

     label22:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return;

        catch java.lang.InterruptedException from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.RuntimeException from label04 to label14 with label15;
        catch java.lang.RuntimeException from label16 to label20 with label21;
    }

    private final void performLayoutLockedInner(com.android.server.wm.DisplayContent, boolean, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, z20;
        com.android.server.wm.WindowList r2;
        android.view.DisplayInfo r3;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19;
        com.android.server.wm.WindowStateAnimator r4, $r11;
        com.android.server.wm.WindowState r5, $r19, r38;
        java.util.ArrayList $r6, $r33;
        android.view.WindowManagerPolicy $r7, $r8, $r16, $r18, $r20, $r26, $r36, $r37;
        android.graphics.Rect $r9, $r10, $r32;
        com.android.server.wm.WindowAnimator $r12, $r23;
        com.android.server.wm.InputMonitor $r13, $r15;
        java.lang.Object $r14, $r22, $r34;
        android.view.WindowManager$LayoutParams $r17, $r21, $r24, $r25, $r27, $r28, $r30;
        com.android.server.wm.AppWindowToken $r29, $r31;
        com.android.server.wm.FakeWindowImpl $r35;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $z5 = r1.<com.android.server.wm.DisplayContent: boolean layoutNeeded>;

        if $z5 != 0 goto label01;

        return;

     label01:
        r1.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 0;

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        z2 = r1.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        r3 = virtualinvoke r1.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        i0 = r3.<android.view.DisplayInfo: int logicalWidth>;

        i1 = r3.<android.view.DisplayInfo: int logicalHeight>;

        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mFakeWindows>;

        i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i3 = 0;

     label02:
        if i3 >= i2 goto label03;

        $r33 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mFakeWindows>;

        $r34 = virtualinvoke $r33.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r35 = (com.android.server.wm.FakeWindowImpl) $r34;

        virtualinvoke $r35.<com.android.server.wm.FakeWindowImpl: void layout(int,int)>(i0, i1);

        i3 = i3 + 1;

        goto label02;

     label03:
        i18 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        r4 = null;

        $r7 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i7 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        interfaceinvoke $r7.<android.view.WindowManagerPolicy: void beginLayoutLw(boolean,int,int,int)>(z2, i0, i1, $i7);

        if z2 == 0 goto label04;

        $r37 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i17 = interfaceinvoke $r37.<android.view.WindowManagerPolicy: int getSystemDecorLayerLw()>();

        r0.<com.android.server.wm.WindowManagerService: int mSystemDecorLayer> = $i17;

        $r32 = r0.<com.android.server.wm.WindowManagerService: android.graphics.Rect mScreenRect>;

        virtualinvoke $r32.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, i0, i1);

     label04:
        $r8 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r9 = r0.<com.android.server.wm.WindowManagerService: android.graphics.Rect mTmpContentRect>;

        interfaceinvoke $r8.<android.view.WindowManagerPolicy: void getContentRectLw(android.graphics.Rect)>($r9);

        $r10 = r0.<com.android.server.wm.WindowManagerService: android.graphics.Rect mTmpContentRect>;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void resize(android.graphics.Rect)>($r10);

        $i8 = r0.<com.android.server.wm.WindowManagerService: int mLayoutSeq>;

        i5 = $i8 + 1;

        if i5 >= 0 goto label05;

        i5 = 0;

     label05:
        r0.<com.android.server.wm.WindowManagerService: int mLayoutSeq> = i5;

        z3 = 0;

        i6 = -1;

        i4 = i18 - 1;

     label06:
        if i4 < 0 goto label19;

        $r22 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i4);

        r5 = (com.android.server.wm.WindowState) $r22;

        if z3 == 0 goto label07;

        $r36 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r28 = r5.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z19 = interfaceinvoke $r36.<android.view.WindowManagerPolicy: boolean canBeForceHidden(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>(r5, $r28);

        if $z19 != 0 goto label08;

     label07:
        $z12 = virtualinvoke r5.<com.android.server.wm.WindowState: boolean isGoneForLayoutLw()>();

        if $z12 == 0 goto label09;

     label08:
        $z18 = 1;

        goto label10;

     label09:
        $z18 = 0;

     label10:
        z4 = $z18;

        if z4 == 0 goto label13;

        $z14 = r5.<com.android.server.wm.WindowState: boolean mHaveFrame>;

        if $z14 == 0 goto label13;

        $z13 = r5.<com.android.server.wm.WindowState: boolean mLayoutNeeded>;

        if $z13 != 0 goto label13;

        $z15 = virtualinvoke r5.<com.android.server.wm.WindowState: boolean isConfigChanged()>();

        if $z15 != 0 goto label11;

        $z17 = virtualinvoke r5.<com.android.server.wm.WindowState: boolean setInsetsChanged()>();

        if $z17 == 0 goto label12;

     label11:
        $r27 = r5.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i15 = $r27.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i14 = $i15 & 1024;

        if $i14 != 0 goto label13;

        $r29 = r5.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r29 == null goto label12;

        $r31 = r5.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $z16 = $r31.<com.android.server.wm.AppWindowToken: boolean layoutConfigChanges>;

        if $z16 != 0 goto label13;

     label12:
        $r30 = r5.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i16 = $r30.<android.view.WindowManager$LayoutParams: int type>;

        if $i16 != 2025 goto label17;

     label13:
        $z11 = r5.<com.android.server.wm.WindowState: boolean mLayoutAttached>;

        if $z11 != 0 goto label16;

        if z0 == 0 goto label14;

        r5.<com.android.server.wm.WindowState: boolean mContentChanged> = 0;

     label14:
        $r24 = r5.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i13 = $r24.<android.view.WindowManager$LayoutParams: int type>;

        if $i13 != 2023 goto label15;

        z3 = 1;

     label15:
        r5.<com.android.server.wm.WindowState: boolean mLayoutNeeded> = 0;

        virtualinvoke r5.<com.android.server.wm.WindowState: void prelayout()>();

        $r26 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r26.<android.view.WindowManagerPolicy: void layoutWindowLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManagerPolicy$WindowState)>(r5, null);

        r5.<com.android.server.wm.WindowState: int mLayoutSeq> = i5;

        goto label17;

     label16:
        if i6 >= 0 goto label17;

        i6 = i4;

     label17:
        $i12 = r5.<com.android.server.wm.WindowState: int mViewVisibility>;

        if $i12 != 0 goto label18;

        $r25 = r5.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i11 = $r25.<android.view.WindowManager$LayoutParams: int type>;

        if $i11 != 2025 goto label18;

        if r4 != null goto label18;

        r4 = r5.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

     label18:
        i4 = i4 + -1;

        goto label06;

     label19:
        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r11 = $r12.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowStateAnimator mUniverseBackground>;

        if $r11 == r4 goto label20;

        r0.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange> = 1;

        $r23 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r23.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowStateAnimator mUniverseBackground> = r4;

     label20:
        z20 = 0;

        i19 = i6;

     label21:
        if i19 < 0 goto label28;

        $r14 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i19);

        r38 = (com.android.server.wm.WindowState) $r14;

        $z6 = r38.<com.android.server.wm.WindowState: boolean mLayoutAttached>;

        if $z6 == 0 goto label26;

        if z20 == 0 goto label22;

        $r20 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r21 = r38.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z9 = interfaceinvoke $r20.<android.view.WindowManagerPolicy: boolean canBeForceHidden(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>(r38, $r21);

        if $z9 == 0 goto label22;

        goto label27;

     label22:
        $i10 = r38.<com.android.server.wm.WindowState: int mViewVisibility>;

        if $i10 == 8 goto label23;

        $z10 = r38.<com.android.server.wm.WindowState: boolean mRelayoutCalled>;

        if $z10 != 0 goto label24;

     label23:
        $z8 = r38.<com.android.server.wm.WindowState: boolean mHaveFrame>;

        if $z8 == 0 goto label24;

        $z7 = r38.<com.android.server.wm.WindowState: boolean mLayoutNeeded>;

        if $z7 == 0 goto label27;

     label24:
        if z0 == 0 goto label25;

        r38.<com.android.server.wm.WindowState: boolean mContentChanged> = 0;

     label25:
        r38.<com.android.server.wm.WindowState: boolean mLayoutNeeded> = 0;

        virtualinvoke r38.<com.android.server.wm.WindowState: void prelayout()>();

        $r18 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r19 = r38.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mAttachedWindow>;

        interfaceinvoke $r18.<android.view.WindowManagerPolicy: void layoutWindowLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManagerPolicy$WindowState)>(r38, $r19);

        r38.<com.android.server.wm.WindowState: int mLayoutSeq> = i5;

        goto label27;

     label26:
        $r17 = r38.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i9 = $r17.<android.view.WindowManager$LayoutParams: int type>;

        if $i9 != 2023 goto label27;

        z20 = z3;

     label27:
        i19 = i19 + -1;

        goto label21;

     label28:
        $r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r15.<com.android.server.wm.InputMonitor: void setUpdateInputWindowsNeededLw()>();

        if z1 == 0 goto label29;

        $r13 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r13.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(0);

     label29:
        $r16 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r16.<android.view.WindowManagerPolicy: void finishLayoutLw()>();

        return;
    }

    void makeWindowFreezingScreenIfNeededLocked(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1;
        boolean $z0, $z1;
        com.android.server.wm.WindowManagerService$LayoutFields $r2;
        com.android.server.wm.WindowManagerService$H $r3, $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean okToDisplay()>();

        if $z0 != 0 goto label1;

        r1.<com.android.server.wm.WindowState: boolean mOrientationChanging> = 1;

        r1.<com.android.server.wm.WindowState: int mLastFreezeDuration> = 0;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r2.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mOrientationChangeComplete> = 0;

        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mWindowsFreezingScreen>;

        if $z1 != 0 goto label1;

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsFreezingScreen> = 1;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r3.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(11);

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(11, 2000L);

     label1:
        return;
    }

    public int handleAppTransitionReadyLocked(com.android.server.wm.WindowList)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowList r1, $r35, $r60, $r61, $r63, $r69, $r76, $r78;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i31, $i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z9, $z10, $z11, $z13, $z14, $z16, $z17, $z18, $z19, $z20, $z21, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31;
        com.android.server.wm.AppWindowToken r2, r5, r6, r7, r9, $r83, r103, r104, r105;
        com.android.server.wm.WindowState r3, r8, r12, $r21, $r22, $r23, $r26, $r29, $r62, $r67, $r74, $r81, $r87, $r90, $r94, r102, r107;
        android.view.WindowManager$LayoutParams r4;
        com.android.server.wm.AppWindowAnimator r10, $r53, $r55, r106, r108, r109;
        android.view.DisplayInfo r11;
        android.view.Surface r13, $r46;
        android.view.SurfaceControl r14, $r43;
        android.view.animation.Animation r15, $r41, $r56;
        android.graphics.Canvas r16;
        com.android.server.wm.AppTransition $r17, $r19, $r32, $r33, $r34, $r45, $r47, $r48, $r49, $r50, $r51, $r86;
        android.util.ArraySet $r18, $r25, $r27, $r30, $r31, $r37, $r38, $r54, $r66, $r79, $r82, $r84, $r85, $r92;
        com.android.server.wm.WindowManagerService$H $r20;
        com.android.server.wm.WindowManagerService$LayoutFields $r24;
        android.view.WindowManagerPolicy $r28;
        com.android.server.wm.DisplayContent $r36, r112;
        android.graphics.Bitmap$Config $r39, $r42;
        android.graphics.Rect $r40, r111;
        android.view.SurfaceSession $r44;
        float $f0;
        java.lang.Object $r52, $r59, $r65, $r71, $r77, $r80, $r88, $r91;
        com.android.server.wm.WindowStateAnimator $r57, $r58, $r68, $r70, $r73, $r89, $r93;
        java.util.ArrayList $r64, $r72;
        com.android.server.wm.WindowAnimator $r75;
        java.lang.StringBuilder $r95, $r97, $r99, $r100, $r101;
        java.lang.String $r96;
        android.view.Surface$OutOfResourcesException $r98, r114;
        android.graphics.Bitmap r110;
        android.view.Display r113;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowList;

        i0 = 0;

        $r18 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        i2 = virtualinvoke $r18.<android.util.ArraySet: int size()>();

        z0 = 1;

        $z5 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        if $z5 != 0 goto label03;

        $r86 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z26 = virtualinvoke $r86.<com.android.server.wm.AppTransition: boolean isTimeout()>();

        if $z26 != 0 goto label03;

        i1 = 0;

     label01:
        if i1 >= i2 goto label03;

        if z0 == 0 goto label03;

        $r85 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        $r88 = virtualinvoke $r85.<android.util.ArraySet: java.lang.Object valueAt(int)>(i1);

        r2 = (com.android.server.wm.AppWindowToken) $r88;

        $z29 = r2.<com.android.server.wm.AppWindowToken: boolean allDrawn>;

        if $z29 != 0 goto label02;

        $z28 = r2.<com.android.server.wm.AppWindowToken: boolean startingDisplayed>;

        if $z28 != 0 goto label02;

        $z27 = r2.<com.android.server.wm.AppWindowToken: boolean startingMoved>;

        if $z27 != 0 goto label02;

        z0 = 0;

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        if z0 == 0 goto label56;

        $r17 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        i33 = virtualinvoke $r17.<com.android.server.wm.AppTransition: int getAppTransition()>();

        $z6 = r0.<com.android.server.wm.WindowManagerService: boolean mSkipAppTransitionAnimation>;

        if $z6 == 0 goto label04;

        i33 = -1;

     label04:
        $r19 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r19.<com.android.server.wm.AppTransition: void goodToGo()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mStartingIconInTransition> = 0;

        r0.<com.android.server.wm.WindowManagerService: boolean mSkipAppTransitionAnimation> = 0;

        $r20 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r20.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(13);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void rebuildAppWindowListLocked()>();

        $r23 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        if $r23 == null goto label05;

        $r90 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $r89 = $r90.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z31 = virtualinvoke $r89.<com.android.server.wm.WindowStateAnimator: boolean isAnimating()>();

        if $z31 == 0 goto label05;

        $r94 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $r93 = $r94.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z30 = virtualinvoke $r93.<com.android.server.wm.WindowStateAnimator: boolean isDummyAnimation()>();

        if $z30 != 0 goto label05;

        $r87 = null;

        goto label06;

     label05:
        $r87 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

     label06:
        r3 = $r87;

        $r24 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r24.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mWallpaperMayChange> = 0;

        r4 = null;

        i3 = -1;

        z1 = 0;

        z2 = 0;

        z3 = 0;

        z4 = 0;

        $r21 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget>;

        if $r21 != null goto label07;

        r6 = null;

        r5 = null;

        goto label08;

     label07:
        $r22 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget>;

        r5 = $r22.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r26 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mUpperWallpaperTarget>;

        r6 = $r26.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

     label08:
        $r27 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps>;

        i4 = virtualinvoke $r27.<android.util.ArraySet: int size()>();

        $r25 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        $i10 = virtualinvoke $r25.<android.util.ArraySet: int size()>();

        i34 = i4 + $i10;

        i35 = 0;

     label09:
        if i35 >= i34 goto label17;

        if i35 >= i4 goto label11;

        $r92 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps>;

        $r91 = virtualinvoke $r92.<android.util.ArraySet: java.lang.Object valueAt(int)>(i35);

        r7 = (com.android.server.wm.AppWindowToken) $r91;

        if r7 == r5 goto label10;

        if r7 != r6 goto label13;

     label10:
        z4 = 1;

        goto label13;

     label11:
        $r79 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        $i28 = i35 - i4;

        $r80 = virtualinvoke $r79.<android.util.ArraySet: java.lang.Object valueAt(int)>($i28);

        r7 = (com.android.server.wm.AppWindowToken) $r80;

        if r7 == r5 goto label12;

        if r7 != r6 goto label13;

     label12:
        z3 = 1;

     label13:
        $z20 = r7.<com.android.server.wm.AppWindowToken: boolean voiceInteraction>;

        z2 = z2 | $z20;

        $z21 = r7.<com.android.server.wm.AppWindowToken: boolean appFullscreen>;

        if $z21 == 0 goto label15;

        r8 = virtualinvoke r7.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState findMainWindow()>();

        if r8 == null goto label14;

        r4 = r8.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i3 = r8.<com.android.server.wm.WindowState: int mLayer>;

        z1 = 1;

     label14:
        goto label16;

     label15:
        if z1 != 0 goto label16;

        r102 = virtualinvoke r7.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState findMainWindow()>();

        if r102 == null goto label16;

        $i29 = r102.<com.android.server.wm.WindowState: int mLayer>;

        if $i29 <= i3 goto label16;

        r4 = r102.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i3 = r102.<com.android.server.wm.WindowState: int mLayer>;

     label16:
        i35 = i35 + 1;

        goto label09;

     label17:
        r0.<com.android.server.wm.WindowManagerService: boolean mAnimateWallpaperWithTarget> = 0;

        if z4 == 0 goto label21;

        if z3 == 0 goto label21;

        tableswitch(i33)
        {
            case 6: goto label18;
            case 7: goto label19;
            case 8: goto label18;
            case 9: goto label19;
            case 10: goto label18;
            case 11: goto label19;
            default: goto label20;
        };

     label18:
        i33 = 14;

        goto label20;

     label19:
        i33 = 15;

     label20:
        goto label24;

     label21:
        if r3 == null goto label22;

        $r82 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        $z24 = virtualinvoke $r82.<android.util.ArraySet: boolean isEmpty()>();

        if $z24 != 0 goto label22;

        $r84 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        $r83 = r3.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $z25 = virtualinvoke $r84.<android.util.ArraySet: boolean contains(java.lang.Object)>($r83);

        if $z25 != 0 goto label22;

        i33 = 12;

        goto label24;

     label22:
        $r29 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        if $r29 == null goto label23;

        $r81 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        $z23 = virtualinvoke $r81.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z23 == 0 goto label23;

        i33 = 13;

        goto label24;

     label23:
        r0.<com.android.server.wm.WindowManagerService: boolean mAnimateWallpaperWithTarget> = 1;

     label24:
        $r28 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z7 = interfaceinvoke $r28.<android.view.WindowManagerPolicy: boolean allowAppAnimationsLw()>();

        if $z7 != 0 goto label25;

        r4 = null;

     label25:
        r103 = null;

        r104 = null;

        i5 = 0;

        i6 = 0;

        $r31 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        i36 = virtualinvoke $r31.<android.util.ArraySet: int size()>();

        i37 = 0;

     label26:
        if i37 >= i36 goto label34;

        $r66 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        $r65 = virtualinvoke $r66.<android.util.ArraySet: java.lang.Object valueAt(int)>(i37);

        r9 = (com.android.server.wm.AppWindowToken) $r65;

        r10 = r9.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        virtualinvoke r10.<com.android.server.wm.AppWindowAnimator: void clearThumbnail()>();

        r10.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation> = null;

        r9.<com.android.server.wm.AppWindowToken: boolean inPendingTransaction> = 0;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.wm.AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean,boolean)>(r9, r4, 1, i33, 0, z2);

        virtualinvoke r9.<com.android.server.wm.AppWindowToken: void updateReportedVisibilityLocked()>();

        r9.<com.android.server.wm.AppWindowToken: boolean waitingToShow> = 0;

        $r64 = r10.<com.android.server.wm.AppWindowAnimator: java.util.ArrayList mAllAppWinAnimators>;

        virtualinvoke $r64.<java.util.ArrayList: void clear()>();

        $r63 = r9.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        i7 = virtualinvoke $r63.<com.android.server.wm.WindowList: int size()>();

        i9 = 0;

     label27:
        if i9 >= i7 goto label28;

        $r72 = r10.<com.android.server.wm.AppWindowAnimator: java.util.ArrayList mAllAppWinAnimators>;

        $r69 = r9.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList allAppWindows>;

        $r71 = virtualinvoke $r69.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i9);

        $r74 = (com.android.server.wm.WindowState) $r71;

        $r73 = $r74.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r72.<java.util.ArrayList: boolean add(java.lang.Object)>($r73);

        i9 = i9 + 1;

        goto label27;

     label28:
        $r75 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $z17 = $r75.<com.android.server.wm.WindowAnimator: boolean mAnimating>;

        $z19 = virtualinvoke r10.<com.android.server.wm.AppWindowAnimator: boolean showAllWindowsLocked()>();

        $z18 = $z17 | $z19;

        $r75.<com.android.server.wm.WindowAnimator: boolean mAnimating> = $z18;

        if r4 == null goto label33;

        i38 = -1;

        i8 = 0;

     label29:
        $r76 = r9.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList windows>;

        $i27 = virtualinvoke $r76.<com.android.server.wm.WindowList: int size()>();

        if i8 >= $i27 goto label31;

        $r78 = r9.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList windows>;

        $r77 = virtualinvoke $r78.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i8);

        r12 = (com.android.server.wm.WindowState) $r77;

        $r68 = r12.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i26 = $r68.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        if $i26 <= i38 goto label30;

        $r70 = r12.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        i38 = $r70.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

     label30:
        i8 = i8 + 1;

        goto label29;

     label31:
        if r103 == null goto label32;

        if i38 <= i5 goto label33;

     label32:
        r103 = r9;

        i5 = i38;

     label33:
        i37 = i37 + 1;

        goto label26;

     label34:
        $r30 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps>;

        i39 = virtualinvoke $r30.<android.util.ArraySet: int size()>();

        i40 = 0;

     label35:
        if i40 >= i39 goto label42;

        $r54 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps>;

        $r52 = virtualinvoke $r54.<android.util.ArraySet: java.lang.Object valueAt(int)>(i40);

        r105 = (com.android.server.wm.AppWindowToken) $r52;

        r106 = r105.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        virtualinvoke r106.<com.android.server.wm.AppWindowAnimator: void clearThumbnail()>();

        r106.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation> = null;

        r105.<com.android.server.wm.AppWindowToken: boolean inPendingTransaction> = 0;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.wm.AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean,boolean)>(r105, r4, 0, i33, 0, z2);

        virtualinvoke r105.<com.android.server.wm.AppWindowToken: void updateReportedVisibilityLocked()>();

        r105.<com.android.server.wm.AppWindowToken: boolean waitingToHide> = 0;

        r105.<com.android.server.wm.AppWindowToken: boolean allDrawn> = 1;

        r105.<com.android.server.wm.AppWindowToken: boolean deferClearAllDrawn> = 0;

        $r62 = r105.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow>;

        if $r62 == null goto label36;

        $r67 = r105.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow>;

        $z16 = $r67.<com.android.server.wm.WindowState: boolean mExiting>;

        if $z16 != 0 goto label36;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void scheduleRemoveStartingWindowLocked(com.android.server.wm.AppWindowToken)>(r105);

     label36:
        if r4 == null goto label41;

        i41 = -1;

        i42 = 0;

     label37:
        $r61 = r105.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList windows>;

        $i25 = virtualinvoke $r61.<com.android.server.wm.WindowList: int size()>();

        if i42 >= $i25 goto label39;

        $r60 = r105.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowList windows>;

        $r59 = virtualinvoke $r60.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i42);

        r107 = (com.android.server.wm.WindowState) $r59;

        $r58 = r107.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i24 = $r58.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        if $i24 <= i41 goto label38;

        $r57 = r107.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        i41 = $r57.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

     label38:
        i42 = i42 + 1;

        goto label37;

     label39:
        if r104 == null goto label40;

        if i41 <= i6 goto label41;

     label40:
        r104 = r105;

        i6 = i41;

     label41:
        i40 = i40 + 1;

        goto label35;

     label42:
        if r103 != null goto label43;

        $r53 = null;

        goto label44;

     label43:
        $r53 = r103.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

     label44:
        r108 = $r53;

        if r104 != null goto label45;

        $r55 = null;

        goto label46;

     label45:
        $r55 = r104.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

     label46:
        r109 = $r55;

        $r34 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        r110 = virtualinvoke $r34.<com.android.server.wm.AppTransition: android.graphics.Bitmap getNextAppTransitionThumbnail()>();

        if r110 == null goto label54;

        if r108 == null goto label54;

        $r41 = r108.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        if $r41 == null goto label54;

        $r42 = virtualinvoke r110.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r39 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ALPHA_8>;

        if $r42 == $r39 goto label54;

        $r40 = new android.graphics.Rect;

        $i11 = virtualinvoke r110.<android.graphics.Bitmap: int getWidth()>();

        $i12 = virtualinvoke r110.<android.graphics.Bitmap: int getHeight()>();

        specialinvoke $r40.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i11, $i12);

        r111 = $r40;

     label47:
        r112 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        r113 = virtualinvoke r112.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        r11 = virtualinvoke r112.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        $r43 = new android.view.SurfaceControl;

        $r44 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceSession mFxSession>;

        $i15 = virtualinvoke r111.<android.graphics.Rect: int width()>();

        $i14 = virtualinvoke r111.<android.graphics.Rect: int height()>();

        specialinvoke $r43.<android.view.SurfaceControl: void <init>(android.view.SurfaceSession,java.lang.String,int,int,int,int)>($r44, "thumbnail anim", $i15, $i14, -3, 4);

        r14 = $r43;

        $i16 = virtualinvoke r113.<android.view.Display: int getLayerStack()>();

        virtualinvoke r14.<android.view.SurfaceControl: void setLayerStack(int)>($i16);

        $r46 = new android.view.Surface;

        specialinvoke $r46.<android.view.Surface: void <init>()>();

        r13 = $r46;

        virtualinvoke r13.<android.view.Surface: void copyFrom(android.view.SurfaceControl)>(r14);

        r16 = virtualinvoke r13.<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>(r111);

        virtualinvoke r16.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r110, 0.0F, 0.0F, null);

        virtualinvoke r13.<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>(r16);

        virtualinvoke r13.<android.view.Surface: void release()>();

        $r45 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z10 = virtualinvoke $r45.<com.android.server.wm.AppTransition: boolean isNextThumbnailTransitionAspectScaled()>();

        if $z10 == 0 goto label50;

        $r51 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $i21 = r11.<android.view.DisplayInfo: int appWidth>;

        $i23 = r11.<android.view.DisplayInfo: int appHeight>;

        $i22 = r11.<android.view.DisplayInfo: int logicalWidth>;

        r15 = virtualinvoke $r51.<com.android.server.wm.AppTransition: android.view.animation.Animation createThumbnailAspectScaleAnimationLocked(int,int,int,int)>($i21, $i23, $i22, i33);

        $i20 = staticinvoke <java.lang.Math: int max(int,int)>(i5, i6);

        r108.<com.android.server.wm.AppWindowAnimator: int thumbnailForceAboveLayer> = $i20;

        $r50 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z11 = virtualinvoke $r50.<com.android.server.wm.AppTransition: boolean isNextThumbnailTransitionScaleUp()>();

        if $z11 != 0 goto label48;

        $z13 = 1;

        goto label49;

     label48:
        $z13 = 0;

     label49:
        r108.<com.android.server.wm.AppWindowAnimator: boolean deferThumbnailDestruction> = $z13;

        $z14 = r108.<com.android.server.wm.AppWindowAnimator: boolean deferThumbnailDestruction>;

        if $z14 == 0 goto label51;

        if r109 == null goto label51;

        $r56 = r109.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation animation>;

        if $r56 == null goto label51;

        r109.<com.android.server.wm.AppWindowAnimator: android.view.SurfaceControl deferredThumbnail> = r14;

        goto label51;

     label50:
        $r49 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $i19 = r11.<android.view.DisplayInfo: int appWidth>;

        $i13 = r11.<android.view.DisplayInfo: int appHeight>;

        r15 = virtualinvoke $r49.<com.android.server.wm.AppTransition: android.view.animation.Animation createThumbnailScaleAnimationLocked(int,int,int)>($i19, $i13, i33);

     label51:
        virtualinvoke r15.<android.view.animation.Animation: void restrictDuration(long)>(10000L);

        $f0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: float getTransitionAnimationScaleLocked()>();

        virtualinvoke r15.<android.view.animation.Animation: void scaleCurrentDuration(float)>($f0);

        r108.<com.android.server.wm.AppWindowAnimator: android.view.SurfaceControl thumbnail> = r14;

        r108.<com.android.server.wm.AppWindowAnimator: int thumbnailLayer> = i5;

        r108.<com.android.server.wm.AppWindowAnimator: android.view.animation.Animation thumbnailAnimation> = r15;

        $r47 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $i17 = virtualinvoke $r47.<com.android.server.wm.AppTransition: int getStartingX()>();

        r108.<com.android.server.wm.AppWindowAnimator: int thumbnailX> = $i17;

        $r48 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $i18 = virtualinvoke $r48.<com.android.server.wm.AppTransition: int getStartingY()>();

        r108.<com.android.server.wm.AppWindowAnimator: int thumbnailY> = $i18;

     label52:
        goto label54;

     label53:
        $r98 := @caughtexception;

        r114 = $r98;

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r97 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t allocate thumbnail/Canvas surface w=");

        $i32 = virtualinvoke r111.<android.graphics.Rect: int width()>();

        $r101 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        $r100 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" h=");

        $i31 = virtualinvoke r111.<android.graphics.Rect: int height()>();

        $r95 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i31);

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r96, r114);

        virtualinvoke r108.<com.android.server.wm.AppWindowAnimator: void clearThumbnail()>();

     label54:
        $r33 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r33.<com.android.server.wm.AppTransition: void postAnimationCallback()>();

        $r32 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r32.<com.android.server.wm.AppTransition: void clear()>();

        $r38 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        virtualinvoke $r38.<android.util.ArraySet: void clear()>();

        $r37 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps>;

        virtualinvoke $r37.<android.util.ArraySet: void clear()>();

        i0 = i0 | 3;

        $r36 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r36.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

        $r35 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()>();

        if r1 != $r35 goto label55;

        $z9 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean moveInputMethodWindowsIfNeededLocked(boolean)>(1);

        if $z9 != 0 goto label55;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void assignLayersLocked(com.android.server.wm.WindowList)>(r1);

     label55:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(2, 1);

        r0.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange> = 0;

     label56:
        return i0;

        catch android.view.Surface$OutOfResourcesException from label47 to label52 with label53;
    }

    private int handleAnimatingStoppedAndTransitionLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        byte b0, b7;
        java.util.ArrayList r1, r2;
        int i1, i2, i3, $i4, $i5, $i6;
        com.android.server.wm.AppTokenList r3;
        com.android.server.wm.AppTransition $r4;
        com.android.server.wm.DisplayContent $r5;
        com.android.server.wm.WindowManagerService$LayoutFields $r6;
        java.lang.Object $r7, $r10, $r11;
        com.android.server.wm.TaskStack $r8;
        com.android.server.wm.Task $r9;
        com.android.server.wm.AppWindowToken $r12;

        r0 := @this: com.android.server.wm.WindowManagerService;

        b0 = 0;

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r4.<com.android.server.wm.AppTransition: void setIdle()>();

        $r5 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        r1 = virtualinvoke $r5.<com.android.server.wm.DisplayContent: java.util.ArrayList getStacks()>();

        $i4 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i1 = $i4 - 1;

     label1:
        if i1 < 0 goto label6;

        $r7 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r8 = (com.android.server.wm.TaskStack) $r7;

        r2 = virtualinvoke $r8.<com.android.server.wm.TaskStack: java.util.ArrayList getTasks()>();

        $i5 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i2 = $i5 - 1;

     label2:
        if i2 < 0 goto label5;

        $r10 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r9 = (com.android.server.wm.Task) $r10;

        r3 = $r9.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        $i6 = virtualinvoke r3.<com.android.server.wm.AppTokenList: int size()>();

        i3 = $i6 - 1;

     label3:
        if i3 < 0 goto label4;

        $r11 = virtualinvoke r3.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i3);

        $r12 = (com.android.server.wm.AppWindowToken) $r11;

        $r12.<com.android.server.wm.AppWindowToken: boolean sendingToBottom> = 0;

        i3 = i3 + -1;

        goto label3;

     label4:
        i2 = i2 + -1;

        goto label2;

     label5:
        i1 = i1 + -1;

        goto label1;

     label6:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void rebuildAppWindowListLocked()>();

        b7 = b0 | 1;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean moveInputMethodWindowsIfNeededLocked(boolean)>(1);

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r6.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mWallpaperMayChange> = 1;

        r0.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange> = 1;

        return b7;
    }

    private void updateResizingWindows(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.WindowStateAnimator r2;
        boolean z0, $z1, $z3, $z4, $z5, $z7, $z8, $z9, $z10;
        int $i0, $i1, $i3;
        android.graphics.Rect $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.util.ArrayList $r13, $r14;
        com.android.server.wm.AppWindowToken $r15, $r16, $r17;
        long $l2, $l4, $l5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z1 = r1.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z1 == 0 goto label4;

        $i1 = r1.<com.android.server.wm.WindowState: int mLayoutSeq>;

        $i0 = r0.<com.android.server.wm.WindowManagerService: int mLayoutSeq>;

        if $i1 != $i0 goto label4;

        virtualinvoke r1.<com.android.server.wm.WindowState: boolean setInsetsChanged()>();

        z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isConfigChanged()>();

        $r4 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mLastFrame>;

        $r3 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mFrame>;

        virtualinvoke $r4.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

        $z3 = r1.<com.android.server.wm.WindowState: boolean mContentInsetsChanged>;

        if $z3 != 0 goto label1;

        $z8 = r1.<com.android.server.wm.WindowState: boolean mVisibleInsetsChanged>;

        if $z8 != 0 goto label1;

        $z7 = r2.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceResized>;

        if $z7 != 0 goto label1;

        if z0 == 0 goto label3;

     label1:
        $r6 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mLastOverscanInsets>;

        $r5 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mOverscanInsets>;

        virtualinvoke $r6.<android.graphics.Rect: void set(android.graphics.Rect)>($r5);

        $r8 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mLastContentInsets>;

        $r7 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mContentInsets>;

        virtualinvoke $r8.<android.graphics.Rect: void set(android.graphics.Rect)>($r7);

        $r9 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mLastVisibleInsets>;

        $r10 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mVisibleInsets>;

        virtualinvoke $r9.<android.graphics.Rect: void set(android.graphics.Rect)>($r10);

        $r11 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mLastStableInsets>;

        $r12 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mStableInsets>;

        virtualinvoke $r11.<android.graphics.Rect: void set(android.graphics.Rect)>($r12);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void makeWindowFreezingScreenIfNeededLocked(com.android.server.wm.WindowState)>(r1);

        $z4 = r1.<com.android.server.wm.WindowState: boolean mOrientationChanging>;

        if $z4 == 0 goto label2;

        r2.<com.android.server.wm.WindowStateAnimator: int mDrawState> = 1;

        $r15 = r1.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r15 == null goto label2;

        $r17 = r1.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r17.<com.android.server.wm.AppWindowToken: boolean allDrawn> = 0;

        $r16 = r1.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r16.<com.android.server.wm.AppWindowToken: boolean deferClearAllDrawn> = 0;

     label2:
        $r13 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $z5 = virtualinvoke $r13.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z5 != 0 goto label4;

        $r14 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        goto label4;

     label3:
        $z10 = r1.<com.android.server.wm.WindowState: boolean mOrientationChanging>;

        if $z10 == 0 goto label4;

        $z9 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z9 == 0 goto label4;

        r1.<com.android.server.wm.WindowState: boolean mOrientationChanging> = 0;

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l5 = r0.<com.android.server.wm.WindowManagerService: long mDisplayFreezeTime>;

        $l2 = $l4 - $l5;

        $i3 = (int) $l2;

        r1.<com.android.server.wm.WindowState: int mLastFreezeDuration> = $i3;

     label4:
        return;
    }

    private void handleNotObscuredLocked(com.android.server.wm.WindowState, long, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1;
        long l0, $l11, $l15, $l17;
        int i1, i2, i3, i4, $i5, $i8, $i9, $i10, $i13;
        android.view.WindowManager$LayoutParams r2, $r8, $r9, $r17, $r18, $r20, $r24, $r26, $r27;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10, $z11, $z13;
        com.android.server.wm.DisplayContent r3;
        com.android.server.wm.WindowManagerService$LayoutFields $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r19, $r21, $r22, $r23, $r25, $r28, $r30, $r31;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f8, $f9;
        byte $b6, $b7, $b12, $b14, $b18, $b19, $b20, $b21;
        com.android.server.wm.Session $r32;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i3 = r2.<android.view.WindowManager$LayoutParams: int flags>;

        z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDisplayedLw()>();

        if z0 == 0 goto label01;

        $z11 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isOpaqueDrawn()>();

        if $z11 == 0 goto label01;

        $z13 = 1;

        goto label02;

     label01:
        $z13 = 0;

     label02:
        z1 = $z13;

        if z1 == 0 goto label03;

        $z10 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isFullscreen(int,int)>(i1, i2);

        if $z10 == 0 goto label03;

        $r30 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1202(com.android.server.wm.WindowManagerService$LayoutFields,boolean)>($r30, 1);

     label03:
        $z2 = r1.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z2 == 0 goto label15;

        $i5 = i3 & 128;

        if $i5 == 0 goto label04;

        $r28 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r32 = r1.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: com.android.server.wm.Session access$1302(com.android.server.wm.WindowManagerService$LayoutFields,com.android.server.wm.Session)>($r28, $r32);

     label04:
        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z3 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1400(com.android.server.wm.WindowManagerService$LayoutFields)>($r4);

        if $z3 != 0 goto label05;

        $r27 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f8 = $r27.<android.view.WindowManager$LayoutParams: float screenBrightness>;

        $b21 = $f8 cmpl 0.0F;

        if $b21 < 0 goto label05;

        $r25 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $f6 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: float access$1500(com.android.server.wm.WindowManagerService$LayoutFields)>($r25);

        $b20 = $f6 cmpg 0.0F;

        if $b20 >= 0 goto label05;

        $r31 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r26 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f9 = $r26.<android.view.WindowManager$LayoutParams: float screenBrightness>;

        staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: float access$1502(com.android.server.wm.WindowManagerService$LayoutFields,float)>($r31, $f9);

     label05:
        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z4 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1400(com.android.server.wm.WindowManagerService$LayoutFields)>($r5);

        if $z4 != 0 goto label06;

        $r20 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f4 = $r20.<android.view.WindowManager$LayoutParams: float buttonBrightness>;

        $b18 = $f4 cmpl 0.0F;

        if $b18 < 0 goto label06;

        $r22 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $f3 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: float access$1600(com.android.server.wm.WindowManagerService$LayoutFields)>($r22);

        $b19 = $f3 cmpg 0.0F;

        if $b19 >= 0 goto label06;

        $r23 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r24 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f5 = $r24.<android.view.WindowManager$LayoutParams: float buttonBrightness>;

        staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: float access$1602(com.android.server.wm.WindowManagerService$LayoutFields,float)>($r23, $f5);

     label06:
        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z5 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1400(com.android.server.wm.WindowManagerService$LayoutFields)>($r6);

        if $z5 != 0 goto label07;

        $r17 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $l11 = $r17.<android.view.WindowManager$LayoutParams: long userActivityTimeout>;

        $b12 = $l11 cmp 0L;

        if $b12 < 0 goto label07;

        $r19 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $l15 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: long access$1700(com.android.server.wm.WindowManagerService$LayoutFields)>($r19);

        $b14 = $l15 cmp 0L;

        if $b14 >= 0 goto label07;

        $r21 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r18 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $l17 = $r18.<android.view.WindowManager$LayoutParams: long userActivityTimeout>;

        staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: long access$1702(com.android.server.wm.WindowManagerService$LayoutFields,long)>($r21, $l17);

     label07:
        i4 = r2.<android.view.WindowManager$LayoutParams: int type>;

        if z0 == 0 goto label09;

        if i4 == 2008 goto label08;

        if i4 == 2028 goto label08;

        if i4 == 2010 goto label08;

        $i9 = r2.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i13 = $i9 & 1024;

        if $i13 == 0 goto label09;

     label08:
        $r16 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1402(com.android.server.wm.WindowManagerService$LayoutFields,boolean)>($r16, 1);

     label09:
        if z0 == 0 goto label15;

        r3 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r3 == null goto label12;

        $z8 = r3.<com.android.server.wm.DisplayContent: boolean isDefaultDisplay>;

        if $z8 == 0 goto label12;

        if i4 == 2023 goto label10;

        $i8 = r2.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i10 = $i8 & 1024;

        if $i10 == 0 goto label11;

     label10:
        $r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r15.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mObscureApplicationContentOnSecondaryDisplays> = 1;

     label11:
        $r14 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r14.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mDisplayHasContent> = 1;

        goto label14;

     label12:
        if r3 == null goto label14;

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z7 = $r10.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mObscureApplicationContentOnSecondaryDisplays>;

        if $z7 == 0 goto label13;

        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z6 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1200(com.android.server.wm.WindowManagerService$LayoutFields)>($r12);

        if $z6 == 0 goto label14;

        if i4 != 2009 goto label14;

     label13:
        $r13 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r13.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mDisplayHasContent> = 1;

     label14:
        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $f0 = $r7.<com.android.server.wm.WindowManagerService$LayoutFields: float mPreferredRefreshRate>;

        $b6 = $f0 cmpl 0.0F;

        if $b6 != 0 goto label15;

        $r8 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f1 = $r8.<android.view.WindowManager$LayoutParams: float preferredRefreshRate>;

        $b7 = $f1 cmpl 0.0F;

        if $b7 == 0 goto label15;

        $r11 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r9 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f2 = $r9.<android.view.WindowManager$LayoutParams: float preferredRefreshRate>;

        $r11.<com.android.server.wm.WindowManagerService$LayoutFields: float mPreferredRefreshRate> = $f2;

     label15:
        return;
    }

    private void handleFlagDimBehind(com.android.server.wm.WindowState)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState r1;
        android.view.WindowManager$LayoutParams r2;
        com.android.server.wm.WindowStateAnimator r3;
        com.android.server.wm.TaskStack r4;
        int $i0, $i1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 = r1.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label2;

        $z0 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean isDisplayedLw()>();

        if $z0 == 0 goto label2;

        $z1 = r1.<com.android.server.wm.WindowState: boolean mExiting>;

        if $z1 != 0 goto label2;

        r3 = r1.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        r4 = virtualinvoke r1.<com.android.server.wm.WindowState: com.android.server.wm.TaskStack getStack()>();

        if r4 != null goto label1;

        return;

     label1:
        virtualinvoke r4.<com.android.server.wm.TaskStack: void setDimmingTag()>();

        $z2 = virtualinvoke r4.<com.android.server.wm.TaskStack: boolean isDimming(com.android.server.wm.WindowStateAnimator)>(r3);

        if $z2 != 0 goto label2;

        virtualinvoke r4.<com.android.server.wm.TaskStack: void startDimmingIfNeeded(com.android.server.wm.WindowStateAnimator)>(r3);

     label2:
        return;
    }

    private void updateAllDrawnLocked(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        java.util.ArrayList r2, r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        com.android.server.wm.AppTokenList r4;
        com.android.server.wm.AppWindowToken r5;
        java.lang.Object $r6, $r9, $r10;
        com.android.server.wm.TaskStack $r7;
        com.android.server.wm.Task $r8;
        boolean $z0;
        com.android.server.wm.WindowManagerService$H $r11;
        android.os.IBinder $r12;
        android.os.Message $r13;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: java.util.ArrayList getStacks()>();

        $i4 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i0 = $i4 - 1;

     label1:
        if i0 < 0 goto label7;

        $r6 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r7 = (com.android.server.wm.TaskStack) $r6;

        r3 = virtualinvoke $r7.<com.android.server.wm.TaskStack: java.util.ArrayList getTasks()>();

        $i5 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        i1 = $i5 - 1;

     label2:
        if i1 < 0 goto label6;

        $r9 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r8 = (com.android.server.wm.Task) $r9;

        r4 = $r8.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        $i6 = virtualinvoke r4.<com.android.server.wm.AppTokenList: int size()>();

        i2 = $i6 - 1;

     label3:
        if i2 < 0 goto label5;

        $r10 = virtualinvoke r4.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i2);

        r5 = (com.android.server.wm.AppWindowToken) $r10;

        $z0 = r5.<com.android.server.wm.AppWindowToken: boolean allDrawn>;

        if $z0 != 0 goto label4;

        i3 = r5.<com.android.server.wm.AppWindowToken: int numInterestingWindows>;

        if i3 <= 0 goto label4;

        $i7 = r5.<com.android.server.wm.AppWindowToken: int numDrawnWindows>;

        if $i7 < i3 goto label4;

        r5.<com.android.server.wm.AppWindowToken: boolean allDrawn> = 1;

        $r11 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r12 = r5.<com.android.server.wm.AppWindowToken: android.os.IBinder token>;

        $r13 = virtualinvoke $r11.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,java.lang.Object)>(32, $r12);

        virtualinvoke $r13.<android.os.Message: void sendToTarget()>();

     label4:
        i2 = i2 + -1;

        goto label3;

     label5:
        i1 = i1 + -1;

        goto label2;

     label6:
        i0 = i0 + -1;

        goto label1;

     label7:
        return;
    }

    private final void performLayoutAndPlaceSurfacesLockedInner(boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1, z2, z3, z4, z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z20, $z21, $z22, $z23, $z24, $z27, $z28, $z29, $z31, $z32, $z33, $z34, $z35, $z36, $z38, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65, $z66, z68, z69, z70;
        long l0, $l24, $l28, $l70, $l71, $l87;
        int i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i26, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i108, $i109, $i110, $i111, $i112, i113, i114, i115, i116, i117, i118, i119, i120, i121, i122, i123, i124, i125, i126, i127;
        com.android.server.wm.DisplayContent r1, r2, $r44, $r128, r176, r183, r189, r192, r194;
        com.android.server.wm.WindowList r3, $r55, r180;
        android.view.DisplayInfo r4, r177;
        com.android.server.wm.WindowState r5, r7, $r85, $r92, $r95, $r125, $r133, $r152, r181, r182, r191;
        com.android.server.wm.TaskStack r6, $r88, $r171;
        com.android.server.wm.WindowStateAnimator r8, $r96;
        android.view.animation.Animation r10;
        android.util.SparseArray $r11, $r14, $r35, $r42, $r45, $r77, $r90, $r98, $r114, $r161, $r169;
        java.lang.Throwable r12, $r165;
        com.android.server.wm.WindowManagerService$LayoutFields $r13, $r15, $r17, $r18, $r19, $r26, $r29, $r30, $r31, $r36, $r40, $r56, $r57, $r58, $r60, $r63, $r64, $r66, $r67, $r69, $r75, $r106, $r111, $r112, $r116, $r117, $r119, $r120, $r129, $r131, $r132, $r142;
        com.android.server.wm.EmulatorDisplayOverlay $r20, $r167;
        com.android.server.wm.CircularDisplayMask $r21, $r172;
        com.android.server.wm.StrictModeFlash $r22, $r173;
        com.android.server.wm.Watermark $r23, $r174;
        com.android.server.wm.AppTransition $r24, $r109, $r110;
        android.hardware.display.DisplayManagerInternal $r25, $r127;
        com.android.server.wm.WindowAnimator $r27, $r32;
        java.util.ArrayList $r28, $r34, $r37, $r47, $r49, $r72, $r73, $r74, $r87, $r93, $r94, $r100, $r104, $r107, $r118, $r155, $r157, r184;
        com.android.server.wm.InputMonitor $r33, $r46;
        java.lang.Runnable $r38;
        com.android.server.wm.Session $r39, $r53;
        java.lang.Object $r41, $r54, $r78, $r80, $r86, $r89, $r91, $r97, $r99, $r102, $r105, $r113, $r130, $r147, $r156, $r159, $r160, $r170;
        com.android.server.wm.WindowState[] $r43, $r51, $r52, $r59;
        com.android.server.wm.DisplayContentList $r48, r190;
        byte $b23, $b25, $b27, $b34, $b69;
        float $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        android.os.PowerManager $r61;
        com.android.server.wm.WindowManagerService$H $r62, $r108, $r115, $r168;
        android.os.PowerManagerInternal $r65, $r68, $r70, $r71, $r76;
        android.util.ArraySet $r79;
        com.android.server.wm.AppWindowAnimator $r82, $r83, $r126, $r139;
        android.view.IWindow $r84, $r153;
        java.lang.String $r121;
        java.lang.StringBuilder $r122, $r123, $r124;
        android.content.Context $r134;
        android.graphics.Rect $r135, $r136, $r137, $r138, $r148, $r149;
        android.view.WindowManager$LayoutParams $r140, $r141, $r146, $r151;
        android.view.WindowManagerPolicy $r143, $r144, $r145;
        com.android.server.wm.AccessibilityController $r150, $r154;
        com.android.server.wm.AppWindowToken $r158, r178, r187;
        java.lang.RuntimeException $r162, r179;
        android.os.RemoteException $r163, $r166;
        com.android.server.wm.WindowToken $r164, r185;
        com.android.server.wm.AppTokenList r175, r186;
        java.util.Iterator r193;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        z1 = 0;

        $z6 = r0.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange>;

        if $z6 == 0 goto label001;

        r0.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange> = 0;

        z1 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(3, 0);

     label001:
        $r11 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i2 = virtualinvoke $r11.<android.util.SparseArray: int size()>();

        i3 = 0;

     label002:
        if i3 >= i2 goto label005;

        $r161 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r160 = virtualinvoke $r161.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r1 = (com.android.server.wm.DisplayContent) $r160;

        $r155 = r1.<com.android.server.wm.DisplayContent: java.util.ArrayList mExitingTokens>;

        $i105 = virtualinvoke $r155.<java.util.ArrayList: int size()>();

        i1 = $i105 - 1;

     label003:
        if i1 < 0 goto label004;

        $r157 = r1.<com.android.server.wm.DisplayContent: java.util.ArrayList mExitingTokens>;

        $r156 = virtualinvoke $r157.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r164 = (com.android.server.wm.WindowToken) $r156;

        $r164.<com.android.server.wm.WindowToken: boolean hasVisible> = 0;

        i1 = i1 + -1;

        goto label003;

     label004:
        i3 = i3 + 1;

        goto label002;

     label005:
        $r14 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        $i14 = virtualinvoke $r14.<android.util.SparseArray: int size()>();

        i113 = $i14 - 1;

     label006:
        if i113 < 0 goto label009;

        $r169 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        $r170 = virtualinvoke $r169.<android.util.SparseArray: java.lang.Object valueAt(int)>(i113);

        $r171 = (com.android.server.wm.TaskStack) $r170;

        r175 = $r171.<com.android.server.wm.TaskStack: com.android.server.wm.AppTokenList mExitingAppTokens>;

        $i111 = virtualinvoke r175.<com.android.server.wm.AppTokenList: int size()>();

        i4 = $i111 - 1;

     label007:
        if i4 < 0 goto label008;

        $r159 = virtualinvoke r175.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i4);

        $r158 = (com.android.server.wm.AppWindowToken) $r159;

        $r158.<com.android.server.wm.AppWindowToken: boolean hasVisible> = 0;

        i4 = i4 + -1;

        goto label007;

     label008:
        i113 = i113 + -1;

        goto label006;

     label009:
        $r13 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: com.android.server.wm.Session access$1302(com.android.server.wm.WindowManagerService$LayoutFields,com.android.server.wm.Session)>($r13, null);

        $r17 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: float access$1502(com.android.server.wm.WindowManagerService$LayoutFields,float)>($r17, -1.0F);

        $r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: float access$1602(com.android.server.wm.WindowManagerService$LayoutFields,float)>($r15, -1.0F);

        $r19 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: long access$1702(com.android.server.wm.WindowManagerService$LayoutFields,long)>($r19, -1L);

        $r18 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r18.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mObscureApplicationContentOnSecondaryDisplays> = 0;

        $i17 = r0.<com.android.server.wm.WindowManagerService: int mTransactionSequence>;

        $i16 = $i17 + 1;

        r0.<com.android.server.wm.WindowManagerService: int mTransactionSequence> = $i16;

        r176 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        r177 = virtualinvoke r176.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        i114 = r177.<android.view.DisplayInfo: int logicalWidth>;

        i5 = r177.<android.view.DisplayInfo: int logicalHeight>;

        staticinvoke <android.view.SurfaceControl: void openTransaction()>();

     label010:
        $r23 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.Watermark mWatermark>;

        if $r23 == null goto label011;

        $r174 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.Watermark mWatermark>;

        virtualinvoke $r174.<com.android.server.wm.Watermark: void positionSurface(int,int)>(i114, i5);

     label011:
        $r22 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.StrictModeFlash mStrictModeFlash>;

        if $r22 == null goto label012;

        $r173 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.StrictModeFlash mStrictModeFlash>;

        virtualinvoke $r173.<com.android.server.wm.StrictModeFlash: void positionSurface(int,int)>(i114, i5);

     label012:
        $r21 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.CircularDisplayMask mCircularDisplayMask>;

        if $r21 == null goto label013;

        $r172 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.CircularDisplayMask mCircularDisplayMask>;

        $i112 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        virtualinvoke $r172.<com.android.server.wm.CircularDisplayMask: void positionSurface(int,int,int)>(i114, i5, $i112);

     label013:
        $r20 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmulatorDisplayOverlay mEmulatorDisplayOverlay>;

        if $r20 == null goto label014;

        $r167 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.EmulatorDisplayOverlay mEmulatorDisplayOverlay>;

        $i108 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        virtualinvoke $r167.<com.android.server.wm.EmulatorDisplayOverlay: void positionSurface(int,int,int)>(i114, i5, $i108);

     label014:
        z2 = 0;

        i6 = 0;

     label015:
        if i6 >= i2 goto label057;

        $r114 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r113 = virtualinvoke $r114.<android.util.SparseArray: java.lang.Object valueAt(int)>(i6);

        r2 = (com.android.server.wm.DisplayContent) $r113;

        z3 = 0;

        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        r4 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        i7 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        i9 = r4.<android.view.DisplayInfo: int logicalWidth>;

        i8 = r4.<android.view.DisplayInfo: int logicalHeight>;

        i11 = r4.<android.view.DisplayInfo: int appWidth>;

        i10 = r4.<android.view.DisplayInfo: int appHeight>;

        if i7 != 0 goto label016;

        $z66 = 1;

        goto label017;

     label016:
        $z66 = 0;

     label017:
        z4 = $z66;

        $r112 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r112.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mDisplayHasContent> = 0;

        $r111 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r111.<com.android.server.wm.WindowManagerService$LayoutFields: float mPreferredRefreshRate> = 0.0F;

        i12 = 0;

     label018:
        i12 = i12 + 1;

        if i12 <= 6 goto label019;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Animation repeat aborted after too many iterations");

        r2.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 0;

        goto label031;

     label019:
        $i63 = r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>("On entry to LockedInner", $i63);

        $i62 = r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i61 = $i62 & 4;

        if $i61 == 0 goto label020;

        $i109 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: int adjustWallpaperWindowsLocked()>();

        $i110 = $i109 & 2;

        if $i110 == 0 goto label020;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void assignLayersLocked(com.android.server.wm.WindowList)>(r3);

        r2.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label020:
        if z4 == 0 goto label021;

        $i98 = r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i97 = $i98 & 2;

        if $i97 == 0 goto label021;

        $z60 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateOrientationFromAppTokensLocked(boolean)>(1);

        if $z60 == 0 goto label021;

        r2.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

        $r168 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r168.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(18);

     label021:
        $i60 = r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i59 = $i60 & 1;

        if $i59 == 0 goto label022;

        r2.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label022:
        if i12 >= 4 goto label025;

        if i12 != 1 goto label023;

        $z61 = 1;

        goto label024;

     label023:
        $z61 = 0;

     label024:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutLockedInner(com.android.server.wm.DisplayContent,boolean,boolean)>(r2, $z61, 0);

        goto label026;

     label025:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Layout repeat skipped after too many iterations");

     label026:
        r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = 0;

        $r123 = new java.lang.StringBuilder;

        specialinvoke $r123.<java.lang.StringBuilder: void <init>()>();

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("loop number ");

        $i67 = r0.<com.android.server.wm.WindowManagerService: int mLayoutRepeatCount>;

        $r122 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i67);

        $r121 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.String toString()>();

        $i66 = r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>($r121, $i66);

        if z4 == 0 goto label030;

        $r144 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r144.<android.view.WindowManagerPolicy: void beginPostLayoutPolicyLw(int,int)>(i9, i8);

        $i96 = virtualinvoke r3.<com.android.server.wm.WindowList: int size()>();

        i115 = $i96 - 1;

     label027:
        if i115 < 0 goto label029;

        $r147 = virtualinvoke r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i115);

        r5 = (com.android.server.wm.WindowState) $r147;

        $z62 = r5.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z62 == 0 goto label028;

        $r145 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r146 = r5.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        interfaceinvoke $r145.<android.view.WindowManagerPolicy: void applyPostLayoutPolicyLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>(r5, $r146);

     label028:
        i115 = i115 + -1;

        goto label027;

     label029:
        $i95 = r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $r143 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i94 = interfaceinvoke $r143.<android.view.WindowManagerPolicy: int finishPostLayoutPolicyLw()>();

        $i93 = $i95 | $i94;

        r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i93;

        $i92 = r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>("after finishPostLayoutPolicyLw", $i92);

     label030:
        $i65 = r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        if $i65 != 0 goto label018;

     label031:
        $r120 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1202(com.android.server.wm.WindowManagerService$LayoutFields,boolean)>($r120, 0);

        $r119 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1402(com.android.server.wm.WindowManagerService$LayoutFields,boolean)>($r119, 0);

        virtualinvoke r2.<com.android.server.wm.DisplayContent: void resetDimming()>();

        $r118 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mLosingFocus>;

        $z38 = virtualinvoke $r118.<java.util.ArrayList: boolean isEmpty()>();

        if $z38 != 0 goto label032;

        $z59 = 1;

        goto label033;

     label032:
        $z59 = 0;

     label033:
        z68 = $z59;

        i13 = virtualinvoke r3.<com.android.server.wm.WindowList: int size()>();

        i116 = i13 - 1;

     label034:
        if i116 < 0 goto label055;

        $r130 = virtualinvoke r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i116);

        r7 = (com.android.server.wm.WindowState) $r130;

        r6 = virtualinvoke r7.<com.android.server.wm.WindowState: com.android.server.wm.TaskStack getStack()>();

        if r6 != null goto label035;

        $r151 = virtualinvoke r7.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i104 = $r151.<android.view.WindowManager$LayoutParams: int type>;

        if $i104 == 2030 goto label035;

        goto label054;

     label035:
        $z49 = r7.<com.android.server.wm.WindowState: boolean mObscured>;

        $r129 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z51 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1200(com.android.server.wm.WindowManagerService$LayoutFields)>($r129);

        if $z49 == $z51 goto label036;

        $z64 = 1;

        goto label037;

     label036:
        $z64 = 0;

     label037:
        z5 = $z64;

        $r132 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z50 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1200(com.android.server.wm.WindowManagerService$LayoutFields)>($r132);

        r7.<com.android.server.wm.WindowState: boolean mObscured> = $z50;

        $r131 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z53 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1200(com.android.server.wm.WindowManagerService$LayoutFields)>($r131);

        if $z53 != 0 goto label038;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void handleNotObscuredLocked(com.android.server.wm.WindowState,long,int,int)>(r7, l0, i11, i10);

     label038:
        if r6 == null goto label039;

        $z63 = virtualinvoke r6.<com.android.server.wm.TaskStack: boolean testDimmingTag()>();

        if $z63 != 0 goto label039;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void handleFlagDimBehind(com.android.server.wm.WindowState)>(r7);

     label039:
        if z4 == 0 goto label040;

        if z5 == 0 goto label040;

        $r152 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        if $r152 != r7 goto label040;

        $z65 = virtualinvoke r7.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z65 == 0 goto label040;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void updateWallpaperVisibilityLocked()>();

     label040:
        r8 = r7.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z54 = r7.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z54 == 0 goto label044;

        $z55 = virtualinvoke r7.<com.android.server.wm.WindowState: boolean shouldAnimateMove()>();

        if $z55 == 0 goto label044;

        $r134 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        r10 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r134, 17432707);

        virtualinvoke r8.<com.android.server.wm.WindowStateAnimator: void setAnimation(android.view.animation.Animation)>(r10);

        $r135 = r7.<com.android.server.wm.WindowState: android.graphics.Rect mLastFrame>;

        $i82 = $r135.<android.graphics.Rect: int left>;

        $r136 = r7.<com.android.server.wm.WindowState: android.graphics.Rect mFrame>;

        $i80 = $r136.<android.graphics.Rect: int left>;

        $i81 = $i82 - $i80;

        r8.<com.android.server.wm.WindowStateAnimator: int mAnimDw> = $i81;

        $r138 = r7.<com.android.server.wm.WindowState: android.graphics.Rect mLastFrame>;

        $i103 = $r138.<android.graphics.Rect: int top>;

        $r137 = r7.<com.android.server.wm.WindowState: android.graphics.Rect mFrame>;

        $i102 = $r137.<android.graphics.Rect: int top>;

        $i101 = $i103 - $i102;

        r8.<com.android.server.wm.WindowStateAnimator: int mAnimDh> = $i101;

        $r150 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r150 == null goto label041;

        if i7 != 0 goto label041;

        $r154 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r154.<com.android.server.wm.AccessibilityController: void onSomeWindowResizedOrMovedLocked()>();

     label041:
        $r153 = r7.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r148 = r7.<com.android.server.wm.WindowState: android.graphics.Rect mFrame>;

        $i100 = $r148.<android.graphics.Rect: int left>;

        $r149 = r7.<com.android.server.wm.WindowState: android.graphics.Rect mFrame>;

        $i99 = $r149.<android.graphics.Rect: int top>;

        interfaceinvoke $r153.<android.view.IWindow: void moved(int,int)>($i100, $i99);

     label042:
        goto label044;

     label043:
        $r166 := @caughtexception;

     label044:
        r7.<com.android.server.wm.WindowState: boolean mContentChanged> = 0;

        $z52 = r7.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z52 == 0 goto label052;

        z69 = virtualinvoke r8.<com.android.server.wm.WindowStateAnimator: boolean commitFinishDrawingLocked(long)>(l0);

        if z4 == 0 goto label046;

        if z69 == 0 goto label046;

        $r140 = r7.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i89 = $r140.<android.view.WindowManager$LayoutParams: int type>;

        if $i89 != 2023 goto label045;

        $i76 = r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i79 = $i76 | 1;

        r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i79;

        $i78 = r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>("dream and commitFinishDrawingLocked true", $i78);

     label045:
        $r141 = r7.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i90 = $r141.<android.view.WindowManager$LayoutParams: int flags>;

        $i91 = $i90 & 1048576;

        if $i91 == 0 goto label046;

        $r142 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r142.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mWallpaperMayChange> = 1;

        $i75 = r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i74 = $i75 | 4;

        r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i74;

        $i77 = r2.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>("wallpaper and commitFinishDrawingLocked true", $i77);

     label046:
        virtualinvoke r8.<com.android.server.wm.WindowStateAnimator: void setSurfaceBoundariesLocked(boolean)>(z0);

        r178 = r7.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if r178 == null goto label052;

        $z41 = r178.<com.android.server.wm.AppWindowToken: boolean allDrawn>;

        if $z41 == 0 goto label047;

        $r139 = r178.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $z58 = $r139.<com.android.server.wm.AppWindowAnimator: boolean freezingScreen>;

        if $z58 == 0 goto label052;

     label047:
        $l70 = r178.<com.android.server.wm.AppWindowToken: long lastTransactionSequence>;

        $i68 = r0.<com.android.server.wm.WindowManagerService: int mTransactionSequence>;

        $l71 = (long) $i68;

        $b69 = $l70 cmp $l71;

        if $b69 == 0 goto label048;

        $i86 = r0.<com.android.server.wm.WindowManagerService: int mTransactionSequence>;

        $l87 = (long) $i86;

        r178.<com.android.server.wm.AppWindowToken: long lastTransactionSequence> = $l87;

        r178.<com.android.server.wm.AppWindowToken: int numDrawnWindows> = 0;

        r178.<com.android.server.wm.AppWindowToken: int numInterestingWindows> = 0;

        r178.<com.android.server.wm.AppWindowToken: boolean startingDisplayed> = 0;

     label048:
        $z43 = virtualinvoke r7.<com.android.server.wm.WindowState: boolean isOnScreen()>();

        if $z43 != 0 goto label049;

        $i85 = r8.<com.android.server.wm.WindowStateAnimator: int mAttrType>;

        if $i85 != 1 goto label052;

     label049:
        $z46 = r7.<com.android.server.wm.WindowState: boolean mExiting>;

        if $z46 != 0 goto label052;

        $z45 = r7.<com.android.server.wm.WindowState: boolean mDestroying>;

        if $z45 != 0 goto label052;

        $r125 = r178.<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState startingWindow>;

        if r7 == $r125 goto label051;

        $r126 = r178.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $z47 = $r126.<com.android.server.wm.AppWindowAnimator: boolean freezingScreen>;

        if $z47 == 0 goto label050;

        $z57 = r7.<com.android.server.wm.WindowState: boolean mAppFreezing>;

        if $z57 != 0 goto label052;

     label050:
        $i73 = r178.<com.android.server.wm.AppWindowToken: int numInterestingWindows>;

        $i72 = $i73 + 1;

        r178.<com.android.server.wm.AppWindowToken: int numInterestingWindows> = $i72;

        $z56 = virtualinvoke r7.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z56 == 0 goto label052;

        $i83 = r178.<com.android.server.wm.AppWindowToken: int numDrawnWindows>;

        $i84 = $i83 + 1;

        r178.<com.android.server.wm.AppWindowToken: int numDrawnWindows> = $i84;

        z3 = 1;

        goto label052;

     label051:
        $z44 = virtualinvoke r7.<com.android.server.wm.WindowState: boolean isDrawnLw()>();

        if $z44 == 0 goto label052;

        r178.<com.android.server.wm.AppWindowToken: boolean startingDisplayed> = 1;

     label052:
        if z4 == 0 goto label053;

        if z68 == 0 goto label053;

        $r133 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        if r7 != $r133 goto label053;

        $z42 = virtualinvoke r7.<com.android.server.wm.WindowState: boolean isDisplayedLw()>();

        if $z42 == 0 goto label053;

        z2 = 1;

     label053:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void updateResizingWindows(com.android.server.wm.WindowState)>(r7);

     label054:
        i116 = i116 + -1;

        goto label034;

     label055:
        $r127 = r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $r116 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z48 = $r116.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mDisplayHasContent>;

        $r117 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $f8 = $r117.<com.android.server.wm.WindowManagerService$LayoutFields: float mPreferredRefreshRate>;

        virtualinvoke $r127.<android.hardware.display.DisplayManagerInternal: void setDisplayProperties(int,boolean,float,boolean)>(i7, $z48, $f8, 1);

        $r128 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i7);

        virtualinvoke $r128.<com.android.server.wm.DisplayContent: void stopDimmingIfNeeded()>();

        if z3 == 0 goto label056;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void updateAllDrawnLocked(com.android.server.wm.DisplayContent)>(r2);

     label056:
        i6 = i6 + 1;

        goto label015;

     label057:
        if z2 == 0 goto label058;

        $r115 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r115.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(3);

     label058:
        $r25 = r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        virtualinvoke $r25.<android.hardware.display.DisplayManagerInternal: void performTraversalInTransactionFromWindowManager()>();

     label059:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        goto label064;

     label060:
        $r162 := @caughtexception;

        r179 = $r162;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Unhandled exception in Window Manager", r179);

     label061:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        goto label064;

     label062:
        $r165 := @caughtexception;

        r12 = $r165;

     label063:
        staticinvoke <android.view.SurfaceControl: void closeTransaction()>();

        throw r12;

     label064:
        r180 = virtualinvoke r176.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        $r24 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z7 = virtualinvoke $r24.<com.android.server.wm.AppTransition: boolean isReady()>();

        if $z7 == 0 goto label065;

        $i47 = r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i48 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: int handleAppTransitionReadyLocked(com.android.server.wm.WindowList)>(r180);

        $i49 = $i47 | $i48;

        r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i49;

        $i64 = r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>("after handleAppTransitionReadyLocked", $i64);

     label065:
        $r27 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $z9 = $r27.<com.android.server.wm.WindowAnimator: boolean mAnimating>;

        if $z9 != 0 goto label066;

        $r109 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z35 = virtualinvoke $r109.<com.android.server.wm.AppTransition: boolean isRunning()>();

        if $z35 == 0 goto label066;

        $i50 = r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i51 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int handleAnimatingStoppedAndTransitionLocked()>();

        $i52 = $i50 | $i51;

        r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i52;

        $i46 = r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>("after handleAnimStopAndXitionLock", $i46);

     label066:
        $r26 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z8 = $r26.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mWallpaperForceHidingChanged>;

        if $z8 == 0 goto label067;

        $i57 = r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        if $i57 != 0 goto label067;

        $r110 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z36 = virtualinvoke $r110.<com.android.server.wm.AppTransition: boolean isReady()>();

        if $z36 != 0 goto label067;

        $i53 = r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i54 = $i53 | 1;

        r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i54;

        $i55 = r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>("after animateAwayWallpaperLocked", $i55);

     label067:
        $r30 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r30.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mWallpaperForceHidingChanged> = 0;

        $r31 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z11 = $r31.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mWallpaperMayChange>;

        if $z11 == 0 goto label068;

        $i42 = r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i41 = $i42 | 4;

        r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i41;

        $i56 = r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>("WallpaperMayChange", $i56);

     label068:
        $z12 = r0.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange>;

        if $z12 == 0 goto label069;

        r0.<com.android.server.wm.WindowManagerService: boolean mFocusMayChange> = 0;

        $z33 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)>(2, 0);

        if $z33 == 0 goto label069;

        z1 = 1;

        $i40 = r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i39 = $i40 | 8;

        r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i39;

     label069:
        $z10 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean needsLayout()>();

        if $z10 == 0 goto label070;

        $i44 = r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i43 = $i44 | 1;

        r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i43;

        $i45 = r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void debugLayoutRepeats(java.lang.String,int)>("mLayoutNeeded", $i45);

     label070:
        $r28 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $i18 = virtualinvoke $r28.<java.util.ArrayList: int size()>();

        i117 = $i18 - 1;

     label071:
        if i117 < 0 goto label074;

        $r107 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $r102 = virtualinvoke $r107.<java.util.ArrayList: java.lang.Object get(int)>(i117);

        r181 = (com.android.server.wm.WindowState) $r102;

        $z34 = r181.<com.android.server.wm.WindowState: boolean mAppFreezing>;

        if $z34 == 0 goto label072;

        goto label073;

     label072:
        virtualinvoke r181.<com.android.server.wm.WindowState: void reportResized()>();

        $r104 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        virtualinvoke $r104.<java.util.ArrayList: java.lang.Object remove(int)>(i117);

     label073:
        i117 = i117 + -1;

        goto label071;

     label074:
        $r29 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z14 = $r29.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mOrientationChangeComplete>;

        if $z14 == 0 goto label076;

        $z31 = r0.<com.android.server.wm.WindowManagerService: boolean mWindowsFreezingScreen>;

        if $z31 == 0 goto label075;

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsFreezingScreen> = 0;

        $r106 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r105 = $r106.<com.android.server.wm.WindowManagerService$LayoutFields: java.lang.Object mLastWindowFreezeSource>;

        r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource> = $r105;

        $r108 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r108.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(11);

     label075:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void stopFreezingDisplayLocked()>();

     label076:
        z70 = 0;

        $r34 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        i118 = virtualinvoke $r34.<java.util.ArrayList: int size()>();

        if i118 <= 0 goto label080;

     label077:
        i118 = i118 + -1;

        $r93 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        $r91 = virtualinvoke $r93.<java.util.ArrayList: java.lang.Object get(int)>(i118);

        r182 = (com.android.server.wm.WindowState) $r91;

        r182.<com.android.server.wm.WindowState: boolean mDestroying> = 0;

        $r92 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow>;

        if $r92 != r182 goto label078;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow> = null;

     label078:
        $r95 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        if r182 != $r95 goto label079;

        z70 = 1;

     label079:
        $r96 = r182.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        virtualinvoke $r96.<com.android.server.wm.WindowStateAnimator: void destroySurfaceLocked()>();

        if i118 > 0 goto label077;

        $r94 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        virtualinvoke $r94.<java.util.ArrayList: void clear()>();

     label080:
        i119 = 0;

     label081:
        if i119 >= i2 goto label085;

        $r98 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r99 = virtualinvoke $r98.<android.util.SparseArray: java.lang.Object valueAt(int)>(i119);

        r183 = (com.android.server.wm.DisplayContent) $r99;

        r184 = r183.<com.android.server.wm.DisplayContent: java.util.ArrayList mExitingTokens>;

        $i37 = virtualinvoke r184.<java.util.ArrayList: int size()>();

        i120 = $i37 - 1;

     label082:
        if i120 < 0 goto label084;

        $r97 = virtualinvoke r184.<java.util.ArrayList: java.lang.Object get(int)>(i120);

        r185 = (com.android.server.wm.WindowToken) $r97;

        $z32 = r185.<com.android.server.wm.WindowToken: boolean hasVisible>;

        if $z32 != 0 goto label083;

        virtualinvoke r184.<java.util.ArrayList: java.lang.Object remove(int)>(i120);

        $i38 = r185.<com.android.server.wm.WindowToken: int windowType>;

        if $i38 != 2013 goto label083;

        $r100 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        virtualinvoke $r100.<java.util.ArrayList: boolean remove(java.lang.Object)>(r185);

     label083:
        i120 = i120 + -1;

        goto label082;

     label084:
        i119 = i119 + 1;

        goto label081;

     label085:
        $r35 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        $i19 = virtualinvoke $r35.<android.util.SparseArray: int size()>();

        i121 = $i19 - 1;

     label086:
        if i121 < 0 goto label090;

        $r90 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mStackIdToStack>;

        $r89 = virtualinvoke $r90.<android.util.SparseArray: java.lang.Object valueAt(int)>(i121);

        $r88 = (com.android.server.wm.TaskStack) $r89;

        r186 = $r88.<com.android.server.wm.TaskStack: com.android.server.wm.AppTokenList mExitingAppTokens>;

        $i36 = virtualinvoke r186.<com.android.server.wm.AppTokenList: int size()>();

        i122 = $i36 - 1;

     label087:
        if i122 < 0 goto label089;

        $r80 = virtualinvoke r186.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i122);

        r187 = (com.android.server.wm.AppWindowToken) $r80;

        $z28 = r187.<com.android.server.wm.AppWindowToken: boolean hasVisible>;

        if $z28 != 0 goto label088;

        $r79 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps>;

        $z27 = virtualinvoke $r79.<android.util.ArraySet: boolean contains(java.lang.Object)>(r187);

        if $z27 != 0 goto label088;

        $z29 = r187.<com.android.server.wm.AppWindowToken: boolean mDeferRemoval>;

        if $z29 != 0 goto label088;

        $r83 = r187.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        virtualinvoke $r83.<com.android.server.wm.AppWindowAnimator: void clearAnimation()>();

        $r82 = r187.<com.android.server.wm.AppWindowToken: com.android.server.wm.AppWindowAnimator mAppAnimator>;

        $r82.<com.android.server.wm.AppWindowAnimator: boolean animating> = 0;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void removeAppFromTaskLocked(com.android.server.wm.AppWindowToken)>(r187);

        virtualinvoke r186.<com.android.server.wm.AppTokenList: java.lang.Object remove(int)>(i122);

     label088:
        i122 = i122 + -1;

        goto label087;

     label089:
        i121 = i121 + -1;

        goto label086;

     label090:
        $r32 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $z13 = $r32.<com.android.server.wm.WindowAnimator: boolean mAnimating>;

        if $z13 != 0 goto label097;

        $r72 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRelayoutWhileAnimating>;

        $i32 = virtualinvoke $r72.<java.util.ArrayList: int size()>();

        if $i32 <= 0 goto label097;

        $r73 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRelayoutWhileAnimating>;

        $i33 = virtualinvoke $r73.<java.util.ArrayList: int size()>();

        i123 = $i33 - 1;

     label091:
        if i123 < 0 goto label096;

     label092:
        $r87 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRelayoutWhileAnimating>;

        $r86 = virtualinvoke $r87.<java.util.ArrayList: java.lang.Object get(int)>(i123);

        $r85 = (com.android.server.wm.WindowState) $r86;

        $r84 = $r85.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r84.<android.view.IWindow: void doneAnimating()>();

     label093:
        goto label095;

     label094:
        $r163 := @caughtexception;

     label095:
        i123 = i123 + -1;

        goto label091;

     label096:
        $r74 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mRelayoutWhileAnimating>;

        virtualinvoke $r74.<java.util.ArrayList: void clear()>();

     label097:
        if z70 == 0 goto label098;

        $i30 = r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        $i31 = $i30 | 4;

        r176.<com.android.server.wm.DisplayContent: int pendingLayoutChanges> = $i31;

        r176.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label098:
        i124 = 0;

     label099:
        if i124 >= i2 goto label101;

        $r77 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r78 = virtualinvoke $r77.<android.util.SparseArray: java.lang.Object valueAt(int)>(i124);

        r189 = (com.android.server.wm.DisplayContent) $r78;

        $i29 = r189.<com.android.server.wm.DisplayContent: int pendingLayoutChanges>;

        if $i29 == 0 goto label100;

        r189.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

     label100:
        i124 = i124 + 1;

        goto label099;

     label101:
        $r33 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r33.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        $r40 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r39 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: com.android.server.wm.Session access$1300(com.android.server.wm.WindowManagerService$LayoutFields)>($r40);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void setHoldScreenLocked(com.android.server.wm.Session)>($r39);

        $z17 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        if $z17 != 0 goto label108;

        $r60 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $f2 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: float access$1500(com.android.server.wm.WindowManagerService$LayoutFields)>($r60);

        $b23 = $f2 cmpg 0.0F;

        if $b23 < 0 goto label102;

        $r66 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $f6 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: float access$1500(com.android.server.wm.WindowManagerService$LayoutFields)>($r66);

        $b34 = $f6 cmpl 1.0F;

        if $b34 <= 0 goto label103;

     label102:
        $r68 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        virtualinvoke $r68.<android.os.PowerManagerInternal: void setScreenBrightnessOverrideFromWindowManager(int)>(-1);

        goto label104;

     label103:
        $r76 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        $r75 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $f7 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: float access$1500(com.android.server.wm.WindowManagerService$LayoutFields)>($r75);

        $i35 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int toBrightnessOverride(float)>($f7);

        virtualinvoke $r76.<android.os.PowerManagerInternal: void setScreenBrightnessOverrideFromWindowManager(int)>($i35);

     label104:
        $r67 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $f5 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: float access$1600(com.android.server.wm.WindowManagerService$LayoutFields)>($r67);

        $b27 = $f5 cmpg 0.0F;

        if $b27 < 0 goto label105;

        $r63 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $f3 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: float access$1600(com.android.server.wm.WindowManagerService$LayoutFields)>($r63);

        $b25 = $f3 cmpl 1.0F;

        if $b25 <= 0 goto label106;

     label105:
        $r70 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        virtualinvoke $r70.<android.os.PowerManagerInternal: void setButtonBrightnessOverrideFromWindowManager(int)>(-1);

        goto label107;

     label106:
        $r65 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        $r64 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $f4 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: float access$1600(com.android.server.wm.WindowManagerService$LayoutFields)>($r64);

        $i26 = specialinvoke r0.<com.android.server.wm.WindowManagerService: int toBrightnessOverride(float)>($f4);

        virtualinvoke $r65.<android.os.PowerManagerInternal: void setButtonBrightnessOverrideFromWindowManager(int)>($i26);

     label107:
        $r71 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        $r69 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $l28 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: long access$1700(com.android.server.wm.WindowManagerService$LayoutFields)>($r69);

        virtualinvoke $r71.<android.os.PowerManagerInternal: void setUserActivityTimeoutOverrideFromWindowManager(long)>($l28);

     label108:
        $z16 = r0.<com.android.server.wm.WindowManagerService: boolean mTurnOnScreen>;

        if $z16 == 0 goto label109;

        $r61 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager mPowerManager>;

        $l24 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r61.<android.os.PowerManager: void wakeUp(long)>($l24);

        r0.<com.android.server.wm.WindowManagerService: boolean mTurnOnScreen> = 0;

     label109:
        $r36 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z15 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1800(com.android.server.wm.WindowManagerService$LayoutFields)>($r36);

        if $z15 == 0 goto label111;

        $z21 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateRotationUncheckedLocked(boolean)>(0);

        if $z21 == 0 goto label110;

        $r62 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r62.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(18);

        goto label111;

     label110:
        $r56 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1802(com.android.server.wm.WindowManagerService$LayoutFields,boolean)>($r56, 0);

     label111:
        $r38 = r0.<com.android.server.wm.WindowManagerService: java.lang.Runnable mWaitingForDrawnCallback>;

        if $r38 != null goto label112;

        $r58 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z24 = $r58.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mOrientationChangeComplete>;

        if $z24 == 0 goto label113;

        $z23 = r176.<com.android.server.wm.DisplayContent: boolean layoutNeeded>;

        if $z23 != 0 goto label113;

        $r57 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $z22 = staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1800(com.android.server.wm.WindowManagerService$LayoutFields)>($r57);

        if $z22 != 0 goto label113;

     label112:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void checkDrawnWindowsLocked()>();

     label113:
        $r37 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        i125 = virtualinvoke $r37.<java.util.ArrayList: int size()>();

        if i125 <= 0 goto label119;

        $r43 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mPendingRemoveTmp>;

        $i21 = lengthof $r43;

        if $i21 >= i125 goto label114;

        $i22 = i125 + 10;

        $r59 = newarray (com.android.server.wm.WindowState)[$i22];

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mPendingRemoveTmp> = $r59;

     label114:
        $r49 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        $r51 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mPendingRemoveTmp>;

        virtualinvoke $r49.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r51);

        $r47 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        virtualinvoke $r47.<java.util.ArrayList: void clear()>();

        $r48 = new com.android.server.wm.DisplayContentList;

        specialinvoke $r48.<com.android.server.wm.DisplayContentList: void <init>()>();

        r190 = $r48;

        i126 = 0;

     label115:
        if i126 >= i125 goto label117;

        $r52 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState[] mPendingRemoveTmp>;

        r191 = $r52[i126];

        $r53 = r191.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void removeWindowInnerLocked(com.android.server.wm.Session,com.android.server.wm.WindowState)>($r53, r191);

        r192 = virtualinvoke r191.<com.android.server.wm.WindowState: com.android.server.wm.DisplayContent getDisplayContent()>();

        if r192 == null goto label116;

        $z20 = virtualinvoke r190.<com.android.server.wm.DisplayContentList: boolean contains(java.lang.Object)>(r192);

        if $z20 != 0 goto label116;

        virtualinvoke r190.<com.android.server.wm.DisplayContentList: boolean add(java.lang.Object)>(r192);

     label116:
        i126 = i126 + 1;

        goto label115;

     label117:
        r193 = virtualinvoke r190.<com.android.server.wm.DisplayContentList: java.util.Iterator iterator()>();

     label118:
        $z18 = interfaceinvoke r193.<java.util.Iterator: boolean hasNext()>();

        if $z18 == 0 goto label119;

        $r54 = interfaceinvoke r193.<java.util.Iterator: java.lang.Object next()>();

        r194 = (com.android.server.wm.DisplayContent) $r54;

        $r55 = virtualinvoke r194.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void assignLayersLocked(com.android.server.wm.WindowList)>($r55);

        r194.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

        goto label118;

     label119:
        $r45 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $i20 = virtualinvoke $r45.<android.util.SparseArray: int size()>();

        i127 = $i20 - 1;

     label120:
        if i127 < 0 goto label121;

        $r42 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r41 = virtualinvoke $r42.<android.util.SparseArray: java.lang.Object valueAt(int)>(i127);

        $r44 = (com.android.server.wm.DisplayContent) $r41;

        virtualinvoke $r44.<com.android.server.wm.DisplayContent: void checkForDeferredActions()>();

        i127 = i127 + -1;

        goto label120;

     label121:
        if z1 == 0 goto label122;

        $r46 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r46.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(0);

     label122:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void setFocusedStackFrame()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void enableScreenIfNeededLocked()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void scheduleAnimationLocked()>();

        return;

        catch android.os.RemoteException from label041 to label042 with label043;
        catch java.lang.RuntimeException from label010 to label059 with label060;
        catch java.lang.Throwable from label010 to label059 with label062;
        catch java.lang.Throwable from label060 to label061 with label062;
        catch java.lang.Throwable from label062 to label063 with label062;
        catch android.os.RemoteException from label092 to label093 with label094;
    }

    private int toBrightnessOverride(float)
    {
        com.android.server.wm.WindowManagerService r0;
        float f0, $f1;
        int $i0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        f0 := @parameter0: float;

        $f1 = f0 * 255.0F;

        $i0 = (int) $f1;

        return $i0;
    }

    void checkDrawnWindowsLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1;
        com.android.server.wm.WindowState r1;
        java.util.ArrayList $r2, $r4, $r5, $r8, $r10, $r11;
        boolean $z0, $z1, $z3, $z5, $z6;
        java.lang.Runnable $r3;
        com.android.server.wm.WindowManagerService$H $r6, $r7;
        java.lang.Object $r9;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r2 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWaitingForDrawn>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.lang.Runnable mWaitingForDrawnCallback>;

        if $r3 != null goto label2;

     label1:
        return;

     label2:
        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWaitingForDrawn>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i0 = $i1 - 1;

     label3:
        if i0 < 0 goto label7;

        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWaitingForDrawn>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.wm.WindowState) $r9;

        $z3 = r1.<com.android.server.wm.WindowState: boolean mRemoved>;

        if $z3 != 0 goto label4;

        $z6 = r1.<com.android.server.wm.WindowState: boolean mHasSurface>;

        if $z6 != 0 goto label5;

     label4:
        $r10 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWaitingForDrawn>;

        virtualinvoke $r10.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        goto label6;

     label5:
        $z5 = virtualinvoke r1.<com.android.server.wm.WindowState: boolean hasDrawnLw()>();

        if $z5 == 0 goto label6;

        $r11 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWaitingForDrawn>;

        virtualinvoke $r11.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

     label6:
        i0 = i0 + -1;

        goto label3;

     label7:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWaitingForDrawn>;

        $z1 = virtualinvoke $r5.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label8;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r6.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(24);

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r7.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(33);

     label8:
        return;
    }

    void setHoldScreenLocked(com.android.server.wm.Session)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.Session r1, $r7;
        boolean z0, z1, $z2;
        android.os.PowerManager$WakeLock $r2, $r4, $r5, $r9;
        android.view.WindowManagerPolicy $r3, $r6;
        android.os.WorkSource $r8;
        int $i0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.Session;

        if r1 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 == 0 goto label3;

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.Session mHoldingScreenOn>;

        if $r7 == r1 goto label3;

        $r9 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mHoldingScreenWakeLock>;

        $r8 = new android.os.WorkSource;

        $i0 = r1.<com.android.server.wm.Session: int mUid>;

        specialinvoke $r8.<android.os.WorkSource: void <init>(int)>($i0);

        virtualinvoke $r9.<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>($r8);

     label3:
        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.Session mHoldingScreenOn> = r1;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mHoldingScreenWakeLock>;

        z1 = virtualinvoke $r2.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if z0 == z1 goto label5;

        if z0 == 0 goto label4;

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mHoldingScreenWakeLock>;

        virtualinvoke $r5.<android.os.PowerManager$WakeLock: void acquire()>();

        $r6 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r6.<android.view.WindowManagerPolicy: void keepScreenOnStartedLw()>();

        goto label5;

     label4:
        $r3 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r3.<android.view.WindowManagerPolicy: void keepScreenOnStoppedLw()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mHoldingScreenWakeLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void release()>();

     label5:
        return;
    }

    void requestTraversal()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void requestTraversalLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void requestTraversalLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;
        com.android.server.wm.WindowManagerService$H $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mTraversalScheduled>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.wm.WindowManagerService: boolean mTraversalScheduled> = 1;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(4);

     label1:
        return;
    }

    void scheduleAnimationLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;
        com.android.server.wm.WindowAnimator $r1;
        java.lang.Runnable $r2;
        android.view.Choreographer $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mAnimationScheduled>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.wm.WindowManagerService: boolean mAnimationScheduled> = 1;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.view.Choreographer mChoreographer>;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r2 = $r1.<com.android.server.wm.WindowAnimator: java.lang.Runnable mAnimationRunnable>;

        virtualinvoke $r3.<android.view.Choreographer: void postCallback(int,java.lang.Runnable,java.lang.Object)>(1, $r2, null);

     label1:
        return;
    }

    private boolean needsLayout()
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        com.android.server.wm.DisplayContent r1;
        android.util.SparseArray $r2, $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r1 = (com.android.server.wm.DisplayContent) $r4;

        $z0 = r1.<com.android.server.wm.DisplayContent: boolean layoutNeeded>;

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    boolean copyAnimToLayoutParamsLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, $z1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        com.android.server.wm.WindowAnimator $r1, $r3;
        com.android.server.wm.WindowManagerService$LayoutFields $r2, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.Object $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 = 0;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        i0 = $r1.<com.android.server.wm.WindowAnimator: int mBulkUpdateParams>;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        staticinvoke <com.android.server.wm.WindowManagerService$LayoutFields: boolean access$1802(com.android.server.wm.WindowManagerService$LayoutFields,boolean)>($r9, 1);

        z0 = 1;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r10.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mWallpaperMayChange> = 1;

        z0 = 1;

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r7.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mWallpaperForceHidingChanged> = 1;

        z0 = 1;

     label3:
        $i4 = i0 & 8;

        if $i4 != 0 goto label4;

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r8.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mOrientationChangeComplete> = 0;

        goto label5;

     label4:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r2.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mOrientationChangeComplete> = 1;

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r4 = $r3.<com.android.server.wm.WindowAnimator: java.lang.Object mLastWindowFreezeSource>;

        $r5.<com.android.server.wm.WindowManagerService$LayoutFields: java.lang.Object mLastWindowFreezeSource> = $r4;

        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mWindowsFreezingScreen>;

        if $z1 == 0 goto label5;

        z0 = 1;

     label5:
        $i5 = i0 & 16;

        if $i5 == 0 goto label6;

        r0.<com.android.server.wm.WindowManagerService: boolean mTurnOnScreen> = 1;

     label6:
        $i6 = i0 & 32;

        if $i6 == 0 goto label7;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$LayoutFields mInnerFields>;

        $r6.<com.android.server.wm.WindowManagerService$LayoutFields: boolean mWallpaperActionPending> = 1;

     label7:
        return z0;
    }

    int adjustAnimationBackground(com.android.server.wm.WindowStateAnimator)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowStateAnimator r1, $r6;
        com.android.server.wm.WindowList r2;
        int i0, $i1, $i2, $i3;
        com.android.server.wm.WindowState r3, $r4;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowStateAnimator;

        $r4 = r1.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        r2 = virtualinvoke $r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowList getWindowList()>();

        $i1 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        i0 = $i1 - 1;

     label1:
        if i0 < 0 goto label3;

        $r5 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.wm.WindowState) $r5;

        $z0 = r3.<com.android.server.wm.WindowState: boolean mIsWallpaper>;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r3.<com.android.server.wm.WindowState: boolean isVisibleNow()>();

        if $z1 == 0 goto label2;

        $r6 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $i3 = $r6.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        return $i3;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        $i2 = r1.<com.android.server.wm.WindowStateAnimator: int mAnimLayer>;

        return $i2;
    }

    boolean reclaimSomeSurfaceMemoryLocked(com.android.server.wm.WindowStateAnimator, java.lang.String, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowStateAnimator r1, r6, r8;
        java.lang.String r2, $r12, $r45, $r70;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        android.view.SurfaceControl r3, $r30, $r38, $r42, $r47, $r53, $r68;
        long l0;
        int i1, i2, i3, i4, $i5, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, i20, i21, i22, i23;
        com.android.server.wm.WindowList r4, r74;
        com.android.server.wm.WindowState r5, $r9, $r16, $r18, $r20, r75;
        java.lang.Throwable r7, $r71;
        java.lang.Object[] $r10;
        com.android.server.wm.Session $r11, $r28, $r29, $r34, $r59, $r62;
        java.lang.Integer $r13;
        java.util.ArrayList $r14, $r26, $r65, $r67;
        android.util.SparseArray $r15, $r21, $r33;
        android.view.IWindow $r17;
        com.android.server.wm.AppWindowToken $r19, $r36, $r43, $r51;
        java.lang.Object $r22, $r27, $r32, $r37;
        android.util.SparseIntArray $r23, r73;
        com.android.server.wm.DisplayContent $r24, $r31;
        android.app.IActivityManager $r25;
        android.util.ArraySet $r35;
        java.lang.StringBuilder $r39, $r40, $r41, $r44, $r46, $r48, $r49, $r50, $r52, $r55, $r56, $r57, $r58, $r60, $r61, $r63, $r64, $r69;
        com.android.server.wm.WindowToken $r54;
        android.os.RemoteException $r66, $r72;
        int[] r76;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.WindowStateAnimator;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 = r1.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl>;

        z1 = 0;

        z2 = 0;

        $r10 = newarray (java.lang.Object)[3];

        $r9 = r1.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r12 = virtualinvoke $r9.<com.android.server.wm.WindowState: java.lang.String toString()>();

        $r10[0] = $r12;

        $r11 = r1.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.Session mSession>;

        $i5 = $r11.<com.android.server.wm.Session: int mPid>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r10[1] = $r13;

        $r10[2] = r2;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(31000, $r10);

        $r14 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        if $r14 != null goto label01;

        $r65 = new java.util.ArrayList;

        specialinvoke $r65.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves> = $r65;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", "Out of memory for surface!  Looking for leaks...");

        $r15 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i1 = virtualinvoke $r15.<android.util.SparseArray: int size()>();

        i2 = 0;

     label03:
        if i2 >= i1 goto label08;

        $r33 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r32 = virtualinvoke $r33.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r31 = (com.android.server.wm.DisplayContent) $r32;

        r4 = virtualinvoke $r31.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        i3 = virtualinvoke r4.<com.android.server.wm.WindowList: int size()>();

        i4 = 0;

     label04:
        if i4 >= i3 goto label07;

        $r37 = virtualinvoke r4.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i4);

        r5 = (com.android.server.wm.WindowState) $r37;

        r6 = r5.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r38 = r6.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl>;

        if $r38 == null goto label06;

        $r35 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mSessions>;

        $r34 = r6.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.Session mSession>;

        $z6 = virtualinvoke $r35.<android.util.ArraySet: boolean contains(java.lang.Object)>($r34);

        if $z6 != 0 goto label05;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEAKED SURFACE (session doesn\'t exist): ");

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r57 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" surface=");

        $r53 = r6.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl>;

        $r52 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r53);

        $r55 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token=");

        $r54 = r5.<com.android.server.wm.WindowState: com.android.server.wm.WindowToken mToken>;

        $r63 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pid=");

        $r62 = r5.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i18 = $r62.<com.android.server.wm.Session: int mPid>;

        $r60 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid=");

        $r59 = r5.<com.android.server.wm.WindowState: com.android.server.wm.Session mSession>;

        $i17 = $r59.<com.android.server.wm.Session: int mUid>;

        $r69 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r70);

        $r68 = r6.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r68.<android.view.SurfaceControl: void destroy()>();

        r6.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceShown> = 0;

        r6.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl> = null;

        r5.<com.android.server.wm.WindowState: boolean mHasSurface> = 0;

        $r67 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        virtualinvoke $r67.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        z1 = 1;

        goto label06;

     label05:
        $r36 = r5.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r36 == null goto label06;

        $r43 = r5.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $z7 = $r43.<com.android.server.wm.AppWindowToken: boolean clientHidden>;

        if $z7 == 0 goto label06;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEAKED SURFACE (app token hidden): ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" surface=");

        $r42 = r6.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl>;

        $r49 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r42);

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token=");

        $r51 = r5.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51);

        $r45 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", $r45);

        $r47 = r6.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r47.<android.view.SurfaceControl: void destroy()>();

        r6.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceShown> = 0;

        r6.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl> = null;

        r5.<com.android.server.wm.WindowState: boolean mHasSurface> = 0;

        z1 = 1;

     label06:
        i4 = i4 + 1;

        goto label04;

     label07:
        i2 = i2 + 1;

        goto label03;

     label08:
        if z1 != 0 goto label19;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "No leaked surfaces; killing applicatons!");

        $r23 = new android.util.SparseIntArray;

        specialinvoke $r23.<android.util.SparseIntArray: void <init>()>();

        r73 = $r23;

        i20 = 0;

     label09:
        if i20 >= i1 goto label19;

        $r21 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r22 = virtualinvoke $r21.<android.util.SparseArray: java.lang.Object valueAt(int)>(i20);

        $r24 = (com.android.server.wm.DisplayContent) $r22;

        r74 = virtualinvoke $r24.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        i21 = virtualinvoke r74.<com.android.server.wm.WindowList: int size()>();

        i22 = 0;

     label10:
        if i22 >= i21 goto label13;

        $r27 = virtualinvoke r74.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i22);

        r75 = (com.android.server.wm.WindowState) $r27;

        $r26 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $z5 = virtualinvoke $r26.<java.util.ArrayList: boolean contains(java.lang.Object)>(r75);

        if $z5 == 0 goto label11;

        goto label12;

     label11:
        r8 = r75.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r30 = r8.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl>;

        if $r30 == null goto label12;

        $r29 = r8.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.Session mSession>;

        $i15 = $r29.<com.android.server.wm.Session: int mPid>;

        $r28 = r8.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.Session mSession>;

        $i14 = $r28.<com.android.server.wm.Session: int mPid>;

        virtualinvoke r73.<android.util.SparseIntArray: void append(int,int)>($i15, $i14);

     label12:
        i22 = i22 + 1;

        goto label10;

     label13:
        $i10 = virtualinvoke r73.<android.util.SparseIntArray: int size()>();

        if $i10 <= 0 goto label18;

        $i12 = virtualinvoke r73.<android.util.SparseIntArray: int size()>();

        r76 = newarray (int)[$i12];

        i23 = 0;

     label14:
        $i11 = lengthof r76;

        if i23 >= $i11 goto label15;

        $i13 = virtualinvoke r73.<android.util.SparseIntArray: int keyAt(int)>(i23);

        r76[i23] = $i13;

        i23 = i23 + 1;

        goto label14;

     label15:
        $r25 = r0.<com.android.server.wm.WindowManagerService: android.app.IActivityManager mActivityManager>;

        $z4 = interfaceinvoke $r25.<android.app.IActivityManager: boolean killPids(int[],java.lang.String,boolean)>(r76, "Free memory", z0);

        if $z4 == 0 goto label16;

        z2 = 1;

     label16:
        goto label18;

     label17:
        $r72 := @caughtexception;

     label18:
        i20 = i20 + 1;

        goto label09;

     label19:
        if z1 != 0 goto label20;

        if z2 == 0 goto label24;

     label20:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WindowManager", "Looks like we have reclaimed some memory, clearing surface for retry.");

        if r3 == null goto label21;

        virtualinvoke r3.<android.view.SurfaceControl: void destroy()>();

        r1.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceShown> = 0;

        r1.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl> = null;

        $r20 = r1.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r20.<com.android.server.wm.WindowState: boolean mHasSurface> = 0;

        $r18 = r1.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r19 = $r18.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void scheduleRemoveStartingWindowLocked(com.android.server.wm.AppWindowToken)>($r19);

     label21:
        $r16 = r1.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $r17 = $r16.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        interfaceinvoke $r17.<android.view.IWindow: void dispatchGetNewSurface()>();

     label22:
        goto label24;

     label23:
        $r66 := @caughtexception;

     label24:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label27;

     label25:
        $r71 := @caughtexception;

        r7 = $r71;

     label26:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r7;

     label27:
        if z1 != 0 goto label28;

        if z2 == 0 goto label29;

     label28:
        $z3 = 1;

        goto label30;

     label29:
        $z3 = 0;

     label30:
        return $z3;

        catch android.os.RemoteException from label15 to label16 with label17;
        catch android.os.RemoteException from label21 to label22 with label23;
        catch java.lang.Throwable from label02 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
    }

    private boolean updateFocusedWindowLocked(int, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, $i2, $i3;
        boolean z0, z1, $z4;
        com.android.server.wm.WindowState r1, r3, $r4, $r10, $r11;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.WindowManagerService$H $r5, $r6;
        java.util.ArrayList $r7;
        com.android.server.wm.AccessibilityController $r8, $r14;
        android.view.WindowManagerPolicy $r9;
        com.android.server.wm.InputMonitor $r12;
        com.android.server.wm.WindowList $r13;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState computeFocusedWindowLocked()>();

        $r4 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        if $r4 == r1 goto label9;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32L, "wmUpdateFocus");

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r5.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(2);

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r6.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(2);

        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        if i0 == 1 goto label1;

        if i0 == 3 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean moveInputMethodWindowsIfNeededLocked(boolean)>($z4);

        if z1 == 0 goto label3;

        r2.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

        r1 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState computeFocusedWindowLocked()>();

     label3:
        r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus> = r1;

        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mLosingFocus>;

        virtualinvoke $r7.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r8 == null goto label4;

        $i3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        if $i3 != 0 goto label4;

        $r14 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r14.<com.android.server.wm.AccessibilityController: void onWindowFocusChangedLocked()>();

     label4:
        $r9 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        i1 = interfaceinvoke $r9.<android.view.WindowManagerPolicy: int focusChangedLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManagerPolicy$WindowState)>(r3, r1);

        if z1 == 0 goto label6;

        $r11 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow>;

        if r3 == $r11 goto label6;

        if i0 != 2 goto label5;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutLockedInner(com.android.server.wm.DisplayContent,boolean,boolean)>(r2, 1, z0);

        i1 = i1 & -2;

        goto label6;

     label5:
        if i0 != 3 goto label6;

        $r13 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void assignLayersLocked(com.android.server.wm.WindowList)>($r13);

     label6:
        $i2 = i1 & 1;

        if $i2 == 0 goto label7;

        r2.<com.android.server.wm.DisplayContent: boolean layoutNeeded> = 1;

        if i0 != 2 goto label7;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutLockedInner(com.android.server.wm.DisplayContent,boolean,boolean)>(r2, 1, z0);

     label7:
        if i0 == 1 goto label8;

        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        virtualinvoke $r12.<com.android.server.wm.InputMonitor: void setInputFocusLw(com.android.server.wm.WindowState,boolean)>($r10, z0);

     label8:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32L);

        return 1;

     label9:
        return 0;
    }

    private com.android.server.wm.WindowState computeFocusedWindowLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.WindowState r2, $r10, $r13;
        com.android.server.wm.WindowAnimator $r3, $r8, $r12;
        com.android.server.wm.WindowStateAnimator $r4, $r9, $r11;
        android.util.SparseArray $r5, $r6;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r4 = $r3.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowStateAnimator mUniverseBackground>;

        if $r4 == null goto label1;

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r9 = $r8.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowStateAnimator mUniverseBackground>;

        $r10 = $r9.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        $z0 = virtualinvoke $r10.<com.android.server.wm.WindowState: boolean canReceiveKeys()>();

        if $z0 == 0 goto label1;

        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        $r11 = $r12.<com.android.server.wm.WindowAnimator: com.android.server.wm.WindowStateAnimator mUniverseBackground>;

        $r13 = $r11.<com.android.server.wm.WindowStateAnimator: com.android.server.wm.WindowState mWin>;

        return $r13;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i0 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $r6 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r1 = (com.android.server.wm.DisplayContent) $r7;

        r2 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState findFocusedWindowLocked(com.android.server.wm.DisplayContent)>(r1);

        if r2 == null goto label3;

        return r2;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return null;
    }

    private com.android.server.wm.WindowState findFocusedWindowLocked(com.android.server.wm.DisplayContent)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.WindowList r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        com.android.server.wm.WindowState r3;
        com.android.server.wm.AppWindowToken r4, r7, $r10, $r14;
        java.util.ArrayList r5;
        com.android.server.wm.AppTokenList r6;
        java.lang.Object $r8, $r12, $r13;
        boolean $z0, $z1, $z2;
        android.view.WindowManager$LayoutParams $r9;
        com.android.server.wm.Task $r11;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        $i3 = virtualinvoke r2.<com.android.server.wm.WindowList: int size()>();

        i0 = $i3 - 1;

     label01:
        if i0 < 0 goto label12;

        $r8 = virtualinvoke r2.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.wm.WindowState) $r8;

        r4 = r3.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if r4 == null goto label02;

        $z1 = r4.<com.android.server.wm.AppWindowToken: boolean removed>;

        if $z1 != 0 goto label11;

        $z2 = r4.<com.android.server.wm.AppWindowToken: boolean sendingToBottom>;

        if $z2 == 0 goto label02;

        goto label11;

     label02:
        $z0 = virtualinvoke r3.<com.android.server.wm.WindowState: boolean canReceiveKeys()>();

        if $z0 != 0 goto label03;

        goto label11;

     label03:
        if r4 == null goto label10;

        $r9 = r3.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i4 = $r9.<android.view.WindowManager$LayoutParams: int type>;

        if $i4 == 3 goto label10;

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken mFocusedApp>;

        if $r10 == null goto label10;

        r5 = virtualinvoke r1.<com.android.server.wm.DisplayContent: java.util.ArrayList getTasks()>();

        $i5 = virtualinvoke r5.<java.util.ArrayList: int size()>();

        i1 = $i5 - 1;

     label04:
        if i1 < 0 goto label10;

        $r12 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r11 = (com.android.server.wm.Task) $r12;

        r6 = $r11.<com.android.server.wm.Task: com.android.server.wm.AppTokenList mAppTokens>;

        $i6 = virtualinvoke r6.<com.android.server.wm.AppTokenList: int size()>();

        i2 = $i6 - 1;

     label05:
        if i2 < 0 goto label08;

        $r13 = virtualinvoke r6.<com.android.server.wm.AppTokenList: java.lang.Object get(int)>(i2);

        r7 = (com.android.server.wm.AppWindowToken) $r13;

        if r4 != r7 goto label06;

        goto label08;

     label06:
        $r14 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken mFocusedApp>;

        if $r14 != r7 goto label07;

        return null;

     label07:
        i2 = i2 + -1;

        goto label05;

     label08:
        if i2 < 0 goto label09;

        goto label10;

     label09:
        i1 = i1 + -1;

        goto label04;

     label10:
        return r3;

     label11:
        i0 = i0 + -1;

        goto label01;

     label12:
        return null;
    }

    private void startFreezingDisplayLocked(boolean, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int i0, i1, i2, i3, i4, $i6, $i7;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.ScreenRotationAnimation r2, $r12, r19;
        com.android.server.wm.WindowList r3;
        com.android.server.wm.WindowState r4;
        android.view.WindowManagerPolicy $r5, $r7, $r11;
        long $l5;
        android.os.PowerManager$WakeLock $r6;
        com.android.server.wm.InputMonitor $r8;
        com.android.server.wm.AppTransition $r9, $r17;
        com.android.server.wm.WindowAnimator $r10, $r16;
        android.view.SurfaceSession $r13;
        android.content.Context $r14;
        java.lang.Object $r15;
        android.view.WindowManager$LayoutParams $r18;

        r0 := @this: com.android.server.wm.WindowManagerService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z2 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        if $z2 == 0 goto label1;

        return;

     label1:
        $z3 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayReady>;

        if $z3 == 0 goto label2;

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z4 = interfaceinvoke $r5.<android.view.WindowManagerPolicy: boolean isScreenOn()>();

        if $z4 != 0 goto label3;

     label2:
        return;

     label3:
        $r6 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mScreenFrozenLock>;

        virtualinvoke $r6.<android.os.PowerManager$WakeLock: void acquire()>();

        r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen> = 1;

        $l5 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.wm.WindowManagerService: long mDisplayFreezeTime> = $l5;

        r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource> = null;

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r8.<com.android.server.wm.InputMonitor: void freezeInputDispatchingLw()>();

        $r7 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r7.<android.view.WindowManagerPolicy: void setLastInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManagerPolicy$WindowState)>(null, null);

        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        $z5 = virtualinvoke $r9.<com.android.server.wm.AppTransition: boolean isTransitionSet()>();

        if $z5 == 0 goto label4;

        $r17 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r17.<com.android.server.wm.AppTransition: void freeze()>();

     label4:
        r0.<com.android.server.wm.WindowManagerService: int mExitAnimId> = i0;

        r0.<com.android.server.wm.WindowManagerService: int mEnterAnimId> = i1;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        i2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        r2 = virtualinvoke $r10.<com.android.server.wm.WindowAnimator: com.android.server.wm.ScreenRotationAnimation getScreenRotationAnimationLocked(int)>(i2);

        if r2 == null goto label5;

        virtualinvoke r2.<com.android.server.wm.ScreenRotationAnimation: void kill()>();

     label5:
        z1 = 0;

        r3 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()>();

        i3 = virtualinvoke r3.<com.android.server.wm.WindowList: int size()>();

        i4 = 0;

     label6:
        if i4 >= i3 goto label8;

        $r15 = virtualinvoke r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i4);

        r4 = (com.android.server.wm.WindowState) $r15;

        $z6 = virtualinvoke r4.<com.android.server.wm.WindowState: boolean isOnScreen()>();

        if $z6 == 0 goto label7;

        $r18 = r4.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i7 = $r18.<android.view.WindowManager$LayoutParams: int flags>;

        $i6 = $i7 & 8192;

        if $i6 == 0 goto label7;

        z1 = 1;

        goto label8;

     label7:
        i4 = i4 + 1;

        goto label6;

     label8:
        virtualinvoke r1.<com.android.server.wm.DisplayContent: void updateDisplayInfo()>();

        $r12 = new com.android.server.wm.ScreenRotationAnimation;

        $r14 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $r13 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceSession mFxSession>;

        $r11 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z7 = interfaceinvoke $r11.<android.view.WindowManagerPolicy: boolean isDefaultOrientationForced()>();

        specialinvoke $r12.<com.android.server.wm.ScreenRotationAnimation: void <init>(android.content.Context,com.android.server.wm.DisplayContent,android.view.SurfaceSession,boolean,boolean,boolean)>($r14, r1, $r13, z0, $z7, z1);

        r19 = $r12;

        $r16 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        virtualinvoke $r16.<com.android.server.wm.WindowAnimator: void setScreenRotationAnimationLocked(int,com.android.server.wm.ScreenRotationAnimation)>(i2, r19);

        return;
    }

    private void stopFreezingDisplayLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.StringBuilder r1, $r5;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10;
        com.android.server.wm.DisplayContent r2;
        int i0, $i1, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13;
        com.android.server.wm.ScreenRotationAnimation r3;
        android.view.DisplayInfo r4;
        long $l2, $l3, $l4, $l7;
        java.lang.Object $r6, $r19;
        java.lang.String $r7;
        com.android.server.wm.WindowManagerService$H $r8, $r9, $r12, $r13, $r15;
        com.android.server.wm.WindowAnimator $r10, $r16, $r20;
        com.android.server.wm.InputMonitor $r11;
        android.os.PowerManager$WakeLock $r14;
        android.view.WindowManagerPolicy $r17;
        float $f0;
        android.view.SurfaceSession $r18;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z2 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        if $z2 != 0 goto label01;

        return;

     label01:
        $z3 = r0.<com.android.server.wm.WindowManagerService: boolean mWaitingForConfig>;

        if $z3 != 0 goto label02;

        $i1 = r0.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen>;

        if $i1 > 0 goto label02;

        $z4 = r0.<com.android.server.wm.WindowManagerService: boolean mWindowsFreezingScreen>;

        if $z4 != 0 goto label02;

        $z5 = r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen>;

        if $z5 == 0 goto label03;

     label02:
        return;

     label03:
        r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen> = 0;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l3 = r0.<com.android.server.wm.WindowManagerService: long mDisplayFreezeTime>;

        $l4 = $l2 - $l3;

        $i5 = (int) $l4;

        r0.<com.android.server.wm.WindowManagerService: int mLastDisplayFreezeDuration> = $i5;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>(128);

        r1 = $r5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Screen frozen for ");

        $i6 = r0.<com.android.server.wm.WindowManagerService: int mLastDisplayFreezeDuration>;

        $l7 = (long) $i6;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>($l7, r1);

        $r6 = r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource>;

        if $r6 == null goto label04;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to ");

        $r19 = r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

     label04:
        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("WindowManager", $r7);

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r8.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(17);

        $r9 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r9.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(30);

        z0 = 0;

        r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        i0 = virtualinvoke r2.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        r3 = virtualinvoke $r10.<com.android.server.wm.WindowAnimator: com.android.server.wm.ScreenRotationAnimation getScreenRotationAnimationLocked(int)>(i0);

        if r3 == null goto label08;

        $z7 = virtualinvoke r3.<com.android.server.wm.ScreenRotationAnimation: boolean hasScreenshot()>();

        if $z7 == 0 goto label08;

        r4 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        z1 = virtualinvoke r2.<com.android.server.wm.DisplayContent: boolean isDimming()>();

        $r17 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i9 = r0.<com.android.server.wm.WindowManagerService: int mExitAnimId>;

        $i8 = r0.<com.android.server.wm.WindowManagerService: int mEnterAnimId>;

        $z8 = interfaceinvoke $r17.<android.view.WindowManagerPolicy: boolean validateRotationAnimationLw(int,int,boolean)>($i9, $i8, z1);

        if $z8 != 0 goto label05;

        r0.<com.android.server.wm.WindowManagerService: int mEnterAnimId> = 0;

        r0.<com.android.server.wm.WindowManagerService: int mExitAnimId> = 0;

     label05:
        $r18 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceSession mFxSession>;

        $f0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: float getTransitionAnimationScaleLocked()>();

        $i11 = r4.<android.view.DisplayInfo: int logicalWidth>;

        $i12 = r4.<android.view.DisplayInfo: int logicalHeight>;

        $i13 = r0.<com.android.server.wm.WindowManagerService: int mExitAnimId>;

        $i10 = r0.<com.android.server.wm.WindowManagerService: int mEnterAnimId>;

        $z9 = virtualinvoke r3.<com.android.server.wm.ScreenRotationAnimation: boolean dismiss(android.view.SurfaceSession,long,float,int,int,int,int)>($r18, 10000L, $f0, $i11, $i12, $i13, $i10);

        if $z9 == 0 goto label06;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void scheduleAnimationLocked()>();

        goto label07;

     label06:
        virtualinvoke r3.<com.android.server.wm.ScreenRotationAnimation: void kill()>();

        $r20 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        virtualinvoke $r20.<com.android.server.wm.WindowAnimator: void setScreenRotationAnimationLocked(int,com.android.server.wm.ScreenRotationAnimation)>(i0, null);

        z0 = 1;

     label07:
        goto label10;

     label08:
        if r3 == null goto label09;

        virtualinvoke r3.<com.android.server.wm.ScreenRotationAnimation: void kill()>();

        $r16 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        virtualinvoke $r16.<com.android.server.wm.WindowAnimator: void setScreenRotationAnimationLocked(int,com.android.server.wm.ScreenRotationAnimation)>(i0, null);

     label09:
        z0 = 1;

     label10:
        $r11 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r11.<com.android.server.wm.InputMonitor: void thawInputDispatchingLw()>();

        z10 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateOrientationFromAppTokensLocked(boolean)>(0);

        $r13 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r13.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(15);

        $r12 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r12.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(15, 2000L);

        $r14 = r0.<com.android.server.wm.WindowManagerService: android.os.PowerManager$WakeLock mScreenFrozenLock>;

        virtualinvoke $r14.<android.os.PowerManager$WakeLock: void release()>();

        if z0 == 0 goto label11;

        $z6 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean updateRotationUncheckedLocked(boolean)>(0);

        z10 = z10 | $z6;

     label11:
        if z10 == 0 goto label12;

        $r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r15.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessage(int)>(18);

     label12:
        return;
    }

    static int getPropertyInt(java.lang.String[], int, int, int, android.util.DisplayMetrics)
    {
        java.lang.String[] r0;
        int i0, i1, i2, i3, $i4, $i5, i6;
        android.util.DisplayMetrics r1;
        java.lang.String r2;
        float $f0, $f1;
        java.lang.Exception $r3;

        r0 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: android.util.DisplayMetrics;

        $i4 = lengthof r0;

        if i0 >= $i4 goto label4;

        r2 = r0[i0];

        if r2 == null goto label4;

        $i5 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i5 <= 0 goto label4;

     label1:
        i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

     label2:
        return i3;

     label3:
        $r3 := @caughtexception;

     label4:
        if i1 != 0 goto label5;

        return i2;

     label5:
        $f0 = (float) i2;

        $f1 = staticinvoke <android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>(i1, $f0, r1);

        i6 = (int) $f1;

        return i6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    void createWatermarkInTransaction()
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.File r1, $r9;
        java.io.FileInputStream r2, $r10;
        java.io.DataInputStream r3, $r11;
        java.lang.String r4;
        java.lang.String[] r5;
        java.lang.Throwable r6, $r26;
        com.android.server.wm.Watermark $r8, $r12;
        int $i0;
        android.view.Display $r13;
        com.android.server.wm.DisplayContent $r14;
        android.util.DisplayMetrics $r15;
        android.view.SurfaceSession $r16;
        java.io.FileNotFoundException $r17;
        java.io.IOException $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r27;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r8 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.Watermark mWatermark>;

        if $r8 == null goto label01;

        return;

     label01:
        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>("/system/etc/setup.conf");

        r1 = $r9;

        r2 = null;

        r3 = null;

     label02:
        $r10 = new java.io.FileInputStream;

        specialinvoke $r10.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        r2 = $r10;

        $r11 = new java.io.DataInputStream;

        specialinvoke $r11.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r2);

        r3 = $r11;

        r4 = virtualinvoke r3.<java.io.DataInputStream: java.lang.String readLine()>();

        if r4 == null goto label03;

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("%");

        if r5 == null goto label03;

        $i0 = lengthof r5;

        if $i0 <= 0 goto label03;

        $r12 = new com.android.server.wm.Watermark;

        $r14 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r13 = virtualinvoke $r14.<com.android.server.wm.DisplayContent: android.view.Display getDisplay()>();

        $r15 = r0.<com.android.server.wm.WindowManagerService: android.util.DisplayMetrics mRealDisplayMetrics>;

        $r16 = r0.<com.android.server.wm.WindowManagerService: android.view.SurfaceSession mFxSession>;

        specialinvoke $r12.<com.android.server.wm.Watermark: void <init>(android.view.Display,android.util.DisplayMetrics,android.view.SurfaceSession,java.lang.String[])>($r13, $r15, $r16, r5);

        r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.Watermark mWatermark> = $r12;

     label03:
        if r3 == null goto label07;

     label04:
        virtualinvoke r3.<java.io.DataInputStream: void close()>();

     label05:
        goto label39;

     label06:
        $r22 := @caughtexception;

        goto label39;

     label07:
        if r2 == null goto label39;

     label08:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label09:
        goto label39;

     label10:
        $r19 := @caughtexception;

        goto label39;

     label11:
        $r17 := @caughtexception;

     label12:
        if r3 == null goto label16;

     label13:
        virtualinvoke r3.<java.io.DataInputStream: void close()>();

     label14:
        goto label39;

     label15:
        $r20 := @caughtexception;

        goto label39;

     label16:
        if r2 == null goto label39;

     label17:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label18:
        goto label39;

     label19:
        $r25 := @caughtexception;

        goto label39;

     label20:
        $r27 := @caughtexception;

     label21:
        if r3 == null goto label25;

     label22:
        virtualinvoke r3.<java.io.DataInputStream: void close()>();

     label23:
        goto label39;

     label24:
        $r18 := @caughtexception;

        goto label39;

     label25:
        if r2 == null goto label39;

     label26:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label27:
        goto label39;

     label28:
        $r24 := @caughtexception;

        goto label39;

     label29:
        $r26 := @caughtexception;

        r6 = $r26;

     label30:
        if r3 == null goto label34;

     label31:
        virtualinvoke r3.<java.io.DataInputStream: void close()>();

     label32:
        goto label38;

     label33:
        $r23 := @caughtexception;

        goto label38;

     label34:
        if r2 == null goto label38;

     label35:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label36:
        goto label38;

     label37:
        $r21 := @caughtexception;

     label38:
        throw r6;

     label39:
        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.FileNotFoundException from label02 to label03 with label11;
        catch java.io.IOException from label13 to label14 with label15;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.io.IOException from label02 to label03 with label20;
        catch java.io.IOException from label22 to label23 with label24;
        catch java.io.IOException from label26 to label27 with label28;
        catch java.lang.Throwable from label02 to label03 with label29;
        catch java.lang.Throwable from label11 to label12 with label29;
        catch java.lang.Throwable from label20 to label21 with label29;
        catch java.io.IOException from label31 to label32 with label33;
        catch java.io.IOException from label35 to label36 with label37;
        catch java.lang.Throwable from label29 to label30 with label29;
    }

    public void statusBarVisibilityChanged(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, $i1, i2;
        java.util.HashMap r1, $r4;
        java.lang.Throwable r2, $r7;
        android.content.Context $r3;
        android.view.WindowManagerPolicy $r5;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.STATUS_BAR");

        if $i1 == 0 goto label1;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller does not hold permission android.permission.STATUS_BAR");

        throw $r6;

     label1:
        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r4;

        entermonitor $r4;

     label2:
        r0.<com.android.server.wm.WindowManagerService: int mLastStatusBarVisibility> = i0;

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        i2 = interfaceinvoke $r5.<android.view.WindowManagerPolicy: int adjustSystemUiVisibilityLw(int)>(i0);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void updateStatusBarVisibilityLocked(int)>(i2);

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void updateStatusBarVisibilityLocked(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;
        com.android.server.wm.WindowList r1;
        com.android.server.wm.WindowState r2;
        com.android.server.input.InputManagerService $r3;
        java.lang.Object $r4;
        android.view.WindowManager$LayoutParams $r5;
        android.view.IWindow $r6;
        boolean $z0;
        android.os.RemoteException $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        virtualinvoke $r3.<com.android.server.input.InputManagerService: void setSystemUiVisibility(int)>(i0);

        r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()>();

        i1 = virtualinvoke r1.<com.android.server.wm.WindowList: int size()>();

        i2 = 0;

     label1:
        if i2 >= i1 goto label8;

        $r4 = virtualinvoke r1.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r2 = (com.android.server.wm.WindowState) $r4;

     label2:
        i3 = r2.<com.android.server.wm.WindowState: int mSystemUiVisibility>;

        i4 = i3 ^ i0;

        i13 = i4 & 7;

        $i6 = i0 ^ -1;

        i14 = i13 & $i6;

        $i7 = i14 ^ -1;

        $i10 = i3 & $i7;

        $i8 = i0 & i14;

        i5 = $i10 | $i8;

        if i5 == i3 goto label3;

        $i11 = r2.<com.android.server.wm.WindowState: int mSeq>;

        $i12 = $i11 + 1;

        r2.<com.android.server.wm.WindowState: int mSeq> = $i12;

        r2.<com.android.server.wm.WindowState: int mSystemUiVisibility> = i5;

     label3:
        if i5 != i3 goto label4;

        $r5 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z0 = $r5.<android.view.WindowManager$LayoutParams: boolean hasSystemUiListeners>;

        if $z0 == 0 goto label5;

     label4:
        $r6 = r2.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $i9 = r2.<com.android.server.wm.WindowState: int mSeq>;

        interfaceinvoke $r6.<android.view.IWindow: void dispatchSystemUiVisibilityChanged(int,int,int,int)>($i9, i0, i5, i14);

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

     label7:
        i2 = i2 + 1;

        goto label1;

     label8:
        return;

        catch android.os.RemoteException from label2 to label5 with label6;
    }

    public void reevaluateStatusBarVisibility()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r3;
        int i0, $i1;
        java.lang.Throwable r2, $r5;
        android.view.WindowManagerPolicy $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i1 = r0.<com.android.server.wm.WindowManagerService: int mLastStatusBarVisibility>;

        i0 = interfaceinvoke $r4.<android.view.WindowManagerPolicy: int adjustSystemUiVisibilityLw(int)>($i1);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void updateStatusBarVisibilityLocked(int)>(i0);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public android.view.WindowManagerPolicy$FakeWindow addFakeWindow(android.os.Looper, android.view.InputEventReceiver$Factory, java.lang.String, int, int, int, boolean, boolean, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.Looper r1;
        android.view.InputEventReceiver$Factory r2;
        java.lang.String r3;
        int i0, i1, i2, $i4, $i5, $i6;
        boolean z0, z1, z2;
        java.util.HashMap r4, $r7;
        com.android.server.wm.FakeWindowImpl r5, $r8, $r13;
        byte b3;
        java.lang.Throwable r6, $r15;
        java.util.ArrayList $r9, $r11, $r12;
        com.android.server.wm.InputMonitor $r10;
        java.lang.Object $r14;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.Looper;

        r2 := @parameter1: android.view.InputEventReceiver$Factory;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        z0 := @parameter6: boolean;

        z1 := @parameter7: boolean;

        z2 := @parameter8: boolean;

        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r4 = $r7;

        entermonitor $r7;

     label1:
        $r8 = new com.android.server.wm.FakeWindowImpl;

        specialinvoke $r8.<com.android.server.wm.FakeWindowImpl: void <init>(com.android.server.wm.WindowManagerService,android.os.Looper,android.view.InputEventReceiver$Factory,java.lang.String,int,int,int,boolean,boolean,boolean)>(r0, r1, r2, r3, i0, i1, i2, z0, z1, z2);

        r5 = $r8;

        b3 = 0;

     label2:
        $r9 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mFakeWindows>;

        $i4 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        if b3 >= $i4 goto label3;

        $r12 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mFakeWindows>;

        $r14 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>(b3);

        $r13 = (com.android.server.wm.FakeWindowImpl) $r14;

        $i5 = $r13.<com.android.server.wm.FakeWindowImpl: int mWindowLayer>;

        $i6 = r5.<com.android.server.wm.FakeWindowImpl: int mWindowLayer>;

        if $i5 > $i6 goto label2;

        goto label3;

     label3:
        $r11 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mFakeWindows>;

        virtualinvoke $r11.<java.util.ArrayList: void add(int,java.lang.Object)>(b3, r5);

        $r10 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r10.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        exitmonitor r4;

     label4:
        return r5;

     label5:
        $r15 := @caughtexception;

        r6 = $r15;

        exitmonitor r4;

     label6:
        throw r6;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    boolean removeFakeWindowLocked(android.view.WindowManagerPolicy$FakeWindow)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.WindowManagerPolicy$FakeWindow r1;
        java.util.HashMap r2, $r4;
        java.lang.Throwable r3, $r7;
        java.util.ArrayList $r5;
        boolean $z0;
        com.android.server.wm.InputMonitor $r6;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.WindowManagerPolicy$FakeWindow;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mFakeWindows>;

        $z0 = virtualinvoke $r5.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.InputMonitor mInputMonitor>;

        virtualinvoke $r6.<com.android.server.wm.InputMonitor: void updateInputWindowsLw(boolean)>(1);

        exitmonitor r2;

     label2:
        return 1;

     label3:
        exitmonitor r2;

     label4:
        return 0;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void saveLastInputMethodWindowForTransition()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r4;
        java.lang.Throwable r3, $r9;
        com.android.server.wm.WindowState $r5, $r6, $r7;
        android.view.WindowManagerPolicy $r8;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r5 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow>;

        if $r5 == null goto label2;

        $r8 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r7 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow>;

        $r6 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget>;

        interfaceinvoke $r8.<android.view.WindowManagerPolicy: void setLastInputMethodWindowLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManagerPolicy$WindowState)>($r7, $r6);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r1;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getInputMethodWindowVisibleHeight()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r5;
        android.view.WindowManagerPolicy $r4;
        int $i0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i0 = interfaceinvoke $r4.<android.view.WindowManagerPolicy: int getInputMethodWindowVisibleHeightLw()>();

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean hasNavigationBar()
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.WindowManagerPolicy $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy: boolean hasNavigationBar()>();

        return $z0;
    }

    public void lockNow(android.os.Bundle)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.Bundle r1;
        android.view.WindowManagerPolicy $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.Bundle;

        $r2 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r2.<android.view.WindowManagerPolicy: void lockNow(android.os.Bundle)>(r1);

        return;
    }

    public void showRecentApps()
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.WindowManagerPolicy $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r1.<android.view.WindowManagerPolicy: void showRecentApps()>();

        return;
    }

    public boolean isSafeModeEnabled()
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mSafeMode>;

        return $z0;
    }

    public boolean clearWindowContentFrameStats(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        java.util.HashMap r2, $r6, $r7;
        com.android.server.wm.WindowState r3;
        android.view.SurfaceControl r4;
        java.lang.Throwable r5, $r11;
        boolean $z0, $z1;
        java.lang.Object $r8;
        com.android.server.wm.WindowStateAnimator $r9;
        java.lang.SecurityException $r10;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.FRAME_STATS", "clearWindowContentFrameStats()");

        if $z0 != 0 goto label1;

        $r10 = new java.lang.SecurityException;

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires FRAME_STATS permission");

        throw $r10;

     label1:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r6;

        entermonitor $r6;

     label2:
        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.wm.WindowState) $r8;

        if r3 != null goto label4;

        exitmonitor r2;

     label3:
        return 0;

     label4:
        $r9 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        r4 = $r9.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl>;

        if r4 != null goto label6;

        exitmonitor r2;

     label5:
        return 0;

     label6:
        $z1 = virtualinvoke r4.<android.view.SurfaceControl: boolean clearContentFrameStats()>();

        exitmonitor r2;

     label7:
        return $z1;

     label8:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r2;

     label9:
        throw r5;

        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService r0;
        android.os.IBinder r1;
        java.util.HashMap r2, $r7, $r8;
        com.android.server.wm.WindowState r3;
        android.view.SurfaceControl r4;
        android.view.WindowContentFrameStats r5, $r11, $r12;
        java.lang.Throwable r6, $r14;
        boolean $z0, $z1;
        java.lang.Object $r9;
        com.android.server.wm.WindowStateAnimator $r10;
        java.lang.SecurityException $r13;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.os.IBinder;

        $z0 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.FRAME_STATS", "getWindowContentFrameStats()");

        if $z0 != 0 goto label01;

        $r13 = new java.lang.SecurityException;

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires FRAME_STATS permission");

        throw $r13;

     label01:
        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r7;

        entermonitor $r7;

     label02:
        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.wm.WindowState) $r9;

        if r3 != null goto label04;

        exitmonitor r2;

     label03:
        return null;

     label04:
        $r10 = r3.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        r4 = $r10.<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl mSurfaceControl>;

        if r4 != null goto label06;

        exitmonitor r2;

     label05:
        return null;

     label06:
        $r11 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowContentFrameStats mTempWindowRenderStats>;

        if $r11 != null goto label07;

        $r12 = new android.view.WindowContentFrameStats;

        specialinvoke $r12.<android.view.WindowContentFrameStats: void <init>()>();

        r0.<com.android.server.wm.WindowManagerService: android.view.WindowContentFrameStats mTempWindowRenderStats> = $r12;

     label07:
        r5 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowContentFrameStats mTempWindowRenderStats>;

        $z1 = virtualinvoke r4.<android.view.SurfaceControl: boolean getContentFrameStats(android.view.WindowContentFrameStats)>(r5);

        if $z1 != 0 goto label09;

        exitmonitor r2;

     label08:
        return null;

     label09:
        exitmonitor r2;

     label10:
        return r5;

     label11:
        $r14 := @caughtexception;

        r6 = $r14;

        exitmonitor r2;

     label12:
        throw r6;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    void dumpPolicyLocked(java.io.PrintWriter, java.lang.String[], boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        boolean z0;
        android.view.WindowManagerPolicy $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String[];

        z0 := @parameter2: boolean;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER POLICY STATE (dumpsys window policy)");

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r3.<android.view.WindowManagerPolicy: void dump(java.lang.String,java.io.PrintWriter,java.lang.String[])>("    ", r1, r2);

        return;
    }

    void dumpAnimatorLocked(java.io.PrintWriter, java.lang.String[], boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        boolean z0;
        com.android.server.wm.WindowAnimator $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String[];

        z0 := @parameter2: boolean;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER ANIMATOR STATE (dumpsys window animator)");

        $r3 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        virtualinvoke $r3.<com.android.server.wm.WindowAnimator: void dumpLocked(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", z0);

        return;
    }

    void dumpTokensLocked(java.io.PrintWriter, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        boolean z0, $z1;
        java.util.Iterator r2;
        com.android.server.wm.WindowToken r3, r22, r23;
        java.util.HashMap $r4, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        java.util.ArrayList $r5, $r6, $r13, $r14, $r15, $r17;
        android.util.ArraySet $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Object $r16, $r19, $r21;
        java.util.Collection $r20;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER TOKENS (dumpsys window tokens)");

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $i0 = virtualinvoke $r4.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label04;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  All tokens:");

        $r18 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mTokenMap>;

        $r20 = virtualinvoke $r18.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r21 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.wm.WindowToken) $r21;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r3);

        if z0 == 0 goto label02;

        virtualinvoke r1.<java.io.PrintWriter: void println(char)>(58);

        virtualinvoke r3.<com.android.server.wm.WindowToken: void dump(java.io.PrintWriter,java.lang.String)>(r1, "    ");

        goto label03;

     label02:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label03:
        goto label01;

     label04:
        $r5 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        $i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if $i1 <= 0 goto label08;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Wallpaper tokens:");

        $r15 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        $i8 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        i9 = $i8 - 1;

     label05:
        if i9 < 0 goto label08;

        $r17 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWallpaperTokens>;

        $r19 = virtualinvoke $r17.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        r22 = (com.android.server.wm.WindowToken) $r19;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Wallpaper #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i9);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r22);

        if z0 == 0 goto label06;

        virtualinvoke r1.<java.io.PrintWriter: void println(char)>(58);

        virtualinvoke r22.<com.android.server.wm.WindowToken: void dump(java.io.PrintWriter,java.lang.String)>(r1, "    ");

        goto label07;

     label06:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label07:
        i9 = i9 + -1;

        goto label05;

     label08:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mFinishedStarting>;

        $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if $i2 <= 0 goto label12;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Finishing start of application tokens:");

        $r13 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mFinishedStarting>;

        $i7 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i10 = $i7 - 1;

     label09:
        if i10 < 0 goto label12;

        $r14 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mFinishedStarting>;

        $r16 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>(i10);

        r23 = (com.android.server.wm.WindowToken) $r16;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Finished Starting #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i10);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r23);

        if z0 == 0 goto label10;

        virtualinvoke r1.<java.io.PrintWriter: void println(char)>(58);

        virtualinvoke r23.<com.android.server.wm.WindowToken: void dump(java.io.PrintWriter,java.lang.String)>(r1, "    ");

        goto label11;

     label10:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label11:
        i10 = i10 + -1;

        goto label09;

     label12:
        $r7 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        $i3 = virtualinvoke $r7.<android.util.ArraySet: int size()>();

        if $i3 > 0 goto label13;

        $r11 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps>;

        $i6 = virtualinvoke $r11.<android.util.ArraySet: int size()>();

        if $i6 <= 0 goto label15;

     label13:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r8 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        $i4 = virtualinvoke $r8.<android.util.ArraySet: int size()>();

        if $i4 <= 0 goto label14;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mOpeningApps=");

        $r12 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mOpeningApps>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r12);

     label14:
        $r9 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps>;

        $i5 = virtualinvoke $r9.<android.util.ArraySet: int size()>();

        if $i5 <= 0 goto label15;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mClosingApps=");

        $r10 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mClosingApps>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r10);

     label15:
        return;
    }

    void dumpSessionsLocked(java.io.PrintWriter, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        boolean z0;
        int i0, $i1;
        com.android.server.wm.Session r2;
        android.util.ArraySet $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER SESSIONS (dumpsys window sessions)");

        i0 = 0;

     label1:
        $r3 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mSessions>;

        $i1 = virtualinvoke $r3.<android.util.ArraySet: int size()>();

        if i0 >= $i1 goto label2;

        $r4 = r0.<com.android.server.wm.WindowManagerService: android.util.ArraySet mSessions>;

        $r5 = virtualinvoke $r4.<android.util.ArraySet: java.lang.Object valueAt(int)>(i0);

        r2 = (com.android.server.wm.Session) $r5;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Session ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void println(char)>(58);

        virtualinvoke r2.<com.android.server.wm.Session: void dump(java.io.PrintWriter,java.lang.String)>(r1, "    ");

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    void dumpDisplayContentsLocked(java.io.PrintWriter, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        boolean z0, $z1;
        int i0, i1;
        com.android.server.wm.DisplayContent r2;
        android.util.SparseArray $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER DISPLAY CONTENTS (dumpsys window displays)");

        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayReady>;

        if $z1 == 0 goto label3;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r2 = (com.android.server.wm.DisplayContent) $r5;

        virtualinvoke r2.<com.android.server.wm.DisplayContent: void dump(java.lang.String,java.io.PrintWriter)>("  ", r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  NO DISPLAY");

     label4:
        return;
    }

    void dumpWindowsLocked(java.io.PrintWriter, boolean, java.util.ArrayList)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        boolean z0;
        java.util.ArrayList r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.util.ArrayList;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER WINDOWS (dumpsys window windows)");

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpWindowsNoHeaderLocked(java.io.PrintWriter,boolean,java.util.ArrayList)>(r1, z0, r2);

        return;
    }

    void dumpWindowsNoHeaderLocked(java.io.PrintWriter, boolean, java.util.ArrayList)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22;
        java.util.ArrayList r2, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r36, $r38, $r39, $r41, $r42, $r44, $r45, $r46, $r47, $r48, $r49, $r51, $r53, $r54, $r60;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, i39, i40, i41, i42, i43, i44, i45, i46;
        com.android.server.wm.WindowList r3;
        com.android.server.wm.WindowState r4, $r14, $r15, $r17, $r18, $r22, $r23, $r24, $r25, $r26, $r32, $r33, $r34, $r35, r62, r63, r64, r65, r66, r67, r68;
        android.util.SparseArray $r5, $r29, $r58;
        android.content.res.Configuration $r13;
        com.android.server.wm.AppWindowToken $r16;
        long $l9;
        java.lang.Object $r19, $r27, $r30, $r37, $r40, $r43, $r50, $r52, $r55, $r57, $r59, $r61;
        java.lang.String $r20, $r31;
        android.graphics.Rect $r21;
        float $f0, $f1, $f2, $f3, $f4;
        com.android.server.wm.AppTransition $r28;
        com.android.server.wm.DisplayContent $r56, r69;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.util.ArrayList;

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i0 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        i1 = 0;

     label01:
        if i1 >= i0 goto label09;

        $r58 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r57 = virtualinvoke $r58.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r56 = (com.android.server.wm.DisplayContent) $r57;

        r3 = virtualinvoke $r56.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        $i38 = virtualinvoke r3.<com.android.server.wm.WindowList: int size()>();

        i2 = $i38 - 1;

     label02:
        if i2 < 0 goto label08;

        $r61 = virtualinvoke r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i2);

        r4 = (com.android.server.wm.WindowState) $r61;

        if r2 == null goto label03;

        $z22 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r4);

        if $z22 == 0 goto label07;

     label03:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Window #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i2);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r4);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(":");

        if z0 != 0 goto label04;

        if r2 == null goto label05;

     label04:
        $z21 = 1;

        goto label06;

     label05:
        $z21 = 0;

     label06:
        virtualinvoke r4.<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", $z21);

     label07:
        i2 = i2 + -1;

        goto label02;

     label08:
        i1 = i1 + 1;

        goto label01;

     label09:
        $r6 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        $i3 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if $i3 <= 0 goto label13;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Input method dialogs:");

        $r51 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        $i36 = virtualinvoke $r51.<java.util.ArrayList: int size()>();

        i39 = $i36 - 1;

     label10:
        if i39 < 0 goto label13;

        $r60 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        $r59 = virtualinvoke $r60.<java.util.ArrayList: java.lang.Object get(int)>(i39);

        r62 = (com.android.server.wm.WindowState) $r59;

        if r2 == null goto label11;

        $z20 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r62);

        if $z20 == 0 goto label12;

     label11:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  IM Dialog #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i39);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(": ");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>(r62);

     label12:
        i39 = i39 + -1;

        goto label10;

     label13:
        $r7 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        $i4 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        if $i4 <= 0 goto label18;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Remove pending for:");

        $r54 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        $i37 = virtualinvoke $r54.<java.util.ArrayList: int size()>();

        i40 = $i37 - 1;

     label14:
        if i40 < 0 goto label18;

        $r53 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mPendingRemove>;

        $r52 = virtualinvoke $r53.<java.util.ArrayList: java.lang.Object get(int)>(i40);

        r63 = (com.android.server.wm.WindowState) $r52;

        if r2 == null goto label15;

        $z19 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r63);

        if $z19 == 0 goto label17;

     label15:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Remove #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i40);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r63);

        if z0 == 0 goto label16;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r63.<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", 1);

        goto label17;

     label16:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label17:
        i40 = i40 + -1;

        goto label14;

     label18:
        $r8 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        if $r8 == null goto label22;

        $r48 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $i35 = virtualinvoke $r48.<java.util.ArrayList: int size()>();

        if $i35 <= 0 goto label22;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Windows force removing:");

        $r47 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $i34 = virtualinvoke $r47.<java.util.ArrayList: int size()>();

        i41 = $i34 - 1;

     label19:
        if i41 < 0 goto label22;

        $r46 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $r55 = virtualinvoke $r46.<java.util.ArrayList: java.lang.Object get(int)>(i41);

        r64 = (com.android.server.wm.WindowState) $r55;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Removing #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i41);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r64);

        if z0 == 0 goto label20;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r64.<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", 1);

        goto label21;

     label20:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label21:
        i41 = i41 + -1;

        goto label19;

     label22:
        $r9 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        $i5 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        if $i5 <= 0 goto label27;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Windows waiting to destroy their surface:");

        $r42 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        $i32 = virtualinvoke $r42.<java.util.ArrayList: int size()>();

        i42 = $i32 - 1;

     label23:
        if i42 < 0 goto label27;

        $r49 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mDestroySurface>;

        $r50 = virtualinvoke $r49.<java.util.ArrayList: java.lang.Object get(int)>(i42);

        r65 = (com.android.server.wm.WindowState) $r50;

        if r2 == null goto label24;

        $z18 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r65);

        if $z18 == 0 goto label26;

     label24:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Destroy #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i42);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r65);

        if z0 == 0 goto label25;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r65.<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", 1);

        goto label26;

     label25:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label26:
        i42 = i42 + -1;

        goto label23;

     label27:
        $r10 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mLosingFocus>;

        $i6 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        if $i6 <= 0 goto label32;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Windows losing focus:");

        $r45 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mLosingFocus>;

        $i33 = virtualinvoke $r45.<java.util.ArrayList: int size()>();

        i43 = $i33 - 1;

     label28:
        if i43 < 0 goto label32;

        $r44 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mLosingFocus>;

        $r43 = virtualinvoke $r44.<java.util.ArrayList: java.lang.Object get(int)>(i43);

        r66 = (com.android.server.wm.WindowState) $r43;

        if r2 == null goto label29;

        $z16 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r66);

        if $z16 == 0 goto label31;

     label29:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Losing #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i43);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r66);

        if z0 == 0 goto label30;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r66.<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", 1);

        goto label31;

     label30:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label31:
        i43 = i43 + -1;

        goto label28;

     label32:
        $r11 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $i7 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        if $i7 <= 0 goto label37;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Windows waiting to resize:");

        $r36 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $i30 = virtualinvoke $r36.<java.util.ArrayList: int size()>();

        i44 = $i30 - 1;

     label33:
        if i44 < 0 goto label37;

        $r38 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $r37 = virtualinvoke $r38.<java.util.ArrayList: java.lang.Object get(int)>(i44);

        r67 = (com.android.server.wm.WindowState) $r37;

        if r2 == null goto label34;

        $z17 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r67);

        if $z17 == 0 goto label36;

     label34:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Resizing #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i44);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r67);

        if z0 == 0 goto label35;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r67.<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>(r1, "    ", 1);

        goto label36;

     label35:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label36:
        i44 = i44 + -1;

        goto label33;

     label37:
        $r12 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWaitingForDrawn>;

        $i8 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        if $i8 <= 0 goto label39;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Clients waiting for these windows to be drawn:");

        $r39 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWaitingForDrawn>;

        $i31 = virtualinvoke $r39.<java.util.ArrayList: int size()>();

        i45 = $i31 - 1;

     label38:
        if i45 < 0 goto label39;

        $r41 = r0.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWaitingForDrawn>;

        $r40 = virtualinvoke $r41.<java.util.ArrayList: java.lang.Object get(int)>(i45);

        r68 = (com.android.server.wm.WindowState) $r40;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Waiting #");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i45);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>(r68);

        i45 = i45 + -1;

        goto label38;

     label39:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mCurConfiguration=");

        $r13 = r0.<com.android.server.wm.WindowManagerService: android.content.res.Configuration mCurConfiguration>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r13);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mHasPermanentDpad=");

        $z1 = r0.<com.android.server.wm.WindowManagerService: boolean mHasPermanentDpad>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mCurrentFocus=");

        $r15 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r15);

        $r17 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLastFocus>;

        $r14 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        if $r17 == $r14 goto label40;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mLastFocus=");

        $r32 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLastFocus>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r32);

     label40:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mFocusedApp=");

        $r16 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken mFocusedApp>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r16);

        $r18 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget>;

        if $r18 == null goto label41;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mInputMethodTarget=");

        $r33 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodTarget>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r33);

     label41:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mInTouchMode=");

        $z2 = r0.<com.android.server.wm.WindowManagerService: boolean mInTouchMode>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mLayoutSeq=");

        $i10 = r0.<com.android.server.wm.WindowManagerService: int mLayoutSeq>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i10);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mLastDisplayFreezeDuration=");

        $i11 = r0.<com.android.server.wm.WindowManagerService: int mLastDisplayFreezeDuration>;

        $l9 = (long) $i11;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l9, r1);

        $r19 = r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource>;

        if $r19 == null goto label42;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" due to ");

        $r30 = r0.<com.android.server.wm.WindowManagerService: java.lang.Object mLastFinishedFreezeSource>;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.Object)>($r30);

     label42:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        if z0 == 0 goto label55;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mSystemDecorLayer=");

        $i13 = r0.<com.android.server.wm.WindowManagerService: int mSystemDecorLayer>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i13);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mScreenRect=");

        $r21 = r0.<com.android.server.wm.WindowManagerService: android.graphics.Rect mScreenRect>;

        $r20 = virtualinvoke $r21.<android.graphics.Rect: java.lang.String toShortString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        $i12 = r0.<com.android.server.wm.WindowManagerService: int mLastStatusBarVisibility>;

        if $i12 == 0 goto label43;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mLastStatusBarVisibility=0x");

        $i29 = r0.<com.android.server.wm.WindowManagerService: int mLastStatusBarVisibility>;

        $r31 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i29);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r31);

     label43:
        $r24 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow>;

        if $r24 == null goto label44;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mInputMethodWindow=");

        $r35 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mInputMethodWindow>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r35);

     label44:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mWallpaperTarget=");

        $r25 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mWallpaperTarget>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r25);

        $r22 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget>;

        if $r22 != null goto label45;

        $r34 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mUpperWallpaperTarget>;

        if $r34 == null goto label46;

     label45:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mLowerWallpaperTarget=");

        $r23 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLowerWallpaperTarget>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r23);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mUpperWallpaperTarget=");

        $r26 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mUpperWallpaperTarget>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r26);

     label46:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mLastWallpaperX=");

        $f1 = r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperX>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mLastWallpaperY=");

        $f0 = r0.<com.android.server.wm.WindowManagerService: float mLastWallpaperY>;

        virtualinvoke r1.<java.io.PrintWriter: void println(float)>($f0);

        $i14 = r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetX>;

        if $i14 != -2147483648 goto label47;

        $i28 = r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetY>;

        if $i28 == -2147483648 goto label48;

     label47:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mLastWallpaperDisplayOffsetX=");

        $i18 = r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetX>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i18);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mLastWallpaperDisplayOffsetY=");

        $i17 = r0.<com.android.server.wm.WindowManagerService: int mLastWallpaperDisplayOffsetY>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i17);

     label48:
        $i16 = r0.<com.android.server.wm.WindowManagerService: int mInputMethodAnimLayerAdjustment>;

        if $i16 != 0 goto label49;

        $i27 = r0.<com.android.server.wm.WindowManagerService: int mWallpaperAnimLayerAdjustment>;

        if $i27 == 0 goto label50;

     label49:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mInputMethodAnimLayerAdjustment=");

        $i15 = r0.<com.android.server.wm.WindowManagerService: int mInputMethodAnimLayerAdjustment>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i15);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mWallpaperAnimLayerAdjustment=");

        $i19 = r0.<com.android.server.wm.WindowManagerService: int mWallpaperAnimLayerAdjustment>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i19);

     label50:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mSystemBooted=");

        $z5 = r0.<com.android.server.wm.WindowManagerService: boolean mSystemBooted>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z5);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mDisplayEnabled=");

        $z4 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayEnabled>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z4);

        $z3 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean needsLayout()>();

        if $z3 == 0 goto label54;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  layoutNeeded on displays=");

        i46 = 0;

     label51:
        if i46 >= i0 goto label53;

        $r29 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r27 = virtualinvoke $r29.<android.util.SparseArray: java.lang.Object valueAt(int)>(i46);

        r69 = (com.android.server.wm.DisplayContent) $r27;

        $z13 = r69.<com.android.server.wm.DisplayContent: boolean layoutNeeded>;

        if $z13 == 0 goto label52;

        $i26 = virtualinvoke r69.<com.android.server.wm.DisplayContent: int getDisplayId()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i26);

     label52:
        i46 = i46 + 1;

        goto label51;

     label53:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label54:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mTransactionSequence=");

        $i20 = r0.<com.android.server.wm.WindowManagerService: int mTransactionSequence>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i20);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mDisplayFrozen=");

        $z8 = r0.<com.android.server.wm.WindowManagerService: boolean mDisplayFrozen>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" windows=");

        $z7 = r0.<com.android.server.wm.WindowManagerService: boolean mWindowsFreezingScreen>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" client=");

        $z6 = r0.<com.android.server.wm.WindowManagerService: boolean mClientFreezingScreen>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" apps=");

        $i22 = r0.<com.android.server.wm.WindowManagerService: int mAppsFreezingScreen>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i22);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" waitingForConfig=");

        $z10 = r0.<com.android.server.wm.WindowManagerService: boolean mWaitingForConfig>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z10);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mRotation=");

        $i21 = r0.<com.android.server.wm.WindowManagerService: int mRotation>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i21);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mAltOrientation=");

        $z9 = r0.<com.android.server.wm.WindowManagerService: boolean mAltOrientation>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z9);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mLastWindowForcedOrientation=");

        $i23 = r0.<com.android.server.wm.WindowManagerService: int mLastWindowForcedOrientation>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i23);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mForcedAppOrientation=");

        $i24 = r0.<com.android.server.wm.WindowManagerService: int mForcedAppOrientation>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i24);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mDeferredRotationPauseCount=");

        $i25 = r0.<com.android.server.wm.WindowManagerService: int mDeferredRotationPauseCount>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i25);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Animation settings: disabled=");

        $z12 = r0.<com.android.server.wm.WindowManagerService: boolean mAnimationsDisabled>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z12);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" window=");

        $f2 = r0.<com.android.server.wm.WindowManagerService: float mWindowAnimationScaleSetting>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" transition=");

        $f3 = r0.<com.android.server.wm.WindowManagerService: float mTransitionAnimationScaleSetting>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" animator=");

        $f4 = r0.<com.android.server.wm.WindowManagerService: float mAnimatorDurationScaleSetting>;

        virtualinvoke r1.<java.io.PrintWriter: void println(float)>($f4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mTraversalScheduled=");

        $z11 = r0.<com.android.server.wm.WindowManagerService: boolean mTraversalScheduled>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z11);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  mStartingIconInTransition=");

        $z14 = r0.<com.android.server.wm.WindowManagerService: boolean mStartingIconInTransition>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z14);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mSkipAppTransitionAnimation=");

        $z15 = r0.<com.android.server.wm.WindowManagerService: boolean mSkipAppTransitionAnimation>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z15);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  mLayoutToAnim:");

        $r28 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.AppTransition mAppTransition>;

        virtualinvoke $r28.<com.android.server.wm.AppTransition: void dump(java.io.PrintWriter)>(r1);

     label55:
        return;
    }

    boolean dumpWindows(java.io.PrintWriter, java.lang.String, java.lang.String[], int, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r11, $r22;
        java.lang.String[] r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;
        boolean z0, $z1, $z3, $z5;
        com.android.server.wm.WindowList r4, r6, $r12, r36;
        java.util.HashMap r5, $r14, $r15, $r23, r35, r38;
        com.android.server.wm.WindowState r7, r37;
        java.lang.Throwable r8, r9, r10, $r30, $r32, $r33;
        android.util.SparseArray $r13, $r16, $r24, $r26;
        com.android.server.wm.DisplayContent $r17, $r25;
        java.lang.Object $r18, $r20, $r27, $r29;
        android.view.WindowManager$LayoutParams $r19;
        java.lang.CharSequence $r21;
        com.android.server.wm.WindowStateAnimator $r28;
        java.lang.RuntimeException $r31;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        $r12 = new com.android.server.wm.WindowList;

        specialinvoke $r12.<com.android.server.wm.WindowList: void <init>()>();

        r4 = $r12;

        $r11 = "visible";

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label11;

        $r23 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r5 = $r23;

        entermonitor $r23;

     label01:
        $r24 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i1 = virtualinvoke $r24.<android.util.SparseArray: int size()>();

        i2 = 0;

     label02:
        if i2 >= i1 goto label06;

        $r26 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r27 = virtualinvoke $r26.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r25 = (com.android.server.wm.DisplayContent) $r27;

        r6 = virtualinvoke $r25.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        $i7 = virtualinvoke r6.<com.android.server.wm.WindowList: int size()>();

        i3 = $i7 - 1;

     label03:
        if i3 < 0 goto label05;

        $r29 = virtualinvoke r6.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.wm.WindowState) $r29;

        $r28 = r7.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $z5 = $r28.<com.android.server.wm.WindowStateAnimator: boolean mSurfaceShown>;

        if $z5 == 0 goto label04;

        virtualinvoke r4.<com.android.server.wm.WindowList: boolean add(java.lang.Object)>(r7);

     label04:
        i3 = i3 + -1;

        goto label03;

     label05:
        i2 = i2 + 1;

        goto label02;

     label06:
        exitmonitor r5;

     label07:
        goto label10;

     label08:
        $r32 := @caughtexception;

        r8 = $r32;

        exitmonitor r5;

     label09:
        throw r8;

     label10:
        goto label26;

     label11:
        i8 = 0;

     label12:
        i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r2, 16);

        r2 = null;

     label13:
        goto label15;

     label14:
        $r31 := @caughtexception;

     label15:
        $r14 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r35 = $r14;

        entermonitor $r14;

     label16:
        $r13 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        i9 = virtualinvoke $r13.<android.util.SparseArray: int size()>();

        i10 = 0;

     label17:
        if i10 >= i9 goto label22;

        $r16 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r18 = virtualinvoke $r16.<android.util.SparseArray: java.lang.Object valueAt(int)>(i10);

        $r17 = (com.android.server.wm.DisplayContent) $r18;

        r36 = virtualinvoke $r17.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        $i5 = virtualinvoke r36.<com.android.server.wm.WindowList: int size()>();

        i11 = $i5 - 1;

     label18:
        if i11 < 0 goto label21;

        $r20 = virtualinvoke r36.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i11);

        r37 = (com.android.server.wm.WindowState) $r20;

        if r2 == null goto label19;

        $r19 = r37.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r21 = virtualinvoke $r19.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r22 = interfaceinvoke $r21.<java.lang.CharSequence: java.lang.String toString()>();

        $z3 = virtualinvoke $r22.<java.lang.String: boolean contains(java.lang.CharSequence)>(r2);

        if $z3 == 0 goto label20;

        virtualinvoke r4.<com.android.server.wm.WindowList: boolean add(java.lang.Object)>(r37);

        goto label20;

     label19:
        $i6 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r37);

        if $i6 != i8 goto label20;

        virtualinvoke r4.<com.android.server.wm.WindowList: boolean add(java.lang.Object)>(r37);

     label20:
        i11 = i11 + -1;

        goto label18;

     label21:
        i10 = i10 + 1;

        goto label17;

     label22:
        exitmonitor r35;

     label23:
        goto label26;

     label24:
        $r30 := @caughtexception;

        r9 = $r30;

        exitmonitor r35;

     label25:
        throw r9;

     label26:
        $i4 = virtualinvoke r4.<com.android.server.wm.WindowList: int size()>();

        if $i4 > 0 goto label27;

        return 0;

     label27:
        $r15 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r38 = $r15;

        entermonitor $r15;

     label28:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpWindowsLocked(java.io.PrintWriter,boolean,java.util.ArrayList)>(r1, z0, r4);

        exitmonitor r38;

     label29:
        goto label32;

     label30:
        $r33 := @caughtexception;

        r10 = $r33;

        exitmonitor r38;

     label31:
        throw r10;

     label32:
        return 1;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.RuntimeException from label12 to label13 with label14;
        catch java.lang.Throwable from label16 to label23 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
        catch java.lang.Throwable from label28 to label29 with label30;
        catch java.lang.Throwable from label30 to label31 with label30;
    }

    void dumpLastANRLocked(java.io.PrintWriter)
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.PrintWriter r1;
        java.lang.String $r2, $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("WINDOW MANAGER LAST ANR (dumpsys window lastanr)");

        $r2 = r0.<com.android.server.wm.WindowManagerService: java.lang.String mLastANRState>;

        if $r2 != null goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  <no ANR has occurred since boot>");

        goto label2;

     label1:
        $r3 = r0.<com.android.server.wm.WindowManagerService: java.lang.String mLastANRState>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r3);

     label2:
        return;
    }

    public void saveANRStateLocked(com.android.server.wm.AppWindowToken, com.android.server.wm.WindowState, java.lang.String)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.AppWindowToken r1;
        com.android.server.wm.WindowState r2;
        java.lang.String r3, $r12, $r14, $r15, $r18, $r24, $r29, $r30;
        java.io.StringWriter r4, $r6;
        com.android.internal.util.FastPrintWriter r5, $r7;
        java.lang.StringBuilder $r8, $r9, $r13, $r16, $r17, $r19, $r20, $r21, $r25, $r26, $r27, $r28;
        java.text.DateFormat $r10;
        java.util.Date $r11;
        java.lang.CharSequence $r22;
        android.view.WindowManager$LayoutParams $r23;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: com.android.server.wm.AppWindowToken;

        r2 := @parameter1: com.android.server.wm.WindowState;

        r3 := @parameter2: java.lang.String;

        $r6 = new java.io.StringWriter;

        specialinvoke $r6.<java.io.StringWriter: void <init>()>();

        r4 = $r6;

        $r7 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r7.<com.android.internal.util.FastPrintWriter: void <init>(java.io.Writer,boolean,int)>(r4, 0, 1024);

        r5 = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ANR time: ");

        $r10 = staticinvoke <java.text.DateFormat: java.text.DateFormat getInstance()>();

        $r11 = new java.util.Date;

        specialinvoke $r11.<java.util.Date: void <init>()>();

        $r12 = virtualinvoke $r10.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r11);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.io.PrintWriter: void println(java.lang.String)>($r14);

        if r1 == null goto label1;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Application at fault: ");

        $r29 = r1.<com.android.server.wm.AppWindowToken: java.lang.String stringName>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.io.PrintWriter: void println(java.lang.String)>($r30);

     label1:
        if r2 == null goto label2;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Window at fault: ");

        $r23 = r2.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r22 = virtualinvoke $r23.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.io.PrintWriter: void println(java.lang.String)>($r24);

     label2:
        if r3 == null goto label3;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Reason: ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.io.PrintWriter: void println(java.lang.String)>($r18);

     label3:
        virtualinvoke r5.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpWindowsNoHeaderLocked(java.io.PrintWriter,boolean,java.util.ArrayList)>(r5, 1, null);

        virtualinvoke r5.<java.io.PrintWriter: void close()>();

        $r15 = virtualinvoke r4.<java.io.StringWriter: java.lang.String toString()>();

        r0.<com.android.server.wm.WindowManagerService: java.lang.String mLastANRState> = $r15;

        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.wm.WindowManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, i8;
        java.lang.String r4, $r18, $r19, $r21, $r22, $r23, $r26, $r27, $r28, $r29, $r31, $r32, $r33, $r36, $r37, $r38, $r39, $r42, $r46, $r47, $r48, $r49, $r52, $r59, r72;
        java.util.HashMap r5, $r17, $r20, $r24, $r25, $r30, $r34, $r35, $r40, $r41, $r50, r73, r74, r75, r76, r77, r78, r79, r80, r81;
        java.lang.Throwable r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, $r58, $r60, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71;
        android.content.Context $r16;
        java.lang.StringBuilder $r43, $r44, $r45, $r51, $r53, $r54, $r55, $r56, $r57, $r61, $r62, $r63;
        char $c4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r16 = r0.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r16.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i1 == 0 goto label01;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump WindowManager from from pid=");

        $i6 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r62 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i7 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r61 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r59 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r59);

        return;

     label01:
        z0 = 0;

        i0 = 0;

     label02:
        $i3 = lengthof r3;

        if i0 >= $i3 goto label07;

        r4 = r3[i0];

        if r4 == null goto label07;

        $i5 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i5 <= 0 goto label07;

        $c4 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0);

        if $c4 == 45 goto label03;

        goto label07;

     label03:
        i0 = i0 + 1;

        $r48 = "-a";

        $z19 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z19 == 0 goto label04;

        z0 = 1;

        goto label06;

     label04:
        $r49 = "-h";

        $z20 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z20 == 0 goto label05;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Window manager dump options:");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  [-a] [-h] [cmd] ...");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  cmd may be one of:");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    l[astanr]: last ANR information");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    p[policy]: policy state");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    a[animator]: animator state");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    s[essions]: active sessions");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    surfaces: active surfaces (debugging enabled only)");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    d[isplays]: active display contents");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    t[okens]: token list");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    w[indows]: window list");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  cmd may also be a NAME to dump windows.  NAME may");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    be a partial substring in a window name, a");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    Window hex object identifier, or");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    \"all\" for all windows, or");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    \"visible\" for the visible windows.");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  -a: include all available server state.");

        return;

     label05:
        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown argument: ");

        $r57 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r56 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; use -h for help");

        $r52 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r52);

     label06:
        goto label02;

     label07:
        $i2 = lengthof r3;

        if i0 >= $i2 goto label71;

        r72 = r3[i0];

        i8 = i0 + 1;

        $r18 = "lastanr";

        $z1 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z1 != 0 goto label08;

        $r21 = "l";

        $z2 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z2 == 0 goto label14;

     label08:
        $r20 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r5 = $r20;

        entermonitor $r20;

     label09:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpLastANRLocked(java.io.PrintWriter)>(r2);

        exitmonitor r5;

     label10:
        goto label13;

     label11:
        $r68 := @caughtexception;

        r6 = $r68;

        exitmonitor r5;

     label12:
        throw r6;

     label13:
        return;

     label14:
        $r22 = "policy";

        $z3 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z3 != 0 goto label15;

        $r23 = "p";

        $z5 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z5 == 0 goto label21;

     label15:
        $r24 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r73 = $r24;

        entermonitor $r24;

     label16:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpPolicyLocked(java.io.PrintWriter,java.lang.String[],boolean)>(r2, r3, 1);

        exitmonitor r73;

     label17:
        goto label20;

     label18:
        $r66 := @caughtexception;

        r7 = $r66;

        exitmonitor r73;

     label19:
        throw r7;

     label20:
        return;

     label21:
        $r26 = "animator";

        $z4 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z4 != 0 goto label22;

        $r28 = "a";

        $z6 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z6 == 0 goto label28;

     label22:
        $r25 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r74 = $r25;

        entermonitor $r25;

     label23:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpAnimatorLocked(java.io.PrintWriter,java.lang.String[],boolean)>(r2, r3, 1);

        exitmonitor r74;

     label24:
        goto label27;

     label25:
        $r67 := @caughtexception;

        r8 = $r67;

        exitmonitor r74;

     label26:
        throw r8;

     label27:
        return;

     label28:
        $r27 = "sessions";

        $z7 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z7 != 0 goto label29;

        $r29 = "s";

        $z9 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z9 == 0 goto label35;

     label29:
        $r30 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r75 = $r30;

        entermonitor $r30;

     label30:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpSessionsLocked(java.io.PrintWriter,boolean)>(r2, 1);

        exitmonitor r75;

     label31:
        goto label34;

     label32:
        $r65 := @caughtexception;

        r9 = $r65;

        exitmonitor r75;

     label33:
        throw r9;

     label34:
        return;

     label35:
        $r32 = "surfaces";

        $z8 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z8 == 0 goto label41;

        $r50 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r76 = $r50;

        entermonitor $r50;

     label36:
        staticinvoke <com.android.server.wm.WindowStateAnimator$SurfaceTrace: void dumpAllSurfaces(java.io.PrintWriter,java.lang.String)>(r2, null);

        exitmonitor r76;

     label37:
        goto label40;

     label38:
        $r60 := @caughtexception;

        r10 = $r60;

        exitmonitor r76;

     label39:
        throw r10;

     label40:
        return;

     label41:
        $r31 = "displays";

        $z10 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z10 != 0 goto label42;

        $r33 = "d";

        $z12 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z12 == 0 goto label48;

     label42:
        $r34 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r77 = $r34;

        entermonitor $r34;

     label43:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpDisplayContentsLocked(java.io.PrintWriter,boolean)>(r2, 1);

        exitmonitor r77;

     label44:
        goto label47;

     label45:
        $r70 := @caughtexception;

        r11 = $r70;

        exitmonitor r77;

     label46:
        throw r11;

     label47:
        return;

     label48:
        $r36 = "tokens";

        $z11 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z11 != 0 goto label49;

        $r38 = "t";

        $z13 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z13 == 0 goto label55;

     label49:
        $r35 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r78 = $r35;

        entermonitor $r35;

     label50:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpTokensLocked(java.io.PrintWriter,boolean)>(r2, 1);

        exitmonitor r78;

     label51:
        goto label54;

     label52:
        $r69 := @caughtexception;

        r12 = $r69;

        exitmonitor r78;

     label53:
        throw r12;

     label54:
        return;

     label55:
        $r37 = "windows";

        $z16 = virtualinvoke $r37.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z16 != 0 goto label56;

        $r42 = "w";

        $z14 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z14 == 0 goto label62;

     label56:
        $r41 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r79 = $r41;

        entermonitor $r41;

     label57:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpWindowsLocked(java.io.PrintWriter,boolean,java.util.ArrayList)>(r2, 1, null);

        exitmonitor r79;

     label58:
        goto label61;

     label59:
        $r58 := @caughtexception;

        r13 = $r58;

        exitmonitor r79;

     label60:
        throw r13;

     label61:
        return;

     label62:
        $r39 = "all";

        $z15 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z15 != 0 goto label63;

        $r47 = "a";

        $z17 = virtualinvoke $r47.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z17 == 0 goto label69;

     label63:
        $r40 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r80 = $r40;

        entermonitor $r40;

     label64:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpWindowsLocked(java.io.PrintWriter,boolean,java.util.ArrayList)>(r2, 1, null);

        exitmonitor r80;

     label65:
        goto label68;

     label66:
        $r71 := @caughtexception;

        r15 = $r71;

        exitmonitor r80;

     label67:
        throw r15;

     label68:
        return;

     label69:
        $z18 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: boolean dumpWindows(java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)>(r2, r72, r3, i8, z0);

        if $z18 != 0 goto label70;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad window command, or no windows match: ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r46);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Use -h for help.");

     label70:
        return;

     label71:
        $r17 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r81 = $r17;

        entermonitor $r17;

     label72:
        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        if z0 == 0 goto label73;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label73:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpLastANRLocked(java.io.PrintWriter)>(r2);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        if z0 == 0 goto label74;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label74:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpPolicyLocked(java.io.PrintWriter,java.lang.String[],boolean)>(r2, r3, z0);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        if z0 == 0 goto label75;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label75:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpAnimatorLocked(java.io.PrintWriter,java.lang.String[],boolean)>(r2, r3, z0);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        if z0 == 0 goto label76;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label76:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpSessionsLocked(java.io.PrintWriter,boolean)>(r2, z0);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        if z0 == 0 goto label77;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label77:
        if z0 == 0 goto label78;

        $r19 = "-------------------------------------------------------------------------------";

        goto label79;

     label78:
        $r19 = null;

     label79:
        staticinvoke <com.android.server.wm.WindowStateAnimator$SurfaceTrace: void dumpAllSurfaces(java.io.PrintWriter,java.lang.String)>(r2, $r19);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        if z0 == 0 goto label80;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label80:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpDisplayContentsLocked(java.io.PrintWriter,boolean)>(r2, z0);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        if z0 == 0 goto label81;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label81:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpTokensLocked(java.io.PrintWriter,boolean)>(r2, z0);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        if z0 == 0 goto label82;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("-------------------------------------------------------------------------------");

     label82:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void dumpWindowsLocked(java.io.PrintWriter,boolean,java.util.ArrayList)>(r2, z0, null);

        exitmonitor r81;

     label83:
        goto label86;

     label84:
        $r64 := @caughtexception;

        r14 = $r64;

        exitmonitor r81;

     label85:
        throw r14;

     label86:
        return;

        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
        catch java.lang.Throwable from label30 to label31 with label32;
        catch java.lang.Throwable from label32 to label33 with label32;
        catch java.lang.Throwable from label36 to label37 with label38;
        catch java.lang.Throwable from label38 to label39 with label38;
        catch java.lang.Throwable from label43 to label44 with label45;
        catch java.lang.Throwable from label45 to label46 with label45;
        catch java.lang.Throwable from label50 to label51 with label52;
        catch java.lang.Throwable from label52 to label53 with label52;
        catch java.lang.Throwable from label57 to label58 with label59;
        catch java.lang.Throwable from label59 to label60 with label59;
        catch java.lang.Throwable from label64 to label65 with label66;
        catch java.lang.Throwable from label66 to label67 with label66;
        catch java.lang.Throwable from label72 to label83 with label84;
        catch java.lang.Throwable from label84 to label85 with label84;
    }

    public void monitor()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r3 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void debugLayoutRepeats(java.lang.String, int)
    {
        com.android.server.wm.WindowManagerService r0;
        java.lang.String r1, $r6, $r8;
        int i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = r0.<com.android.server.wm.WindowManagerService: int mLayoutRepeatCount>;

        if $i1 < 4 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Layouts looping: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mPendingLayoutChanges = 0x");

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WindowManager", $r8);

     label1:
        return;
    }

    private com.android.server.wm.DisplayContent newDisplayContentLocked(android.view.Display)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.Display r1;
        com.android.server.wm.DisplayContent r2, $r7;
        int i0, $i1, $i2, $i3, $i4;
        android.view.DisplayInfo r3;
        android.graphics.Rect r4, $r9;
        java.lang.Object r5, $r12;
        java.lang.Throwable r6, $r16;
        android.util.SparseArray $r8;
        java.lang.String $r10;
        com.android.server.wm.DisplaySettings $r11;
        android.hardware.display.DisplayManagerInternal $r13;
        com.android.server.wm.StackTapPointerEventListener $r14, $r15;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.Display;

        $r7 = new com.android.server.wm.DisplayContent;

        specialinvoke $r7.<com.android.server.wm.DisplayContent: void <init>(android.view.Display,com.android.server.wm.WindowManagerService)>(r1, r0);

        r2 = $r7;

        i0 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        $r8 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r2);

        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        $r9 = new android.graphics.Rect;

        specialinvoke $r9.<android.graphics.Rect: void <init>()>();

        r4 = $r9;

        $r11 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplaySettings mDisplaySettings>;

        $r10 = r3.<android.view.DisplayInfo: java.lang.String name>;

        virtualinvoke $r11.<com.android.server.wm.DisplaySettings: void getOverscanLocked(java.lang.String,android.graphics.Rect)>($r10, r4);

        $r12 = r2.<com.android.server.wm.DisplayContent: java.lang.Object mDisplaySizeLock>;

        r5 = $r12;

        entermonitor $r12;

     label1:
        $i2 = r4.<android.graphics.Rect: int left>;

        r3.<android.view.DisplayInfo: int overscanLeft> = $i2;

        $i1 = r4.<android.graphics.Rect: int top>;

        r3.<android.view.DisplayInfo: int overscanTop> = $i1;

        $i4 = r4.<android.graphics.Rect: int right>;

        r3.<android.view.DisplayInfo: int overscanRight> = $i4;

        $i3 = r4.<android.graphics.Rect: int bottom>;

        r3.<android.view.DisplayInfo: int overscanBottom> = $i3;

        $r13 = r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        virtualinvoke $r13.<android.hardware.display.DisplayManagerInternal: void setDisplayInfoOverrideFromWindowManager(int,android.view.DisplayInfo)>(i0, r3);

        exitmonitor r5;

     label2:
        goto label5;

     label3:
        $r16 := @caughtexception;

        r6 = $r16;

        exitmonitor r5;

     label4:
        throw r6;

     label5:
        specialinvoke r0.<com.android.server.wm.WindowManagerService: void configureDisplayPolicyLocked(com.android.server.wm.DisplayContent)>(r2);

        if i0 != 0 goto label6;

        $r15 = new com.android.server.wm.StackTapPointerEventListener;

        specialinvoke $r15.<com.android.server.wm.StackTapPointerEventListener: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.DisplayContent)>(r0, r2);

        r2.<com.android.server.wm.DisplayContent: com.android.server.wm.StackTapPointerEventListener mTapDetector> = $r15;

        $r14 = r2.<com.android.server.wm.DisplayContent: com.android.server.wm.StackTapPointerEventListener mTapDetector>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void registerPointerEventListener(android.view.WindowManagerPolicy$PointerEventListener)>($r14);

     label6:
        return r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void createDisplayContentLocked(android.view.Display)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.Display r1;
        int $i0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.Display;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("getDisplayContent: display must not be null");

        throw $r3;

     label1:
        $i0 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>($i0);

        return;
    }

    public com.android.server.wm.DisplayContent getDisplayContentLocked(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.DisplayContent r1;
        android.view.Display r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        android.hardware.display.DisplayManager $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (com.android.server.wm.DisplayContent) $r4;

        if r1 != null goto label1;

        $r5 = r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManager mDisplayManager>;

        r2 = virtualinvoke $r5.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(i0);

        if r2 == null goto label1;

        r1 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent newDisplayContentLocked(android.view.Display)>(r2);

     label1:
        return r1;
    }

    public com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(0);

        return $r1;
    }

    public com.android.server.wm.WindowList getDefaultWindowListLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent $r1;
        com.android.server.wm.WindowList $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r2 = virtualinvoke $r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        return $r2;
    }

    public android.view.DisplayInfo getDefaultDisplayInfoLocked()
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.DisplayContent $r1;
        android.view.DisplayInfo $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        $r2 = virtualinvoke $r1.<com.android.server.wm.DisplayContent: android.view.DisplayInfo getDisplayInfo()>();

        return $r2;
    }

    public com.android.server.wm.WindowList getWindowListLocked(android.view.Display)
    {
        com.android.server.wm.WindowManagerService r0;
        android.view.Display r1;
        int $i0;
        com.android.server.wm.WindowList $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.view.Display;

        $i0 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        $r2 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getWindowListLocked(int)>($i0);

        return $r2;
    }

    public com.android.server.wm.WindowList getWindowListLocked(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.WindowList $r2;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void onDisplayAdded(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerService$H $r1, $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r3 = virtualinvoke $r1.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,int,int)>(27, i0, 0);

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService$H: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    public void handleDisplayAdded(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        java.util.HashMap r1, $r4;
        android.view.Display r2;
        java.lang.Throwable r3, $r6;
        android.hardware.display.DisplayManager $r5;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.wm.WindowManagerService: android.hardware.display.DisplayManager mDisplayManager>;

        r2 = virtualinvoke $r5.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(i0);

        if r2 == null goto label2;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void createDisplayContentLocked(android.view.Display)>(r2);

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void displayReady(int)>(i0);

     label2:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void requestTraversalLocked()>();

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r1;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void onDisplayRemoved(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerService$H $r1, $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r3 = virtualinvoke $r1.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,int,int)>(28, i0, 0);

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService$H: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    private void handleDisplayRemovedLocked(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.DisplayContent r1;
        com.android.server.wm.WindowAnimator $r2;
        boolean $z0;
        android.util.SparseArray $r3;
        com.android.server.wm.StackTapPointerEventListener $r4;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<com.android.server.wm.DisplayContent: boolean isAnimating()>();

        if $z0 == 0 goto label1;

        r1.<com.android.server.wm.DisplayContent: boolean mDeferredRemoval> = 1;

        return;

     label1:
        $r3 = r0.<com.android.server.wm.WindowManagerService: android.util.SparseArray mDisplayContents>;

        virtualinvoke $r3.<android.util.SparseArray: void delete(int)>(i0);

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void close()>();

        if i0 != 0 goto label2;

        $r4 = r1.<com.android.server.wm.DisplayContent: com.android.server.wm.StackTapPointerEventListener mTapDetector>;

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void unregisterPointerEventListener(android.view.WindowManagerPolicy$PointerEventListener)>($r4);

     label2:
        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowAnimator mAnimator>;

        virtualinvoke $r2.<com.android.server.wm.WindowAnimator: void removeDisplayLocked(int)>(i0);

        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void requestTraversalLocked()>();

        return;
    }

    public void onDisplayChanged(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.WindowManagerService$H $r1, $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r3 = virtualinvoke $r1.<com.android.server.wm.WindowManagerService$H: android.os.Message obtainMessage(int,int,int)>(29, i0, 0);

        virtualinvoke $r2.<com.android.server.wm.WindowManagerService$H: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    private void handleDisplayChangedLocked(int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;
        com.android.server.wm.DisplayContent r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)>(i0);

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.wm.DisplayContent: void updateDisplayInfo()>();

     label1:
        virtualinvoke r0.<com.android.server.wm.WindowManagerService: void requestTraversalLocked()>();

        return;
    }

    public java.lang.Object getWindowManagerLock()
    {
        com.android.server.wm.WindowManagerService r0;
        java.util.HashMap $r1;

        r0 := @this: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        return $r1;
    }

    static com.android.server.wm.KeyguardDisableHandler access$000(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.KeyguardDisableHandler $r1;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        $r1 = r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.KeyguardDisableHandler mKeyguardDisableHandler>;

        return $r1;
    }

    void <init>(android.content.Context, com.android.server.input.InputManagerService, boolean, boolean, boolean, com.android.server.wm.WindowManagerService$1)
    {
        com.android.server.wm.WindowManagerService r0;
        android.content.Context r1;
        com.android.server.input.InputManagerService r2;
        boolean z0, z1, z2;
        com.android.server.wm.WindowManagerService$1 r3;

        r0 := @this: com.android.server.wm.WindowManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.input.InputManagerService;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        r3 := @parameter5: com.android.server.wm.WindowManagerService$1;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void <init>(android.content.Context,com.android.server.input.InputManagerService,boolean,boolean,boolean)>(r1, r2, z0, z1, z2);

        return;
    }

    static void access$300(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void notifyFocusChanged()>();

        return;
    }

    static void access$400(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        return;
    }

    static void access$500(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void stopFreezingDisplayLocked()>();

        return;
    }

    static boolean access$600(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged>;

        return $z0;
    }

    static boolean access$602(com.android.server.wm.WindowManagerService, boolean)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.wm.WindowManagerService: boolean mWindowsChanged> = z0;

        return z0;
    }

    static void access$700(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void notifyWindowsChanged()>();

        return;
    }

    static void access$800(com.android.server.wm.WindowManagerService, int, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void showStrictModeViolation(int,int)>(i0, i1);

        return;
    }

    static void access$900(com.android.server.wm.WindowManagerService, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void handleDisplayRemovedLocked(int)>(i0);

        return;
    }

    static void access$1000(com.android.server.wm.WindowManagerService, int)
    {
        com.android.server.wm.WindowManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.wm.WindowManagerService: void handleDisplayChangedLocked(int)>(i0);

        return;
    }

    static boolean access$1100(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        $z0 = specialinvoke r0.<com.android.server.wm.WindowManagerService: boolean checkBootAnimationCompleteLocked()>();

        return $z0;
    }

    static com.android.server.wm.WindowState access$1900(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService r0;
        com.android.server.wm.WindowState $r1;

        r0 := @parameter0: com.android.server.wm.WindowManagerService;

        $r1 = specialinvoke r0.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState getFocusedWindowLocked()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.WindowManagerService: int ADJUST_WALLPAPER_VISIBILITY_CHANGED> = 4;

        <com.android.server.wm.WindowManagerService: int ADJUST_WALLPAPER_LAYERS_CHANGED> = 2;

        <com.android.server.wm.WindowManagerService: long WALLPAPER_TIMEOUT_RECOVERY> = 10000L;

        <com.android.server.wm.WindowManagerService: long WALLPAPER_TIMEOUT> = 150L;

        <com.android.server.wm.WindowManagerService: java.lang.String PROPERTY_EMULATOR_CIRCULAR> = "ro.emulator.circular";

        <com.android.server.wm.WindowManagerService: int SYSTEM_UI_FLAGS_LAYOUT_STABLE_FULLSCREEN> = 1280;

        <com.android.server.wm.WindowManagerService: int MAX_SCREENSHOT_RETRIES> = 3;

        <com.android.server.wm.WindowManagerService: java.lang.String SIZE_OVERRIDE> = "ro.config.size_override";

        <com.android.server.wm.WindowManagerService: java.lang.String DENSITY_OVERRIDE> = "ro.config.density_override";

        <com.android.server.wm.WindowManagerService: java.lang.String SYSTEM_DEBUGGABLE> = "ro.debuggable";

        <com.android.server.wm.WindowManagerService: java.lang.String SYSTEM_SECURE> = "ro.secure";

        <com.android.server.wm.WindowManagerService: int UPDATE_FOCUS_WILL_PLACE_SURFACES> = 3;

        <com.android.server.wm.WindowManagerService: int UPDATE_FOCUS_PLACING_SURFACES> = 2;

        <com.android.server.wm.WindowManagerService: int UPDATE_FOCUS_WILL_ASSIGN_LAYERS> = 1;

        <com.android.server.wm.WindowManagerService: int UPDATE_FOCUS_NORMAL> = 0;

        <com.android.server.wm.WindowManagerService: float STACK_WEIGHT_MAX> = 0.8F;

        <com.android.server.wm.WindowManagerService: float STACK_WEIGHT_MIN> = 0.2F;

        <com.android.server.wm.WindowManagerService: java.lang.String BOOT_ANIMATION_SERVICE> = "bootanim";

        <com.android.server.wm.WindowManagerService: int BOOT_ANIMATION_POLL_INTERVAL> = 200;

        <com.android.server.wm.WindowManagerService: long DEFAULT_INPUT_DISPATCHING_TIMEOUT_NANOS> = 5000000000L;

        <com.android.server.wm.WindowManagerService: int INPUT_DEVICES_READY_FOR_SAFE_MODE_DETECTION_TIMEOUT_MILLIS> = 1000;

        <com.android.server.wm.WindowManagerService: boolean CUSTOM_SCREEN_ROTATION> = 1;

        <com.android.server.wm.WindowManagerService: int WINDOW_FREEZE_TIMEOUT_DURATION> = 2000;

        <com.android.server.wm.WindowManagerService: int DEFAULT_FADE_IN_OUT_DURATION> = 400;

        <com.android.server.wm.WindowManagerService: int MAX_ANIMATION_DURATION> = 10000;

        <com.android.server.wm.WindowManagerService: int MASK_LAYER> = 2000000;

        <com.android.server.wm.WindowManagerService: int FREEZE_LAYER> = 2000001;

        <com.android.server.wm.WindowManagerService: int LAYER_OFFSET_THUMBNAIL> = 4;

        <com.android.server.wm.WindowManagerService: int LAYER_OFFSET_FOCUSED_STACK> = 1;

        <com.android.server.wm.WindowManagerService: int LAYER_OFFSET_BLUR> = 2;

        <com.android.server.wm.WindowManagerService: int LAYER_OFFSET_DIM> = 1;

        <com.android.server.wm.WindowManagerService: int WINDOW_LAYER_MULTIPLIER> = 5;

        <com.android.server.wm.WindowManagerService: int TYPE_LAYER_OFFSET> = 1000;

        <com.android.server.wm.WindowManagerService: int TYPE_LAYER_MULTIPLIER> = 10000;

        <com.android.server.wm.WindowManagerService: boolean localLOGV> = 0;

        <com.android.server.wm.WindowManagerService: boolean PROFILE_ORIENTATION> = 0;

        <com.android.server.wm.WindowManagerService: int LAYOUT_REPEAT_THRESHOLD> = 4;

        <com.android.server.wm.WindowManagerService: boolean HIDE_STACK_CRAWLS> = 1;

        <com.android.server.wm.WindowManagerService: boolean SHOW_LIGHT_TRANSACTIONS> = 0;

        <com.android.server.wm.WindowManagerService: boolean SHOW_TRANSACTIONS> = 0;

        <com.android.server.wm.WindowManagerService: boolean SHOW_SURFACE_ALLOC> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_DISPLAY> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_STACK> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_TASK_MOVEMENT> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_WINDOW_TRACE> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_SURFACE_TRACE> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_LAYOUT_REPEATS> = 1;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_BOOT> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_SCREENSHOT> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_SCREEN_ON> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_DRAG> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_WALLPAPER_LIGHT> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_WALLPAPER> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_REORDER> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_STARTING_WINDOW> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_APP_TRANSITIONS> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_CONFIGURATION> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_APP_ORIENTATION> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_ORIENTATION> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_TOKEN_MOVEMENT> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_WINDOW_MOVEMENT> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_VISIBILITY> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_INPUT_METHOD> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_INPUT> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_LAYERS> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_RESIZE> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_LAYOUT> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_ANIM> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_FOCUS_LIGHT> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_FOCUS> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG_ADD_REMOVE> = 0;

        <com.android.server.wm.WindowManagerService: boolean DEBUG> = 0;

        <com.android.server.wm.WindowManagerService: java.lang.String TAG> = "WindowManager";

        return;
    }
}
