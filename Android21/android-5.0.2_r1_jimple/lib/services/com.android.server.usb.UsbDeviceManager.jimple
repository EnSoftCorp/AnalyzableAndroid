public class com.android.server.usb.UsbDeviceManager extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static final java.lang.String USB_STATE_MATCH;
    private static final java.lang.String ACCESSORY_START_MATCH;
    private static final java.lang.String FUNCTIONS_PATH;
    private static final java.lang.String STATE_PATH;
    private static final java.lang.String MASS_STORAGE_FILE_PATH;
    private static final java.lang.String RNDIS_ETH_ADDR_PATH;
    private static final java.lang.String AUDIO_SOURCE_PCM_PATH;
    private static final int MSG_UPDATE_STATE;
    private static final int MSG_ENABLE_ADB;
    private static final int MSG_SET_CURRENT_FUNCTIONS;
    private static final int MSG_SYSTEM_READY;
    private static final int MSG_BOOT_COMPLETED;
    private static final int MSG_USER_SWITCHED;
    private static final int AUDIO_MODE_NONE;
    private static final int AUDIO_MODE_SOURCE;
    private static final int UPDATE_DELAY;
    private long mAccessoryModeRequestTime;
    private static final int ACCESSORY_REQUEST_TIMEOUT;
    private static final java.lang.String BOOT_MODE_PROPERTY;
    private com.android.server.usb.UsbDeviceManager$UsbHandler mHandler;
    private boolean mBootCompleted;
    private final java.lang.Object mLock;
    private final android.content.Context mContext;
    private final android.content.ContentResolver mContentResolver;
    private com.android.server.usb.UsbSettingsManager mCurrentSettings;
    private android.app.NotificationManager mNotificationManager;
    private final boolean mHasUsbAccessory;
    private boolean mUseUsbNotification;
    private boolean mAdbEnabled;
    private boolean mAudioSourceEnabled;
    private java.util.Map mOemModeMap;
    private java.lang.String[] mAccessoryStrings;
    private com.android.server.usb.UsbDebuggingManager mDebuggingManager;
    private final android.os.UEventObserver mUEventObserver;

    public void <init>(android.content.Context)
    {
        com.android.server.usb.UsbDeviceManager r0;
        android.content.Context r1, $r6;
        android.content.pm.PackageManager r2;
        boolean z0, z1, $z2, $z3;
        java.lang.Object $r3;
        com.android.server.usb.UsbDeviceManager$1 $r4;
        android.content.ContentResolver $r5;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r7;
        com.android.server.FgThread $r8;
        android.os.Looper $r9;
        java.lang.String $r10, $r11;
        com.android.server.usb.UsbDebuggingManager $r12;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.UsbDeviceManager: long mAccessoryModeRequestTime> = 0L;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.UsbDeviceManager: java.lang.Object mLock> = $r3;

        $r4 = new com.android.server.usb.UsbDeviceManager$1;

        specialinvoke $r4.<com.android.server.usb.UsbDeviceManager$1: void <init>(com.android.server.usb.UsbDeviceManager)>(r0);

        r0.<com.android.server.usb.UsbDeviceManager: android.os.UEventObserver mUEventObserver> = $r4;

        r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext> = r1;

        $r5 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.usb.UsbDeviceManager: android.content.ContentResolver mContentResolver> = $r5;

        $r6 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        r2 = virtualinvoke $r6.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z2 = virtualinvoke r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.usb.accessory");

        r0.<com.android.server.usb.UsbDeviceManager: boolean mHasUsbAccessory> = $z2;

        staticinvoke <com.android.server.usb.UsbDeviceManager: void initRndisAddress()>();

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager: void readOemUsbOverrideConfig()>();

        $r7 = new com.android.server.usb.UsbDeviceManager$UsbHandler;

        $r8 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r9 = virtualinvoke $r8.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r7.<com.android.server.usb.UsbDeviceManager$UsbHandler: void <init>(com.android.server.usb.UsbDeviceManager,android.os.Looper)>(r0, $r9);

        r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler> = $r7;

        $z3 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager: boolean nativeIsStartRequested()>();

        if $z3 == 0 goto label1;

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager: void startAccessoryMode()>();

     label1:
        z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.adb.secure", 0);

        $r11 = "1";

        $r10 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("vold.decrypt");

        z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if z0 == 0 goto label2;

        if z1 != 0 goto label2;

        $r12 = new com.android.server.usb.UsbDebuggingManager;

        specialinvoke $r12.<com.android.server.usb.UsbDebuggingManager: void <init>(android.content.Context)>(r1);

        r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDebuggingManager mDebuggingManager> = $r12;

     label2:
        return;
    }

    public void setCurrentSettings(com.android.server.usb.UsbSettingsManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.server.usb.UsbSettingsManager r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        r1 := @parameter0: com.android.server.usb.UsbSettingsManager;

        $r4 = r0.<com.android.server.usb.UsbDeviceManager: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbSettingsManager mCurrentSettings> = r1;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private com.android.server.usb.UsbSettingsManager getCurrentSettings()
    {
        com.android.server.usb.UsbDeviceManager r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.server.usb.UsbSettingsManager $r4;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $r3 = r0.<com.android.server.usb.UsbDeviceManager: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbSettingsManager mCurrentSettings>;

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void systemReady()
    {
        com.android.server.usb.UsbDeviceManager r0;
        android.os.storage.StorageManager r1;
        android.os.storage.StorageVolume r2;
        android.content.Context $r4, $r7;
        java.lang.Object $r5;
        android.app.NotificationManager $r6;
        boolean $z1, $z4, $z5, $z6, z7;
        android.content.ContentResolver $r8;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r9;
        byte $b0;
        java.lang.String $r10;
        java.lang.SecurityException $r11;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $r4 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r6 = (android.app.NotificationManager) $r5;

        r0.<com.android.server.usb.UsbDeviceManager: android.app.NotificationManager mNotificationManager> = $r6;

        $r7 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        r1 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageManager 'from'(android.content.Context)>($r7);

        r2 = virtualinvoke r1.<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume()>();

        if r2 == null goto label01;

        $z6 = virtualinvoke r2.<android.os.storage.StorageVolume: boolean allowMassStorage()>();

        if $z6 == 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        z7 = $z5;

        if z7 != 0 goto label03;

        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        r0.<com.android.server.usb.UsbDeviceManager: boolean mUseUsbNotification> = $z4;

     label05:
        $r8 = r0.<com.android.server.usb.UsbDeviceManager: android.content.ContentResolver mContentResolver>;

        $z1 = r0.<com.android.server.usb.UsbDeviceManager: boolean mAdbEnabled>;

        if $z1 == 0 goto label06;

        $b0 = 1;

        goto label07;

     label06:
        $b0 = 0;

     label07:
        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r8, "adb_enabled", $b0);

     label08:
        goto label10;

     label09:
        $r11 := @caughtexception;

        $r10 = <com.android.server.usb.UsbDeviceManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r10, "ADB_ENABLED is restricted.");

     label10:
        $r9 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        virtualinvoke $r9.<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean sendEmptyMessage(int)>(3);

        return;

        catch java.lang.SecurityException from label05 to label08 with label09;
    }

    private void startAccessoryMode()
    {
        com.android.server.usb.UsbDeviceManager r0;
        boolean z0, z1, $z2, $z3, $z4;
        java.lang.String r1, $r5, $r7;
        java.lang.String[] $r2, $r3, $r4, $r6;
        int $i0;
        long $l1;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $z2 = r0.<com.android.server.usb.UsbDeviceManager: boolean mHasUsbAccessory>;

        if $z2 != 0 goto label1;

        return;

     label1:
        $r2 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager: java.lang.String[] nativeGetAccessoryStrings()>();

        r0.<com.android.server.usb.UsbDeviceManager: java.lang.String[] mAccessoryStrings> = $r2;

        $i0 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager: int nativeGetAudioMode()>();

        if $i0 != 1 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        z0 = $z4;

        $r3 = r0.<com.android.server.usb.UsbDeviceManager: java.lang.String[] mAccessoryStrings>;

        if $r3 == null goto label4;

        $r4 = r0.<com.android.server.usb.UsbDeviceManager: java.lang.String[] mAccessoryStrings>;

        $r5 = $r4[0];

        if $r5 == null goto label4;

        $r6 = r0.<com.android.server.usb.UsbDeviceManager: java.lang.String[] mAccessoryStrings>;

        $r7 = $r6[1];

        if $r7 == null goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        z1 = $z3;

        r1 = null;

        if z1 == 0 goto label6;

        if z0 == 0 goto label6;

        r1 = "accessory,audio_source";

        goto label8;

     label6:
        if z1 == 0 goto label7;

        r1 = "accessory";

        goto label8;

     label7:
        if z0 == 0 goto label8;

        r1 = "audio_source";

     label8:
        if r1 == null goto label9;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.usb.UsbDeviceManager: long mAccessoryModeRequestTime> = $l1;

        virtualinvoke r0.<com.android.server.usb.UsbDeviceManager: void setCurrentFunctions(java.lang.String,boolean)>(r1, 0);

     label9:
        return;
    }

    private static void initRndisAddress()
    {
        int[] r0;
        java.lang.String r1, $r12, r13;
        int i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.Object[] $r3;
        java.util.Locale $r4;
        java.lang.Integer $r5, $r6, $r7, $r8, $r9, $r10;
        java.io.IOException $r11;
        char $c13;

        r0 = newarray (int)[6];

        r0[0] = 2;

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.serialno", "1234567890ABCDEF");

        i1 = virtualinvoke r1.<java.lang.String: int length()>();

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $i10 = i2 % 5;

        $i9 = $i10 + 1;

        $i12 = r0[$i9];

        $c13 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i11 = $i12 ^ $c13;

        r0[$i9] = $i11;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = <java.util.Locale: java.util.Locale US>;

        $r3 = newarray (java.lang.Object)[6];

        $i3 = r0[0];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[0] = $r5;

        $i4 = r0[1];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r3[1] = $r6;

        $i5 = r0[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r3[2] = $r7;

        $i6 = r0[3];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r3[3] = $r8;

        $i7 = r0[4];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r3[4] = $r9;

        $i8 = r0[5];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r3[5] = $r10;

        r13 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, "%02X:%02X:%02X:%02X:%02X:%02X", $r3);

     label3:
        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/class/android_usb/android0/f_rndis/ethaddr", r13);

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        $r12 = <com.android.server.usb.UsbDeviceManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r12, "failed to write to /sys/class/android_usb/android0/f_rndis/ethaddr");

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    private static java.lang.String addFunction(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1;
        int $i0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = "none";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $z1 = staticinvoke <com.android.server.usb.UsbDeviceManager: boolean containsFunction(java.lang.String,java.lang.String)>(r0, r1);

        if $z1 != 0 goto label3;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r0 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return r0;
    }

    private static java.lang.String removeFunction(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r3, $r5, $r8, $r9;
        java.lang.String[] r2;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r4, r10;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = 0;

     label1:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label3;

        $r9 = r2[i0];

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label2;

        r2[i0] = null;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        $i3 = lengthof r2;

        if $i3 != 1 goto label4;

        $r8 = r2[0];

        if $r8 != null goto label4;

        return "none";

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r10 = $r4;

        i1 = 0;

     label5:
        $i4 = lengthof r2;

        if i1 >= $i4 goto label8;

        r3 = r2[i1];

        if r3 == null goto label7;

        $i5 = virtualinvoke r10.<java.lang.StringBuilder: int length()>();

        if $i5 <= 0 goto label6;

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label6:
        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

     label7:
        i1 = i1 + 1;

        goto label5;

     label8:
        $r5 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private static boolean containsFunction(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.String[] $r2;
        java.util.List $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public android.hardware.usb.UsbAccessory getCurrentAccessory()
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r1;
        android.hardware.usb.UsbAccessory $r2;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        $r2 = virtualinvoke $r1.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory getCurrentAccessory()>();

        return $r2;
    }

    public android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)
    {
        com.android.server.usb.UsbDeviceManager r0;
        android.hardware.usb.UsbAccessory r1, r2;
        java.lang.String r3, $r8;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r4;
        boolean $z0;
        com.android.server.usb.UsbSettingsManager $r5;
        android.os.ParcelFileDescriptor $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r11;
        java.lang.IllegalArgumentException $r12, $r13;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        r1 := @parameter0: android.hardware.usb.UsbAccessory;

        $r4 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        r2 = virtualinvoke $r4.<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory getCurrentAccessory()>();

        if r2 != null goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("no accessory attached");

        throw $r13;

     label1:
        $z0 = virtualinvoke r2.<android.hardware.usb.UsbAccessory: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r1.<android.hardware.usb.UsbAccessory: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match current accessory ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r3);

        throw $r12;

     label2:
        $r5 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbSettingsManager getCurrentSettings()>();

        virtualinvoke $r5.<com.android.server.usb.UsbSettingsManager: void checkPermission(android.hardware.usb.UsbAccessory)>(r1);

        $r6 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager: android.os.ParcelFileDescriptor nativeOpenAccessory()>();

        return $r6;
    }

    public void setCurrentFunctions(java.lang.String, boolean)
    {
        com.android.server.usb.UsbDeviceManager r0;
        java.lang.String r1;
        boolean z0;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r2;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        virtualinvoke $r2.<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,java.lang.Object,boolean)>(2, r1, z0);

        return;
    }

    public void setMassStorageBackingFile(java.lang.String)
    {
        com.android.server.usb.UsbDeviceManager r0;
        java.lang.String r1, $r4;
        java.io.IOException $r3;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        r1 = "";

     label1:
        staticinvoke <android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>("/sys/class/android_usb/android0/f_mass_storage/lun/file", r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = <com.android.server.usb.UsbDeviceManager: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r4, "failed to write to /sys/class/android_usb/android0/f_mass_storage/lun/file");

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void readOemUsbOverrideConfig()
    {
        com.android.server.usb.UsbDeviceManager r0;
        java.lang.String[] r1, r2, r4;
        int i0, i1, $i2;
        java.lang.String r3, $r9, $r13, $r14, $r17;
        java.util.List r5;
        android.content.Context $r6;
        android.content.res.Resources $r7;
        java.util.Map $r8, $r10, $r16;
        android.util.Pair $r11;
        java.lang.Object $r12;
        java.util.LinkedList $r15;
        java.util.HashMap $r18;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $r6 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236011);

        if r1 == null goto label5;

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r3 = r2[i1];

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i2 = lengthof r4;

        if $i2 != 3 goto label4;

        $r8 = r0.<com.android.server.usb.UsbDeviceManager: java.util.Map mOemModeMap>;

        if $r8 != null goto label2;

        $r18 = new java.util.HashMap;

        specialinvoke $r18.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.usb.UsbDeviceManager: java.util.Map mOemModeMap> = $r18;

     label2:
        $r10 = r0.<com.android.server.usb.UsbDeviceManager: java.util.Map mOemModeMap>;

        $r9 = r4[0];

        $r12 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r5 = (java.util.List) $r12;

        if r5 != null goto label3;

        $r15 = new java.util.LinkedList;

        specialinvoke $r15.<java.util.LinkedList: void <init>()>();

        r5 = $r15;

        $r16 = r0.<com.android.server.usb.UsbDeviceManager: java.util.Map mOemModeMap>;

        $r17 = r4[0];

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r5);

     label3:
        $r11 = new android.util.Pair;

        $r13 = r4[1];

        $r14 = r4[2];

        specialinvoke $r11.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r13, $r14);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r11);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return;
    }

    private boolean needsOemUsbOverride()
    {
        com.android.server.usb.UsbDeviceManager r0;
        java.lang.String r1;
        java.util.Map $r2, $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $r2 = r0.<com.android.server.usb.UsbDeviceManager: java.util.Map mOemModeMap>;

        if $r2 != null goto label1;

        return 0;

     label1:
        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.bootmode", "unknown");

        $r3 = r0.<com.android.server.usb.UsbDeviceManager: java.util.Map mOemModeMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r4 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private java.lang.String processOemUsbOverride(java.lang.String)
    {
        com.android.server.usb.UsbDeviceManager r0;
        java.lang.String r1, r2, $r11, $r12, $r17, $r21, $r22, $r23;
        java.util.List r3;
        java.util.Iterator r4;
        android.util.Pair r5;
        java.util.Map $r6, $r7;
        java.lang.Object $r8, $r9, $r10, $r14, $r18, $r24;
        boolean $z0, $z1;
        java.lang.StringBuilder $r13, $r15, $r16, $r19, $r20;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r6 = r0.<com.android.server.usb.UsbDeviceManager: java.util.Map mOemModeMap>;

        if $r6 != null goto label2;

     label1:
        return r1;

     label2:
        r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.bootmode", "unknown");

        $r7 = r0.<com.android.server.usb.UsbDeviceManager: java.util.Map mOemModeMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.util.List) $r8;

        if r3 == null goto label5;

        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.util.Pair) $r9;

        $r10 = r5.<android.util.Pair: java.lang.Object first>;

        $r11 = (java.lang.String) $r10;

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        $r12 = <com.android.server.usb.UsbDeviceManager: java.lang.String TAG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OEM USB override: ");

        $r14 = r5.<android.util.Pair: java.lang.Object first>;

        $r17 = (java.lang.String) $r14;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ==> ");

        $r18 = r5.<android.util.Pair: java.lang.Object second>;

        $r21 = (java.lang.String) $r18;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r12, $r22);

        $r24 = r5.<android.util.Pair: java.lang.Object second>;

        $r23 = (java.lang.String) $r24;

        return $r23;

     label4:
        goto label3;

     label5:
        return r1;
    }

    public void allowUsbDebugging(boolean, java.lang.String)
    {
        com.android.server.usb.UsbDeviceManager r0;
        boolean z0;
        java.lang.String r1;
        com.android.server.usb.UsbDebuggingManager $r2, $r3;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDebuggingManager mDebuggingManager>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDebuggingManager mDebuggingManager>;

        virtualinvoke $r3.<com.android.server.usb.UsbDebuggingManager: void allowUsbDebugging(boolean,java.lang.String)>(z0, r1);

     label1:
        return;
    }

    public void denyUsbDebugging()
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.server.usb.UsbDebuggingManager $r1, $r2;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDebuggingManager mDebuggingManager>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDebuggingManager mDebuggingManager>;

        virtualinvoke $r2.<com.android.server.usb.UsbDebuggingManager: void denyUsbDebugging()>();

     label1:
        return;
    }

    public void clearUsbDebuggingKeys()
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.server.usb.UsbDebuggingManager $r1, $r3;
        java.lang.RuntimeException $r2;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDebuggingManager mDebuggingManager>;

        if $r1 == null goto label1;

        $r3 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDebuggingManager mDebuggingManager>;

        virtualinvoke $r3.<com.android.server.usb.UsbDebuggingManager: void clearUsbDebuggingKeys()>();

        goto label2;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot clear Usb Debugging keys, UsbDebuggingManager not enabled");

        throw $r2;

     label2:
        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter)
    {
        com.android.server.usb.UsbDeviceManager r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r3, $r6;
        com.android.server.usb.UsbDebuggingManager $r4, $r5;

        r0 := @this: com.android.server.usb.UsbDeviceManager;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        $r3 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        if $r3 == null goto label1;

        $r6 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        virtualinvoke $r6.<com.android.server.usb.UsbDeviceManager$UsbHandler: void dump(java.io.FileDescriptor,java.io.PrintWriter)>(r1, r2);

     label1:
        $r4 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDebuggingManager mDebuggingManager>;

        if $r4 == null goto label2;

        $r5 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDebuggingManager mDebuggingManager>;

        virtualinvoke $r5.<com.android.server.usb.UsbDebuggingManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>(r1, r2);

     label2:
        return;
    }

    private native java.lang.String[] nativeGetAccessoryStrings();

    private native android.os.ParcelFileDescriptor nativeOpenAccessory();

    private native boolean nativeIsStartRequested();

    private native int nativeGetAudioMode();

    static android.content.ContentResolver access$000(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        android.content.ContentResolver $r1;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: android.content.ContentResolver mContentResolver>;

        return $r1;
    }

    static com.android.server.usb.UsbDeviceManager$UsbHandler access$100(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.server.usb.UsbDeviceManager$UsbHandler $r1;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler mHandler>;

        return $r1;
    }

    static void access$200(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        specialinvoke r0.<com.android.server.usb.UsbDeviceManager: void startAccessoryMode()>();

        return;
    }

    static java.lang.String access$300(com.android.server.usb.UsbDeviceManager, java.lang.String)
    {
        com.android.server.usb.UsbDeviceManager r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager: java.lang.String processOemUsbOverride(java.lang.String)>(r1);

        return $r2;
    }

    static java.lang.String access$400()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.usb.UsbDeviceManager: java.lang.String TAG>;

        return $r0;
    }

    static boolean access$502(com.android.server.usb.UsbDeviceManager, boolean)
    {
        com.android.server.usb.UsbDeviceManager r0;
        boolean z0;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        z0 := @parameter1: boolean;

        r0.<com.android.server.usb.UsbDeviceManager: boolean mAdbEnabled> = z0;

        return z0;
    }

    static boolean access$600(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.android.server.usb.UsbDeviceManager: boolean containsFunction(java.lang.String,java.lang.String)>(r0, r1);

        return $z0;
    }

    static android.os.UEventObserver access$700(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        android.os.UEventObserver $r1;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: android.os.UEventObserver mUEventObserver>;

        return $r1;
    }

    static android.content.Context access$800(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: android.content.Context mContext>;

        return $r1;
    }

    static boolean access$500(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $z0 = r0.<com.android.server.usb.UsbDeviceManager: boolean mAdbEnabled>;

        return $z0;
    }

    static com.android.server.usb.UsbDebuggingManager access$900(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.server.usb.UsbDebuggingManager $r1;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDebuggingManager mDebuggingManager>;

        return $r1;
    }

    static boolean access$1000(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $z0 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager: boolean needsOemUsbOverride()>();

        return $z0;
    }

    static java.lang.String access$1100(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.android.server.usb.UsbDeviceManager: java.lang.String addFunction(java.lang.String,java.lang.String)>(r0, r1);

        return $r2;
    }

    static java.lang.String access$1200(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.android.server.usb.UsbDeviceManager: java.lang.String removeFunction(java.lang.String,java.lang.String)>(r0, r1);

        return $r2;
    }

    static long access$1300(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        long $l0;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $l0 = r0.<com.android.server.usb.UsbDeviceManager: long mAccessoryModeRequestTime>;

        return $l0;
    }

    static java.lang.String[] access$1400(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        java.lang.String[] $r1;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: java.lang.String[] mAccessoryStrings>;

        return $r1;
    }

    static boolean access$1500(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $z0 = r0.<com.android.server.usb.UsbDeviceManager: boolean mBootCompleted>;

        return $z0;
    }

    static com.android.server.usb.UsbSettingsManager access$1600(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        com.android.server.usb.UsbSettingsManager $r1;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $r1 = specialinvoke r0.<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbSettingsManager getCurrentSettings()>();

        return $r1;
    }

    static java.lang.String[] access$1402(com.android.server.usb.UsbDeviceManager, java.lang.String[])
    {
        com.android.server.usb.UsbDeviceManager r0;
        java.lang.String[] r1;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        r1 := @parameter1: java.lang.String[];

        r0.<com.android.server.usb.UsbDeviceManager: java.lang.String[] mAccessoryStrings> = r1;

        return r1;
    }

    static boolean access$1700(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $z0 = r0.<com.android.server.usb.UsbDeviceManager: boolean mAudioSourceEnabled>;

        return $z0;
    }

    static boolean access$1702(com.android.server.usb.UsbDeviceManager, boolean)
    {
        com.android.server.usb.UsbDeviceManager r0;
        boolean z0;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        z0 := @parameter1: boolean;

        r0.<com.android.server.usb.UsbDeviceManager: boolean mAudioSourceEnabled> = z0;

        return z0;
    }

    static boolean access$1502(com.android.server.usb.UsbDeviceManager, boolean)
    {
        com.android.server.usb.UsbDeviceManager r0;
        boolean z0;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        z0 := @parameter1: boolean;

        r0.<com.android.server.usb.UsbDeviceManager: boolean mBootCompleted> = z0;

        return z0;
    }

    static android.app.NotificationManager access$1800(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        android.app.NotificationManager $r1;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $r1 = r0.<com.android.server.usb.UsbDeviceManager: android.app.NotificationManager mNotificationManager>;

        return $r1;
    }

    static boolean access$1900(com.android.server.usb.UsbDeviceManager)
    {
        com.android.server.usb.UsbDeviceManager r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.usb.UsbDeviceManager;

        $z0 = r0.<com.android.server.usb.UsbDeviceManager: boolean mUseUsbNotification>;

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.server.usb.UsbDeviceManager: java.lang.String BOOT_MODE_PROPERTY> = "ro.bootmode";

        <com.android.server.usb.UsbDeviceManager: int ACCESSORY_REQUEST_TIMEOUT> = 10000;

        <com.android.server.usb.UsbDeviceManager: int UPDATE_DELAY> = 1000;

        <com.android.server.usb.UsbDeviceManager: int AUDIO_MODE_SOURCE> = 1;

        <com.android.server.usb.UsbDeviceManager: int AUDIO_MODE_NONE> = 0;

        <com.android.server.usb.UsbDeviceManager: int MSG_USER_SWITCHED> = 5;

        <com.android.server.usb.UsbDeviceManager: int MSG_BOOT_COMPLETED> = 4;

        <com.android.server.usb.UsbDeviceManager: int MSG_SYSTEM_READY> = 3;

        <com.android.server.usb.UsbDeviceManager: int MSG_SET_CURRENT_FUNCTIONS> = 2;

        <com.android.server.usb.UsbDeviceManager: int MSG_ENABLE_ADB> = 1;

        <com.android.server.usb.UsbDeviceManager: int MSG_UPDATE_STATE> = 0;

        <com.android.server.usb.UsbDeviceManager: java.lang.String AUDIO_SOURCE_PCM_PATH> = "/sys/class/android_usb/android0/f_audio_source/pcm";

        <com.android.server.usb.UsbDeviceManager: java.lang.String RNDIS_ETH_ADDR_PATH> = "/sys/class/android_usb/android0/f_rndis/ethaddr";

        <com.android.server.usb.UsbDeviceManager: java.lang.String MASS_STORAGE_FILE_PATH> = "/sys/class/android_usb/android0/f_mass_storage/lun/file";

        <com.android.server.usb.UsbDeviceManager: java.lang.String STATE_PATH> = "/sys/class/android_usb/android0/state";

        <com.android.server.usb.UsbDeviceManager: java.lang.String FUNCTIONS_PATH> = "/sys/class/android_usb/android0/functions";

        <com.android.server.usb.UsbDeviceManager: java.lang.String ACCESSORY_START_MATCH> = "DEVPATH=/devices/virtual/misc/usb_accessory";

        <com.android.server.usb.UsbDeviceManager: java.lang.String USB_STATE_MATCH> = "DEVPATH=/devices/virtual/android_usb/android0";

        <com.android.server.usb.UsbDeviceManager: boolean DEBUG> = 0;

        $r0 = class "com/android/server/usb/UsbDeviceManager";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.usb.UsbDeviceManager: java.lang.String TAG> = $r1;

        return;
    }
}
