final class com.android.server.wm.WindowManagerService$LocalService extends android.view.WindowManagerInternal
{
    final com.android.server.wm.WindowManagerService this$0;

    private void <init>(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerService r1;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0> = r1;

        specialinvoke r0.<android.view.WindowManagerInternal: void <init>()>();

        return;
    }

    public void requestTraversalFromDisplayManager()
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        $r1 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void requestTraversal()>();

        return;
    }

    public void setMagnificationSpec(android.view.MagnificationSpec)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        android.view.MagnificationSpec r1;
        java.util.HashMap r2, $r5;
        java.lang.Throwable r3, $r11;
        com.android.server.wm.WindowManagerService $r4, $r6, $r9;
        com.android.server.wm.AccessibilityController $r7, $r10;
        java.lang.IllegalStateException $r8;
        int $i0, $i1;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: android.view.MagnificationSpec;

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r7 == null goto label2;

        $r9 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r10 = $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r10.<com.android.server.wm.AccessibilityController: void setMagnificationSpecLocked(android.view.MagnificationSpec)>(r1);

        goto label3;

     label2:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Magnification callbacks not set!");

        throw $r8;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        if $i0 == $i1 goto label8;

        virtualinvoke r1.<android.view.MagnificationSpec: void recycle()>();

     label8:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public android.view.MagnificationSpec getCompatibleMagnificationSpecForWindow(android.os.IBinder)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        android.os.IBinder r1;
        java.util.HashMap r2, $r7, $r9;
        com.android.server.wm.WindowState r3;
        android.view.MagnificationSpec r4, $r13, r17;
        java.lang.Throwable r5, $r16;
        com.android.server.wm.WindowManagerService $r6, $r8, $r11, $r14;
        java.lang.Object $r10;
        com.android.server.wm.AccessibilityController $r12, $r15;
        float $f0, $f1, $f2, $f3;
        byte $b0;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: android.os.IBinder;

        $r6 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.wm.WindowState) $r10;

        if r3 != null goto label03;

        exitmonitor r2;

     label02:
        return null;

     label03:
        r4 = null;

        $r11 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r12 = $r11.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r12 == null goto label04;

        $r14 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r15 = $r14.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        r4 = virtualinvoke $r15.<com.android.server.wm.AccessibilityController: android.view.MagnificationSpec getMagnificationSpecForWindowLocked(com.android.server.wm.WindowState)>(r3);

     label04:
        if r4 == null goto label05;

        $z0 = virtualinvoke r4.<android.view.MagnificationSpec: boolean isNop()>();

        if $z0 == 0 goto label07;

     label05:
        $f0 = r3.<com.android.server.wm.WindowState: float mGlobalScale>;

        $b0 = $f0 cmpl 1.0F;

        if $b0 != 0 goto label07;

        exitmonitor r2;

     label06:
        return null;

     label07:
        if r4 != null goto label08;

        $r13 = staticinvoke <android.view.MagnificationSpec: android.view.MagnificationSpec obtain()>();

        goto label09;

     label08:
        $r13 = staticinvoke <android.view.MagnificationSpec: android.view.MagnificationSpec obtain(android.view.MagnificationSpec)>(r4);

     label09:
        r17 = $r13;

        $f1 = r17.<android.view.MagnificationSpec: float scale>;

        $f2 = r3.<com.android.server.wm.WindowState: float mGlobalScale>;

        $f3 = $f1 * $f2;

        r17.<android.view.MagnificationSpec: float scale> = $f3;

        exitmonitor r2;

     label10:
        return r17;

     label11:
        $r16 := @caughtexception;

        r5 = $r16;

        exitmonitor r2;

     label12:
        throw r5;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label06 with label11;
        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void setMagnificationCallbacks(android.view.WindowManagerInternal$MagnificationCallbacks)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        android.view.WindowManagerInternal$MagnificationCallbacks r1;
        java.util.HashMap r2, $r5;
        java.lang.Throwable r3, $r16;
        com.android.server.wm.WindowManagerService $r4, $r6, $r8, $r10, $r12, $r14, $r15;
        com.android.server.wm.AccessibilityController $r7, $r9, $r11, $r13;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: android.view.WindowManagerInternal$MagnificationCallbacks;

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r7 != null goto label2;

        $r14 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r13 = new com.android.server.wm.AccessibilityController;

        $r15 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        specialinvoke $r13.<com.android.server.wm.AccessibilityController: void <init>(com.android.server.wm.WindowManagerService)>($r15);

        $r14.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController> = $r13;

     label2:
        $r8 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r9.<com.android.server.wm.AccessibilityController: void setMagnificationCallbacksLocked(android.view.WindowManagerInternal$MagnificationCallbacks)>(r1);

        $r10 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $z0 = virtualinvoke $r11.<com.android.server.wm.AccessibilityController: boolean hasCallbacksLocked()>();

        if $z0 != 0 goto label3;

        $r12 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r12.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController> = null;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r16 := @caughtexception;

        r3 = $r16;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setWindowsForAccessibilityCallback(android.view.WindowManagerInternal$WindowsForAccessibilityCallback)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        android.view.WindowManagerInternal$WindowsForAccessibilityCallback r1;
        java.util.HashMap r2, $r5;
        java.lang.Throwable r3, $r16;
        com.android.server.wm.WindowManagerService $r4, $r6, $r8, $r10, $r12, $r14, $r15;
        com.android.server.wm.AccessibilityController $r7, $r9, $r11, $r13;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: android.view.WindowManagerInternal$WindowsForAccessibilityCallback;

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        if $r7 != null goto label2;

        $r14 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r13 = new com.android.server.wm.AccessibilityController;

        $r15 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        specialinvoke $r13.<com.android.server.wm.AccessibilityController: void <init>(com.android.server.wm.WindowManagerService)>($r15);

        $r14.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController> = $r13;

     label2:
        $r8 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        virtualinvoke $r9.<com.android.server.wm.AccessibilityController: void setWindowsForAccessibilityCallback(android.view.WindowManagerInternal$WindowsForAccessibilityCallback)>(r1);

        $r10 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r11 = $r10.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController>;

        $z0 = virtualinvoke $r11.<com.android.server.wm.AccessibilityController: boolean hasCallbacksLocked()>();

        if $z0 != 0 goto label3;

        $r12 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r12.<com.android.server.wm.WindowManagerService: com.android.server.wm.AccessibilityController mAccessibilityController> = null;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r16 := @caughtexception;

        r3 = $r16;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setInputFilter(android.view.IInputFilter)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        android.view.IInputFilter r1;
        com.android.server.wm.WindowManagerService $r2;
        com.android.server.input.InputManagerService $r3;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: android.view.IInputFilter;

        $r2 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r3 = $r2.<com.android.server.wm.WindowManagerService: com.android.server.input.InputManagerService mInputManager>;

        virtualinvoke $r3.<com.android.server.input.InputManagerService: void setInputFilter(android.view.IInputFilter)>(r1);

        return;
    }

    public android.os.IBinder getFocusedWindowToken()
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        java.util.HashMap r1, $r5;
        com.android.server.wm.WindowState r2;
        java.lang.Throwable r3, $r9;
        com.android.server.wm.WindowManagerService $r4, $r6;
        android.view.IWindow $r7;
        android.os.IBinder $r8;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        $r4 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r5 = $r4.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r2 = staticinvoke <com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState access$1900(com.android.server.wm.WindowManagerService)>($r6);

        if r2 == null goto label3;

        $r7 = r2.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r8 = interfaceinvoke $r7.<android.view.IWindow: android.os.IBinder asBinder()>();

        exitmonitor r1;

     label2:
        return $r8;

     label3:
        exitmonitor r1;

     label4:
        return null;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r1;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean isKeyguardLocked()
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerService $r1;
        boolean $z0;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        $r1 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $z0 = virtualinvoke $r1.<com.android.server.wm.WindowManagerService: boolean isKeyguardLocked()>();

        return $z0;
    }

    public void showGlobalActions()
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerService $r1;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        $r1 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        virtualinvoke $r1.<com.android.server.wm.WindowManagerService: void showGlobalActions()>();

        return;
    }

    public void getWindowFrame(android.os.IBinder, android.graphics.Rect)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        android.os.IBinder r1;
        android.graphics.Rect r2, $r11;
        java.util.HashMap r3, $r7, $r9;
        com.android.server.wm.WindowState r4;
        java.lang.Throwable r5, $r12;
        com.android.server.wm.WindowManagerService $r6, $r8;
        java.lang.Object $r10;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.graphics.Rect;

        $r6 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r3 = $r7;

        entermonitor $r7;

     label1:
        $r8 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r9 = $r8.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.wm.WindowState) $r10;

        if r4 == null goto label2;

        $r11 = r4.<com.android.server.wm.WindowState: android.graphics.Rect mFrame>;

        virtualinvoke r2.<android.graphics.Rect: void set(android.graphics.Rect)>($r11);

        goto label3;

     label2:
        virtualinvoke r2.<android.graphics.Rect: void setEmpty()>();

     label3:
        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        r5 = $r12;

        exitmonitor r3;

     label6:
        throw r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void waitForAllWindowsDrawn(java.lang.Runnable, long)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        java.lang.Runnable r1;
        long l0;
        java.util.HashMap r2, $r7;
        com.android.server.wm.WindowList r3;
        int i1, $i2;
        com.android.server.wm.WindowState r4;
        java.lang.Throwable r5, $r26;
        com.android.server.wm.WindowManagerService $r6, $r8, $r9, $r10, $r11, $r12, $r16, $r17, $r21, $r23;
        com.android.server.wm.WindowManagerService$H $r13, $r15;
        boolean $z0, $z2, $z4;
        java.util.ArrayList $r14, $r25;
        java.lang.Object $r18;
        com.android.server.wm.WindowStateAnimator $r19;
        com.android.server.wm.AppWindowToken $r20;
        android.graphics.Rect $r22;
        android.view.WindowManager$LayoutParams $r24;
        android.view.WindowManagerPolicy $r27;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        $r6 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r8.<com.android.server.wm.WindowManagerService: java.lang.Runnable mWaitingForDrawnCallback> = r1;

        $r9 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        r3 = virtualinvoke $r9.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()>();

        $i2 = virtualinvoke r3.<com.android.server.wm.WindowList: int size()>();

        i1 = $i2 - 1;

     label02:
        if i1 < 0 goto label05;

        $r18 = virtualinvoke r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r4 = (com.android.server.wm.WindowState) $r18;

        $z2 = virtualinvoke r4.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z2 == 0 goto label04;

        $r20 = r4.<com.android.server.wm.WindowState: com.android.server.wm.AppWindowToken mAppToken>;

        if $r20 != null goto label03;

        $r23 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r27 = $r23.<com.android.server.wm.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r24 = r4.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $z4 = interfaceinvoke $r27.<android.view.WindowManagerPolicy: boolean isForceHiding(android.view.WindowManager$LayoutParams)>($r24);

        if $z4 == 0 goto label04;

     label03:
        $r19 = r4.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $r19.<com.android.server.wm.WindowStateAnimator: int mDrawState> = 1;

        $r22 = r4.<com.android.server.wm.WindowState: android.graphics.Rect mLastContentInsets>;

        virtualinvoke $r22.<android.graphics.Rect: void set(int,int,int,int)>(-1, -1, -1, -1);

        $r21 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r25 = $r21.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWaitingForDrawn>;

        virtualinvoke $r25.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label04:
        i1 = i1 + -1;

        goto label02;

     label05:
        $r10 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        virtualinvoke $r10.<com.android.server.wm.WindowManagerService: void requestTraversalLocked()>();

        exitmonitor r2;

     label06:
        goto label09;

     label07:
        $r26 := @caughtexception;

        r5 = $r26;

        exitmonitor r2;

     label08:
        throw r5;

     label09:
        $r11 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r13 = $r11.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r13.<com.android.server.wm.WindowManagerService$H: void removeMessages(int)>(24);

        $r12 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r14 = $r12.<com.android.server.wm.WindowManagerService: java.util.ArrayList mWaitingForDrawn>;

        $z0 = virtualinvoke $r14.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label10;

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

        goto label11;

     label10:
        $r16 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        $r15 = $r16.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        virtualinvoke $r15.<com.android.server.wm.WindowManagerService$H: boolean sendEmptyMessageDelayed(int,long)>(24, l0);

        $r17 = r0.<com.android.server.wm.WindowManagerService$LocalService: com.android.server.wm.WindowManagerService this$0>;

        virtualinvoke $r17.<com.android.server.wm.WindowManagerService: void checkDrawnWindowsLocked()>();

     label11:
        return;

        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    void <init>(com.android.server.wm.WindowManagerService, com.android.server.wm.WindowManagerService$1)
    {
        com.android.server.wm.WindowManagerService$LocalService r0;
        com.android.server.wm.WindowManagerService r1;
        com.android.server.wm.WindowManagerService$1 r2;

        r0 := @this: com.android.server.wm.WindowManagerService$LocalService;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: com.android.server.wm.WindowManagerService$1;

        specialinvoke r0.<com.android.server.wm.WindowManagerService$LocalService: void <init>(com.android.server.wm.WindowManagerService)>(r1);

        return;
    }
}
