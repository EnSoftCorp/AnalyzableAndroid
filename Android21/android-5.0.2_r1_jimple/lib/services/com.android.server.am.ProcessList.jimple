final class com.android.server.am.ProcessList extends java.lang.Object
{
    static final int MIN_CRASH_INTERVAL;
    static final int UNKNOWN_ADJ;
    static final int CACHED_APP_MAX_ADJ;
    static final int CACHED_APP_MIN_ADJ;
    static final int SERVICE_B_ADJ;
    static final int PREVIOUS_APP_ADJ;
    static final int HOME_APP_ADJ;
    static final int SERVICE_ADJ;
    static final int HEAVY_WEIGHT_APP_ADJ;
    static final int BACKUP_APP_ADJ;
    static final int PERCEPTIBLE_APP_ADJ;
    static final int VISIBLE_APP_ADJ;
    static final int FOREGROUND_APP_ADJ;
    static final int PERSISTENT_SERVICE_ADJ;
    static final int PERSISTENT_PROC_ADJ;
    static final int SYSTEM_ADJ;
    static final int NATIVE_ADJ;
    static final int PAGE_SIZE;
    static final int MIN_CACHED_APPS;
    static final int MAX_CACHED_APPS;
    static final long MAX_EMPTY_TIME;
    private static final int MAX_EMPTY_APPS;
    static final int TRIM_EMPTY_APPS;
    static final int TRIM_CACHED_APPS;
    static final int TRIM_CRITICAL_THRESHOLD;
    static final int TRIM_LOW_THRESHOLD;
    static final byte LMK_TARGET;
    static final byte LMK_PROCPRIO;
    static final byte LMK_PROCREMOVE;
    private final int[] mOomAdj;
    private final int[] mOomMinFreeLow;
    private final int[] mOomMinFreeHigh;
    private final int[] mOomMinFree;
    private final long mTotalMemMb;
    private long mCachedRestoreLevel;
    private boolean mHaveDisplaySize;
    private static android.net.LocalSocket sLmkdSocket;
    private static java.io.OutputStream sLmkdOutputStream;
    public static final int PSS_MIN_TIME_FROM_STATE_CHANGE;
    public static final int PSS_MAX_INTERVAL;
    public static final int PSS_ALL_INTERVAL;
    private static final int PSS_SHORT_INTERVAL;
    private static final int PSS_FIRST_TOP_INTERVAL;
    private static final int PSS_FIRST_BACKGROUND_INTERVAL;
    private static final int PSS_FIRST_CACHED_INTERVAL;
    private static final int PSS_SAME_IMPORTANT_INTERVAL;
    private static final int PSS_SAME_SERVICE_INTERVAL;
    private static final int PSS_SAME_CACHED_INTERVAL;
    public static final int PROC_MEM_PERSISTENT;
    public static final int PROC_MEM_TOP;
    public static final int PROC_MEM_IMPORTANT;
    public static final int PROC_MEM_SERVICE;
    public static final int PROC_MEM_CACHED;
    private static final int[] sProcStateToProcMem;
    private static final long[] sFirstAwakePssTimes;
    private static final long[] sSameAwakePssTimes;

    void <init>()
    {
        com.android.server.am.ProcessList r0;
        com.android.internal.util.MemInfoReader r1, $r7;
        int[] $r2, $r3, $r4, $r5, $r6;
        int $i0;
        long $l1, $l2;

        r0 := @this: com.android.server.am.ProcessList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (int)[6];

        $r2[0] = 0;

        $r2[1] = 1;

        $r2[2] = 2;

        $r2[3] = 3;

        $r2[4] = 9;

        $r2[5] = 15;

        r0.<com.android.server.am.ProcessList: int[] mOomAdj> = $r2;

        $r3 = newarray (int)[6];

        $r3[0] = 12288;

        $r3[1] = 18432;

        $r3[2] = 24576;

        $r3[3] = 36864;

        $r3[4] = 43008;

        $r3[5] = 49152;

        r0.<com.android.server.am.ProcessList: int[] mOomMinFreeLow> = $r3;

        $r4 = newarray (int)[6];

        $r4[0] = 73728;

        $r4[1] = 92160;

        $r4[2] = 110592;

        $r4[3] = 129024;

        $r4[4] = 225000;

        $r4[5] = 325000;

        r0.<com.android.server.am.ProcessList: int[] mOomMinFreeHigh> = $r4;

        $r5 = r0.<com.android.server.am.ProcessList: int[] mOomAdj>;

        $i0 = lengthof $r5;

        $r6 = newarray (int)[$i0];

        r0.<com.android.server.am.ProcessList: int[] mOomMinFree> = $r6;

        $r7 = new com.android.internal.util.MemInfoReader;

        specialinvoke $r7.<com.android.internal.util.MemInfoReader: void <init>()>();

        r1 = $r7;

        virtualinvoke r1.<com.android.internal.util.MemInfoReader: void readMemInfo()>();

        $l1 = virtualinvoke r1.<com.android.internal.util.MemInfoReader: long getTotalSize()>();

        $l2 = $l1 / 1048576L;

        r0.<com.android.server.am.ProcessList: long mTotalMemMb> = $l2;

        specialinvoke r0.<com.android.server.am.ProcessList: void updateOomLevels(int,int,boolean)>(0, 0, 0);

        return;
    }

    void applyDisplaySize(com.android.server.wm.WindowManagerService)
    {
        com.android.server.am.ProcessList r0;
        com.android.server.wm.WindowManagerService r1;
        android.graphics.Point r2, $r3;
        boolean $z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.am.ProcessList;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        $z0 = r0.<com.android.server.am.ProcessList: boolean mHaveDisplaySize>;

        if $z0 != 0 goto label1;

        $r3 = new android.graphics.Point;

        specialinvoke $r3.<android.graphics.Point: void <init>()>();

        r2 = $r3;

        virtualinvoke r1.<com.android.server.wm.WindowManagerService: void getBaseDisplaySize(int,android.graphics.Point)>(0, r2);

        $i0 = r2.<android.graphics.Point: int x>;

        if $i0 == 0 goto label1;

        $i1 = r2.<android.graphics.Point: int y>;

        if $i1 == 0 goto label1;

        $i3 = r2.<android.graphics.Point: int x>;

        $i2 = r2.<android.graphics.Point: int y>;

        specialinvoke r0.<com.android.server.am.ProcessList: void updateOomLevels(int,int,boolean)>($i3, $i2, 1);

        r0.<com.android.server.am.ProcessList: boolean mHaveDisplaySize> = 1;

     label1:
        return;
    }

    private void updateOomLevels(int, int, boolean)
    {
        com.android.server.am.ProcessList r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i12, $i13, $i17, $i18, $i20, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, i51, i52, i53, i54, i55;
        boolean z0;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22;
        java.nio.ByteBuffer r1;
        long $l10, $l11, $l19, $l21, $l22;
        byte $b14, $b15, $b16;
        android.content.res.Resources $r2, $r3, $r6, $r8;
        int[] $r4, $r7, $r9, $r11, $r13, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        java.lang.String[] $r5;
        java.lang.String $r12;

        r0 := @this: com.android.server.am.ProcessList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $l11 = r0.<com.android.server.am.ProcessList: long mTotalMemMb>;

        $l10 = $l11 - 300L;

        $f3 = (float) $l10;

        f0 = $f3 / 400.0F;

        i2 = 384000;

        i3 = 1024000;

        $i12 = i0 * i1;

        $f4 = (float) $i12;

        $f5 = (float) i2;

        $f7 = $f4 - $f5;

        $i13 = i3 - i2;

        $f6 = (float) $i13;

        f1 = $f7 / $f6;

        $b14 = f0 cmpl f1;

        if $b14 <= 0 goto label01;

        $f22 = f0;

        goto label02;

     label01:
        $f22 = f1;

     label02:
        f2 = $f22;

        $b16 = f2 cmpg 0.0F;

        if $b16 >= 0 goto label03;

        f2 = 0.0F;

        goto label04;

     label03:
        $b15 = f2 cmpl 1.0F;

        if $b15 <= 0 goto label04;

        f2 = 1.0F;

     label04:
        $r2 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        i4 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(17694729);

        $r3 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        i5 = virtualinvoke $r3.<android.content.res.Resources: int getInteger(int)>(17694728);

        $r5 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $i18 = lengthof $r5;

        if $i18 <= 0 goto label05;

        $r31 = r0.<com.android.server.am.ProcessList: int[] mOomMinFreeHigh>;

        $r31[4] = 225000;

        $r32 = r0.<com.android.server.am.ProcessList: int[] mOomMinFreeHigh>;

        $r32[5] = 325000;

     label05:
        i6 = 0;

     label06:
        $r4 = r0.<com.android.server.am.ProcessList: int[] mOomAdj>;

        $i17 = lengthof $r4;

        if i6 >= $i17 goto label07;

        $r27 = r0.<com.android.server.am.ProcessList: int[] mOomMinFreeLow>;

        i7 = $r27[i6];

        $r28 = r0.<com.android.server.am.ProcessList: int[] mOomMinFreeHigh>;

        i8 = $r28[i6];

        $r30 = r0.<com.android.server.am.ProcessList: int[] mOomMinFree>;

        $f20 = (float) i7;

        $i50 = i8 - i7;

        $f21 = (float) $i50;

        $f19 = $f21 * f2;

        $f18 = $f20 + $f19;

        $i49 = (int) $f18;

        $r30[i6] = $i49;

        i6 = i6 + 1;

        goto label06;

     label07:
        if i5 < 0 goto label09;

        i51 = 0;

     label08:
        $r22 = r0.<com.android.server.am.ProcessList: int[] mOomAdj>;

        $i40 = lengthof $r22;

        if i51 >= $i40 goto label09;

        $r29 = r0.<com.android.server.am.ProcessList: int[] mOomMinFree>;

        $f13 = (float) i5;

        $r26 = r0.<com.android.server.am.ProcessList: int[] mOomMinFree>;

        $i46 = $r26[i51];

        $f14 = (float) $i46;

        $f15 = $f13 * $f14;

        $r25 = r0.<com.android.server.am.ProcessList: int[] mOomMinFree>;

        $r24 = r0.<com.android.server.am.ProcessList: int[] mOomAdj>;

        $i44 = lengthof $r24;

        $i45 = $i44 - 1;

        $i48 = $r25[$i45];

        $f17 = (float) $i48;

        $f16 = $f15 / $f17;

        $i47 = (int) $f16;

        $r29[i51] = $i47;

        i51 = i51 + 1;

        goto label08;

     label09:
        if i4 == 0 goto label12;

        i52 = 0;

     label10:
        $r17 = r0.<com.android.server.am.ProcessList: int[] mOomAdj>;

        $i35 = lengthof $r17;

        if i52 >= $i35 goto label12;

        $r18 = r0.<com.android.server.am.ProcessList: int[] mOomMinFree>;

        $i41 = $r18[i52];

        $f9 = (float) i4;

        $r15 = r0.<com.android.server.am.ProcessList: int[] mOomMinFree>;

        $i34 = $r15[i52];

        $f8 = (float) $i34;

        $f11 = $f9 * $f8;

        $r20 = r0.<com.android.server.am.ProcessList: int[] mOomMinFree>;

        $r19 = r0.<com.android.server.am.ProcessList: int[] mOomAdj>;

        $i37 = lengthof $r19;

        $i38 = $i37 - 1;

        $i36 = $r20[$i38];

        $f10 = (float) $i36;

        $f12 = $f11 / $f10;

        $i42 = (int) $f12;

        $i43 = $i41 + $i42;

        $r18[i52] = $i43;

        $r23 = r0.<com.android.server.am.ProcessList: int[] mOomMinFree>;

        $i39 = $r23[i52];

        if $i39 >= 0 goto label11;

        $r21 = r0.<com.android.server.am.ProcessList: int[] mOomMinFree>;

        $r21[i52] = 0;

     label11:
        i52 = i52 + 1;

        goto label10;

     label12:
        $l21 = virtualinvoke r0.<com.android.server.am.ProcessList: long getMemLevel(int)>(15);

        $l22 = $l21 / 1024L;

        $l19 = $l22 / 3L;

        r0.<com.android.server.am.ProcessList: long mCachedRestoreLevel> = $l19;

        $i20 = i0 * i1;

        $i23 = $i20 * 4;

        $i24 = $i23 * 3;

        i53 = $i24 / 1024;

        $r6 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        i54 = virtualinvoke $r6.<android.content.res.Resources: int getInteger(int)>(17694731);

        $r8 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        i55 = virtualinvoke $r8.<android.content.res.Resources: int getInteger(int)>(17694730);

        if i55 < 0 goto label13;

        i53 = i55;

     label13:
        if i54 == 0 goto label14;

        i53 = i53 + i54;

        if i53 >= 0 goto label14;

        i53 = 0;

     label14:
        if z0 == 0 goto label17;

        $r7 = r0.<com.android.server.am.ProcessList: int[] mOomAdj>;

        $i25 = lengthof $r7;

        $i28 = 2 * $i25;

        $i27 = $i28 + 1;

        $i26 = 4 * $i27;

        r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i26);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(0);

        i9 = 0;

     label15:
        $r9 = r0.<com.android.server.am.ProcessList: int[] mOomAdj>;

        $i29 = lengthof $r9;

        if i9 >= $i29 goto label16;

        $r11 = r0.<com.android.server.am.ProcessList: int[] mOomMinFree>;

        $i31 = $r11[i9];

        $i30 = $i31 * 1024;

        $i33 = $i30 / 4096;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i33);

        $r13 = r0.<com.android.server.am.ProcessList: int[] mOomAdj>;

        $i32 = $r13[i9];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i32);

        i9 = i9 + 1;

        goto label15;

     label16:
        staticinvoke <com.android.server.am.ProcessList: void writeLmkd(java.nio.ByteBuffer)>(r1);

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i53);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.sysctl.extra_free_kbytes", $r12);

     label17:
        return;
    }

    public static int computeEmptyProcessLimit(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 / 2;

        return $i1;
    }

    private static java.lang.String buildOomTag(java.lang.String, java.lang.String, int, int)
    {
        java.lang.String r0, r1, $r5, $r7, $r11;
        int i0, i1, $i2;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r8, $r9, $r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if i0 != i1 goto label2;

        if r1 != null goto label1;

        return r0;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        $i2 = i0 - i1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String makeOomAdjString(int)
    {
        int i0;
        java.lang.String $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        i0 := @parameter0: int;

        if i0 < 9 goto label01;

        $r14 = staticinvoke <com.android.server.am.ProcessList: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>("cch", "  ", i0, 9);

        return $r14;

     label01:
        if i0 < 8 goto label02;

        $r13 = staticinvoke <com.android.server.am.ProcessList: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>("svcb ", null, i0, 8);

        return $r13;

     label02:
        if i0 < 7 goto label03;

        $r12 = staticinvoke <com.android.server.am.ProcessList: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>("prev ", null, i0, 7);

        return $r12;

     label03:
        if i0 < 6 goto label04;

        $r11 = staticinvoke <com.android.server.am.ProcessList: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>("home ", null, i0, 6);

        return $r11;

     label04:
        if i0 < 5 goto label05;

        $r10 = staticinvoke <com.android.server.am.ProcessList: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>("svc  ", null, i0, 5);

        return $r10;

     label05:
        if i0 < 4 goto label06;

        $r9 = staticinvoke <com.android.server.am.ProcessList: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>("hvy  ", null, i0, 4);

        return $r9;

     label06:
        if i0 < 3 goto label07;

        $r8 = staticinvoke <com.android.server.am.ProcessList: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>("bkup ", null, i0, 3);

        return $r8;

     label07:
        if i0 < 2 goto label08;

        $r7 = staticinvoke <com.android.server.am.ProcessList: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>("prcp ", null, i0, 2);

        return $r7;

     label08:
        if i0 < 1 goto label09;

        $r6 = staticinvoke <com.android.server.am.ProcessList: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>("vis  ", null, i0, 1);

        return $r6;

     label09:
        if i0 < 0 goto label10;

        $r5 = staticinvoke <com.android.server.am.ProcessList: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>("fore ", null, i0, 0);

        return $r5;

     label10:
        if i0 < -11 goto label11;

        $r4 = staticinvoke <com.android.server.am.ProcessList: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>("psvc ", null, i0, -11);

        return $r4;

     label11:
        if i0 < -12 goto label12;

        $r3 = staticinvoke <com.android.server.am.ProcessList: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>("pers ", null, i0, -12);

        return $r3;

     label12:
        if i0 < -16 goto label13;

        $r2 = staticinvoke <com.android.server.am.ProcessList: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>("sys  ", null, i0, -16);

        return $r2;

     label13:
        if i0 < -17 goto label14;

        $r1 = staticinvoke <com.android.server.am.ProcessList: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>("ntv  ", null, i0, -17);

        return $r1;

     label14:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;
    }

    public static java.lang.String makeProcStateString(int)
    {
        int i0;
        java.lang.String r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case -1: goto label01;
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label09;
            case 8: goto label10;
            case 9: goto label11;
            case 10: goto label12;
            case 11: goto label13;
            case 12: goto label14;
            case 13: goto label15;
            default: goto label16;
        };

     label01:
        r0 = "N ";

        goto label17;

     label02:
        r0 = "P ";

        goto label17;

     label03:
        r0 = "PU";

        goto label17;

     label04:
        r0 = "T ";

        goto label17;

     label05:
        r0 = "IF";

        goto label17;

     label06:
        r0 = "IB";

        goto label17;

     label07:
        r0 = "BU";

        goto label17;

     label08:
        r0 = "HW";

        goto label17;

     label09:
        r0 = "S ";

        goto label17;

     label10:
        r0 = "R ";

        goto label17;

     label11:
        r0 = "HO";

        goto label17;

     label12:
        r0 = "LA";

        goto label17;

     label13:
        r0 = "CA";

        goto label17;

     label14:
        r0 = "Ca";

        goto label17;

     label15:
        r0 = "CE";

        goto label17;

     label16:
        r0 = "??";

     label17:
        return r0;
    }

    public static void appendRamKb(java.lang.StringBuilder, long)
    {
        java.lang.StringBuilder r0;
        long l0, $l3;
        int i1, i2;
        byte $b4;

        r0 := @parameter0: java.lang.StringBuilder;

        l0 := @parameter1: long;

        i1 = 0;

        i2 = 10;

     label1:
        if i1 >= 6 goto label3;

        $l3 = (long) i2;

        $b4 = l0 cmp $l3;

        if $b4 >= 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label2:
        i1 = i1 + 1;

        i2 = i2 * 10;

        goto label1;

     label3:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        return;
    }

    public static boolean procStatesDifferForMem(int, int)
    {
        int i0, i1, $i2, $i3;
        int[] $r0, $r1;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = <com.android.server.am.ProcessList: int[] sProcStateToProcMem>;

        $i3 = $r0[i0];

        $r1 = <com.android.server.am.ProcessList: int[] sProcStateToProcMem>;

        $i2 = $r1[i1];

        if $i3 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static long computeNextPssTime(int, boolean, boolean, long)
    {
        int i0;
        boolean z0, z1;
        long l1, $l2, $l3;
        long[] r0, $r1;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        l1 := @parameter3: long;

        if z1 == 0 goto label2;

        if z0 == 0 goto label1;

        $r1 = <com.android.server.am.ProcessList: long[] sFirstAwakePssTimes>;

        goto label4;

     label1:
        $r1 = <com.android.server.am.ProcessList: long[] sSameAwakePssTimes>;

        goto label4;

     label2:
        if z0 == 0 goto label3;

        $r1 = <com.android.server.am.ProcessList: long[] sFirstAwakePssTimes>;

        goto label4;

     label3:
        $r1 = <com.android.server.am.ProcessList: long[] sSameAwakePssTimes>;

     label4:
        r0 = $r1;

        $l2 = r0[i0];

        $l3 = l1 + $l2;

        return $l3;
    }

    long getMemLevel(int)
    {
        com.android.server.am.ProcessList r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i11;
        int[] $r1, $r2, $r3, $r4, $r5;
        long $l7, $l10;

        r0 := @this: com.android.server.am.ProcessList;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        $r1 = r0.<com.android.server.am.ProcessList: int[] mOomAdj>;

        $i2 = lengthof $r1;

        if i1 >= $i2 goto label3;

        $r4 = r0.<com.android.server.am.ProcessList: int[] mOomAdj>;

        $i8 = $r4[i1];

        if i0 > $i8 goto label2;

        $r5 = r0.<com.android.server.am.ProcessList: int[] mOomMinFree>;

        $i9 = $r5[i1];

        $i11 = $i9 * 1024;

        $l10 = (long) $i11;

        return $l10;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r3 = r0.<com.android.server.am.ProcessList: int[] mOomMinFree>;

        $r2 = r0.<com.android.server.am.ProcessList: int[] mOomAdj>;

        $i3 = lengthof $r2;

        $i4 = $i3 - 1;

        $i5 = $r3[$i4];

        $i6 = $i5 * 1024;

        $l7 = (long) $i6;

        return $l7;
    }

    long getCachedRestoreThresholdKb()
    {
        com.android.server.am.ProcessList r0;
        long $l0;

        r0 := @this: com.android.server.am.ProcessList;

        $l0 = r0.<com.android.server.am.ProcessList: long mCachedRestoreLevel>;

        return $l0;
    }

    public static final void setOomAdj(int, int, int)
    {
        int i0, i1, i2;
        long l3, l4, $l5, $l7;
        java.nio.ByteBuffer r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        byte $b6;
        java.lang.String $r12;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i2 != 16 goto label1;

        return;

     label1:
        l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(16);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(1);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i1);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i2);

        staticinvoke <com.android.server.am.ProcessList: void writeLmkd(java.nio.ByteBuffer)>(r0);

        l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l5 = l4 - l3;

        $b6 = $l5 cmp 250L;

        if $b6 <= 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SLOW OOM ADJ: ");

        $l7 = l4 - l3;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms for pid ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityManager", $r12);

     label2:
        return;
    }

    public static final void remove(int)
    {
        int i0;
        java.nio.ByteBuffer r0;

        i0 := @parameter0: int;

        r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(2);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i0);

        staticinvoke <com.android.server.am.ProcessList: void writeLmkd(java.nio.ByteBuffer)>(r0);

        return;
    }

    private static boolean openLmkdSocket()
    {
        android.net.LocalSocket $r1, $r4, $r5;
        android.net.LocalSocketAddress $r2;
        android.net.LocalSocketAddress$Namespace $r3;
        java.io.OutputStream $r6;
        java.io.IOException $r7;

     label1:
        $r1 = new android.net.LocalSocket;

        specialinvoke $r1.<android.net.LocalSocket: void <init>(int)>(3);

        <com.android.server.am.ProcessList: android.net.LocalSocket sLmkdSocket> = $r1;

        $r4 = <com.android.server.am.ProcessList: android.net.LocalSocket sLmkdSocket>;

        $r2 = new android.net.LocalSocketAddress;

        $r3 = <android.net.LocalSocketAddress$Namespace: android.net.LocalSocketAddress$Namespace RESERVED>;

        specialinvoke $r2.<android.net.LocalSocketAddress: void <init>(java.lang.String,android.net.LocalSocketAddress$Namespace)>("lmkd", $r3);

        virtualinvoke $r4.<android.net.LocalSocket: void connect(android.net.LocalSocketAddress)>($r2);

        $r5 = <com.android.server.am.ProcessList: android.net.LocalSocket sLmkdSocket>;

        $r6 = virtualinvoke $r5.<android.net.LocalSocket: java.io.OutputStream getOutputStream()>();

        <com.android.server.am.ProcessList: java.io.OutputStream sLmkdOutputStream> = $r6;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityManager", "lowmemorykiller daemon socket open failed");

        <com.android.server.am.ProcessList: android.net.LocalSocket sLmkdSocket> = null;

        return 0;

     label4:
        return 1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void writeLmkd(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        int i0, $i1;
        android.net.LocalSocket $r3, $r8;
        java.io.OutputStream $r4;
        byte[] $r5;
        boolean $z0;
        java.lang.InterruptedException $r6;
        java.io.IOException $r7, $r9;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 = 0;

     label01:
        if i0 >= 3 goto label13;

        $r3 = <com.android.server.am.ProcessList: android.net.LocalSocket sLmkdSocket>;

        if $r3 != null goto label05;

        $z0 = staticinvoke <com.android.server.am.ProcessList: boolean openLmkdSocket()>();

        if $z0 != 0 goto label05;

     label02:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

     label03:
        goto label12;

     label04:
        $r6 := @caughtexception;

        goto label12;

     label05:
        $r4 = <com.android.server.am.ProcessList: java.io.OutputStream sLmkdOutputStream>;

        $r5 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>();

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r5, 0, $i1);

     label06:
        return;

     label07:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ActivityManager", "Error writing to lowmemorykiller socket");

     label08:
        $r8 = <com.android.server.am.ProcessList: android.net.LocalSocket sLmkdSocket>;

        virtualinvoke $r8.<android.net.LocalSocket: void close()>();

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

     label11:
        <com.android.server.am.ProcessList: android.net.LocalSocket sLmkdSocket> = null;

     label12:
        i0 = i0 + 1;

        goto label01;

     label13:
        return;

        catch java.lang.InterruptedException from label02 to label03 with label04;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label08 to label09 with label10;
    }

    static void <clinit>()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r0;
        long[] $r1, $r2;

        <com.android.server.am.ProcessList: int PROC_MEM_CACHED> = 4;

        <com.android.server.am.ProcessList: int PROC_MEM_SERVICE> = 3;

        <com.android.server.am.ProcessList: int PROC_MEM_IMPORTANT> = 2;

        <com.android.server.am.ProcessList: int PROC_MEM_TOP> = 1;

        <com.android.server.am.ProcessList: int PROC_MEM_PERSISTENT> = 0;

        <com.android.server.am.ProcessList: int PSS_SAME_CACHED_INTERVAL> = 1800000;

        <com.android.server.am.ProcessList: int PSS_SAME_SERVICE_INTERVAL> = 1200000;

        <com.android.server.am.ProcessList: int PSS_SAME_IMPORTANT_INTERVAL> = 900000;

        <com.android.server.am.ProcessList: int PSS_FIRST_CACHED_INTERVAL> = 30000;

        <com.android.server.am.ProcessList: int PSS_FIRST_BACKGROUND_INTERVAL> = 20000;

        <com.android.server.am.ProcessList: int PSS_FIRST_TOP_INTERVAL> = 10000;

        <com.android.server.am.ProcessList: int PSS_SHORT_INTERVAL> = 120000;

        <com.android.server.am.ProcessList: int PSS_ALL_INTERVAL> = 600000;

        <com.android.server.am.ProcessList: int PSS_MAX_INTERVAL> = 1800000;

        <com.android.server.am.ProcessList: int PSS_MIN_TIME_FROM_STATE_CHANGE> = 15000;

        <com.android.server.am.ProcessList: byte LMK_PROCREMOVE> = 2;

        <com.android.server.am.ProcessList: byte LMK_PROCPRIO> = 1;

        <com.android.server.am.ProcessList: byte LMK_TARGET> = 0;

        <com.android.server.am.ProcessList: int TRIM_LOW_THRESHOLD> = 5;

        <com.android.server.am.ProcessList: int TRIM_CRITICAL_THRESHOLD> = 3;

        <com.android.server.am.ProcessList: long MAX_EMPTY_TIME> = 1800000L;

        <com.android.server.am.ProcessList: int MAX_CACHED_APPS> = 32;

        <com.android.server.am.ProcessList: int MIN_CACHED_APPS> = 2;

        <com.android.server.am.ProcessList: int PAGE_SIZE> = 4096;

        <com.android.server.am.ProcessList: int NATIVE_ADJ> = -17;

        <com.android.server.am.ProcessList: int SYSTEM_ADJ> = -16;

        <com.android.server.am.ProcessList: int PERSISTENT_PROC_ADJ> = -12;

        <com.android.server.am.ProcessList: int PERSISTENT_SERVICE_ADJ> = -11;

        <com.android.server.am.ProcessList: int FOREGROUND_APP_ADJ> = 0;

        <com.android.server.am.ProcessList: int VISIBLE_APP_ADJ> = 1;

        <com.android.server.am.ProcessList: int PERCEPTIBLE_APP_ADJ> = 2;

        <com.android.server.am.ProcessList: int BACKUP_APP_ADJ> = 3;

        <com.android.server.am.ProcessList: int HEAVY_WEIGHT_APP_ADJ> = 4;

        <com.android.server.am.ProcessList: int SERVICE_ADJ> = 5;

        <com.android.server.am.ProcessList: int HOME_APP_ADJ> = 6;

        <com.android.server.am.ProcessList: int PREVIOUS_APP_ADJ> = 7;

        <com.android.server.am.ProcessList: int SERVICE_B_ADJ> = 8;

        <com.android.server.am.ProcessList: int CACHED_APP_MIN_ADJ> = 9;

        <com.android.server.am.ProcessList: int CACHED_APP_MAX_ADJ> = 15;

        <com.android.server.am.ProcessList: int UNKNOWN_ADJ> = 16;

        <com.android.server.am.ProcessList: int MIN_CRASH_INTERVAL> = 60000;

        $i0 = staticinvoke <com.android.server.am.ProcessList: int computeEmptyProcessLimit(int)>(32);

        <com.android.server.am.ProcessList: int MAX_EMPTY_APPS> = $i0;

        $i1 = <com.android.server.am.ProcessList: int MAX_EMPTY_APPS>;

        $i2 = $i1 / 2;

        <com.android.server.am.ProcessList: int TRIM_EMPTY_APPS> = $i2;

        $i3 = <com.android.server.am.ProcessList: int MAX_EMPTY_APPS>;

        $i4 = 32 - $i3;

        $i5 = $i4 / 3;

        <com.android.server.am.ProcessList: int TRIM_CACHED_APPS> = $i5;

        $r0 = newarray (int)[14];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 1;

        $r0[3] = 2;

        $r0[4] = 2;

        $r0[5] = 2;

        $r0[6] = 2;

        $r0[7] = 3;

        $r0[8] = 4;

        $r0[9] = 4;

        $r0[10] = 4;

        $r0[11] = 4;

        $r0[12] = 4;

        $r0[13] = 4;

        <com.android.server.am.ProcessList: int[] sProcStateToProcMem> = $r0;

        $r1 = newarray (long)[14];

        $r1[0] = 120000L;

        $r1[1] = 120000L;

        $r1[2] = 10000L;

        $r1[3] = 20000L;

        $r1[4] = 20000L;

        $r1[5] = 20000L;

        $r1[6] = 20000L;

        $r1[7] = 20000L;

        $r1[8] = 30000L;

        $r1[9] = 30000L;

        $r1[10] = 30000L;

        $r1[11] = 30000L;

        $r1[12] = 30000L;

        $r1[13] = 30000L;

        <com.android.server.am.ProcessList: long[] sFirstAwakePssTimes> = $r1;

        $r2 = newarray (long)[14];

        $r2[0] = 900000L;

        $r2[1] = 900000L;

        $r2[2] = 120000L;

        $r2[3] = 900000L;

        $r2[4] = 900000L;

        $r2[5] = 900000L;

        $r2[6] = 900000L;

        $r2[7] = 1200000L;

        $r2[8] = 1200000L;

        $r2[9] = 1800000L;

        $r2[10] = 1800000L;

        $r2[11] = 1800000L;

        $r2[12] = 1800000L;

        $r2[13] = 1800000L;

        <com.android.server.am.ProcessList: long[] sSameAwakePssTimes> = $r2;

        return;
    }
}
