public class com.android.server.LockSettingsService extends com.android.internal.widget.ILockSettings$Stub
{
    private static final java.lang.String PERMISSION;
    private static final java.lang.String SYSTEM_DEBUGGABLE;
    private final com.android.server.LockSettingsService$DatabaseHelper mOpenHelper;
    private static final java.lang.String TAG;
    private static final java.lang.String TABLE;
    private static final java.lang.String COLUMN_KEY;
    private static final java.lang.String COLUMN_USERID;
    private static final java.lang.String COLUMN_VALUE;
    private static final java.lang.String[] COLUMNS_FOR_QUERY;
    private static final java.lang.String SYSTEM_DIRECTORY;
    private static final java.lang.String LOCK_PATTERN_FILE;
    private static final java.lang.String LOCK_PASSWORD_FILE;
    private final android.content.Context mContext;
    private com.android.internal.widget.LockPatternUtils mLockPatternUtils;
    private boolean mFirstCallToVold;
    private final java.util.ArrayList mObservers;
    private final android.content.BroadcastReceiver mBroadcastReceiver;
    private static final java.lang.String[] VALID_SETTINGS;
    private static final java.lang.String[] READ_PROFILE_PROTECTED_SETTINGS;

    public void <init>(android.content.Context)
    {
        com.android.server.LockSettingsService r0;
        android.content.Context r1, $r6, $r11;
        android.content.IntentFilter r2, $r8;
        java.util.ArrayList $r3;
        com.android.server.LockSettingsService$1 $r4;
        com.android.server.LockSettingsService$DatabaseHelper $r5;
        com.android.internal.widget.LockPatternUtils $r7;
        android.os.UserHandle $r9;
        android.content.BroadcastReceiver $r10;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.internal.widget.ILockSettings$Stub: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.LockSettingsService: java.util.ArrayList mObservers> = $r3;

        $r4 = new com.android.server.LockSettingsService$1;

        specialinvoke $r4.<com.android.server.LockSettingsService$1: void <init>(com.android.server.LockSettingsService)>(r0);

        r0.<com.android.server.LockSettingsService: android.content.BroadcastReceiver mBroadcastReceiver> = $r4;

        r0.<com.android.server.LockSettingsService: android.content.Context mContext> = r1;

        $r5 = new com.android.server.LockSettingsService$DatabaseHelper;

        $r6 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        specialinvoke $r5.<com.android.server.LockSettingsService$DatabaseHelper: void <init>(com.android.server.LockSettingsService,android.content.Context)>(r0, $r6);

        r0.<com.android.server.LockSettingsService: com.android.server.LockSettingsService$DatabaseHelper mOpenHelper> = $r5;

        $r7 = new com.android.internal.widget.LockPatternUtils;

        specialinvoke $r7.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>(r1);

        r0.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils> = $r7;

        r0.<com.android.server.LockSettingsService: boolean mFirstCallToVold> = 1;

        $r8 = new android.content.IntentFilter;

        specialinvoke $r8.<android.content.IntentFilter: void <init>()>();

        r2 = $r8;

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        $r11 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        $r10 = r0.<com.android.server.LockSettingsService: android.content.BroadcastReceiver mBroadcastReceiver>;

        $r9 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r11.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r10, $r9, r2, null, null);

        return;
    }

    public void systemReady()
    {
        com.android.server.LockSettingsService r0;

        r0 := @this: com.android.server.LockSettingsService;

        specialinvoke r0.<com.android.server.LockSettingsService: void migrateOldData()>();

        return;
    }

    private void migrateOldData()
    {
        com.android.server.LockSettingsService r0;
        android.content.ContentResolver r1, r18;
        java.lang.String[] r2;
        int i0, i1, i2, $i4, i8, i9;
        java.lang.String r3, r4, r5, $r7, $r8;
        boolean z0, $z3, $z4;
        android.content.Context $r9, $r11, $r14;
        java.lang.Object $r10, $r13;
        android.content.pm.UserInfo $r12;
        long $l5;
        android.provider.Settings$SettingNotFoundException $r15;
        android.os.RemoteException $r16, r22;
        android.os.UserManager r17;
        java.util.List r19;

        r0 := @this: com.android.server.LockSettingsService;

     label01:
        $r7 = virtualinvoke r0.<com.android.server.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>("migrated", null, 0);

        if $r7 != null goto label05;

        $r14 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        r1 = virtualinvoke $r14.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r2 = <com.android.server.LockSettingsService: java.lang.String[] VALID_SETTINGS>;

        i0 = lengthof r2;

        i1 = 0;

     label02:
        if i1 >= i0 goto label04;

        r3 = r2[i1];

        r4 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(r1, r3);

        if r4 == null goto label03;

        virtualinvoke r0.<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>(r3, r4, 0);

     label03:
        i1 = i1 + 1;

        goto label02;

     label04:
        virtualinvoke r0.<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("migrated", "true", 0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Migrated lock settings to new location");

     label05:
        $r8 = virtualinvoke r0.<com.android.server.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>("migrated_user_specific", null, 0);

        if $r8 != null goto label16;

        $r9 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        r17 = (android.os.UserManager) $r10;

        $r11 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        r18 = virtualinvoke $r11.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r19 = virtualinvoke r17.<android.os.UserManager: java.util.List getUsers()>();

        i8 = 0;

     label06:
        $i4 = interfaceinvoke r19.<java.util.List: int size()>();

        if i8 >= $i4 goto label15;

        $r13 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(i8);

        $r12 = (android.content.pm.UserInfo) $r13;

        i9 = $r12.<android.content.pm.UserInfo: int id>;

        r5 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r18, "lock_screen_owner_info", i9);

        if r5 == null goto label07;

        virtualinvoke r0.<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("lock_screen_owner_info", r5, i9);

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r18, r5, "", i9);

     label07:
        i2 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>(r18, "lock_screen_owner_info_enabled", i9);

        if i2 == 0 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        z0 = $z3;

        if z0 == 0 goto label10;

        $l5 = 1L;

        goto label11;

     label10:
        $l5 = 0L;

     label11:
        virtualinvoke r0.<com.android.server.LockSettingsService: void setLong(java.lang.String,long,int)>("lock_screen_owner_info_enabled", $l5, i9);

     label12:
        goto label14;

     label13:
        $r15 := @caughtexception;

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z4 != 0 goto label14;

        virtualinvoke r0.<com.android.server.LockSettingsService: void setLong(java.lang.String,long,int)>("lock_screen_owner_info_enabled", 1L, i9);

     label14:
        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r18, "lock_screen_owner_info_enabled", 0, i9);

        i8 = i8 + 1;

        goto label06;

     label15:
        virtualinvoke r0.<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("migrated_user_specific", "true", 0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Migrated per-user lock settings to new location");

     label16:
        goto label18;

     label17:
        $r16 := @caughtexception;

        r22 = $r16;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Unable to migrate old data", r22);

     label18:
        return;

        catch android.provider.Settings$SettingNotFoundException from label07 to label12 with label13;
        catch android.os.RemoteException from label01 to label16 with label17;
    }

    private final void checkWritePermission(int)
    {
        com.android.server.LockSettingsService r0;
        int i0;
        android.content.Context $r1;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE", "LockSettingsWrite");

        return;
    }

    private final void checkPasswordReadPermission(int)
    {
        com.android.server.LockSettingsService r0;
        int i0;
        android.content.Context $r1;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE", "LockSettingsRead");

        return;
    }

    private final void checkReadPermission(java.lang.String, int)
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, r2, $r15;
        int i0, i1, i2, $i3, $i4;
        java.lang.String[] $r3, $r4;
        boolean $z0;
        android.content.Context $r5;
        java.lang.SecurityException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = 0;

     label1:
        $r3 = <com.android.server.LockSettingsService: java.lang.String[] READ_PROFILE_PROTECTED_SETTINGS>;

        $i3 = lengthof $r3;

        if i2 >= $i3 goto label3;

        $r4 = <com.android.server.LockSettingsService: java.lang.String[] READ_PROFILE_PROTECTED_SETTINGS>;

        r2 = $r4[i2];

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r5 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        $i4 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.READ_PROFILE");

        if $i4 == 0 goto label2;

        $r6 = new java.lang.SecurityException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid=");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" needs permission ");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.READ_PROFILE");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to read ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r15);

        throw $r6;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public void setBoolean(java.lang.String, boolean, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r2;
        boolean z0;
        int i0;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkWritePermission(int)>(i0);

        if z0 == 0 goto label1;

        $r2 = "1";

        goto label2;

     label1:
        $r2 = "0";

     label2:
        specialinvoke r0.<com.android.server.LockSettingsService: void writeToDb(java.lang.String,java.lang.String,int)>(r1, $r2, i0);

        return;
    }

    public void setLong(java.lang.String, long, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r2;
        long l0;
        int i1;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkWritePermission(int)>(i1);

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        specialinvoke r0.<com.android.server.LockSettingsService: void writeToDb(java.lang.String,java.lang.String,int)>(r1, $r2, i1);

        return;
    }

    public void setString(java.lang.String, java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkWritePermission(int)>(i0);

        specialinvoke r0.<com.android.server.LockSettingsService: void writeToDb(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return;
    }

    public boolean getBoolean(java.lang.String, boolean, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, r2;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkReadPermission(java.lang.String,int)>(r1, i0);

        r2 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String readFromDb(java.lang.String,java.lang.String,int)>(r1, null, i0);

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z1 == 0 goto label1;

        $z4 = z0;

        goto label4;

     label1:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z3 == 0 goto label3;

     label2:
        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    public long getLong(java.lang.String, long, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, r2;
        long l0, $l2;
        int i1;
        boolean $z0;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkReadPermission(java.lang.String,int)>(r1, i1);

        r2 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String readFromDb(java.lang.String,java.lang.String,int)>(r1, null, i1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label1;

        $l2 = l0;

        goto label2;

     label1:
        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);

     label2:
        return $l2;
    }

    public java.lang.String getString(java.lang.String, java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, r2, $r3;
        int i0;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkReadPermission(java.lang.String,int)>(r1, i0);

        $r3 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String readFromDb(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return $r3;
    }

    public void registerObserver(com.android.internal.widget.ILockSettingsObserver) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        com.android.internal.widget.ILockSettingsObserver r1, $r7, $r14;
        java.util.ArrayList r2, $r4, $r5, $r9, $r10;
        int i0, $i1;
        boolean z0;
        java.lang.Throwable r3, $r18;
        com.android.server.LockSettingsService$LockSettingsObserver $r6, $r11, r20;
        android.os.IBinder $r8, $r13, $r16;
        java.lang.Object $r12;
        java.lang.String $r15, $r17;
        java.lang.IllegalStateException $r19;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: com.android.internal.widget.ILockSettingsObserver;

        $r4 = r0.<com.android.server.LockSettingsService: java.util.ArrayList mObservers>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        i0 = 0;

     label02:
        $r5 = r0.<com.android.server.LockSettingsService: java.util.ArrayList mObservers>;

        $i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label06;

        $r10 = r0.<com.android.server.LockSettingsService: java.util.ArrayList mObservers>;

        $r12 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r11 = (com.android.server.LockSettingsService$LockSettingsObserver) $r12;

        $r14 = $r11.<com.android.server.LockSettingsService$LockSettingsObserver: com.android.internal.widget.ILockSettingsObserver remote>;

        $r13 = interfaceinvoke $r14.<com.android.internal.widget.ILockSettingsObserver: android.os.IBinder asBinder()>();

        $r16 = interfaceinvoke r1.<com.android.internal.widget.ILockSettingsObserver: android.os.IBinder asBinder()>();

        if $r13 != $r16 goto label05;

        $r15 = "1";

        $r17 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.debuggable", "0");

        z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if z0 == 0 goto label03;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Observer was already registered.");

        throw $r19;

     label03:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockSettingsService", "Observer was already registered.");

        exitmonitor r2;

     label04:
        return;

     label05:
        i0 = i0 + 1;

        goto label02;

     label06:
        $r6 = new com.android.server.LockSettingsService$LockSettingsObserver;

        specialinvoke $r6.<com.android.server.LockSettingsService$LockSettingsObserver: void <init>(com.android.server.LockSettingsService,com.android.server.LockSettingsService$1)>(r0, null);

        r20 = $r6;

        r20.<com.android.server.LockSettingsService$LockSettingsObserver: com.android.internal.widget.ILockSettingsObserver remote> = r1;

        $r7 = r20.<com.android.server.LockSettingsService$LockSettingsObserver: com.android.internal.widget.ILockSettingsObserver remote>;

        $r8 = interfaceinvoke $r7.<com.android.internal.widget.ILockSettingsObserver: android.os.IBinder asBinder()>();

        interfaceinvoke $r8.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r20, 0);

        $r9 = r0.<com.android.server.LockSettingsService: java.util.ArrayList mObservers>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r20);

        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r18 := @caughtexception;

        r3 = $r18;

        exitmonitor r2;

     label09:
        throw r3;

     label10:
        return;

        catch java.lang.Throwable from label01 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void unregisterObserver(com.android.internal.widget.ILockSettingsObserver) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        com.android.internal.widget.ILockSettingsObserver r1, $r9;
        java.util.ArrayList r2, $r4, $r5, $r6, $r12;
        int i0, $i1;
        java.lang.Throwable r3, $r14;
        java.lang.Object $r7;
        com.android.server.LockSettingsService$LockSettingsObserver $r8;
        android.os.IBinder $r10, $r11;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: com.android.internal.widget.ILockSettingsObserver;

        $r4 = r0.<com.android.server.LockSettingsService: java.util.ArrayList mObservers>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        i0 = 0;

     label2:
        $r5 = r0.<com.android.server.LockSettingsService: java.util.ArrayList mObservers>;

        $i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label5;

        $r6 = r0.<com.android.server.LockSettingsService: java.util.ArrayList mObservers>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r8 = (com.android.server.LockSettingsService$LockSettingsObserver) $r7;

        $r9 = $r8.<com.android.server.LockSettingsService$LockSettingsObserver: com.android.internal.widget.ILockSettingsObserver remote>;

        $r10 = interfaceinvoke $r9.<com.android.internal.widget.ILockSettingsObserver: android.os.IBinder asBinder()>();

        $r11 = interfaceinvoke r1.<com.android.internal.widget.ILockSettingsObserver: android.os.IBinder asBinder()>();

        if $r10 != $r11 goto label4;

        $r12 = r0.<com.android.server.LockSettingsService: java.util.ArrayList mObservers>;

        virtualinvoke $r12.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        exitmonitor r2;

     label3:
        return;

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r14 := @caughtexception;

        r3 = $r14;

        exitmonitor r2;

     label8:
        throw r3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void notifyObservers(java.lang.String, int)
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r15;
        int i0, i1, $i2;
        java.util.ArrayList r2, $r5, $r6, $r7;
        android.os.RemoteException r3, $r11;
        java.lang.Throwable r4, $r16;
        java.lang.Object $r8;
        com.android.server.LockSettingsService$LockSettingsObserver $r9;
        com.android.internal.widget.ILockSettingsObserver $r10;
        java.lang.StringBuilder $r12, $r13, $r14;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r5 = r0.<com.android.server.LockSettingsService: java.util.ArrayList mObservers>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        i1 = 0;

     label02:
        $r6 = r0.<com.android.server.LockSettingsService: java.util.ArrayList mObservers>;

        $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i1 >= $i2 goto label07;

     label03:
        $r7 = r0.<com.android.server.LockSettingsService: java.util.ArrayList mObservers>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r9 = (com.android.server.LockSettingsService$LockSettingsObserver) $r8;

        $r10 = $r9.<com.android.server.LockSettingsService$LockSettingsObserver: com.android.internal.widget.ILockSettingsObserver remote>;

        interfaceinvoke $r10.<com.android.internal.widget.ILockSettingsObserver: void onLockSettingChanged(java.lang.String,int)>(r1, i0);

     label04:
        goto label06;

     label05:
        $r11 := @caughtexception;

        r3 = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to notify ILockSettingsObserver: ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockSettingsService", $r15);

     label06:
        i1 = i1 + 1;

        goto label02;

     label07:
        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r16 := @caughtexception;

        r4 = $r16;

        exitmonitor r2;

     label10:
        throw r4;

     label11:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private int getUserParentOrSelfId(int)
    {
        com.android.server.LockSettingsService r0;
        int i0, $i1;
        android.os.UserManager r1;
        android.content.pm.UserInfo r2;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $r3 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        r1 = (android.os.UserManager) $r4;

        r2 = virtualinvoke r1.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i0);

        if r2 == null goto label1;

        $i1 = r2.<android.content.pm.UserInfo: int id>;

        return $i1;

     label1:
        return i0;
    }

    private java.lang.String getLockPatternFilename(int)
    {
        com.android.server.LockSettingsService r0;
        int i0, i1;
        java.lang.String r1, $r4, $r9, $r13;
        java.lang.StringBuilder $r2, $r5, $r6, $r10, $r11, $r12;
        java.io.File $r3, $r7, $r8;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/system/");

        r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = specialinvoke r0.<com.android.server.LockSettingsService: int getUserParentOrSelfId(int)>(i0);

        if i1 != 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gesture.key");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label1:
        $r7 = new java.io.File;

        $r8 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i1);

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "gesture.key");

        $r9 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r9;
    }

    private java.lang.String getLockPasswordFilename(int)
    {
        com.android.server.LockSettingsService r0;
        int i0, i1;
        java.lang.String r1, $r4, $r9, $r13;
        java.lang.StringBuilder $r2, $r5, $r6, $r10, $r11, $r12;
        java.io.File $r3, $r7, $r8;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        i1 = specialinvoke r0.<com.android.server.LockSettingsService: int getUserParentOrSelfId(int)>(i0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/system/");

        r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        if i1 != 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("password.key");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label1:
        $r7 = new java.io.File;

        $r8 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i1);

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "password.key");

        $r9 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r9;
    }

    public boolean havePassword(int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        int i0;
        java.io.File $r1;
        java.lang.String $r2;
        long $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r2 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPasswordFilename(int)>(i0);

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        $l1 = virtualinvoke $r1.<java.io.File: long length()>();

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean havePattern(int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        int i0;
        java.io.File $r1;
        java.lang.String $r2;
        long $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r2 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPatternFilename(int)>(i0);

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        $l1 = virtualinvoke $r1.<java.io.File: long length()>();

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void maybeUpdateKeystore(java.lang.String, int)
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3;
        android.os.UserManager r2;
        android.security.KeyStore r3;
        java.util.List r4;
        boolean z0, $z1, $z4;
        java.util.Iterator r5;
        android.content.pm.UserInfo r6;
        android.content.Context $r7;
        java.lang.Object $r8, $r9;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r7 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        r2 = (android.os.UserManager) $r8;

        r3 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        r4 = virtualinvoke r2.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if i0 != 0 goto label1;

        $i3 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i3 != 1 goto label1;

        $z4 = virtualinvoke r3.<android.security.KeyStore: boolean isEmpty()>();

        if $z4 != 0 goto label1;

        z0 = 0;

     label1:
        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.content.pm.UserInfo) $r9;

        $i2 = r6.<android.content.pm.UserInfo: int id>;

        i1 = staticinvoke <android.os.UserHandle: int getUid(int,int)>($i2, 1000);

        if z0 == 0 goto label3;

        virtualinvoke r3.<android.security.KeyStore: boolean resetUid(int)>(i1);

        goto label4;

     label3:
        virtualinvoke r3.<android.security.KeyStore: boolean passwordUid(java.lang.String,int)>(r1, i1);

     label4:
        goto label2;

     label5:
        return;
    }

    public void setLockPattern(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r4;
        int i0;
        byte[] r2;
        java.util.List $r3;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkWritePermission(int)>(i0);

        specialinvoke r0.<com.android.server.LockSettingsService: void maybeUpdateKeystore(java.lang.String,int)>(r1, i0);

        $r3 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.util.List stringToPattern(java.lang.String)>(r1);

        r2 = staticinvoke <com.android.internal.widget.LockPatternUtils: byte[] patternToHash(java.util.List)>($r3);

        $r4 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPatternFilename(int)>(i0);

        specialinvoke r0.<com.android.server.LockSettingsService: void writeFile(java.lang.String,byte[])>($r4, r2);

        return;
    }

    public void setLockPassword(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r2;
        int i0;
        com.android.internal.widget.LockPatternUtils $r3;
        byte[] $r4;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkWritePermission(int)>(i0);

        specialinvoke r0.<com.android.server.LockSettingsService: void maybeUpdateKeystore(java.lang.String,int)>(r1, i0);

        $r2 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPasswordFilename(int)>(i0);

        $r3 = r0.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $r4 = virtualinvoke $r3.<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String,int)>(r1, i0);

        specialinvoke r0.<com.android.server.LockSettingsService: void writeFile(java.lang.String,byte[])>($r2, $r4);

        return;
    }

    public boolean checkPattern(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r6, $r11, $r17;
        int i0, i1, $i3, $i4;
        java.io.RandomAccessFile r2, $r5;
        byte[] r3, r4;
        boolean z0, $z1;
        long $l2;
        java.util.List $r7;
        java.lang.StringBuilder $r8, $r10, $r12, $r14, $r15, $r16;
        java.io.IOException $r9, r19;
        java.io.FileNotFoundException $r13, r18;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkPasswordReadPermission(int)>(i0);

     label1:
        $r5 = new java.io.RandomAccessFile;

        $r6 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPatternFilename(int)>(i0);

        specialinvoke $r5.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r6, "r");

        r2 = $r5;

        $l2 = virtualinvoke r2.<java.io.RandomAccessFile: long length()>();

        $i3 = (int) $l2;

        r3 = newarray (byte)[$i3];

        $i4 = lengthof r3;

        i1 = virtualinvoke r2.<java.io.RandomAccessFile: int read(byte[],int,int)>(r3, 0, $i4);

        virtualinvoke r2.<java.io.RandomAccessFile: void close()>();

        if i1 > 0 goto label3;

     label2:
        return 1;

     label3:
        $r7 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.util.List stringToPattern(java.lang.String)>(r1);

        r4 = staticinvoke <com.android.internal.widget.LockPatternUtils: byte[] patternToHash(java.util.List)>($r7);

        z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r3, r4);

        if z0 == 0 goto label4;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 != 0 goto label4;

        specialinvoke r0.<com.android.server.LockSettingsService: void maybeUpdateKeystore(java.lang.String,int)>(r1, i0);

     label4:
        return z0;

     label5:
        $r13 := @caughtexception;

        r18 = $r13;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read file ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r18);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", $r17);

        goto label7;

     label6:
        $r9 := @caughtexception;

        r19 = $r9;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read file ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", $r11);

     label7:
        return 1;

        catch java.io.FileNotFoundException from label1 to label2 with label5;
        catch java.io.FileNotFoundException from label3 to label4 with label5;
        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
    }

    public boolean checkPassword(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r6, $r11, $r17;
        int i0, i1, $i3, $i4;
        java.io.RandomAccessFile r2, $r5;
        byte[] r3, r4;
        boolean z0, $z1;
        long $l2;
        com.android.internal.widget.LockPatternUtils $r7;
        java.lang.StringBuilder $r8, $r10, $r12, $r14, $r15, $r16;
        java.io.IOException $r9, r19;
        java.io.FileNotFoundException $r13, r18;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkPasswordReadPermission(int)>(i0);

     label1:
        $r5 = new java.io.RandomAccessFile;

        $r6 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPasswordFilename(int)>(i0);

        specialinvoke $r5.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r6, "r");

        r2 = $r5;

        $l2 = virtualinvoke r2.<java.io.RandomAccessFile: long length()>();

        $i3 = (int) $l2;

        r3 = newarray (byte)[$i3];

        $i4 = lengthof r3;

        i1 = virtualinvoke r2.<java.io.RandomAccessFile: int read(byte[],int,int)>(r3, 0, $i4);

        virtualinvoke r2.<java.io.RandomAccessFile: void close()>();

        if i1 > 0 goto label3;

     label2:
        return 1;

     label3:
        $r7 = r0.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        r4 = virtualinvoke $r7.<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String,int)>(r1, i0);

        z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r3, r4);

        if z0 == 0 goto label4;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 != 0 goto label4;

        specialinvoke r0.<com.android.server.LockSettingsService: void maybeUpdateKeystore(java.lang.String,int)>(r1, i0);

     label4:
        return z0;

     label5:
        $r13 := @caughtexception;

        r18 = $r13;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read file ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r18);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", $r17);

        goto label7;

     label6:
        $r9 := @caughtexception;

        r19 = $r9;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read file ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", $r11);

     label7:
        return 1;

        catch java.io.FileNotFoundException from label1 to label2 with label5;
        catch java.io.FileNotFoundException from label3 to label4 with label5;
        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
    }

    public boolean checkVoldPassword(int) throws android.os.RemoteException
    {
        com.android.server.LockSettingsService r0;
        int i0;
        android.os.storage.IMountService r1;
        java.lang.String r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.internal.widget.LockPatternUtils $r4, $r5;
        java.lang.Exception $r6, $r7;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.LockSettingsService: boolean mFirstCallToVold>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        r0.<com.android.server.LockSettingsService: boolean mFirstCallToVold> = 0;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkPasswordReadPermission(int)>(i0);

        r1 = specialinvoke r0.<com.android.server.LockSettingsService: android.os.storage.IMountService getMountService()>();

        r2 = interfaceinvoke r1.<android.os.storage.IMountService: java.lang.String getPassword()>();

        interfaceinvoke r1.<android.os.storage.IMountService: void clearPassword()>();

        if r2 != null goto label02;

        return 0;

     label02:
        $r4 = r0.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z1 = virtualinvoke $r4.<com.android.internal.widget.LockPatternUtils: boolean isLockPatternEnabled()>();

        if $z1 == 0 goto label04;

        $z4 = virtualinvoke r0.<com.android.server.LockSettingsService: boolean checkPattern(java.lang.String,int)>(r2, i0);

        if $z4 == 0 goto label04;

     label03:
        return 1;

     label04:
        goto label06;

     label05:
        $r7 := @caughtexception;

     label06:
        $r5 = r0.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z2 = virtualinvoke $r5.<com.android.internal.widget.LockPatternUtils: boolean isLockPasswordEnabled()>();

        if $z2 == 0 goto label08;

        $z3 = virtualinvoke r0.<com.android.server.LockSettingsService: boolean checkPassword(java.lang.String,int)>(r2, i0);

        if $z3 == 0 goto label08;

     label07:
        return 1;

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

     label10:
        return 0;

        catch java.lang.Exception from label02 to label03 with label05;
        catch java.lang.Exception from label06 to label07 with label09;
    }

    public void removeUser(int)
    {
        com.android.server.LockSettingsService r0;
        int i0, i2;
        android.database.sqlite.SQLiteDatabase r1;
        android.os.UserManager r2;
        android.content.pm.UserInfo r3;
        java.io.File r4, $r15, $r16, r19;
        java.lang.Throwable r5, $r18;
        com.android.server.LockSettingsService$DatabaseHelper $r6;
        android.content.Context $r7;
        java.lang.Object $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r13;
        java.lang.String $r12, $r14, $r17;
        boolean $z1, $z2;
        android.security.KeyStore r20;

        r0 := @this: com.android.server.LockSettingsService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void checkWritePermission(int)>(i0);

        $r6 = r0.<com.android.server.LockSettingsService: com.android.server.LockSettingsService$DatabaseHelper mOpenHelper>;

        r1 = virtualinvoke $r6.<com.android.server.LockSettingsService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

     label1:
        $r7 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        r2 = (android.os.UserManager) $r8;

        r3 = virtualinvoke r2.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i0);

        if r3 != null goto label3;

        $r15 = new java.io.File;

        $r14 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPasswordFilename(int)>(i0);

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>($r14);

        r4 = $r15;

        $z1 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        virtualinvoke r4.<java.io.File: boolean delete()>();

     label2:
        $r16 = new java.io.File;

        $r17 = specialinvoke r0.<com.android.server.LockSettingsService: java.lang.String getLockPatternFilename(int)>(i0);

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>($r17);

        r19 = $r16;

        $z2 = virtualinvoke r19.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label3;

        virtualinvoke r19.<java.io.File: boolean delete()>();

     label3:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("user=\'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("locksettings", $r12, null);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label4:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        goto label7;

     label5:
        $r18 := @caughtexception;

        r5 = $r18;

     label6:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw r5;

     label7:
        r20 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        i2 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, 1000);

        virtualinvoke r20.<android.security.KeyStore: boolean resetUid(int)>(i2);

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void writeFile(java.lang.String, byte[])
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, $r9;
        byte[] r2;
        java.io.RandomAccessFile r3, $r4;
        int $i0, $i1;
        java.io.IOException $r5, r10;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

     label1:
        $r4 = new java.io.RandomAccessFile;

        specialinvoke $r4.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r1, "rw");

        r3 = $r4;

        if r2 == null goto label2;

        $i0 = lengthof r2;

        if $i0 != 0 goto label3;

     label2:
        virtualinvoke r3.<java.io.RandomAccessFile: void setLength(long)>(0L);

        goto label4;

     label3:
        $i1 = lengthof r2;

        virtualinvoke r3.<java.io.RandomAccessFile: void write(byte[],int,int)>(r2, 0, $i1);

     label4:
        virtualinvoke r3.<java.io.RandomAccessFile: void close()>();

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        r10 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error writing to file ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", $r9);

     label7:
        return;

        catch java.io.IOException from label1 to label5 with label6;
    }

    private void writeToDb(java.lang.String, java.lang.String, int)
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, r2;
        int i0;
        com.android.server.LockSettingsService$DatabaseHelper $r3;
        android.database.sqlite.SQLiteDatabase $r4;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.LockSettingsService: com.android.server.LockSettingsService$DatabaseHelper mOpenHelper>;

        $r4 = virtualinvoke $r3.<com.android.server.LockSettingsService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        specialinvoke r0.<com.android.server.LockSettingsService: void writeToDb(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,int)>($r4, r1, r2, i0);

        virtualinvoke r0.<com.android.server.LockSettingsService: void notifyObservers(java.lang.String,int)>(r1, i0);

        return;
    }

    private void writeToDb(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String, int)
    {
        com.android.server.LockSettingsService r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2, r3, $r9;
        int i0;
        android.content.ContentValues r4, $r6;
        java.lang.Throwable r5, $r10;
        java.lang.Integer $r7;
        java.lang.String[] $r8;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $r6 = new android.content.ContentValues;

        specialinvoke $r6.<android.content.ContentValues: void <init>()>();

        r4 = $r6;

        virtualinvoke r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", r2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("user", $r7);

        virtualinvoke r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("value", r3);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label1:
        $r8 = newarray (java.lang.String)[2];

        $r8[0] = r2;

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r8[1] = $r9;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("locksettings", "name=? AND user=?", $r8);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("locksettings", null, r4);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label2:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        goto label5;

     label3:
        $r10 := @caughtexception;

        r5 = $r10;

     label4:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.lang.String readFromDb(java.lang.String, java.lang.String, int)
    {
        com.android.server.LockSettingsService r0;
        java.lang.String r1, r2, r4, $r9;
        int i0;
        android.database.Cursor r3, $r10;
        android.database.sqlite.SQLiteDatabase r5;
        com.android.server.LockSettingsService$DatabaseHelper $r6;
        java.lang.String[] $r7, $r8;
        boolean $z0;

        r0 := @this: com.android.server.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r4 = r2;

        $r6 = r0.<com.android.server.LockSettingsService: com.android.server.LockSettingsService$DatabaseHelper mOpenHelper>;

        r5 = virtualinvoke $r6.<com.android.server.LockSettingsService$DatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r8 = <com.android.server.LockSettingsService: java.lang.String[] COLUMNS_FOR_QUERY>;

        $r7 = newarray (java.lang.String)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r7[0] = $r9;

        $r7[1] = r1;

        $r10 = virtualinvoke r5.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("locksettings", $r8, "user=? AND name=?", $r7, null, null, null);

        r3 = $r10;

        if $r10 == null goto label2;

        $z0 = interfaceinvoke r3.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label1;

        r4 = interfaceinvoke r3.<android.database.Cursor: java.lang.String getString(int)>(0);

     label1:
        interfaceinvoke r3.<android.database.Cursor: void close()>();

     label2:
        return r4;
    }

    private android.os.storage.IMountService getMountService()
    {
        com.android.server.LockSettingsService r0;
        android.os.IBinder r1;
        android.os.storage.IMountService $r2;

        r0 := @this: com.android.server.LockSettingsService;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        if r1 == null goto label1;

        $r2 = staticinvoke <android.os.storage.IMountService$Stub: android.os.storage.IMountService asInterface(android.os.IBinder)>(r1);

        return $r2;

     label1:
        return null;
    }

    static android.content.Context access$000(com.android.server.LockSettingsService)
    {
        com.android.server.LockSettingsService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.LockSettingsService;

        $r1 = r0.<com.android.server.LockSettingsService: android.content.Context mContext>;

        return $r1;
    }

    static void access$200(com.android.server.LockSettingsService, android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String, int)
    {
        com.android.server.LockSettingsService r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2, r3;
        int i0;

        r0 := @parameter0: com.android.server.LockSettingsService;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        specialinvoke r0.<com.android.server.LockSettingsService: void writeToDb(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,int)>(r1, r2, r3, i0);

        return;
    }

    static com.android.internal.widget.LockPatternUtils access$300(com.android.server.LockSettingsService)
    {
        com.android.server.LockSettingsService r0;
        com.android.internal.widget.LockPatternUtils $r1;

        r0 := @parameter0: com.android.server.LockSettingsService;

        $r1 = r0.<com.android.server.LockSettingsService: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        return $r1;
    }

    static java.util.ArrayList access$400(com.android.server.LockSettingsService)
    {
        com.android.server.LockSettingsService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.LockSettingsService;

        $r1 = r0.<com.android.server.LockSettingsService: java.util.ArrayList mObservers>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1, $r2;

        <com.android.server.LockSettingsService: java.lang.String LOCK_PASSWORD_FILE> = "password.key";

        <com.android.server.LockSettingsService: java.lang.String LOCK_PATTERN_FILE> = "gesture.key";

        <com.android.server.LockSettingsService: java.lang.String SYSTEM_DIRECTORY> = "/system/";

        <com.android.server.LockSettingsService: java.lang.String COLUMN_VALUE> = "value";

        <com.android.server.LockSettingsService: java.lang.String COLUMN_USERID> = "user";

        <com.android.server.LockSettingsService: java.lang.String COLUMN_KEY> = "name";

        <com.android.server.LockSettingsService: java.lang.String TABLE> = "locksettings";

        <com.android.server.LockSettingsService: java.lang.String TAG> = "LockSettingsService";

        <com.android.server.LockSettingsService: java.lang.String SYSTEM_DEBUGGABLE> = "ro.debuggable";

        <com.android.server.LockSettingsService: java.lang.String PERMISSION> = "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE";

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "value";

        <com.android.server.LockSettingsService: java.lang.String[] COLUMNS_FOR_QUERY> = $r0;

        $r1 = newarray (java.lang.String)[16];

        $r1[0] = "lockscreen.lockedoutpermanently";

        $r1[1] = "lockscreen.lockoutattemptdeadline";

        $r1[2] = "lockscreen.patterneverchosen";

        $r1[3] = "lockscreen.password_type";

        $r1[4] = "lockscreen.password_type_alternate";

        $r1[5] = "lockscreen.password_salt";

        $r1[6] = "lockscreen.disabled";

        $r1[7] = "lockscreen.options";

        $r1[8] = "lockscreen.biometric_weak_fallback";

        $r1[9] = "lockscreen.biometricweakeverchosen";

        $r1[10] = "lockscreen.power_button_instantly_locks";

        $r1[11] = "lockscreen.passwordhistory";

        $r1[12] = "lock_pattern_autolock";

        $r1[13] = "lock_biometric_weak_flags";

        $r1[14] = "lock_pattern_visible_pattern";

        $r1[15] = "lock_pattern_tactile_feedback_enabled";

        <com.android.server.LockSettingsService: java.lang.String[] VALID_SETTINGS> = $r1;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "lock_screen_owner_info_enabled";

        $r2[1] = "lock_screen_owner_info";

        <com.android.server.LockSettingsService: java.lang.String[] READ_PROFILE_PROTECTED_SETTINGS> = $r2;

        return;
    }
}
