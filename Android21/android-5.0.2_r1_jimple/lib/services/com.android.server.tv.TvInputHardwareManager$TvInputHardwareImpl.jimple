class com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl extends android.media.tv.ITvInputHardware$Stub
{
    private final android.media.tv.TvInputHardwareInfo mInfo;
    private boolean mReleased;
    private final java.lang.Object mImplLock;
    private final android.media.AudioManager$OnAudioPortUpdateListener mAudioListener;
    private int mOverrideAudioType;
    private java.lang.String mOverrideAudioAddress;
    private android.media.AudioDevicePort mAudioSource;
    private android.media.AudioDevicePort mAudioSink;
    private android.media.AudioPatch mAudioPatch;
    private float mCommittedVolume;
    private float mVolume;
    private android.media.tv.TvStreamConfig mActiveConfig;
    private int mDesiredSamplingRate;
    private int mDesiredChannelMask;
    private int mDesiredFormat;
    final com.android.server.tv.TvInputHardwareManager this$0;

    public void <init>(com.android.server.tv.TvInputHardwareManager, android.media.tv.TvInputHardwareInfo)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        com.android.server.tv.TvInputHardwareManager r1;
        android.media.tv.TvInputHardwareInfo r2, $r7, $r8, $r9;
        java.lang.Object $r3;
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl$1 $r4;
        android.media.AudioManager $r5;
        android.media.AudioManager$OnAudioPortUpdateListener $r6;
        int $i0, $i1;
        java.lang.String $r10;
        android.media.AudioDevicePort $r11, $r12;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter0: com.android.server.tv.TvInputHardwareManager;

        r2 := @parameter1: android.media.tv.TvInputHardwareInfo;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0> = r1;

        specialinvoke r0.<android.media.tv.ITvInputHardware$Stub: void <init>()>();

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean mReleased> = 0;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock> = $r3;

        $r4 = new com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl$1;

        specialinvoke $r4.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl$1: void <init>(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl)>(r0);

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioManager$OnAudioPortUpdateListener mAudioListener> = $r4;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mOverrideAudioType> = 0;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.String mOverrideAudioAddress> = "";

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch> = null;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mCommittedVolume> = 0.0F;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mVolume> = 0.0F;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig> = null;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredSamplingRate> = 0;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredChannelMask> = 1;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredFormat> = 1;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo> = r2;

        $r5 = staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1300(com.android.server.tv.TvInputHardwareManager)>(r1);

        $r6 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioManager$OnAudioPortUpdateListener mAudioListener>;

        virtualinvoke $r5.<android.media.AudioManager: void registerAudioPortUpdateListener(android.media.AudioManager$OnAudioPortUpdateListener)>($r6);

        $r7 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i0 = virtualinvoke $r7.<android.media.tv.TvInputHardwareInfo: int getAudioType()>();

        if $i0 == 0 goto label1;

        $r8 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i1 = virtualinvoke $r8.<android.media.tv.TvInputHardwareInfo: int getAudioType()>();

        $r9 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $r10 = virtualinvoke $r9.<android.media.tv.TvInputHardwareInfo: java.lang.String getAudioAddress()>();

        $r11 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort findAudioDevicePort(int,java.lang.String)>($i1, $r10);

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource> = $r11;

        $r12 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort findAudioSinkFromAudioPolicy()>();

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSink> = $r12;

     label1:
        return;
    }

    private android.media.AudioDevicePort findAudioSinkFromAudioPolicy()
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        java.util.ArrayList r1, $r5;
        int i0, $i1, $i2, $i3;
        java.util.Iterator r2;
        android.media.AudioPort r3;
        android.media.AudioDevicePort r4;
        com.android.server.tv.TvInputHardwareManager $r6, $r8;
        android.media.AudioManager $r7, $r9;
        boolean $z0;
        java.lang.Object $r10;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r1 = $r5;

        $r6 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r7 = staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1300(com.android.server.tv.TvInputHardwareManager)>($r6);

        $i1 = virtualinvoke $r7.<android.media.AudioManager: int listAudioDevicePorts(java.util.ArrayList)>(r1);

        if $i1 != 0 goto label3;

        $r8 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r9 = staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1300(com.android.server.tv.TvInputHardwareManager)>($r8);

        i0 = virtualinvoke $r9.<android.media.AudioManager: int getDevicesForStream(int)>(3);

        r2 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.media.AudioPort) $r10;

        r4 = (android.media.AudioDevicePort) r3;

        $i3 = virtualinvoke r4.<android.media.AudioDevicePort: int type()>();

        $i2 = $i3 & i0;

        if $i2 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    private android.media.AudioDevicePort findAudioDevicePort(int, java.lang.String)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        int i0, $i1, $i2;
        java.lang.String r1, $r10;
        java.util.ArrayList r2, $r6;
        java.util.Iterator r3;
        android.media.AudioPort r4;
        android.media.AudioDevicePort r5;
        com.android.server.tv.TvInputHardwareManager $r7;
        android.media.AudioManager $r8;
        boolean $z0, $z1;
        java.lang.Object $r9;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i0 != 0 goto label1;

        return null;

     label1:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = $r6;

        $r7 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r8 = staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1300(com.android.server.tv.TvInputHardwareManager)>($r7);

        $i1 = virtualinvoke $r8.<android.media.AudioManager: int listAudioDevicePorts(java.util.ArrayList)>(r2);

        if $i1 == 0 goto label2;

        return null;

     label2:
        r3 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.media.AudioPort) $r9;

        r5 = (android.media.AudioDevicePort) r4;

        $i2 = virtualinvoke r5.<android.media.AudioDevicePort: int type()>();

        if $i2 != i0 goto label4;

        $r10 = virtualinvoke r5.<android.media.AudioDevicePort: java.lang.String address()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        return r5;

     label4:
        goto label3;

     label5:
        return null;
    }

    public void release()
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r11;
        com.android.server.tv.TvInputHardwareManager $r4, $r8;
        android.media.AudioManager $r5, $r9;
        android.media.AudioManager$OnAudioPortUpdateListener $r6;
        android.media.AudioPatch $r7, $r10;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        $r3 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r5 = staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1300(com.android.server.tv.TvInputHardwareManager)>($r4);

        $r6 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioManager$OnAudioPortUpdateListener mAudioListener>;

        virtualinvoke $r5.<android.media.AudioManager: void unregisterAudioPortUpdateListener(android.media.AudioManager$OnAudioPortUpdateListener)>($r6);

        $r7 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch>;

        if $r7 == null goto label2;

        $r8 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r9 = staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1300(com.android.server.tv.TvInputHardwareManager)>($r8);

        $r10 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch>;

        virtualinvoke $r9.<android.media.AudioManager: int releaseAudioPatch(android.media.AudioPatch)>($r10);

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch> = null;

     label2:
        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean mReleased> = 1;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean setSurface(android.view.Surface, android.media.tv.TvStreamConfig) throws android.os.RemoteException
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.view.Surface r1;
        android.media.tv.TvStreamConfig r2, $r6, $r11, $r14, $r18, $r19;
        java.lang.Object r3, $r5;
        java.lang.Throwable r4, $r20;
        boolean $z0, $z1;
        com.android.server.tv.TvInputHardwareManager $r7, $r10, $r16;
        com.android.server.tv.TvInputHal $r8, $r13, $r15;
        android.media.tv.TvInputHardwareInfo $r9, $r12, $r17;
        int $i1, $i2, $i3, i4, i5;
        java.lang.IllegalStateException $r21;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter0: android.view.Surface;

        r2 := @parameter1: android.media.tv.TvStreamConfig;

        $r5 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        r3 = $r5;

        entermonitor $r5;

     label01:
        $z0 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean mReleased>;

        if $z0 == 0 goto label02;

        $r21 = new java.lang.IllegalStateException;

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Device already released.");

        throw $r21;

     label02:
        if r1 == null goto label04;

        if r2 != null goto label04;

        exitmonitor r3;

     label03:
        return 0;

     label04:
        if r1 != null goto label06;

        $r19 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig>;

        if $r19 != null goto label06;

        exitmonitor r3;

     label05:
        return 0;

     label06:
        if r1 != null goto label07;

        $r16 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r15 = staticinvoke <com.android.server.tv.TvInputHardwareManager: com.android.server.tv.TvInputHal access$1400(com.android.server.tv.TvInputHardwareManager)>($r16);

        $r17 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i3 = virtualinvoke $r17.<android.media.tv.TvInputHardwareInfo: int getDeviceId()>();

        $r18 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig>;

        i4 = virtualinvoke $r15.<com.android.server.tv.TvInputHal: int removeStream(int,android.media.tv.TvStreamConfig)>($i3, $r18);

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig> = null;

        goto label10;

     label07:
        $r6 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig>;

        if r2 == $r6 goto label09;

        $r11 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig>;

        if $r11 == null goto label09;

        $r10 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r13 = staticinvoke <com.android.server.tv.TvInputHardwareManager: com.android.server.tv.TvInputHal access$1400(com.android.server.tv.TvInputHardwareManager)>($r10);

        $r12 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i2 = virtualinvoke $r12.<android.media.tv.TvInputHardwareInfo: int getDeviceId()>();

        $r14 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig>;

        i5 = virtualinvoke $r13.<com.android.server.tv.TvInputHal: int removeStream(int,android.media.tv.TvStreamConfig)>($i2, $r14);

        if i5 == 0 goto label09;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig> = null;

        exitmonitor r3;

     label08:
        return 0;

     label09:
        $r7 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r8 = staticinvoke <com.android.server.tv.TvInputHardwareManager: com.android.server.tv.TvInputHal access$1400(com.android.server.tv.TvInputHardwareManager)>($r7);

        $r9 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i1 = virtualinvoke $r9.<android.media.tv.TvInputHardwareInfo: int getDeviceId()>();

        i4 = virtualinvoke $r8.<com.android.server.tv.TvInputHal: int addStream(int,android.view.Surface,android.media.tv.TvStreamConfig)>($i1, r1, r2);

        if i4 != 0 goto label10;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig> = r2;

     label10:
        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void updateAudioConfigLocked()>();

        if i4 != 0 goto label11;

        $z1 = 1;

        goto label12;

     label11:
        $z1 = 0;

     label12:
        exitmonitor r3;

     label13:
        return $z1;

     label14:
        $r20 := @caughtexception;

        r4 = $r20;

        exitmonitor r3;

     label15:
        throw r4;

        catch java.lang.Throwable from label01 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label08 with label14;
        catch java.lang.Throwable from label09 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    private void updateAudioConfigLocked()
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        boolean z0, z1, $z2, z3;
        android.media.AudioGainConfig r1;
        android.media.AudioGain r2, r4;
        android.media.AudioGain[] r3, $r13;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35, i36, i37, i38;
        android.media.AudioDevicePort $r5, $r10, $r11, $r14, $r15, $r18, $r19, $r25;
        android.media.AudioPatch $r6, $r9, $r16, $r24;
        com.android.server.tv.TvInputHardwareManager $r7, $r20;
        android.media.AudioManager $r8, $r22;
        android.media.tv.TvStreamConfig $r12;
        android.media.AudioPatch[] $r17, r30;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        android.media.AudioPortConfig[] $r21, $r23;
        byte $b20, $b24;
        java.lang.String $r26;
        double $d0, $d1;
        int[] r27;
        android.media.AudioPortConfig r28, r29;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        z0 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean updateAudioSinkLocked()>();

        z1 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean updateAudioSourceLocked()>();

        $r5 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        if $r5 == null goto label01;

        $r10 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSink>;

        if $r10 == null goto label01;

        $r12 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvStreamConfig mActiveConfig>;

        if $r12 != null goto label03;

     label01:
        $r6 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch>;

        if $r6 == null goto label02;

        $r7 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r8 = staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1300(com.android.server.tv.TvInputHardwareManager)>($r7);

        $r9 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch>;

        virtualinvoke $r8.<android.media.AudioManager: int releaseAudioPatch(android.media.AudioPatch)>($r9);

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch> = null;

     label02:
        return;

     label03:
        r1 = null;

        $r11 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        $r13 = virtualinvoke $r11.<android.media.AudioDevicePort: android.media.AudioGain[] gains()>();

        $i3 = lengthof $r13;

        if $i3 <= 0 goto label12;

        $f2 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mVolume>;

        $f1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mCommittedVolume>;

        $b20 = $f2 cmpl $f1;

        if $b20 == 0 goto label12;

        r2 = null;

        $r25 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        r3 = virtualinvoke $r25.<android.media.AudioDevicePort: android.media.AudioGain[] gains()>();

        i0 = lengthof r3;

        i1 = 0;

     label04:
        if i1 >= i0 goto label06;

        r4 = r3[i1];

        $i32 = virtualinvoke r4.<android.media.AudioGain: int mode()>();

        $i30 = $i32 & 1;

        if $i30 == 0 goto label05;

        r2 = r4;

        goto label06;

     label05:
        i1 = i1 + 1;

        goto label04;

     label06:
        if r2 == null goto label11;

        $i22 = virtualinvoke r2.<android.media.AudioGain: int maxValue()>();

        $i21 = virtualinvoke r2.<android.media.AudioGain: int minValue()>();

        $i25 = $i22 - $i21;

        $i26 = virtualinvoke r2.<android.media.AudioGain: int stepValue()>();

        i34 = $i25 / $i26;

        i35 = virtualinvoke r2.<android.media.AudioGain: int minValue()>();

        $f3 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mVolume>;

        $b24 = $f3 cmpg 1.0F;

        if $b24 >= 0 goto label07;

        $i29 = virtualinvoke r2.<android.media.AudioGain: int stepValue()>();

        $f5 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mVolume>;

        $f4 = (float) i34;

        $f6 = $f5 * $f4;

        $d0 = (double) $f6;

        $d1 = $d0 + 0.5;

        $i31 = (int) $d1;

        $i33 = $i29 * $i31;

        i36 = i35 + $i33;

        goto label08;

     label07:
        i36 = virtualinvoke r2.<android.media.AudioGain: int maxValue()>();

     label08:
        i37 = 0;

        i38 = virtualinvoke r2.<android.media.AudioGain: int channelMask()>();

     label09:
        if i38 <= 0 goto label10;

        $i28 = i38 & 1;

        i37 = i37 + $i28;

        i38 = i38 >> 1;

        goto label09;

     label10:
        r27 = newarray (int)[i37];

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r27, i36);

        $i27 = virtualinvoke r2.<android.media.AudioGain: int channelMask()>();

        r1 = virtualinvoke r2.<android.media.AudioGain: android.media.AudioGainConfig buildConfig(int,int,int[],int)>(1, $i27, r27, 0);

        goto label12;

     label11:
        $r26 = staticinvoke <com.android.server.tv.TvInputHardwareManager: java.lang.String access$600()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r26, "No audio source gain with MODE_JOINT support exists.");

     label12:
        $r14 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        r28 = virtualinvoke $r14.<android.media.AudioDevicePort: android.media.AudioPortConfig activeConfig()>();

        $r15 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSink>;

        r29 = virtualinvoke $r15.<android.media.AudioDevicePort: android.media.AudioPortConfig activeConfig()>();

        $r17 = newarray (android.media.AudioPatch)[1];

        $r16 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch>;

        $r17[0] = $r16;

        r30 = $r17;

        if z1 != 0 goto label13;

        if z0 == 0 goto label14;

     label13:
        $z2 = 1;

        goto label15;

     label14:
        $z2 = 0;

     label15:
        z3 = $z2;

        if r29 == null goto label18;

        $i13 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredSamplingRate>;

        if $i13 == 0 goto label16;

        $i19 = virtualinvoke r29.<android.media.AudioPortConfig: int samplingRate()>();

        $i18 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredSamplingRate>;

        if $i19 != $i18 goto label18;

     label16:
        $i11 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredChannelMask>;

        if $i11 == 1 goto label17;

        $i15 = virtualinvoke r29.<android.media.AudioPortConfig: int channelMask()>();

        $i14 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredChannelMask>;

        if $i15 != $i14 goto label18;

     label17:
        $i12 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredFormat>;

        if $i12 == 1 goto label19;

        $i17 = virtualinvoke r29.<android.media.AudioPortConfig: int format()>();

        $i16 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredFormat>;

        if $i17 == $i16 goto label19;

     label18:
        $r18 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        $i6 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredSamplingRate>;

        $i4 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredChannelMask>;

        $i5 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredFormat>;

        r29 = virtualinvoke $r18.<android.media.AudioDevicePort: android.media.AudioDevicePortConfig buildConfig(int,int,int,android.media.AudioGainConfig)>($i6, $i4, $i5, null);

        z3 = 1;

     label19:
        if r28 == null goto label20;

        if r1 == null goto label21;

     label20:
        $r19 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        $i7 = virtualinvoke r29.<android.media.AudioPortConfig: int samplingRate()>();

        $i8 = virtualinvoke r29.<android.media.AudioPortConfig: int channelMask()>();

        $i9 = virtualinvoke r29.<android.media.AudioPortConfig: int format()>();

        r28 = virtualinvoke $r19.<android.media.AudioDevicePort: android.media.AudioDevicePortConfig buildConfig(int,int,int,android.media.AudioGainConfig)>($i7, $i8, $i9, r1);

        z3 = 1;

     label21:
        if z3 == 0 goto label22;

        $f0 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mVolume>;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mCommittedVolume> = $f0;

        $r20 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r22 = staticinvoke <com.android.server.tv.TvInputHardwareManager: android.media.AudioManager access$1300(com.android.server.tv.TvInputHardwareManager)>($r20);

        $r23 = newarray (android.media.AudioPortConfig)[1];

        $r23[0] = r28;

        $r21 = newarray (android.media.AudioPortConfig)[1];

        $r21[0] = r29;

        virtualinvoke $r22.<android.media.AudioManager: int createAudioPatch(android.media.AudioPatch[],android.media.AudioPortConfig[],android.media.AudioPortConfig[])>(r30, $r23, $r21);

        $r24 = r30[0];

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch> = $r24;

     label22:
        return;
    }

    public void setStreamVolume(float) throws android.os.RemoteException
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        float f0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        boolean $z0;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        f0 := @parameter0: float;

        $r3 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean mReleased>;

        if $z0 == 0 goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Device already released.");

        throw $r4;

     label2:
        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: float mVolume> = f0;

        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void updateAudioConfigLocked()>();

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean dispatchKeyEventToHdmi(android.view.KeyEvent) throws android.os.RemoteException
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.view.KeyEvent r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        android.media.tv.TvInputHardwareInfo $r5;
        int $i0;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter0: android.view.KeyEvent;

        $r4 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z0 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean mReleased>;

        if $z0 == 0 goto label2;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Device already released.");

        throw $r6;

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        $r5 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i0 = virtualinvoke $r5.<android.media.tv.TvInputHardwareInfo: int getType()>();

        if $i0 == 9 goto label7;

        return 0;

     label7:
        return 0;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private boolean startCapture(android.view.Surface, android.media.tv.TvStreamConfig)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.view.Surface r1;
        android.media.tv.TvStreamConfig r2;
        java.lang.Object r3, $r5;
        int i0, $i1, $i2;
        java.lang.Throwable r4, $r9;
        boolean $z0, $z1;
        com.android.server.tv.TvInputHardwareManager $r6;
        com.android.server.tv.TvInputHal $r7;
        android.media.tv.TvInputHardwareInfo $r8;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter0: android.view.Surface;

        r2 := @parameter1: android.media.tv.TvStreamConfig;

        $r5 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        r3 = $r5;

        entermonitor $r5;

     label01:
        $z0 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean mReleased>;

        if $z0 == 0 goto label03;

        exitmonitor r3;

     label02:
        return 0;

     label03:
        if r1 == null goto label04;

        if r2 != null goto label06;

     label04:
        exitmonitor r3;

     label05:
        return 0;

     label06:
        $i1 = virtualinvoke r2.<android.media.tv.TvStreamConfig: int getType()>();

        if $i1 == 2 goto label08;

        exitmonitor r3;

     label07:
        return 0;

     label08:
        $r6 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r7 = staticinvoke <com.android.server.tv.TvInputHardwareManager: com.android.server.tv.TvInputHal access$1400(com.android.server.tv.TvInputHardwareManager)>($r6);

        $r8 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i2 = virtualinvoke $r8.<android.media.tv.TvInputHardwareInfo: int getDeviceId()>();

        i0 = virtualinvoke $r7.<com.android.server.tv.TvInputHal: int addStream(int,android.view.Surface,android.media.tv.TvStreamConfig)>($i2, r1, r2);

        if i0 != 0 goto label09;

        $z1 = 1;

        goto label10;

     label09:
        $z1 = 0;

     label10:
        exitmonitor r3;

     label11:
        return $z1;

     label12:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r3;

     label13:
        throw r4;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private boolean stopCapture(android.media.tv.TvStreamConfig)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.media.tv.TvStreamConfig r1;
        java.lang.Object r2, $r4;
        int i0, $i1;
        java.lang.Throwable r3, $r8;
        boolean $z0, $z1;
        com.android.server.tv.TvInputHardwareManager $r5;
        com.android.server.tv.TvInputHal $r6;
        android.media.tv.TvInputHardwareInfo $r7;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter0: android.media.tv.TvStreamConfig;

        $r4 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        $z0 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean mReleased>;

        if $z0 == 0 goto label03;

        exitmonitor r2;

     label02:
        return 0;

     label03:
        if r1 != null goto label05;

        exitmonitor r2;

     label04:
        return 0;

     label05:
        $r5 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: com.android.server.tv.TvInputHardwareManager this$0>;

        $r6 = staticinvoke <com.android.server.tv.TvInputHardwareManager: com.android.server.tv.TvInputHal access$1400(com.android.server.tv.TvInputHardwareManager)>($r5);

        $r7 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i1 = virtualinvoke $r7.<android.media.tv.TvInputHardwareInfo: int getDeviceId()>();

        i0 = virtualinvoke $r6.<com.android.server.tv.TvInputHal: int removeStream(int,android.media.tv.TvStreamConfig)>($i1, r1);

        if i0 != 0 goto label06;

        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        exitmonitor r2;

     label08:
        return $z1;

     label09:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label10:
        throw r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private boolean updateAudioSourceLocked()
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.media.AudioDevicePort r1, $r6, $r7, $r8;
        android.media.tv.TvInputHardwareInfo $r2, $r3, $r4;
        int $i0, $i1;
        java.lang.String $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        $r2 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i0 = virtualinvoke $r2.<android.media.tv.TvInputHardwareInfo: int getAudioType()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        r1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        $r3 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i1 = virtualinvoke $r3.<android.media.tv.TvInputHardwareInfo: int getAudioType()>();

        $r4 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $r5 = virtualinvoke $r4.<android.media.tv.TvInputHardwareInfo: java.lang.String getAudioAddress()>();

        $r6 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort findAudioDevicePort(int,java.lang.String)>($i1, $r5);

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource> = $r6;

        $r7 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        if $r7 != null goto label3;

        if r1 == null goto label2;

        $z1 = 1;

        goto label5;

     label2:
        $z1 = 0;

        goto label5;

     label3:
        $r8 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource>;

        $z0 = virtualinvoke $r8.<android.media.AudioDevicePort: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    private boolean updateAudioSinkLocked()
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.media.AudioDevicePort r1, r2, $r5, $r6, $r7;
        android.media.tv.TvInputHardwareInfo $r3;
        int $i0, $i1, $i2;
        java.lang.String $r4;
        boolean $z0, $z1;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        $r3 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.tv.TvInputHardwareInfo mInfo>;

        $i0 = virtualinvoke $r3.<android.media.tv.TvInputHardwareInfo: int getAudioType()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        r1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSink>;

        $i1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mOverrideAudioType>;

        if $i1 != 0 goto label2;

        $r7 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort findAudioSinkFromAudioPolicy()>();

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSink> = $r7;

        goto label3;

     label2:
        $i2 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mOverrideAudioType>;

        $r4 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.String mOverrideAudioAddress>;

        r2 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort findAudioDevicePort(int,java.lang.String)>($i2, $r4);

        if r2 == null goto label3;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSink> = r2;

     label3:
        $r5 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSink>;

        if $r5 != null goto label5;

        if r1 == null goto label4;

        $z1 = 1;

        goto label7;

     label4:
        $z1 = 0;

        goto label7;

     label5:
        $r6 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSink>;

        $z0 = virtualinvoke $r6.<android.media.AudioDevicePort: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label6;

        $z1 = 1;

        goto label7;

     label6:
        $z1 = 0;

     label7:
        return $z1;
    }

    private void handleAudioSinkUpdated()
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        $r3 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void updateAudioConfigLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void overrideAudioSink(int, java.lang.String, int, int, int)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        int i0, i1, i2, i3;
        java.lang.String r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r4 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mOverrideAudioType> = i0;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.String mOverrideAudioAddress> = r1;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredSamplingRate> = i1;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredChannelMask> = i2;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: int mDesiredFormat> = i3;

        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void updateAudioConfigLocked()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static boolean access$400(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl, android.view.Surface, android.media.tv.TvStreamConfig)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.view.Surface r1;
        android.media.tv.TvStreamConfig r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter1: android.view.Surface;

        r2 := @parameter2: android.media.tv.TvStreamConfig;

        $z0 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean startCapture(android.view.Surface,android.media.tv.TvStreamConfig)>(r1, r2);

        return $z0;
    }

    static boolean access$500(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl, android.media.tv.TvStreamConfig)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.media.tv.TvStreamConfig r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter1: android.media.tv.TvStreamConfig;

        $z0 = specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: boolean stopCapture(android.media.tv.TvStreamConfig)>(r1);

        return $z0;
    }

    static java.lang.Object access$800(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        $r1 = r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: java.lang.Object mImplLock>;

        return $r1;
    }

    static void access$900(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void updateAudioConfigLocked()>();

        return;
    }

    static android.media.AudioDevicePort access$1002(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl, android.media.AudioDevicePort)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.media.AudioDevicePort r1;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter1: android.media.AudioDevicePort;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSource> = r1;

        return r1;
    }

    static android.media.AudioDevicePort access$1102(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl, android.media.AudioDevicePort)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.media.AudioDevicePort r1;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter1: android.media.AudioDevicePort;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioDevicePort mAudioSink> = r1;

        return r1;
    }

    static android.media.AudioPatch access$1202(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl, android.media.AudioPatch)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;
        android.media.AudioPatch r1;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        r1 := @parameter1: android.media.AudioPatch;

        r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: android.media.AudioPatch mAudioPatch> = r1;

        return r1;
    }

    static void access$2500(com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl)
    {
        com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl r0;

        r0 := @parameter0: com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl;

        specialinvoke r0.<com.android.server.tv.TvInputHardwareManager$TvInputHardwareImpl: void handleAudioSinkUpdated()>();

        return;
    }
}
